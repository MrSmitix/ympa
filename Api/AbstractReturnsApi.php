<?php

/**
 * Партнерский API Маркета
 * PHP version 8.x
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Api;


abstract class AbstractReturnsApi
{

    /**
     * Operation getReturn
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}`
     *
     * Информация о невыкупе или возврате
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     *
     * @return \OpenAPIServer\Model\GetReturnResponse|null
     */
    public function getReturn(int $campaignId, int $orderId, int $returnId): \OpenAPIServer\Model\GetReturnResponse|null
    {
        throw new \Exception('Not implemented');
    }

    /**
     * Operation getReturn (stream)
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}`
     *
     * Информация о невыкупе или возврате
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     *
     */
    public function getReturnStream(int $campaignId, int $orderId, int $returnId): void
    {
        throw new \Exception('Not implemented');
    }
    /**
     * Operation getReturnApplication
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application`
     *
     * Получение заявления на возврат
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     *
     * @return void
     */
    public function getReturnApplication(int $campaignId, int $orderId, int $returnId): void
    {
        throw new \Exception('Not implemented');
    }

    /**
     * Operation getReturnApplication (stream)
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application`
     *
     * Получение заявления на возврат
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     *
     */
    public function getReturnApplicationStream(int $campaignId, int $orderId, int $returnId): void
    {
        throw new \Exception('Not implemented');
    }
    /**
     * Operation getReturnPhoto
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}`
     *
     * Получение фотографии возврата
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     * @param int $itemId Идентификатор товара в возврате. (required)
     * @param string $imageHash Хеш ссылки изображения для загрузки. (required)
     *
     * @return void
     */
    public function getReturnPhoto(int $campaignId, int $orderId, int $returnId, int $itemId, string $imageHash): void
    {
        throw new \Exception('Not implemented');
    }

    /**
     * Operation getReturnPhoto (stream)
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}`
     *
     * Получение фотографии возврата
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     * @param int $itemId Идентификатор товара в возврате. (required)
     * @param string $imageHash Хеш ссылки изображения для загрузки. (required)
     *
     */
    public function getReturnPhotoStream(int $campaignId, int $orderId, int $returnId, int $itemId, string $imageHash): void
    {
        throw new \Exception('Not implemented');
    }
    /**
     * Operation getReturns
     *
     * Path: `/campaigns/{campaignId}/returns`
     *
     * Список невыкупов и возвратов
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param ?string $pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. (optional)
     * @param ?int $limit Количество значений на одной странице. (optional)
     * @param ?array $orderIds Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. (optional)
     * @param ?array $statuses Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. (optional)
     * @param  $type Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. (optional)
     * @param ?\DateTime $fromDate Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. (optional)
     * @param ?\DateTime $toDate Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. (optional)
     * @param ?\DateTime $fromDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. (optional) (deprecated)
     * @param ?\DateTime $toDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. (optional) (deprecated)
     *
     * @return \OpenAPIServer\Model\GetReturnsResponse|null
     */
    public function getReturns(int $campaignId, ?string $pageToken, ?int $limit, ?array $orderIds, ?array $statuses,  $type, ?\DateTime $fromDate, ?\DateTime $toDate, ?\DateTime $fromDate2, ?\DateTime $toDate2): \OpenAPIServer\Model\GetReturnsResponse|null
    {
        throw new \Exception('Not implemented');
    }

    /**
     * Operation getReturns (stream)
     *
     * Path: `/campaigns/{campaignId}/returns`
     *
     * Список невыкупов и возвратов
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param ?string $pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. (optional)
     * @param ?int $limit Количество значений на одной странице. (optional)
     * @param ?array $orderIds Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. (optional)
     * @param ?array $statuses Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. (optional)
     * @param  $type Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. (optional)
     * @param ?\DateTime $fromDate Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. (optional)
     * @param ?\DateTime $toDate Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. (optional)
     * @param ?\DateTime $fromDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. (optional) (deprecated)
     * @param ?\DateTime $toDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. (optional) (deprecated)
     *
     */
    public function getReturnsStream(int $campaignId, ?string $pageToken, ?int $limit, ?array $orderIds, ?array $statuses,  $type, ?\DateTime $fromDate, ?\DateTime $toDate, ?\DateTime $fromDate2, ?\DateTime $toDate2): void
    {
        throw new \Exception('Not implemented');
    }
    /**
     * Operation setReturnDecision
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision`
     *
     * Принятие или изменение решения по возврату
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     * @param \OpenAPIServer\Model\SetReturnDecisionRequest $setReturnDecisionRequest  (required)
     *
     * @return \OpenAPIServer\Model\EmptyApiResponse|null
     */
    public function setReturnDecision(int $campaignId, int $orderId, int $returnId, \OpenAPIServer\Model\SetReturnDecisionRequest $setReturnDecisionRequest): \OpenAPIServer\Model\EmptyApiResponse|null
    {
        throw new \Exception('Not implemented');
    }

    /**
     * Operation setReturnDecision (stream)
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision`
     *
     * Принятие или изменение решения по возврату
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     * @param \OpenAPIServer\Model\SetReturnDecisionRequest $setReturnDecisionRequest  (required)
     *
     */
    public function setReturnDecisionStream(int $campaignId, int $orderId, int $returnId, \OpenAPIServer\Model\SetReturnDecisionRequest $setReturnDecisionRequest): void
    {
        throw new \Exception('Not implemented');
    }
    /**
     * Operation submitReturnDecision
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit`
     *
     * Подтверждение решения по возврату
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     *
     * @return \OpenAPIServer\Model\EmptyApiResponse|null
     */
    public function submitReturnDecision(int $campaignId, int $orderId, int $returnId): \OpenAPIServer\Model\EmptyApiResponse|null
    {
        throw new \Exception('Not implemented');
    }

    /**
     * Operation submitReturnDecision (stream)
     *
     * Path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit`
     *
     * Подтверждение решения по возврату
     *
     * @param int $campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) (required)
     * @param int $orderId Идентификатор заказа. (required)
     * @param int $returnId Идентификатор возврата. (required)
     *
     */
    public function submitReturnDecisionStream(int $campaignId, int $orderId, int $returnId): void
    {
        throw new \Exception('Not implemented');
    }
}
