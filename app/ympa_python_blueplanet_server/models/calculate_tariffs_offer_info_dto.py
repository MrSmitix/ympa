# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.calculate_tariffs_offer_dto import CalculateTariffsOfferDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.calculated_tariff_dto import CalculatedTariffDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class CalculateTariffsOfferInfoDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, offer: CalculateTariffsOfferDTO=None, tariffs: List[CalculatedTariffDTO]=None):  # noqa: E501
        """CalculateTariffsOfferInfoDTO - a model defined in Swagger

        :param offer: The offer of this CalculateTariffsOfferInfoDTO.  # noqa: E501
        :type offer: CalculateTariffsOfferDTO
        :param tariffs: The tariffs of this CalculateTariffsOfferInfoDTO.  # noqa: E501
        :type tariffs: List[CalculatedTariffDTO]
        """
        self.swagger_types = {
            'offer': CalculateTariffsOfferDTO,
            'tariffs': List[CalculatedTariffDTO]
        }

        self.attribute_map = {
            'offer': 'offer',
            'tariffs': 'tariffs'
        }

        self._offer = offer
        self._tariffs = tariffs

    @classmethod
    def from_dict(cls, dikt) -> 'CalculateTariffsOfferInfoDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculateTariffsOfferInfoDTO of this CalculateTariffsOfferInfoDTO.  # noqa: E501
        :rtype: CalculateTariffsOfferInfoDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer(self) -> CalculateTariffsOfferDTO:
        """Gets the offer of this CalculateTariffsOfferInfoDTO.


        :return: The offer of this CalculateTariffsOfferInfoDTO.
        :rtype: CalculateTariffsOfferDTO
        """
        return self._offer

    @offer.setter
    def offer(self, offer: CalculateTariffsOfferDTO):
        """Sets the offer of this CalculateTariffsOfferInfoDTO.


        :param offer: The offer of this CalculateTariffsOfferInfoDTO.
        :type offer: CalculateTariffsOfferDTO
        """
        if offer is None:
            raise ValueError("Invalid value for `offer`, must not be `None`")  # noqa: E501

        self._offer = offer

    @property
    def tariffs(self) -> List[CalculatedTariffDTO]:
        """Gets the tariffs of this CalculateTariffsOfferInfoDTO.

        Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).   # noqa: E501

        :return: The tariffs of this CalculateTariffsOfferInfoDTO.
        :rtype: List[CalculatedTariffDTO]
        """
        return self._tariffs

    @tariffs.setter
    def tariffs(self, tariffs: List[CalculatedTariffDTO]):
        """Sets the tariffs of this CalculateTariffsOfferInfoDTO.

        Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).   # noqa: E501

        :param tariffs: The tariffs of this CalculateTariffsOfferInfoDTO.
        :type tariffs: List[CalculatedTariffDTO]
        """
        if tariffs is None:
            raise ValueError("Invalid value for `tariffs`, must not be `None`")  # noqa: E501

        self._tariffs = tariffs
