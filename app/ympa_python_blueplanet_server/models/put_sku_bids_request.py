# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.sku_bid_item_dto import SkuBidItemDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class PutSkuBidsRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, bids: List[SkuBidItemDTO]=None):  # noqa: E501
        """PutSkuBidsRequest - a model defined in Swagger

        :param bids: The bids of this PutSkuBidsRequest.  # noqa: E501
        :type bids: List[SkuBidItemDTO]
        """
        self.swagger_types = {
            'bids': List[SkuBidItemDTO]
        }

        self.attribute_map = {
            'bids': 'bids'
        }

        self._bids = bids

    @classmethod
    def from_dict(cls, dikt) -> 'PutSkuBidsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PutSkuBidsRequest of this PutSkuBidsRequest.  # noqa: E501
        :rtype: PutSkuBidsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bids(self) -> List[SkuBidItemDTO]:
        """Gets the bids of this PutSkuBidsRequest.

        Список товаров и ставки для продвижения, которые на них нужно установить.  # noqa: E501

        :return: The bids of this PutSkuBidsRequest.
        :rtype: List[SkuBidItemDTO]
        """
        return self._bids

    @bids.setter
    def bids(self, bids: List[SkuBidItemDTO]):
        """Sets the bids of this PutSkuBidsRequest.

        Список товаров и ставки для продвижения, которые на них нужно установить.  # noqa: E501

        :param bids: The bids of this PutSkuBidsRequest.
        :type bids: List[SkuBidItemDTO]
        """
        if bids is None:
            raise ValueError("Invalid value for `bids`, must not be `None`")  # noqa: E501
        if bids is not None and len(bids) > 1500:
            raise ValueError("Invalid value for `bids`, number of items must be less than or equal to `1500`")  # noqa: E501
        if bids is not None and len(bids) < 1:
            raise ValueError("Invalid value for `bids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._bids = bids
