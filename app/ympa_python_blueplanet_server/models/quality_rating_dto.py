# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.quality_rating_component_dto import QualityRatingComponentDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class QualityRatingDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, rating: int=None, calculation_date: date=None, components: List[QualityRatingComponentDTO]=None):  # noqa: E501
        """QualityRatingDTO - a model defined in Swagger

        :param rating: The rating of this QualityRatingDTO.  # noqa: E501
        :type rating: int
        :param calculation_date: The calculation_date of this QualityRatingDTO.  # noqa: E501
        :type calculation_date: date
        :param components: The components of this QualityRatingDTO.  # noqa: E501
        :type components: List[QualityRatingComponentDTO]
        """
        self.swagger_types = {
            'rating': int,
            'calculation_date': date,
            'components': List[QualityRatingComponentDTO]
        }

        self.attribute_map = {
            'rating': 'rating',
            'calculation_date': 'calculationDate',
            'components': 'components'
        }

        self._rating = rating
        self._calculation_date = calculation_date
        self._components = components

    @classmethod
    def from_dict(cls, dikt) -> 'QualityRatingDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QualityRatingDTO of this QualityRatingDTO.  # noqa: E501
        :rtype: QualityRatingDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rating(self) -> int:
        """Gets the rating of this QualityRatingDTO.

        Значение индекса качества.  # noqa: E501

        :return: The rating of this QualityRatingDTO.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this QualityRatingDTO.

        Значение индекса качества.  # noqa: E501

        :param rating: The rating of this QualityRatingDTO.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501
        if rating is not None and rating > 100:  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `100`")  # noqa: E501
        if rating is not None and rating < 0:  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rating = rating

    @property
    def calculation_date(self) -> date:
        """Gets the calculation_date of this QualityRatingDTO.

        Дата вычисления.  Формат даты: `ГГГГ‑ММ‑ДД`.   # noqa: E501

        :return: The calculation_date of this QualityRatingDTO.
        :rtype: date
        """
        return self._calculation_date

    @calculation_date.setter
    def calculation_date(self, calculation_date: date):
        """Sets the calculation_date of this QualityRatingDTO.

        Дата вычисления.  Формат даты: `ГГГГ‑ММ‑ДД`.   # noqa: E501

        :param calculation_date: The calculation_date of this QualityRatingDTO.
        :type calculation_date: date
        """
        if calculation_date is None:
            raise ValueError("Invalid value for `calculation_date`, must not be `None`")  # noqa: E501

        self._calculation_date = calculation_date

    @property
    def components(self) -> List[QualityRatingComponentDTO]:
        """Gets the components of this QualityRatingDTO.

        Составляющие индекса качества.  # noqa: E501

        :return: The components of this QualityRatingDTO.
        :rtype: List[QualityRatingComponentDTO]
        """
        return self._components

    @components.setter
    def components(self, components: List[QualityRatingComponentDTO]):
        """Sets the components of this QualityRatingDTO.

        Составляющие индекса качества.  # noqa: E501

        :param components: The components of this QualityRatingDTO.
        :type components: List[QualityRatingComponentDTO]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components
