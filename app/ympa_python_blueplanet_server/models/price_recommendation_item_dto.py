# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from ympa_python_blueplanet_server import util


class PriceRecommendationItemDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: int=None, price: float=None):  # noqa: E501
        """PriceRecommendationItemDTO - a model defined in Swagger

        :param campaign_id: The campaign_id of this PriceRecommendationItemDTO.  # noqa: E501
        :type campaign_id: int
        :param price: The price of this PriceRecommendationItemDTO.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'campaign_id': int,
            'price': float
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'price': 'price'
        }

        self._campaign_id = campaign_id
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'PriceRecommendationItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PriceRecommendationItemDTO of this PriceRecommendationItemDTO.  # noqa: E501
        :rtype: PriceRecommendationItemDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self) -> int:
        """Gets the campaign_id of this PriceRecommendationItemDTO.

        Идентификатор кампании.  # noqa: E501

        :return: The campaign_id of this PriceRecommendationItemDTO.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id: int):
        """Sets the campaign_id of this PriceRecommendationItemDTO.

        Идентификатор кампании.  # noqa: E501

        :param campaign_id: The campaign_id of this PriceRecommendationItemDTO.
        :type campaign_id: int
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def price(self) -> float:
        """Gets the price of this PriceRecommendationItemDTO.

        Рекомендованная цена на товар. Чтобы продвижение хорошо работало, цена на товар должна быть не выше этого значения. [Подробно о рекомендованных ценах](https://yandex.ru/support/marketplace/marketing/campaigns.html#prices)   # noqa: E501

        :return: The price of this PriceRecommendationItemDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this PriceRecommendationItemDTO.

        Рекомендованная цена на товар. Чтобы продвижение хорошо работало, цена на товар должна быть не выше этого значения. [Подробно о рекомендованных ценах](https://yandex.ru/support/marketplace/marketing/campaigns.html#prices)   # noqa: E501

        :param price: The price of this PriceRecommendationItemDTO.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501
        if price is not None and price < 1:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than or equal to `1`")  # noqa: E501

        self._price = price
