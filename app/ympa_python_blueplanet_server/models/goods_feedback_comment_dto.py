# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.goods_feedback_comment_author_dto import GoodsFeedbackCommentAuthorDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.goods_feedback_comment_status_type import GoodsFeedbackCommentStatusType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class GoodsFeedbackCommentDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, text: str=None, can_modify: bool=None, parent_id: int=None, author: GoodsFeedbackCommentAuthorDTO=None, status: GoodsFeedbackCommentStatusType=None):  # noqa: E501
        """GoodsFeedbackCommentDTO - a model defined in Swagger

        :param id: The id of this GoodsFeedbackCommentDTO.  # noqa: E501
        :type id: int
        :param text: The text of this GoodsFeedbackCommentDTO.  # noqa: E501
        :type text: str
        :param can_modify: The can_modify of this GoodsFeedbackCommentDTO.  # noqa: E501
        :type can_modify: bool
        :param parent_id: The parent_id of this GoodsFeedbackCommentDTO.  # noqa: E501
        :type parent_id: int
        :param author: The author of this GoodsFeedbackCommentDTO.  # noqa: E501
        :type author: GoodsFeedbackCommentAuthorDTO
        :param status: The status of this GoodsFeedbackCommentDTO.  # noqa: E501
        :type status: GoodsFeedbackCommentStatusType
        """
        self.swagger_types = {
            'id': int,
            'text': str,
            'can_modify': bool,
            'parent_id': int,
            'author': GoodsFeedbackCommentAuthorDTO,
            'status': GoodsFeedbackCommentStatusType
        }

        self.attribute_map = {
            'id': 'id',
            'text': 'text',
            'can_modify': 'canModify',
            'parent_id': 'parentId',
            'author': 'author',
            'status': 'status'
        }

        self._id = id
        self._text = text
        self._can_modify = can_modify
        self._parent_id = parent_id
        self._author = author
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'GoodsFeedbackCommentDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoodsFeedbackCommentDTO of this GoodsFeedbackCommentDTO.  # noqa: E501
        :rtype: GoodsFeedbackCommentDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this GoodsFeedbackCommentDTO.

        Идентификатор комментария к отзыву.   # noqa: E501

        :return: The id of this GoodsFeedbackCommentDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this GoodsFeedbackCommentDTO.

        Идентификатор комментария к отзыву.   # noqa: E501

        :param id: The id of this GoodsFeedbackCommentDTO.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self) -> str:
        """Gets the text of this GoodsFeedbackCommentDTO.

        Текст комментария.  # noqa: E501

        :return: The text of this GoodsFeedbackCommentDTO.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this GoodsFeedbackCommentDTO.

        Текст комментария.  # noqa: E501

        :param text: The text of this GoodsFeedbackCommentDTO.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501
        if text is not None and len(text) > 4096:
            raise ValueError("Invalid value for `text`, length must be less than or equal to `4096`")  # noqa: E501
        if text is not None and len(text) < 1:
            raise ValueError("Invalid value for `text`, length must be greater than or equal to `1`")  # noqa: E501

        self._text = text

    @property
    def can_modify(self) -> bool:
        """Gets the can_modify of this GoodsFeedbackCommentDTO.

        Может ли продавец изменять комментарий или удалять его.  # noqa: E501

        :return: The can_modify of this GoodsFeedbackCommentDTO.
        :rtype: bool
        """
        return self._can_modify

    @can_modify.setter
    def can_modify(self, can_modify: bool):
        """Sets the can_modify of this GoodsFeedbackCommentDTO.

        Может ли продавец изменять комментарий или удалять его.  # noqa: E501

        :param can_modify: The can_modify of this GoodsFeedbackCommentDTO.
        :type can_modify: bool
        """

        self._can_modify = can_modify

    @property
    def parent_id(self) -> int:
        """Gets the parent_id of this GoodsFeedbackCommentDTO.

        Идентификатор комментария к отзыву.   # noqa: E501

        :return: The parent_id of this GoodsFeedbackCommentDTO.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: int):
        """Sets the parent_id of this GoodsFeedbackCommentDTO.

        Идентификатор комментария к отзыву.   # noqa: E501

        :param parent_id: The parent_id of this GoodsFeedbackCommentDTO.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def author(self) -> GoodsFeedbackCommentAuthorDTO:
        """Gets the author of this GoodsFeedbackCommentDTO.


        :return: The author of this GoodsFeedbackCommentDTO.
        :rtype: GoodsFeedbackCommentAuthorDTO
        """
        return self._author

    @author.setter
    def author(self, author: GoodsFeedbackCommentAuthorDTO):
        """Sets the author of this GoodsFeedbackCommentDTO.


        :param author: The author of this GoodsFeedbackCommentDTO.
        :type author: GoodsFeedbackCommentAuthorDTO
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def status(self) -> GoodsFeedbackCommentStatusType:
        """Gets the status of this GoodsFeedbackCommentDTO.


        :return: The status of this GoodsFeedbackCommentDTO.
        :rtype: GoodsFeedbackCommentStatusType
        """
        return self._status

    @status.setter
    def status(self, status: GoodsFeedbackCommentStatusType):
        """Sets the status of this GoodsFeedbackCommentDTO.


        :param status: The status of this GoodsFeedbackCommentDTO.
        :type status: GoodsFeedbackCommentStatusType
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
