# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.full_outlet_license_dto import FullOutletLicenseDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class OutletLicensesResponseDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, licenses: List[FullOutletLicenseDTO]=None):  # noqa: E501
        """OutletLicensesResponseDTO - a model defined in Swagger

        :param licenses: The licenses of this OutletLicensesResponseDTO.  # noqa: E501
        :type licenses: List[FullOutletLicenseDTO]
        """
        self.swagger_types = {
            'licenses': List[FullOutletLicenseDTO]
        }

        self.attribute_map = {
            'licenses': 'licenses'
        }

        self._licenses = licenses

    @classmethod
    def from_dict(cls, dikt) -> 'OutletLicensesResponseDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OutletLicensesResponseDTO of this OutletLicensesResponseDTO.  # noqa: E501
        :rtype: OutletLicensesResponseDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def licenses(self) -> List[FullOutletLicenseDTO]:
        """Gets the licenses of this OutletLicensesResponseDTO.

        Список лицензий.  # noqa: E501

        :return: The licenses of this OutletLicensesResponseDTO.
        :rtype: List[FullOutletLicenseDTO]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses: List[FullOutletLicenseDTO]):
        """Sets the licenses of this OutletLicensesResponseDTO.

        Список лицензий.  # noqa: E501

        :param licenses: The licenses of this OutletLicensesResponseDTO.
        :type licenses: List[FullOutletLicenseDTO]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")  # noqa: E501

        self._licenses = licenses
