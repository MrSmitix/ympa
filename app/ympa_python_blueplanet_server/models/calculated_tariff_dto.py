# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.calculated_tariff_type import CalculatedTariffType  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.tariff_parameter_dto import TariffParameterDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class CalculatedTariffDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: CalculatedTariffType=None, amount: float=None, parameters: List[TariffParameterDTO]=None):  # noqa: E501
        """CalculatedTariffDTO - a model defined in Swagger

        :param type: The type of this CalculatedTariffDTO.  # noqa: E501
        :type type: CalculatedTariffType
        :param amount: The amount of this CalculatedTariffDTO.  # noqa: E501
        :type amount: float
        :param parameters: The parameters of this CalculatedTariffDTO.  # noqa: E501
        :type parameters: List[TariffParameterDTO]
        """
        self.swagger_types = {
            'type': CalculatedTariffType,
            'amount': float,
            'parameters': List[TariffParameterDTO]
        }

        self.attribute_map = {
            'type': 'type',
            'amount': 'amount',
            'parameters': 'parameters'
        }

        self._type = type
        self._amount = amount
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'CalculatedTariffDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculatedTariffDTO of this CalculatedTariffDTO.  # noqa: E501
        :rtype: CalculatedTariffDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> CalculatedTariffType:
        """Gets the type of this CalculatedTariffDTO.


        :return: The type of this CalculatedTariffDTO.
        :rtype: CalculatedTariffType
        """
        return self._type

    @type.setter
    def type(self, type: CalculatedTariffType):
        """Sets the type of this CalculatedTariffDTO.


        :param type: The type of this CalculatedTariffDTO.
        :type type: CalculatedTariffType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def amount(self) -> float:
        """Gets the amount of this CalculatedTariffDTO.

        Стоимость услуги в рублях.  # noqa: E501

        :return: The amount of this CalculatedTariffDTO.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this CalculatedTariffDTO.

        Стоимость услуги в рублях.  # noqa: E501

        :param amount: The amount of this CalculatedTariffDTO.
        :type amount: float
        """

        self._amount = amount

    @property
    def parameters(self) -> List[TariffParameterDTO]:
        """Gets the parameters of this CalculatedTariffDTO.

        Параметры расчета тарифа.  # noqa: E501

        :return: The parameters of this CalculatedTariffDTO.
        :rtype: List[TariffParameterDTO]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[TariffParameterDTO]):
        """Sets the parameters of this CalculatedTariffDTO.

        Параметры расчета тарифа.  # noqa: E501

        :param parameters: The parameters of this CalculatedTariffDTO.
        :type parameters: List[TariffParameterDTO]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
