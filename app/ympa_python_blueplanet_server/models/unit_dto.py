# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from ympa_python_blueplanet_server import util


class UnitDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, full_name: str=None):  # noqa: E501
        """UnitDTO - a model defined in Swagger

        :param id: The id of this UnitDTO.  # noqa: E501
        :type id: int
        :param name: The name of this UnitDTO.  # noqa: E501
        :type name: str
        :param full_name: The full_name of this UnitDTO.  # noqa: E501
        :type full_name: str
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'full_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'full_name': 'fullName'
        }

        self._id = id
        self._name = name
        self._full_name = full_name

    @classmethod
    def from_dict(cls, dikt) -> 'UnitDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UnitDTO of this UnitDTO.  # noqa: E501
        :rtype: UnitDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this UnitDTO.

        Идентификатор единицы измерения.  # noqa: E501

        :return: The id of this UnitDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UnitDTO.

        Идентификатор единицы измерения.  # noqa: E501

        :param id: The id of this UnitDTO.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this UnitDTO.

        Сокращенное название единицы измерения.  # noqa: E501

        :return: The name of this UnitDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UnitDTO.

        Сокращенное название единицы измерения.  # noqa: E501

        :param name: The name of this UnitDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def full_name(self) -> str:
        """Gets the full_name of this UnitDTO.

        Полное название единицы измерения.  # noqa: E501

        :return: The full_name of this UnitDTO.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this UnitDTO.

        Полное название единицы измерения.  # noqa: E501

        :param full_name: The full_name of this UnitDTO.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name
