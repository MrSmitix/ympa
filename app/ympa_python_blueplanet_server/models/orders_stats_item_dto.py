# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.orders_stats_details_dto import OrdersStatsDetailsDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.orders_stats_price_dto import OrdersStatsPriceDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.orders_stats_warehouse_dto import OrdersStatsWarehouseDTO  # noqa: F401,E501
import re  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class OrdersStatsItemDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, offer_name: str=None, market_sku: int=None, shop_sku: str=None, count: int=None, prices: List[OrdersStatsPriceDTO]=None, warehouse: OrdersStatsWarehouseDTO=None, details: List[OrdersStatsDetailsDTO]=None, cis_list: List[str]=None, initial_count: int=None, bid_fee: int=None, cofinance_threshold: float=None, cofinance_value: float=None):  # noqa: E501
        """OrdersStatsItemDTO - a model defined in Swagger

        :param offer_name: The offer_name of this OrdersStatsItemDTO.  # noqa: E501
        :type offer_name: str
        :param market_sku: The market_sku of this OrdersStatsItemDTO.  # noqa: E501
        :type market_sku: int
        :param shop_sku: The shop_sku of this OrdersStatsItemDTO.  # noqa: E501
        :type shop_sku: str
        :param count: The count of this OrdersStatsItemDTO.  # noqa: E501
        :type count: int
        :param prices: The prices of this OrdersStatsItemDTO.  # noqa: E501
        :type prices: List[OrdersStatsPriceDTO]
        :param warehouse: The warehouse of this OrdersStatsItemDTO.  # noqa: E501
        :type warehouse: OrdersStatsWarehouseDTO
        :param details: The details of this OrdersStatsItemDTO.  # noqa: E501
        :type details: List[OrdersStatsDetailsDTO]
        :param cis_list: The cis_list of this OrdersStatsItemDTO.  # noqa: E501
        :type cis_list: List[str]
        :param initial_count: The initial_count of this OrdersStatsItemDTO.  # noqa: E501
        :type initial_count: int
        :param bid_fee: The bid_fee of this OrdersStatsItemDTO.  # noqa: E501
        :type bid_fee: int
        :param cofinance_threshold: The cofinance_threshold of this OrdersStatsItemDTO.  # noqa: E501
        :type cofinance_threshold: float
        :param cofinance_value: The cofinance_value of this OrdersStatsItemDTO.  # noqa: E501
        :type cofinance_value: float
        """
        self.swagger_types = {
            'offer_name': str,
            'market_sku': int,
            'shop_sku': str,
            'count': int,
            'prices': List[OrdersStatsPriceDTO],
            'warehouse': OrdersStatsWarehouseDTO,
            'details': List[OrdersStatsDetailsDTO],
            'cis_list': List[str],
            'initial_count': int,
            'bid_fee': int,
            'cofinance_threshold': float,
            'cofinance_value': float
        }

        self.attribute_map = {
            'offer_name': 'offerName',
            'market_sku': 'marketSku',
            'shop_sku': 'shopSku',
            'count': 'count',
            'prices': 'prices',
            'warehouse': 'warehouse',
            'details': 'details',
            'cis_list': 'cisList',
            'initial_count': 'initialCount',
            'bid_fee': 'bidFee',
            'cofinance_threshold': 'cofinanceThreshold',
            'cofinance_value': 'cofinanceValue'
        }

        self._offer_name = offer_name
        self._market_sku = market_sku
        self._shop_sku = shop_sku
        self._count = count
        self._prices = prices
        self._warehouse = warehouse
        self._details = details
        self._cis_list = cis_list
        self._initial_count = initial_count
        self._bid_fee = bid_fee
        self._cofinance_threshold = cofinance_threshold
        self._cofinance_value = cofinance_value

    @classmethod
    def from_dict(cls, dikt) -> 'OrdersStatsItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrdersStatsItemDTO of this OrdersStatsItemDTO.  # noqa: E501
        :rtype: OrdersStatsItemDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_name(self) -> str:
        """Gets the offer_name of this OrdersStatsItemDTO.

        Название товара.  # noqa: E501

        :return: The offer_name of this OrdersStatsItemDTO.
        :rtype: str
        """
        return self._offer_name

    @offer_name.setter
    def offer_name(self, offer_name: str):
        """Sets the offer_name of this OrdersStatsItemDTO.

        Название товара.  # noqa: E501

        :param offer_name: The offer_name of this OrdersStatsItemDTO.
        :type offer_name: str
        """

        self._offer_name = offer_name

    @property
    def market_sku(self) -> int:
        """Gets the market_sku of this OrdersStatsItemDTO.

        SKU на Маркете.  # noqa: E501

        :return: The market_sku of this OrdersStatsItemDTO.
        :rtype: int
        """
        return self._market_sku

    @market_sku.setter
    def market_sku(self, market_sku: int):
        """Sets the market_sku of this OrdersStatsItemDTO.

        SKU на Маркете.  # noqa: E501

        :param market_sku: The market_sku of this OrdersStatsItemDTO.
        :type market_sku: int
        """

        self._market_sku = market_sku

    @property
    def shop_sku(self) -> str:
        """Gets the shop_sku of this OrdersStatsItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The shop_sku of this OrdersStatsItemDTO.
        :rtype: str
        """
        return self._shop_sku

    @shop_sku.setter
    def shop_sku(self, shop_sku: str):
        """Sets the shop_sku of this OrdersStatsItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param shop_sku: The shop_sku of this OrdersStatsItemDTO.
        :type shop_sku: str
        """
        if shop_sku is not None and len(shop_sku) > 255:
            raise ValueError("Invalid value for `shop_sku`, length must be less than or equal to `255`")  # noqa: E501
        if shop_sku is not None and len(shop_sku) < 1:
            raise ValueError("Invalid value for `shop_sku`, length must be greater than or equal to `1`")  # noqa: E501
        if shop_sku is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', shop_sku):  # noqa: E501
            raise ValueError("Invalid value for `shop_sku`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._shop_sku = shop_sku

    @property
    def count(self) -> int:
        """Gets the count of this OrdersStatsItemDTO.

        Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`.   # noqa: E501

        :return: The count of this OrdersStatsItemDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this OrdersStatsItemDTO.

        Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`.   # noqa: E501

        :param count: The count of this OrdersStatsItemDTO.
        :type count: int
        """

        self._count = count

    @property
    def prices(self) -> List[OrdersStatsPriceDTO]:
        """Gets the prices of this OrdersStatsItemDTO.

        Цена или скидки на товар.  # noqa: E501

        :return: The prices of this OrdersStatsItemDTO.
        :rtype: List[OrdersStatsPriceDTO]
        """
        return self._prices

    @prices.setter
    def prices(self, prices: List[OrdersStatsPriceDTO]):
        """Sets the prices of this OrdersStatsItemDTO.

        Цена или скидки на товар.  # noqa: E501

        :param prices: The prices of this OrdersStatsItemDTO.
        :type prices: List[OrdersStatsPriceDTO]
        """

        self._prices = prices

    @property
    def warehouse(self) -> OrdersStatsWarehouseDTO:
        """Gets the warehouse of this OrdersStatsItemDTO.


        :return: The warehouse of this OrdersStatsItemDTO.
        :rtype: OrdersStatsWarehouseDTO
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse: OrdersStatsWarehouseDTO):
        """Sets the warehouse of this OrdersStatsItemDTO.


        :param warehouse: The warehouse of this OrdersStatsItemDTO.
        :type warehouse: OrdersStatsWarehouseDTO
        """

        self._warehouse = warehouse

    @property
    def details(self) -> List[OrdersStatsDetailsDTO]:
        """Gets the details of this OrdersStatsItemDTO.

        Информация об удалении товара из заказа.  # noqa: E501

        :return: The details of this OrdersStatsItemDTO.
        :rtype: List[OrdersStatsDetailsDTO]
        """
        return self._details

    @details.setter
    def details(self, details: List[OrdersStatsDetailsDTO]):
        """Sets the details of this OrdersStatsItemDTO.

        Информация об удалении товара из заказа.  # noqa: E501

        :param details: The details of this OrdersStatsItemDTO.
        :type details: List[OrdersStatsDetailsDTO]
        """

        self._details = details

    @property
    def cis_list(self) -> List[str]:
        """Gets the cis_list of this OrdersStatsItemDTO.

        Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  # noqa: E501

        :return: The cis_list of this OrdersStatsItemDTO.
        :rtype: List[str]
        """
        return self._cis_list

    @cis_list.setter
    def cis_list(self, cis_list: List[str]):
        """Sets the cis_list of this OrdersStatsItemDTO.

        Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  # noqa: E501

        :param cis_list: The cis_list of this OrdersStatsItemDTO.
        :type cis_list: List[str]
        """

        self._cis_list = cis_list

    @property
    def initial_count(self) -> int:
        """Gets the initial_count of this OrdersStatsItemDTO.

        Первоначальное количество единиц товара.  # noqa: E501

        :return: The initial_count of this OrdersStatsItemDTO.
        :rtype: int
        """
        return self._initial_count

    @initial_count.setter
    def initial_count(self, initial_count: int):
        """Sets the initial_count of this OrdersStatsItemDTO.

        Первоначальное количество единиц товара.  # noqa: E501

        :param initial_count: The initial_count of this OrdersStatsItemDTO.
        :type initial_count: int
        """

        self._initial_count = initial_count

    @property
    def bid_fee(self) -> int:
        """Gets the bid_fee of this OrdersStatsItemDTO.

        Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.   # noqa: E501

        :return: The bid_fee of this OrdersStatsItemDTO.
        :rtype: int
        """
        return self._bid_fee

    @bid_fee.setter
    def bid_fee(self, bid_fee: int):
        """Sets the bid_fee of this OrdersStatsItemDTO.

        Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.   # noqa: E501

        :param bid_fee: The bid_fee of this OrdersStatsItemDTO.
        :type bid_fee: int
        """
        if bid_fee is not None and bid_fee > 10000:  # noqa: E501
            raise ValueError("Invalid value for `bid_fee`, must be a value less than or equal to `10000`")  # noqa: E501
        if bid_fee is not None and bid_fee < 0:  # noqa: E501
            raise ValueError("Invalid value for `bid_fee`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bid_fee = bid_fee

    @property
    def cofinance_threshold(self) -> float:
        """Gets the cofinance_threshold of this OrdersStatsItemDTO.

        Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.   # noqa: E501

        :return: The cofinance_threshold of this OrdersStatsItemDTO.
        :rtype: float
        """
        return self._cofinance_threshold

    @cofinance_threshold.setter
    def cofinance_threshold(self, cofinance_threshold: float):
        """Sets the cofinance_threshold of this OrdersStatsItemDTO.

        Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.   # noqa: E501

        :param cofinance_threshold: The cofinance_threshold of this OrdersStatsItemDTO.
        :type cofinance_threshold: float
        """

        self._cofinance_threshold = cofinance_threshold

    @property
    def cofinance_value(self) -> float:
        """Gets the cofinance_value of this OrdersStatsItemDTO.

        Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.   # noqa: E501

        :return: The cofinance_value of this OrdersStatsItemDTO.
        :rtype: float
        """
        return self._cofinance_value

    @cofinance_value.setter
    def cofinance_value(self, cofinance_value: float):
        """Sets the cofinance_value of this OrdersStatsItemDTO.

        Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.   # noqa: E501

        :param cofinance_value: The cofinance_value of this OrdersStatsItemDTO.
        :type cofinance_value: float
        """

        self._cofinance_value = cofinance_value
