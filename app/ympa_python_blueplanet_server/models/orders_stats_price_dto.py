# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.orders_stats_price_type import OrdersStatsPriceType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class OrdersStatsPriceDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: OrdersStatsPriceType=None, cost_per_item: float=None, total: float=None):  # noqa: E501
        """OrdersStatsPriceDTO - a model defined in Swagger

        :param type: The type of this OrdersStatsPriceDTO.  # noqa: E501
        :type type: OrdersStatsPriceType
        :param cost_per_item: The cost_per_item of this OrdersStatsPriceDTO.  # noqa: E501
        :type cost_per_item: float
        :param total: The total of this OrdersStatsPriceDTO.  # noqa: E501
        :type total: float
        """
        self.swagger_types = {
            'type': OrdersStatsPriceType,
            'cost_per_item': float,
            'total': float
        }

        self.attribute_map = {
            'type': 'type',
            'cost_per_item': 'costPerItem',
            'total': 'total'
        }

        self._type = type
        self._cost_per_item = cost_per_item
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'OrdersStatsPriceDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrdersStatsPriceDTO of this OrdersStatsPriceDTO.  # noqa: E501
        :rtype: OrdersStatsPriceDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> OrdersStatsPriceType:
        """Gets the type of this OrdersStatsPriceDTO.


        :return: The type of this OrdersStatsPriceDTO.
        :rtype: OrdersStatsPriceType
        """
        return self._type

    @type.setter
    def type(self, type: OrdersStatsPriceType):
        """Sets the type of this OrdersStatsPriceDTO.


        :param type: The type of this OrdersStatsPriceDTO.
        :type type: OrdersStatsPriceType
        """

        self._type = type

    @property
    def cost_per_item(self) -> float:
        """Gets the cost_per_item of this OrdersStatsPriceDTO.

        Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой.   # noqa: E501

        :return: The cost_per_item of this OrdersStatsPriceDTO.
        :rtype: float
        """
        return self._cost_per_item

    @cost_per_item.setter
    def cost_per_item(self, cost_per_item: float):
        """Sets the cost_per_item of this OrdersStatsPriceDTO.

        Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой.   # noqa: E501

        :param cost_per_item: The cost_per_item of this OrdersStatsPriceDTO.
        :type cost_per_item: float
        """

        self._cost_per_item = cost_per_item

    @property
    def total(self) -> float:
        """Gets the total of this OrdersStatsPriceDTO.

        Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой.   # noqa: E501

        :return: The total of this OrdersStatsPriceDTO.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this OrdersStatsPriceDTO.

        Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой.   # noqa: E501

        :param total: The total of this OrdersStatsPriceDTO.
        :type total: float
        """

        self._total = total
