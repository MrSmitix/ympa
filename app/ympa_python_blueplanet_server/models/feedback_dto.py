# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.feedback_author_dto import FeedbackAuthorDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.feedback_comment_dto import FeedbackCommentDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.feedback_grades_dto import FeedbackGradesDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.feedback_order_dto import FeedbackOrderDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.feedback_shop_dto import FeedbackShopDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.feedback_state_type import FeedbackStateType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class FeedbackDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, created_at: datetime=None, text: str=None, state: FeedbackStateType=None, author: FeedbackAuthorDTO=None, pro: str=None, contra: str=None, comments: List[FeedbackCommentDTO]=None, shop: FeedbackShopDTO=None, resolved: bool=None, verified: bool=None, recommend: bool=None, grades: FeedbackGradesDTO=None, order: FeedbackOrderDTO=None):  # noqa: E501
        """FeedbackDTO - a model defined in Swagger

        :param id: The id of this FeedbackDTO.  # noqa: E501
        :type id: int
        :param created_at: The created_at of this FeedbackDTO.  # noqa: E501
        :type created_at: datetime
        :param text: The text of this FeedbackDTO.  # noqa: E501
        :type text: str
        :param state: The state of this FeedbackDTO.  # noqa: E501
        :type state: FeedbackStateType
        :param author: The author of this FeedbackDTO.  # noqa: E501
        :type author: FeedbackAuthorDTO
        :param pro: The pro of this FeedbackDTO.  # noqa: E501
        :type pro: str
        :param contra: The contra of this FeedbackDTO.  # noqa: E501
        :type contra: str
        :param comments: The comments of this FeedbackDTO.  # noqa: E501
        :type comments: List[FeedbackCommentDTO]
        :param shop: The shop of this FeedbackDTO.  # noqa: E501
        :type shop: FeedbackShopDTO
        :param resolved: The resolved of this FeedbackDTO.  # noqa: E501
        :type resolved: bool
        :param verified: The verified of this FeedbackDTO.  # noqa: E501
        :type verified: bool
        :param recommend: The recommend of this FeedbackDTO.  # noqa: E501
        :type recommend: bool
        :param grades: The grades of this FeedbackDTO.  # noqa: E501
        :type grades: FeedbackGradesDTO
        :param order: The order of this FeedbackDTO.  # noqa: E501
        :type order: FeedbackOrderDTO
        """
        self.swagger_types = {
            'id': int,
            'created_at': datetime,
            'text': str,
            'state': FeedbackStateType,
            'author': FeedbackAuthorDTO,
            'pro': str,
            'contra': str,
            'comments': List[FeedbackCommentDTO],
            'shop': FeedbackShopDTO,
            'resolved': bool,
            'verified': bool,
            'recommend': bool,
            'grades': FeedbackGradesDTO,
            'order': FeedbackOrderDTO
        }

        self.attribute_map = {
            'id': 'id',
            'created_at': 'createdAt',
            'text': 'text',
            'state': 'state',
            'author': 'author',
            'pro': 'pro',
            'contra': 'contra',
            'comments': 'comments',
            'shop': 'shop',
            'resolved': 'resolved',
            'verified': 'verified',
            'recommend': 'recommend',
            'grades': 'grades',
            'order': 'order'
        }

        self._id = id
        self._created_at = created_at
        self._text = text
        self._state = state
        self._author = author
        self._pro = pro
        self._contra = contra
        self._comments = comments
        self._shop = shop
        self._resolved = resolved
        self._verified = verified
        self._recommend = recommend
        self._grades = grades
        self._order = order

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackDTO of this FeedbackDTO.  # noqa: E501
        :rtype: FeedbackDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this FeedbackDTO.

        Идентификатор отзыва.  # noqa: E501

        :return: The id of this FeedbackDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this FeedbackDTO.

        Идентификатор отзыва.  # noqa: E501

        :param id: The id of this FeedbackDTO.
        :type id: int
        """

        self._id = id

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this FeedbackDTO.

        Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.   # noqa: E501

        :return: The created_at of this FeedbackDTO.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this FeedbackDTO.

        Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.   # noqa: E501

        :param created_at: The created_at of this FeedbackDTO.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def text(self) -> str:
        """Gets the text of this FeedbackDTO.

        Комментарий автора отзыва.  # noqa: E501

        :return: The text of this FeedbackDTO.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this FeedbackDTO.

        Комментарий автора отзыва.  # noqa: E501

        :param text: The text of this FeedbackDTO.
        :type text: str
        """

        self._text = text

    @property
    def state(self) -> FeedbackStateType:
        """Gets the state of this FeedbackDTO.


        :return: The state of this FeedbackDTO.
        :rtype: FeedbackStateType
        """
        return self._state

    @state.setter
    def state(self, state: FeedbackStateType):
        """Sets the state of this FeedbackDTO.


        :param state: The state of this FeedbackDTO.
        :type state: FeedbackStateType
        """

        self._state = state

    @property
    def author(self) -> FeedbackAuthorDTO:
        """Gets the author of this FeedbackDTO.


        :return: The author of this FeedbackDTO.
        :rtype: FeedbackAuthorDTO
        """
        return self._author

    @author.setter
    def author(self, author: FeedbackAuthorDTO):
        """Sets the author of this FeedbackDTO.


        :param author: The author of this FeedbackDTO.
        :type author: FeedbackAuthorDTO
        """

        self._author = author

    @property
    def pro(self) -> str:
        """Gets the pro of this FeedbackDTO.

        Достоинства магазина, описанные в отзыве.  # noqa: E501

        :return: The pro of this FeedbackDTO.
        :rtype: str
        """
        return self._pro

    @pro.setter
    def pro(self, pro: str):
        """Sets the pro of this FeedbackDTO.

        Достоинства магазина, описанные в отзыве.  # noqa: E501

        :param pro: The pro of this FeedbackDTO.
        :type pro: str
        """

        self._pro = pro

    @property
    def contra(self) -> str:
        """Gets the contra of this FeedbackDTO.

        Недостатки магазина, описанные в отзыве.  # noqa: E501

        :return: The contra of this FeedbackDTO.
        :rtype: str
        """
        return self._contra

    @contra.setter
    def contra(self, contra: str):
        """Sets the contra of this FeedbackDTO.

        Недостатки магазина, описанные в отзыве.  # noqa: E501

        :param contra: The contra of this FeedbackDTO.
        :type contra: str
        """

        self._contra = contra

    @property
    def comments(self) -> List[FeedbackCommentDTO]:
        """Gets the comments of this FeedbackDTO.

        Переписка автора отзыва с магазином.  # noqa: E501

        :return: The comments of this FeedbackDTO.
        :rtype: List[FeedbackCommentDTO]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[FeedbackCommentDTO]):
        """Sets the comments of this FeedbackDTO.

        Переписка автора отзыва с магазином.  # noqa: E501

        :param comments: The comments of this FeedbackDTO.
        :type comments: List[FeedbackCommentDTO]
        """
        if comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")  # noqa: E501

        self._comments = comments

    @property
    def shop(self) -> FeedbackShopDTO:
        """Gets the shop of this FeedbackDTO.


        :return: The shop of this FeedbackDTO.
        :rtype: FeedbackShopDTO
        """
        return self._shop

    @shop.setter
    def shop(self, shop: FeedbackShopDTO):
        """Sets the shop of this FeedbackDTO.


        :param shop: The shop of this FeedbackDTO.
        :type shop: FeedbackShopDTO
        """

        self._shop = shop

    @property
    def resolved(self) -> bool:
        """Gets the resolved of this FeedbackDTO.

        Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.   # noqa: E501

        :return: The resolved of this FeedbackDTO.
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved: bool):
        """Sets the resolved of this FeedbackDTO.

        Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.   # noqa: E501

        :param resolved: The resolved of this FeedbackDTO.
        :type resolved: bool
        """

        self._resolved = resolved

    @property
    def verified(self) -> bool:
        """Gets the verified of this FeedbackDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет.   # noqa: E501

        :return: The verified of this FeedbackDTO.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: bool):
        """Sets the verified of this FeedbackDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет.   # noqa: E501

        :param verified: The verified of this FeedbackDTO.
        :type verified: bool
        """

        self._verified = verified

    @property
    def recommend(self) -> bool:
        """Gets the recommend of this FeedbackDTO.

        Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет.   # noqa: E501

        :return: The recommend of this FeedbackDTO.
        :rtype: bool
        """
        return self._recommend

    @recommend.setter
    def recommend(self, recommend: bool):
        """Sets the recommend of this FeedbackDTO.

        Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет.   # noqa: E501

        :param recommend: The recommend of this FeedbackDTO.
        :type recommend: bool
        """

        self._recommend = recommend

    @property
    def grades(self) -> FeedbackGradesDTO:
        """Gets the grades of this FeedbackDTO.


        :return: The grades of this FeedbackDTO.
        :rtype: FeedbackGradesDTO
        """
        return self._grades

    @grades.setter
    def grades(self, grades: FeedbackGradesDTO):
        """Sets the grades of this FeedbackDTO.


        :param grades: The grades of this FeedbackDTO.
        :type grades: FeedbackGradesDTO
        """

        self._grades = grades

    @property
    def order(self) -> FeedbackOrderDTO:
        """Gets the order of this FeedbackDTO.


        :return: The order of this FeedbackDTO.
        :rtype: FeedbackOrderDTO
        """
        return self._order

    @order.setter
    def order(self, order: FeedbackOrderDTO):
        """Sets the order of this FeedbackDTO.


        :param order: The order of this FeedbackDTO.
        :type order: FeedbackOrderDTO
        """

        self._order = order
