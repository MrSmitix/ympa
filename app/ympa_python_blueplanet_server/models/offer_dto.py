# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.currency_type import CurrencyType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class OfferDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, price: float=None, feed_id: int=None, id: str=None, shop_category_id: str=None, market_category_id: int=None, pre_discount_price: float=None, discount: int=None, cut_price: bool=None, url: str=None, model_id: int=None, name: str=None, currency: CurrencyType=None, bid: float=None, cbid: float=None, fee: float=None, blocked: bool=None):  # noqa: E501
        """OfferDTO - a model defined in Swagger

        :param price: The price of this OfferDTO.  # noqa: E501
        :type price: float
        :param feed_id: The feed_id of this OfferDTO.  # noqa: E501
        :type feed_id: int
        :param id: The id of this OfferDTO.  # noqa: E501
        :type id: str
        :param shop_category_id: The shop_category_id of this OfferDTO.  # noqa: E501
        :type shop_category_id: str
        :param market_category_id: The market_category_id of this OfferDTO.  # noqa: E501
        :type market_category_id: int
        :param pre_discount_price: The pre_discount_price of this OfferDTO.  # noqa: E501
        :type pre_discount_price: float
        :param discount: The discount of this OfferDTO.  # noqa: E501
        :type discount: int
        :param cut_price: The cut_price of this OfferDTO.  # noqa: E501
        :type cut_price: bool
        :param url: The url of this OfferDTO.  # noqa: E501
        :type url: str
        :param model_id: The model_id of this OfferDTO.  # noqa: E501
        :type model_id: int
        :param name: The name of this OfferDTO.  # noqa: E501
        :type name: str
        :param currency: The currency of this OfferDTO.  # noqa: E501
        :type currency: CurrencyType
        :param bid: The bid of this OfferDTO.  # noqa: E501
        :type bid: float
        :param cbid: The cbid of this OfferDTO.  # noqa: E501
        :type cbid: float
        :param fee: The fee of this OfferDTO.  # noqa: E501
        :type fee: float
        :param blocked: The blocked of this OfferDTO.  # noqa: E501
        :type blocked: bool
        """
        self.swagger_types = {
            'price': float,
            'feed_id': int,
            'id': str,
            'shop_category_id': str,
            'market_category_id': int,
            'pre_discount_price': float,
            'discount': int,
            'cut_price': bool,
            'url': str,
            'model_id': int,
            'name': str,
            'currency': CurrencyType,
            'bid': float,
            'cbid': float,
            'fee': float,
            'blocked': bool
        }

        self.attribute_map = {
            'price': 'price',
            'feed_id': 'feedId',
            'id': 'id',
            'shop_category_id': 'shopCategoryId',
            'market_category_id': 'marketCategoryId',
            'pre_discount_price': 'preDiscountPrice',
            'discount': 'discount',
            'cut_price': 'cutPrice',
            'url': 'url',
            'model_id': 'modelId',
            'name': 'name',
            'currency': 'currency',
            'bid': 'bid',
            'cbid': 'cbid',
            'fee': 'fee',
            'blocked': 'blocked'
        }

        self._price = price
        self._feed_id = feed_id
        self._id = id
        self._shop_category_id = shop_category_id
        self._market_category_id = market_category_id
        self._pre_discount_price = pre_discount_price
        self._discount = discount
        self._cut_price = cut_price
        self._url = url
        self._model_id = model_id
        self._name = name
        self._currency = currency
        self._bid = bid
        self._cbid = cbid
        self._fee = fee
        self._blocked = blocked

    @classmethod
    def from_dict(cls, dikt) -> 'OfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OfferDTO of this OfferDTO.  # noqa: E501
        :rtype: OfferDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self) -> float:
        """Gets the price of this OfferDTO.

        Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.   # noqa: E501

        :return: The price of this OfferDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this OfferDTO.

        Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.   # noqa: E501

        :param price: The price of this OfferDTO.
        :type price: float
        """

        self._price = price

    @property
    def feed_id(self) -> int:
        """Gets the feed_id of this OfferDTO.

        Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :return: The feed_id of this OfferDTO.
        :rtype: int
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id: int):
        """Sets the feed_id of this OfferDTO.

        Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :param feed_id: The feed_id of this OfferDTO.
        :type feed_id: int
        """

        self._feed_id = feed_id

    @property
    def id(self) -> str:
        """Gets the id of this OfferDTO.

        Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :return: The id of this OfferDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this OfferDTO.

        Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :param id: The id of this OfferDTO.
        :type id: str
        """

        self._id = id

    @property
    def shop_category_id(self) -> str:
        """Gets the shop_category_id of this OfferDTO.

        Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :return: The shop_category_id of this OfferDTO.
        :rtype: str
        """
        return self._shop_category_id

    @shop_category_id.setter
    def shop_category_id(self, shop_category_id: str):
        """Sets the shop_category_id of this OfferDTO.

        Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :param shop_category_id: The shop_category_id of this OfferDTO.
        :type shop_category_id: str
        """

        self._shop_category_id = shop_category_id

    @property
    def market_category_id(self) -> int:
        """Gets the market_category_id of this OfferDTO.

        Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :return: The market_category_id of this OfferDTO.
        :rtype: int
        """
        return self._market_category_id

    @market_category_id.setter
    def market_category_id(self, market_category_id: int):
        """Sets the market_category_id of this OfferDTO.

        Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.   # noqa: E501

        :param market_category_id: The market_category_id of this OfferDTO.
        :type market_category_id: int
        """

        self._market_category_id = market_category_id

    @property
    def pre_discount_price(self) -> float:
        """Gets the pre_discount_price of this OfferDTO.

        Цена предложения без скидки.  # noqa: E501

        :return: The pre_discount_price of this OfferDTO.
        :rtype: float
        """
        return self._pre_discount_price

    @pre_discount_price.setter
    def pre_discount_price(self, pre_discount_price: float):
        """Sets the pre_discount_price of this OfferDTO.

        Цена предложения без скидки.  # noqa: E501

        :param pre_discount_price: The pre_discount_price of this OfferDTO.
        :type pre_discount_price: float
        """

        self._pre_discount_price = pre_discount_price

    @property
    def discount(self) -> int:
        """Gets the discount of this OfferDTO.

        Скидка на предложение в процентах.  # noqa: E501

        :return: The discount of this OfferDTO.
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount: int):
        """Sets the discount of this OfferDTO.

        Скидка на предложение в процентах.  # noqa: E501

        :param discount: The discount of this OfferDTO.
        :type discount: int
        """

        self._discount = discount

    @property
    def cut_price(self) -> bool:
        """Gets the cut_price of this OfferDTO.

        Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.   # noqa: E501

        :return: The cut_price of this OfferDTO.
        :rtype: bool
        """
        return self._cut_price

    @cut_price.setter
    def cut_price(self, cut_price: bool):
        """Sets the cut_price of this OfferDTO.

        Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.   # noqa: E501

        :param cut_price: The cut_price of this OfferDTO.
        :type cut_price: bool
        """

        self._cut_price = cut_price

    @property
    def url(self) -> str:
        """Gets the url of this OfferDTO.

        URL-адрес предложения на сайте магазина.  # noqa: E501

        :return: The url of this OfferDTO.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this OfferDTO.

        URL-адрес предложения на сайте магазина.  # noqa: E501

        :param url: The url of this OfferDTO.
        :type url: str
        """

        self._url = url

    @property
    def model_id(self) -> int:
        """Gets the model_id of this OfferDTO.

        Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}   # noqa: E501

        :return: The model_id of this OfferDTO.
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: int):
        """Sets the model_id of this OfferDTO.

        Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}   # noqa: E501

        :param model_id: The model_id of this OfferDTO.
        :type model_id: int
        """
        if model_id is None:
            raise ValueError("Invalid value for `model_id`, must not be `None`")  # noqa: E501

        self._model_id = model_id

    @property
    def name(self) -> str:
        """Gets the name of this OfferDTO.

        Наименование предложения.  # noqa: E501

        :return: The name of this OfferDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this OfferDTO.

        Наименование предложения.  # noqa: E501

        :param name: The name of this OfferDTO.
        :type name: str
        """

        self._name = name

    @property
    def currency(self) -> CurrencyType:
        """Gets the currency of this OfferDTO.


        :return: The currency of this OfferDTO.
        :rtype: CurrencyType
        """
        return self._currency

    @currency.setter
    def currency(self, currency: CurrencyType):
        """Sets the currency of this OfferDTO.


        :param currency: The currency of this OfferDTO.
        :type currency: CurrencyType
        """

        self._currency = currency

    @property
    def bid(self) -> float:
        """Gets the bid of this OfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.   # noqa: E501

        :return: The bid of this OfferDTO.
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid: float):
        """Sets the bid of this OfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.   # noqa: E501

        :param bid: The bid of this OfferDTO.
        :type bid: float
        """

        self._bid = bid

    @property
    def cbid(self) -> float:
        """Gets the cbid of this OfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.   # noqa: E501

        :return: The cbid of this OfferDTO.
        :rtype: float
        """
        return self._cbid

    @cbid.setter
    def cbid(self, cbid: float):
        """Sets the cbid of this OfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.   # noqa: E501

        :param cbid: The cbid of this OfferDTO.
        :type cbid: float
        """

        self._cbid = cbid

    @property
    def fee(self) -> float:
        """Gets the fee of this OfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.   # noqa: E501

        :return: The fee of this OfferDTO.
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee: float):
        """Sets the fee of this OfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.   # noqa: E501

        :param fee: The fee of this OfferDTO.
        :type fee: float
        """

        self._fee = fee

    @property
    def blocked(self) -> bool:
        """Gets the blocked of this OfferDTO.

        Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.   # noqa: E501

        :return: The blocked of this OfferDTO.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked: bool):
        """Sets the blocked of this OfferDTO.

        Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.   # noqa: E501

        :param blocked: The blocked of this OfferDTO.
        :type blocked: bool
        """

        self._blocked = blocked
