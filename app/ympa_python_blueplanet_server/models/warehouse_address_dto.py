# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.gps_dto import GpsDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class WarehouseAddressDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, street: str=None, number: str=None, building: str=None, block: str=None, gps: GpsDTO=None):  # noqa: E501
        """WarehouseAddressDTO - a model defined in Swagger

        :param city: The city of this WarehouseAddressDTO.  # noqa: E501
        :type city: str
        :param street: The street of this WarehouseAddressDTO.  # noqa: E501
        :type street: str
        :param number: The number of this WarehouseAddressDTO.  # noqa: E501
        :type number: str
        :param building: The building of this WarehouseAddressDTO.  # noqa: E501
        :type building: str
        :param block: The block of this WarehouseAddressDTO.  # noqa: E501
        :type block: str
        :param gps: The gps of this WarehouseAddressDTO.  # noqa: E501
        :type gps: GpsDTO
        """
        self.swagger_types = {
            'city': str,
            'street': str,
            'number': str,
            'building': str,
            'block': str,
            'gps': GpsDTO
        }

        self.attribute_map = {
            'city': 'city',
            'street': 'street',
            'number': 'number',
            'building': 'building',
            'block': 'block',
            'gps': 'gps'
        }

        self._city = city
        self._street = street
        self._number = number
        self._building = building
        self._block = block
        self._gps = gps

    @classmethod
    def from_dict(cls, dikt) -> 'WarehouseAddressDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WarehouseAddressDTO of this WarehouseAddressDTO.  # noqa: E501
        :rtype: WarehouseAddressDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self) -> str:
        """Gets the city of this WarehouseAddressDTO.

        Город.  # noqa: E501

        :return: The city of this WarehouseAddressDTO.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this WarehouseAddressDTO.

        Город.  # noqa: E501

        :param city: The city of this WarehouseAddressDTO.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501
        if city is not None and len(city) > 200:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `200`")  # noqa: E501

        self._city = city

    @property
    def street(self) -> str:
        """Gets the street of this WarehouseAddressDTO.

        Улица.  # noqa: E501

        :return: The street of this WarehouseAddressDTO.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street: str):
        """Sets the street of this WarehouseAddressDTO.

        Улица.  # noqa: E501

        :param street: The street of this WarehouseAddressDTO.
        :type street: str
        """
        if street is not None and len(street) > 512:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `512`")  # noqa: E501

        self._street = street

    @property
    def number(self) -> str:
        """Gets the number of this WarehouseAddressDTO.

        Номер дома.  # noqa: E501

        :return: The number of this WarehouseAddressDTO.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number: str):
        """Sets the number of this WarehouseAddressDTO.

        Номер дома.  # noqa: E501

        :param number: The number of this WarehouseAddressDTO.
        :type number: str
        """
        if number is not None and len(number) > 256:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `256`")  # noqa: E501

        self._number = number

    @property
    def building(self) -> str:
        """Gets the building of this WarehouseAddressDTO.

        Номер строения.  # noqa: E501

        :return: The building of this WarehouseAddressDTO.
        :rtype: str
        """
        return self._building

    @building.setter
    def building(self, building: str):
        """Sets the building of this WarehouseAddressDTO.

        Номер строения.  # noqa: E501

        :param building: The building of this WarehouseAddressDTO.
        :type building: str
        """
        if building is not None and len(building) > 16:
            raise ValueError("Invalid value for `building`, length must be less than or equal to `16`")  # noqa: E501

        self._building = building

    @property
    def block(self) -> str:
        """Gets the block of this WarehouseAddressDTO.

        Номер корпуса.  # noqa: E501

        :return: The block of this WarehouseAddressDTO.
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block: str):
        """Sets the block of this WarehouseAddressDTO.

        Номер корпуса.  # noqa: E501

        :param block: The block of this WarehouseAddressDTO.
        :type block: str
        """
        if block is not None and len(block) > 16:
            raise ValueError("Invalid value for `block`, length must be less than or equal to `16`")  # noqa: E501

        self._block = block

    @property
    def gps(self) -> GpsDTO:
        """Gets the gps of this WarehouseAddressDTO.


        :return: The gps of this WarehouseAddressDTO.
        :rtype: GpsDTO
        """
        return self._gps

    @gps.setter
    def gps(self, gps: GpsDTO):
        """Sets the gps of this WarehouseAddressDTO.


        :param gps: The gps of this WarehouseAddressDTO.
        :type gps: GpsDTO
        """
        if gps is None:
            raise ValueError("Invalid value for `gps`, must not be `None`")  # noqa: E501

        self._gps = gps
