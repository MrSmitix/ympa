# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from ympa_python_blueplanet_server import util


class UpdateStockItemDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, updated_at: datetime=None):  # noqa: E501
        """UpdateStockItemDTO - a model defined in Swagger

        :param count: The count of this UpdateStockItemDTO.  # noqa: E501
        :type count: int
        :param updated_at: The updated_at of this UpdateStockItemDTO.  # noqa: E501
        :type updated_at: datetime
        """
        self.swagger_types = {
            'count': int,
            'updated_at': datetime
        }

        self.attribute_map = {
            'count': 'count',
            'updated_at': 'updatedAt'
        }

        self._count = count
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateStockItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateStockItemDTO of this UpdateStockItemDTO.  # noqa: E501
        :rtype: UpdateStockItemDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self) -> int:
        """Gets the count of this UpdateStockItemDTO.

        Количество доступного товара.   # noqa: E501

        :return: The count of this UpdateStockItemDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this UpdateStockItemDTO.

        Количество доступного товара.   # noqa: E501

        :param count: The count of this UpdateStockItemDTO.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501
        if count is not None and count > 2000000000:  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value less than or equal to `2000000000`")  # noqa: E501
        if count is not None and count < 0:  # noqa: E501
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._count = count

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this UpdateStockItemDTO.

        Дата и время последнего обновления информации об остатках. <br><br> Если вы не передали параметр `updatedAt`, используется текущее время. <br><br> Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.   # noqa: E501

        :return: The updated_at of this UpdateStockItemDTO.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this UpdateStockItemDTO.

        Дата и время последнего обновления информации об остатках. <br><br> Если вы не передали параметр `updatedAt`, используется текущее время. <br><br> Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.   # noqa: E501

        :param updated_at: The updated_at of this UpdateStockItemDTO.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
