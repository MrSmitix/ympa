# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.currency_type import CurrencyType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class BusinessSettingsDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, only_default_price: bool=None, currency: CurrencyType=None):  # noqa: E501
        """BusinessSettingsDTO - a model defined in Swagger

        :param only_default_price: The only_default_price of this BusinessSettingsDTO.  # noqa: E501
        :type only_default_price: bool
        :param currency: The currency of this BusinessSettingsDTO.  # noqa: E501
        :type currency: CurrencyType
        """
        self.swagger_types = {
            'only_default_price': bool,
            'currency': CurrencyType
        }

        self.attribute_map = {
            'only_default_price': 'onlyDefaultPrice',
            'currency': 'currency'
        }

        self._only_default_price = only_default_price
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt) -> 'BusinessSettingsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BusinessSettingsDTO of this BusinessSettingsDTO.  # noqa: E501
        :rtype: BusinessSettingsDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def only_default_price(self) -> bool:
        """Gets the only_default_price of this BusinessSettingsDTO.

        Можно ли установить только [базовую цену](*rule): * `false` — можно задать и базовую цену, и цены в конкретных магазинах. * `true` — можно задать только базовую цену.   # noqa: E501

        :return: The only_default_price of this BusinessSettingsDTO.
        :rtype: bool
        """
        return self._only_default_price

    @only_default_price.setter
    def only_default_price(self, only_default_price: bool):
        """Sets the only_default_price of this BusinessSettingsDTO.

        Можно ли установить только [базовую цену](*rule): * `false` — можно задать и базовую цену, и цены в конкретных магазинах. * `true` — можно задать только базовую цену.   # noqa: E501

        :param only_default_price: The only_default_price of this BusinessSettingsDTO.
        :type only_default_price: bool
        """

        self._only_default_price = only_default_price

    @property
    def currency(self) -> CurrencyType:
        """Gets the currency of this BusinessSettingsDTO.


        :return: The currency of this BusinessSettingsDTO.
        :rtype: CurrencyType
        """
        return self._currency

    @currency.setter
    def currency(self, currency: CurrencyType):
        """Sets the currency of this BusinessSettingsDTO.


        :param currency: The currency of this BusinessSettingsDTO.
        :type currency: CurrencyType
        """

        self._currency = currency
