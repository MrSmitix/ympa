# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.calculate_tariffs_offer_dto import CalculateTariffsOfferDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.calculate_tariffs_parameters_dto import CalculateTariffsParametersDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class CalculateTariffsRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, parameters: CalculateTariffsParametersDTO=None, offers: List[CalculateTariffsOfferDTO]=None):  # noqa: E501
        """CalculateTariffsRequest - a model defined in Swagger

        :param parameters: The parameters of this CalculateTariffsRequest.  # noqa: E501
        :type parameters: CalculateTariffsParametersDTO
        :param offers: The offers of this CalculateTariffsRequest.  # noqa: E501
        :type offers: List[CalculateTariffsOfferDTO]
        """
        self.swagger_types = {
            'parameters': CalculateTariffsParametersDTO,
            'offers': List[CalculateTariffsOfferDTO]
        }

        self.attribute_map = {
            'parameters': 'parameters',
            'offers': 'offers'
        }

        self._parameters = parameters
        self._offers = offers

    @classmethod
    def from_dict(cls, dikt) -> 'CalculateTariffsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculateTariffsRequest of this CalculateTariffsRequest.  # noqa: E501
        :rtype: CalculateTariffsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self) -> CalculateTariffsParametersDTO:
        """Gets the parameters of this CalculateTariffsRequest.


        :return: The parameters of this CalculateTariffsRequest.
        :rtype: CalculateTariffsParametersDTO
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: CalculateTariffsParametersDTO):
        """Sets the parameters of this CalculateTariffsRequest.


        :param parameters: The parameters of this CalculateTariffsRequest.
        :type parameters: CalculateTariffsParametersDTO
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def offers(self) -> List[CalculateTariffsOfferDTO]:
        """Gets the offers of this CalculateTariffsRequest.

        Товары, для которых нужно рассчитать стоимость услуг.  # noqa: E501

        :return: The offers of this CalculateTariffsRequest.
        :rtype: List[CalculateTariffsOfferDTO]
        """
        return self._offers

    @offers.setter
    def offers(self, offers: List[CalculateTariffsOfferDTO]):
        """Sets the offers of this CalculateTariffsRequest.

        Товары, для которых нужно рассчитать стоимость услуг.  # noqa: E501

        :param offers: The offers of this CalculateTariffsRequest.
        :type offers: List[CalculateTariffsOfferDTO]
        """
        if offers is None:
            raise ValueError("Invalid value for `offers`, must not be `None`")  # noqa: E501
        if offers is not None and len(offers) > 200:
            raise ValueError("Invalid value for `offers`, number of items must be less than or equal to `200`")  # noqa: E501
        if offers is not None and len(offers) < 1:
            raise ValueError("Invalid value for `offers`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._offers = offers
