# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.order_item_instance_dto import OrderItemInstanceDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.order_vat_type import OrderVatType  # noqa: F401,E501
import re  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class BriefOrderItemDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, vat: OrderVatType=None, count: int=None, price: float=None, offer_name: str=None, offer_id: str=None, instances: List[OrderItemInstanceDTO]=None):  # noqa: E501
        """BriefOrderItemDTO - a model defined in Swagger

        :param id: The id of this BriefOrderItemDTO.  # noqa: E501
        :type id: int
        :param vat: The vat of this BriefOrderItemDTO.  # noqa: E501
        :type vat: OrderVatType
        :param count: The count of this BriefOrderItemDTO.  # noqa: E501
        :type count: int
        :param price: The price of this BriefOrderItemDTO.  # noqa: E501
        :type price: float
        :param offer_name: The offer_name of this BriefOrderItemDTO.  # noqa: E501
        :type offer_name: str
        :param offer_id: The offer_id of this BriefOrderItemDTO.  # noqa: E501
        :type offer_id: str
        :param instances: The instances of this BriefOrderItemDTO.  # noqa: E501
        :type instances: List[OrderItemInstanceDTO]
        """
        self.swagger_types = {
            'id': int,
            'vat': OrderVatType,
            'count': int,
            'price': float,
            'offer_name': str,
            'offer_id': str,
            'instances': List[OrderItemInstanceDTO]
        }

        self.attribute_map = {
            'id': 'id',
            'vat': 'vat',
            'count': 'count',
            'price': 'price',
            'offer_name': 'offerName',
            'offer_id': 'offerId',
            'instances': 'instances'
        }

        self._id = id
        self._vat = vat
        self._count = count
        self._price = price
        self._offer_name = offer_name
        self._offer_id = offer_id
        self._instances = instances

    @classmethod
    def from_dict(cls, dikt) -> 'BriefOrderItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BriefOrderItemDTO of this BriefOrderItemDTO.  # noqa: E501
        :rtype: BriefOrderItemDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this BriefOrderItemDTO.

        Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.   # noqa: E501

        :return: The id of this BriefOrderItemDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this BriefOrderItemDTO.

        Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.   # noqa: E501

        :param id: The id of this BriefOrderItemDTO.
        :type id: int
        """

        self._id = id

    @property
    def vat(self) -> OrderVatType:
        """Gets the vat of this BriefOrderItemDTO.


        :return: The vat of this BriefOrderItemDTO.
        :rtype: OrderVatType
        """
        return self._vat

    @vat.setter
    def vat(self, vat: OrderVatType):
        """Sets the vat of this BriefOrderItemDTO.


        :param vat: The vat of this BriefOrderItemDTO.
        :type vat: OrderVatType
        """

        self._vat = vat

    @property
    def count(self) -> int:
        """Gets the count of this BriefOrderItemDTO.

        Количество единиц товара.  # noqa: E501

        :return: The count of this BriefOrderItemDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this BriefOrderItemDTO.

        Количество единиц товара.  # noqa: E501

        :param count: The count of this BriefOrderItemDTO.
        :type count: int
        """

        self._count = count

    @property
    def price(self) -> float:
        """Gets the price of this BriefOrderItemDTO.

        Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.   # noqa: E501

        :return: The price of this BriefOrderItemDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this BriefOrderItemDTO.

        Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.   # noqa: E501

        :param price: The price of this BriefOrderItemDTO.
        :type price: float
        """

        self._price = price

    @property
    def offer_name(self) -> str:
        """Gets the offer_name of this BriefOrderItemDTO.

        Название товара.  # noqa: E501

        :return: The offer_name of this BriefOrderItemDTO.
        :rtype: str
        """
        return self._offer_name

    @offer_name.setter
    def offer_name(self, offer_name: str):
        """Sets the offer_name of this BriefOrderItemDTO.

        Название товара.  # noqa: E501

        :param offer_name: The offer_name of this BriefOrderItemDTO.
        :type offer_name: str
        """

        self._offer_name = offer_name

    @property
    def offer_id(self) -> str:
        """Gets the offer_id of this BriefOrderItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The offer_id of this BriefOrderItemDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id: str):
        """Sets the offer_id of this BriefOrderItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param offer_id: The offer_id of this BriefOrderItemDTO.
        :type offer_id: str
        """
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")  # noqa: E501
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")  # noqa: E501
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):  # noqa: E501
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._offer_id = offer_id

    @property
    def instances(self) -> List[OrderItemInstanceDTO]:
        """Gets the instances of this BriefOrderItemDTO.

        Переданные вами коды маркировки.  # noqa: E501

        :return: The instances of this BriefOrderItemDTO.
        :rtype: List[OrderItemInstanceDTO]
        """
        return self._instances

    @instances.setter
    def instances(self, instances: List[OrderItemInstanceDTO]):
        """Sets the instances of this BriefOrderItemDTO.

        Переданные вами коды маркировки.  # noqa: E501

        :param instances: The instances of this BriefOrderItemDTO.
        :type instances: List[OrderItemInstanceDTO]
        """

        self._instances = instances
