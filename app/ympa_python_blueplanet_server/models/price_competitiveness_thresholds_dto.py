# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.base_price_dto import BasePriceDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class PriceCompetitivenessThresholdsDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, optimal_price: BasePriceDTO=None, average_price: BasePriceDTO=None):  # noqa: E501
        """PriceCompetitivenessThresholdsDTO - a model defined in Swagger

        :param optimal_price: The optimal_price of this PriceCompetitivenessThresholdsDTO.  # noqa: E501
        :type optimal_price: BasePriceDTO
        :param average_price: The average_price of this PriceCompetitivenessThresholdsDTO.  # noqa: E501
        :type average_price: BasePriceDTO
        """
        self.swagger_types = {
            'optimal_price': BasePriceDTO,
            'average_price': BasePriceDTO
        }

        self.attribute_map = {
            'optimal_price': 'optimalPrice',
            'average_price': 'averagePrice'
        }

        self._optimal_price = optimal_price
        self._average_price = average_price

    @classmethod
    def from_dict(cls, dikt) -> 'PriceCompetitivenessThresholdsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PriceCompetitivenessThresholdsDTO of this PriceCompetitivenessThresholdsDTO.  # noqa: E501
        :rtype: PriceCompetitivenessThresholdsDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def optimal_price(self) -> BasePriceDTO:
        """Gets the optimal_price of this PriceCompetitivenessThresholdsDTO.


        :return: The optimal_price of this PriceCompetitivenessThresholdsDTO.
        :rtype: BasePriceDTO
        """
        return self._optimal_price

    @optimal_price.setter
    def optimal_price(self, optimal_price: BasePriceDTO):
        """Sets the optimal_price of this PriceCompetitivenessThresholdsDTO.


        :param optimal_price: The optimal_price of this PriceCompetitivenessThresholdsDTO.
        :type optimal_price: BasePriceDTO
        """

        self._optimal_price = optimal_price

    @property
    def average_price(self) -> BasePriceDTO:
        """Gets the average_price of this PriceCompetitivenessThresholdsDTO.


        :return: The average_price of this PriceCompetitivenessThresholdsDTO.
        :rtype: BasePriceDTO
        """
        return self._average_price

    @average_price.setter
    def average_price(self, average_price: BasePriceDTO):
        """Sets the average_price of this PriceCompetitivenessThresholdsDTO.


        :param average_price: The average_price of this PriceCompetitivenessThresholdsDTO.
        :type average_price: BasePriceDTO
        """

        self._average_price = average_price
