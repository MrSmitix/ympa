# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.shows_sales_grouping_type import ShowsSalesGroupingType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class GenerateShowsSalesReportRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, business_id: int=None, campaign_id: int=None, date_from: date=None, date_to: date=None, grouping: ShowsSalesGroupingType=None):  # noqa: E501
        """GenerateShowsSalesReportRequest - a model defined in Swagger

        :param business_id: The business_id of this GenerateShowsSalesReportRequest.  # noqa: E501
        :type business_id: int
        :param campaign_id: The campaign_id of this GenerateShowsSalesReportRequest.  # noqa: E501
        :type campaign_id: int
        :param date_from: The date_from of this GenerateShowsSalesReportRequest.  # noqa: E501
        :type date_from: date
        :param date_to: The date_to of this GenerateShowsSalesReportRequest.  # noqa: E501
        :type date_to: date
        :param grouping: The grouping of this GenerateShowsSalesReportRequest.  # noqa: E501
        :type grouping: ShowsSalesGroupingType
        """
        self.swagger_types = {
            'business_id': int,
            'campaign_id': int,
            'date_from': date,
            'date_to': date,
            'grouping': ShowsSalesGroupingType
        }

        self.attribute_map = {
            'business_id': 'businessId',
            'campaign_id': 'campaignId',
            'date_from': 'dateFrom',
            'date_to': 'dateTo',
            'grouping': 'grouping'
        }

        self._business_id = business_id
        self._campaign_id = campaign_id
        self._date_from = date_from
        self._date_to = date_to
        self._grouping = grouping

    @classmethod
    def from_dict(cls, dikt) -> 'GenerateShowsSalesReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GenerateShowsSalesReportRequest of this GenerateShowsSalesReportRequest.  # noqa: E501
        :rtype: GenerateShowsSalesReportRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_id(self) -> int:
        """Gets the business_id of this GenerateShowsSalesReportRequest.

        Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.   # noqa: E501

        :return: The business_id of this GenerateShowsSalesReportRequest.
        :rtype: int
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id: int):
        """Sets the business_id of this GenerateShowsSalesReportRequest.

        Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.   # noqa: E501

        :param business_id: The business_id of this GenerateShowsSalesReportRequest.
        :type business_id: int
        """

        self._business_id = business_id

    @property
    def campaign_id(self) -> int:
        """Gets the campaign_id of this GenerateShowsSalesReportRequest.

        Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.   # noqa: E501

        :return: The campaign_id of this GenerateShowsSalesReportRequest.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id: int):
        """Sets the campaign_id of this GenerateShowsSalesReportRequest.

        Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.   # noqa: E501

        :param campaign_id: The campaign_id of this GenerateShowsSalesReportRequest.
        :type campaign_id: int
        """

        self._campaign_id = campaign_id

    @property
    def date_from(self) -> date:
        """Gets the date_from of this GenerateShowsSalesReportRequest.

        Начало периода, включительно.  # noqa: E501

        :return: The date_from of this GenerateShowsSalesReportRequest.
        :rtype: date
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from: date):
        """Sets the date_from of this GenerateShowsSalesReportRequest.

        Начало периода, включительно.  # noqa: E501

        :param date_from: The date_from of this GenerateShowsSalesReportRequest.
        :type date_from: date
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")  # noqa: E501

        self._date_from = date_from

    @property
    def date_to(self) -> date:
        """Gets the date_to of this GenerateShowsSalesReportRequest.

        Конец периода, включительно.  # noqa: E501

        :return: The date_to of this GenerateShowsSalesReportRequest.
        :rtype: date
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to: date):
        """Sets the date_to of this GenerateShowsSalesReportRequest.

        Конец периода, включительно.  # noqa: E501

        :param date_to: The date_to of this GenerateShowsSalesReportRequest.
        :type date_to: date
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")  # noqa: E501

        self._date_to = date_to

    @property
    def grouping(self) -> ShowsSalesGroupingType:
        """Gets the grouping of this GenerateShowsSalesReportRequest.


        :return: The grouping of this GenerateShowsSalesReportRequest.
        :rtype: ShowsSalesGroupingType
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping: ShowsSalesGroupingType):
        """Sets the grouping of this GenerateShowsSalesReportRequest.


        :param grouping: The grouping of this GenerateShowsSalesReportRequest.
        :type grouping: ShowsSalesGroupingType
        """
        if grouping is None:
            raise ValueError("Invalid value for `grouping`, must not be `None`")  # noqa: E501

        self._grouping = grouping
