# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.delivery_service_dto import DeliveryServiceDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.pallets_count_dto import PalletsCountDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.partner_shipment_warehouse_dto import PartnerShipmentWarehouseDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.shipment_action_type import ShipmentActionType  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.shipment_status_change_dto import ShipmentStatusChangeDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.shipment_type import ShipmentType  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class ShipmentDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, plan_interval_from: datetime=None, plan_interval_to: datetime=None, shipment_type: ShipmentType=None, warehouse: PartnerShipmentWarehouseDTO=None, warehouse_to: PartnerShipmentWarehouseDTO=None, external_id: str=None, delivery_service: DeliveryServiceDTO=None, pallets_count: PalletsCountDTO=None, order_ids: list[int]=None, draft_count: int=None, planned_count: int=None, fact_count: int=None, current_status: ShipmentStatusChangeDTO=None, available_actions: list[ShipmentActionType]=None):  # noqa: E501
        """ShipmentDTO - a model defined in Swagger

        :param id: The id of this ShipmentDTO.  # noqa: E501
        :type id: int
        :param plan_interval_from: The plan_interval_from of this ShipmentDTO.  # noqa: E501
        :type plan_interval_from: datetime
        :param plan_interval_to: The plan_interval_to of this ShipmentDTO.  # noqa: E501
        :type plan_interval_to: datetime
        :param shipment_type: The shipment_type of this ShipmentDTO.  # noqa: E501
        :type shipment_type: ShipmentType
        :param warehouse: The warehouse of this ShipmentDTO.  # noqa: E501
        :type warehouse: PartnerShipmentWarehouseDTO
        :param warehouse_to: The warehouse_to of this ShipmentDTO.  # noqa: E501
        :type warehouse_to: PartnerShipmentWarehouseDTO
        :param external_id: The external_id of this ShipmentDTO.  # noqa: E501
        :type external_id: str
        :param delivery_service: The delivery_service of this ShipmentDTO.  # noqa: E501
        :type delivery_service: DeliveryServiceDTO
        :param pallets_count: The pallets_count of this ShipmentDTO.  # noqa: E501
        :type pallets_count: PalletsCountDTO
        :param order_ids: The order_ids of this ShipmentDTO.  # noqa: E501
        :type order_ids: list[int]
        :param draft_count: The draft_count of this ShipmentDTO.  # noqa: E501
        :type draft_count: int
        :param planned_count: The planned_count of this ShipmentDTO.  # noqa: E501
        :type planned_count: int
        :param fact_count: The fact_count of this ShipmentDTO.  # noqa: E501
        :type fact_count: int
        :param current_status: The current_status of this ShipmentDTO.  # noqa: E501
        :type current_status: ShipmentStatusChangeDTO
        :param available_actions: The available_actions of this ShipmentDTO.  # noqa: E501
        :type available_actions: list[ShipmentActionType]
        """
        self.swagger_types = {
            'id': int,
            'plan_interval_from': datetime,
            'plan_interval_to': datetime,
            'shipment_type': ShipmentType,
            'warehouse': PartnerShipmentWarehouseDTO,
            'warehouse_to': PartnerShipmentWarehouseDTO,
            'external_id': str,
            'delivery_service': DeliveryServiceDTO,
            'pallets_count': PalletsCountDTO,
            'order_ids': list[int],
            'draft_count': int,
            'planned_count': int,
            'fact_count': int,
            'current_status': ShipmentStatusChangeDTO,
            'available_actions': list[ShipmentActionType]
        }

        self.attribute_map = {
            'id': 'id',
            'plan_interval_from': 'planIntervalFrom',
            'plan_interval_to': 'planIntervalTo',
            'shipment_type': 'shipmentType',
            'warehouse': 'warehouse',
            'warehouse_to': 'warehouseTo',
            'external_id': 'externalId',
            'delivery_service': 'deliveryService',
            'pallets_count': 'palletsCount',
            'order_ids': 'orderIds',
            'draft_count': 'draftCount',
            'planned_count': 'plannedCount',
            'fact_count': 'factCount',
            'current_status': 'currentStatus',
            'available_actions': 'availableActions'
        }

        self._id = id
        self._plan_interval_from = plan_interval_from
        self._plan_interval_to = plan_interval_to
        self._shipment_type = shipment_type
        self._warehouse = warehouse
        self._warehouse_to = warehouse_to
        self._external_id = external_id
        self._delivery_service = delivery_service
        self._pallets_count = pallets_count
        self._order_ids = order_ids
        self._draft_count = draft_count
        self._planned_count = planned_count
        self._fact_count = fact_count
        self._current_status = current_status
        self._available_actions = available_actions

    @classmethod
    def from_dict(cls, dikt) -> 'ShipmentDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShipmentDTO of this ShipmentDTO.  # noqa: E501
        :rtype: ShipmentDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ShipmentDTO.

        Идентификатор отгрузки.  # noqa: E501

        :return: The id of this ShipmentDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ShipmentDTO.

        Идентификатор отгрузки.  # noqa: E501

        :param id: The id of this ShipmentDTO.
        :type id: int
        """

        self._id = id

    @property
    def plan_interval_from(self) -> datetime:
        """Gets the plan_interval_from of this ShipmentDTO.

        Начало планового интервала отгрузки.  # noqa: E501

        :return: The plan_interval_from of this ShipmentDTO.
        :rtype: datetime
        """
        return self._plan_interval_from

    @plan_interval_from.setter
    def plan_interval_from(self, plan_interval_from: datetime):
        """Sets the plan_interval_from of this ShipmentDTO.

        Начало планового интервала отгрузки.  # noqa: E501

        :param plan_interval_from: The plan_interval_from of this ShipmentDTO.
        :type plan_interval_from: datetime
        """

        self._plan_interval_from = plan_interval_from

    @property
    def plan_interval_to(self) -> datetime:
        """Gets the plan_interval_to of this ShipmentDTO.

        Конец планового интервала отгрузки.  # noqa: E501

        :return: The plan_interval_to of this ShipmentDTO.
        :rtype: datetime
        """
        return self._plan_interval_to

    @plan_interval_to.setter
    def plan_interval_to(self, plan_interval_to: datetime):
        """Sets the plan_interval_to of this ShipmentDTO.

        Конец планового интервала отгрузки.  # noqa: E501

        :param plan_interval_to: The plan_interval_to of this ShipmentDTO.
        :type plan_interval_to: datetime
        """

        self._plan_interval_to = plan_interval_to

    @property
    def shipment_type(self) -> ShipmentType:
        """Gets the shipment_type of this ShipmentDTO.


        :return: The shipment_type of this ShipmentDTO.
        :rtype: ShipmentType
        """
        return self._shipment_type

    @shipment_type.setter
    def shipment_type(self, shipment_type: ShipmentType):
        """Sets the shipment_type of this ShipmentDTO.


        :param shipment_type: The shipment_type of this ShipmentDTO.
        :type shipment_type: ShipmentType
        """

        self._shipment_type = shipment_type

    @property
    def warehouse(self) -> PartnerShipmentWarehouseDTO:
        """Gets the warehouse of this ShipmentDTO.


        :return: The warehouse of this ShipmentDTO.
        :rtype: PartnerShipmentWarehouseDTO
        """
        return self._warehouse

    @warehouse.setter
    def warehouse(self, warehouse: PartnerShipmentWarehouseDTO):
        """Sets the warehouse of this ShipmentDTO.


        :param warehouse: The warehouse of this ShipmentDTO.
        :type warehouse: PartnerShipmentWarehouseDTO
        """

        self._warehouse = warehouse

    @property
    def warehouse_to(self) -> PartnerShipmentWarehouseDTO:
        """Gets the warehouse_to of this ShipmentDTO.


        :return: The warehouse_to of this ShipmentDTO.
        :rtype: PartnerShipmentWarehouseDTO
        """
        return self._warehouse_to

    @warehouse_to.setter
    def warehouse_to(self, warehouse_to: PartnerShipmentWarehouseDTO):
        """Sets the warehouse_to of this ShipmentDTO.


        :param warehouse_to: The warehouse_to of this ShipmentDTO.
        :type warehouse_to: PartnerShipmentWarehouseDTO
        """

        self._warehouse_to = warehouse_to

    @property
    def external_id(self) -> str:
        """Gets the external_id of this ShipmentDTO.

        Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.  # noqa: E501

        :return: The external_id of this ShipmentDTO.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id: str):
        """Sets the external_id of this ShipmentDTO.

        Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.  # noqa: E501

        :param external_id: The external_id of this ShipmentDTO.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def delivery_service(self) -> DeliveryServiceDTO:
        """Gets the delivery_service of this ShipmentDTO.


        :return: The delivery_service of this ShipmentDTO.
        :rtype: DeliveryServiceDTO
        """
        return self._delivery_service

    @delivery_service.setter
    def delivery_service(self, delivery_service: DeliveryServiceDTO):
        """Sets the delivery_service of this ShipmentDTO.


        :param delivery_service: The delivery_service of this ShipmentDTO.
        :type delivery_service: DeliveryServiceDTO
        """

        self._delivery_service = delivery_service

    @property
    def pallets_count(self) -> PalletsCountDTO:
        """Gets the pallets_count of this ShipmentDTO.


        :return: The pallets_count of this ShipmentDTO.
        :rtype: PalletsCountDTO
        """
        return self._pallets_count

    @pallets_count.setter
    def pallets_count(self, pallets_count: PalletsCountDTO):
        """Sets the pallets_count of this ShipmentDTO.


        :param pallets_count: The pallets_count of this ShipmentDTO.
        :type pallets_count: PalletsCountDTO
        """

        self._pallets_count = pallets_count

    @property
    def order_ids(self) -> list[int]:
        """Gets the order_ids of this ShipmentDTO.

        Идентификаторы заказов в отгрузке.  # noqa: E501

        :return: The order_ids of this ShipmentDTO.
        :rtype: list[int]
        """
        return self._order_ids

    @order_ids.setter
    def order_ids(self, order_ids: list[int]):
        """Sets the order_ids of this ShipmentDTO.

        Идентификаторы заказов в отгрузке.  # noqa: E501

        :param order_ids: The order_ids of this ShipmentDTO.
        :type order_ids: list[int]
        """
        if order_ids is None:
            raise ValueError("Invalid value for `order_ids`, must not be `None`")  # noqa: E501

        self._order_ids = order_ids

    @property
    def draft_count(self) -> int:
        """Gets the draft_count of this ShipmentDTO.

        Количество заказов, которое Маркет запланировал к отгрузке.  # noqa: E501

        :return: The draft_count of this ShipmentDTO.
        :rtype: int
        """
        return self._draft_count

    @draft_count.setter
    def draft_count(self, draft_count: int):
        """Sets the draft_count of this ShipmentDTO.

        Количество заказов, которое Маркет запланировал к отгрузке.  # noqa: E501

        :param draft_count: The draft_count of this ShipmentDTO.
        :type draft_count: int
        """

        self._draft_count = draft_count

    @property
    def planned_count(self) -> int:
        """Gets the planned_count of this ShipmentDTO.

        Количество заказов, которое Маркет подтвердил к отгрузке.  # noqa: E501

        :return: The planned_count of this ShipmentDTO.
        :rtype: int
        """
        return self._planned_count

    @planned_count.setter
    def planned_count(self, planned_count: int):
        """Sets the planned_count of this ShipmentDTO.

        Количество заказов, которое Маркет подтвердил к отгрузке.  # noqa: E501

        :param planned_count: The planned_count of this ShipmentDTO.
        :type planned_count: int
        """

        self._planned_count = planned_count

    @property
    def fact_count(self) -> int:
        """Gets the fact_count of this ShipmentDTO.

        Количество заказов, принятых в сортировочном центре или пункте приема.  # noqa: E501

        :return: The fact_count of this ShipmentDTO.
        :rtype: int
        """
        return self._fact_count

    @fact_count.setter
    def fact_count(self, fact_count: int):
        """Sets the fact_count of this ShipmentDTO.

        Количество заказов, принятых в сортировочном центре или пункте приема.  # noqa: E501

        :param fact_count: The fact_count of this ShipmentDTO.
        :type fact_count: int
        """

        self._fact_count = fact_count

    @property
    def current_status(self) -> ShipmentStatusChangeDTO:
        """Gets the current_status of this ShipmentDTO.


        :return: The current_status of this ShipmentDTO.
        :rtype: ShipmentStatusChangeDTO
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status: ShipmentStatusChangeDTO):
        """Sets the current_status of this ShipmentDTO.


        :param current_status: The current_status of this ShipmentDTO.
        :type current_status: ShipmentStatusChangeDTO
        """

        self._current_status = current_status

    @property
    def available_actions(self) -> list[ShipmentActionType]:
        """Gets the available_actions of this ShipmentDTO.

        Доступные действия над отгрузкой.  # noqa: E501

        :return: The available_actions of this ShipmentDTO.
        :rtype: list[ShipmentActionType]
        """
        return self._available_actions

    @available_actions.setter
    def available_actions(self, available_actions: list[ShipmentActionType]):
        """Sets the available_actions of this ShipmentDTO.

        Доступные действия над отгрузкой.  # noqa: E501

        :param available_actions: The available_actions of this ShipmentDTO.
        :type available_actions: list[ShipmentActionType]
        """
        if available_actions is None:
            raise ValueError("Invalid value for `available_actions`, must not be `None`")  # noqa: E501

        self._available_actions = available_actions
