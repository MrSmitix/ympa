# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.day_of_week_type import DayOfWeekType  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.offer_availability_status_type import OfferAvailabilityStatusType  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.offer_processing_state_dto import OfferProcessingStateDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.offer_weight_dimensions_dto import OfferWeightDimensionsDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.time_period_dto import TimePeriodDTO  # noqa: F401,E501
import re  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class UpdateMappingsOfferDTO(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, shop_sku: str=None, category: str=None, vendor: str=None, vendor_code: str=None, description: str=None, id: str=None, feed_id: int=None, barcodes: List[str]=None, urls: List[str]=None, pictures: List[str]=None, manufacturer: str=None, manufacturer_countries: List[str]=None, min_shipment: int=None, transport_unit_size: int=None, quantum_of_supply: int=None, delivery_duration_days: int=None, box_count: int=None, customs_commodity_codes: List[str]=None, weight_dimensions: OfferWeightDimensionsDTO=None, supply_schedule_days: List[DayOfWeekType]=None, shelf_life_days: int=None, life_time_days: int=None, guarantee_period_days: int=None, processing_state: OfferProcessingStateDTO=None, availability: OfferAvailabilityStatusType=None, shelf_life: TimePeriodDTO=None, life_time: TimePeriodDTO=None, guarantee_period: TimePeriodDTO=None, certificate: str=None):  # noqa: E501
        """UpdateMappingsOfferDTO - a model defined in Swagger

        :param name: The name of this UpdateMappingsOfferDTO.  # noqa: E501
        :type name: str
        :param shop_sku: The shop_sku of this UpdateMappingsOfferDTO.  # noqa: E501
        :type shop_sku: str
        :param category: The category of this UpdateMappingsOfferDTO.  # noqa: E501
        :type category: str
        :param vendor: The vendor of this UpdateMappingsOfferDTO.  # noqa: E501
        :type vendor: str
        :param vendor_code: The vendor_code of this UpdateMappingsOfferDTO.  # noqa: E501
        :type vendor_code: str
        :param description: The description of this UpdateMappingsOfferDTO.  # noqa: E501
        :type description: str
        :param id: The id of this UpdateMappingsOfferDTO.  # noqa: E501
        :type id: str
        :param feed_id: The feed_id of this UpdateMappingsOfferDTO.  # noqa: E501
        :type feed_id: int
        :param barcodes: The barcodes of this UpdateMappingsOfferDTO.  # noqa: E501
        :type barcodes: List[str]
        :param urls: The urls of this UpdateMappingsOfferDTO.  # noqa: E501
        :type urls: List[str]
        :param pictures: The pictures of this UpdateMappingsOfferDTO.  # noqa: E501
        :type pictures: List[str]
        :param manufacturer: The manufacturer of this UpdateMappingsOfferDTO.  # noqa: E501
        :type manufacturer: str
        :param manufacturer_countries: The manufacturer_countries of this UpdateMappingsOfferDTO.  # noqa: E501
        :type manufacturer_countries: List[str]
        :param min_shipment: The min_shipment of this UpdateMappingsOfferDTO.  # noqa: E501
        :type min_shipment: int
        :param transport_unit_size: The transport_unit_size of this UpdateMappingsOfferDTO.  # noqa: E501
        :type transport_unit_size: int
        :param quantum_of_supply: The quantum_of_supply of this UpdateMappingsOfferDTO.  # noqa: E501
        :type quantum_of_supply: int
        :param delivery_duration_days: The delivery_duration_days of this UpdateMappingsOfferDTO.  # noqa: E501
        :type delivery_duration_days: int
        :param box_count: The box_count of this UpdateMappingsOfferDTO.  # noqa: E501
        :type box_count: int
        :param customs_commodity_codes: The customs_commodity_codes of this UpdateMappingsOfferDTO.  # noqa: E501
        :type customs_commodity_codes: List[str]
        :param weight_dimensions: The weight_dimensions of this UpdateMappingsOfferDTO.  # noqa: E501
        :type weight_dimensions: OfferWeightDimensionsDTO
        :param supply_schedule_days: The supply_schedule_days of this UpdateMappingsOfferDTO.  # noqa: E501
        :type supply_schedule_days: List[DayOfWeekType]
        :param shelf_life_days: The shelf_life_days of this UpdateMappingsOfferDTO.  # noqa: E501
        :type shelf_life_days: int
        :param life_time_days: The life_time_days of this UpdateMappingsOfferDTO.  # noqa: E501
        :type life_time_days: int
        :param guarantee_period_days: The guarantee_period_days of this UpdateMappingsOfferDTO.  # noqa: E501
        :type guarantee_period_days: int
        :param processing_state: The processing_state of this UpdateMappingsOfferDTO.  # noqa: E501
        :type processing_state: OfferProcessingStateDTO
        :param availability: The availability of this UpdateMappingsOfferDTO.  # noqa: E501
        :type availability: OfferAvailabilityStatusType
        :param shelf_life: The shelf_life of this UpdateMappingsOfferDTO.  # noqa: E501
        :type shelf_life: TimePeriodDTO
        :param life_time: The life_time of this UpdateMappingsOfferDTO.  # noqa: E501
        :type life_time: TimePeriodDTO
        :param guarantee_period: The guarantee_period of this UpdateMappingsOfferDTO.  # noqa: E501
        :type guarantee_period: TimePeriodDTO
        :param certificate: The certificate of this UpdateMappingsOfferDTO.  # noqa: E501
        :type certificate: str
        """
        self.swagger_types = {
            'name': str,
            'shop_sku': str,
            'category': str,
            'vendor': str,
            'vendor_code': str,
            'description': str,
            'id': str,
            'feed_id': int,
            'barcodes': List[str],
            'urls': List[str],
            'pictures': List[str],
            'manufacturer': str,
            'manufacturer_countries': List[str],
            'min_shipment': int,
            'transport_unit_size': int,
            'quantum_of_supply': int,
            'delivery_duration_days': int,
            'box_count': int,
            'customs_commodity_codes': List[str],
            'weight_dimensions': OfferWeightDimensionsDTO,
            'supply_schedule_days': List[DayOfWeekType],
            'shelf_life_days': int,
            'life_time_days': int,
            'guarantee_period_days': int,
            'processing_state': OfferProcessingStateDTO,
            'availability': OfferAvailabilityStatusType,
            'shelf_life': TimePeriodDTO,
            'life_time': TimePeriodDTO,
            'guarantee_period': TimePeriodDTO,
            'certificate': str
        }

        self.attribute_map = {
            'name': 'name',
            'shop_sku': 'shopSku',
            'category': 'category',
            'vendor': 'vendor',
            'vendor_code': 'vendorCode',
            'description': 'description',
            'id': 'id',
            'feed_id': 'feedId',
            'barcodes': 'barcodes',
            'urls': 'urls',
            'pictures': 'pictures',
            'manufacturer': 'manufacturer',
            'manufacturer_countries': 'manufacturerCountries',
            'min_shipment': 'minShipment',
            'transport_unit_size': 'transportUnitSize',
            'quantum_of_supply': 'quantumOfSupply',
            'delivery_duration_days': 'deliveryDurationDays',
            'box_count': 'boxCount',
            'customs_commodity_codes': 'customsCommodityCodes',
            'weight_dimensions': 'weightDimensions',
            'supply_schedule_days': 'supplyScheduleDays',
            'shelf_life_days': 'shelfLifeDays',
            'life_time_days': 'lifeTimeDays',
            'guarantee_period_days': 'guaranteePeriodDays',
            'processing_state': 'processingState',
            'availability': 'availability',
            'shelf_life': 'shelfLife',
            'life_time': 'lifeTime',
            'guarantee_period': 'guaranteePeriod',
            'certificate': 'certificate'
        }

        self._name = name
        self._shop_sku = shop_sku
        self._category = category
        self._vendor = vendor
        self._vendor_code = vendor_code
        self._description = description
        self._id = id
        self._feed_id = feed_id
        self._barcodes = barcodes
        self._urls = urls
        self._pictures = pictures
        self._manufacturer = manufacturer
        self._manufacturer_countries = manufacturer_countries
        self._min_shipment = min_shipment
        self._transport_unit_size = transport_unit_size
        self._quantum_of_supply = quantum_of_supply
        self._delivery_duration_days = delivery_duration_days
        self._box_count = box_count
        self._customs_commodity_codes = customs_commodity_codes
        self._weight_dimensions = weight_dimensions
        self._supply_schedule_days = supply_schedule_days
        self._shelf_life_days = shelf_life_days
        self._life_time_days = life_time_days
        self._guarantee_period_days = guarantee_period_days
        self._processing_state = processing_state
        self._availability = availability
        self._shelf_life = shelf_life
        self._life_time = life_time
        self._guarantee_period = guarantee_period
        self._certificate = certificate

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateMappingsOfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateMappingsOfferDTO of this UpdateMappingsOfferDTO.  # noqa: E501
        :rtype: UpdateMappingsOfferDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this UpdateMappingsOfferDTO.

        Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)   # noqa: E501

        :return: The name of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UpdateMappingsOfferDTO.

        Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)   # noqa: E501

        :param name: The name of this UpdateMappingsOfferDTO.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self._name = name

    @property
    def shop_sku(self) -> str:
        """Gets the shop_sku of this UpdateMappingsOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The shop_sku of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._shop_sku

    @shop_sku.setter
    def shop_sku(self, shop_sku: str):
        """Sets the shop_sku of this UpdateMappingsOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param shop_sku: The shop_sku of this UpdateMappingsOfferDTO.
        :type shop_sku: str
        """
        if shop_sku is not None and len(shop_sku) > 255:
            raise ValueError("Invalid value for `shop_sku`, length must be less than or equal to `255`")  # noqa: E501
        if shop_sku is not None and len(shop_sku) < 1:
            raise ValueError("Invalid value for `shop_sku`, length must be greater than or equal to `1`")  # noqa: E501
        if shop_sku is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', shop_sku):  # noqa: E501
            raise ValueError("Invalid value for `shop_sku`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._shop_sku = shop_sku

    @property
    def category(self) -> str:
        """Gets the category of this UpdateMappingsOfferDTO.

        Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.   # noqa: E501

        :return: The category of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this UpdateMappingsOfferDTO.

        Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.   # noqa: E501

        :param category: The category of this UpdateMappingsOfferDTO.
        :type category: str
        """

        self._category = category

    @property
    def vendor(self) -> str:
        """Gets the vendor of this UpdateMappingsOfferDTO.

        Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.  # noqa: E501

        :return: The vendor of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor: str):
        """Sets the vendor of this UpdateMappingsOfferDTO.

        Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.  # noqa: E501

        :param vendor: The vendor of this UpdateMappingsOfferDTO.
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def vendor_code(self) -> str:
        """Gets the vendor_code of this UpdateMappingsOfferDTO.

        Артикул товара от производителя.  # noqa: E501

        :return: The vendor_code of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code: str):
        """Sets the vendor_code of this UpdateMappingsOfferDTO.

        Артикул товара от производителя.  # noqa: E501

        :param vendor_code: The vendor_code of this UpdateMappingsOfferDTO.
        :type vendor_code: str
        """

        self._vendor_code = vendor_code

    @property
    def description(self) -> str:
        """Gets the description of this UpdateMappingsOfferDTO.

        Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)   # noqa: E501

        :return: The description of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UpdateMappingsOfferDTO.

        Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)   # noqa: E501

        :param description: The description of this UpdateMappingsOfferDTO.
        :type description: str
        """
        if description is not None and len(description) > 6000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `6000`")  # noqa: E501

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this UpdateMappingsOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The id of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UpdateMappingsOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param id: The id of this UpdateMappingsOfferDTO.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501
        if id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._id = id

    @property
    def feed_id(self) -> int:
        """Gets the feed_id of this UpdateMappingsOfferDTO.

        Идентификатор фида.  # noqa: E501

        :return: The feed_id of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id: int):
        """Sets the feed_id of this UpdateMappingsOfferDTO.

        Идентификатор фида.  # noqa: E501

        :param feed_id: The feed_id of this UpdateMappingsOfferDTO.
        :type feed_id: int
        """

        self._feed_id = feed_id

    @property
    def barcodes(self) -> List[str]:
        """Gets the barcodes of this UpdateMappingsOfferDTO.

        Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)    # noqa: E501

        :return: The barcodes of this UpdateMappingsOfferDTO.
        :rtype: List[str]
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes: List[str]):
        """Sets the barcodes of this UpdateMappingsOfferDTO.

        Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)    # noqa: E501

        :param barcodes: The barcodes of this UpdateMappingsOfferDTO.
        :type barcodes: List[str]
        """

        self._barcodes = barcodes

    @property
    def urls(self) -> List[str]:
        """Gets the urls of this UpdateMappingsOfferDTO.

        URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.   # noqa: E501

        :return: The urls of this UpdateMappingsOfferDTO.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls: List[str]):
        """Sets the urls of this UpdateMappingsOfferDTO.

        URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.   # noqa: E501

        :param urls: The urls of this UpdateMappingsOfferDTO.
        :type urls: List[str]
        """

        self._urls = urls

    @property
    def pictures(self) -> List[str]:
        """Gets the pictures of this UpdateMappingsOfferDTO.

        Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`.   # noqa: E501

        :return: The pictures of this UpdateMappingsOfferDTO.
        :rtype: List[str]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures: List[str]):
        """Sets the pictures of this UpdateMappingsOfferDTO.

        Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`.   # noqa: E501

        :param pictures: The pictures of this UpdateMappingsOfferDTO.
        :type pictures: List[str]
        """

        self._pictures = pictures

    @property
    def manufacturer(self) -> str:
        """Gets the manufacturer of this UpdateMappingsOfferDTO.

        Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.   # noqa: E501

        :return: The manufacturer of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer: str):
        """Sets the manufacturer of this UpdateMappingsOfferDTO.

        Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.   # noqa: E501

        :param manufacturer: The manufacturer of this UpdateMappingsOfferDTO.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def manufacturer_countries(self) -> List[str]:
        """Gets the manufacturer_countries of this UpdateMappingsOfferDTO.

        Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.   # noqa: E501

        :return: The manufacturer_countries of this UpdateMappingsOfferDTO.
        :rtype: List[str]
        """
        return self._manufacturer_countries

    @manufacturer_countries.setter
    def manufacturer_countries(self, manufacturer_countries: List[str]):
        """Sets the manufacturer_countries of this UpdateMappingsOfferDTO.

        Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.   # noqa: E501

        :param manufacturer_countries: The manufacturer_countries of this UpdateMappingsOfferDTO.
        :type manufacturer_countries: List[str]
        """

        self._manufacturer_countries = manufacturer_countries

    @property
    def min_shipment(self) -> int:
        """Gets the min_shipment of this UpdateMappingsOfferDTO.

        Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.   # noqa: E501

        :return: The min_shipment of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._min_shipment

    @min_shipment.setter
    def min_shipment(self, min_shipment: int):
        """Sets the min_shipment of this UpdateMappingsOfferDTO.

        Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.   # noqa: E501

        :param min_shipment: The min_shipment of this UpdateMappingsOfferDTO.
        :type min_shipment: int
        """

        self._min_shipment = min_shipment

    @property
    def transport_unit_size(self) -> int:
        """Gets the transport_unit_size of this UpdateMappingsOfferDTO.

        Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.   # noqa: E501

        :return: The transport_unit_size of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._transport_unit_size

    @transport_unit_size.setter
    def transport_unit_size(self, transport_unit_size: int):
        """Sets the transport_unit_size of this UpdateMappingsOfferDTO.

        Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.   # noqa: E501

        :param transport_unit_size: The transport_unit_size of this UpdateMappingsOfferDTO.
        :type transport_unit_size: int
        """

        self._transport_unit_size = transport_unit_size

    @property
    def quantum_of_supply(self) -> int:
        """Gets the quantum_of_supply of this UpdateMappingsOfferDTO.

        Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.   # noqa: E501

        :return: The quantum_of_supply of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._quantum_of_supply

    @quantum_of_supply.setter
    def quantum_of_supply(self, quantum_of_supply: int):
        """Sets the quantum_of_supply of this UpdateMappingsOfferDTO.

        Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.   # noqa: E501

        :param quantum_of_supply: The quantum_of_supply of this UpdateMappingsOfferDTO.
        :type quantum_of_supply: int
        """

        self._quantum_of_supply = quantum_of_supply

    @property
    def delivery_duration_days(self) -> int:
        """Gets the delivery_duration_days of this UpdateMappingsOfferDTO.

        Срок, за который продавец поставляет товары на склад, в днях.  # noqa: E501

        :return: The delivery_duration_days of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._delivery_duration_days

    @delivery_duration_days.setter
    def delivery_duration_days(self, delivery_duration_days: int):
        """Sets the delivery_duration_days of this UpdateMappingsOfferDTO.

        Срок, за который продавец поставляет товары на склад, в днях.  # noqa: E501

        :param delivery_duration_days: The delivery_duration_days of this UpdateMappingsOfferDTO.
        :type delivery_duration_days: int
        """

        self._delivery_duration_days = delivery_duration_days

    @property
    def box_count(self) -> int:
        """Gets the box_count of this UpdateMappingsOfferDTO.

        Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.   # noqa: E501

        :return: The box_count of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._box_count

    @box_count.setter
    def box_count(self, box_count: int):
        """Sets the box_count of this UpdateMappingsOfferDTO.

        Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.   # noqa: E501

        :param box_count: The box_count of this UpdateMappingsOfferDTO.
        :type box_count: int
        """

        self._box_count = box_count

    @property
    def customs_commodity_codes(self) -> List[str]:
        """Gets the customs_commodity_codes of this UpdateMappingsOfferDTO.

        Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.   # noqa: E501

        :return: The customs_commodity_codes of this UpdateMappingsOfferDTO.
        :rtype: List[str]
        """
        return self._customs_commodity_codes

    @customs_commodity_codes.setter
    def customs_commodity_codes(self, customs_commodity_codes: List[str]):
        """Sets the customs_commodity_codes of this UpdateMappingsOfferDTO.

        Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.   # noqa: E501

        :param customs_commodity_codes: The customs_commodity_codes of this UpdateMappingsOfferDTO.
        :type customs_commodity_codes: List[str]
        """

        self._customs_commodity_codes = customs_commodity_codes

    @property
    def weight_dimensions(self) -> OfferWeightDimensionsDTO:
        """Gets the weight_dimensions of this UpdateMappingsOfferDTO.


        :return: The weight_dimensions of this UpdateMappingsOfferDTO.
        :rtype: OfferWeightDimensionsDTO
        """
        return self._weight_dimensions

    @weight_dimensions.setter
    def weight_dimensions(self, weight_dimensions: OfferWeightDimensionsDTO):
        """Sets the weight_dimensions of this UpdateMappingsOfferDTO.


        :param weight_dimensions: The weight_dimensions of this UpdateMappingsOfferDTO.
        :type weight_dimensions: OfferWeightDimensionsDTO
        """

        self._weight_dimensions = weight_dimensions

    @property
    def supply_schedule_days(self) -> List[DayOfWeekType]:
        """Gets the supply_schedule_days of this UpdateMappingsOfferDTO.

        Дни недели, в которые продавец поставляет товары на склад.  # noqa: E501

        :return: The supply_schedule_days of this UpdateMappingsOfferDTO.
        :rtype: List[DayOfWeekType]
        """
        return self._supply_schedule_days

    @supply_schedule_days.setter
    def supply_schedule_days(self, supply_schedule_days: List[DayOfWeekType]):
        """Sets the supply_schedule_days of this UpdateMappingsOfferDTO.

        Дни недели, в которые продавец поставляет товары на склад.  # noqa: E501

        :param supply_schedule_days: The supply_schedule_days of this UpdateMappingsOfferDTO.
        :type supply_schedule_days: List[DayOfWeekType]
        """

        self._supply_schedule_days = supply_schedule_days

    @property
    def shelf_life_days(self) -> int:
        """Gets the shelf_life_days of this UpdateMappingsOfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.   # noqa: E501

        :return: The shelf_life_days of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._shelf_life_days

    @shelf_life_days.setter
    def shelf_life_days(self, shelf_life_days: int):
        """Sets the shelf_life_days of this UpdateMappingsOfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.   # noqa: E501

        :param shelf_life_days: The shelf_life_days of this UpdateMappingsOfferDTO.
        :type shelf_life_days: int
        """

        self._shelf_life_days = shelf_life_days

    @property
    def life_time_days(self) -> int:
        """Gets the life_time_days of this UpdateMappingsOfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.   # noqa: E501

        :return: The life_time_days of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._life_time_days

    @life_time_days.setter
    def life_time_days(self, life_time_days: int):
        """Sets the life_time_days of this UpdateMappingsOfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.   # noqa: E501

        :param life_time_days: The life_time_days of this UpdateMappingsOfferDTO.
        :type life_time_days: int
        """

        self._life_time_days = life_time_days

    @property
    def guarantee_period_days(self) -> int:
        """Gets the guarantee_period_days of this UpdateMappingsOfferDTO.

        Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.   # noqa: E501

        :return: The guarantee_period_days of this UpdateMappingsOfferDTO.
        :rtype: int
        """
        return self._guarantee_period_days

    @guarantee_period_days.setter
    def guarantee_period_days(self, guarantee_period_days: int):
        """Sets the guarantee_period_days of this UpdateMappingsOfferDTO.

        Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.   # noqa: E501

        :param guarantee_period_days: The guarantee_period_days of this UpdateMappingsOfferDTO.
        :type guarantee_period_days: int
        """

        self._guarantee_period_days = guarantee_period_days

    @property
    def processing_state(self) -> OfferProcessingStateDTO:
        """Gets the processing_state of this UpdateMappingsOfferDTO.


        :return: The processing_state of this UpdateMappingsOfferDTO.
        :rtype: OfferProcessingStateDTO
        """
        return self._processing_state

    @processing_state.setter
    def processing_state(self, processing_state: OfferProcessingStateDTO):
        """Sets the processing_state of this UpdateMappingsOfferDTO.


        :param processing_state: The processing_state of this UpdateMappingsOfferDTO.
        :type processing_state: OfferProcessingStateDTO
        """

        self._processing_state = processing_state

    @property
    def availability(self) -> OfferAvailabilityStatusType:
        """Gets the availability of this UpdateMappingsOfferDTO.


        :return: The availability of this UpdateMappingsOfferDTO.
        :rtype: OfferAvailabilityStatusType
        """
        return self._availability

    @availability.setter
    def availability(self, availability: OfferAvailabilityStatusType):
        """Sets the availability of this UpdateMappingsOfferDTO.


        :param availability: The availability of this UpdateMappingsOfferDTO.
        :type availability: OfferAvailabilityStatusType
        """

        self._availability = availability

    @property
    def shelf_life(self) -> TimePeriodDTO:
        """Gets the shelf_life of this UpdateMappingsOfferDTO.


        :return: The shelf_life of this UpdateMappingsOfferDTO.
        :rtype: TimePeriodDTO
        """
        return self._shelf_life

    @shelf_life.setter
    def shelf_life(self, shelf_life: TimePeriodDTO):
        """Sets the shelf_life of this UpdateMappingsOfferDTO.


        :param shelf_life: The shelf_life of this UpdateMappingsOfferDTO.
        :type shelf_life: TimePeriodDTO
        """

        self._shelf_life = shelf_life

    @property
    def life_time(self) -> TimePeriodDTO:
        """Gets the life_time of this UpdateMappingsOfferDTO.


        :return: The life_time of this UpdateMappingsOfferDTO.
        :rtype: TimePeriodDTO
        """
        return self._life_time

    @life_time.setter
    def life_time(self, life_time: TimePeriodDTO):
        """Sets the life_time of this UpdateMappingsOfferDTO.


        :param life_time: The life_time of this UpdateMappingsOfferDTO.
        :type life_time: TimePeriodDTO
        """

        self._life_time = life_time

    @property
    def guarantee_period(self) -> TimePeriodDTO:
        """Gets the guarantee_period of this UpdateMappingsOfferDTO.


        :return: The guarantee_period of this UpdateMappingsOfferDTO.
        :rtype: TimePeriodDTO
        """
        return self._guarantee_period

    @guarantee_period.setter
    def guarantee_period(self, guarantee_period: TimePeriodDTO):
        """Sets the guarantee_period of this UpdateMappingsOfferDTO.


        :param guarantee_period: The guarantee_period of this UpdateMappingsOfferDTO.
        :type guarantee_period: TimePeriodDTO
        """

        self._guarantee_period = guarantee_period

    @property
    def certificate(self) -> str:
        """Gets the certificate of this UpdateMappingsOfferDTO.

        Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)   # noqa: E501

        :return: The certificate of this UpdateMappingsOfferDTO.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate: str):
        """Sets the certificate of this UpdateMappingsOfferDTO.

        Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)   # noqa: E501

        :param certificate: The certificate of this UpdateMappingsOfferDTO.
        :type certificate: str
        """

        self._certificate = certificate
