# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.ympa_python_blueplanet_server.models.base_model import Model
from app.ympa_python_blueplanet_server.models.outlet_address_dto import OutletAddressDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.outlet_delivery_rule_dto import OutletDeliveryRuleDTO  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.outlet_type import OutletType  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.outlet_visibility_type import OutletVisibilityType  # noqa: F401,E501
from app.ympa_python_blueplanet_server.models.outlet_working_schedule_dto import OutletWorkingScheduleDTO  # noqa: F401,E501
from ympa_python_blueplanet_server import util


class ChangeOutletRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: OutletType=None, coords: str=None, is_main: bool=None, shop_outlet_code: str=None, visibility: OutletVisibilityType=None, address: OutletAddressDTO=None, phones: List[str]=None, working_schedule: OutletWorkingScheduleDTO=None, delivery_rules: List[OutletDeliveryRuleDTO]=None, storage_period: int=None):  # noqa: E501
        """ChangeOutletRequest - a model defined in Swagger

        :param name: The name of this ChangeOutletRequest.  # noqa: E501
        :type name: str
        :param type: The type of this ChangeOutletRequest.  # noqa: E501
        :type type: OutletType
        :param coords: The coords of this ChangeOutletRequest.  # noqa: E501
        :type coords: str
        :param is_main: The is_main of this ChangeOutletRequest.  # noqa: E501
        :type is_main: bool
        :param shop_outlet_code: The shop_outlet_code of this ChangeOutletRequest.  # noqa: E501
        :type shop_outlet_code: str
        :param visibility: The visibility of this ChangeOutletRequest.  # noqa: E501
        :type visibility: OutletVisibilityType
        :param address: The address of this ChangeOutletRequest.  # noqa: E501
        :type address: OutletAddressDTO
        :param phones: The phones of this ChangeOutletRequest.  # noqa: E501
        :type phones: List[str]
        :param working_schedule: The working_schedule of this ChangeOutletRequest.  # noqa: E501
        :type working_schedule: OutletWorkingScheduleDTO
        :param delivery_rules: The delivery_rules of this ChangeOutletRequest.  # noqa: E501
        :type delivery_rules: List[OutletDeliveryRuleDTO]
        :param storage_period: The storage_period of this ChangeOutletRequest.  # noqa: E501
        :type storage_period: int
        """
        self.swagger_types = {
            'name': str,
            'type': OutletType,
            'coords': str,
            'is_main': bool,
            'shop_outlet_code': str,
            'visibility': OutletVisibilityType,
            'address': OutletAddressDTO,
            'phones': List[str],
            'working_schedule': OutletWorkingScheduleDTO,
            'delivery_rules': List[OutletDeliveryRuleDTO],
            'storage_period': int
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'coords': 'coords',
            'is_main': 'isMain',
            'shop_outlet_code': 'shopOutletCode',
            'visibility': 'visibility',
            'address': 'address',
            'phones': 'phones',
            'working_schedule': 'workingSchedule',
            'delivery_rules': 'deliveryRules',
            'storage_period': 'storagePeriod'
        }

        self._name = name
        self._type = type
        self._coords = coords
        self._is_main = is_main
        self._shop_outlet_code = shop_outlet_code
        self._visibility = visibility
        self._address = address
        self._phones = phones
        self._working_schedule = working_schedule
        self._delivery_rules = delivery_rules
        self._storage_period = storage_period

    @classmethod
    def from_dict(cls, dikt) -> 'ChangeOutletRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChangeOutletRequest of this ChangeOutletRequest.  # noqa: E501
        :rtype: ChangeOutletRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ChangeOutletRequest.

        Название точки продаж.   # noqa: E501

        :return: The name of this ChangeOutletRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChangeOutletRequest.

        Название точки продаж.   # noqa: E501

        :param name: The name of this ChangeOutletRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> OutletType:
        """Gets the type of this ChangeOutletRequest.


        :return: The type of this ChangeOutletRequest.
        :rtype: OutletType
        """
        return self._type

    @type.setter
    def type(self, type: OutletType):
        """Sets the type of this ChangeOutletRequest.


        :param type: The type of this ChangeOutletRequest.
        :type type: OutletType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def coords(self) -> str:
        """Gets the coords of this ChangeOutletRequest.

        Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.   # noqa: E501

        :return: The coords of this ChangeOutletRequest.
        :rtype: str
        """
        return self._coords

    @coords.setter
    def coords(self, coords: str):
        """Sets the coords of this ChangeOutletRequest.

        Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.   # noqa: E501

        :param coords: The coords of this ChangeOutletRequest.
        :type coords: str
        """

        self._coords = coords

    @property
    def is_main(self) -> bool:
        """Gets the is_main of this ChangeOutletRequest.

        Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.   # noqa: E501

        :return: The is_main of this ChangeOutletRequest.
        :rtype: bool
        """
        return self._is_main

    @is_main.setter
    def is_main(self, is_main: bool):
        """Sets the is_main of this ChangeOutletRequest.

        Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.   # noqa: E501

        :param is_main: The is_main of this ChangeOutletRequest.
        :type is_main: bool
        """

        self._is_main = is_main

    @property
    def shop_outlet_code(self) -> str:
        """Gets the shop_outlet_code of this ChangeOutletRequest.

        Идентификатор точки продаж, присвоенный магазином.  # noqa: E501

        :return: The shop_outlet_code of this ChangeOutletRequest.
        :rtype: str
        """
        return self._shop_outlet_code

    @shop_outlet_code.setter
    def shop_outlet_code(self, shop_outlet_code: str):
        """Sets the shop_outlet_code of this ChangeOutletRequest.

        Идентификатор точки продаж, присвоенный магазином.  # noqa: E501

        :param shop_outlet_code: The shop_outlet_code of this ChangeOutletRequest.
        :type shop_outlet_code: str
        """

        self._shop_outlet_code = shop_outlet_code

    @property
    def visibility(self) -> OutletVisibilityType:
        """Gets the visibility of this ChangeOutletRequest.


        :return: The visibility of this ChangeOutletRequest.
        :rtype: OutletVisibilityType
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: OutletVisibilityType):
        """Sets the visibility of this ChangeOutletRequest.


        :param visibility: The visibility of this ChangeOutletRequest.
        :type visibility: OutletVisibilityType
        """

        self._visibility = visibility

    @property
    def address(self) -> OutletAddressDTO:
        """Gets the address of this ChangeOutletRequest.


        :return: The address of this ChangeOutletRequest.
        :rtype: OutletAddressDTO
        """
        return self._address

    @address.setter
    def address(self, address: OutletAddressDTO):
        """Sets the address of this ChangeOutletRequest.


        :param address: The address of this ChangeOutletRequest.
        :type address: OutletAddressDTO
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def phones(self) -> List[str]:
        """Gets the phones of this ChangeOutletRequest.

        Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.   # noqa: E501

        :return: The phones of this ChangeOutletRequest.
        :rtype: List[str]
        """
        return self._phones

    @phones.setter
    def phones(self, phones: List[str]):
        """Sets the phones of this ChangeOutletRequest.

        Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.   # noqa: E501

        :param phones: The phones of this ChangeOutletRequest.
        :type phones: List[str]
        """
        if phones is None:
            raise ValueError("Invalid value for `phones`, must not be `None`")  # noqa: E501
        if phones is not None and len(phones) < 1:
            raise ValueError("Invalid value for `phones`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._phones = phones

    @property
    def working_schedule(self) -> OutletWorkingScheduleDTO:
        """Gets the working_schedule of this ChangeOutletRequest.


        :return: The working_schedule of this ChangeOutletRequest.
        :rtype: OutletWorkingScheduleDTO
        """
        return self._working_schedule

    @working_schedule.setter
    def working_schedule(self, working_schedule: OutletWorkingScheduleDTO):
        """Sets the working_schedule of this ChangeOutletRequest.


        :param working_schedule: The working_schedule of this ChangeOutletRequest.
        :type working_schedule: OutletWorkingScheduleDTO
        """
        if working_schedule is None:
            raise ValueError("Invalid value for `working_schedule`, must not be `None`")  # noqa: E501

        self._working_schedule = working_schedule

    @property
    def delivery_rules(self) -> List[OutletDeliveryRuleDTO]:
        """Gets the delivery_rules of this ChangeOutletRequest.

        Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.   # noqa: E501

        :return: The delivery_rules of this ChangeOutletRequest.
        :rtype: List[OutletDeliveryRuleDTO]
        """
        return self._delivery_rules

    @delivery_rules.setter
    def delivery_rules(self, delivery_rules: List[OutletDeliveryRuleDTO]):
        """Sets the delivery_rules of this ChangeOutletRequest.

        Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.   # noqa: E501

        :param delivery_rules: The delivery_rules of this ChangeOutletRequest.
        :type delivery_rules: List[OutletDeliveryRuleDTO]
        """

        self._delivery_rules = delivery_rules

    @property
    def storage_period(self) -> int:
        """Gets the storage_period of this ChangeOutletRequest.

        Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.  # noqa: E501

        :return: The storage_period of this ChangeOutletRequest.
        :rtype: int
        """
        return self._storage_period

    @storage_period.setter
    def storage_period(self, storage_period: int):
        """Sets the storage_period of this ChangeOutletRequest.

        Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.  # noqa: E501

        :param storage_period: The storage_period of this ChangeOutletRequest.
        :type storage_period: int
        """

        self._storage_period = storage_period
