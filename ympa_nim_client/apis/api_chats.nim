#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_create_chat_request
import ../models/model_create_chat_response
import ../models/model_empty_api_response
import ../models/model_get_chat_history_request
import ../models/model_get_chat_history_response
import ../models/model_get_chats_request
import ../models/model_get_chats_response
import ../models/model_send_message_to_chat_request

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc createChat*(httpClient: HttpClient, businessId: int64, createChatRequest: CreateChatRequest): (Option[CreateChatResponse], Response) =
  ## Создание нового чата с покупателем
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/chats/new", $(%createChatRequest))
  constructResult[CreateChatResponse](response)


proc getChatHistory*(httpClient: HttpClient, businessId: int64, chatId: int64, getChatHistoryRequest: GetChatHistoryRequest, pageToken: string, limit: int): (Option[GetChatHistoryResponse], Response) =
  ## Получение истории сообщений в чате
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("chatId", $chatId), # Идентификатор чата.
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
  ])

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/chats/history" & "?" & query_for_api_call, $(%getChatHistoryRequest))
  constructResult[GetChatHistoryResponse](response)


proc getChats*(httpClient: HttpClient, businessId: int64, getChatsRequest: GetChatsRequest, pageToken: string, limit: int): (Option[GetChatsResponse], Response) =
  ## Получение доступных чатов
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
  ])

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/chats" & "?" & query_for_api_call, $(%getChatsRequest))
  constructResult[GetChatsResponse](response)


proc sendFileToChat*(httpClient: HttpClient, businessId: int64, chatId: int64, file: string): (Option[EmptyApiResponse], Response) =
  ## Отправка файла в чат
  httpClient.headers["Content-Type"] = "multipart/form-data"
  let query_for_api_call = encodeQuery([
    ("chatId", $chatId), # Идентификатор чата.
  ])
  let query_for_api_call = newMultipartData({
    "file": $file, # Содержимое файла. Максимальный размер файла — 5 Мбайт.
  })

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/chats/file/send" & "?" & query_for_api_call, multipart=query_for_api_call)
  constructResult[EmptyApiResponse](response)


proc sendMessageToChat*(httpClient: HttpClient, businessId: int64, chatId: int64, sendMessageToChatRequest: SendMessageToChatRequest): (Option[EmptyApiResponse], Response) =
  ## Отправка сообщения в чат
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("chatId", $chatId), # Идентификатор чата.
  ])

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/chats/message" & "?" & query_for_api_call, $(%sendMessageToChatRequest))
  constructResult[EmptyApiResponse](response)

