#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_add_offers_to_archive_request
import ../models/model_add_offers_to_archive_response
import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_locked_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_delete_offers_from_archive_request
import ../models/model_delete_offers_from_archive_response
import ../models/model_delete_offers_request
import ../models/model_delete_offers_response
import ../models/model_get_offer_mappings_request
import ../models/model_get_offer_mappings_response
import ../models/model_get_suggested_offer_mappings_request
import ../models/model_get_suggested_offer_mappings_response
import ../models/model_update_offer_mappings_request
import ../models/model_update_offer_mappings_response

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc addOffersToArchive*(httpClient: HttpClient, businessId: int64, addOffersToArchiveRequest: AddOffersToArchiveRequest): (Option[AddOffersToArchiveResponse], Response) =
  ## Добавление товаров в архив
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/offer-mappings/archive", $(%addOffersToArchiveRequest))
  constructResult[AddOffersToArchiveResponse](response)


proc deleteOffers*(httpClient: HttpClient, businessId: int64, deleteOffersRequest: DeleteOffersRequest): (Option[DeleteOffersResponse], Response) =
  ## Удаление товаров из каталога
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/offer-mappings/delete", $(%deleteOffersRequest))
  constructResult[DeleteOffersResponse](response)


proc deleteOffersFromArchive*(httpClient: HttpClient, businessId: int64, deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest): (Option[DeleteOffersFromArchiveResponse], Response) =
  ## Удаление товаров из архива
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/offer-mappings/unarchive", $(%deleteOffersFromArchiveRequest))
  constructResult[DeleteOffersFromArchiveResponse](response)


proc getOfferMappings*(httpClient: HttpClient, businessId: int64, pageToken: string, limit: int, getOfferMappingsRequest: GetOfferMappingsRequest): (Option[GetOfferMappingsResponse], Response) =
  ## Информация о товарах в каталоге
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
  ])

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/offer-mappings" & "?" & query_for_api_call, $(%getOfferMappingsRequest))
  constructResult[GetOfferMappingsResponse](response)


proc getSuggestedOfferMappings*(httpClient: HttpClient, businessId: int64, getSuggestedOfferMappingsRequest: GetSuggestedOfferMappingsRequest): (Option[GetSuggestedOfferMappingsResponse], Response) =
  ## Просмотр карточек на Маркете, которые подходят вашим товарам
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/offer-mappings/suggestions", $(%getSuggestedOfferMappingsRequest))
  constructResult[GetSuggestedOfferMappingsResponse](response)


proc updateOfferMappings*(httpClient: HttpClient, businessId: int64, updateOfferMappingsRequest: UpdateOfferMappingsRequest): (Option[UpdateOfferMappingsResponse], Response) =
  ## Добавление товаров в каталог и изменение информации о них
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/offer-mappings/update", $(%updateOfferMappingsRequest))
  constructResult[UpdateOfferMappingsResponse](response)

