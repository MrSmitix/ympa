#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_confirm_shipment_request
import ../models/model_empty_api_response
import ../models/model_get_shipment_orders_info_response
import ../models/model_get_shipment_response
import ../models/model_search_shipments_request
import ../models/model_search_shipments_response
import ../models/model_set_shipment_pallets_count_request
import ../models/model_shipment_pallet_label_page_format_type
import ../models/model_transfer_orders_from_shipment_request

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc confirmShipment*(httpClient: HttpClient, campaignId: int64, shipmentId: int64, confirmShipmentRequest: ConfirmShipmentRequest): (Option[EmptyApiResponse], Response) =
  ## Подтверждение отгрузки
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm", $(%confirmShipmentRequest))
  constructResult[EmptyApiResponse](response)


proc downloadShipmentAct*(httpClient: HttpClient, campaignId: int64, shipmentId: int64): (Option[string], Response) =
  ## Получение акта приема-передачи

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act")
  constructResult[string](response)


proc downloadShipmentDiscrepancyAct*(httpClient: HttpClient, campaignId: int64, shipmentId: int64): (Option[string], Response) =
  ## Получение акта расхождений

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act")
  constructResult[string](response)


proc downloadShipmentInboundAct*(httpClient: HttpClient, campaignId: int64, shipmentId: int64): (Option[string], Response) =
  ## Получение фактического акта приема-передачи

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act")
  constructResult[string](response)


proc downloadShipmentPalletLabels*(httpClient: HttpClient, campaignId: int64, shipmentId: int64, format: ShipmentPalletLabelPageFormatType): (Option[string], Response) =
  ## Ярлыки для доверительной приемки (FBS)
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат страниц PDF-файла с ярлыками:  * `A4` — по 16 ярлыков на странице. * `A8` — по одному ярлыку на странице. 
  ])

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels" & "?" & query_for_api_call)
  constructResult[string](response)


proc downloadShipmentReceptionTransferAct*(httpClient: HttpClient, campaignId: int64, warehouseId: int): (Option[string], Response) =
  ## Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
  let query_for_api_call = encodeQuery([
    ("warehouse_id", $warehouseId), # Идентификатор склада.
  ])

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/shipments/reception-transfer-act" & "?" & query_for_api_call)
  constructResult[string](response)


proc downloadShipmentTransportationWaybill*(httpClient: HttpClient, campaignId: int64, shipmentId: int64): (Option[string], Response) =
  ## Получение транспортной накладной

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill")
  constructResult[string](response)


proc getShipment*(httpClient: HttpClient, campaignId: int64, shipmentId: int64, cancelledOrders: bool): (Option[GetShipmentResponse], Response) =
  ## Получение информации об одной отгрузке
  let query_for_api_call = encodeQuery([
    ("cancelledOrders", $cancelledOrders), # Возвращать ли отмененные заказы.  Значение по умолчанию — `true`. Если возвращать отмененные заказы не нужно, передайте значение `false`. 
  ])

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}" & "?" & query_for_api_call)
  constructResult[GetShipmentResponse](response)


proc getShipmentOrdersInfo*(httpClient: HttpClient, campaignId: int64, shipmentId: int64): (Option[GetShipmentOrdersInfoResponse], Response) =
  ## Получение информации о возможности печати ярлыков (FBS)

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info")
  constructResult[GetShipmentOrdersInfoResponse](response)


proc searchShipments*(httpClient: HttpClient, campaignId: int64, searchShipmentsRequest: SearchShipmentsRequest, pageToken: string, limit: int): (Option[SearchShipmentsResponse], Response) =
  ## Получение информации о нескольких отгрузках
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
  ])

  let response = httpClient.put(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments" & "?" & query_for_api_call, $(%searchShipmentsRequest))
  constructResult[SearchShipmentsResponse](response)


proc setShipmentPalletsCount*(httpClient: HttpClient, campaignId: int64, shipmentId: int64, setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest): (Option[EmptyApiResponse], Response) =
  ## Передача количества упаковок в отгрузке
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets", $(%setShipmentPalletsCountRequest))
  constructResult[EmptyApiResponse](response)


proc transferOrdersFromShipment*(httpClient: HttpClient, campaignId: int64, shipmentId: int64, transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest): (Option[EmptyApiResponse], Response) =
  ## Перенос заказов в следующую отгрузку
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer", $(%transferOrdersFromShipmentRequest))
  constructResult[EmptyApiResponse](response)

