#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_currency_type
import ../models/model_get_models_offers_response
import ../models/model_get_models_request
import ../models/model_get_models_response
import ../models/model_search_models_response
import ../models/model_sort_order_type

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getModel*(httpClient: HttpClient, modelId: int64, regionId: int64, currency: CurrencyType): (Option[GetModelsResponse], Response) =
  ## Информация об одной модели
  let query_for_api_call = encodeQuery([
    ("regionId", $regionId), # Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    ("currency", $currency), # Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
  ])

  let response = httpClient.get(basepath & fmt"/models/{modelId}" & "?" & query_for_api_call)
  constructResult[GetModelsResponse](response)


proc getModelOffers*(httpClient: HttpClient, modelId: int64, regionId: int64, currency: CurrencyType, orderByPrice: SortOrderType, count: int, page: int): (Option[GetModelsOffersResponse], Response) =
  ## Список предложений для одной модели
  let query_for_api_call = encodeQuery([
    ("regionId", $regionId), # Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    ("currency", $currency), # Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
    ("orderByPrice", $orderByPrice), # Направление сортировки по цене.  Возможные значения: * `ASC` — сортировка по возрастанию. * `DESC` — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. 
    ("count", $count), # Количество предложений на странице ответа.
    ("page", $page), # Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
  ])

  let response = httpClient.get(basepath & fmt"/models/{modelId}/offers" & "?" & query_for_api_call)
  constructResult[GetModelsOffersResponse](response)


proc getModels*(httpClient: HttpClient, regionId: int64, getModelsRequest: GetModelsRequest, currency: CurrencyType): (Option[GetModelsResponse], Response) =
  ## Информация о нескольких моделях
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("regionId", $regionId), # Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    ("currency", $currency), # Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
  ])

  let response = httpClient.post(basepath & "/models" & "?" & query_for_api_call, $(%getModelsRequest))
  constructResult[GetModelsResponse](response)


proc getModelsOffers*(httpClient: HttpClient, regionId: int64, getModelsRequest: GetModelsRequest, currency: CurrencyType, orderByPrice: SortOrderType): (Option[GetModelsOffersResponse], Response) =
  ## Список предложений для нескольких моделей
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("regionId", $regionId), # Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    ("currency", $currency), # Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
    ("orderByPrice", $orderByPrice), # Направление сортировки по цене.  Возможные значения: * `ASC` — сортировка по возрастанию. * `DESC` — сортировка по убыванию.  Значение по умолчанию: предложения выводятся в произвольном порядке. 
  ])

  let response = httpClient.post(basepath & "/models/offers" & "?" & query_for_api_call, $(%getModelsRequest))
  constructResult[GetModelsOffersResponse](response)


proc searchModels*(httpClient: HttpClient, query: string, regionId: int64, currency: CurrencyType, page: int, pageSize: int): (Option[SearchModelsResponse], Response) =
  ## Поиск модели товара
  let query_for_api_call = encodeQuery([
    ("query", $query), # Поисковый запрос по названию модели товара.
    ("regionId", $regionId), # Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    ("currency", $currency), # Валюта, в которой отображаются цены предложений на страницах с результатами поиска.  Возможные значения:  * `BYN` — белорусский рубль.  * `KZT` — казахстанский тенге.  * `RUR` — российский рубль.  * `UAH` — украинская гривна.  Значение по умолчанию: используется национальная валюта магазина (национальная валюта страны происхождения магазина). 
    ("page", $page), # Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром `page_size`.  `page_number` игнорируется, если задан `page_token`, `limit` или `offset`. 
    ("pageSize", $pageSize), # Размер страницы.  Используется вместе с параметром `page_number`.  `page_size` игнорируется, если задан `page_token`, `limit` или `offset`. 
  ])

  let response = httpClient.get(basepath & "/models" & "?" & query_for_api_call)
  constructResult[SearchModelsResponse](response)

