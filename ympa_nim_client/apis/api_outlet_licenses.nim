#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_empty_api_response
import ../models/model_get_outlet_licenses_response
import ../models/model_update_outlet_license_request
import ../models/model_set

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc deleteOutletLicenses*(httpClient: HttpClient, campaignId: int64, ids: seq[int64]): (Option[EmptyApiResponse], Response) =
  ## Удаление лицензий для точек продаж
  let query_for_api_call = encodeQuery([
    ("ids", $ids.join(",")), # Список идентификаторов лицензий.
  ])

  let response = httpClient.delete(basepath & fmt"/campaigns/{campaignId}/outlets/licenses" & "?" & query_for_api_call)
  constructResult[EmptyApiResponse](response)


proc getOutletLicenses*(httpClient: HttpClient, campaignId: int64, outletIds: seq[int64], ids: seq[int64]): (Option[GetOutletLicensesResponse], Response) =
  ## Информация о лицензиях для точек продаж
  let query_for_api_call = encodeQuery([
    ("outletIds", $outletIds.join(",")), # Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр `outletIds`, либо параметр `ids`. Запрос с обоими параметрами или без них приведет к ошибке. 
    ("ids", $ids.join(",")), # Список идентификаторов лицензий.
  ])

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/outlets/licenses" & "?" & query_for_api_call)
  constructResult[GetOutletLicensesResponse](response)


proc updateOutletLicenses*(httpClient: HttpClient, campaignId: int64, updateOutletLicenseRequest: UpdateOutletLicenseRequest): (Option[EmptyApiResponse], Response) =
  ## Создание и изменение лицензий для точек продаж
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/outlets/licenses", $(%updateOutletLicenseRequest))
  constructResult[EmptyApiResponse](response)

