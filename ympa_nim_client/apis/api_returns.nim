#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_empty_api_response
import ../models/model_get_return_response
import ../models/model_get_returns_response
import ../models/model_refund_status_type
import ../models/model_return_type
import ../models/model_set_return_decision_request

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getReturn*(httpClient: HttpClient, campaignId: int64, orderId: int64, returnId: int64): (Option[GetReturnResponse], Response) =
  ## Информация о невыкупе или возврате

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}")
  constructResult[GetReturnResponse](response)


proc getReturnApplication*(httpClient: HttpClient, campaignId: int64, orderId: int64, returnId: int64): (Option[string], Response) =
  ## Получение заявления на возврат

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application")
  constructResult[string](response)


proc getReturnPhoto*(httpClient: HttpClient, campaignId: int64, orderId: int64, returnId: int64, itemId: int64, imageHash: string): (Option[string], Response) =
  ## Получение фотографии возврата

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}")
  constructResult[string](response)


proc getReturns*(httpClient: HttpClient, campaignId: int64, pageToken: string, limit: int, orderIds: seq[int64], statuses: seq[RefundStatusType], `type`: ReturnType, fromDate: string, toDate: string, fromDate2: string, toDate2: string): (Option[GetReturnsResponse], Response) =
  ## Список невыкупов и возвратов
  let query_for_api_call = encodeQuery([
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
    ("orderIds", $orderIds.join(",")), # Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
    ("statuses", $statuses.join(",")), # Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
    ("type", $`type`), # Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
    ("fromDate", $fromDate), # Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
    ("toDate", $toDate), # Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
    ("from_date", $fromDate2), # {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
    ("to_date", $toDate2), # {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
  ])

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/returns" & "?" & query_for_api_call)
  constructResult[GetReturnsResponse](response)


proc setReturnDecision*(httpClient: HttpClient, campaignId: int64, orderId: int64, returnId: int64, setReturnDecisionRequest: SetReturnDecisionRequest): (Option[EmptyApiResponse], Response) =
  ## Принятие или изменение решения по возврату
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision", $(%setReturnDecisionRequest))
  constructResult[EmptyApiResponse](response)


proc submitReturnDecision*(httpClient: HttpClient, campaignId: int64, orderId: int64, returnId: int64): (Option[EmptyApiResponse], Response) =
  ## Подтверждение решения по возврату

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit")
  constructResult[EmptyApiResponse](response)

