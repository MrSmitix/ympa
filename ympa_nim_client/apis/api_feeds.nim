#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_locked_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_empty_api_response
import ../models/model_feed_index_logs_status_type
import ../models/model_get_feed_index_logs_response
import ../models/model_get_feed_response
import ../models/model_get_feeds_response
import ../models/model_set_feed_params_request

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getFeed*(httpClient: HttpClient, campaignId: int64, feedId: int64): (Option[GetFeedResponse], Response) {.deprecated.} =
  ## Информация о прайс-листе

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/feeds/{feedId}")
  constructResult[GetFeedResponse](response)


proc getFeedIndexLogs*(httpClient: HttpClient, campaignId: int64, feedId: int64, limit: int, publishedTimeFrom: string, publishedTimeTo: string, status: FeedIndexLogsStatusType): (Option[GetFeedIndexLogsResponse], Response) {.deprecated.} =
  ## Отчет по индексации прайс-листа
  let query_for_api_call = encodeQuery([
    ("limit", $limit), # Количество значений на одной странице. 
    ("published_time_from", $publishedTimeFrom), # Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
    ("published_time_to", $publishedTimeTo), # Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-31T00:42:42+03:00`.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра `published_time_to`. Значение параметра не должно быть датой из будущего.  {% endnote %} 
    ("status", $status), # Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
  ])

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/feeds/{feedId}/index-logs" & "?" & query_for_api_call)
  constructResult[GetFeedIndexLogsResponse](response)


proc getFeeds*(httpClient: HttpClient, campaignId: int64): (Option[GetFeedsResponse], Response) {.deprecated.} =
  ## Список прайс-листов магазина

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/feeds")
  constructResult[GetFeedsResponse](response)


proc refreshFeed*(httpClient: HttpClient, campaignId: int64, feedId: int64): (Option[EmptyApiResponse], Response) {.deprecated.} =
  ## Сообщить, что прайс-лист обновился

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/feeds/{feedId}/refresh")
  constructResult[EmptyApiResponse](response)


proc setFeedParams*(httpClient: HttpClient, campaignId: int64, feedId: int64, setFeedParamsRequest: SetFeedParamsRequest): (Option[EmptyApiResponse], Response) {.deprecated.} =
  ## Изменение параметров прайс-листа
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/feeds/{feedId}/params", $(%setFeedParamsRequest))
  constructResult[EmptyApiResponse](response)

