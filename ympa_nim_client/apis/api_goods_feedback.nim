#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_delete_goods_feedback_comment_request
import ../models/model_empty_api_response
import ../models/model_get_goods_feedback_comments_request
import ../models/model_get_goods_feedback_comments_response
import ../models/model_get_goods_feedback_request
import ../models/model_get_goods_feedback_response
import ../models/model_skip_goods_feedback_reaction_request
import ../models/model_update_goods_feedback_comment_request
import ../models/model_update_goods_feedback_comment_response

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc deleteGoodsFeedbackComment*(httpClient: HttpClient, businessId: int64, deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest): (Option[EmptyApiResponse], Response) =
  ## Удаление комментария к отзыву
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/goods-feedback/comments/delete", $(%deleteGoodsFeedbackCommentRequest))
  constructResult[EmptyApiResponse](response)


proc getGoodsFeedbackComments*(httpClient: HttpClient, businessId: int64, getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest, pageToken: string, limit: int): (Option[GetGoodsFeedbackCommentsResponse], Response) =
  ## Получение комментариев к отзыву
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
  ])

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/goods-feedback/comments" & "?" & query_for_api_call, $(%getGoodsFeedbackCommentsRequest))
  constructResult[GetGoodsFeedbackCommentsResponse](response)


proc getGoodsFeedbacks*(httpClient: HttpClient, businessId: int64, pageToken: string, limit: int, getGoodsFeedbackRequest: GetGoodsFeedbackRequest): (Option[GetGoodsFeedbackResponse], Response) =
  ## Получение отзывов о товарах продавца
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("page_token", $pageToken), # Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
    ("limit", $limit), # Количество значений на одной странице. 
  ])

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/goods-feedback" & "?" & query_for_api_call, $(%getGoodsFeedbackRequest))
  constructResult[GetGoodsFeedbackResponse](response)


proc skipGoodsFeedbacksReaction*(httpClient: HttpClient, businessId: int64, skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest): (Option[EmptyApiResponse], Response) =
  ## Отказ от ответа на отзывы
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/goods-feedback/skip-reaction", $(%skipGoodsFeedbackReactionRequest))
  constructResult[EmptyApiResponse](response)


proc updateGoodsFeedbackComment*(httpClient: HttpClient, businessId: int64, updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest): (Option[UpdateGoodsFeedbackCommentResponse], Response) =
  ## Добавление нового или изменение созданного комментария
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/businesses/{businessId}/goods-feedback/comments/update", $(%updateGoodsFeedbackCommentRequest))
  constructResult[UpdateGoodsFeedbackCommentResponse](response)

