#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_empty_api_response
import ../models/model_get_order_buyer_info_response
import ../models/model_set_order_delivery_date_request
import ../models/model_set_order_delivery_track_code_request
import ../models/model_update_order_storage_limit_request
import ../models/model_verify_order_eac_request
import ../models/model_verify_order_eac_response

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc getOrderBuyerInfo*(httpClient: HttpClient, campaignId: int64, orderId: int64): (Option[GetOrderBuyerInfoResponse], Response) =
  ## Информация о покупателе — физическом лице

  let response = httpClient.get(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/buyer")
  constructResult[GetOrderBuyerInfoResponse](response)


proc setOrderDeliveryDate*(httpClient: HttpClient, campaignId: int64, orderId: int64, setOrderDeliveryDateRequest: SetOrderDeliveryDateRequest): (Option[EmptyApiResponse], Response) =
  ## Изменение даты доставки заказа
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/delivery/date", $(%setOrderDeliveryDateRequest))
  constructResult[EmptyApiResponse](response)


proc setOrderDeliveryTrackCode*(httpClient: HttpClient, campaignId: int64, orderId: int64, setOrderDeliveryTrackCodeRequest: SetOrderDeliveryTrackCodeRequest): (Option[EmptyApiResponse], Response) =
  ## Передача трек‑номера посылки
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/delivery/track", $(%setOrderDeliveryTrackCodeRequest))
  constructResult[EmptyApiResponse](response)


proc updateOrderStorageLimit*(httpClient: HttpClient, campaignId: int64, orderId: int64, updateOrderStorageLimitRequest: UpdateOrderStorageLimitRequest): (Option[EmptyApiResponse], Response) =
  ## Продление срока хранения заказа
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit", $(%updateOrderStorageLimitRequest))
  constructResult[EmptyApiResponse](response)


proc verifyOrderEac*(httpClient: HttpClient, campaignId: int64, orderId: int64, verifyOrderEacRequest: VerifyOrderEacRequest): (Option[VerifyOrderEacResponse], Response) =
  ## Передача кода подтверждения
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.put(basepath & fmt"/campaigns/{campaignId}/orders/{orderId}/verifyEac", $(%verifyOrderEacRequest))
  constructResult[VerifyOrderEacResponse](response)

