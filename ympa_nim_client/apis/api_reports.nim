#
# Партнерский API Маркета
# 
# API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
# The version of the OpenAPI document: LATEST
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_api_client_data_error_response
import ../models/model_api_forbidden_error_response
import ../models/model_api_limit_error_response
import ../models/model_api_not_found_error_response
import ../models/model_api_server_error_response
import ../models/model_api_unauthorized_error_response
import ../models/model_generate_boost_consolidated_request
import ../models/model_generate_competitors_position_report_request
import ../models/model_generate_goods_feedback_request
import ../models/model_generate_goods_movement_report_request
import ../models/model_generate_goods_realization_report_request
import ../models/model_generate_goods_turnover_request
import ../models/model_generate_mass_order_labels_request
import ../models/model_generate_prices_report_request
import ../models/model_generate_report_response
import ../models/model_generate_shelfs_statistics_request
import ../models/model_generate_shipment_list_document_report_request
import ../models/model_generate_shows_sales_report_request
import ../models/model_generate_stocks_on_warehouses_report_request
import ../models/model_generate_united_marketplace_services_report_request
import ../models/model_generate_united_netting_report_request
import ../models/model_generate_united_orders_request
import ../models/model_get_report_info_response
import ../models/model_page_format_type
import ../models/model_report_format_type

const basepath = "https://api.partner.market.yandex.ru"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc generateBoostConsolidatedReport*(httpClient: HttpClient, generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по бусту продаж
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/boost-consolidated/generate" & "?" & query_for_api_call, $(%generateBoostConsolidatedRequest))
  constructResult[GenerateReportResponse](response)


proc generateCompetitorsPositionReport*(httpClient: HttpClient, generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет «Конкурентная позиция»
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/competitors-position/generate" & "?" & query_for_api_call, $(%generateCompetitorsPositionReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateGoodsFeedbackReport*(httpClient: HttpClient, generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по отзывам о товарах
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/goods-feedback/generate" & "?" & query_for_api_call, $(%generateGoodsFeedbackRequest))
  constructResult[GenerateReportResponse](response)


proc generateGoodsMovementReport*(httpClient: HttpClient, generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по движению товаров
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/goods-movement/generate" & "?" & query_for_api_call, $(%generateGoodsMovementReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateGoodsRealizationReport*(httpClient: HttpClient, generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по реализации
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/goods-realization/generate" & "?" & query_for_api_call, $(%generateGoodsRealizationReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateGoodsTurnoverReport*(httpClient: HttpClient, generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по оборачиваемости
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/goods-turnover/generate" & "?" & query_for_api_call, $(%generateGoodsTurnoverRequest))
  constructResult[GenerateReportResponse](response)


proc generateMassOrderLabelsReport*(httpClient: HttpClient, generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest, format: PageFormatType): (Option[GenerateReportResponse], Response) =
  ## Готовые ярлыки‑наклейки на все коробки в нескольких заказах
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
  ])

  let response = httpClient.post(basepath & "/reports/documents/labels/generate" & "?" & query_for_api_call, $(%generateMassOrderLabelsRequest))
  constructResult[GenerateReportResponse](response)


proc generatePricesReport*(httpClient: HttpClient, generatePricesReportRequest: GeneratePricesReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет «Цены на рынке»
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/prices/generate" & "?" & query_for_api_call, $(%generatePricesReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateShelfsStatisticsReport*(httpClient: HttpClient, generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по полкам
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/shelf-statistics/generate" & "?" & query_for_api_call, $(%generateShelfsStatisticsRequest))
  constructResult[GenerateReportResponse](response)


proc generateShipmentListDocumentReport*(httpClient: HttpClient, generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest): (Option[GenerateReportResponse], Response) =
  ## Получение листа сборки
  httpClient.headers["Content-Type"] = "application/json"

  let response = httpClient.post(basepath & "/reports/documents/shipment-list/generate", $(%generateShipmentListDocumentReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateShowsSalesReport*(httpClient: HttpClient, generateShowsSalesReportRequest: GenerateShowsSalesReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет «Аналитика продаж»
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/shows-sales/generate" & "?" & query_for_api_call, $(%generateShowsSalesReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateStocksOnWarehousesReport*(httpClient: HttpClient, generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по остаткам на складах
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/stocks-on-warehouses/generate" & "?" & query_for_api_call, $(%generateStocksOnWarehousesReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateUnitedMarketplaceServicesReport*(httpClient: HttpClient, generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по стоимости услуг
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/united-marketplace-services/generate" & "?" & query_for_api_call, $(%generateUnitedMarketplaceServicesReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateUnitedNettingReport*(httpClient: HttpClient, generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по платежам
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/united-netting/generate" & "?" & query_for_api_call, $(%generateUnitedNettingReportRequest))
  constructResult[GenerateReportResponse](response)


proc generateUnitedOrdersReport*(httpClient: HttpClient, generateUnitedOrdersRequest: GenerateUnitedOrdersRequest, format: ReportFormatType): (Option[GenerateReportResponse], Response) =
  ## Отчет по заказам
  httpClient.headers["Content-Type"] = "application/json"
  let query_for_api_call = encodeQuery([
    ("format", $format), # Формат отчета.
  ])

  let response = httpClient.post(basepath & "/reports/united-orders/generate" & "?" & query_for_api_call, $(%generateUnitedOrdersRequest))
  constructResult[GenerateReportResponse](response)


proc getReportInfo*(httpClient: HttpClient, reportId: string): (Option[GetReportInfoResponse], Response) =
  ## Получение заданного отчета

  let response = httpClient.get(basepath & fmt"/reports/info/{reportId}")
  constructResult[GetReportInfoResponse](response)

