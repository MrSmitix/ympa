/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASReturnsApi {
    OASClient client;

    public OASReturnsApi(OASClient client) {
        this.client = client;
    }

    public OASReturnsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Информация о невыкупе или возврате
     * Получает информацию по одному невыкупу или возврату.\n\n|**⚙️ Лимит:** 10 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param returnId Идентификатор возврата. (required)
     * @return OASGetReturnResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetReturnResponse getReturn(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('returnId'), 'returnId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetReturnResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId'),
                'returnId' => (Long) params.get('returnId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetReturnResponse.class
        );
    }
    /**
     * Получение заявления на возврат
     * Загружает заявление покупателя на возврат товара.\n\n|**⚙️ Лимит:** 10 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param returnId Идентификатор возврата. (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob getReturnApplication(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('returnId'), 'returnId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId'),
                'returnId' => (Long) params.get('returnId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/octet-stream', 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            Blob.class
        );
    }
    /**
     * Получение фотографии возврата
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.\n\n|**⚙️ Лимит:** 10 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param returnId Идентификатор возврата. (required)
     * @param itemId Идентификатор товара в возврате. (required)
     * @param imageHash Хеш ссылки изображения для загрузки. (required)
     * @return Blob
     * @throws OAS.ApiException if fails to make API call
     */
    public Blob getReturnPhoto(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('returnId'), 'returnId');
        client.assertNotNull(params.get('itemId'), 'itemId');
        client.assertNotNull(params.get('imageHash'), 'imageHash');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (Blob) client.invoke(
            'GET', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId'),
                'returnId' => (Long) params.get('returnId'),
                'itemId' => (Long) params.get('itemId'),
                'imageHash' => (String) params.get('imageHash')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/octet-stream', 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            Blob.class
        );
    }
    /**
     * Список невыкупов и возвратов
     * Получает список невыкупов и возвратов.\n\nЧтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).\n\n|**⚙️ Лимит:** 10 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param pageToken Идентификатор страницы c результатами.\n\nЕсли параметр не указан, возвращается первая страница.\n\nРекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.\n\nЕсли задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.\n (optional)
     * @param r_limit Количество значений на одной странице.\n (optional)
     * @param orderIds Идентификаторы заказов — для фильтрации результатов.\n\nНесколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.\n (optional, default to new List<Long>())
     * @param statuses Статусы возвратов или невыкупов — для фильтрации результатов.\n\nНесколько статусов перечисляются через запятую.\n (optional, default to new List<OASRefundStatusType>())
     * @param type Тип заказа для фильтрации:\n\n* &#x60;RETURN&#x60; — возврат.\n\n* &#x60;UNREDEEMED&#x60; — невыкуп.\n\nЕсли не указывать, в ответе будут и возвраты, и невыкупы.\n (optional)
     * @param fromDate Начальная дата для фильтрации возвратов или невыкупов по дате обновления.\n\nФормат: &#x60;ГГГГ-ММ-ДД&#x60;.\n (optional)
     * @param toDate Конечная дата для фильтрации возвратов или невыкупов по дате обновления.\n\nФормат: &#x60;ГГГГ-ММ-ДД&#x60;.\n (optional)
     * @param fromDate2 {% note warning &quot;&quot; %}\n\nЭтот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.\n\n{% endnote %}\n\nНачальная дата для фильтрации возвратов или невыкупов по дате обновления.\n (optional)
     * @param toDate2 {% note warning &quot;&quot; %}\n\nЭтот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.\n\n{% endnote %}\n\nКонечная дата для фильтрации возвратов или невыкупов по дате обновления.\n (optional)
     * @return OASGetReturnsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetReturnsResponse getReturns(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('page_token', (String) params.get('pageToken')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('orderIds', (List<Long>) params.get('orderIds'), 'csv'));
        query.addAll(client.makeParam('statuses', (List<OASRefundStatusType>) params.get('statuses'), 'csv'));
        query.addAll(client.makeParam('type', (OASReturnType) params.get('type')));
        query.addAll(client.makeParam('fromDate', (Date) params.get('fromDate')));
        query.addAll(client.makeParam('toDate', (Date) params.get('toDate')));
        query.addAll(client.makeParam('from_date', (Date) params.get('fromDate2')));
        query.addAll(client.makeParam('to_date', (Date) params.get('toDate2')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetReturnsResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/returns', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetReturnsResponse.class
        );
    }
    /**
     * Принятие или изменение решения по возврату
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).\n\n|**⚙️ Лимит:** 10 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param returnId Идентификатор возврата. (required)
     * @param oaSSetReturnDecisionRequest  (required)
     * @return OASEmptyApiResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmptyApiResponse setReturnDecision(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('returnId'), 'returnId');
        client.assertNotNull(params.get('oaSSetReturnDecisionRequest'), 'oaSSetReturnDecisionRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmptyApiResponse) client.invoke(
            'POST', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision',
            (OASSetReturnDecisionRequest) params.get('oaSSetReturnDecisionRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId'),
                'returnId' => (Long) params.get('returnId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASEmptyApiResponse.class
        );
    }
    /**
     * Подтверждение решения по возврату
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).\n\n|**⚙️ Лимит:** 10 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param returnId Идентификатор возврата. (required)
     * @return OASEmptyApiResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmptyApiResponse submitReturnDecision(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('returnId'), 'returnId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmptyApiResponse) client.invoke(
            'POST', '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId'),
                'returnId' => (Long) params.get('returnId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASEmptyApiResponse.class
        );
    }
}
