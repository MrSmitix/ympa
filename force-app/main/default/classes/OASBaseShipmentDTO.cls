/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Информация об отгрузке.
 */
public class OASBaseShipmentDTO {
    /**
     * Идентификатор отгрузки.
     * @return id
     */
    public Long id { get; set; }

    /**
     * Начало планового интервала отгрузки.
     * @return planIntervalFrom
     */
    public Datetime planIntervalFrom { get; set; }

    /**
     * Конец планового интервала отгрузки.
     * @return planIntervalTo
     */
    public Datetime planIntervalTo { get; set; }

    /**
     * Get shipmentType
     * @return shipmentType
     */
    public OASShipmentType shipmentType { get; set; }

    /**
     * Get warehouse
     * @return warehouse
     */
    public OASPartnerShipmentWarehouseDTO warehouse { get; set; }

    /**
     * Get warehouseTo
     * @return warehouseTo
     */
    public OASPartnerShipmentWarehouseDTO warehouseTo { get; set; }

    /**
     * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
     * @return externalId
     */
    public String externalId { get; set; }

    /**
     * Get deliveryService
     * @return deliveryService
     */
    public OASDeliveryServiceDTO deliveryService { get; set; }

    /**
     * Get palletsCount
     * @return palletsCount
     */
    public OASPalletsCountDTO palletsCount { get; set; }

    /**
     * Идентификаторы заказов в отгрузке.
     * @return orderIds
     */
    public Set<Long> orderIds { get; set; }

    /**
     * Количество заказов, которое Маркет запланировал к отгрузке.
     * @return draftCount
     */
    public Integer draftCount { get; set; }

    /**
     * Количество заказов, которое Маркет подтвердил к отгрузке.
     * @return plannedCount
     */
    public Integer plannedCount { get; set; }

    /**
     * Количество заказов, принятых в сортировочном центре или пункте приема.
     * @return factCount
     */
    public Integer factCount { get; set; }

    public OASBaseShipmentDTO() {
        orderIds = new List<Long>();
    }

    public static OASBaseShipmentDTO getExample() {
        OASBaseShipmentDTO baseShipmentDTO = new OASBaseShipmentDTO();
          baseShipmentDTO.id = 123456789L;
          baseShipmentDTO.planIntervalFrom = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          baseShipmentDTO.planIntervalTo = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          baseShipmentDTO.shipmentType = OASShipmentType.getExample();
          baseShipmentDTO.warehouse = OASPartnerShipmentWarehouseDTO.getExample();
          baseShipmentDTO.warehouseTo = OASPartnerShipmentWarehouseDTO.getExample();
          baseShipmentDTO.externalId = '';
          baseShipmentDTO.deliveryService = OASDeliveryServiceDTO.getExample();
          baseShipmentDTO.palletsCount = OASPalletsCountDTO.getExample();
          baseShipmentDTO.orderIds = new Set<Long>{123456789L};
          baseShipmentDTO.draftCount = 0;
          baseShipmentDTO.plannedCount = 0;
          baseShipmentDTO.factCount = 0;
        return baseShipmentDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASBaseShipmentDTO) {           
            OASBaseShipmentDTO baseShipmentDTO = (OASBaseShipmentDTO) obj;
            return this.id == baseShipmentDTO.id
                && this.planIntervalFrom == baseShipmentDTO.planIntervalFrom
                && this.planIntervalTo == baseShipmentDTO.planIntervalTo
                && this.shipmentType == baseShipmentDTO.shipmentType
                && this.warehouse == baseShipmentDTO.warehouse
                && this.warehouseTo == baseShipmentDTO.warehouseTo
                && this.externalId == baseShipmentDTO.externalId
                && this.deliveryService == baseShipmentDTO.deliveryService
                && this.palletsCount == baseShipmentDTO.palletsCount
                && this.orderIds == baseShipmentDTO.orderIds
                && this.draftCount == baseShipmentDTO.draftCount
                && this.plannedCount == baseShipmentDTO.plannedCount
                && this.factCount == baseShipmentDTO.factCount;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (planIntervalFrom == null ? 0 : System.hashCode(planIntervalFrom));
        hashCode = (17 * hashCode) + (planIntervalTo == null ? 0 : System.hashCode(planIntervalTo));
        hashCode = (17 * hashCode) + (shipmentType == null ? 0 : System.hashCode(shipmentType));
        hashCode = (17 * hashCode) + (warehouse == null ? 0 : System.hashCode(warehouse));
        hashCode = (17 * hashCode) + (warehouseTo == null ? 0 : System.hashCode(warehouseTo));
        hashCode = (17 * hashCode) + (externalId == null ? 0 : System.hashCode(externalId));
        hashCode = (17 * hashCode) + (deliveryService == null ? 0 : System.hashCode(deliveryService));
        hashCode = (17 * hashCode) + (palletsCount == null ? 0 : System.hashCode(palletsCount));
        hashCode = (17 * hashCode) + (orderIds == null ? 0 : System.hashCode(orderIds));
        hashCode = (17 * hashCode) + (draftCount == null ? 0 : System.hashCode(draftCount));
        hashCode = (17 * hashCode) + (plannedCount == null ? 0 : System.hashCode(plannedCount));
        hashCode = (17 * hashCode) + (factCount == null ? 0 : System.hashCode(factCount));
        return hashCode;
    }
}

