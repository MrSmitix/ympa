/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASOrdersApi {
    OASClient client;

    public OASOrdersApi(OASClient client) {
        this.client = client;
    }

    public OASOrdersApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Отмена заказа покупателем
     * Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.\n\nПокупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.\n\nЕсли заказ уже передан службе доставки (принимает статус &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.\n\nЧтобы узнать, какие заказы были отменены в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр &#x60;onlyWaitingForCancellationApprove&#x3D;true&#x60;. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.\n\nЕсли в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.\n\n|**⚙️ Лимит:** 500 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param oaSAcceptOrderCancellationRequest  (required)
     * @return OASEmptyApiResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmptyApiResponse acceptOrderCancellation(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('oaSAcceptOrderCancellationRequest'), 'oaSAcceptOrderCancellationRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmptyApiResponse) client.invoke(
            'PUT', '/campaigns/{campaignId}/orders/{orderId}/cancellation/accept',
            (OASAcceptOrderCancellationRequest) params.get('oaSAcceptOrderCancellationRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASEmptyApiResponse.class
        );
    }
    /**
     * Информация об одном заказе
     * Возвращает информацию о заказе.\n\nПолучить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @return OASGetOrderResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetOrderResponse getOrder(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetOrderResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/orders/{orderId}', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetOrderResponse.class
        );
    }
    /**
     * Информация о нескольких заказах
     * Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.\n\nДоступна фильтрация по нескольким характеристикам заказов:\n\n* дате оформления;\n\n* статусу;\n\n* идентификаторам заказов;\n\n* этапу обработки или причине отмены;\n\n* типу (настоящий или тестовый);\n\n* дате отгрузки в службу доставки;\n\n* дате и времени обновления заказа.\n\nИнформация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).\n\nМаксимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.\n\nРезультаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.\n\nПолучить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderIds Фильтрация заказов по идентификаторам.\n&lt;br&gt;&lt;br&gt;\n⚠️ Не используйте это поле одновременно с другими фильтрами. Если вы хотите воспользоваться ими, оставьте поле пустым.\n (optional, default to new List<Long>())
     * @param status Статус заказа:\n\n* &#x60;CANCELLED&#x60; — заказ отменен.\n\n* &#x60;DELIVERED&#x60; — заказ получен покупателем.\n\n* &#x60;DELIVERY&#x60; — заказ передан в службу доставки.\n\n* &#x60;PICKUP&#x60; — заказ доставлен в пункт самовывоза.\n\n* &#x60;PROCESSING&#x60; — заказ находится в обработке.\n\n* &#x60;UNPAID&#x60; — заказ оформлен, но еще не оплачен (если выбрана оплата при оформлении).\n\nТакже могут возвращаться другие значения. Обрабатывать их не требуется.\n (optional, default to new List<OASOrderStatusType>())
     * @param substatus Этап обработки заказа (если он имеет статус &#x60;PROCESSING&#x60;) или причина отмены заказа (если он имеет статус &#x60;CANCELLED&#x60;).\n\nВозможные значения для заказа в статусе &#x60;PROCESSING&#x60;:\n\n* &#x60;STARTED&#x60; — заказ подтвержден, его можно начать обрабатывать.\n* &#x60;READY_TO_SHIP&#x60; — заказ собран и готов к отправке.\n* &#x60;SHIPPED&#x60; — заказ передан службе доставки.\n\nВозможные значения для заказа в статусе &#x60;CANCELLED&#x60;:\n\n* &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60; — служба доставки не смогла доставить заказ.\n\n* &#x60;PROCESSING_EXPIRED&#x60; — значение более не используется.\n\n* &#x60;REPLACING_ORDER&#x60; — покупатель решил заменить товар другим по собственной инициативе.\n\n* &#x60;RESERVATION_EXPIRED&#x60; — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.\n\n* &#x60;RESERVATION_FAILED&#x60; — Маркет не может продолжить дальнейшую обработку заказа.\n\n* &#x60;SHOP_FAILED&#x60; — магазин не может выполнить заказ.\n\n* &#x60;USER_CHANGED_MIND&#x60; — покупатель отменил заказ по личным причинам.\n\n* &#x60;USER_NOT_PAID&#x60; — покупатель не оплатил заказ (для типа оплаты &#x60;PREPAID&#x60;) в течение 30 минут.\n\n* &#x60;USER_REFUSED_DELIVERY&#x60; — покупателя не устроили условия доставки.\n\n* &#x60;USER_REFUSED_PRODUCT&#x60; — покупателю не подошел товар.\n\n* &#x60;USER_REFUSED_QUALITY&#x60; — покупателя не устроило качество товара.\n\n* &#x60;USER_UNREACHABLE&#x60; — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:\n\n  * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;\n  * перерыв между первым и третьим звонком не менее 90 минут;\n  * соединение не короче 5 секунд.\n\n  Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.\n* &#x60;USER_WANTS_TO_CHANGE_DELIVERY_DATE&#x60; — покупатель хочет получить заказ в другой день.\n* &#x60;CANCELLED_COURIER_NOT_FOUND&#x60; — не удалось найти курьера.\n\nТакже могут возвращаться другие значения. Обрабатывать их не требуется.\n (optional, default to new List<OASOrderSubstatusType>())
     * @param fromDate Начальная дата для фильтрации заказов по дате оформления.\n\nФормат даты: &#x60;ДД-ММ-ГГГГ&#x60;.\n\nМежду начальной и конечной датой (параметр &#x60;toDate&#x60;) должно быть не больше 30 дней.\n\nЗначение по умолчанию: 30 дней назад от текущей даты.\n (optional)
     * @param toDate Конечная дата для фильтрации заказов по дате оформления.\n\nПоказываются заказы, созданные до 00:00 указанного дня.\n\nФормат даты: &#x60;ДД-ММ-ГГГГ&#x60;.\n\nМежду начальной (параметр &#x60;fromDate&#x60;) и конечной датой должно быть не больше 30 дней.\n\nЗначение по умолчанию: текущая дата.\n (optional)
     * @param supplierShipmentDateFrom Начальная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).\n\nФормат даты: &#x60;ДД-ММ-ГГГГ&#x60;.\n\nМежду начальной и конечной датой (параметр &#x60;supplierShipmentDateTo&#x60;) должно быть не больше 30 дней.\n\nНачальная дата включается в интервал для фильтрации.\n (optional)
     * @param supplierShipmentDateTo Конечная дата для фильтрации заказов по дате отгрузки в службу доставки (параметр &#x60;shipmentDate&#x60;).\n\nФормат даты: &#x60;ДД-ММ-ГГГГ&#x60;.\n\nМежду начальной (параметр &#x60;supplierShipmentDateFrom&#x60;) и конечной датой должно быть не больше 30 дней.\n\nКонечная дата не включается в интервал для фильтрации.\n (optional)
     * @param updatedAtFrom Начальная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).\n\nФормат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.\n\nМежду начальной и конечной датой (параметр &#x60;updatedAtTo&#x60;) должно быть не больше 30 дней.\n\nНачальная дата включается в интервал для фильтрации.\n (optional)
     * @param updatedAtTo Конечная дата для фильтрации заказов по дате и времени обновления (параметр &#x60;updatedAt&#x60;).\n\nФормат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.\n\nМежду начальной (параметр &#x60;updatedAtFrom&#x60;) и конечной датой должно быть не больше 30 дней.\n\nКонечная дата не включается в интервал для фильтрации.\n (optional)
     * @param dispatchType Способ отгрузки (optional)
     * @param fake Фильтрация заказов по типам:\n\n* &#x60;false&#x60; — настоящий заказ покупателя.\n\n* &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.\n (optional, default to false)
     * @param hasCis Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):\n\n* &#x60;true&#x60; — да.\n\n* &#x60;false&#x60; — нет.\n\nТакие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.\n (optional, default to false)
     * @param onlyWaitingForCancellationApprove **Только для модели DBS**\n\nФильтрация заказов по наличию запросов покупателей на отмену.\n\nПри значение &#x60;true&#x60; возвращаются только заказы, которые находятся в статусе &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60; и которые пользователи решили отменить.\n\nЧтобы подтвердить или отклонить отмену, отправьте запрос [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation).\n (optional, default to false)
     * @param onlyEstimatedDelivery Фильтрация заказов с долгой доставкой (31-60 дней) по подтвержденной дате доставки:\n\n* &#x60;true&#x60; — возвращаются только заказы с неподтвержденной датой доставки.\n* &#x60;false&#x60; — фильтрация не применяется.\n (optional, default to false)
     * @param buyerType Фильтрация заказов по типу покупателя.\n (optional)
     * @param page Номер страницы результатов.\n\nЗначение по умолчанию: 1.\n\nИспользуется вместе с параметром &#x60;page_size&#x60;.\n\n&#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.\n (optional, default to 1)
     * @param pageSize Размер страницы.\n\nИспользуется вместе с параметром &#x60;page_number&#x60;.\n\n&#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.\n (optional)
     * @param pageToken Идентификатор страницы c результатами.\n\nЕсли параметр не указан, возвращается первая страница.\n\nРекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.\n\nЕсли задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.\n (optional)
     * @param r_limit Количество значений на одной странице.\n (optional)
     * @return OASGetOrdersResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetOrdersResponse getOrders(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('orderIds', (List<Long>) params.get('orderIds'), 'csv'));
        query.addAll(client.makeParam('status', (Set<OASOrderStatusType>) params.get('status'), 'csv'));
        query.addAll(client.makeParam('substatus', (Set<OASOrderSubstatusType>) params.get('substatus'), 'csv'));
        query.addAll(client.makeParam('fromDate', (Date) params.get('fromDate')));
        query.addAll(client.makeParam('toDate', (Date) params.get('toDate')));
        query.addAll(client.makeParam('supplierShipmentDateFrom', (Date) params.get('supplierShipmentDateFrom')));
        query.addAll(client.makeParam('supplierShipmentDateTo', (Date) params.get('supplierShipmentDateTo')));
        query.addAll(client.makeParam('updatedAtFrom', (Datetime) params.get('updatedAtFrom')));
        query.addAll(client.makeParam('updatedAtTo', (Datetime) params.get('updatedAtTo')));
        query.addAll(client.makeParam('dispatchType', (OASOrderDeliveryDispatchType) params.get('dispatchType')));
        query.addAll(client.makeParam('fake', (Boolean) params.get('fake')));
        query.addAll(client.makeParam('hasCis', (Boolean) params.get('hasCis')));
        query.addAll(client.makeParam('onlyWaitingForCancellationApprove', (Boolean) params.get('onlyWaitingForCancellationApprove')));
        query.addAll(client.makeParam('onlyEstimatedDelivery', (Boolean) params.get('onlyEstimatedDelivery')));
        query.addAll(client.makeParam('buyerType', (OASOrderBuyerType) params.get('buyerType')));
        query.addAll(client.makeParam('page', (Integer) params.get('page')));
        query.addAll(client.makeParam('pageSize', (Integer) params.get('pageSize')));
        query.addAll(client.makeParam('page_token', (String) params.get('pageToken')));
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetOrdersResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/orders', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetOrdersResponse.class
        );
    }
    /**
     * Передача ключей цифровых товаров
     * Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус &#x60;DELIVERED&#x60;.\n\nКлюч нужно передать в течение 30 минут после перехода заказа в статус &#x60;PROCESSING&#x60;.\n\nЕсли в один заказ входят несколько ключей, передавайте их все в одном запросе.\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param oaSProvideOrderDigitalCodesRequest  (required)
     * @return OASEmptyApiResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmptyApiResponse provideOrderDigitalCodes(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('oaSProvideOrderDigitalCodesRequest'), 'oaSProvideOrderDigitalCodesRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmptyApiResponse) client.invoke(
            'POST', '/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods',
            (OASProvideOrderDigitalCodesRequest) params.get('oaSProvideOrderDigitalCodesRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASEmptyApiResponse.class
        );
    }
    /**
     * Передача кодов маркировки единиц товара
     * {% note warning &quot;Этот запрос только для DBS&quot; %}\n\nЕсли вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).\n\n{% endnote %}\n\nПередает Маркету коды маркировки для единиц товара в указанном заказе.\n\nПринимаются коды следующих типов:\n\n* Коды «Честного знака».\n* УИН для ювелирных изделий.\n* РНПТ и ГТД для импортных прослеживаемых товаров.\n\n{% note warning %}\n\nПрежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).\n\n{% endnote %}\n\nДля каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param oaSProvideOrderItemIdentifiersReques  (required)
     * @return OASProvideOrderItemIdentifiersRespon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASProvideOrderItemIdentifiersRespon provideOrderItemIdentifiers(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('oaSProvideOrderItemIdentifiersReques'), 'oaSProvideOrderItemIdentifiersReques');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASProvideOrderItemIdentifiersRespon) client.invoke(
            'PUT', '/campaigns/{campaignId}/orders/{orderId}/identifiers',
            (OASProvideOrderItemIdentifiersReques) params.get('oaSProvideOrderItemIdentifiersReques'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASProvideOrderItemIdentifiersRespon.class
        );
    }
    /**
     * Подготовка заказа
     * {% note tip &quot;Подходит и для DBS&quot; %}\n\nЗапрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.\n\n{% endnote %}\n\nПозволяет выполнить три операции:\n\n* передать Маркету информацию о распределении товаров по коробкам;\n* передать Маркету коды маркировки для товаров;\n* удалить товар из заказа, если его не оказалось на складе.\n\nЕсли нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.\n\n## Как передать информацию о распределении товаров\n\nВ этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:\n\n* **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.\n\n* **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.\n\n⚠️ Одна коробка не может содержать и товары целиком, и части товаров.\n\n## Как передавать коды маркировки\n\nЕсли в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)\n\nПринимаются коды следующих типов:\n\n* Коды «Честного знака».\n* УИН для ювелирных изделий.\n* РНПТ и ГТД для импортных прослеживаемых товаров.\n\nДля каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.\n\nЕсли товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.\n\n## Как удалить товар из заказа\n\nЧтобы удалить товар из заказа:\n\n1. Добавьте в запрос &#x60;allowRemove: true&#x60;.\n2. Передайте распределение по коробкам без товара, который нужно удалить.\n\n{% note warning &quot;Удаление нельзя отменить&quot; %}\n\nЭта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.\n\n{% endnote %}\n\nЧтобы удалить позицию целиком, не передавайте соответствующий &#x60;OrderBoxLayoutItemDTO&#x60;. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле &#x60;fullCount&#x60;.\n\nНельзя удалить или уменьшить количество товара, если он:\n\n* добавлен по акции;\n* составляет 99% стоимости заказа;\n* единственный товар в заказе.\n\nЕсли вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.\n\n{% note info &quot;Увеличить заказ нельзя&quot; %}\n\nС помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.\n\n{% endnote %}\n\n## Примеры\n\n{% cut &quot;Товар умещается в коробку&quot; %}\n\nВот как будет выглядеть запрос, если в одной коробке едут:\n\n  * три единицы одного товара, требующего маркировки;\n  * одна единица другого товара, не требущего маркировки.\n\n  &#x60;&#x60;&#x60;json\n  {\n      &quot;boxes&quot;: [\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;fullCount&quot;: 3,\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          },\n                          {\n                              &quot;cis&quot;: &quot;010304109478gftJ14545762!\u001dhGt264&quot;\n                          },\n                          {\n                              &quot;cis&quot;: &quot;010304109478fRs28323ks23!\u001dhet201&quot;\n                          }\n                      ]\n                  },\n                  {\n                      &quot;id&quot;: 654321,\n                      &quot;fullCount&quot;: 1\n                  }\n              ]\n          }\n      ]\n  }\n  &#x60;&#x60;&#x60;\n\n{% endcut %}\n\n{% cut &quot;Товар едет в разных коробках&quot; %}\n\nВот как будет выглядеть запрос, если товар едет в двух коробках:\n\n  &#x60;&#x60;&#x60;json\n  {\n      &quot;boxes&quot;: [\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;partialCount&quot;: {\n                          &quot;current&quot;: 1,\n                          &quot;total&quot;: 2\n                      },\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          }\n                      ]\n                  }\n              ]\n          },\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;partialCount&quot;: {\n                          &quot;current&quot;: 2,\n                          &quot;total&quot;: 2\n                      },\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          }\n                      ]\n                  }\n              ]\n          }\n      ]\n  }\n  &#x60;&#x60;&#x60;\n\n{% endcut %}\n\n{% cut &quot;Одинаковые товары, где каждый едет в нескольких коробках&quot; %}\n\nВот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:\n\n  &#x60;&#x60;&#x60;json\n  {\n      &quot;boxes&quot;: [\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;partialCount&quot;: {\n                          &quot;current&quot;: 1,\n                          &quot;total&quot;: 2\n                      },\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          }\n                      ]\n                  }\n              ]\n          },\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;partialCount&quot;: {\n                          &quot;current&quot;: 2,\n                          &quot;total&quot;: 2\n                      },\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          }\n                      ]\n                  }\n              ]\n          },\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;partialCount&quot;: {\n                          &quot;current&quot;: 1,\n                          &quot;total&quot;: 2\n                      },\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          }\n                      ]\n                  }\n              ]\n          },\n          {\n              &quot;items&quot;: [\n                  {\n                      &quot;id&quot;: 123456,\n                      &quot;partialCount&quot;: {\n                          &quot;current&quot;: 2,\n                          &quot;total&quot;: 2\n                      },\n                      &quot;instances&quot;: [\n                          {\n                              &quot;cis&quot;: &quot;01030410947874432155Qbag!\u001d93Zjqw&quot;\n                          }\n                      ]\n                  }\n              ]\n          }\n      ]\n  }\n  &#x60;&#x60;&#x60;\n\n{% endcut %}\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param oaSSetOrderBoxLayoutRequest  (required)
     * @return OASSetOrderBoxLayoutResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASSetOrderBoxLayoutResponse setOrderBoxLayout(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('oaSSetOrderBoxLayoutRequest'), 'oaSSetOrderBoxLayoutRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASSetOrderBoxLayoutResponse) client.invoke(
            'PUT', '/campaigns/{campaignId}/orders/{orderId}/boxes',
            (OASSetOrderBoxLayoutRequest) params.get('oaSSetOrderBoxLayoutRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASSetOrderBoxLayoutResponse.class
        );
    }
    /**
     * Передача количества грузовых мест в заказе
     * {% note warning &quot;Этот запрос только для DBS&quot; %}\n\nЕсли вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).\n\n{% endnote %}\n\nОтгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.\n\nКоличество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).\n\nМетод устроен немного нестандартно: количество задается длиной массива пустых объектов.\n\nРаньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.\n\n{% cut &quot;Как было раньше&quot; %}\n\nСтруктура тела PUT-запроса:\n\n&#x60;&#x60;&#x60;\n{\n  &quot;boxes&quot;:\n  [\n    {\n      &quot;fulfilmentId&quot;: &quot;{string}&quot;,\n      &quot;weight&quot;: {int64},\n      &quot;width&quot;: {int64},\n      &quot;height&quot;: {int64},\n      &quot;depth&quot;: {int64},\n      &quot;items&quot;:\n      [\n        {\n          &quot;id&quot;: {int64},\n          &quot;count&quot;: {int32}\n        },\n        ...\n      ]\n    },\n    ...\n  ]\n}\n&#x60;&#x60;&#x60;\n| **Параметр**  | **Тип**  | **Значение**  |\n| ----------- | ----------- | ----------- |\n| &#x60;boxes&#x60;       |           | Список грузовых мест.       |\n\n**Параметры, вложенные в &#x60;boxes&#x60;**\n| **Параметр**  | **Тип**  | **Значение**  |\n| ----------- | ----------- | ----------- |\n| &#x60;fulfilmentId&#x60;       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: &#x60;номер заказа на Маркете-номер грузового места&#x60;. Например, &#x60;7206821‑1, 7206821‑2&#x60; и т. д. |\n| &#x60;weight&#x60;       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. |\n| &#x60;width&#x60;       | Int64   | Ширина грузового места в сантиметрах.       |\n| &#x60;height&#x60;       | Int64   | Высота грузового места в сантиметрах.       |\n| &#x60;depth&#x60;       | Int64   | Глубина грузового места в сантиметрах.        |\n| &#x60;items&#x60;       | Int64   | Список товаров в грузовом месте.       |\n\n**Параметры, вложенные в &#x60;items&#x60;**\n| **Параметр**  | **Тип**  | **Значение**  |\n| ----------- | ----------- | ----------- |\n| &#x60;id&#x60;       | Int64     | Идентификатор товара в рамках заказа.   |\n| &#x60;count&#x60;    | Int32     | Количество единиц товара в грузовом месте.       |\n\n{% endcut %}\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param shipmentId Параметр больше не используется. Вставьте любое число — просто чтобы получился корректный URL.\n (required)
     * @param oaSSetOrderShipmentBoxesRequest  (required)
     * @return OASSetOrderShipmentBoxesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASSetOrderShipmentBoxesResponse setOrderShipmentBoxes(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('shipmentId'), 'shipmentId');
        client.assertNotNull(params.get('oaSSetOrderShipmentBoxesRequest'), 'oaSSetOrderShipmentBoxesRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASSetOrderShipmentBoxesResponse) client.invoke(
            'PUT', '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes',
            (OASSetOrderShipmentBoxesRequest) params.get('oaSSetOrderShipmentBoxesRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId'),
                'shipmentId' => (Long) params.get('shipmentId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASSetOrderShipmentBoxesResponse.class
        );
    }
    /**
     * Удаление товара из заказа или уменьшение числа единиц
     * {% note warning &quot;Этот запрос только для DBS&quot; %}\n\nЕсли вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).\n\n{% endnote %}\n\nИзменяет состав заказа, если позволяет выбранная служба доставки, в случаях:\n\n* покупатель уменьшил количество товара;\n* магазин не может поставить все товары в заказе.\n\nДля этого заказ должен находится в статусе &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; этапа обработки &#x60;&quot;substatus&quot;: &quot;STARTED&quot;&#x60;. После передачи статуса &#x60;&quot;substatus&quot;: &quot;READY_TO_SHIP&quot;&#x60; изменить состав невозможно.\n\nЕсли одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте &#x60;count&#x60; параметра &#x60;item&#x60;.\n\nЧтобы полностью удалить товар из заказа:\n\n* передайте значение &#x60;0&#x60;; или\n* не передавайте параметр &#x60;item&#x60;.\n\nНельзя удалить или уменьшить количество товара, если он:\n\n* добавлен по акции;\n* составляет 99% стоимости заказа;\n* единственный товар в заказе.\n\nЕсли необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа &#x60;CANCELLED&#x60; с причиной отмены &#x60;SHOP_FAILED&#x60;.\n\n{% note info &quot;Увеличить заказ нельзя&quot; %}\n\nС помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.\n\n{% endnote %}\n\n**Возврат денег покупателю**\n\nЕсли покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:\n\n* при оплате банковской картой — с момента, когда магазин переведет заказ в статус &#x60;SHIPPED&#x60;;\n\n* при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param oaSUpdateOrderItemRequest  (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void updateOrderItems(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('oaSUpdateOrderItemRequest'), 'oaSUpdateOrderItemRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'PUT', '/campaigns/{campaignId}/orders/{orderId}/items',
            (OASUpdateOrderItemRequest) params.get('oaSUpdateOrderItemRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            null
        );
    }
    /**
     * Изменение статуса одного заказа
     * Изменяет статус заказа. Возможные изменения статусов:\n\n* Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этапа обработки &#x60;&quot;substatus&quot;: &quot;STARTED&quot;&#x60; нужно перевести в статус &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этап обработки &#x60;&quot;substatus&quot;: &quot;READY_TO_SHIP&quot;&#x60;.\n* Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этапа обработки &#x60;&quot;substatus&quot;: &quot;STARTED&quot;&#x60; нужно перевести в статус &#x60;&quot;status&quot;: &quot;CANCELLED&quot;&#x60; с причиной отмены заказа &#x60;&quot;substatus&quot;: &quot;SHOP_FAILED&quot;&#x60;.\n* Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этапа обработки &#x60;&quot;substatus&quot;: &quot;READY_TO_SHIP&quot;&#x60; нужно перевести в статус &#x60;&quot;status&quot;: &quot;CANCELLED&quot;&#x60; с причиной отмены заказа &#x60;&quot;substatus&quot;: &quot;SHOP_FAILED&quot;&#x60;.\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param orderId Идентификатор заказа. (required)
     * @param oaSUpdateOrderStatusRequest  (required)
     * @return OASUpdateOrderStatusResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUpdateOrderStatusResponse updateOrderStatus(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('orderId'), 'orderId');
        client.assertNotNull(params.get('oaSUpdateOrderStatusRequest'), 'oaSUpdateOrderStatusRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUpdateOrderStatusResponse) client.invoke(
            'PUT', '/campaigns/{campaignId}/orders/{orderId}/status',
            (OASUpdateOrderStatusRequest) params.get('oaSUpdateOrderStatusRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'orderId' => (Long) params.get('orderId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASUpdateOrderStatusResponse.class
        );
    }
    /**
     * Изменение статусов нескольких заказов
     * Изменяет статусы нескольких заказов.\n\nВозможные изменения статусов:\n\n* Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60;и этапа обработки &#x60;&quot;substatus&quot;: &quot;STARTED&quot;&#x60; нужно перевести в статус &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этап обработки &#x60;&quot;substatus&quot;: &quot;READY_TO_SHIP&quot;&#x60;.\n* Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этапа обработки &#x60;&quot;substatus&quot;: &quot;STARTED&quot;&#x60; нужно перевести в статус &#x60;&quot;status&quot;: &quot;CANCELLED&quot;&#x60; с причиной отмены заказа &#x60;&quot;substatus&quot;: &quot;SHOP_FAILED&quot;&#x60;.\n* Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса &#x60;&quot;status&quot;: &quot;PROCESSING&quot;&#x60; и этапа обработки &#x60;&quot;substatus&quot;: &quot;READY_TO_SHIP&quot;&#x60; нужно перевести в статус &#x60;&quot;status&quot;: &quot;CANCELLED&quot;&#x60; с причиной отмены заказа &#x60;&quot;substatus&quot;: &quot;SHOP_FAILED&quot;&#x60;.\n\nМаксимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.\n\n|**⚙️ Лимит:** 1 000 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param oaSUpdateOrderStatusesRequest  (required)
     * @return OASUpdateOrderStatusesResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUpdateOrderStatusesResponse updateOrderStatuses(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('oaSUpdateOrderStatusesRequest'), 'oaSUpdateOrderStatusesRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUpdateOrderStatusesResponse) client.invoke(
            'POST', '/campaigns/{campaignId}/orders/status-update',
            (OASUpdateOrderStatusesRequest) params.get('oaSUpdateOrderStatusesRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASUpdateOrderStatusesResponse.class
        );
    }
}
