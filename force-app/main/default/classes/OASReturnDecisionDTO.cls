/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Решения по возвратам.
 */
public class OASReturnDecisionDTO {
    /**
     * Идентификатор товара в возврате.
     * @return returnItemId
     */
    public Long returnItemId { get; set; }

    /**
     * Количество единиц товара.
     * @return count
     */
    public Integer count { get; set; }

    /**
     * Комментарий.
     * @return comment
     */
    public String comment { get; set; }

    /**
     * Get reasonType
     * @return reasonType
     */
    public OASReturnDecisionReasonType reasonType { get; set; }

    /**
     * Get subreasonType
     * @return subreasonType
     */
    public OASReturnDecisionSubreasonType subreasonType { get; set; }

    /**
     * Get decisionType
     * @return decisionType
     */
    public OASReturnDecisionType decisionType { get; set; }

    /**
     * Сумма возврата.
     * @return refundAmount
     */
    public Long refundAmount { get; set; }

    /**
     * Компенсация за обратную доставку.
     * @return partnerCompensation
     */
    public Long partnerCompensation { get; set; }

    /**
     * Список хеш-кодов фотографий товара от покупателя.
     * @return images
     */
    public List<String> images { get; set; }

    public OASReturnDecisionDTO() {
        images = new List<String>();
    }

    public static OASReturnDecisionDTO getExample() {
        OASReturnDecisionDTO returnDecisionDTO = new OASReturnDecisionDTO();
          returnDecisionDTO.returnItemId = 123456789L;
          returnDecisionDTO.count = 0;
          returnDecisionDTO.comment = '';
          returnDecisionDTO.reasonType = OASReturnDecisionReasonType.getExample();
          returnDecisionDTO.subreasonType = OASReturnDecisionSubreasonType.getExample();
          returnDecisionDTO.decisionType = OASReturnDecisionType.getExample();
          returnDecisionDTO.refundAmount = 123456789L;
          returnDecisionDTO.partnerCompensation = 123456789L;
          returnDecisionDTO.images = new List<String>{''};
        return returnDecisionDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASReturnDecisionDTO) {           
            OASReturnDecisionDTO returnDecisionDTO = (OASReturnDecisionDTO) obj;
            return this.returnItemId == returnDecisionDTO.returnItemId
                && this.count == returnDecisionDTO.count
                && this.comment == returnDecisionDTO.comment
                && this.reasonType == returnDecisionDTO.reasonType
                && this.subreasonType == returnDecisionDTO.subreasonType
                && this.decisionType == returnDecisionDTO.decisionType
                && this.refundAmount == returnDecisionDTO.refundAmount
                && this.partnerCompensation == returnDecisionDTO.partnerCompensation
                && this.images == returnDecisionDTO.images;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (returnItemId == null ? 0 : System.hashCode(returnItemId));
        hashCode = (17 * hashCode) + (count == null ? 0 : System.hashCode(count));
        hashCode = (17 * hashCode) + (comment == null ? 0 : System.hashCode(comment));
        hashCode = (17 * hashCode) + (reasonType == null ? 0 : System.hashCode(reasonType));
        hashCode = (17 * hashCode) + (subreasonType == null ? 0 : System.hashCode(subreasonType));
        hashCode = (17 * hashCode) + (decisionType == null ? 0 : System.hashCode(decisionType));
        hashCode = (17 * hashCode) + (refundAmount == null ? 0 : System.hashCode(refundAmount));
        hashCode = (17 * hashCode) + (partnerCompensation == null ? 0 : System.hashCode(partnerCompensation));
        hashCode = (17 * hashCode) + (images == null ? 0 : System.hashCode(images));
        return hashCode;
    }
}

