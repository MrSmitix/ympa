/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 */
public class OASCalculateTariffsOfferDTO {
    /**
     * Идентификатор категории товара на Маркете.\n\nДля расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.\n\nЧтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).\n
     * minimum: 0
     * @return categoryId
     */
    public Long categoryId { get; set; }

    /**
     * Цена на товар в рублях.
     * minimum: 0
     * @return price
     */
    public Double price { get; set; }

    /**
     * Длина товара в сантиметрах.
     * minimum: 0
     * @return length
     */
    public Double length { get; set; }

    /**
     * Ширина товара в сантиметрах.
     * minimum: 0
     * @return width
     */
    public Double width { get; set; }

    /**
     * Высота товара в сантиметрах.
     * minimum: 0
     * @return height
     */
    public Double height { get; set; }

    /**
     * Вес товара в килограммах.
     * minimum: 0
     * @return weight
     */
    public Double weight { get; set; }

    /**
     * Квант продажи — количество единиц товара в одном товарном предложении.
     * minimum: 1
     * @return quantity
     */
    public Integer quantity { get; set; }

    public OASCalculateTariffsOfferDTO() {
        quantity = 1;
    }

    public static OASCalculateTariffsOfferDTO getExample() {
        OASCalculateTariffsOfferDTO calculateTariffsOfferDTO = new OASCalculateTariffsOfferDTO();
          calculateTariffsOfferDTO.categoryId = 123456789L;
          calculateTariffsOfferDTO.price = 1.3579;
          calculateTariffsOfferDTO.length = 1.3579;
          calculateTariffsOfferDTO.width = 1.3579;
          calculateTariffsOfferDTO.height = 1.3579;
          calculateTariffsOfferDTO.weight = 1.3579;
          calculateTariffsOfferDTO.quantity = 0;
        return calculateTariffsOfferDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCalculateTariffsOfferDTO) {           
            OASCalculateTariffsOfferDTO calculateTariffsOfferDTO = (OASCalculateTariffsOfferDTO) obj;
            return this.categoryId == calculateTariffsOfferDTO.categoryId
                && this.price == calculateTariffsOfferDTO.price
                && this.length == calculateTariffsOfferDTO.length
                && this.width == calculateTariffsOfferDTO.width
                && this.height == calculateTariffsOfferDTO.height
                && this.weight == calculateTariffsOfferDTO.weight
                && this.quantity == calculateTariffsOfferDTO.quantity;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (categoryId == null ? 0 : System.hashCode(categoryId));
        hashCode = (17 * hashCode) + (price == null ? 0 : System.hashCode(price));
        hashCode = (17 * hashCode) + (length == null ? 0 : System.hashCode(length));
        hashCode = (17 * hashCode) + (width == null ? 0 : System.hashCode(width));
        hashCode = (17 * hashCode) + (height == null ? 0 : System.hashCode(height));
        hashCode = (17 * hashCode) + (weight == null ? 0 : System.hashCode(weight));
        hashCode = (17 * hashCode) + (quantity == null ? 0 : System.hashCode(quantity));
        return hashCode;
    }
}

