/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Адрес точки продаж.\n
 */
public class OASOutletAddressDTO implements OAS.MappedProperties {
    /**
     * Идентификатор региона.\n\nИдентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).\n\n{% note alert %}\n\nПри создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).\n\n{% endnote %}\n
     * @return regionId
     */
    public Long regionId { get; set; }

    /**
     * Улица.
     * @return street
     */
    public String street { get; set; }

    /**
     * Номер дома.
     * @return r_number
     */
    public String r_number { get; set; }

    /**
     * Номер строения.
     * @return building
     */
    public String building { get; set; }

    /**
     * Номер владения.
     * @return estate
     */
    public String estate { get; set; }

    /**
     * Номер корпуса.
     * @return block
     */
    public String block { get; set; }

    /**
     * Дополнительная информация.
     * @return additional
     */
    public String additional { get; set; }

    /**
     * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
     * @return km
     */
    public Integer km { get; set; }

    /**
     * {% note warning "" %}\n\nЭтот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.\n\n{% endnote %}\n
     * @return city
     */
    public String city { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'number' => 'r_number'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASOutletAddressDTO getExample() {
        OASOutletAddressDTO outletAddressDTO = new OASOutletAddressDTO();
          outletAddressDTO.regionId = 123456789L;
          outletAddressDTO.street = '';
          outletAddressDTO.r_number = '';
          outletAddressDTO.building = '';
          outletAddressDTO.estate = '';
          outletAddressDTO.block = '';
          outletAddressDTO.additional = '';
          outletAddressDTO.km = 0;
          outletAddressDTO.city = '';
        return outletAddressDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOutletAddressDTO) {           
            OASOutletAddressDTO outletAddressDTO = (OASOutletAddressDTO) obj;
            return this.regionId == outletAddressDTO.regionId
                && this.street == outletAddressDTO.street
                && this.r_number == outletAddressDTO.r_number
                && this.building == outletAddressDTO.building
                && this.estate == outletAddressDTO.estate
                && this.block == outletAddressDTO.block
                && this.additional == outletAddressDTO.additional
                && this.km == outletAddressDTO.km
                && this.city == outletAddressDTO.city;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (regionId == null ? 0 : System.hashCode(regionId));
        hashCode = (17 * hashCode) + (street == null ? 0 : System.hashCode(street));
        hashCode = (17 * hashCode) + (r_number == null ? 0 : System.hashCode(r_number));
        hashCode = (17 * hashCode) + (building == null ? 0 : System.hashCode(building));
        hashCode = (17 * hashCode) + (estate == null ? 0 : System.hashCode(estate));
        hashCode = (17 * hashCode) + (block == null ? 0 : System.hashCode(block));
        hashCode = (17 * hashCode) + (additional == null ? 0 : System.hashCode(additional));
        hashCode = (17 * hashCode) + (km == null ? 0 : System.hashCode(km));
        hashCode = (17 * hashCode) + (city == null ? 0 : System.hashCode(city));
        return hashCode;
    }
}

