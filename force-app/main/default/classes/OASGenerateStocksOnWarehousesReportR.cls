/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Данные, необходимые для генерации отчета.\n
 */
public class OASGenerateStocksOnWarehousesReportR {
    /**
     * Идентификатор магазина.
     * @return campaignId
     */
    public Long campaignId { get; set; }

    /**
     * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     * @return warehouseIds
     */
    public List<Long> warehouseIds { get; set; }

    /**
     * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
     * @return reportDate
     */
    public Date reportDate { get; set; }

    /**
     * Фильтр по категориям на Маркете (кроме модели FBY).
     * @return categoryIds
     */
    public List<Long> categoryIds { get; set; }

    /**
     * Фильтр по наличию остатков (кроме модели FBY).
     * @return hasStocks
     */
    public Boolean hasStocks { get; set; }

    public OASGenerateStocksOnWarehousesReportR() {
        warehouseIds = new List<Long>();
        categoryIds = new List<Long>();
    }

    public static OASGenerateStocksOnWarehousesReportR getExample() {
        OASGenerateStocksOnWarehousesReportR generateStocksOnWarehousesReportRequest = new OASGenerateStocksOnWarehousesReportR();
          generateStocksOnWarehousesReportRequest.campaignId = 123456789L;
          generateStocksOnWarehousesReportRequest.warehouseIds = new List<Long>{123456789L};
          generateStocksOnWarehousesReportRequest.reportDate = Date.newInstance(2000, 1, 23);
          generateStocksOnWarehousesReportRequest.categoryIds = new List<Long>{123456789L};
          generateStocksOnWarehousesReportRequest.hasStocks = true;
        return generateStocksOnWarehousesReportRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASGenerateStocksOnWarehousesReportR) {           
            OASGenerateStocksOnWarehousesReportR generateStocksOnWarehousesReportRequest = (OASGenerateStocksOnWarehousesReportR) obj;
            return this.campaignId == generateStocksOnWarehousesReportRequest.campaignId
                && this.warehouseIds == generateStocksOnWarehousesReportRequest.warehouseIds
                && this.reportDate == generateStocksOnWarehousesReportRequest.reportDate
                && this.categoryIds == generateStocksOnWarehousesReportRequest.categoryIds
                && this.hasStocks == generateStocksOnWarehousesReportRequest.hasStocks;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (campaignId == null ? 0 : System.hashCode(campaignId));
        hashCode = (17 * hashCode) + (warehouseIds == null ? 0 : System.hashCode(warehouseIds));
        hashCode = (17 * hashCode) + (reportDate == null ? 0 : System.hashCode(reportDate));
        hashCode = (17 * hashCode) + (categoryIds == null ? 0 : System.hashCode(categoryIds));
        hashCode = (17 * hashCode) + (hasStocks == null ? 0 : System.hashCode(hasStocks));
        return hashCode;
    }
}

