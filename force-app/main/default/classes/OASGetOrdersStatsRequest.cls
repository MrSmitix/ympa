/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Запрос информации по заказам.
 */
public class OASGetOrdersStatsRequest {
    /**
     * Начальная дата, когда заказ был сформирован.\n\nФормат даты: `ГГГГ‑ММ‑ДД`.\n\nНельзя использовать вместе с параметрами `updateFrom` и `updateTo`.\n
     * @return dateFrom
     */
    public Date dateFrom { get; set; }

    /**
     * Конечная дата, когда заказ был сформирован.\n\nФормат даты: `ГГГГ‑ММ‑ДД`.\n\nНельзя использовать вместе с параметрами `updateFrom` и `updateTo`.\n
     * @return dateTo
     */
    public Date dateTo { get; set; }

    /**
     * Начальная дата периода, за который были изменения статуса заказа.\n\nФормат даты: `ГГГГ‑ММ‑ДД`.\n\nНельзя использовать вместе с параметрами `dateFrom` и `dateTo`.\n
     * @return updateFrom
     */
    public Date updateFrom { get; set; }

    /**
     * Конечная дата периода, за который были изменения статуса заказа.\n\nФормат даты: `ГГГГ‑ММ‑ДД`.\n\nНельзя использовать вместе с параметрами `dateFrom` и `dateTo`.\n
     * @return updateTo
     */
    public Date updateTo { get; set; }

    /**
     * Список идентификаторов заказов.
     * @return orders
     */
    public List<Long> orders { get; set; }

    /**
     * Список статусов заказов.
     * @return statuses
     */
    public List<OASOrderStatsStatusType> statuses { get; set; }

    /**
     * Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):\n\n* `true` — да.\n* `false` — нет.\nТакие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.\n
     * @return hasCis
     */
    public Boolean hasCis { get; set; }

    public OASGetOrdersStatsRequest() {
        orders = new List<Long>();
        statuses = new List<OASOrderStatsStatusType>();
    }

    public static OASGetOrdersStatsRequest getExample() {
        OASGetOrdersStatsRequest getOrdersStatsRequest = new OASGetOrdersStatsRequest();
          getOrdersStatsRequest.dateFrom = Date.newInstance(2000, 1, 23);
          getOrdersStatsRequest.dateTo = Date.newInstance(2000, 1, 23);
          getOrdersStatsRequest.updateFrom = Date.newInstance(2000, 1, 23);
          getOrdersStatsRequest.updateTo = Date.newInstance(2000, 1, 23);
          getOrdersStatsRequest.orders = new List<Long>{123456789L};
          getOrdersStatsRequest.statuses = new List<OASOrderStatsStatusType>{OASOrderStatsStatusType.getExample()};
          getOrdersStatsRequest.hasCis = true;
        return getOrdersStatsRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASGetOrdersStatsRequest) {           
            OASGetOrdersStatsRequest getOrdersStatsRequest = (OASGetOrdersStatsRequest) obj;
            return this.dateFrom == getOrdersStatsRequest.dateFrom
                && this.dateTo == getOrdersStatsRequest.dateTo
                && this.updateFrom == getOrdersStatsRequest.updateFrom
                && this.updateTo == getOrdersStatsRequest.updateTo
                && this.orders == getOrdersStatsRequest.orders
                && this.statuses == getOrdersStatsRequest.statuses
                && this.hasCis == getOrdersStatsRequest.hasCis;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (dateFrom == null ? 0 : System.hashCode(dateFrom));
        hashCode = (17 * hashCode) + (dateTo == null ? 0 : System.hashCode(dateTo));
        hashCode = (17 * hashCode) + (updateFrom == null ? 0 : System.hashCode(updateFrom));
        hashCode = (17 * hashCode) + (updateTo == null ? 0 : System.hashCode(updateTo));
        hashCode = (17 * hashCode) + (orders == null ? 0 : System.hashCode(orders));
        hashCode = (17 * hashCode) + (statuses == null ? 0 : System.hashCode(statuses));
        hashCode = (17 * hashCode) + (hasCis == null ? 0 : System.hashCode(hasCis));
        return hashCode;
    }
}

