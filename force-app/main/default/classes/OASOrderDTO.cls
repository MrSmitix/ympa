/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Заказ.
 */
public class OASOrderDTO implements OAS.MappedProperties {
    /**
     * Идентификатор заказа.
     * @return id
     */
    public Long id { get; set; }

    /**
     * Get status
     * @return status
     */
    public OASOrderStatusType status { get; set; }

    /**
     * Get substatus
     * @return substatus
     */
    public OASOrderSubstatusType substatus { get; set; }

    /**
     * Get creationDate
     * @return creationDate
     */
    public String creationDate { get; set; }

    /**
     * Get updatedAt
     * @return updatedAt
     */
    public String updatedAt { get; set; }

    /**
     * Get r_currency
     * @return r_currency
     */
    public OASCurrencyType r_currency { get; set; }

    /**
     * Платеж покупателя.\n
     * @return itemsTotal
     */
    public Double itemsTotal { get; set; }

    /**
     * Стоимость доставки.\n
     * @return deliveryTotal
     */
    public Double deliveryTotal { get; set; }

    /**
     * {% note warning "" %}\n\nЭтот параметр устарел.\n\n{% endnote %}\n\nСтоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.\n
     * @return buyerItemsTotal
     */
    public Double buyerItemsTotal { get; set; }

    /**
     * {% note warning "" %}\n\nЭтот параметр устарел.\n\n{% endnote %}\n\nСтоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.\n
     * @return buyerTotal
     */
    public Double buyerTotal { get; set; }

    /**
     * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:\n\n* акциям;\n* купонам;\n* промокодам.\n
     * @return buyerItemsTotalBeforeDiscount
     */
    public Double buyerItemsTotalBeforeDiscount { get; set; }

    /**
     * {% note warning "" %}\n\nЭтот параметр устарел.\n\n{% endnote %}\n\nСтоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).\n
     * @return buyerTotalBeforeDiscount
     */
    public Double buyerTotalBeforeDiscount { get; set; }

    /**
     * Get paymentType
     * @return paymentType
     */
    public OASOrderPaymentType paymentType { get; set; }

    /**
     * Get paymentMethod
     * @return paymentMethod
     */
    public OASOrderPaymentMethodType paymentMethod { get; set; }

    /**
     * Тип заказа:\n\n* `false` — настоящий заказ покупателя.\n\n* `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.\n
     * @return fake
     */
    public Boolean fake { get; set; }

    /**
     * Список товаров в заказе.
     * @return items
     */
    public List<OASOrderItemDTO> items { get; set; }

    /**
     * Список субсидий по типам.
     * @return subsidies
     */
    public List<OASOrderSubsidyDTO> subsidies { get; set; }

    /**
     * Get delivery
     * @return delivery
     */
    public OASOrderDeliveryDTO delivery { get; set; }

    /**
     * Get buyer
     * @return buyer
     */
    public OASOrderBuyerDTO buyer { get; set; }

    /**
     * Комментарий к заказу.
     * @return notes
     */
    public String notes { get; set; }

    /**
     * Get taxSystem
     * @return taxSystem
     */
    public OASOrderTaxSystemType taxSystem { get; set; }

    /**
     * **Только для модели DBS**\n\nЗапрошена ли отмена.\n
     * @return cancelRequested
     */
    public Boolean cancelRequested { get; set; }

    /**
     * Get expiryDate
     * @return expiryDate
     */
    public String expiryDate { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'currency' => 'r_currency'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASOrderDTO() {
        items = new List<OASOrderItemDTO>();
        subsidies = new List<OASOrderSubsidyDTO>();
    }

    public static OASOrderDTO getExample() {
        OASOrderDTO orderDTO = new OASOrderDTO();
          orderDTO.id = 123456789L;
          orderDTO.status = OASOrderStatusType.getExample();
          orderDTO.substatus = OASOrderSubstatusType.getExample();
          orderDTO.creationDate = '23-09-2022 09:12:41';
          orderDTO.updatedAt = '23-09-2022 09:12:41';
          orderDTO.r_currency = OASCurrencyType.getExample();
          orderDTO.itemsTotal = 1.3579;
          orderDTO.deliveryTotal = 1.3579;
          orderDTO.buyerItemsTotal = 1.3579;
          orderDTO.buyerTotal = 1.3579;
          orderDTO.buyerItemsTotalBeforeDiscount = 1.3579;
          orderDTO.buyerTotalBeforeDiscount = 1.3579;
          orderDTO.paymentType = OASOrderPaymentType.getExample();
          orderDTO.paymentMethod = OASOrderPaymentMethodType.getExample();
          orderDTO.fake = true;
          orderDTO.items = new List<OASOrderItemDTO>{OASOrderItemDTO.getExample()};
          orderDTO.subsidies = new List<OASOrderSubsidyDTO>{OASOrderSubsidyDTO.getExample()};
          orderDTO.delivery = OASOrderDeliveryDTO.getExample();
          orderDTO.buyer = OASOrderBuyerDTO.getExample();
          orderDTO.notes = '';
          orderDTO.taxSystem = OASOrderTaxSystemType.getExample();
          orderDTO.cancelRequested = true;
          orderDTO.expiryDate = '23-09-2022 09:12:41';
        return orderDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOrderDTO) {           
            OASOrderDTO orderDTO = (OASOrderDTO) obj;
            return this.id == orderDTO.id
                && this.status == orderDTO.status
                && this.substatus == orderDTO.substatus
                && this.creationDate == orderDTO.creationDate
                && this.updatedAt == orderDTO.updatedAt
                && this.r_currency == orderDTO.r_currency
                && this.itemsTotal == orderDTO.itemsTotal
                && this.deliveryTotal == orderDTO.deliveryTotal
                && this.buyerItemsTotal == orderDTO.buyerItemsTotal
                && this.buyerTotal == orderDTO.buyerTotal
                && this.buyerItemsTotalBeforeDiscount == orderDTO.buyerItemsTotalBeforeDiscount
                && this.buyerTotalBeforeDiscount == orderDTO.buyerTotalBeforeDiscount
                && this.paymentType == orderDTO.paymentType
                && this.paymentMethod == orderDTO.paymentMethod
                && this.fake == orderDTO.fake
                && this.items == orderDTO.items
                && this.subsidies == orderDTO.subsidies
                && this.delivery == orderDTO.delivery
                && this.buyer == orderDTO.buyer
                && this.notes == orderDTO.notes
                && this.taxSystem == orderDTO.taxSystem
                && this.cancelRequested == orderDTO.cancelRequested
                && this.expiryDate == orderDTO.expiryDate;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (status == null ? 0 : System.hashCode(status));
        hashCode = (17 * hashCode) + (substatus == null ? 0 : System.hashCode(substatus));
        hashCode = (17 * hashCode) + (creationDate == null ? 0 : System.hashCode(creationDate));
        hashCode = (17 * hashCode) + (updatedAt == null ? 0 : System.hashCode(updatedAt));
        hashCode = (17 * hashCode) + (r_currency == null ? 0 : System.hashCode(r_currency));
        hashCode = (17 * hashCode) + (itemsTotal == null ? 0 : System.hashCode(itemsTotal));
        hashCode = (17 * hashCode) + (deliveryTotal == null ? 0 : System.hashCode(deliveryTotal));
        hashCode = (17 * hashCode) + (buyerItemsTotal == null ? 0 : System.hashCode(buyerItemsTotal));
        hashCode = (17 * hashCode) + (buyerTotal == null ? 0 : System.hashCode(buyerTotal));
        hashCode = (17 * hashCode) + (buyerItemsTotalBeforeDiscount == null ? 0 : System.hashCode(buyerItemsTotalBeforeDiscount));
        hashCode = (17 * hashCode) + (buyerTotalBeforeDiscount == null ? 0 : System.hashCode(buyerTotalBeforeDiscount));
        hashCode = (17 * hashCode) + (paymentType == null ? 0 : System.hashCode(paymentType));
        hashCode = (17 * hashCode) + (paymentMethod == null ? 0 : System.hashCode(paymentMethod));
        hashCode = (17 * hashCode) + (fake == null ? 0 : System.hashCode(fake));
        hashCode = (17 * hashCode) + (items == null ? 0 : System.hashCode(items));
        hashCode = (17 * hashCode) + (subsidies == null ? 0 : System.hashCode(subsidies));
        hashCode = (17 * hashCode) + (delivery == null ? 0 : System.hashCode(delivery));
        hashCode = (17 * hashCode) + (buyer == null ? 0 : System.hashCode(buyer));
        hashCode = (17 * hashCode) + (notes == null ? 0 : System.hashCode(notes));
        hashCode = (17 * hashCode) + (taxSystem == null ? 0 : System.hashCode(taxSystem));
        hashCode = (17 * hashCode) + (cancelRequested == null ? 0 : System.hashCode(cancelRequested));
        hashCode = (17 * hashCode) + (expiryDate == null ? 0 : System.hashCode(expiryDate));
        return hashCode;
    }
}

