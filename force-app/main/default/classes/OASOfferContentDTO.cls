/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Товар с указанными характеристиками.
 */
public class OASOfferContentDTO {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.\n\nРазрешена любая последовательность длиной до 255 знаков.\n\nПравила использования SKU:\n\n* У каждого товара SKU должен быть свой.\n\n* SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.\n\n* Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.\n\n[Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)\n
     * @return offerId
     */
    public String offerId { get; set; }

    /**
     * Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     * @return categoryId
     */
    public Integer categoryId { get; set; }

    /**
     * Список характеристик с их значениями.\n\nС `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.\n\nПри **изменении** характеристик передавайте только те, значение которых нужно обновить.\n\nЧтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.\n\nМаксимальное количество характеристик — 300.\n
     * @return parameterValues
     */
    public List<OASParameterValueDTO> parameterValues { get; set; }

    public OASOfferContentDTO() {
        parameterValues = new List<OASParameterValueDTO>();
    }

    public static OASOfferContentDTO getExample() {
        OASOfferContentDTO offerContentDTO = new OASOfferContentDTO();
          offerContentDTO.offerId = '';
          offerContentDTO.categoryId = 0;
          offerContentDTO.parameterValues = new List<OASParameterValueDTO>{OASParameterValueDTO.getExample()};
        return offerContentDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASOfferContentDTO) {           
            OASOfferContentDTO offerContentDTO = (OASOfferContentDTO) obj;
            return this.offerId == offerContentDTO.offerId
                && this.categoryId == offerContentDTO.categoryId
                && this.parameterValues == offerContentDTO.parameterValues;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (offerId == null ? 0 : System.hashCode(offerId));
        hashCode = (17 * hashCode) + (categoryId == null ? 0 : System.hashCode(categoryId));
        hashCode = (17 * hashCode) + (parameterValues == null ? 0 : System.hashCode(parameterValues));
        return hashCode;
    }
}

