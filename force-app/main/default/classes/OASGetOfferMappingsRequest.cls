/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASGetOfferMappingsRequest
 */
public class OASGetOfferMappingsRequest {
    /**
     * Идентификаторы товаров, информация о которых нужна.\n\n{% note warning "Такой список возвращается только целиком" %}\n\nЕсли вы запрашиваете информацию по конкретным SKU, не заполняйте:\n* `page_token`;\n* `limit`;\n* `cardStatuses`;\n* `categoryIds`;\n* `vendorNames`;\n* `tags`;\n* `archived`.\n\n{% endnote %}\n\n \n
     * @return offerIds
     */
    public List<String> offerIds { get; set; }

    /**
     * Фильтр по статусам карточек.\n\n[Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html)\n
     * @return cardStatuses
     */
    public List<OASOfferCardStatusType> cardStatuses { get; set; }

    /**
     * Фильтр по категориям на Маркете.
     * @return categoryIds
     */
    public List<Integer> categoryIds { get; set; }

    /**
     * Фильтр по брендам.
     * @return vendorNames
     */
    public List<String> vendorNames { get; set; }

    /**
     * Фильтр по тегам.
     * @return tags
     */
    public List<String> tags { get; set; }

    /**
     * Фильтр по нахождению в архиве.\n\nПередайте `true`, чтобы получить товары, находящиеся в архиве. Если фильтр не заполнен или передано `false`, в ответе возвращаются товары, не находящиеся в архиве.\n
     * @return archived
     */
    public Boolean archived { get; set; }

    public OASGetOfferMappingsRequest() {
        offerIds = new List<String>();
        cardStatuses = new List<OASOfferCardStatusType>();
        categoryIds = new List<Integer>();
        vendorNames = new List<String>();
        tags = new List<String>();
    }

    public static OASGetOfferMappingsRequest getExample() {
        OASGetOfferMappingsRequest getOfferMappingsRequest = new OASGetOfferMappingsRequest();
          getOfferMappingsRequest.offerIds = new List<String>{String.getExample()};
          getOfferMappingsRequest.cardStatuses = new List<OASOfferCardStatusType>{OASOfferCardStatusType.getExample()};
          getOfferMappingsRequest.categoryIds = new List<Integer>{0};
          getOfferMappingsRequest.vendorNames = new List<String>{''};
          getOfferMappingsRequest.tags = new List<String>{''};
          getOfferMappingsRequest.archived = true;
        return getOfferMappingsRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASGetOfferMappingsRequest) {           
            OASGetOfferMappingsRequest getOfferMappingsRequest = (OASGetOfferMappingsRequest) obj;
            return this.offerIds == getOfferMappingsRequest.offerIds
                && this.cardStatuses == getOfferMappingsRequest.cardStatuses
                && this.categoryIds == getOfferMappingsRequest.categoryIds
                && this.vendorNames == getOfferMappingsRequest.vendorNames
                && this.tags == getOfferMappingsRequest.tags
                && this.archived == getOfferMappingsRequest.archived;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (offerIds == null ? 0 : System.hashCode(offerIds));
        hashCode = (17 * hashCode) + (cardStatuses == null ? 0 : System.hashCode(cardStatuses));
        hashCode = (17 * hashCode) + (categoryIds == null ? 0 : System.hashCode(categoryIds));
        hashCode = (17 * hashCode) + (vendorNames == null ? 0 : System.hashCode(vendorNames));
        hashCode = (17 * hashCode) + (tags == null ? 0 : System.hashCode(tags));
        hashCode = (17 * hashCode) + (archived == null ? 0 : System.hashCode(archived));
        return hashCode;
    }
}

