/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 */
public class OASFeedbackDTO {
    /**
     * Идентификатор отзыва.
     * @return id
     */
    public Long id { get; set; }

    /**
     * Дата и время создания отзыва.\n\nФормат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.\n
     * @return createdAt
     */
    public Datetime createdAt { get; set; }

    /**
     * Комментарий автора отзыва.
     * @return text
     */
    public String text { get; set; }

    /**
     * Get state
     * @return state
     */
    public OASFeedbackStateType state { get; set; }

    /**
     * Get author
     * @return author
     */
    public OASFeedbackAuthorDTO author { get; set; }

    /**
     * Достоинства магазина, описанные в отзыве.
     * @return pro
     */
    public String pro { get; set; }

    /**
     * Недостатки магазина, описанные в отзыве.
     * @return contra
     */
    public String contra { get; set; }

    /**
     * Переписка автора отзыва с магазином.
     * @return comments
     */
    public List<OASFeedbackCommentDTO> comments { get; set; }

    /**
     * Get shop
     * @return shop
     */
    public OASFeedbackShopDTO shop { get; set; }

    /**
     * Решена ли проблема автора отзыва:\n\n* `true` — да.\n* `false` — нет.\n\nЕсли проблема решена, около отзыва на странице магазина появляется соответствующая надпись.\n
     * @return resolved
     */
    public Boolean resolved { get; set; }

    /**
     * {% note warning "" %}\n\nЭтот параметр устарел. Не используйте его.\n\n{% endnote %}\n\nЯвляется ли отзыв рекомендованным:\n\n* `true` — да.\n* `false` — нет.\n
     * @return verified
     */
    public Boolean verified { get; set; }

    /**
     * Купил бы автор отзыва в магазине снова:\n\n* `true` — да.\n* `false` — нет.\n
     * @return recommend
     */
    public Boolean recommend { get; set; }

    /**
     * Get grades
     * @return grades
     */
    public OASFeedbackGradesDTO grades { get; set; }

    /**
     * Get order
     * @return order
     */
    public OASFeedbackOrderDTO order { get; set; }

    public OASFeedbackDTO() {
        comments = new List<OASFeedbackCommentDTO>();
    }

    public static OASFeedbackDTO getExample() {
        OASFeedbackDTO feedbackDTO = new OASFeedbackDTO();
          feedbackDTO.id = 123456789L;
          feedbackDTO.createdAt = Datetime.newInstanceGmt(2000, 1, 23, 4, 56, 7);
          feedbackDTO.text = '';
          feedbackDTO.state = OASFeedbackStateType.getExample();
          feedbackDTO.author = OASFeedbackAuthorDTO.getExample();
          feedbackDTO.pro = '';
          feedbackDTO.contra = '';
          feedbackDTO.comments = new List<OASFeedbackCommentDTO>{OASFeedbackCommentDTO.getExample()};
          feedbackDTO.shop = OASFeedbackShopDTO.getExample();
          feedbackDTO.resolved = true;
          feedbackDTO.verified = true;
          feedbackDTO.recommend = true;
          feedbackDTO.grades = OASFeedbackGradesDTO.getExample();
          feedbackDTO.order = OASFeedbackOrderDTO.getExample();
        return feedbackDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASFeedbackDTO) {           
            OASFeedbackDTO feedbackDTO = (OASFeedbackDTO) obj;
            return this.id == feedbackDTO.id
                && this.createdAt == feedbackDTO.createdAt
                && this.text == feedbackDTO.text
                && this.state == feedbackDTO.state
                && this.author == feedbackDTO.author
                && this.pro == feedbackDTO.pro
                && this.contra == feedbackDTO.contra
                && this.comments == feedbackDTO.comments
                && this.shop == feedbackDTO.shop
                && this.resolved == feedbackDTO.resolved
                && this.verified == feedbackDTO.verified
                && this.recommend == feedbackDTO.recommend
                && this.grades == feedbackDTO.grades
                && this.order == feedbackDTO.order;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (id == null ? 0 : System.hashCode(id));
        hashCode = (17 * hashCode) + (createdAt == null ? 0 : System.hashCode(createdAt));
        hashCode = (17 * hashCode) + (text == null ? 0 : System.hashCode(text));
        hashCode = (17 * hashCode) + (state == null ? 0 : System.hashCode(state));
        hashCode = (17 * hashCode) + (author == null ? 0 : System.hashCode(author));
        hashCode = (17 * hashCode) + (pro == null ? 0 : System.hashCode(pro));
        hashCode = (17 * hashCode) + (contra == null ? 0 : System.hashCode(contra));
        hashCode = (17 * hashCode) + (comments == null ? 0 : System.hashCode(comments));
        hashCode = (17 * hashCode) + (shop == null ? 0 : System.hashCode(shop));
        hashCode = (17 * hashCode) + (resolved == null ? 0 : System.hashCode(resolved));
        hashCode = (17 * hashCode) + (verified == null ? 0 : System.hashCode(verified));
        hashCode = (17 * hashCode) + (recommend == null ? 0 : System.hashCode(recommend));
        hashCode = (17 * hashCode) + (grades == null ? 0 : System.hashCode(grades));
        hashCode = (17 * hashCode) + (order == null ? 0 : System.hashCode(order));
        return hashCode;
    }
}

