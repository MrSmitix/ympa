/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASFeedsApi {
    OASClient client;

    public OASFeedsApi(OASClient client) {
        this.client = client;
    }

    public OASFeedsApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Информация о прайс-листе
     * {% note warning &quot;&quot; %}\n\nЭтот метод устарел. Не используйте его.\n\n{% endnote %}\n\nВозвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа.\n|**⚙️ Лимит:** 1000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param feedId Идентификатор прайс-листа. (required)
     * @return OASGetFeedResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetFeedResponse getFeed(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('feedId'), 'feedId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetFeedResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/feeds/{feedId}', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'feedId' => (Long) params.get('feedId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetFeedResponse.class
        );
    }
    /**
     * Отчет по индексации прайс-листа
     * {% note warning &quot;&quot; %}\n\nЭтот метод устарел. Не используйте его.\n\n{% endnote %}\n\nВозвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.\n\nДанные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.\n\n|**⚙️ Лимит:** 1 000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param feedId Идентификатор прайс-листа. (required)
     * @param r_limit Количество значений на одной странице.\n (optional)
     * @param publishedTimeFrom Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.\n\nФормат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.\n\nЗначение по умолчанию: последние восемь дней со времени отправки запроса.\n (optional)
     * @param publishedTimeTo Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.\n\nФормат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-31T00:42:42+03:00&#x60;.\n\nЗначение по умолчанию: дата и время отправки запроса.\n\n{% note info %}\n\nЕсли во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра &#x60;published_time_to&#x60;. Значение параметра не должно быть датой из будущего.\n\n{% endnote %}\n (optional)
     * @param status Статус индексации и проверки прайс-листа на соответствие техническим требованиям.\n\nВозможные значения:\n* &#x60;ERROR&#x60; — произошли ошибки.\n* &#x60;OK&#x60; — обработан без ошибок.\n* &#x60;WARNING&#x60; — наблюдались некритичные проблемы.\n (optional)
     * @return OASGetFeedIndexLogsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetFeedIndexLogsResponse getFeedIndexLogs(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('feedId'), 'feedId');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('published_time_from', (Datetime) params.get('publishedTimeFrom')));
        query.addAll(client.makeParam('published_time_to', (Datetime) params.get('publishedTimeTo')));
        query.addAll(client.makeParam('status', (OASFeedIndexLogsStatusType) params.get('status')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetFeedIndexLogsResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/feeds/{feedId}/index-logs', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'feedId' => (Long) params.get('feedId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetFeedIndexLogsResponse.class
        );
    }
    /**
     * Список прайс-листов магазина
     * {% note warning &quot;&quot; %}\n\nЭтот метод устарел. Не используйте его.\n\n{% endnote %}\n\nВозвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов.\n|**⚙️ Лимит:** 1000 запросов в час|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @return OASGetFeedsResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetFeedsResponse getFeeds(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetFeedsResponse) client.invoke(
            'GET', '/campaigns/{campaignId}/feeds', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASGetFeedsResponse.class
        );
    }
    /**
     * Сообщить, что прайс-лист обновился
     * {% note warning &quot;&quot; %}\n\nЭтот метод устарел. Не используйте его.\n\n{% endnote %}\n\nПозволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе.\n1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете.\n2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;.\n3. Маркет начинает обновление данных магазина на сервисе.\n\n{% note alert %}\n\nЗапрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.\n\n{% endnote %}\n\n|**⚙️ Лимит:** 3 запроса в час для одного прайс-листа|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param feedId Идентификатор прайс-листа. (required)
     * @return OASEmptyApiResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmptyApiResponse refreshFeed(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('feedId'), 'feedId');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmptyApiResponse) client.invoke(
            'POST', '/campaigns/{campaignId}/feeds/{feedId}/refresh', '',
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'feedId' => (Long) params.get('feedId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'OAuth' },
            OASEmptyApiResponse.class
        );
    }
    /**
     * Изменение параметров прайс-листа
     * {% note warning &quot;&quot; %}\n\nЭтот метод устарел. Не используйте его.\n\n{% endnote %}\n\nПозволяет магазину изменить параметры прайс-листа.\n\nЧтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).\n\nЧтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).\n\n|**⚙️ Лимит:** 3 запроса в час для одного прайс-листа|\n|-|\n
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.\n\nЧтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).\n\nℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)\n (required)
     * @param feedId Идентификатор прайс-листа. (required)
     * @param oaSSetFeedParamsRequest  (required)
     * @return OASEmptyApiResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmptyApiResponse setFeedParams(Map<String, Object> params) {
        client.assertNotNull(params.get('campaignId'), 'campaignId');
        client.assertNotNull(params.get('feedId'), 'feedId');
        client.assertNotNull(params.get('oaSSetFeedParamsRequest'), 'oaSSetFeedParamsRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmptyApiResponse) client.invoke(
            'POST', '/campaigns/{campaignId}/feeds/{feedId}/params',
            (OASSetFeedParamsRequest) params.get('oaSSetFeedParamsRequest'),
            query, form,
            new Map<String, Object>{
                'campaignId' => (Long) params.get('campaignId'),
                'feedId' => (Long) params.get('feedId')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'OAuth' },
            OASEmptyApiResponse.class
        );
    }
}
