/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.\n\nВ числе возможностей интеграции:\n\n* управление каталогом товаров и витриной,\n\n* обработка заказов,\n\n* изменение настроек магазина,\n\n* получение отчетов.\n
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * Настройка продажи квантами.\n\nЧтобы сбросить установленные ранее значения, передайте пустой параметр &#x60;quantum&#x60;.\n\n{% cut &quot;Пример&quot; %}\n\n&#x60;&#x60;&#x60;json\n{\n  &quot;offers&quot;: [\n    {\n      &quot;offerId&quot;: &quot;08e35dc1-89a2-11e3-8055-0015e9b8c48d&quot;,\n      &quot;quantum&quot;: {}\n    }\n  ]\n}\n&#x60;&#x60;&#x60;\n\n{% endcut %}\n
 */
public class OASQuantumDTO {
    /**
     * Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.\n\n⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать.\n
     * minimum: 1
     * @return minQuantity
     */
    public Integer minQuantity { get; set; }

    /**
     * На сколько единиц покупатель сможет увеличить количество товара в корзине.\n\nНапример, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.\n\n⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту.\n
     * minimum: 1
     * maximum: 100
     * @return stepQuantity
     */
    public Integer stepQuantity { get; set; }

    public static OASQuantumDTO getExample() {
        OASQuantumDTO quantumDTO = new OASQuantumDTO();
          quantumDTO.minQuantity = 0;
          quantumDTO.stepQuantity = 0;
        return quantumDTO;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASQuantumDTO) {           
            OASQuantumDTO quantumDTO = (OASQuantumDTO) obj;
            return this.minQuantity == quantumDTO.minQuantity
                && this.stepQuantity == quantumDTO.stepQuantity;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (minQuantity == null ? 0 : System.hashCode(minQuantity));
        hashCode = (17 * hashCode) + (stepQuantity == null ? 0 : System.hashCode(stepQuantity));
        return hashCode;
    }
}

