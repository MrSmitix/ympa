/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "pistache/endpoint.h"
#include "pistache/http.h"
#include "pistache/router.h"
#ifdef __linux__
#include <vector>
#include <signal.h>
#include <unistd.h>
#endif

#include "ApiBase.h"

#include "BidsApiImpl.h"
#include "BusinessOfferMappingsApiImpl.h"
#include "BusinessesApiImpl.h"
#include "CampaignsApiImpl.h"
#include "CategoriesApiImpl.h"
#include "ChatsApiImpl.h"
#include "ContentApiImpl.h"
#include "DbsApiImpl.h"
#include "DeliveryServicesApiImpl.h"
#include "ExpressApiImpl.h"
#include "FbsApiImpl.h"
#include "FbyApiImpl.h"
#include "FeedbacksApiImpl.h"
#include "FeedsApiImpl.h"
#include "GoodsFeedbackApiImpl.h"
#include "GoodsStatsApiImpl.h"
#include "HiddenOffersApiImpl.h"
#include "ModelsApiImpl.h"
#include "OfferMappingsApiImpl.h"
#include "OffersApiImpl.h"
#include "OrderBusinessInformationApiImpl.h"
#include "OrderDeliveryApiImpl.h"
#include "OrderLabelsApiImpl.h"
#include "OrdersApiImpl.h"
#include "OrdersStatsApiImpl.h"
#include "OutletLicensesApiImpl.h"
#include "OutletsApiImpl.h"
#include "PriceQuarantineApiImpl.h"
#include "PricesApiImpl.h"
#include "PromosApiImpl.h"
#include "RatingsApiImpl.h"
#include "RegionsApiImpl.h"
#include "ReportsApiImpl.h"
#include "ReturnsApiImpl.h"
#include "ShipmentsApiImpl.h"
#include "StocksApiImpl.h"
#include "TariffsApiImpl.h"
#include "WarehousesApiImpl.h"

#define PISTACHE_SERVER_THREADS     2
#define PISTACHE_SERVER_MAX_REQUEST_SIZE 32768
#define PISTACHE_SERVER_MAX_RESPONSE_SIZE 32768

static Pistache::Http::Endpoint *httpEndpoint;
#ifdef __linux__
static void sigHandler [[noreturn]] (int sig){
    switch(sig){
        case SIGINT:
        case SIGQUIT:
        case SIGTERM:
        case SIGHUP:
        default:
            httpEndpoint->shutdown();
            break;
    }
    exit(0);
}

static void setUpUnixSignals(std::vector<int> quitSignals) {
    sigset_t blocking_mask;
    sigemptyset(&blocking_mask);
    for (auto sig : quitSignals)
        sigaddset(&blocking_mask, sig);

    struct sigaction sa;
    sa.sa_handler = sigHandler;
    sa.sa_mask    = blocking_mask;
    sa.sa_flags   = 0;

    for (auto sig : quitSignals)
        sigaction(sig, &sa, nullptr);
}
#endif

using namespace org::openapitools::server::api;

int main() {
#ifdef __linux__
    std::vector<int> sigs{SIGQUIT, SIGINT, SIGTERM, SIGHUP};
    setUpUnixSignals(sigs);
#endif
    Pistache::Address addr(Pistache::Ipv4::any(), Pistache::Port(8080));

    httpEndpoint = new Pistache::Http::Endpoint((addr));
    auto router = std::make_shared<Pistache::Rest::Router>();

    auto opts = Pistache::Http::Endpoint::options()
        .threads(PISTACHE_SERVER_THREADS);
    opts.flags(Pistache::Tcp::Options::ReuseAddr);
    opts.maxRequestSize(PISTACHE_SERVER_MAX_REQUEST_SIZE);
    opts.maxResponseSize(PISTACHE_SERVER_MAX_RESPONSE_SIZE);
    httpEndpoint->init(opts);

    auto apiImpls = std::vector<std::shared_ptr<ApiBase>>();
    
    apiImpls.push_back(std::make_shared<BidsApiImpl>(router));
    apiImpls.push_back(std::make_shared<BusinessOfferMappingsApiImpl>(router));
    apiImpls.push_back(std::make_shared<BusinessesApiImpl>(router));
    apiImpls.push_back(std::make_shared<CampaignsApiImpl>(router));
    apiImpls.push_back(std::make_shared<CategoriesApiImpl>(router));
    apiImpls.push_back(std::make_shared<ChatsApiImpl>(router));
    apiImpls.push_back(std::make_shared<ContentApiImpl>(router));
    apiImpls.push_back(std::make_shared<DbsApiImpl>(router));
    apiImpls.push_back(std::make_shared<DeliveryServicesApiImpl>(router));
    apiImpls.push_back(std::make_shared<ExpressApiImpl>(router));
    apiImpls.push_back(std::make_shared<FbsApiImpl>(router));
    apiImpls.push_back(std::make_shared<FbyApiImpl>(router));
    apiImpls.push_back(std::make_shared<FeedbacksApiImpl>(router));
    apiImpls.push_back(std::make_shared<FeedsApiImpl>(router));
    apiImpls.push_back(std::make_shared<GoodsFeedbackApiImpl>(router));
    apiImpls.push_back(std::make_shared<GoodsStatsApiImpl>(router));
    apiImpls.push_back(std::make_shared<HiddenOffersApiImpl>(router));
    apiImpls.push_back(std::make_shared<ModelsApiImpl>(router));
    apiImpls.push_back(std::make_shared<OfferMappingsApiImpl>(router));
    apiImpls.push_back(std::make_shared<OffersApiImpl>(router));
    apiImpls.push_back(std::make_shared<OrderBusinessInformationApiImpl>(router));
    apiImpls.push_back(std::make_shared<OrderDeliveryApiImpl>(router));
    apiImpls.push_back(std::make_shared<OrderLabelsApiImpl>(router));
    apiImpls.push_back(std::make_shared<OrdersApiImpl>(router));
    apiImpls.push_back(std::make_shared<OrdersStatsApiImpl>(router));
    apiImpls.push_back(std::make_shared<OutletLicensesApiImpl>(router));
    apiImpls.push_back(std::make_shared<OutletsApiImpl>(router));
    apiImpls.push_back(std::make_shared<PriceQuarantineApiImpl>(router));
    apiImpls.push_back(std::make_shared<PricesApiImpl>(router));
    apiImpls.push_back(std::make_shared<PromosApiImpl>(router));
    apiImpls.push_back(std::make_shared<RatingsApiImpl>(router));
    apiImpls.push_back(std::make_shared<RegionsApiImpl>(router));
    apiImpls.push_back(std::make_shared<ReportsApiImpl>(router));
    apiImpls.push_back(std::make_shared<ReturnsApiImpl>(router));
    apiImpls.push_back(std::make_shared<ShipmentsApiImpl>(router));
    apiImpls.push_back(std::make_shared<StocksApiImpl>(router));
    apiImpls.push_back(std::make_shared<TariffsApiImpl>(router));
    apiImpls.push_back(std::make_shared<WarehousesApiImpl>(router));

    for (auto api : apiImpls) {
        api->init();
    }

    httpEndpoint->setHandler(router->handler());
    httpEndpoint->serve();

    httpEndpoint->shutdown();
}
