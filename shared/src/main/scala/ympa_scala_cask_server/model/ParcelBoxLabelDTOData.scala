/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** ParcelBoxLabelDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class ParcelBoxLabelDTOData(
/* Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md).  */
  url: String,

  /* Юридическое название магазина. */
  supplierName: String,

  /* Юридическое название службы доставки. */
  deliveryServiceName: String,

  /* Идентификатор заказа в системе Маркета. */
  orderId: Long,

  /* Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина.  */
  orderNum: String,

  /* Фамилия и инициалы получателя заказа. */
  recipientName: String,

  /* Идентификатор коробки. */
  boxId: Long,

  /* Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д.  */
  fulfilmentId: String,

  /* Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`.  */
  place: String,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`.  */
  weight: String,

  /* Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md). */
  deliveryServiceId: String,

  /* Адрес получателя. */
  deliveryAddress: String = "" ,

  /* Дата отгрузки в формате `dd.MM.yyyy`. */
  shipmentDate: String = "" 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // url






        







        

        // ==================
        // supplierName






        







        

        // ==================
        // deliveryServiceName






        







        

        // ==================
        // orderId






        







        

        // ==================
        // orderNum






        







        

        // ==================
        // recipientName






        







        

        // ==================
        // boxId






        







        

        // ==================
        // fulfilmentId






        







        

        // ==================
        // place






        







        

        // ==================
        // weight






        







        

        // ==================
        // deliveryServiceId






        







        

        // ==================
        // deliveryAddress






        







        

        // ==================
        // shipmentDate






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[ParcelBoxLabelDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : ParcelBoxLabelDTO = {
    ParcelBoxLabelDTO(
        url = 
        url
        
        ,
        supplierName = 
        supplierName
        
        ,
        deliveryServiceName = 
        deliveryServiceName
        
        ,
        orderId = 
        orderId
        
        ,
        orderNum = 
        orderNum
        
        ,
        recipientName = 
        recipientName
        
        ,
        boxId = 
        boxId
        
        ,
        fulfilmentId = 
        fulfilmentId
        
        ,
        place = 
        place
        
        ,
        weight = 
        weight
        
        ,
        deliveryServiceId = 
        deliveryServiceId
        
        ,
        deliveryAddress = Option(
        deliveryAddress
        )
        ,
        shipmentDate = Option(
        shipmentDate
        )
        
    )
  }
}

object ParcelBoxLabelDTOData {

  given readWriter : RW[ParcelBoxLabelDTOData] = macroRW

  def fromJsonString(jason : String) : ParcelBoxLabelDTOData = try {
        read[ParcelBoxLabelDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[ParcelBoxLabelDTOData] = try {
        read[List[ParcelBoxLabelDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[ParcelBoxLabelDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[ParcelBoxLabelDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, ParcelBoxLabelDTOData] = try {
        read[Map[String, ParcelBoxLabelDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, ParcelBoxLabelDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, ParcelBoxLabelDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

