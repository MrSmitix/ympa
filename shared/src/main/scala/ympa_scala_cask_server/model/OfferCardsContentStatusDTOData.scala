/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.ForwardScrollingPagerDTO
import ympa_scala_cask_server.model.OfferCardDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OfferCardsContentStatusDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OfferCardsContentStatusDTOData(
/* Страница списка товаров с информацией о состоянии карточек. */
  offerCards: Seq[OfferCardDTOData],

    paging: ForwardScrollingPagerDTOData = null 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // offerCards






        
        if (errors.isEmpty || !failFast) {
            if (offerCards == null) {
            errors += ValidationError(path :+ OfferCardsContentStatusDTO.Fields.offerCards, "offerCards is a required field and cannot be null")
            }
        }
        







        
        if (errors.isEmpty || !failFast) {
            if (offerCards != null) {
                offerCards.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OfferCardsContentStatusDTO.Fields.offerCards :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // paging






        







        
        // validating paging
        if (errors.isEmpty || !failFast) {
            if paging != null then errors ++= paging.validationErrors(path :+ OfferCardsContentStatusDTO.Fields.paging, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OfferCardsContentStatusDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OfferCardsContentStatusDTO = {
    OfferCardsContentStatusDTO(
        offerCards = 
        offerCards
        
        .map(_.asModel),
        paging = Option(
        paging
        )
        .map(_.asModel)
    )
  }
}

object OfferCardsContentStatusDTOData {

  given readWriter : RW[OfferCardsContentStatusDTOData] = macroRW

  def fromJsonString(jason : String) : OfferCardsContentStatusDTOData = try {
        read[OfferCardsContentStatusDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OfferCardsContentStatusDTOData] = try {
        read[List[OfferCardsContentStatusDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OfferCardsContentStatusDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OfferCardsContentStatusDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OfferCardsContentStatusDTOData] = try {
        read[Map[String, OfferCardsContentStatusDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OfferCardsContentStatusDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OfferCardsContentStatusDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

