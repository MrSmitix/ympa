/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.OrderCourierDTO
import ympa_scala_cask_server.model.OrderDeliveryAddressDTO
import ympa_scala_cask_server.model.OrderDeliveryDatesDTO
import ympa_scala_cask_server.model.OrderDeliveryDispatchType
import ympa_scala_cask_server.model.OrderDeliveryEacType
import ympa_scala_cask_server.model.OrderDeliveryPartnerType
import ympa_scala_cask_server.model.OrderDeliveryType
import ympa_scala_cask_server.model.OrderLiftType
import ympa_scala_cask_server.model.OrderShipmentDTO
import ympa_scala_cask_server.model.OrderTrackDTO
import ympa_scala_cask_server.model.OrderVatType
import ympa_scala_cask_server.model.RegionDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OrderDeliveryDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OrderDeliveryDTOData(
/* Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md).  */
  id: String = "" ,

    `type`: OrderDeliveryType = null ,

  /* Наименование службы доставки. */
  serviceName: String = "" ,

  /* {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа.  */
  price: BigDecimal = 0 ,

    deliveryPartnerType: OrderDeliveryPartnerType = null ,

    courier: OrderCourierDTOData = null ,

    dates: OrderDeliveryDatesDTOData = null ,

    region: RegionDTOData = null ,

    address: OrderDeliveryAddressDTOData = null ,

    vat: OrderVatType = null ,

  /* Идентификатор службы доставки. */
  deliveryServiceId: Long = 0 ,

    liftType: OrderLiftType = null ,

  /* Стоимость подъема на этаж. */
  liftPrice: BigDecimal = 0 ,

  /* Идентификатор пункта самовывоза, присвоенный магазином. */
  outletCode: String = "" ,

  /* Формат даты: `ДД-ММ-ГГГГ`.  */
  outletStorageLimitDate: String = "" ,

    dispatchType: OrderDeliveryDispatchType = null ,

  /* Информация для отслеживания перемещений посылки. */
  tracks: Seq[OrderTrackDTOData] = Nil ,

  /* Информация о посылках. */
  shipments: Seq[OrderShipmentDTOData] = Nil ,

  /* Приблизительная ли дата доставки. */
  estimated: Boolean = false ,

    eacType: OrderDeliveryEacType = null ,

  /* Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`).  */
  eacCode: String = "" 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // `type`






        







        

        // ==================
        // serviceName






        







        

        // ==================
        // price






        







        

        // ==================
        // deliveryPartnerType






        







        

        // ==================
        // courier






        







        
        // validating courier
        if (errors.isEmpty || !failFast) {
            if courier != null then errors ++= courier.validationErrors(path :+ OrderDeliveryDTO.Fields.courier, failFast)
        }

        // ==================
        // dates






        







        
        // validating dates
        if (errors.isEmpty || !failFast) {
            if dates != null then errors ++= dates.validationErrors(path :+ OrderDeliveryDTO.Fields.dates, failFast)
        }

        // ==================
        // region






        







        
        // validating region
        if (errors.isEmpty || !failFast) {
            if region != null then errors ++= region.validationErrors(path :+ OrderDeliveryDTO.Fields.region, failFast)
        }

        // ==================
        // address






        







        
        // validating address
        if (errors.isEmpty || !failFast) {
            if address != null then errors ++= address.validationErrors(path :+ OrderDeliveryDTO.Fields.address, failFast)
        }

        // ==================
        // vat






        







        

        // ==================
        // deliveryServiceId






        







        

        // ==================
        // liftType






        







        

        // ==================
        // liftPrice






        







        

        // ==================
        // outletCode






        







        

        // ==================
        // outletStorageLimitDate






        







        

        // ==================
        // dispatchType






        







        

        // ==================
        // tracks






        







        
        if (errors.isEmpty || !failFast) {
            if (tracks != null) {
                tracks.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderDeliveryDTO.Fields.tracks :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // shipments






        







        
        if (errors.isEmpty || !failFast) {
            if (shipments != null) {
                shipments.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderDeliveryDTO.Fields.shipments :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // estimated






        







        

        // ==================
        // eacType






        







        

        // ==================
        // eacCode






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OrderDeliveryDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OrderDeliveryDTO = {
    OrderDeliveryDTO(
        id = Option(
        id
        )
        ,
        `type` = Option(
        `type`
        )
        ,
        serviceName = Option(
        serviceName
        )
        ,
        price = Option(
        price
        )
        ,
        deliveryPartnerType = Option(
        deliveryPartnerType
        )
        ,
        courier = Option(
        courier
        )
        .map(_.asModel),
        dates = Option(
        dates
        )
        .map(_.asModel),
        region = Option(
        region
        )
        .map(_.asModel),
        address = Option(
        address
        )
        .map(_.asModel),
        vat = Option(
        vat
        )
        ,
        deliveryServiceId = Option(
        deliveryServiceId
        )
        ,
        liftType = Option(
        liftType
        )
        ,
        liftPrice = Option(
        liftPrice
        )
        ,
        outletCode = Option(
        outletCode
        )
        ,
        outletStorageLimitDate = Option(
        outletStorageLimitDate
        )
        ,
        dispatchType = Option(
        dispatchType
        )
        ,
        tracks = 
        tracks
        
        .map(_.asModel),
        shipments = 
        shipments
        
        .map(_.asModel),
        estimated = Option(
        estimated
        )
        ,
        eacType = Option(
        eacType
        )
        ,
        eacCode = Option(
        eacCode
        )
        
    )
  }
}

object OrderDeliveryDTOData {

  given readWriter : RW[OrderDeliveryDTOData] = macroRW

  def fromJsonString(jason : String) : OrderDeliveryDTOData = try {
        read[OrderDeliveryDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OrderDeliveryDTOData] = try {
        read[List[OrderDeliveryDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OrderDeliveryDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OrderDeliveryDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OrderDeliveryDTOData] = try {
        read[Map[String, OrderDeliveryDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OrderDeliveryDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OrderDeliveryDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

