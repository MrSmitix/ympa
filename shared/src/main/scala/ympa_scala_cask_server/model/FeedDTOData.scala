/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.FeedContentDTO
import ympa_scala_cask_server.model.FeedDownloadDTO
import ympa_scala_cask_server.model.FeedPlacementDTO
import ympa_scala_cask_server.model.FeedPublicationDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** FeedDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class FeedDTOData(
/* Идентификатор прайс-листа. */
  id: Long = 0 ,

  /* Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
  login: String = "" ,

  /* Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.  */
  name: String = "" ,

  /* Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
  password: String = "" ,

  /* Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета.  */
  uploadDate: OffsetDateTime = null ,

  /* URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.  */
  url: String = "" ,

    content: FeedContentDTOData = null ,

    download: FeedDownloadDTOData = null ,

    placement: FeedPlacementDTOData = null ,

    publication: FeedPublicationDTOData = null 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // login






        







        

        // ==================
        // name






        







        

        // ==================
        // password






        







        

        // ==================
        // uploadDate






        







        

        // ==================
        // url






        







        

        // ==================
        // content






        







        
        // validating content
        if (errors.isEmpty || !failFast) {
            if content != null then errors ++= content.validationErrors(path :+ FeedDTO.Fields.content, failFast)
        }

        // ==================
        // download






        







        
        // validating download
        if (errors.isEmpty || !failFast) {
            if download != null then errors ++= download.validationErrors(path :+ FeedDTO.Fields.download, failFast)
        }

        // ==================
        // placement






        







        
        // validating placement
        if (errors.isEmpty || !failFast) {
            if placement != null then errors ++= placement.validationErrors(path :+ FeedDTO.Fields.placement, failFast)
        }

        // ==================
        // publication






        







        
        // validating publication
        if (errors.isEmpty || !failFast) {
            if publication != null then errors ++= publication.validationErrors(path :+ FeedDTO.Fields.publication, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[FeedDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : FeedDTO = {
    FeedDTO(
        id = Option(
        id
        )
        ,
        login = Option(
        login
        )
        ,
        name = Option(
        name
        )
        ,
        password = Option(
        password
        )
        ,
        uploadDate = Option(
        uploadDate
        )
        ,
        url = Option(
        url
        )
        ,
        content = Option(
        content
        )
        .map(_.asModel),
        download = Option(
        download
        )
        .map(_.asModel),
        placement = Option(
        placement
        )
        .map(_.asModel),
        publication = Option(
        publication
        )
        .map(_.asModel)
    )
  }
}

object FeedDTOData {

  given readWriter : RW[FeedDTOData] = macroRW

  def fromJsonString(jason : String) : FeedDTOData = try {
        read[FeedDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[FeedDTOData] = try {
        read[List[FeedDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[FeedDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[FeedDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, FeedDTOData] = try {
        read[Map[String, FeedDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, FeedDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, FeedDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

