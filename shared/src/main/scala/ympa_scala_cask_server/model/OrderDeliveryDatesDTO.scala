/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OrderDeliveryDatesDTO(
/* Формат даты: `ДД-ММ-ГГГГ`.  */
  fromDate: Option[String] = None ,

  /* Формат даты: `ДД-ММ-ГГГГ`.  */
  toDate: Option[String] = None ,

  /* Начало интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Минимальное значение: `00:00`.  */
  fromTime: Option[String] = None ,

  /* Конец интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Максимальное значение: `23:59`.  */
  toTime: Option[String] = None ,

  /* Формат даты: `ДД-ММ-ГГГГ`.  */
  realDeliveryDate: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OrderDeliveryDatesDTOData = {
    OrderDeliveryDatesDTOData(
            fromDate = fromDate.getOrElse(""),
            toDate = toDate.getOrElse(""),
            fromTime = fromTime.getOrElse(""),
            toTime = toTime.getOrElse(""),
            realDeliveryDate = realDeliveryDate.getOrElse("")
    )
  }

}

object OrderDeliveryDatesDTO{

    given RW[OrderDeliveryDatesDTO] = OrderDeliveryDatesDTOData.readWriter.bimap[OrderDeliveryDatesDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case fromDate extends Fields("fromDate")
            case toDate extends Fields("toDate")
            case fromTime extends Fields("fromTime")
            case toTime extends Fields("toTime")
            case realDeliveryDate extends Fields("realDeliveryDate")
    }


}

