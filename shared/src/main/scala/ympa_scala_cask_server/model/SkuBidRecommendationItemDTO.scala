/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.BidRecommendationItemDTO
import ympa_scala_cask_server.model.PriceRecommendationItemDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class SkuBidRecommendationItemDTO(
/* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  sku: String,

  /* Значение ставки. */
  bid: Int,

  /* Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить.  */
  bidRecommendations: Seq[BidRecommendationItemDTO] = Nil ,

  /* Рекомендованные цены. */
  priceRecommendations: Seq[PriceRecommendationItemDTO] = Nil 

  ) {

  def asJson: String = asData.asJson

  def asData : SkuBidRecommendationItemDTOData = {
    SkuBidRecommendationItemDTOData(
            sku = sku,
            bid = bid,
            bidRecommendations = bidRecommendations.map(_.asData),
            priceRecommendations = priceRecommendations.map(_.asData)
    )
  }

}

object SkuBidRecommendationItemDTO{

    given RW[SkuBidRecommendationItemDTO] = SkuBidRecommendationItemDTOData.readWriter.bimap[SkuBidRecommendationItemDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case sku extends Fields("sku")
            case bid extends Fields("bid")
            case bidRecommendations extends Fields("bidRecommendations")
            case priceRecommendations extends Fields("priceRecommendations")
    }


}

