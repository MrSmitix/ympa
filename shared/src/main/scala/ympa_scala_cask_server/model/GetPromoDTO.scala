/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.ChannelType
import ympa_scala_cask_server.model.GetPromoAssortmentInfoDTO
import ympa_scala_cask_server.model.GetPromoBestsellerInfoDTO
import ympa_scala_cask_server.model.GetPromoConstraintsDTO
import ympa_scala_cask_server.model.GetPromoMechanicsInfoDTO
import ympa_scala_cask_server.model.PromoPeriodDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class GetPromoDTO(
/* Идентификатор акции. */
  id: String,

  /* Название акции. */
  name: String,

    period: PromoPeriodDTO,

  /* Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).  */
  participating: Boolean,

    assortmentInfo: GetPromoAssortmentInfoDTO,

    mechanicsInfo: GetPromoMechanicsInfoDTO,

    bestsellerInfo: GetPromoBestsellerInfoDTO,

  /* Список каналов продвижения товаров. */
  channels: Seq[ChannelType] = Nil ,

    constraints: Option[GetPromoConstraintsDTO] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : GetPromoDTOData = {
    GetPromoDTOData(
            id = id,
            name = name,
            period = period,
            participating = participating,
            assortmentInfo = assortmentInfo,
            mechanicsInfo = mechanicsInfo,
            bestsellerInfo = bestsellerInfo,
            channels = channels.map(_.asData),
            constraints = constraints.map(_.asData).getOrElse(null)
    )
  }

}

object GetPromoDTO{

    given RW[GetPromoDTO] = GetPromoDTOData.readWriter.bimap[GetPromoDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case id extends Fields("id")
            case name extends Fields("name")
            case period extends Fields("period")
            case participating extends Fields("participating")
            case assortmentInfo extends Fields("assortmentInfo")
            case mechanicsInfo extends Fields("mechanicsInfo")
            case bestsellerInfo extends Fields("bestsellerInfo")
            case channels extends Fields("channels")
            case constraints extends Fields("constraints")
    }


}

