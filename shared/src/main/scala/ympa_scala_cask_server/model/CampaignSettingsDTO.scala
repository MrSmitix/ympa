/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.CampaignSettingsLocalRegionDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class CampaignSettingsDTO(
/* Идентификатор региона, в котором находится магазин. */
  countryRegion: Option[Long] = None ,

  /* Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`.  */
  shopName: Option[String] = None ,

  /* Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции.  */
  showInContext: Option[Boolean] = None ,

  /* Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения.  */
  showInPremium: Option[Boolean] = None ,

  /* Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется.  */
  useOpenStat: Option[Boolean] = None ,

    localRegion: Option[CampaignSettingsLocalRegionDTO] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : CampaignSettingsDTOData = {
    CampaignSettingsDTOData(
            countryRegion = countryRegion.getOrElse(0),
            shopName = shopName.getOrElse(""),
            showInContext = showInContext.getOrElse(false),
            showInPremium = showInPremium.getOrElse(false),
            useOpenStat = useOpenStat.getOrElse(false),
            localRegion = localRegion.map(_.asData).getOrElse(null)
    )
  }

}

object CampaignSettingsDTO{

    given RW[CampaignSettingsDTO] = CampaignSettingsDTOData.readWriter.bimap[CampaignSettingsDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case countryRegion extends Fields("countryRegion")
            case shopName extends Fields("shopName")
            case showInContext extends Fields("showInContext")
            case showInPremium extends Fields("showInPremium")
            case useOpenStat extends Fields("useOpenStat")
            case localRegion extends Fields("localRegion")
    }


}

