/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.OfferCardStatusType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** GetOfferCardsContentStatusRequestData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class GetOfferCardsContentStatusRequestData(
/* Идентификаторы товаров, информация о которых нужна. <br><br> ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  */
  offerIds: Set[String] = Set.empty ,

  /* Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html)  */
  cardStatuses: Set[OfferCardStatusType] = Set.empty ,

  /* Фильтр по категориям на Маркете. */
  categoryIds: Set[Int] = Set.empty 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // offerIds






        

          // validate offerIds has unique items
          if (errors.isEmpty || !failFast) {
              if (offerIds != null) {
                offerIds.foldLeft(Set[String]()) {
                  case (set, next) if set.contains(next) =>
                    errors += ValidationError(
                      path :+ GetOfferCardsContentStatusRequest.Fields.offerIds,
                      s"duplicate value: $next"
                    )
                    set + next
                  case (set, next) => set + next
                }
              }
          }



        // validate min items 200
        if (errors.isEmpty || !failFast) {
          val len = if offerIds == null then 0 else offerIds.size
            if (len > 200) {
               errors += ValidationError(path :+ GetOfferCardsContentStatusRequest.Fields.offerIds, s"offerIds has $len, which is greater than the max items 200")
            }
        }



        

        // ==================
        // cardStatuses






        

          // validate cardStatuses has unique items
          if (errors.isEmpty || !failFast) {
              if (cardStatuses != null) {
                cardStatuses.foldLeft(Set[OfferCardStatusType]()) {
                  case (set, next) if set.contains(next) =>
                    errors += ValidationError(
                      path :+ GetOfferCardsContentStatusRequest.Fields.cardStatuses,
                      s"duplicate value: $next"
                    )
                    set + next
                  case (set, next) => set + next
                }
              }
          }






        

        // ==================
        // categoryIds






        

          // validate categoryIds has unique items
          if (errors.isEmpty || !failFast) {
              if (categoryIds != null) {
                categoryIds.foldLeft(Set[Int]()) {
                  case (set, next) if set.contains(next) =>
                    errors += ValidationError(
                      path :+ GetOfferCardsContentStatusRequest.Fields.categoryIds,
                      s"duplicate value: $next"
                    )
                    set + next
                  case (set, next) => set + next
                }
              }
          }



        // validate min items 200
        if (errors.isEmpty || !failFast) {
          val len = if categoryIds == null then 0 else categoryIds.size
            if (len > 200) {
               errors += ValidationError(path :+ GetOfferCardsContentStatusRequest.Fields.categoryIds, s"categoryIds has $len, which is greater than the max items 200")
            }
        }



        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[GetOfferCardsContentStatusRequest] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : GetOfferCardsContentStatusRequest = {
    GetOfferCardsContentStatusRequest(
        offerIds = 
        offerIds
        
        ,
        cardStatuses = 
        cardStatuses
        
        ,
        categoryIds = 
        categoryIds
        
        
    )
  }
}

object GetOfferCardsContentStatusRequestData {

  given readWriter : RW[GetOfferCardsContentStatusRequestData] = macroRW

  def fromJsonString(jason : String) : GetOfferCardsContentStatusRequestData = try {
        read[GetOfferCardsContentStatusRequestData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[GetOfferCardsContentStatusRequestData] = try {
        read[List[GetOfferCardsContentStatusRequestData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[GetOfferCardsContentStatusRequest]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[GetOfferCardsContentStatusRequest]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, GetOfferCardsContentStatusRequestData] = try {
        read[Map[String, GetOfferCardsContentStatusRequestData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, GetOfferCardsContentStatusRequest]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, GetOfferCardsContentStatusRequest]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

