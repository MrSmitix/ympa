/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.CampaignSettingsTimePeriodDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class CampaignSettingsScheduleDTO(
/* Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни.  */
  availableOnHolidays: Option[Boolean] = None ,

  /* Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете. */
  customHolidays: Seq[String],

  /* Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете. */
  customWorkingDays: Seq[String],

    period: Option[CampaignSettingsTimePeriodDTO] = None ,

  /* Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете. */
  totalHolidays: Seq[String],

  /* Список выходных дней недели и государственных праздников. */
  weeklyHolidays: Seq[Int]

  ) {

  def asJson: String = asData.asJson

  def asData : CampaignSettingsScheduleDTOData = {
    CampaignSettingsScheduleDTOData(
            availableOnHolidays = availableOnHolidays.getOrElse(false),
            customHolidays = customHolidays,
            customWorkingDays = customWorkingDays,
            period = period.map(_.asData).getOrElse(null),
            totalHolidays = totalHolidays,
            weeklyHolidays = weeklyHolidays
    )
  }

}

object CampaignSettingsScheduleDTO{

    given RW[CampaignSettingsScheduleDTO] = CampaignSettingsScheduleDTOData.readWriter.bimap[CampaignSettingsScheduleDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case availableOnHolidays extends Fields("availableOnHolidays")
            case customHolidays extends Fields("customHolidays")
            case customWorkingDays extends Fields("customWorkingDays")
            case period extends Fields("period")
            case totalHolidays extends Fields("totalHolidays")
            case weeklyHolidays extends Fields("weeklyHolidays")
    }


}

