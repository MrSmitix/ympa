/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import java.time.LocalDate
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.PlacementType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class GenerateUnitedMarketplaceServicesReportRequest(
/* Идентификатор бизнеса. */
  businessId: Long,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно.  */
  dateTimeFrom: Option[OffsetDateTime] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год.  */
  dateTimeTo: Option[OffsetDateTime] = None ,

  /* Начало периода, включительно. */
  dateFrom: Option[LocalDate] = None ,

  /* Конец периода, включительно. Максимальный период — 1 год. */
  dateTo: Option[LocalDate] = None ,

  /* Начальный год формирования акта. */
  yearFrom: Option[Int] = None ,

  /* Начальный номер месяца формирования акта. */
  monthFrom: Option[Int] = None ,

  /* Конечный год формирования акта. */
  yearTo: Option[Int] = None ,

  /* Конечный номер месяца формирования акта. */
  monthTo: Option[Int] = None ,

  /* Список моделей, которые нужны в отчете.  */
  placementPrograms: Seq[PlacementType] = Nil ,

  /* Список ИНН, которые нужны в отчете. */
  inns: Seq[String] = Nil ,

  /* Список магазинов, которые нужны в отчете. */
  campaignIds: Seq[Long] = Nil 

  ) {

  def asJson: String = asData.asJson

  def asData : GenerateUnitedMarketplaceServicesReportRequestData = {
    GenerateUnitedMarketplaceServicesReportRequestData(
            businessId = businessId,
            dateTimeFrom = dateTimeFrom.getOrElse(null),
            dateTimeTo = dateTimeTo.getOrElse(null),
            dateFrom = dateFrom.getOrElse(null),
            dateTo = dateTo.getOrElse(null),
            yearFrom = yearFrom.getOrElse(0),
            monthFrom = monthFrom.getOrElse(0),
            yearTo = yearTo.getOrElse(0),
            monthTo = monthTo.getOrElse(0),
            placementPrograms = placementPrograms,
            inns = inns,
            campaignIds = campaignIds
    )
  }

}

object GenerateUnitedMarketplaceServicesReportRequest{

    given RW[GenerateUnitedMarketplaceServicesReportRequest] = GenerateUnitedMarketplaceServicesReportRequestData.readWriter.bimap[GenerateUnitedMarketplaceServicesReportRequest](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case businessId extends Fields("businessId")
            case dateTimeFrom extends Fields("dateTimeFrom")
            case dateTimeTo extends Fields("dateTimeTo")
            case dateFrom extends Fields("dateFrom")
            case dateTo extends Fields("dateTo")
            case yearFrom extends Fields("yearFrom")
            case monthFrom extends Fields("monthFrom")
            case yearTo extends Fields("yearTo")
            case monthTo extends Fields("monthTo")
            case placementPrograms extends Fields("placementPrograms")
            case inns extends Fields("inns")
            case campaignIds extends Fields("campaignIds")
    }


}

