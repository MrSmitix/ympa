/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.CategoryParameterUnitDTO
import ympa_scala_cask_server.model.OfferCardRecommendationType
import ympa_scala_cask_server.model.ParameterType
import ympa_scala_cask_server.model.ParameterValueConstraintsDTO
import ympa_scala_cask_server.model.ParameterValueOptionDTO
import ympa_scala_cask_server.model.ValueRestrictionDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** CategoryParameterDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class CategoryParameterDTOData(
/* Идентификатор характеристики. */
  id: Long,

  /* Название характеристики. */
  name: String = "" ,

    `type`: ParameterType,

    unit: CategoryParameterUnitDTOData = null ,

  /* Описание характеристики. */
  description: String = "" ,

  /* Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика. */
  recommendationTypes: Seq[OfferCardRecommendationType] = Nil ,

  /* Обязательность характеристики. */
  required: Boolean,

  /* Используется ли характеристика в фильтре. */
  filtering: Boolean,

  /* Является ли характеристика особенностью варианта. */
  distinctive: Boolean,

  /* Можно ли передать сразу несколько значений. */
  multivalue: Boolean,

  /* Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`. */
  allowCustomValues: Boolean,

  /* Список допустимых значений параметра. Только для характеристик типа `ENUM`. */
  values: Seq[ParameterValueOptionDTOData] = Nil ,

    constraints: ParameterValueConstraintsDTOData = null ,

  /* Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`. */
  valueRestrictions: Seq[ValueRestrictionDTOData] = Nil 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // name






        







        

        // ==================
        // `type`






        
        if (errors.isEmpty || !failFast) {
            if (`type` == null) {
            errors += ValidationError(path :+ CategoryParameterDTO.Fields.`type`, "`type` is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // unit






        







        
        // validating unit
        if (errors.isEmpty || !failFast) {
            if unit != null then errors ++= unit.validationErrors(path :+ CategoryParameterDTO.Fields.unit, failFast)
        }

        // ==================
        // description






        







        

        // ==================
        // recommendationTypes






        







        

        // ==================
        // required






        







        

        // ==================
        // filtering






        







        

        // ==================
        // distinctive






        







        

        // ==================
        // multivalue






        







        

        // ==================
        // allowCustomValues






        







        

        // ==================
        // values






        







        
        if (errors.isEmpty || !failFast) {
            if (values != null) {
                values.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ CategoryParameterDTO.Fields.values :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // constraints






        







        
        // validating constraints
        if (errors.isEmpty || !failFast) {
            if constraints != null then errors ++= constraints.validationErrors(path :+ CategoryParameterDTO.Fields.constraints, failFast)
        }

        // ==================
        // valueRestrictions






        







        
        if (errors.isEmpty || !failFast) {
            if (valueRestrictions != null) {
                valueRestrictions.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ CategoryParameterDTO.Fields.valueRestrictions :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[CategoryParameterDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : CategoryParameterDTO = {
    CategoryParameterDTO(
        id = 
        id
        
        ,
        name = Option(
        name
        )
        ,
        `type` = 
        `type`
        
        ,
        unit = Option(
        unit
        )
        .map(_.asModel),
        description = Option(
        description
        )
        ,
        recommendationTypes = 
        recommendationTypes
        
        ,
        required = 
        required
        
        ,
        filtering = 
        filtering
        
        ,
        distinctive = 
        distinctive
        
        ,
        multivalue = 
        multivalue
        
        ,
        allowCustomValues = 
        allowCustomValues
        
        ,
        values = 
        values
        
        .map(_.asModel),
        constraints = Option(
        constraints
        )
        .map(_.asModel),
        valueRestrictions = 
        valueRestrictions
        
        .map(_.asModel)
    )
  }
}

object CategoryParameterDTOData {

  given readWriter : RW[CategoryParameterDTOData] = macroRW

  def fromJsonString(jason : String) : CategoryParameterDTOData = try {
        read[CategoryParameterDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[CategoryParameterDTOData] = try {
        read[List[CategoryParameterDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[CategoryParameterDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[CategoryParameterDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, CategoryParameterDTOData] = try {
        read[Map[String, CategoryParameterDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, CategoryParameterDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, CategoryParameterDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

