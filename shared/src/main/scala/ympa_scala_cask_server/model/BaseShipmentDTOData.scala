/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.DeliveryServiceDTO
import ympa_scala_cask_server.model.PalletsCountDTO
import ympa_scala_cask_server.model.PartnerShipmentWarehouseDTO
import ympa_scala_cask_server.model.ShipmentType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** BaseShipmentDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class BaseShipmentDTOData(
/* Идентификатор отгрузки. */
  id: Long = 0 ,

  /* Начало планового интервала отгрузки. */
  planIntervalFrom: OffsetDateTime = null ,

  /* Конец планового интервала отгрузки. */
  planIntervalTo: OffsetDateTime = null ,

    shipmentType: ShipmentType = null ,

    warehouse: PartnerShipmentWarehouseDTOData = null ,

    warehouseTo: PartnerShipmentWarehouseDTOData = null ,

  /* Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`. */
  externalId: String = "" ,

    deliveryService: DeliveryServiceDTOData = null ,

    palletsCount: PalletsCountDTOData = null ,

  /* Идентификаторы заказов в отгрузке. */
  orderIds: Set[Long],

  /* Количество заказов, которое Маркет запланировал к отгрузке. */
  draftCount: Int = 0 ,

  /* Количество заказов, которое Маркет подтвердил к отгрузке. */
  plannedCount: Int = 0 ,

  /* Количество заказов, принятых в сортировочном центре или пункте приема. */
  factCount: Int = 0 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // planIntervalFrom






        







        

        // ==================
        // planIntervalTo






        







        

        // ==================
        // shipmentType






        







        

        // ==================
        // warehouse






        







        
        // validating warehouse
        if (errors.isEmpty || !failFast) {
            if warehouse != null then errors ++= warehouse.validationErrors(path :+ BaseShipmentDTO.Fields.warehouse, failFast)
        }

        // ==================
        // warehouseTo






        







        
        // validating warehouseTo
        if (errors.isEmpty || !failFast) {
            if warehouseTo != null then errors ++= warehouseTo.validationErrors(path :+ BaseShipmentDTO.Fields.warehouseTo, failFast)
        }

        // ==================
        // externalId






        







        

        // ==================
        // deliveryService






        







        
        // validating deliveryService
        if (errors.isEmpty || !failFast) {
            if deliveryService != null then errors ++= deliveryService.validationErrors(path :+ BaseShipmentDTO.Fields.deliveryService, failFast)
        }

        // ==================
        // palletsCount






        







        
        // validating palletsCount
        if (errors.isEmpty || !failFast) {
            if palletsCount != null then errors ++= palletsCount.validationErrors(path :+ BaseShipmentDTO.Fields.palletsCount, failFast)
        }

        // ==================
        // orderIds






        

          // validate orderIds has unique items
          if (errors.isEmpty || !failFast) {
              if (orderIds != null) {
                orderIds.foldLeft(Set[Long]()) {
                  case (set, next) if set.contains(next) =>
                    errors += ValidationError(
                      path :+ BaseShipmentDTO.Fields.orderIds,
                      s"duplicate value: $next"
                    )
                    set + next
                  case (set, next) => set + next
                }
              }
          }






        

        // ==================
        // draftCount






        







        

        // ==================
        // plannedCount






        







        

        // ==================
        // factCount






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[BaseShipmentDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : BaseShipmentDTO = {
    BaseShipmentDTO(
        id = Option(
        id
        )
        ,
        planIntervalFrom = Option(
        planIntervalFrom
        )
        ,
        planIntervalTo = Option(
        planIntervalTo
        )
        ,
        shipmentType = Option(
        shipmentType
        )
        ,
        warehouse = Option(
        warehouse
        )
        .map(_.asModel),
        warehouseTo = Option(
        warehouseTo
        )
        .map(_.asModel),
        externalId = Option(
        externalId
        )
        ,
        deliveryService = Option(
        deliveryService
        )
        .map(_.asModel),
        palletsCount = Option(
        palletsCount
        )
        .map(_.asModel),
        orderIds = 
        orderIds
        
        ,
        draftCount = Option(
        draftCount
        )
        ,
        plannedCount = Option(
        plannedCount
        )
        ,
        factCount = Option(
        factCount
        )
        
    )
  }
}

object BaseShipmentDTOData {

  given readWriter : RW[BaseShipmentDTOData] = macroRW

  def fromJsonString(jason : String) : BaseShipmentDTOData = try {
        read[BaseShipmentDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[BaseShipmentDTOData] = try {
        read[List[BaseShipmentDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[BaseShipmentDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[BaseShipmentDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, BaseShipmentDTOData] = try {
        read[Map[String, BaseShipmentDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, BaseShipmentDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, BaseShipmentDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

