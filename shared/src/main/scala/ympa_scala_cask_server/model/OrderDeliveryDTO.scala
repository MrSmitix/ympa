/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.OrderCourierDTO
import ympa_scala_cask_server.model.OrderDeliveryAddressDTO
import ympa_scala_cask_server.model.OrderDeliveryDatesDTO
import ympa_scala_cask_server.model.OrderDeliveryDispatchType
import ympa_scala_cask_server.model.OrderDeliveryEacType
import ympa_scala_cask_server.model.OrderDeliveryPartnerType
import ympa_scala_cask_server.model.OrderDeliveryType
import ympa_scala_cask_server.model.OrderLiftType
import ympa_scala_cask_server.model.OrderShipmentDTO
import ympa_scala_cask_server.model.OrderTrackDTO
import ympa_scala_cask_server.model.OrderVatType
import ympa_scala_cask_server.model.RegionDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OrderDeliveryDTO(
/* Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md).  */
  id: Option[String] = None ,

    `type`: Option[OrderDeliveryType] = None ,

  /* Наименование службы доставки. */
  serviceName: Option[String] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа.  */
  price: Option[BigDecimal] = None ,

    deliveryPartnerType: Option[OrderDeliveryPartnerType] = None ,

    courier: Option[OrderCourierDTO] = None ,

    dates: Option[OrderDeliveryDatesDTO] = None ,

    region: Option[RegionDTO] = None ,

    address: Option[OrderDeliveryAddressDTO] = None ,

    vat: Option[OrderVatType] = None ,

  /* Идентификатор службы доставки. */
  deliveryServiceId: Option[Long] = None ,

    liftType: Option[OrderLiftType] = None ,

  /* Стоимость подъема на этаж. */
  liftPrice: Option[BigDecimal] = None ,

  /* Идентификатор пункта самовывоза, присвоенный магазином. */
  outletCode: Option[String] = None ,

  /* Формат даты: `ДД-ММ-ГГГГ`.  */
  outletStorageLimitDate: Option[String] = None ,

    dispatchType: Option[OrderDeliveryDispatchType] = None ,

  /* Информация для отслеживания перемещений посылки. */
  tracks: Seq[OrderTrackDTO] = Nil ,

  /* Информация о посылках. */
  shipments: Seq[OrderShipmentDTO] = Nil ,

  /* Приблизительная ли дата доставки. */
  estimated: Option[Boolean] = None ,

    eacType: Option[OrderDeliveryEacType] = None ,

  /* Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`).  */
  eacCode: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OrderDeliveryDTOData = {
    OrderDeliveryDTOData(
            id = id.getOrElse(""),
            `type` = `type`.getOrElse(null),
            serviceName = serviceName.getOrElse(""),
            price = price.getOrElse(0),
            deliveryPartnerType = deliveryPartnerType.getOrElse(null),
            courier = courier.map(_.asData).getOrElse(null),
            dates = dates.map(_.asData).getOrElse(null),
            region = region.map(_.asData).getOrElse(null),
            address = address.map(_.asData).getOrElse(null),
            vat = vat.getOrElse(null),
            deliveryServiceId = deliveryServiceId.getOrElse(0),
            liftType = liftType.getOrElse(null),
            liftPrice = liftPrice.getOrElse(0),
            outletCode = outletCode.getOrElse(""),
            outletStorageLimitDate = outletStorageLimitDate.getOrElse(""),
            dispatchType = dispatchType.getOrElse(null),
            tracks = tracks.map(_.asData),
            shipments = shipments.map(_.asData),
            estimated = estimated.getOrElse(false),
            eacType = eacType.getOrElse(null),
            eacCode = eacCode.getOrElse("")
    )
  }

}

object OrderDeliveryDTO{

    given RW[OrderDeliveryDTO] = OrderDeliveryDTOData.readWriter.bimap[OrderDeliveryDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case id extends Fields("id")
            case `type` extends Fields("`type`")
            case serviceName extends Fields("serviceName")
            case price extends Fields("price")
            case deliveryPartnerType extends Fields("deliveryPartnerType")
            case courier extends Fields("courier")
            case dates extends Fields("dates")
            case region extends Fields("region")
            case address extends Fields("address")
            case vat extends Fields("vat")
            case deliveryServiceId extends Fields("deliveryServiceId")
            case liftType extends Fields("liftType")
            case liftPrice extends Fields("liftPrice")
            case outletCode extends Fields("outletCode")
            case outletStorageLimitDate extends Fields("outletStorageLimitDate")
            case dispatchType extends Fields("dispatchType")
            case tracks extends Fields("tracks")
            case shipments extends Fields("shipments")
            case estimated extends Fields("estimated")
            case eacType extends Fields("eacType")
            case eacCode extends Fields("eacCode")
    }


}

