/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.FeedIndexLogsErrorDTO
import ympa_scala_cask_server.model.FeedIndexLogsIndexType
import ympa_scala_cask_server.model.FeedIndexLogsOffersDTO
import ympa_scala_cask_server.model.FeedIndexLogsStatusType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class FeedIndexLogsRecordDTO(
/* Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
  downloadTime: Option[OffsetDateTime] = None ,

  /* Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
  fileTime: Option[OffsetDateTime] = None ,

  /* Идентификатор индексации. */
  generationId: Option[Long] = None ,

    indexType: Option[FeedIndexLogsIndexType] = None ,

  /* Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  */
  publishedTime: Option[OffsetDateTime] = None ,

    status: Option[FeedIndexLogsStatusType] = None ,

    error: Option[FeedIndexLogsErrorDTO] = None ,

    offers: Option[FeedIndexLogsOffersDTO] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : FeedIndexLogsRecordDTOData = {
    FeedIndexLogsRecordDTOData(
            downloadTime = downloadTime.getOrElse(null),
            fileTime = fileTime.getOrElse(null),
            generationId = generationId.getOrElse(0),
            indexType = indexType.getOrElse(null),
            publishedTime = publishedTime.getOrElse(null),
            status = status.getOrElse(null),
            error = error.map(_.asData).getOrElse(null),
            offers = offers.map(_.asData).getOrElse(null)
    )
  }

}

object FeedIndexLogsRecordDTO{

    given RW[FeedIndexLogsRecordDTO] = FeedIndexLogsRecordDTOData.readWriter.bimap[FeedIndexLogsRecordDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case downloadTime extends Fields("downloadTime")
            case fileTime extends Fields("fileTime")
            case generationId extends Fields("generationId")
            case indexType extends Fields("indexType")
            case publishedTime extends Fields("publishedTime")
            case status extends Fields("status")
            case error extends Fields("error")
            case offers extends Fields("offers")
    }


}

