/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.FeedbackReactionStatusType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** GetGoodsFeedbackRequestData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class GetGoodsFeedbackRequestData(
/* Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.  */
  dateTimeFrom: OffsetDateTime = null ,

  /* Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.  */
  dateTimeTo: OffsetDateTime = null ,

    reactionStatus: FeedbackReactionStatusType = null ,

  /* Оценка товара. */
  ratingValues: Set[Int] = Set.empty ,

  /* Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).  */
  modelIds: Set[Long] = Set.empty ,

  /* Фильтр отзывов за баллы Плюса. */
  paid: Boolean = false 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // dateTimeFrom






        







        

        // ==================
        // dateTimeTo






        







        

        // ==================
        // reactionStatus






        







        

        // ==================
        // ratingValues






        

          // validate ratingValues has unique items
          if (errors.isEmpty || !failFast) {
              if (ratingValues != null) {
                ratingValues.foldLeft(Set[Int]()) {
                  case (set, next) if set.contains(next) =>
                    errors += ValidationError(
                      path :+ GetGoodsFeedbackRequest.Fields.ratingValues,
                      s"duplicate value: $next"
                    )
                    set + next
                  case (set, next) => set + next
                }
              }
          }



        // validate min items 5
        if (errors.isEmpty || !failFast) {
          val len = if ratingValues == null then 0 else ratingValues.size
            if (len > 5) {
               errors += ValidationError(path :+ GetGoodsFeedbackRequest.Fields.ratingValues, s"ratingValues has $len, which is greater than the max items 5")
            }
        }



        

        // ==================
        // modelIds






        

          // validate modelIds has unique items
          if (errors.isEmpty || !failFast) {
              if (modelIds != null) {
                modelIds.foldLeft(Set[Long]()) {
                  case (set, next) if set.contains(next) =>
                    errors += ValidationError(
                      path :+ GetGoodsFeedbackRequest.Fields.modelIds,
                      s"duplicate value: $next"
                    )
                    set + next
                  case (set, next) => set + next
                }
              }
          }



        // validate min items 20
        if (errors.isEmpty || !failFast) {
          val len = if modelIds == null then 0 else modelIds.size
            if (len > 20) {
               errors += ValidationError(path :+ GetGoodsFeedbackRequest.Fields.modelIds, s"modelIds has $len, which is greater than the max items 20")
            }
        }



        

        // ==================
        // paid






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[GetGoodsFeedbackRequest] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : GetGoodsFeedbackRequest = {
    GetGoodsFeedbackRequest(
        dateTimeFrom = Option(
        dateTimeFrom
        )
        ,
        dateTimeTo = Option(
        dateTimeTo
        )
        ,
        reactionStatus = Option(
        reactionStatus
        )
        ,
        ratingValues = 
        ratingValues
        
        ,
        modelIds = 
        modelIds
        
        ,
        paid = Option(
        paid
        )
        
    )
  }
}

object GetGoodsFeedbackRequestData {

  given readWriter : RW[GetGoodsFeedbackRequestData] = macroRW

  def fromJsonString(jason : String) : GetGoodsFeedbackRequestData = try {
        read[GetGoodsFeedbackRequestData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[GetGoodsFeedbackRequestData] = try {
        read[List[GetGoodsFeedbackRequestData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[GetGoodsFeedbackRequest]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[GetGoodsFeedbackRequest]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, GetGoodsFeedbackRequestData] = try {
        read[Map[String, GetGoodsFeedbackRequestData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, GetGoodsFeedbackRequest]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, GetGoodsFeedbackRequest]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

