/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OutletAddressDTO(
/* Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}  */
  regionId: Long,

  /* Улица. */
  street: Option[String] = None ,

  /* Номер дома. */
  number: Option[String] = None ,

  /* Номер строения. */
  building: Option[String] = None ,

  /* Номер владения. */
  estate: Option[String] = None ,

  /* Номер корпуса. */
  block: Option[String] = None ,

  /* Дополнительная информация. */
  additional: Option[String] = None ,

  /* Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица. */
  km: Option[Int] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %}  */
  city: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OutletAddressDTOData = {
    OutletAddressDTOData(
            regionId = regionId,
            street = street.getOrElse(""),
            number = number.getOrElse(""),
            building = building.getOrElse(""),
            estate = estate.getOrElse(""),
            block = block.getOrElse(""),
            additional = additional.getOrElse(""),
            km = km.getOrElse(0),
            city = city.getOrElse("")
    )
  }

}

object OutletAddressDTO{

    given RW[OutletAddressDTO] = OutletAddressDTOData.readWriter.bimap[OutletAddressDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case regionId extends Fields("regionId")
            case street extends Fields("street")
            case number extends Fields("number")
            case building extends Fields("building")
            case estate extends Fields("estate")
            case block extends Fields("block")
            case additional extends Fields("additional")
            case km extends Fields("km")
            case city extends Fields("city")
    }


}

