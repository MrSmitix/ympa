/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class ModelOfferDTO(
/* Скидка на предложение в процентах. */
  discount: Option[Int] = None ,

  /* Наименование предложения. */
  name: Option[String] = None ,

  /* Позиция предложения в выдаче Маркета на карточке модели. */
  pos: Option[Int] = None ,

  /* Цена предложения без скидки магазина. */
  preDiscountPrice: Option[BigDecimal] = None ,

  /* Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay. */
  price: Option[BigDecimal] = None ,

  /* Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них.  */
  regionId: Option[Long] = None ,

  /* Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится.  */
  shippingCost: Option[BigDecimal] = None ,

  /* Название магазина (в том виде, в котором отображается на Маркете). */
  shopName: Option[String] = None ,

  /* Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`.  */
  shopRating: Option[Int] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  */
  inStock: Option[Int] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : ModelOfferDTOData = {
    ModelOfferDTOData(
            discount = discount.getOrElse(0),
            name = name.getOrElse(""),
            pos = pos.getOrElse(0),
            preDiscountPrice = preDiscountPrice.getOrElse(0),
            price = price.getOrElse(0),
            regionId = regionId.getOrElse(0),
            shippingCost = shippingCost.getOrElse(0),
            shopName = shopName.getOrElse(""),
            shopRating = shopRating.getOrElse(0),
            inStock = inStock.getOrElse(0)
    )
  }

}

object ModelOfferDTO{

    given RW[ModelOfferDTO] = ModelOfferDTOData.readWriter.bimap[ModelOfferDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case discount extends Fields("discount")
            case name extends Fields("name")
            case pos extends Fields("pos")
            case preDiscountPrice extends Fields("preDiscountPrice")
            case price extends Fields("price")
            case regionId extends Fields("regionId")
            case shippingCost extends Fields("shippingCost")
            case shopName extends Fields("shopName")
            case shopRating extends Fields("shopRating")
            case inStock extends Fields("inStock")
    }


}

