/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.ChannelType
import ympa_scala_cask_server.model.GetPromoAssortmentInfoDTO
import ympa_scala_cask_server.model.GetPromoBestsellerInfoDTO
import ympa_scala_cask_server.model.GetPromoConstraintsDTO
import ympa_scala_cask_server.model.GetPromoMechanicsInfoDTO
import ympa_scala_cask_server.model.PromoPeriodDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** GetPromoDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class GetPromoDTOData(
/* Идентификатор акции. */
  id: String,

  /* Название акции. */
  name: String,

    period: PromoPeriodDTOData,

  /* Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).  */
  participating: Boolean,

    assortmentInfo: GetPromoAssortmentInfoDTOData,

    mechanicsInfo: GetPromoMechanicsInfoDTOData,

    bestsellerInfo: GetPromoBestsellerInfoDTOData,

  /* Список каналов продвижения товаров. */
  channels: Seq[ChannelTypeData] = Nil ,

    constraints: GetPromoConstraintsDTOData = null 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // name






        







        

        // ==================
        // period






        
        if (errors.isEmpty || !failFast) {
            if (period == null) {
            errors += ValidationError(path :+ GetPromoDTO.Fields.period, "period is a required field and cannot be null")
            }
        }
        







        
        // validating period
        if (errors.isEmpty || !failFast) {
            if period != null then errors ++= period.validationErrors(path :+ GetPromoDTO.Fields.period, failFast)
        }

        // ==================
        // participating






        







        

        // ==================
        // assortmentInfo






        
        if (errors.isEmpty || !failFast) {
            if (assortmentInfo == null) {
            errors += ValidationError(path :+ GetPromoDTO.Fields.assortmentInfo, "assortmentInfo is a required field and cannot be null")
            }
        }
        







        
        // validating assortmentInfo
        if (errors.isEmpty || !failFast) {
            if assortmentInfo != null then errors ++= assortmentInfo.validationErrors(path :+ GetPromoDTO.Fields.assortmentInfo, failFast)
        }

        // ==================
        // mechanicsInfo






        
        if (errors.isEmpty || !failFast) {
            if (mechanicsInfo == null) {
            errors += ValidationError(path :+ GetPromoDTO.Fields.mechanicsInfo, "mechanicsInfo is a required field and cannot be null")
            }
        }
        







        
        // validating mechanicsInfo
        if (errors.isEmpty || !failFast) {
            if mechanicsInfo != null then errors ++= mechanicsInfo.validationErrors(path :+ GetPromoDTO.Fields.mechanicsInfo, failFast)
        }

        // ==================
        // bestsellerInfo






        
        if (errors.isEmpty || !failFast) {
            if (bestsellerInfo == null) {
            errors += ValidationError(path :+ GetPromoDTO.Fields.bestsellerInfo, "bestsellerInfo is a required field and cannot be null")
            }
        }
        







        
        // validating bestsellerInfo
        if (errors.isEmpty || !failFast) {
            if bestsellerInfo != null then errors ++= bestsellerInfo.validationErrors(path :+ GetPromoDTO.Fields.bestsellerInfo, failFast)
        }

        // ==================
        // channels






        







        
        if (errors.isEmpty || !failFast) {
            if (channels != null) {
                channels.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ GetPromoDTO.Fields.channels :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // constraints






        







        
        // validating constraints
        if (errors.isEmpty || !failFast) {
            if constraints != null then errors ++= constraints.validationErrors(path :+ GetPromoDTO.Fields.constraints, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[GetPromoDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : GetPromoDTO = {
    GetPromoDTO(
        id = 
        id
        
        ,
        name = 
        name
        
        ,
        period = 
        period
        
        ,
        participating = 
        participating
        
        ,
        assortmentInfo = 
        assortmentInfo
        
        ,
        mechanicsInfo = 
        mechanicsInfo
        
        ,
        bestsellerInfo = 
        bestsellerInfo
        
        ,
        channels = 
        channels
        
        .map(_.asModel),
        constraints = Option(
        constraints
        )
        .map(_.asModel)
    )
  }
}

object GetPromoDTOData {

  given readWriter : RW[GetPromoDTOData] = macroRW

  def fromJsonString(jason : String) : GetPromoDTOData = try {
        read[GetPromoDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[GetPromoDTOData] = try {
        read[List[GetPromoDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[GetPromoDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[GetPromoDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, GetPromoDTOData] = try {
        read[Map[String, GetPromoDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, GetPromoDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, GetPromoDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

