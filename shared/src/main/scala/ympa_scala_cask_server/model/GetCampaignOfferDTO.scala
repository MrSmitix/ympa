/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.GetPriceWithDiscountDTO
import ympa_scala_cask_server.model.GetPriceWithVatDTO
import ympa_scala_cask_server.model.OfferCampaignStatusType
import ympa_scala_cask_server.model.OfferErrorDTO
import ympa_scala_cask_server.model.QuantumDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class GetCampaignOfferDTO(
/* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  offerId: String,

    quantum: Option[QuantumDTO] = None ,

  /* Есть ли товар в продаже.  */
  available: Option[Boolean] = None ,

    basicPrice: Option[GetPriceWithDiscountDTO] = None ,

    campaignPrice: Option[GetPriceWithVatDTO] = None ,

    status: Option[OfferCampaignStatusType] = None ,

  /* Ошибки, препятствующие размещению товара на витрине.  */
  errors: Seq[OfferErrorDTO] = Nil ,

  /* Предупреждения, не препятствующие размещению товара на витрине.  */
  warnings: Seq[OfferErrorDTO] = Nil 

  ) {

  def asJson: String = asData.asJson

  def asData : GetCampaignOfferDTOData = {
    GetCampaignOfferDTOData(
            offerId = offerId,
            quantum = quantum.map(_.asData).getOrElse(null),
            available = available.getOrElse(false),
            basicPrice = basicPrice.map(_.asData).getOrElse(null),
            campaignPrice = campaignPrice.map(_.asData).getOrElse(null),
            status = status.getOrElse(null),
            errors = errors.map(_.asData),
            warnings = warnings.map(_.asData)
    )
  }

}

object GetCampaignOfferDTO{

    given RW[GetCampaignOfferDTO] = GetCampaignOfferDTOData.readWriter.bimap[GetCampaignOfferDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case offerId extends Fields("offerId")
            case quantum extends Fields("quantum")
            case available extends Fields("available")
            case basicPrice extends Fields("basicPrice")
            case campaignPrice extends Fields("campaignPrice")
            case status extends Fields("status")
            case errors extends Fields("errors")
            case warnings extends Fields("warnings")
    }


}

