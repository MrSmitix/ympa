/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.OutletAddressDTO
import ympa_scala_cask_server.model.OutletDeliveryRuleDTO
import ympa_scala_cask_server.model.OutletType
import ympa_scala_cask_server.model.OutletVisibilityType
import ympa_scala_cask_server.model.OutletWorkingScheduleDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OutletDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OutletDTOData(
/* Название точки продаж.  */
  name: String,

    `type`: OutletType,

  /* Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.  */
  coords: String = "" ,

  /* Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.  */
  isMain: Boolean = false ,

  /* Идентификатор точки продаж, присвоенный магазином. */
  shopOutletCode: String = "" ,

    visibility: OutletVisibilityType = null ,

    address: OutletAddressDTOData,

  /* Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.  */
  phones: Seq[String],

    workingSchedule: OutletWorkingScheduleDTOData,

  /* Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.  */
  deliveryRules: Seq[OutletDeliveryRuleDTOData] = Nil ,

  /* Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях. */
  storagePeriod: Long = 0 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // name






        







        

        // ==================
        // `type`






        
        if (errors.isEmpty || !failFast) {
            if (`type` == null) {
            errors += ValidationError(path :+ OutletDTO.Fields.`type`, "`type` is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // coords






        







        

        // ==================
        // isMain






        







        

        // ==================
        // shopOutletCode






        







        

        // ==================
        // visibility






        







        

        // ==================
        // address






        
        if (errors.isEmpty || !failFast) {
            if (address == null) {
            errors += ValidationError(path :+ OutletDTO.Fields.address, "address is a required field and cannot be null")
            }
        }
        







        
        // validating address
        if (errors.isEmpty || !failFast) {
            if address != null then errors ++= address.validationErrors(path :+ OutletDTO.Fields.address, failFast)
        }

        // ==================
        // phones






        



        // validate min items 1
        if (errors.isEmpty || !failFast) {
          val len = if phones == null then 0 else phones.size
            if (len < 1) {
               errors += ValidationError(path :+ OutletDTO.Fields.phones, s"phones has $len, which is less than the min items 1")
            }
        }




        

        // ==================
        // workingSchedule






        
        if (errors.isEmpty || !failFast) {
            if (workingSchedule == null) {
            errors += ValidationError(path :+ OutletDTO.Fields.workingSchedule, "workingSchedule is a required field and cannot be null")
            }
        }
        







        
        // validating workingSchedule
        if (errors.isEmpty || !failFast) {
            if workingSchedule != null then errors ++= workingSchedule.validationErrors(path :+ OutletDTO.Fields.workingSchedule, failFast)
        }

        // ==================
        // deliveryRules






        







        
        if (errors.isEmpty || !failFast) {
            if (deliveryRules != null) {
                deliveryRules.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OutletDTO.Fields.deliveryRules :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // storagePeriod






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OutletDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OutletDTO = {
    OutletDTO(
        name = 
        name
        
        ,
        `type` = 
        `type`
        
        ,
        coords = Option(
        coords
        )
        ,
        isMain = Option(
        isMain
        )
        ,
        shopOutletCode = Option(
        shopOutletCode
        )
        ,
        visibility = Option(
        visibility
        )
        ,
        address = 
        address
        
        ,
        phones = 
        phones
        
        ,
        workingSchedule = 
        workingSchedule
        
        ,
        deliveryRules = 
        deliveryRules
        
        .map(_.asModel),
        storagePeriod = Option(
        storagePeriod
        )
        
    )
  }
}

object OutletDTOData {

  given readWriter : RW[OutletDTOData] = macroRW

  def fromJsonString(jason : String) : OutletDTOData = try {
        read[OutletDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OutletDTOData] = try {
        read[List[OutletDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OutletDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OutletDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OutletDTOData] = try {
        read[Map[String, OutletDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OutletDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OutletDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

