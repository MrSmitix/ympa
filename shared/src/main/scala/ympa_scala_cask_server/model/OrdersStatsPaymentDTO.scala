/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import java.time.LocalDate
import scala.math.BigDecimal
import ympa_scala_cask_server.model.OrdersStatsPaymentOrderDTO
import ympa_scala_cask_server.model.OrdersStatsPaymentSourceType
import ympa_scala_cask_server.model.OrdersStatsPaymentType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OrdersStatsPaymentDTO(
/* Идентификатор денежного перевода. */
  id: Option[String] = None ,

  /* Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`.  */
  date: Option[LocalDate] = None ,

    `type`: Option[OrdersStatsPaymentType] = None ,

    source: Option[OrdersStatsPaymentSourceType] = None ,

  /* Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.  */
  total: Option[BigDecimal] = None ,

    paymentOrder: Option[OrdersStatsPaymentOrderDTO] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OrdersStatsPaymentDTOData = {
    OrdersStatsPaymentDTOData(
            id = id.getOrElse(""),
            date = date.getOrElse(null),
            `type` = `type`.getOrElse(null),
            source = source.getOrElse(null),
            total = total.getOrElse(0),
            paymentOrder = paymentOrder.map(_.asData).getOrElse(null)
    )
  }

}

object OrdersStatsPaymentDTO{

    given RW[OrdersStatsPaymentDTO] = OrdersStatsPaymentDTOData.readWriter.bimap[OrdersStatsPaymentDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case id extends Fields("id")
            case date extends Fields("date")
            case `type` extends Fields("`type`")
            case source extends Fields("source")
            case total extends Fields("total")
            case paymentOrder extends Fields("paymentOrder")
    }


}

