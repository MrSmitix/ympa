/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.GoodsFeedbackDescriptionDTO
import ympa_scala_cask_server.model.GoodsFeedbackIdentifiersDTO
import ympa_scala_cask_server.model.GoodsFeedbackMediaDTO
import ympa_scala_cask_server.model.GoodsFeedbackStatisticsDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** GoodsFeedbackDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class GoodsFeedbackDTOData(
/* Идентификатор отзыва.  */
  feedbackId: Long,

  /* Дата и время создания отзыва. */
  createdAt: OffsetDateTime,

  /* Нужен ли ответ на отзыв. */
  needReaction: Boolean,

    identifiers: GoodsFeedbackIdentifiersDTOData,

  /* Имя автора отзыва. */
  author: String = "" ,

    description: GoodsFeedbackDescriptionDTOData = null ,

    media: GoodsFeedbackMediaDTOData = null ,

    statistics: GoodsFeedbackStatisticsDTOData

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // feedbackId






        







        

        // ==================
        // createdAt






        
        if (errors.isEmpty || !failFast) {
            if (createdAt == null) {
            errors += ValidationError(path :+ GoodsFeedbackDTO.Fields.createdAt, "createdAt is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // needReaction






        







        

        // ==================
        // identifiers






        
        if (errors.isEmpty || !failFast) {
            if (identifiers == null) {
            errors += ValidationError(path :+ GoodsFeedbackDTO.Fields.identifiers, "identifiers is a required field and cannot be null")
            }
        }
        







        
        // validating identifiers
        if (errors.isEmpty || !failFast) {
            if identifiers != null then errors ++= identifiers.validationErrors(path :+ GoodsFeedbackDTO.Fields.identifiers, failFast)
        }

        // ==================
        // author






        







        

        // ==================
        // description






        







        
        // validating description
        if (errors.isEmpty || !failFast) {
            if description != null then errors ++= description.validationErrors(path :+ GoodsFeedbackDTO.Fields.description, failFast)
        }

        // ==================
        // media






        







        
        // validating media
        if (errors.isEmpty || !failFast) {
            if media != null then errors ++= media.validationErrors(path :+ GoodsFeedbackDTO.Fields.media, failFast)
        }

        // ==================
        // statistics






        
        if (errors.isEmpty || !failFast) {
            if (statistics == null) {
            errors += ValidationError(path :+ GoodsFeedbackDTO.Fields.statistics, "statistics is a required field and cannot be null")
            }
        }
        







        
        // validating statistics
        if (errors.isEmpty || !failFast) {
            if statistics != null then errors ++= statistics.validationErrors(path :+ GoodsFeedbackDTO.Fields.statistics, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[GoodsFeedbackDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : GoodsFeedbackDTO = {
    GoodsFeedbackDTO(
        feedbackId = 
        feedbackId
        
        ,
        createdAt = 
        createdAt
        
        ,
        needReaction = 
        needReaction
        
        ,
        identifiers = 
        identifiers
        
        ,
        author = Option(
        author
        )
        ,
        description = Option(
        description
        )
        .map(_.asModel),
        media = Option(
        media
        )
        .map(_.asModel),
        statistics = 
        statistics
        
        
    )
  }
}

object GoodsFeedbackDTOData {

  given readWriter : RW[GoodsFeedbackDTOData] = macroRW

  def fromJsonString(jason : String) : GoodsFeedbackDTOData = try {
        read[GoodsFeedbackDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[GoodsFeedbackDTOData] = try {
        read[List[GoodsFeedbackDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[GoodsFeedbackDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[GoodsFeedbackDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, GoodsFeedbackDTOData] = try {
        read[Map[String, GoodsFeedbackDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, GoodsFeedbackDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, GoodsFeedbackDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

