/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.ModelOfferDTO
import ympa_scala_cask_server.model.ModelPriceDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class EnrichedModelDTO(
/* Идентификатор модели товара. */
  id: Option[Long] = None ,

  /* Название модели товара. */
  name: Option[String] = None ,

    prices: Option[ModelPriceDTO] = None ,

  /* Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них.  */
  offers: Seq[ModelOfferDTO] = Nil ,

  /* Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина. */
  offlineOffers: Option[Int] = None ,

  /* Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина. */
  onlineOffers: Option[Int] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : EnrichedModelDTOData = {
    EnrichedModelDTOData(
            id = id.getOrElse(0),
            name = name.getOrElse(""),
            prices = prices.map(_.asData).getOrElse(null),
            offers = offers.map(_.asData),
            offlineOffers = offlineOffers.getOrElse(0),
            onlineOffers = onlineOffers.getOrElse(0)
    )
  }

}

object EnrichedModelDTO{

    given RW[EnrichedModelDTO] = EnrichedModelDTOData.readWriter.bimap[EnrichedModelDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case id extends Fields("id")
            case name extends Fields("name")
            case prices extends Fields("prices")
            case offers extends Fields("offers")
            case offlineOffers extends Fields("offlineOffers")
            case onlineOffers extends Fields("onlineOffers")
    }


}

