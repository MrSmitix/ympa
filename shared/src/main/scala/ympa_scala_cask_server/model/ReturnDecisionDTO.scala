/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.ReturnDecisionReasonType
import ympa_scala_cask_server.model.ReturnDecisionSubreasonType
import ympa_scala_cask_server.model.ReturnDecisionType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class ReturnDecisionDTO(
/* Идентификатор товара в возврате. */
  returnItemId: Option[Long] = None ,

  /* Количество единиц товара. */
  count: Option[Int] = None ,

  /* Комментарий. */
  comment: Option[String] = None ,

    reasonType: Option[ReturnDecisionReasonType] = None ,

    subreasonType: Option[ReturnDecisionSubreasonType] = None ,

    decisionType: Option[ReturnDecisionType] = None ,

  /* Сумма возврата. */
  refundAmount: Option[Long] = None ,

  /* Компенсация за обратную доставку. */
  partnerCompensation: Option[Long] = None ,

  /* Список хеш-кодов фотографий товара от покупателя. */
  images: Seq[String] = Nil 

  ) {

  def asJson: String = asData.asJson

  def asData : ReturnDecisionDTOData = {
    ReturnDecisionDTOData(
            returnItemId = returnItemId.getOrElse(0),
            count = count.getOrElse(0),
            comment = comment.getOrElse(""),
            reasonType = reasonType.getOrElse(null),
            subreasonType = subreasonType.getOrElse(null),
            decisionType = decisionType.getOrElse(null),
            refundAmount = refundAmount.getOrElse(0),
            partnerCompensation = partnerCompensation.getOrElse(0),
            images = images
    )
  }

}

object ReturnDecisionDTO{

    given RW[ReturnDecisionDTO] = ReturnDecisionDTOData.readWriter.bimap[ReturnDecisionDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case returnItemId extends Fields("returnItemId")
            case count extends Fields("count")
            case comment extends Fields("comment")
            case reasonType extends Fields("reasonType")
            case subreasonType extends Fields("subreasonType")
            case decisionType extends Fields("decisionType")
            case refundAmount extends Fields("refundAmount")
            case partnerCompensation extends Fields("partnerCompensation")
            case images extends Fields("images")
    }


}

