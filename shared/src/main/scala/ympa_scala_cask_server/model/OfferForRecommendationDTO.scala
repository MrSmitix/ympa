/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.BasePriceDTO
import ympa_scala_cask_server.model.GetPriceDTO
import ympa_scala_cask_server.model.PriceCompetitivenessType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OfferForRecommendationDTO(
/* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  offerId: Option[String] = None ,

    price: Option[BasePriceDTO] = None ,

    cofinancePrice: Option[GetPriceDTO] = None ,

    competitiveness: Option[PriceCompetitivenessType] = None ,

  /* Количество показов карточки товара за последние 7 дней. */
  shows: Option[Long] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OfferForRecommendationDTOData = {
    OfferForRecommendationDTOData(
            offerId = offerId.getOrElse(""),
            price = price.map(_.asData).getOrElse(null),
            cofinancePrice = cofinancePrice.map(_.asData).getOrElse(null),
            competitiveness = competitiveness.getOrElse(null),
            shows = shows.getOrElse(0)
    )
  }

}

object OfferForRecommendationDTO{

    given RW[OfferForRecommendationDTO] = OfferForRecommendationDTOData.readWriter.bimap[OfferForRecommendationDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case offerId extends Fields("offerId")
            case price extends Fields("price")
            case cofinancePrice extends Fields("cofinancePrice")
            case competitiveness extends Fields("competitiveness")
            case shows extends Fields("shows")
    }


}

