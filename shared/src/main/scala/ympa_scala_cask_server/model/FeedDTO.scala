/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.FeedContentDTO
import ympa_scala_cask_server.model.FeedDownloadDTO
import ympa_scala_cask_server.model.FeedPlacementDTO
import ympa_scala_cask_server.model.FeedPublicationDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class FeedDTO(
/* Идентификатор прайс-листа. */
  id: Option[Long] = None ,

  /* Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
  login: Option[String] = None ,

  /* Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.  */
  name: Option[String] = None ,

  /* Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.  */
  password: Option[String] = None ,

  /* Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета.  */
  uploadDate: Option[OffsetDateTime] = None ,

  /* URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.  */
  url: Option[String] = None ,

    content: Option[FeedContentDTO] = None ,

    download: Option[FeedDownloadDTO] = None ,

    placement: Option[FeedPlacementDTO] = None ,

    publication: Option[FeedPublicationDTO] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : FeedDTOData = {
    FeedDTOData(
            id = id.getOrElse(0),
            login = login.getOrElse(""),
            name = name.getOrElse(""),
            password = password.getOrElse(""),
            uploadDate = uploadDate.getOrElse(null),
            url = url.getOrElse(""),
            content = content.map(_.asData).getOrElse(null),
            download = download.map(_.asData).getOrElse(null),
            placement = placement.map(_.asData).getOrElse(null),
            publication = publication.map(_.asData).getOrElse(null)
    )
  }

}

object FeedDTO{

    given RW[FeedDTO] = FeedDTOData.readWriter.bimap[FeedDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case id extends Fields("id")
            case login extends Fields("login")
            case name extends Fields("name")
            case password extends Fields("password")
            case uploadDate extends Fields("uploadDate")
            case url extends Fields("url")
            case content extends Fields("content")
            case download extends Fields("download")
            case placement extends Fields("placement")
            case publication extends Fields("publication")
    }


}

