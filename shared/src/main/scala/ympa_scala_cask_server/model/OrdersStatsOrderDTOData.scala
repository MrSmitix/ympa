/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import java.time.LocalDate
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.OrderStatsStatusType
import ympa_scala_cask_server.model.OrdersStatsCommissionDTO
import ympa_scala_cask_server.model.OrdersStatsDeliveryRegionDTO
import ympa_scala_cask_server.model.OrdersStatsItemDTO
import ympa_scala_cask_server.model.OrdersStatsOrderPaymentType
import ympa_scala_cask_server.model.OrdersStatsPaymentDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OrdersStatsOrderDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OrdersStatsOrderDTOData(
/* Идентификатор заказа. */
  id: Long = 0 ,

  /* Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`.  */
  creationDate: LocalDate = null ,

  /* Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва).  */
  statusUpdateDate: OffsetDateTime = null ,

    status: OrderStatsStatusType = null ,

  /* Идентификатор заказа в информационной системе магазина. */
  partnerOrderId: String = "" ,

    paymentType: OrdersStatsOrderPaymentType = null ,

  /* Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */
  fake: Boolean = false ,

    deliveryRegion: OrdersStatsDeliveryRegionDTOData = null ,

  /* Список товаров в заказе после возможных изменений. */
  items: Seq[OrdersStatsItemDTOData],

  /* Список товаров в заказе до изменений. */
  initialItems: Seq[OrdersStatsItemDTOData] = Nil ,

  /* Информация о денежных переводах по заказу. */
  payments: Seq[OrdersStatsPaymentDTOData],

  /* Информация о комиссиях за заказ. */
  commissions: Seq[OrdersStatsCommissionDTOData]

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // creationDate






        







        

        // ==================
        // statusUpdateDate






        







        

        // ==================
        // status






        







        

        // ==================
        // partnerOrderId






        







        

        // ==================
        // paymentType






        







        

        // ==================
        // fake






        







        

        // ==================
        // deliveryRegion






        







        
        // validating deliveryRegion
        if (errors.isEmpty || !failFast) {
            if deliveryRegion != null then errors ++= deliveryRegion.validationErrors(path :+ OrdersStatsOrderDTO.Fields.deliveryRegion, failFast)
        }

        // ==================
        // items






        
        if (errors.isEmpty || !failFast) {
            if (items == null) {
            errors += ValidationError(path :+ OrdersStatsOrderDTO.Fields.items, "items is a required field and cannot be null")
            }
        }
        







        
        if (errors.isEmpty || !failFast) {
            if (items != null) {
                items.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrdersStatsOrderDTO.Fields.items :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // initialItems






        







        
        if (errors.isEmpty || !failFast) {
            if (initialItems != null) {
                initialItems.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrdersStatsOrderDTO.Fields.initialItems :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // payments






        
        if (errors.isEmpty || !failFast) {
            if (payments == null) {
            errors += ValidationError(path :+ OrdersStatsOrderDTO.Fields.payments, "payments is a required field and cannot be null")
            }
        }
        







        
        if (errors.isEmpty || !failFast) {
            if (payments != null) {
                payments.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrdersStatsOrderDTO.Fields.payments :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // commissions






        
        if (errors.isEmpty || !failFast) {
            if (commissions == null) {
            errors += ValidationError(path :+ OrdersStatsOrderDTO.Fields.commissions, "commissions is a required field and cannot be null")
            }
        }
        







        
        if (errors.isEmpty || !failFast) {
            if (commissions != null) {
                commissions.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrdersStatsOrderDTO.Fields.commissions :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OrdersStatsOrderDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OrdersStatsOrderDTO = {
    OrdersStatsOrderDTO(
        id = Option(
        id
        )
        ,
        creationDate = Option(
        creationDate
        )
        ,
        statusUpdateDate = Option(
        statusUpdateDate
        )
        ,
        status = Option(
        status
        )
        ,
        partnerOrderId = Option(
        partnerOrderId
        )
        ,
        paymentType = Option(
        paymentType
        )
        ,
        fake = Option(
        fake
        )
        ,
        deliveryRegion = Option(
        deliveryRegion
        )
        .map(_.asModel),
        items = 
        items
        
        .map(_.asModel),
        initialItems = 
        initialItems
        
        .map(_.asModel),
        payments = 
        payments
        
        .map(_.asModel),
        commissions = 
        commissions
        
        .map(_.asModel)
    )
  }
}

object OrdersStatsOrderDTOData {

  given readWriter : RW[OrdersStatsOrderDTOData] = macroRW

  def fromJsonString(jason : String) : OrdersStatsOrderDTOData = try {
        read[OrdersStatsOrderDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OrdersStatsOrderDTOData] = try {
        read[List[OrdersStatsOrderDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OrdersStatsOrderDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OrdersStatsOrderDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OrdersStatsOrderDTOData] = try {
        read[Map[String, OrdersStatsOrderDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OrdersStatsOrderDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OrdersStatsOrderDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

