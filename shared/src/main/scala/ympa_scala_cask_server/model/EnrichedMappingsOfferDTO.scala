/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.DayOfWeekType
import ympa_scala_cask_server.model.OfferAvailabilityStatusType
import ympa_scala_cask_server.model.OfferProcessingStateDTO
import ympa_scala_cask_server.model.OfferWeightDimensionsDTO
import ympa_scala_cask_server.model.TimePeriodDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class EnrichedMappingsOfferDTO(
/* Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)  */
  name: Option[String] = None ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  shopSku: Option[String] = None ,

  /* Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  */
  category: Option[String] = None ,

  /* Название бренда или производителя. Должно быть записано так, как его пишет сам бренд. */
  vendor: Option[String] = None ,

  /* Артикул товара от производителя. */
  vendorCode: Option[String] = None ,

  /* Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)  */
  description: Option[String] = None ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  id: Option[String] = None ,

  /* Идентификатор фида. */
  feedId: Option[Long] = None ,

  /* Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)   */
  barcodes: Seq[String] = Nil ,

  /* URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.  */
  urls: Seq[String] = Nil ,

  /* Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`.  */
  pictures: Seq[String] = Nil ,

  /* Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.  */
  manufacturer: Option[String] = None ,

  /* Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.  */
  manufacturerCountries: Seq[String] = Nil ,

  /* Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.  */
  minShipment: Option[Int] = None ,

  /* Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.  */
  transportUnitSize: Option[Int] = None ,

  /* Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.  */
  quantumOfSupply: Option[Int] = None ,

  /* Срок, за который продавец поставляет товары на склад, в днях. */
  deliveryDurationDays: Option[Int] = None ,

  /* Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.  */
  boxCount: Option[Int] = None ,

  /* Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.  */
  customsCommodityCodes: Seq[String] = Nil ,

    weightDimensions: Option[OfferWeightDimensionsDTO] = None ,

  /* Дни недели, в которые продавец поставляет товары на склад. */
  supplyScheduleDays: Seq[DayOfWeekType] = Nil ,

  /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.  */
  shelfLifeDays: Option[Int] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.  */
  lifeTimeDays: Option[Int] = None ,

  /* Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.  */
  guaranteePeriodDays: Option[Int] = None ,

    processingState: Option[OfferProcessingStateDTO] = None ,

    availability: Option[OfferAvailabilityStatusType] = None ,

    shelfLife: Option[TimePeriodDTO] = None ,

    lifeTime: Option[TimePeriodDTO] = None ,

    guaranteePeriod: Option[TimePeriodDTO] = None ,

  /* Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)  */
  certificate: Option[String] = None ,

  /* Цена на товар в рублях. */
  price: Option[BigDecimal] = None ,

  /* Идентификатор категории для рекомендованной карточки товара на Маркете.  Возвращается только вместе с параметром ##marketSku##.  */
  marketCategoryId: Option[Long] = None ,

  /* Название категории для рекомендованной карточки товара на Маркете.  Может отсутствовать в ответе.  */
  marketCategoryName: Option[String] = None ,

  /* Идентификатор модели для рекомендованной карточки товара на Маркете.  Может отсутствовать в ответе.  */
  marketModelId: Option[Long] = None ,

  /* Название модели для рекомендованной карточки товара на Маркете.  Возвращается только вместе с параметром ##marketSku##.  */
  marketModelName: Option[String] = None ,

  /* SKU на Маркете. */
  marketSku: Option[Long] = None ,

  /* Название товара с рекомендованной карточки на Маркете.  Может отсутствовать в ответе.  */
  marketSkuName: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : EnrichedMappingsOfferDTOData = {
    EnrichedMappingsOfferDTOData(
            name = name.getOrElse(""),
            shopSku = shopSku.getOrElse(""),
            category = category.getOrElse(""),
            vendor = vendor.getOrElse(""),
            vendorCode = vendorCode.getOrElse(""),
            description = description.getOrElse(""),
            id = id.getOrElse(""),
            feedId = feedId.getOrElse(0),
            barcodes = barcodes,
            urls = urls,
            pictures = pictures,
            manufacturer = manufacturer.getOrElse(""),
            manufacturerCountries = manufacturerCountries,
            minShipment = minShipment.getOrElse(0),
            transportUnitSize = transportUnitSize.getOrElse(0),
            quantumOfSupply = quantumOfSupply.getOrElse(0),
            deliveryDurationDays = deliveryDurationDays.getOrElse(0),
            boxCount = boxCount.getOrElse(0),
            customsCommodityCodes = customsCommodityCodes,
            weightDimensions = weightDimensions.map(_.asData).getOrElse(null),
            supplyScheduleDays = supplyScheduleDays,
            shelfLifeDays = shelfLifeDays.getOrElse(0),
            lifeTimeDays = lifeTimeDays.getOrElse(0),
            guaranteePeriodDays = guaranteePeriodDays.getOrElse(0),
            processingState = processingState.map(_.asData).getOrElse(null),
            availability = availability.getOrElse(null),
            shelfLife = shelfLife.map(_.asData).getOrElse(null),
            lifeTime = lifeTime.map(_.asData).getOrElse(null),
            guaranteePeriod = guaranteePeriod.map(_.asData).getOrElse(null),
            certificate = certificate.getOrElse(""),
            price = price.getOrElse(0),
            marketCategoryId = marketCategoryId.getOrElse(0),
            marketCategoryName = marketCategoryName.getOrElse(""),
            marketModelId = marketModelId.getOrElse(0),
            marketModelName = marketModelName.getOrElse(""),
            marketSku = marketSku.getOrElse(0),
            marketSkuName = marketSkuName.getOrElse("")
    )
  }

}

object EnrichedMappingsOfferDTO{

    given RW[EnrichedMappingsOfferDTO] = EnrichedMappingsOfferDTOData.readWriter.bimap[EnrichedMappingsOfferDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case name extends Fields("name")
            case shopSku extends Fields("shopSku")
            case category extends Fields("category")
            case vendor extends Fields("vendor")
            case vendorCode extends Fields("vendorCode")
            case description extends Fields("description")
            case id extends Fields("id")
            case feedId extends Fields("feedId")
            case barcodes extends Fields("barcodes")
            case urls extends Fields("urls")
            case pictures extends Fields("pictures")
            case manufacturer extends Fields("manufacturer")
            case manufacturerCountries extends Fields("manufacturerCountries")
            case minShipment extends Fields("minShipment")
            case transportUnitSize extends Fields("transportUnitSize")
            case quantumOfSupply extends Fields("quantumOfSupply")
            case deliveryDurationDays extends Fields("deliveryDurationDays")
            case boxCount extends Fields("boxCount")
            case customsCommodityCodes extends Fields("customsCommodityCodes")
            case weightDimensions extends Fields("weightDimensions")
            case supplyScheduleDays extends Fields("supplyScheduleDays")
            case shelfLifeDays extends Fields("shelfLifeDays")
            case lifeTimeDays extends Fields("lifeTimeDays")
            case guaranteePeriodDays extends Fields("guaranteePeriodDays")
            case processingState extends Fields("processingState")
            case availability extends Fields("availability")
            case shelfLife extends Fields("shelfLife")
            case lifeTime extends Fields("lifeTime")
            case guaranteePeriod extends Fields("guaranteePeriod")
            case certificate extends Fields("certificate")
            case price extends Fields("price")
            case marketCategoryId extends Fields("marketCategoryId")
            case marketCategoryName extends Fields("marketCategoryName")
            case marketModelId extends Fields("marketModelId")
            case marketModelName extends Fields("marketModelName")
            case marketSku extends Fields("marketSku")
            case marketSkuName extends Fields("marketSkuName")
    }


}

