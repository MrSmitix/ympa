/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.FeedbackFactorDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class FeedbackGradesDTO(
/* Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»). */
  average: Option[BigDecimal] = None ,

  /* Количество пользователей, считающих отзыв полезным. */
  agreeCount: Option[Long] = None ,

  /* Количество пользователей, считающих отзыв бесполезным. */
  rejectCount: Option[Long] = None ,

  /* Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор.  */
  factors: Seq[FeedbackFactorDTO]

  ) {

  def asJson: String = asData.asJson

  def asData : FeedbackGradesDTOData = {
    FeedbackGradesDTOData(
            average = average.getOrElse(0),
            agreeCount = agreeCount.getOrElse(0),
            rejectCount = rejectCount.getOrElse(0),
            factors = factors.map(_.asData)
    )
  }

}

object FeedbackGradesDTO{

    given RW[FeedbackGradesDTO] = FeedbackGradesDTOData.readWriter.bimap[FeedbackGradesDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case average extends Fields("average")
            case agreeCount extends Fields("agreeCount")
            case rejectCount extends Fields("rejectCount")
            case factors extends Fields("factors")
    }


}

