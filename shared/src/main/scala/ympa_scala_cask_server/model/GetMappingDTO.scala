/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class GetMappingDTO(
/* SKU на Маркете. */
  marketSku: Option[Long] = None ,

  /* Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
  marketSkuName: Option[String] = None ,

  /* Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
  marketModelId: Option[Long] = None ,

  /* Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке.  */
  marketModelName: Option[String] = None ,

  /* Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */
  marketCategoryId: Option[Long] = None ,

  /* Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара.  */
  marketCategoryName: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : GetMappingDTOData = {
    GetMappingDTOData(
            marketSku = marketSku.getOrElse(0),
            marketSkuName = marketSkuName.getOrElse(""),
            marketModelId = marketModelId.getOrElse(0),
            marketModelName = marketModelName.getOrElse(""),
            marketCategoryId = marketCategoryId.getOrElse(0),
            marketCategoryName = marketCategoryName.getOrElse("")
    )
  }

}

object GetMappingDTO{

    given RW[GetMappingDTO] = GetMappingDTOData.readWriter.bimap[GetMappingDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case marketSku extends Fields("marketSku")
            case marketSkuName extends Fields("marketSkuName")
            case marketModelId extends Fields("marketModelId")
            case marketModelName extends Fields("marketModelName")
            case marketCategoryId extends Fields("marketCategoryId")
            case marketCategoryName extends Fields("marketCategoryName")
    }


}

