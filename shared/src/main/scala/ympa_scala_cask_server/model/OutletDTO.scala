/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.OutletAddressDTO
import ympa_scala_cask_server.model.OutletDeliveryRuleDTO
import ympa_scala_cask_server.model.OutletType
import ympa_scala_cask_server.model.OutletVisibilityType
import ympa_scala_cask_server.model.OutletWorkingScheduleDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OutletDTO(
/* Название точки продаж.  */
  name: String,

    `type`: OutletType,

  /* Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.  */
  coords: Option[String] = None ,

  /* Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.  */
  isMain: Option[Boolean] = None ,

  /* Идентификатор точки продаж, присвоенный магазином. */
  shopOutletCode: Option[String] = None ,

    visibility: Option[OutletVisibilityType] = None ,

    address: OutletAddressDTO,

  /* Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.  */
  phones: Seq[String],

    workingSchedule: OutletWorkingScheduleDTO,

  /* Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.  */
  deliveryRules: Seq[OutletDeliveryRuleDTO] = Nil ,

  /* Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях. */
  storagePeriod: Option[Long] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OutletDTOData = {
    OutletDTOData(
            name = name,
            `type` = `type`,
            coords = coords.getOrElse(""),
            isMain = isMain.getOrElse(false),
            shopOutletCode = shopOutletCode.getOrElse(""),
            visibility = visibility.getOrElse(null),
            address = address,
            phones = phones,
            workingSchedule = workingSchedule,
            deliveryRules = deliveryRules.map(_.asData),
            storagePeriod = storagePeriod.getOrElse(0)
    )
  }

}

object OutletDTO{

    given RW[OutletDTO] = OutletDTOData.readWriter.bimap[OutletDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case name extends Fields("name")
            case `type` extends Fields("`type`")
            case coords extends Fields("coords")
            case isMain extends Fields("isMain")
            case shopOutletCode extends Fields("shopOutletCode")
            case visibility extends Fields("visibility")
            case address extends Fields("address")
            case phones extends Fields("phones")
            case workingSchedule extends Fields("workingSchedule")
            case deliveryRules extends Fields("deliveryRules")
            case storagePeriod extends Fields("storagePeriod")
    }


}

