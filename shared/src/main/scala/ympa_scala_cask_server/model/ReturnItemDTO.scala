/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.ReturnDecisionDTO
import ympa_scala_cask_server.model.ReturnInstanceDTO
import ympa_scala_cask_server.model.TrackDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class ReturnItemDTO(
/* SKU на Маркете. */
  marketSku: Option[Long] = None ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  shopSku: String,

  /* Количество единиц товара. */
  count: Long,

  /* Список решений по возврату. */
  decisions: Seq[ReturnDecisionDTO] = Nil ,

  /* Список логистических позиций возврата. */
  instances: Seq[ReturnInstanceDTO] = Nil ,

  /* Список трек-кодов для почтовых отправлений. */
  tracks: Seq[TrackDTO] = Nil 

  ) {

  def asJson: String = asData.asJson

  def asData : ReturnItemDTOData = {
    ReturnItemDTOData(
            marketSku = marketSku.getOrElse(0),
            shopSku = shopSku,
            count = count,
            decisions = decisions.map(_.asData),
            instances = instances.map(_.asData),
            tracks = tracks.map(_.asData)
    )
  }

}

object ReturnItemDTO{

    given RW[ReturnItemDTO] = ReturnItemDTOData.readWriter.bimap[ReturnItemDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case marketSku extends Fields("marketSku")
            case shopSku extends Fields("shopSku")
            case count extends Fields("count")
            case decisions extends Fields("decisions")
            case instances extends Fields("instances")
            case tracks extends Fields("tracks")
    }


}

