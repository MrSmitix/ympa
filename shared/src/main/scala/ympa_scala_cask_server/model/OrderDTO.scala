/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.CurrencyType
import ympa_scala_cask_server.model.OrderBuyerDTO
import ympa_scala_cask_server.model.OrderDeliveryDTO
import ympa_scala_cask_server.model.OrderItemDTO
import ympa_scala_cask_server.model.OrderPaymentMethodType
import ympa_scala_cask_server.model.OrderPaymentType
import ympa_scala_cask_server.model.OrderStatusType
import ympa_scala_cask_server.model.OrderSubsidyDTO
import ympa_scala_cask_server.model.OrderSubstatusType
import ympa_scala_cask_server.model.OrderTaxSystemType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OrderDTO(
/* Идентификатор заказа. */
  id: Option[Long] = None ,

    status: Option[OrderStatusType] = None ,

    substatus: Option[OrderSubstatusType] = None ,

    creationDate: Option[String] = None ,

    updatedAt: Option[String] = None ,

    currency: Option[CurrencyType] = None ,

  /* Платеж покупателя.  */
  itemsTotal: Option[BigDecimal] = None ,

  /* Стоимость доставки.  */
  deliveryTotal: Option[BigDecimal] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.  */
  buyerItemsTotal: Option[BigDecimal] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.  */
  buyerTotal: Option[BigDecimal] = None ,

  /* Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.  */
  buyerItemsTotalBeforeDiscount: Option[BigDecimal] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).  */
  buyerTotalBeforeDiscount: Option[BigDecimal] = None ,

    paymentType: Option[OrderPaymentType] = None ,

    paymentMethod: Option[OrderPaymentMethodType] = None ,

  /* Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */
  fake: Option[Boolean] = None ,

  /* Список товаров в заказе. */
  items: Seq[OrderItemDTO],

  /* Список субсидий по типам. */
  subsidies: Seq[OrderSubsidyDTO] = Nil ,

    delivery: Option[OrderDeliveryDTO] = None ,

    buyer: Option[OrderBuyerDTO] = None ,

  /* Комментарий к заказу. */
  notes: Option[String] = None ,

    taxSystem: Option[OrderTaxSystemType] = None ,

  /* **Только для модели DBS**  Запрошена ли отмена.  */
  cancelRequested: Option[Boolean] = None ,

    expiryDate: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OrderDTOData = {
    OrderDTOData(
            id = id.getOrElse(0),
            status = status.getOrElse(null),
            substatus = substatus.getOrElse(null),
            creationDate = creationDate.getOrElse(""),
            updatedAt = updatedAt.getOrElse(""),
            currency = currency.getOrElse(null),
            itemsTotal = itemsTotal.getOrElse(0),
            deliveryTotal = deliveryTotal.getOrElse(0),
            buyerItemsTotal = buyerItemsTotal.getOrElse(0),
            buyerTotal = buyerTotal.getOrElse(0),
            buyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount.getOrElse(0),
            buyerTotalBeforeDiscount = buyerTotalBeforeDiscount.getOrElse(0),
            paymentType = paymentType.getOrElse(null),
            paymentMethod = paymentMethod.getOrElse(null),
            fake = fake.getOrElse(false),
            items = items.map(_.asData),
            subsidies = subsidies.map(_.asData),
            delivery = delivery.map(_.asData).getOrElse(null),
            buyer = buyer.map(_.asData).getOrElse(null),
            notes = notes.getOrElse(""),
            taxSystem = taxSystem.getOrElse(null),
            cancelRequested = cancelRequested.getOrElse(false),
            expiryDate = expiryDate.getOrElse("")
    )
  }

}

object OrderDTO{

    given RW[OrderDTO] = OrderDTOData.readWriter.bimap[OrderDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case id extends Fields("id")
            case status extends Fields("status")
            case substatus extends Fields("substatus")
            case creationDate extends Fields("creationDate")
            case updatedAt extends Fields("updatedAt")
            case currency extends Fields("currency")
            case itemsTotal extends Fields("itemsTotal")
            case deliveryTotal extends Fields("deliveryTotal")
            case buyerItemsTotal extends Fields("buyerItemsTotal")
            case buyerTotal extends Fields("buyerTotal")
            case buyerItemsTotalBeforeDiscount extends Fields("buyerItemsTotalBeforeDiscount")
            case buyerTotalBeforeDiscount extends Fields("buyerTotalBeforeDiscount")
            case paymentType extends Fields("paymentType")
            case paymentMethod extends Fields("paymentMethod")
            case fake extends Fields("fake")
            case items extends Fields("items")
            case subsidies extends Fields("subsidies")
            case delivery extends Fields("delivery")
            case buyer extends Fields("buyer")
            case notes extends Fields("notes")
            case taxSystem extends Fields("taxSystem")
            case cancelRequested extends Fields("cancelRequested")
            case expiryDate extends Fields("expiryDate")
    }


}

