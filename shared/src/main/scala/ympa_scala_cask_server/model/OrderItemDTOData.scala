/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.OrderItemDetailDTO
import ympa_scala_cask_server.model.OrderItemInstanceDTO
import ympa_scala_cask_server.model.OrderItemInstanceType
import ympa_scala_cask_server.model.OrderItemPromoDTO
import ympa_scala_cask_server.model.OrderItemSubsidyDTO
import ympa_scala_cask_server.model.OrderVatType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OrderItemDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OrderItemDTOData(
/* Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.  */
  id: Long = 0 ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  offerId: String = "" ,

  /* Название товара. */
  offerName: String = "" ,

  /* Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`).  */
  price: BigDecimal = 0 ,

  /* Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.  */
  buyerPrice: BigDecimal = 0 ,

  /* Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам.  */
  buyerPriceBeforeDiscount: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.  */
  priceBeforeDiscount: BigDecimal = 0 ,

  /* Количество единиц товара. */
  count: Int = 0 ,

    vat: OrderVatType = null ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  shopSku: String = "" ,

  /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.  */
  subsidy: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.  */
  partnerWarehouseId: String = "" ,

  /* Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям. */
  promos: Seq[OrderItemPromoDTOData] = Nil ,

  /* Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует.  */
  instances: Seq[OrderItemInstanceDTOData] = Nil ,

  /* Информация об удалении товара из заказа.  */
  details: Seq[OrderItemDetailDTOData] = Nil ,

  /* Список субсидий по типам. */
  subsidies: Seq[OrderItemSubsidyDTOData] = Nil ,

  /* Список необходимых маркировок товара. */
  requiredInstanceTypes: Seq[OrderItemInstanceType] = Nil 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // offerId
        // validate against pattern '^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$'
        if (errors.isEmpty || !failFast) {
           val regex = """^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$"""
           if offerId == null || !regex.r.matches(offerId) then
              errors += ValidationError(path :+ OrderItemDTO.Fields.offerId, s"value '$offerId' doesn't match pattern $regex")
        }



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if offerId == null then 0 else offerId.length
            if (len < 1) {
               errors += ValidationError(path :+ OrderItemDTO.Fields.offerId, s"length $len is shorter than the min length 1")
            }
        }

        // validate max length 255
        if (errors.isEmpty || !failFast)  {
          val len = if offerId == null then 0 else offerId.length
            if (len < 255) {
               errors += ValidationError(path :+ OrderItemDTO.Fields.offerId, s"length $len is longer than the max length 255")
            }
        }


        







        

        // ==================
        // offerName






        







        

        // ==================
        // price






        







        

        // ==================
        // buyerPrice






        







        

        // ==================
        // buyerPriceBeforeDiscount






        







        

        // ==================
        // priceBeforeDiscount






        







        

        // ==================
        // count






        







        

        // ==================
        // vat






        







        

        // ==================
        // shopSku
        // validate against pattern '^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$'
        if (errors.isEmpty || !failFast) {
           val regex = """^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$"""
           if shopSku == null || !regex.r.matches(shopSku) then
              errors += ValidationError(path :+ OrderItemDTO.Fields.shopSku, s"value '$shopSku' doesn't match pattern $regex")
        }



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if shopSku == null then 0 else shopSku.length
            if (len < 1) {
               errors += ValidationError(path :+ OrderItemDTO.Fields.shopSku, s"length $len is shorter than the min length 1")
            }
        }

        // validate max length 255
        if (errors.isEmpty || !failFast)  {
          val len = if shopSku == null then 0 else shopSku.length
            if (len < 255) {
               errors += ValidationError(path :+ OrderItemDTO.Fields.shopSku, s"length $len is longer than the max length 255")
            }
        }


        







        

        // ==================
        // subsidy






        







        

        // ==================
        // partnerWarehouseId






        







        

        // ==================
        // promos






        







        
        if (errors.isEmpty || !failFast) {
            if (promos != null) {
                promos.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderItemDTO.Fields.promos :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // instances






        







        
        if (errors.isEmpty || !failFast) {
            if (instances != null) {
                instances.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderItemDTO.Fields.instances :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // details






        







        
        if (errors.isEmpty || !failFast) {
            if (details != null) {
                details.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderItemDTO.Fields.details :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // subsidies






        







        
        if (errors.isEmpty || !failFast) {
            if (subsidies != null) {
                subsidies.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderItemDTO.Fields.subsidies :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // requiredInstanceTypes






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OrderItemDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OrderItemDTO = {
    OrderItemDTO(
        id = Option(
        id
        )
        ,
        offerId = Option(
        offerId
        )
        ,
        offerName = Option(
        offerName
        )
        ,
        price = Option(
        price
        )
        ,
        buyerPrice = Option(
        buyerPrice
        )
        ,
        buyerPriceBeforeDiscount = Option(
        buyerPriceBeforeDiscount
        )
        ,
        priceBeforeDiscount = Option(
        priceBeforeDiscount
        )
        ,
        count = Option(
        count
        )
        ,
        vat = Option(
        vat
        )
        ,
        shopSku = Option(
        shopSku
        )
        ,
        subsidy = Option(
        subsidy
        )
        ,
        partnerWarehouseId = Option(
        partnerWarehouseId
        )
        ,
        promos = 
        promos
        
        .map(_.asModel),
        instances = 
        instances
        
        .map(_.asModel),
        details = 
        details
        
        .map(_.asModel),
        subsidies = 
        subsidies
        
        .map(_.asModel),
        requiredInstanceTypes = 
        requiredInstanceTypes
        
        
    )
  }
}

object OrderItemDTOData {

  given readWriter : RW[OrderItemDTOData] = macroRW

  def fromJsonString(jason : String) : OrderItemDTOData = try {
        read[OrderItemDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OrderItemDTOData] = try {
        read[List[OrderItemDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OrderItemDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OrderItemDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OrderItemDTOData] = try {
        read[Map[String, OrderItemDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OrderItemDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OrderItemDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

