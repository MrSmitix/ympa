/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.CurrencyType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OfferDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OfferDTOData(
/* Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.  */
  price: BigDecimal = 0 ,

  /* Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.  */
  feedId: Long = 0 ,

  /* Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.  */
  id: String = "" ,

  /* Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  */
  shopCategoryId: String = "" ,

  /* Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.  */
  marketCategoryId: Int = 0 ,

  /* Цена предложения без скидки. */
  preDiscountPrice: BigDecimal = 0 ,

  /* Скидка на предложение в процентах. */
  discount: Int = 0 ,

  /* Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.  */
  cutPrice: Boolean = false ,

  /* URL-адрес предложения на сайте магазина. */
  url: String = "" ,

  /* Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}  */
  modelId: Long,

  /* Наименование предложения. */
  name: String = "" ,

    currency: CurrencyType = null ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
  bid: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
  cbid: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.  */
  fee: BigDecimal = 0 ,

  /* Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.  */
  blocked: Boolean = false 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // price






        







        

        // ==================
        // feedId






        







        

        // ==================
        // id






        







        

        // ==================
        // shopCategoryId






        







        

        // ==================
        // marketCategoryId






        







        

        // ==================
        // preDiscountPrice






        







        

        // ==================
        // discount






        







        

        // ==================
        // cutPrice






        







        

        // ==================
        // url






        







        

        // ==================
        // modelId






        







        

        // ==================
        // name






        







        

        // ==================
        // currency






        







        

        // ==================
        // bid






        







        

        // ==================
        // cbid






        







        

        // ==================
        // fee






        







        

        // ==================
        // blocked






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OfferDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OfferDTO = {
    OfferDTO(
        price = Option(
        price
        )
        ,
        feedId = Option(
        feedId
        )
        ,
        id = Option(
        id
        )
        ,
        shopCategoryId = Option(
        shopCategoryId
        )
        ,
        marketCategoryId = Option(
        marketCategoryId
        )
        ,
        preDiscountPrice = Option(
        preDiscountPrice
        )
        ,
        discount = Option(
        discount
        )
        ,
        cutPrice = Option(
        cutPrice
        )
        ,
        url = Option(
        url
        )
        ,
        modelId = 
        modelId
        
        ,
        name = Option(
        name
        )
        ,
        currency = Option(
        currency
        )
        ,
        bid = Option(
        bid
        )
        ,
        cbid = Option(
        cbid
        )
        ,
        fee = Option(
        fee
        )
        ,
        blocked = Option(
        blocked
        )
        
    )
  }
}

object OfferDTOData {

  given readWriter : RW[OfferDTOData] = macroRW

  def fromJsonString(jason : String) : OfferDTOData = try {
        read[OfferDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OfferDTOData] = try {
        read[List[OfferDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OfferDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OfferDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OfferDTOData] = try {
        read[Map[String, OfferDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OfferDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OfferDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

