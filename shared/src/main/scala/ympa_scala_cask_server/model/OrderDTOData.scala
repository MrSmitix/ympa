/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.CurrencyType
import ympa_scala_cask_server.model.OrderBuyerDTO
import ympa_scala_cask_server.model.OrderDeliveryDTO
import ympa_scala_cask_server.model.OrderItemDTO
import ympa_scala_cask_server.model.OrderPaymentMethodType
import ympa_scala_cask_server.model.OrderPaymentType
import ympa_scala_cask_server.model.OrderStatusType
import ympa_scala_cask_server.model.OrderSubsidyDTO
import ympa_scala_cask_server.model.OrderSubstatusType
import ympa_scala_cask_server.model.OrderTaxSystemType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** OrderDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class OrderDTOData(
/* Идентификатор заказа. */
  id: Long = 0 ,

    status: OrderStatusType = null ,

    substatus: OrderSubstatusType = null ,

    creationDate: String = "" ,

    updatedAt: String = "" ,

    currency: CurrencyType = null ,

  /* Платеж покупателя.  */
  itemsTotal: BigDecimal = 0 ,

  /* Стоимость доставки.  */
  deliveryTotal: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.  */
  buyerItemsTotal: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.  */
  buyerTotal: BigDecimal = 0 ,

  /* Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.  */
  buyerItemsTotalBeforeDiscount: BigDecimal = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).  */
  buyerTotalBeforeDiscount: BigDecimal = 0 ,

    paymentType: OrderPaymentType = null ,

    paymentMethod: OrderPaymentMethodType = null ,

  /* Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.  */
  fake: Boolean = false ,

  /* Список товаров в заказе. */
  items: Seq[OrderItemDTOData],

  /* Список субсидий по типам. */
  subsidies: Seq[OrderSubsidyDTOData] = Nil ,

    delivery: OrderDeliveryDTOData = null ,

    buyer: OrderBuyerDTOData = null ,

  /* Комментарий к заказу. */
  notes: String = "" ,

    taxSystem: OrderTaxSystemType = null ,

  /* **Только для модели DBS**  Запрошена ли отмена.  */
  cancelRequested: Boolean = false ,

    expiryDate: String = "" 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // status






        







        

        // ==================
        // substatus






        







        

        // ==================
        // creationDate






        







        

        // ==================
        // updatedAt






        







        

        // ==================
        // currency






        







        

        // ==================
        // itemsTotal






        







        

        // ==================
        // deliveryTotal






        







        

        // ==================
        // buyerItemsTotal






        







        

        // ==================
        // buyerTotal






        







        

        // ==================
        // buyerItemsTotalBeforeDiscount






        







        

        // ==================
        // buyerTotalBeforeDiscount






        







        

        // ==================
        // paymentType






        







        

        // ==================
        // paymentMethod






        







        

        // ==================
        // fake






        







        

        // ==================
        // items






        
        if (errors.isEmpty || !failFast) {
            if (items == null) {
            errors += ValidationError(path :+ OrderDTO.Fields.items, "items is a required field and cannot be null")
            }
        }
        







        
        if (errors.isEmpty || !failFast) {
            if (items != null) {
                items.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderDTO.Fields.items :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // subsidies






        







        
        if (errors.isEmpty || !failFast) {
            if (subsidies != null) {
                subsidies.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ OrderDTO.Fields.subsidies :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // delivery






        







        
        // validating delivery
        if (errors.isEmpty || !failFast) {
            if delivery != null then errors ++= delivery.validationErrors(path :+ OrderDTO.Fields.delivery, failFast)
        }

        // ==================
        // buyer






        







        
        // validating buyer
        if (errors.isEmpty || !failFast) {
            if buyer != null then errors ++= buyer.validationErrors(path :+ OrderDTO.Fields.buyer, failFast)
        }

        // ==================
        // notes






        







        

        // ==================
        // taxSystem






        







        

        // ==================
        // cancelRequested






        







        

        // ==================
        // expiryDate






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[OrderDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : OrderDTO = {
    OrderDTO(
        id = Option(
        id
        )
        ,
        status = Option(
        status
        )
        ,
        substatus = Option(
        substatus
        )
        ,
        creationDate = Option(
        creationDate
        )
        ,
        updatedAt = Option(
        updatedAt
        )
        ,
        currency = Option(
        currency
        )
        ,
        itemsTotal = Option(
        itemsTotal
        )
        ,
        deliveryTotal = Option(
        deliveryTotal
        )
        ,
        buyerItemsTotal = Option(
        buyerItemsTotal
        )
        ,
        buyerTotal = Option(
        buyerTotal
        )
        ,
        buyerItemsTotalBeforeDiscount = Option(
        buyerItemsTotalBeforeDiscount
        )
        ,
        buyerTotalBeforeDiscount = Option(
        buyerTotalBeforeDiscount
        )
        ,
        paymentType = Option(
        paymentType
        )
        ,
        paymentMethod = Option(
        paymentMethod
        )
        ,
        fake = Option(
        fake
        )
        ,
        items = 
        items
        
        .map(_.asModel),
        subsidies = 
        subsidies
        
        .map(_.asModel),
        delivery = Option(
        delivery
        )
        .map(_.asModel),
        buyer = Option(
        buyer
        )
        .map(_.asModel),
        notes = Option(
        notes
        )
        ,
        taxSystem = Option(
        taxSystem
        )
        ,
        cancelRequested = Option(
        cancelRequested
        )
        ,
        expiryDate = Option(
        expiryDate
        )
        
    )
  }
}

object OrderDTOData {

  given readWriter : RW[OrderDTOData] = macroRW

  def fromJsonString(jason : String) : OrderDTOData = try {
        read[OrderDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[OrderDTOData] = try {
        read[List[OrderDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[OrderDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[OrderDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, OrderDTOData] = try {
        read[Map[String, OrderDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, OrderDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, OrderDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

