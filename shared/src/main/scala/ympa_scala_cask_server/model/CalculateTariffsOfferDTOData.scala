/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** CalculateTariffsOfferDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class CalculateTariffsOfferDTOData(
/* Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  */
  categoryId: Long,

  /* Цена на товар в рублях. */
  price: BigDecimal,

  /* Длина товара в сантиметрах. */
  length: BigDecimal,

  /* Ширина товара в сантиметрах. */
  width: BigDecimal,

  /* Высота товара в сантиметрах. */
  height: BigDecimal,

  /* Вес товара в килограммах. */
  weight: BigDecimal,

  /* Квант продажи — количество единиц товара в одном товарном предложении. */
  quantity: Int = 1 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // categoryId

        // validate against exclusive minimum 0
        if (errors.isEmpty || !failFast) {
            if !(categoryId > 0) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.categoryId, s"value '$categoryId' is not greater than the exclusive minimum value 0")
        }





        







        

        // ==================
        // price

        // validate against exclusive minimum 0
        if (errors.isEmpty || !failFast) {
            if !(price > 0) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.price, s"value '$price' is not greater than the exclusive minimum value 0")
        }





        
        if (errors.isEmpty || !failFast) {
            if (price == null) {
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.price, "price is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // length

        // validate against exclusive minimum 0
        if (errors.isEmpty || !failFast) {
            if !(length > 0) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.length, s"value '$length' is not greater than the exclusive minimum value 0")
        }





        
        if (errors.isEmpty || !failFast) {
            if (length == null) {
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.length, "length is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // width

        // validate against exclusive minimum 0
        if (errors.isEmpty || !failFast) {
            if !(width > 0) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.width, s"value '$width' is not greater than the exclusive minimum value 0")
        }





        
        if (errors.isEmpty || !failFast) {
            if (width == null) {
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.width, "width is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // height

        // validate against exclusive minimum 0
        if (errors.isEmpty || !failFast) {
            if !(height > 0) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.height, s"value '$height' is not greater than the exclusive minimum value 0")
        }





        
        if (errors.isEmpty || !failFast) {
            if (height == null) {
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.height, "height is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // weight

        // validate against exclusive minimum 0
        if (errors.isEmpty || !failFast) {
            if !(weight > 0) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.weight, s"value '$weight' is not greater than the exclusive minimum value 0")
        }





        
        if (errors.isEmpty || !failFast) {
            if (weight == null) {
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.weight, "weight is a required field and cannot be null")
            }
        }
        







        

        // ==================
        // quantity

        // validate against minimum 1
        if (errors.isEmpty || !failFast) {
            if !(quantity >= 1) then
            errors += ValidationError(path :+ CalculateTariffsOfferDTO.Fields.quantity, s"value '$quantity' is not greater than the minimum value 1")
        }





        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[CalculateTariffsOfferDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : CalculateTariffsOfferDTO = {
    CalculateTariffsOfferDTO(
        categoryId = 
        categoryId
        
        ,
        price = 
        price
        
        ,
        length = 
        length
        
        ,
        width = 
        width
        
        ,
        height = 
        height
        
        ,
        weight = 
        weight
        
        ,
        quantity = Option(
        quantity
        )
        
    )
  }
}

object CalculateTariffsOfferDTOData {

  given readWriter : RW[CalculateTariffsOfferDTOData] = macroRW

  def fromJsonString(jason : String) : CalculateTariffsOfferDTOData = try {
        read[CalculateTariffsOfferDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[CalculateTariffsOfferDTOData] = try {
        read[List[CalculateTariffsOfferDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[CalculateTariffsOfferDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[CalculateTariffsOfferDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, CalculateTariffsOfferDTOData] = try {
        read[Map[String, CalculateTariffsOfferDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, CalculateTariffsOfferDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, CalculateTariffsOfferDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

