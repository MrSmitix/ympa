/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.DayOfWeekType
import ympa_scala_cask_server.model.OfferAvailabilityStatusType
import ympa_scala_cask_server.model.OfferProcessingStateDTO
import ympa_scala_cask_server.model.OfferWeightDimensionsDTO
import ympa_scala_cask_server.model.TimePeriodDTO
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** MappingsOfferInfoDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class MappingsOfferInfoDTOData(
/* Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)  */
  name: String = "" ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  shopSku: String = "" ,

  /* Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  */
  category: String = "" ,

  /* Название бренда или производителя. Должно быть записано так, как его пишет сам бренд. */
  vendor: String = "" ,

  /* Артикул товара от производителя. */
  vendorCode: String = "" ,

  /* Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)  */
  description: String = "" ,

  /* Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)  */
  id: String = "" ,

  /* Идентификатор фида. */
  feedId: Long = 0 ,

  /* Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)   */
  barcodes: Seq[String] = Nil ,

  /* URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.  */
  urls: Seq[String] = Nil ,

  /* Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`.  */
  pictures: Seq[String] = Nil ,

  /* Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.  */
  manufacturer: String = "" ,

  /* Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.  */
  manufacturerCountries: Seq[String] = Nil ,

  /* Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.  */
  minShipment: Int = 0 ,

  /* Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.  */
  transportUnitSize: Int = 0 ,

  /* Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.  */
  quantumOfSupply: Int = 0 ,

  /* Срок, за который продавец поставляет товары на склад, в днях. */
  deliveryDurationDays: Int = 0 ,

  /* Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.  */
  boxCount: Int = 0 ,

  /* Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.  */
  customsCommodityCodes: Seq[String] = Nil ,

    weightDimensions: OfferWeightDimensionsDTOData = null ,

  /* Дни недели, в которые продавец поставляет товары на склад. */
  supplyScheduleDays: Seq[DayOfWeekType] = Nil ,

  /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.  */
  shelfLifeDays: Int = 0 ,

  /* {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.  */
  lifeTimeDays: Int = 0 ,

  /* Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.  */
  guaranteePeriodDays: Int = 0 ,

    processingState: OfferProcessingStateDTOData = null ,

    availability: OfferAvailabilityStatusType = null ,

    shelfLife: TimePeriodDTOData = null ,

    lifeTime: TimePeriodDTOData = null ,

    guaranteePeriod: TimePeriodDTOData = null ,

  /* Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)  */
  certificate: String = "" 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // name




        // validate max length 256
        if (errors.isEmpty || !failFast)  {
          val len = if name == null then 0 else name.length
            if (len < 256) {
               errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.name, s"length $len is longer than the max length 256")
            }
        }


        







        

        // ==================
        // shopSku
        // validate against pattern '^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$'
        if (errors.isEmpty || !failFast) {
           val regex = """^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$"""
           if shopSku == null || !regex.r.matches(shopSku) then
              errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.shopSku, s"value '$shopSku' doesn't match pattern $regex")
        }



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if shopSku == null then 0 else shopSku.length
            if (len < 1) {
               errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.shopSku, s"length $len is shorter than the min length 1")
            }
        }

        // validate max length 255
        if (errors.isEmpty || !failFast)  {
          val len = if shopSku == null then 0 else shopSku.length
            if (len < 255) {
               errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.shopSku, s"length $len is longer than the max length 255")
            }
        }


        







        

        // ==================
        // category






        







        

        // ==================
        // vendor






        







        

        // ==================
        // vendorCode






        







        

        // ==================
        // description




        // validate max length 6000
        if (errors.isEmpty || !failFast)  {
          val len = if description == null then 0 else description.length
            if (len < 6000) {
               errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.description, s"length $len is longer than the max length 6000")
            }
        }


        







        

        // ==================
        // id
        // validate against pattern '^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$'
        if (errors.isEmpty || !failFast) {
           val regex = """^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$"""
           if id == null || !regex.r.matches(id) then
              errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.id, s"value '$id' doesn't match pattern $regex")
        }



        // validate min length 1
        if (errors.isEmpty || !failFast)  {
          val len = if id == null then 0 else id.length
            if (len < 1) {
               errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.id, s"length $len is shorter than the min length 1")
            }
        }

        // validate max length 255
        if (errors.isEmpty || !failFast)  {
          val len = if id == null then 0 else id.length
            if (len < 255) {
               errors += ValidationError(path :+ MappingsOfferInfoDTO.Fields.id, s"length $len is longer than the max length 255")
            }
        }


        







        

        // ==================
        // feedId






        







        

        // ==================
        // barcodes






        







        

        // ==================
        // urls






        







        

        // ==================
        // pictures






        







        

        // ==================
        // manufacturer






        







        

        // ==================
        // manufacturerCountries






        







        

        // ==================
        // minShipment






        







        

        // ==================
        // transportUnitSize






        







        

        // ==================
        // quantumOfSupply






        







        

        // ==================
        // deliveryDurationDays






        







        

        // ==================
        // boxCount






        







        

        // ==================
        // customsCommodityCodes






        







        

        // ==================
        // weightDimensions






        







        
        // validating weightDimensions
        if (errors.isEmpty || !failFast) {
            if weightDimensions != null then errors ++= weightDimensions.validationErrors(path :+ MappingsOfferInfoDTO.Fields.weightDimensions, failFast)
        }

        // ==================
        // supplyScheduleDays






        







        

        // ==================
        // shelfLifeDays






        







        

        // ==================
        // lifeTimeDays






        







        

        // ==================
        // guaranteePeriodDays






        







        

        // ==================
        // processingState






        







        
        // validating processingState
        if (errors.isEmpty || !failFast) {
            if processingState != null then errors ++= processingState.validationErrors(path :+ MappingsOfferInfoDTO.Fields.processingState, failFast)
        }

        // ==================
        // availability






        







        

        // ==================
        // shelfLife






        







        
        // validating shelfLife
        if (errors.isEmpty || !failFast) {
            if shelfLife != null then errors ++= shelfLife.validationErrors(path :+ MappingsOfferInfoDTO.Fields.shelfLife, failFast)
        }

        // ==================
        // lifeTime






        







        
        // validating lifeTime
        if (errors.isEmpty || !failFast) {
            if lifeTime != null then errors ++= lifeTime.validationErrors(path :+ MappingsOfferInfoDTO.Fields.lifeTime, failFast)
        }

        // ==================
        // guaranteePeriod






        







        
        // validating guaranteePeriod
        if (errors.isEmpty || !failFast) {
            if guaranteePeriod != null then errors ++= guaranteePeriod.validationErrors(path :+ MappingsOfferInfoDTO.Fields.guaranteePeriod, failFast)
        }

        // ==================
        // certificate






        







        

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[MappingsOfferInfoDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : MappingsOfferInfoDTO = {
    MappingsOfferInfoDTO(
        name = Option(
        name
        )
        ,
        shopSku = Option(
        shopSku
        )
        ,
        category = Option(
        category
        )
        ,
        vendor = Option(
        vendor
        )
        ,
        vendorCode = Option(
        vendorCode
        )
        ,
        description = Option(
        description
        )
        ,
        id = Option(
        id
        )
        ,
        feedId = Option(
        feedId
        )
        ,
        barcodes = 
        barcodes
        
        ,
        urls = 
        urls
        
        ,
        pictures = 
        pictures
        
        ,
        manufacturer = Option(
        manufacturer
        )
        ,
        manufacturerCountries = 
        manufacturerCountries
        
        ,
        minShipment = Option(
        minShipment
        )
        ,
        transportUnitSize = Option(
        transportUnitSize
        )
        ,
        quantumOfSupply = Option(
        quantumOfSupply
        )
        ,
        deliveryDurationDays = Option(
        deliveryDurationDays
        )
        ,
        boxCount = Option(
        boxCount
        )
        ,
        customsCommodityCodes = 
        customsCommodityCodes
        
        ,
        weightDimensions = Option(
        weightDimensions
        )
        .map(_.asModel),
        supplyScheduleDays = 
        supplyScheduleDays
        
        ,
        shelfLifeDays = Option(
        shelfLifeDays
        )
        ,
        lifeTimeDays = Option(
        lifeTimeDays
        )
        ,
        guaranteePeriodDays = Option(
        guaranteePeriodDays
        )
        ,
        processingState = Option(
        processingState
        )
        .map(_.asModel),
        availability = Option(
        availability
        )
        ,
        shelfLife = Option(
        shelfLife
        )
        .map(_.asModel),
        lifeTime = Option(
        lifeTime
        )
        .map(_.asModel),
        guaranteePeriod = Option(
        guaranteePeriod
        )
        .map(_.asModel),
        certificate = Option(
        certificate
        )
        
    )
  }
}

object MappingsOfferInfoDTOData {

  given readWriter : RW[MappingsOfferInfoDTOData] = macroRW

  def fromJsonString(jason : String) : MappingsOfferInfoDTOData = try {
        read[MappingsOfferInfoDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[MappingsOfferInfoDTOData] = try {
        read[List[MappingsOfferInfoDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[MappingsOfferInfoDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[MappingsOfferInfoDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, MappingsOfferInfoDTOData] = try {
        read[Map[String, MappingsOfferInfoDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, MappingsOfferInfoDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, MappingsOfferInfoDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

