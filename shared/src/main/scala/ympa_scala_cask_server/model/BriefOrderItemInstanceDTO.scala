/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class BriefOrderItemInstanceDTO(
/* Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя `\\u001d`!  ✅ `01030410947874432155Qbag!\\u001d93Zjqw`  ❌ `01030410947874432155Qbag!\\\\u001d93Zjqw`  Косые черты и кавычки в других местах экранируйте по правилам JSON: `\\\\` и `\\\"`  {% endnote %}  */
  cis: Option[String] = None ,

  /* Уникальный идентификационный номер ювелирного изделия.  Представляет собой число из 16 цифр.  */
  uin: Option[String] = None ,

  /* Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации.  */
  rnpt: Option[String] = None ,

  /* Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации.  */
  gtd: Option[String] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : BriefOrderItemInstanceDTOData = {
    BriefOrderItemInstanceDTOData(
            cis = cis.getOrElse(""),
            uin = uin.getOrElse(""),
            rnpt = rnpt.getOrElse(""),
            gtd = gtd.getOrElse("")
    )
  }

}

object BriefOrderItemInstanceDTO{

    given RW[BriefOrderItemInstanceDTO] = BriefOrderItemInstanceDTOData.readWriter.bimap[BriefOrderItemInstanceDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case cis extends Fields("cis")
            case uin extends Fields("uin")
            case rnpt extends Fields("rnpt")
            case gtd extends Fields("gtd")
    }


}

