/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.FeedbackReactionStatusType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class GetGoodsFeedbackRequest(
/* Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.  */
  dateTimeFrom: Option[OffsetDateTime] = None ,

  /* Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.  */
  dateTimeTo: Option[OffsetDateTime] = None ,

    reactionStatus: Option[FeedbackReactionStatusType] = None ,

  /* Оценка товара. */
  ratingValues: Set[Int] = Set.empty ,

  /* Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).  */
  modelIds: Set[Long] = Set.empty ,

  /* Фильтр отзывов за баллы Плюса. */
  paid: Option[Boolean] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : GetGoodsFeedbackRequestData = {
    GetGoodsFeedbackRequestData(
            dateTimeFrom = dateTimeFrom.getOrElse(null),
            dateTimeTo = dateTimeTo.getOrElse(null),
            reactionStatus = reactionStatus.getOrElse(null),
            ratingValues = ratingValues,
            modelIds = modelIds,
            paid = paid.getOrElse(false)
    )
  }

}

object GetGoodsFeedbackRequest{

    given RW[GetGoodsFeedbackRequest] = GetGoodsFeedbackRequestData.readWriter.bimap[GetGoodsFeedbackRequest](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case dateTimeFrom extends Fields("dateTimeFrom")
            case dateTimeTo extends Fields("dateTimeTo")
            case reactionStatus extends Fields("reactionStatus")
            case ratingValues extends Fields("ratingValues")
            case modelIds extends Fields("modelIds")
            case paid extends Fields("paid")
    }


}

