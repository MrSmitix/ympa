/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import scala.math.BigDecimal
import ympa_scala_cask_server.model.CurrencyType
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OfferDTO(
/* Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.  */
  price: Option[BigDecimal] = None ,

  /* Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.  */
  feedId: Option[Long] = None ,

  /* Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.  */
  id: Option[String] = None ,

  /* Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.  */
  shopCategoryId: Option[String] = None ,

  /* Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.  */
  marketCategoryId: Option[Int] = None ,

  /* Цена предложения без скидки. */
  preDiscountPrice: Option[BigDecimal] = None ,

  /* Скидка на предложение в процентах. */
  discount: Option[Int] = None ,

  /* Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.  */
  cutPrice: Option[Boolean] = None ,

  /* URL-адрес предложения на сайте магазина. */
  url: Option[String] = None ,

  /* Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}  */
  modelId: Long,

  /* Наименование предложения. */
  name: Option[String] = None ,

    currency: Option[CurrencyType] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
  bid: Option[BigDecimal] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.  */
  cbid: Option[BigDecimal] = None ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.  */
  fee: Option[BigDecimal] = None ,

  /* Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.  */
  blocked: Option[Boolean] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OfferDTOData = {
    OfferDTOData(
            price = price.getOrElse(0),
            feedId = feedId.getOrElse(0),
            id = id.getOrElse(""),
            shopCategoryId = shopCategoryId.getOrElse(""),
            marketCategoryId = marketCategoryId.getOrElse(0),
            preDiscountPrice = preDiscountPrice.getOrElse(0),
            discount = discount.getOrElse(0),
            cutPrice = cutPrice.getOrElse(false),
            url = url.getOrElse(""),
            modelId = modelId,
            name = name.getOrElse(""),
            currency = currency.getOrElse(null),
            bid = bid.getOrElse(0),
            cbid = cbid.getOrElse(0),
            fee = fee.getOrElse(0),
            blocked = blocked.getOrElse(false)
    )
  }

}

object OfferDTO{

    given RW[OfferDTO] = OfferDTOData.readWriter.bimap[OfferDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case price extends Fields("price")
            case feedId extends Fields("feedId")
            case id extends Fields("id")
            case shopCategoryId extends Fields("shopCategoryId")
            case marketCategoryId extends Fields("marketCategoryId")
            case preDiscountPrice extends Fields("preDiscountPrice")
            case discount extends Fields("discount")
            case cutPrice extends Fields("cutPrice")
            case url extends Fields("url")
            case modelId extends Fields("modelId")
            case name extends Fields("name")
            case currency extends Fields("currency")
            case bid extends Fields("bid")
            case cbid extends Fields("cbid")
            case fee extends Fields("fee")
            case blocked extends Fields("blocked")
    }


}

