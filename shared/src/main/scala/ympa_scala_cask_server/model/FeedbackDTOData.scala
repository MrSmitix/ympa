/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using modelData.mustache
package ympa_scala_cask_server.model
import java.time.OffsetDateTime
import ympa_scala_cask_server.model.FeedbackAuthorDTO
import ympa_scala_cask_server.model.FeedbackCommentDTO
import ympa_scala_cask_server.model.FeedbackGradesDTO
import ympa_scala_cask_server.model.FeedbackOrderDTO
import ympa_scala_cask_server.model.FeedbackShopDTO
import ympa_scala_cask_server.model.FeedbackStateType
import scala.util.control.NonFatal
import scala.util.*

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

/** FeedbackDTOData a data transfer object, primarily for simple json serialisation.
  * It has no validation - there may be nulls, values out of range, etc
  */
case class FeedbackDTOData(
/* Идентификатор отзыва. */
  id: Long = 0 ,

  /* Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.  */
  createdAt: OffsetDateTime = null ,

  /* Комментарий автора отзыва. */
  text: String = "" ,

    state: FeedbackStateType = null ,

    author: FeedbackAuthorDTOData = null ,

  /* Достоинства магазина, описанные в отзыве. */
  pro: String = "" ,

  /* Недостатки магазина, описанные в отзыве. */
  contra: String = "" ,

  /* Переписка автора отзыва с магазином. */
  comments: Seq[FeedbackCommentDTOData],

    shop: FeedbackShopDTOData = null ,

  /* Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.  */
  resolved: Boolean = false ,

  /* {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет.  */
  verified: Boolean = false ,

  /* Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет.  */
  recommend: Boolean = false ,

    grades: FeedbackGradesDTOData = null ,

    order: FeedbackOrderDTOData = null 

  ) {

  def asJson: String = write(this)

  def validationErrors(path : Seq[Field], failFast : Boolean) : Seq[ValidationError] = {
    val errors = scala.collection.mutable.ListBuffer[ValidationError]()
        // ==================
        // id






        







        

        // ==================
        // createdAt






        







        

        // ==================
        // text






        







        

        // ==================
        // state






        







        

        // ==================
        // author






        







        
        // validating author
        if (errors.isEmpty || !failFast) {
            if author != null then errors ++= author.validationErrors(path :+ FeedbackDTO.Fields.author, failFast)
        }

        // ==================
        // pro






        







        

        // ==================
        // contra






        







        

        // ==================
        // comments






        
        if (errors.isEmpty || !failFast) {
            if (comments == null) {
            errors += ValidationError(path :+ FeedbackDTO.Fields.comments, "comments is a required field and cannot be null")
            }
        }
        







        
        if (errors.isEmpty || !failFast) {
            if (comments != null) {
                comments.zipWithIndex.foreach {
                    case (value, i) if errors.isEmpty || !failFast =>
                      errors ++= value.validationErrors(
                        path :+ FeedbackDTO.Fields.comments :+ Field(i.toString),
                        failFast)
                    case (value, i) =>
                }
            }
        }
        

        // ==================
        // shop






        







        
        // validating shop
        if (errors.isEmpty || !failFast) {
            if shop != null then errors ++= shop.validationErrors(path :+ FeedbackDTO.Fields.shop, failFast)
        }

        // ==================
        // resolved






        







        

        // ==================
        // verified






        







        

        // ==================
        // recommend






        







        

        // ==================
        // grades






        







        
        // validating grades
        if (errors.isEmpty || !failFast) {
            if grades != null then errors ++= grades.validationErrors(path :+ FeedbackDTO.Fields.grades, failFast)
        }

        // ==================
        // order






        







        
        // validating order
        if (errors.isEmpty || !failFast) {
            if order != null then errors ++= order.validationErrors(path :+ FeedbackDTO.Fields.order, failFast)
        }

    errors.toSeq
  }

  def validated(failFast : Boolean = false) : scala.util.Try[FeedbackDTO] = {
    validationErrors(Vector(), failFast) match {
      case Seq() => Success(asModel)
      case first +: theRest => Failure(ValidationErrors(first, theRest))
    }
  }

  /** use 'validated' to check validation */
  def asModel : FeedbackDTO = {
    FeedbackDTO(
        id = Option(
        id
        )
        ,
        createdAt = Option(
        createdAt
        )
        ,
        text = Option(
        text
        )
        ,
        state = Option(
        state
        )
        ,
        author = Option(
        author
        )
        .map(_.asModel),
        pro = Option(
        pro
        )
        ,
        contra = Option(
        contra
        )
        ,
        comments = 
        comments
        
        .map(_.asModel),
        shop = Option(
        shop
        )
        .map(_.asModel),
        resolved = Option(
        resolved
        )
        ,
        verified = Option(
        verified
        )
        ,
        recommend = Option(
        recommend
        )
        ,
        grades = Option(
        grades
        )
        .map(_.asModel),
        order = Option(
        order
        )
        .map(_.asModel)
    )
  }
}

object FeedbackDTOData {

  given readWriter : RW[FeedbackDTOData] = macroRW

  def fromJsonString(jason : String) : FeedbackDTOData = try {
        read[FeedbackDTOData](jason)
     } catch {
          case NonFatal(e) => sys.error(s"Error parsing json '$jason': $e")
     }

  def manyFromJsonString(jason : String) : Seq[FeedbackDTOData] = try {
        read[List[FeedbackDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as list: $e")
    }

  def manyFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Seq[FeedbackDTO]] = {
      Try(manyFromJsonString(jason)).flatMap { list =>
        list.zipWithIndex.foldLeft(Try(Vector[FeedbackDTO]())) {
          case (Success(list), (next, i)) => 
            next.validated(failFast) match {
              case Success(ok) => Success(list :+ ok)
              case Failure(err) => Failure(new Exception(s"Validation error on element $i: ${err.getMessage}", err))
            }
          case (fail, _)  => fail
        }
      }
    }

  def mapFromJsonString(jason : String) : Map[String, FeedbackDTOData] = try {
        read[Map[String, FeedbackDTOData]](jason)
    } catch {
        case NonFatal(e) => sys.error(s"Error parsing json '$jason' as map: $e")
    }


  def mapFromJsonStringValidated(jason : String, failFast : Boolean = false) : Try[Map[String, FeedbackDTO]] = {
     Try(mapFromJsonString(jason)).flatMap { map =>
       map.foldLeft(Try(Map[String, FeedbackDTO]())) {
         case (Success(map), (key, next)) =>
           next.validated(failFast) match {
             case Success(ok) => Success(map.updated(key, ok))
             case Failure(err) => Failure(new Exception(s"Validation error on element $key: ${err.getMessage}", err))
           }
         case (fail, _) => fail
       }
     }
  }
}

