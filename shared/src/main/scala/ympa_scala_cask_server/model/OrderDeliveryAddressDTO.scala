/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * OpenAPI spec version: LATEST
 *
 * Contact: team@openapitools.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 *
 * https://openapi-generator.tech
 */

// this model was generated using model.mustache
package ympa_scala_cask_server.model
import ympa_scala_cask_server.model.GpsDTO
import scala.util.control.NonFatal

// see https://com-lihaoyi.github.io/upickle/
import upickle.default.{ReadWriter => RW, macroRW}
import upickle.default.*

case class OrderDeliveryAddressDTO(
/* Страна.  Обязательный параметр.  */
  country: Option[String] = None ,

  /* Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`).  */
  postcode: Option[String] = None ,

  /* Город или населенный пункт.  Обязательный параметр.  */
  city: Option[String] = None ,

  /* Район. */
  district: Option[String] = None ,

  /* Станция метро. */
  subway: Option[String] = None ,

  /* Улица.  Обязательный параметр.  */
  street: Option[String] = None ,

  /* Дом или владение.  Обязательный параметр.  */
  house: Option[String] = None ,

  /* Корпус или строение. */
  block: Option[String] = None ,

  /* Подъезд. */
  entrance: Option[String] = None ,

  /* Код домофона. */
  entryphone: Option[String] = None ,

  /* Этаж. */
  floor: Option[String] = None ,

  /* Квартира или офис. */
  apartment: Option[String] = None ,

  /* Телефон получателя заказа.  Обязательный параметр.  */
  phone: Option[String] = None ,

  /* Фамилия, имя и отчество получателя заказа.  Обязательный параметр.  */
  recipient: Option[String] = None ,

    gps: Option[GpsDTO] = None 

  ) {

  def asJson: String = asData.asJson

  def asData : OrderDeliveryAddressDTOData = {
    OrderDeliveryAddressDTOData(
            country = country.getOrElse(""),
            postcode = postcode.getOrElse(""),
            city = city.getOrElse(""),
            district = district.getOrElse(""),
            subway = subway.getOrElse(""),
            street = street.getOrElse(""),
            house = house.getOrElse(""),
            block = block.getOrElse(""),
            entrance = entrance.getOrElse(""),
            entryphone = entryphone.getOrElse(""),
            floor = floor.getOrElse(""),
            apartment = apartment.getOrElse(""),
            phone = phone.getOrElse(""),
            recipient = recipient.getOrElse(""),
            gps = gps.map(_.asData).getOrElse(null)
    )
  }

}

object OrderDeliveryAddressDTO{

    given RW[OrderDeliveryAddressDTO] = OrderDeliveryAddressDTOData.readWriter.bimap[OrderDeliveryAddressDTO](_.asData, _.asModel)

    enum Fields(fieldName : String) extends Field(fieldName) {
            case country extends Fields("country")
            case postcode extends Fields("postcode")
            case city extends Fields("city")
            case district extends Fields("district")
            case subway extends Fields("subway")
            case street extends Fields("street")
            case house extends Fields("house")
            case block extends Fields("block")
            case entrance extends Fields("entrance")
            case entryphone extends Fields("entryphone")
            case floor extends Fields("floor")
            case apartment extends Fields("apartment")
            case phone extends Fields("phone")
            case recipient extends Fields("recipient")
            case gps extends Fields("gps")
    }


}

