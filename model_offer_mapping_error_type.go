/*
Партнерский API Маркета

API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

API version: LATEST
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ympa_go_client

import (
	"encoding/json"
	"fmt"
)

// OfferMappingErrorType Типы ошибок:  * `UNKNOWN_CATEGORY` — указана неизвестная категория. * `CATEGORY_MISMATCH` — указана категория, которая не совпадает с категорией товара. * `EMPTY_MARKET_CATEGORY` — не указана категория Маркета при передаче характеристик категории. * `UNKNOWN_PARAMETER` — передана характеристика, которой нет среди характеристик категории. * `UNEXPECTED_BOOLEAN_VALUE` — вместо boolean-значения передано что-то другое. * `NUMBER_FORMAT` — передана строка, не обозначающая число, вместо числа. * `VALUE_BLANK` — передано пустое значение. * `INVALID_UNIT_ID` — передана единица измерения, недопустимая для характеристики. * `INVALID_GROUP_ID_LENGTH` — в названии превышено допустимое значение символов — 255. * `INVALID_GROUP_ID_CHARACTERS` — переданы [недопустимые символы](*ascii-code). * `INVALID_PICKER_URL` — передана ссылка на изображение для миниатюры, которой нет в переданных ссылках на изображение товара. 
type OfferMappingErrorType string

// List of OfferMappingErrorType
const (
	UNKNOWN_CATEGORY OfferMappingErrorType = "UNKNOWN_CATEGORY"
	CATEGORY_MISMATCH OfferMappingErrorType = "CATEGORY_MISMATCH"
	EMPTY_MARKET_CATEGORY OfferMappingErrorType = "EMPTY_MARKET_CATEGORY"
	UNKNOWN_PARAMETER OfferMappingErrorType = "UNKNOWN_PARAMETER"
	UNEXPECTED_BOOLEAN_VALUE OfferMappingErrorType = "UNEXPECTED_BOOLEAN_VALUE"
	NUMBER_FORMAT OfferMappingErrorType = "NUMBER_FORMAT"
	VALUE_BLANK OfferMappingErrorType = "VALUE_BLANK"
	INVALID_UNIT_ID OfferMappingErrorType = "INVALID_UNIT_ID"
	INVALID_GROUP_ID_LENGTH OfferMappingErrorType = "INVALID_GROUP_ID_LENGTH"
	INVALID_GROUP_ID_CHARACTERS OfferMappingErrorType = "INVALID_GROUP_ID_CHARACTERS"
	INVALID_PICKER_URL OfferMappingErrorType = "INVALID_PICKER_URL"
)

// All allowed values of OfferMappingErrorType enum
var AllowedOfferMappingErrorTypeEnumValues = []OfferMappingErrorType{
	"UNKNOWN_CATEGORY",
	"CATEGORY_MISMATCH",
	"EMPTY_MARKET_CATEGORY",
	"UNKNOWN_PARAMETER",
	"UNEXPECTED_BOOLEAN_VALUE",
	"NUMBER_FORMAT",
	"VALUE_BLANK",
	"INVALID_UNIT_ID",
	"INVALID_GROUP_ID_LENGTH",
	"INVALID_GROUP_ID_CHARACTERS",
	"INVALID_PICKER_URL",
}

func (v *OfferMappingErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OfferMappingErrorType(value)
	for _, existing := range AllowedOfferMappingErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OfferMappingErrorType", value)
}

// NewOfferMappingErrorTypeFromValue returns a pointer to a valid OfferMappingErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferMappingErrorTypeFromValue(v string) (*OfferMappingErrorType, error) {
	ev := OfferMappingErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OfferMappingErrorType: valid values are %v", v, AllowedOfferMappingErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferMappingErrorType) IsValid() bool {
	for _, existing := range AllowedOfferMappingErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OfferMappingErrorType value
func (v OfferMappingErrorType) Ptr() *OfferMappingErrorType {
	return &v
}

type NullableOfferMappingErrorType struct {
	value *OfferMappingErrorType
	isSet bool
}

func (v NullableOfferMappingErrorType) Get() *OfferMappingErrorType {
	return v.value
}

func (v *NullableOfferMappingErrorType) Set(val *OfferMappingErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableOfferMappingErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableOfferMappingErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOfferMappingErrorType(val *OfferMappingErrorType) *NullableOfferMappingErrorType {
	return &NullableOfferMappingErrorType{value: val, isSet: true}
}

func (v NullableOfferMappingErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOfferMappingErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

