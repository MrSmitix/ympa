/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BriefOrderItemInstanceDTO } from './BriefOrderItemInstanceDTO';
import {
    BriefOrderItemInstanceDTOFromJSON,
    BriefOrderItemInstanceDTOFromJSONTyped,
    BriefOrderItemInstanceDTOToJSON,
} from './BriefOrderItemInstanceDTO';

/**
 * Список товаров в заказе.
 * 
 * Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.
 * 
 * Обязательный параметр.
 * 
 * @export
 * @interface OrderItemModificationDTO
 */
export interface OrderItemModificationDTO {
    /**
     * Идентификатор товара в рамках заказа.
     * 
     * Получить идентификатор можно с помощью ресурсов [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).
     * 
     * Обязательный параметр.
     * 
     * @type {number}
     * @memberof OrderItemModificationDTO
     */
    id: number;
    /**
     * Новое количество товара.
     * @type {number}
     * @memberof OrderItemModificationDTO
     */
    count: number;
    /**
     * Информация о маркировке единиц товара.
     * 
     * Передавайте в запросе все единицы товара, который подлежит маркировке.
     * 
     * Обязательный параметр, если в заказе есть товары, подлежащие маркировке [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     * 
     * @type {Array<BriefOrderItemInstanceDTO>}
     * @memberof OrderItemModificationDTO
     */
    instances?: Array<BriefOrderItemInstanceDTO> | null;
}

/**
 * Check if a given object implements the OrderItemModificationDTO interface.
 */
export function instanceOfOrderItemModificationDTO(value: object): value is OrderItemModificationDTO {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('count' in value) || value['count'] === undefined) return false;
    return true;
}

export function OrderItemModificationDTOFromJSON(json: any): OrderItemModificationDTO {
    return OrderItemModificationDTOFromJSONTyped(json, false);
}

export function OrderItemModificationDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderItemModificationDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'count': json['count'],
        'instances': json['instances'] == null ? undefined : ((json['instances'] as Array<any>).map(BriefOrderItemInstanceDTOFromJSON)),
    };
}

export function OrderItemModificationDTOToJSON(value?: OrderItemModificationDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'count': value['count'],
        'instances': value['instances'] == null ? undefined : ((value['instances'] as Array<any>).map(BriefOrderItemInstanceDTOToJSON)),
    };
}

