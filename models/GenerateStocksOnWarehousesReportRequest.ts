/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Данные, необходимые для генерации отчета.
 * 
 * @export
 * @interface GenerateStocksOnWarehousesReportRequest
 */
export interface GenerateStocksOnWarehousesReportRequest {
    /**
     * Идентификатор магазина.
     * @type {number}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    campaignId: number;
    /**
     * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     * @type {Array<number>}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    warehouseIds?: Array<number> | null;
    /**
     * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
     * @type {Date}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    reportDate?: Date;
    /**
     * Фильтр по категориям на Маркете (кроме модели FBY).
     * @type {Array<number>}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    categoryIds?: Array<number> | null;
    /**
     * Фильтр по наличию остатков (кроме модели FBY).
     * @type {boolean}
     * @memberof GenerateStocksOnWarehousesReportRequest
     */
    hasStocks?: boolean;
}

/**
 * Check if a given object implements the GenerateStocksOnWarehousesReportRequest interface.
 */
export function instanceOfGenerateStocksOnWarehousesReportRequest(value: object): value is GenerateStocksOnWarehousesReportRequest {
    if (!('campaignId' in value) || value['campaignId'] === undefined) return false;
    return true;
}

export function GenerateStocksOnWarehousesReportRequestFromJSON(json: any): GenerateStocksOnWarehousesReportRequest {
    return GenerateStocksOnWarehousesReportRequestFromJSONTyped(json, false);
}

export function GenerateStocksOnWarehousesReportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerateStocksOnWarehousesReportRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'campaignId': json['campaignId'],
        'warehouseIds': json['warehouseIds'] == null ? undefined : json['warehouseIds'],
        'reportDate': json['reportDate'] == null ? undefined : (new Date(json['reportDate'])),
        'categoryIds': json['categoryIds'] == null ? undefined : json['categoryIds'],
        'hasStocks': json['hasStocks'] == null ? undefined : json['hasStocks'],
    };
}

export function GenerateStocksOnWarehousesReportRequestToJSON(value?: GenerateStocksOnWarehousesReportRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'campaignId': value['campaignId'],
        'warehouseIds': value['warehouseIds'],
        'reportDate': value['reportDate'] == null ? undefined : ((value['reportDate']).toISOString().substring(0,10)),
        'categoryIds': value['categoryIds'],
        'hasStocks': value['hasStocks'],
    };
}

