/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GoodsFeedbackCommentStatusType } from './GoodsFeedbackCommentStatusType';
import {
    GoodsFeedbackCommentStatusTypeFromJSON,
    GoodsFeedbackCommentStatusTypeFromJSONTyped,
    GoodsFeedbackCommentStatusTypeToJSON,
} from './GoodsFeedbackCommentStatusType';
import type { GoodsFeedbackCommentAuthorDTO } from './GoodsFeedbackCommentAuthorDTO';
import {
    GoodsFeedbackCommentAuthorDTOFromJSON,
    GoodsFeedbackCommentAuthorDTOFromJSONTyped,
    GoodsFeedbackCommentAuthorDTOToJSON,
} from './GoodsFeedbackCommentAuthorDTO';

/**
 * Комментарий к отзыву.
 * @export
 * @interface GoodsFeedbackCommentDTO
 */
export interface GoodsFeedbackCommentDTO {
    /**
     * Идентификатор комментария к отзыву.
     * 
     * @type {number}
     * @memberof GoodsFeedbackCommentDTO
     */
    id: number;
    /**
     * Текст комментария.
     * @type {string}
     * @memberof GoodsFeedbackCommentDTO
     */
    text: string;
    /**
     * Может ли продавец изменять комментарий или удалять его.
     * @type {boolean}
     * @memberof GoodsFeedbackCommentDTO
     */
    canModify?: boolean;
    /**
     * Идентификатор комментария к отзыву.
     * 
     * @type {number}
     * @memberof GoodsFeedbackCommentDTO
     */
    parentId?: number;
    /**
     * 
     * @type {GoodsFeedbackCommentAuthorDTO}
     * @memberof GoodsFeedbackCommentDTO
     */
    author: GoodsFeedbackCommentAuthorDTO;
    /**
     * 
     * @type {GoodsFeedbackCommentStatusType}
     * @memberof GoodsFeedbackCommentDTO
     */
    status: GoodsFeedbackCommentStatusType;
}



/**
 * Check if a given object implements the GoodsFeedbackCommentDTO interface.
 */
export function instanceOfGoodsFeedbackCommentDTO(value: object): value is GoodsFeedbackCommentDTO {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function GoodsFeedbackCommentDTOFromJSON(json: any): GoodsFeedbackCommentDTO {
    return GoodsFeedbackCommentDTOFromJSONTyped(json, false);
}

export function GoodsFeedbackCommentDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoodsFeedbackCommentDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'text': json['text'],
        'canModify': json['canModify'] == null ? undefined : json['canModify'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'author': GoodsFeedbackCommentAuthorDTOFromJSON(json['author']),
        'status': GoodsFeedbackCommentStatusTypeFromJSON(json['status']),
    };
}

export function GoodsFeedbackCommentDTOToJSON(value?: GoodsFeedbackCommentDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'text': value['text'],
        'canModify': value['canModify'],
        'parentId': value['parentId'],
        'author': GoodsFeedbackCommentAuthorDTOToJSON(value['author']),
        'status': GoodsFeedbackCommentStatusTypeToJSON(value['status']),
    };
}

