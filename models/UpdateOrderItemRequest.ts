/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderItemModificationDTO } from './OrderItemModificationDTO';
import {
    OrderItemModificationDTOFromJSON,
    OrderItemModificationDTOFromJSONTyped,
    OrderItemModificationDTOToJSON,
} from './OrderItemModificationDTO';
import type { OrderItemsModificationRequestReasonType } from './OrderItemsModificationRequestReasonType';
import {
    OrderItemsModificationRequestReasonTypeFromJSON,
    OrderItemsModificationRequestReasonTypeFromJSONTyped,
    OrderItemsModificationRequestReasonTypeToJSON,
} from './OrderItemsModificationRequestReasonType';

/**
 * Запрос на обновление состава заказа.
 * @export
 * @interface UpdateOrderItemRequest
 */
export interface UpdateOrderItemRequest {
    /**
     * Список товаров в заказе.
     * 
     * Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.
     * 
     * Обязательный параметр.
     * 
     * @type {Array<OrderItemModificationDTO>}
     * @memberof UpdateOrderItemRequest
     */
    items: Array<OrderItemModificationDTO>;
    /**
     * 
     * @type {OrderItemsModificationRequestReasonType}
     * @memberof UpdateOrderItemRequest
     */
    reason?: OrderItemsModificationRequestReasonType;
}



/**
 * Check if a given object implements the UpdateOrderItemRequest interface.
 */
export function instanceOfUpdateOrderItemRequest(value: object): value is UpdateOrderItemRequest {
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function UpdateOrderItemRequestFromJSON(json: any): UpdateOrderItemRequest {
    return UpdateOrderItemRequestFromJSONTyped(json, false);
}

export function UpdateOrderItemRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateOrderItemRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(OrderItemModificationDTOFromJSON)),
        'reason': json['reason'] == null ? undefined : OrderItemsModificationRequestReasonTypeFromJSON(json['reason']),
    };
}

export function UpdateOrderItemRequestToJSON(value?: UpdateOrderItemRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'items': ((value['items'] as Array<any>).map(OrderItemModificationDTOToJSON)),
        'reason': OrderItemsModificationRequestReasonTypeToJSON(value['reason']),
    };
}

