/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeedDownloadDTO } from './FeedDownloadDTO';
import {
    FeedDownloadDTOFromJSON,
    FeedDownloadDTOFromJSONTyped,
    FeedDownloadDTOToJSON,
} from './FeedDownloadDTO';
import type { FeedContentDTO } from './FeedContentDTO';
import {
    FeedContentDTOFromJSON,
    FeedContentDTOFromJSONTyped,
    FeedContentDTOToJSON,
} from './FeedContentDTO';
import type { FeedPublicationDTO } from './FeedPublicationDTO';
import {
    FeedPublicationDTOFromJSON,
    FeedPublicationDTOFromJSONTyped,
    FeedPublicationDTOToJSON,
} from './FeedPublicationDTO';
import type { FeedPlacementDTO } from './FeedPlacementDTO';
import {
    FeedPlacementDTOFromJSON,
    FeedPlacementDTOFromJSONTyped,
    FeedPlacementDTOToJSON,
} from './FeedPlacementDTO';

/**
 * Информация о прайс-листе.
 * @export
 * @interface FeedDTO
 */
export interface FeedDTO {
    /**
     * Идентификатор прайс-листа.
     * @type {number}
     * @memberof FeedDTO
     */
    id?: number;
    /**
     * Логин для авторизации при скачивании прайс-листа.
     * Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.
     * 
     * @type {string}
     * @memberof FeedDTO
     */
    login?: string;
    /**
     * Имя файла, содержащего прайс-лист.
     * Параметр выводится при размещении прайс-листа на сервере Маркета.
     * 
     * @type {string}
     * @memberof FeedDTO
     */
    name?: string;
    /**
     * Пароль для авторизации при скачивании прайс-листа.
     * Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.
     * 
     * @type {string}
     * @memberof FeedDTO
     */
    password?: string;
    /**
     * Дата загрузки прайс-листа на Маркет.
     * 
     * Формат даты: `ДД-ММ-ГГГГ`.
     * 
     * Параметр выводится при размещении прайс-листа на сервере Маркета.
     * 
     * @type {Date}
     * @memberof FeedDTO
     */
    uploadDate?: Date;
    /**
     * URL прайс-листа.
     * Параметр выводится при размещении прайс-листа на сайте магазина.
     * 
     * @type {string}
     * @memberof FeedDTO
     */
    url?: string;
    /**
     * 
     * @type {FeedContentDTO}
     * @memberof FeedDTO
     */
    content?: FeedContentDTO;
    /**
     * 
     * @type {FeedDownloadDTO}
     * @memberof FeedDTO
     */
    download?: FeedDownloadDTO;
    /**
     * 
     * @type {FeedPlacementDTO}
     * @memberof FeedDTO
     */
    placement?: FeedPlacementDTO;
    /**
     * 
     * @type {FeedPublicationDTO}
     * @memberof FeedDTO
     */
    publication?: FeedPublicationDTO;
}

/**
 * Check if a given object implements the FeedDTO interface.
 */
export function instanceOfFeedDTO(value: object): value is FeedDTO {
    return true;
}

export function FeedDTOFromJSON(json: any): FeedDTO {
    return FeedDTOFromJSONTyped(json, false);
}

export function FeedDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'login': json['login'] == null ? undefined : json['login'],
        'name': json['name'] == null ? undefined : json['name'],
        'password': json['password'] == null ? undefined : json['password'],
        'uploadDate': json['uploadDate'] == null ? undefined : (new Date(json['uploadDate'])),
        'url': json['url'] == null ? undefined : json['url'],
        'content': json['content'] == null ? undefined : FeedContentDTOFromJSON(json['content']),
        'download': json['download'] == null ? undefined : FeedDownloadDTOFromJSON(json['download']),
        'placement': json['placement'] == null ? undefined : FeedPlacementDTOFromJSON(json['placement']),
        'publication': json['publication'] == null ? undefined : FeedPublicationDTOFromJSON(json['publication']),
    };
}

export function FeedDTOToJSON(value?: FeedDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'login': value['login'],
        'name': value['name'],
        'password': value['password'],
        'uploadDate': value['uploadDate'] == null ? undefined : ((value['uploadDate']).toISOString()),
        'url': value['url'],
        'content': FeedContentDTOToJSON(value['content']),
        'download': FeedDownloadDTOToJSON(value['download']),
        'placement': FeedPlacementDTOToJSON(value['placement']),
        'publication': FeedPublicationDTOToJSON(value['publication']),
    };
}

