/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OutletAddressDTO } from './OutletAddressDTO';
import {
    OutletAddressDTOFromJSON,
    OutletAddressDTOFromJSONTyped,
    OutletAddressDTOToJSON,
} from './OutletAddressDTO';
import type { OutletDeliveryRuleDTO } from './OutletDeliveryRuleDTO';
import {
    OutletDeliveryRuleDTOFromJSON,
    OutletDeliveryRuleDTOFromJSONTyped,
    OutletDeliveryRuleDTOToJSON,
} from './OutletDeliveryRuleDTO';
import type { OutletType } from './OutletType';
import {
    OutletTypeFromJSON,
    OutletTypeFromJSONTyped,
    OutletTypeToJSON,
} from './OutletType';
import type { OutletWorkingScheduleDTO } from './OutletWorkingScheduleDTO';
import {
    OutletWorkingScheduleDTOFromJSON,
    OutletWorkingScheduleDTOFromJSONTyped,
    OutletWorkingScheduleDTOToJSON,
} from './OutletWorkingScheduleDTO';
import type { OutletVisibilityType } from './OutletVisibilityType';
import {
    OutletVisibilityTypeFromJSON,
    OutletVisibilityTypeFromJSONTyped,
    OutletVisibilityTypeToJSON,
} from './OutletVisibilityType';

/**
 * Информация о точке продаж.
 * @export
 * @interface OutletDTO
 */
export interface OutletDTO {
    /**
     * Название точки продаж.
     * 
     * @type {string}
     * @memberof OutletDTO
     */
    name: string;
    /**
     * 
     * @type {OutletType}
     * @memberof OutletDTO
     */
    type: OutletType;
    /**
     * Координаты точки продаж.
     * 
     * Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.
     * 
     * Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.
     * 
     * @type {string}
     * @memberof OutletDTO
     */
    coords?: string;
    /**
     * Признак основной точки продаж.
     * 
     * Возможные значения:
     * 
     * * `false` — неосновная точка продаж.
     * * `true` — основная точка продаж.
     * 
     * @type {boolean}
     * @memberof OutletDTO
     */
    isMain?: boolean;
    /**
     * Идентификатор точки продаж, присвоенный магазином.
     * @type {string}
     * @memberof OutletDTO
     */
    shopOutletCode?: string;
    /**
     * 
     * @type {OutletVisibilityType}
     * @memberof OutletDTO
     */
    visibility?: OutletVisibilityType;
    /**
     * 
     * @type {OutletAddressDTO}
     * @memberof OutletDTO
     */
    address: OutletAddressDTO;
    /**
     * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.
     * 
     * @type {Array<string>}
     * @memberof OutletDTO
     */
    phones: Array<string>;
    /**
     * 
     * @type {OutletWorkingScheduleDTO}
     * @memberof OutletDTO
     */
    workingSchedule: OutletWorkingScheduleDTO;
    /**
     * Информация об условиях доставки для данной точки продаж.
     * 
     * Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.
     * 
     * @type {Array<OutletDeliveryRuleDTO>}
     * @memberof OutletDTO
     */
    deliveryRules?: Array<OutletDeliveryRuleDTO> | null;
    /**
     * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
     * @type {number}
     * @memberof OutletDTO
     */
    storagePeriod?: number;
}



/**
 * Check if a given object implements the OutletDTO interface.
 */
export function instanceOfOutletDTO(value: object): value is OutletDTO {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('phones' in value) || value['phones'] === undefined) return false;
    if (!('workingSchedule' in value) || value['workingSchedule'] === undefined) return false;
    return true;
}

export function OutletDTOFromJSON(json: any): OutletDTO {
    return OutletDTOFromJSONTyped(json, false);
}

export function OutletDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutletDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': OutletTypeFromJSON(json['type']),
        'coords': json['coords'] == null ? undefined : json['coords'],
        'isMain': json['isMain'] == null ? undefined : json['isMain'],
        'shopOutletCode': json['shopOutletCode'] == null ? undefined : json['shopOutletCode'],
        'visibility': json['visibility'] == null ? undefined : OutletVisibilityTypeFromJSON(json['visibility']),
        'address': OutletAddressDTOFromJSON(json['address']),
        'phones': json['phones'],
        'workingSchedule': OutletWorkingScheduleDTOFromJSON(json['workingSchedule']),
        'deliveryRules': json['deliveryRules'] == null ? undefined : ((json['deliveryRules'] as Array<any>).map(OutletDeliveryRuleDTOFromJSON)),
        'storagePeriod': json['storagePeriod'] == null ? undefined : json['storagePeriod'],
    };
}

export function OutletDTOToJSON(value?: OutletDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'type': OutletTypeToJSON(value['type']),
        'coords': value['coords'],
        'isMain': value['isMain'],
        'shopOutletCode': value['shopOutletCode'],
        'visibility': OutletVisibilityTypeToJSON(value['visibility']),
        'address': OutletAddressDTOToJSON(value['address']),
        'phones': value['phones'],
        'workingSchedule': OutletWorkingScheduleDTOToJSON(value['workingSchedule']),
        'deliveryRules': value['deliveryRules'] == null ? undefined : ((value['deliveryRules'] as Array<any>).map(OutletDeliveryRuleDTOToJSON)),
        'storagePeriod': value['storagePeriod'],
    };
}

