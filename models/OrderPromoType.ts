/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Тип скидки:
 * 
 * * `DIRECT_DISCOUNT` — прямая скидка, которую устанавливает продавец или Маркет.
 * 
 * * `BLUE_SET` — комплекты.
 * 
 * * `BLUE_FLASH` — флеш-акция.
 * 
 * * `MARKET_COUPON` — скидка по промокоду Маркета.
 * 
 * * `MARKET_PROMOCODE` — скидка по промокоду магазина.
 * 
 * * `MARKET_BLUE` — скидка на Маркете.
 * 
 * * `YANDEX_PLUS` — бесплатная доставка с подпиской Яндекс Плюс.
 * 
 * * `YANDEX_EMPLOYEE` — бесплатная доставка по определенным адресам.
 * 
 * * `LIMITED_FREE_DELIVERY_PROMO` — бесплатная доставка по ограниченному предложению.
 * 
 * * `FREE_DELIVERY_THRESHOLD` — бесплатная доставка при достижении определенной суммы заказа.
 * 
 * * `MULTICART_DISCOUNT` — скидка за то, что оформлена мультикорзина.
 * 
 * * `FREE_DELIVERY_FOR_LDI` — бесплатная доставка за то, что один из товаров крупногабаритный.
 * 
 * * `FREE_DELIVERY_FOR_LSC` — бесплатная доставка за то, что одна из корзин в мультикорзине крупногабаритная.
 * 
 * * `FREE_PICKUP` — бесплатная доставка в пункт выдачи заказов.
 * 
 * * `CHEAPEST_AS_GIFT` — самый дешевый товар в подарок.
 * 
 * * `CASHBACK` — кешбэк.
 * 
 * * `SUPPLIER_MULTICART_DISCOUNT` — скидка за доставку.
 * 
 * * `SPREAD_DISCOUNT_COUNT` — скидка за количество одинаковых товаров.
 * 
 * * `SPREAD_DISCOUNT_RECEIPT` — скидка от суммы чека.
 * 
 * * `ANNOUNCEMENT_PROMO` — информационная акция, скидка не применяется к товарам.
 * 
 * * `DISCOUNT_BY_PAYMENT_TYPE` — прямая скидка при оплате картой Плюса.
 * 
 * * `PERCENT_DISCOUNT` — прямая скидка в процентах.
 * 
 * * `DCO_EXTRA_DISCOUNT` — дополнительная скидка, необходимая для расчета субсидии от Маркета.
 * 
 * * `EMPTY_PROMO` — скрытые промокоды.
 * 
 * * `BLOCKING_PROMO` — блокирующее промо.
 * 
 * * `UNKNOWN` — неизвестный тип.
 * 
 * Устаревшие типы:
 * 
 * * `GENERIC_BUNDLE`.
 * 
 * * `MARKET_DEAL`.
 * 
 * * `MARKET_PRIME`.
 * 
 * * `MARKET_COIN`.
 * 
 * * `BERU_PLUS`.
 * 
 * * `PRICE_DROP_AS_YOU_SHOP`.
 * 
 * * `SECRET_SALE`.
 * 
 * @export
 */
export const OrderPromoType = {
    DirectDiscount: 'DIRECT_DISCOUNT',
    BlueSet: 'BLUE_SET',
    BlueFlash: 'BLUE_FLASH',
    GenericBundle: 'GENERIC_BUNDLE',
    MarketCoupon: 'MARKET_COUPON',
    MarketPromocode: 'MARKET_PROMOCODE',
    MarketDeal: 'MARKET_DEAL',
    MarketBlue: 'MARKET_BLUE',
    MarketPrime: 'MARKET_PRIME',
    YandexPlus: 'YANDEX_PLUS',
    BeruPlus: 'BERU_PLUS',
    MarketCoin: 'MARKET_COIN',
    YandexEmployee: 'YANDEX_EMPLOYEE',
    LimitedFreeDeliveryPromo: 'LIMITED_FREE_DELIVERY_PROMO',
    FreeDeliveryThreshold: 'FREE_DELIVERY_THRESHOLD',
    MulticartDiscount: 'MULTICART_DISCOUNT',
    PriceDropAsYouShop: 'PRICE_DROP_AS_YOU_SHOP',
    FreeDeliveryForLdi: 'FREE_DELIVERY_FOR_LDI',
    FreeDeliveryForLsc: 'FREE_DELIVERY_FOR_LSC',
    SecretSale: 'SECRET_SALE',
    FreePickup: 'FREE_PICKUP',
    CheapestAsGift: 'CHEAPEST_AS_GIFT',
    Cashback: 'CASHBACK',
    SupplierMulticartDiscount: 'SUPPLIER_MULTICART_DISCOUNT',
    SpreadDiscountCount: 'SPREAD_DISCOUNT_COUNT',
    SpreadDiscountReceipt: 'SPREAD_DISCOUNT_RECEIPT',
    AnnouncementPromo: 'ANNOUNCEMENT_PROMO',
    DiscountByPaymentType: 'DISCOUNT_BY_PAYMENT_TYPE',
    PercentDiscount: 'PERCENT_DISCOUNT',
    DcoExtraDiscount: 'DCO_EXTRA_DISCOUNT',
    EmptyPromo: 'EMPTY_PROMO',
    BlockingPromo: 'BLOCKING_PROMO',
    Unknown: 'UNKNOWN'
} as const;
export type OrderPromoType = typeof OrderPromoType[keyof typeof OrderPromoType];


export function instanceOfOrderPromoType(value: any): boolean {
    for (const key in OrderPromoType) {
        if (Object.prototype.hasOwnProperty.call(OrderPromoType, key)) {
            if (OrderPromoType[key as keyof typeof OrderPromoType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function OrderPromoTypeFromJSON(json: any): OrderPromoType {
    return OrderPromoTypeFromJSONTyped(json, false);
}

export function OrderPromoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderPromoType {
    return json as OrderPromoType;
}

export function OrderPromoTypeToJSON(value?: OrderPromoType | null): any {
    return value as any;
}

