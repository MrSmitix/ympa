/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ShowsSalesGroupingType } from './ShowsSalesGroupingType';
import {
    ShowsSalesGroupingTypeFromJSON,
    ShowsSalesGroupingTypeFromJSONTyped,
    ShowsSalesGroupingTypeToJSON,
} from './ShowsSalesGroupingType';

/**
 * Данные, необходимые для генерации отчета.
 * @export
 * @interface GenerateShowsSalesReportRequest
 */
export interface GenerateShowsSalesReportRequest {
    /**
     * Идентификатор бизнеса.
     * 
     * Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.
     * 
     * @type {number}
     * @memberof GenerateShowsSalesReportRequest
     */
    businessId?: number;
    /**
     * Идентификатор кампании.
     * 
     * Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу.
     * 
     * @type {number}
     * @memberof GenerateShowsSalesReportRequest
     */
    campaignId?: number;
    /**
     * Начало периода, включительно.
     * @type {Date}
     * @memberof GenerateShowsSalesReportRequest
     */
    dateFrom: Date;
    /**
     * Конец периода, включительно.
     * @type {Date}
     * @memberof GenerateShowsSalesReportRequest
     */
    dateTo: Date;
    /**
     * 
     * @type {ShowsSalesGroupingType}
     * @memberof GenerateShowsSalesReportRequest
     */
    grouping: ShowsSalesGroupingType;
}



/**
 * Check if a given object implements the GenerateShowsSalesReportRequest interface.
 */
export function instanceOfGenerateShowsSalesReportRequest(value: object): value is GenerateShowsSalesReportRequest {
    if (!('dateFrom' in value) || value['dateFrom'] === undefined) return false;
    if (!('dateTo' in value) || value['dateTo'] === undefined) return false;
    if (!('grouping' in value) || value['grouping'] === undefined) return false;
    return true;
}

export function GenerateShowsSalesReportRequestFromJSON(json: any): GenerateShowsSalesReportRequest {
    return GenerateShowsSalesReportRequestFromJSONTyped(json, false);
}

export function GenerateShowsSalesReportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerateShowsSalesReportRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'businessId': json['businessId'] == null ? undefined : json['businessId'],
        'campaignId': json['campaignId'] == null ? undefined : json['campaignId'],
        'dateFrom': (new Date(json['dateFrom'])),
        'dateTo': (new Date(json['dateTo'])),
        'grouping': ShowsSalesGroupingTypeFromJSON(json['grouping']),
    };
}

export function GenerateShowsSalesReportRequestToJSON(value?: GenerateShowsSalesReportRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'businessId': value['businessId'],
        'campaignId': value['campaignId'],
        'dateFrom': ((value['dateFrom']).toISOString().substring(0,10)),
        'dateTo': ((value['dateTo']).toISOString().substring(0,10)),
        'grouping': ShowsSalesGroupingTypeToJSON(value['grouping']),
    };
}

