/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeedbackGradesDTO } from './FeedbackGradesDTO';
import {
    FeedbackGradesDTOFromJSON,
    FeedbackGradesDTOFromJSONTyped,
    FeedbackGradesDTOToJSON,
} from './FeedbackGradesDTO';
import type { FeedbackStateType } from './FeedbackStateType';
import {
    FeedbackStateTypeFromJSON,
    FeedbackStateTypeFromJSONTyped,
    FeedbackStateTypeToJSON,
} from './FeedbackStateType';
import type { FeedbackAuthorDTO } from './FeedbackAuthorDTO';
import {
    FeedbackAuthorDTOFromJSON,
    FeedbackAuthorDTOFromJSONTyped,
    FeedbackAuthorDTOToJSON,
} from './FeedbackAuthorDTO';
import type { FeedbackShopDTO } from './FeedbackShopDTO';
import {
    FeedbackShopDTOFromJSON,
    FeedbackShopDTOFromJSONTyped,
    FeedbackShopDTOToJSON,
} from './FeedbackShopDTO';
import type { FeedbackOrderDTO } from './FeedbackOrderDTO';
import {
    FeedbackOrderDTOFromJSON,
    FeedbackOrderDTOFromJSONTyped,
    FeedbackOrderDTOToJSON,
} from './FeedbackOrderDTO';
import type { FeedbackCommentDTO } from './FeedbackCommentDTO';
import {
    FeedbackCommentDTOFromJSON,
    FeedbackCommentDTOFromJSONTyped,
    FeedbackCommentDTOToJSON,
} from './FeedbackCommentDTO';

/**
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 * @export
 * @interface FeedbackDTO
 */
export interface FeedbackDTO {
    /**
     * Идентификатор отзыва.
     * @type {number}
     * @memberof FeedbackDTO
     */
    id?: number;
    /**
     * Дата и время создания отзыва.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
     * 
     * @type {Date}
     * @memberof FeedbackDTO
     */
    createdAt?: Date;
    /**
     * Комментарий автора отзыва.
     * @type {string}
     * @memberof FeedbackDTO
     */
    text?: string;
    /**
     * 
     * @type {FeedbackStateType}
     * @memberof FeedbackDTO
     */
    state?: FeedbackStateType;
    /**
     * 
     * @type {FeedbackAuthorDTO}
     * @memberof FeedbackDTO
     */
    author?: FeedbackAuthorDTO;
    /**
     * Достоинства магазина, описанные в отзыве.
     * @type {string}
     * @memberof FeedbackDTO
     */
    pro?: string;
    /**
     * Недостатки магазина, описанные в отзыве.
     * @type {string}
     * @memberof FeedbackDTO
     */
    contra?: string;
    /**
     * Переписка автора отзыва с магазином.
     * @type {Array<FeedbackCommentDTO>}
     * @memberof FeedbackDTO
     */
    comments: Array<FeedbackCommentDTO>;
    /**
     * 
     * @type {FeedbackShopDTO}
     * @memberof FeedbackDTO
     */
    shop?: FeedbackShopDTO;
    /**
     * Решена ли проблема автора отзыва:
     * 
     * * `true` — да.
     * * `false` — нет.
     * 
     * Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.
     * 
     * @type {boolean}
     * @memberof FeedbackDTO
     */
    resolved?: boolean;
    /**
     * {% note warning "" %}
     * 
     * Этот параметр устарел. Не используйте его.
     * 
     * {% endnote %}
     * 
     * Является ли отзыв рекомендованным:
     * 
     * * `true` — да.
     * * `false` — нет.
     * 
     * @type {boolean}
     * @memberof FeedbackDTO
     */
    verified?: boolean;
    /**
     * Купил бы автор отзыва в магазине снова:
     * 
     * * `true` — да.
     * * `false` — нет.
     * 
     * @type {boolean}
     * @memberof FeedbackDTO
     */
    recommend?: boolean;
    /**
     * 
     * @type {FeedbackGradesDTO}
     * @memberof FeedbackDTO
     */
    grades?: FeedbackGradesDTO;
    /**
     * 
     * @type {FeedbackOrderDTO}
     * @memberof FeedbackDTO
     */
    order?: FeedbackOrderDTO;
}



/**
 * Check if a given object implements the FeedbackDTO interface.
 */
export function instanceOfFeedbackDTO(value: object): value is FeedbackDTO {
    if (!('comments' in value) || value['comments'] === undefined) return false;
    return true;
}

export function FeedbackDTOFromJSON(json: any): FeedbackDTO {
    return FeedbackDTOFromJSONTyped(json, false);
}

export function FeedbackDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedbackDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'text': json['text'] == null ? undefined : json['text'],
        'state': json['state'] == null ? undefined : FeedbackStateTypeFromJSON(json['state']),
        'author': json['author'] == null ? undefined : FeedbackAuthorDTOFromJSON(json['author']),
        'pro': json['pro'] == null ? undefined : json['pro'],
        'contra': json['contra'] == null ? undefined : json['contra'],
        'comments': ((json['comments'] as Array<any>).map(FeedbackCommentDTOFromJSON)),
        'shop': json['shop'] == null ? undefined : FeedbackShopDTOFromJSON(json['shop']),
        'resolved': json['resolved'] == null ? undefined : json['resolved'],
        'verified': json['verified'] == null ? undefined : json['verified'],
        'recommend': json['recommend'] == null ? undefined : json['recommend'],
        'grades': json['grades'] == null ? undefined : FeedbackGradesDTOFromJSON(json['grades']),
        'order': json['order'] == null ? undefined : FeedbackOrderDTOFromJSON(json['order']),
    };
}

export function FeedbackDTOToJSON(value?: FeedbackDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'text': value['text'],
        'state': FeedbackStateTypeToJSON(value['state']),
        'author': FeedbackAuthorDTOToJSON(value['author']),
        'pro': value['pro'],
        'contra': value['contra'],
        'comments': ((value['comments'] as Array<any>).map(FeedbackCommentDTOToJSON)),
        'shop': FeedbackShopDTOToJSON(value['shop']),
        'resolved': value['resolved'],
        'verified': value['verified'],
        'recommend': value['recommend'],
        'grades': FeedbackGradesDTOToJSON(value['grades']),
        'order': FeedbackOrderDTOToJSON(value['order']),
    };
}

