/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderPaymentType } from './OrderPaymentType';
import {
    OrderPaymentTypeFromJSON,
    OrderPaymentTypeFromJSONTyped,
    OrderPaymentTypeToJSON,
} from './OrderPaymentType';
import type { OrderSubsidyDTO } from './OrderSubsidyDTO';
import {
    OrderSubsidyDTOFromJSON,
    OrderSubsidyDTOFromJSONTyped,
    OrderSubsidyDTOToJSON,
} from './OrderSubsidyDTO';
import type { OrderBuyerDTO } from './OrderBuyerDTO';
import {
    OrderBuyerDTOFromJSON,
    OrderBuyerDTOFromJSONTyped,
    OrderBuyerDTOToJSON,
} from './OrderBuyerDTO';
import type { OrderItemDTO } from './OrderItemDTO';
import {
    OrderItemDTOFromJSON,
    OrderItemDTOFromJSONTyped,
    OrderItemDTOToJSON,
} from './OrderItemDTO';
import type { OrderSubstatusType } from './OrderSubstatusType';
import {
    OrderSubstatusTypeFromJSON,
    OrderSubstatusTypeFromJSONTyped,
    OrderSubstatusTypeToJSON,
} from './OrderSubstatusType';
import type { OrderTaxSystemType } from './OrderTaxSystemType';
import {
    OrderTaxSystemTypeFromJSON,
    OrderTaxSystemTypeFromJSONTyped,
    OrderTaxSystemTypeToJSON,
} from './OrderTaxSystemType';
import type { OrderPaymentMethodType } from './OrderPaymentMethodType';
import {
    OrderPaymentMethodTypeFromJSON,
    OrderPaymentMethodTypeFromJSONTyped,
    OrderPaymentMethodTypeToJSON,
} from './OrderPaymentMethodType';
import type { OrderStatusType } from './OrderStatusType';
import {
    OrderStatusTypeFromJSON,
    OrderStatusTypeFromJSONTyped,
    OrderStatusTypeToJSON,
} from './OrderStatusType';
import type { CurrencyType } from './CurrencyType';
import {
    CurrencyTypeFromJSON,
    CurrencyTypeFromJSONTyped,
    CurrencyTypeToJSON,
} from './CurrencyType';
import type { OrderDeliveryDTO } from './OrderDeliveryDTO';
import {
    OrderDeliveryDTOFromJSON,
    OrderDeliveryDTOFromJSONTyped,
    OrderDeliveryDTOToJSON,
} from './OrderDeliveryDTO';

/**
 * Заказ.
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * Идентификатор заказа.
     * @type {number}
     * @memberof OrderDTO
     */
    id?: number;
    /**
     * 
     * @type {OrderStatusType}
     * @memberof OrderDTO
     */
    status?: OrderStatusType;
    /**
     * 
     * @type {OrderSubstatusType}
     * @memberof OrderDTO
     */
    substatus?: OrderSubstatusType;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    creationDate?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    updatedAt?: string;
    /**
     * 
     * @type {CurrencyType}
     * @memberof OrderDTO
     */
    currency?: CurrencyType;
    /**
     * Платеж покупателя.
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    itemsTotal?: number;
    /**
     * Стоимость доставки.
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    deliveryTotal?: number;
    /**
     * {% note warning "" %}
     * 
     * Этот параметр устарел.
     * 
     * {% endnote %}
     * 
     * Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.
     * 
     * @type {number}
     * @memberof OrderDTO
     * @deprecated
     */
    buyerItemsTotal?: number;
    /**
     * {% note warning "" %}
     * 
     * Этот параметр устарел.
     * 
     * {% endnote %}
     * 
     * Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.
     * 
     * @type {number}
     * @memberof OrderDTO
     * @deprecated
     */
    buyerTotal?: number;
    /**
     * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:
     * 
     * * акциям;
     * * купонам;
     * * промокодам.
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    buyerItemsTotalBeforeDiscount?: number;
    /**
     * {% note warning "" %}
     * 
     * Этот параметр устарел.
     * 
     * {% endnote %}
     * 
     * Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).
     * 
     * @type {number}
     * @memberof OrderDTO
     * @deprecated
     */
    buyerTotalBeforeDiscount?: number;
    /**
     * 
     * @type {OrderPaymentType}
     * @memberof OrderDTO
     */
    paymentType?: OrderPaymentType;
    /**
     * 
     * @type {OrderPaymentMethodType}
     * @memberof OrderDTO
     */
    paymentMethod?: OrderPaymentMethodType;
    /**
     * Тип заказа:
     * 
     * * `false` — настоящий заказ покупателя.
     * 
     * * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
     * 
     * @type {boolean}
     * @memberof OrderDTO
     */
    fake?: boolean;
    /**
     * Список товаров в заказе.
     * @type {Array<OrderItemDTO>}
     * @memberof OrderDTO
     */
    items: Array<OrderItemDTO>;
    /**
     * Список субсидий по типам.
     * @type {Array<OrderSubsidyDTO>}
     * @memberof OrderDTO
     */
    subsidies?: Array<OrderSubsidyDTO> | null;
    /**
     * 
     * @type {OrderDeliveryDTO}
     * @memberof OrderDTO
     */
    delivery?: OrderDeliveryDTO;
    /**
     * 
     * @type {OrderBuyerDTO}
     * @memberof OrderDTO
     */
    buyer?: OrderBuyerDTO;
    /**
     * Комментарий к заказу.
     * @type {string}
     * @memberof OrderDTO
     */
    notes?: string;
    /**
     * 
     * @type {OrderTaxSystemType}
     * @memberof OrderDTO
     */
    taxSystem?: OrderTaxSystemType;
    /**
     * **Только для модели DBS**
     * 
     * Запрошена ли отмена.
     * 
     * @type {boolean}
     * @memberof OrderDTO
     */
    cancelRequested?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    expiryDate?: string;
}



/**
 * Check if a given object implements the OrderDTO interface.
 */
export function instanceOfOrderDTO(value: object): value is OrderDTO {
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function OrderDTOFromJSON(json: any): OrderDTO {
    return OrderDTOFromJSONTyped(json, false);
}

export function OrderDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'status': json['status'] == null ? undefined : OrderStatusTypeFromJSON(json['status']),
        'substatus': json['substatus'] == null ? undefined : OrderSubstatusTypeFromJSON(json['substatus']),
        'creationDate': json['creationDate'] == null ? undefined : json['creationDate'],
        'updatedAt': json['updatedAt'] == null ? undefined : json['updatedAt'],
        'currency': json['currency'] == null ? undefined : CurrencyTypeFromJSON(json['currency']),
        'itemsTotal': json['itemsTotal'] == null ? undefined : json['itemsTotal'],
        'deliveryTotal': json['deliveryTotal'] == null ? undefined : json['deliveryTotal'],
        'buyerItemsTotal': json['buyerItemsTotal'] == null ? undefined : json['buyerItemsTotal'],
        'buyerTotal': json['buyerTotal'] == null ? undefined : json['buyerTotal'],
        'buyerItemsTotalBeforeDiscount': json['buyerItemsTotalBeforeDiscount'] == null ? undefined : json['buyerItemsTotalBeforeDiscount'],
        'buyerTotalBeforeDiscount': json['buyerTotalBeforeDiscount'] == null ? undefined : json['buyerTotalBeforeDiscount'],
        'paymentType': json['paymentType'] == null ? undefined : OrderPaymentTypeFromJSON(json['paymentType']),
        'paymentMethod': json['paymentMethod'] == null ? undefined : OrderPaymentMethodTypeFromJSON(json['paymentMethod']),
        'fake': json['fake'] == null ? undefined : json['fake'],
        'items': ((json['items'] as Array<any>).map(OrderItemDTOFromJSON)),
        'subsidies': json['subsidies'] == null ? undefined : ((json['subsidies'] as Array<any>).map(OrderSubsidyDTOFromJSON)),
        'delivery': json['delivery'] == null ? undefined : OrderDeliveryDTOFromJSON(json['delivery']),
        'buyer': json['buyer'] == null ? undefined : OrderBuyerDTOFromJSON(json['buyer']),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'taxSystem': json['taxSystem'] == null ? undefined : OrderTaxSystemTypeFromJSON(json['taxSystem']),
        'cancelRequested': json['cancelRequested'] == null ? undefined : json['cancelRequested'],
        'expiryDate': json['expiryDate'] == null ? undefined : json['expiryDate'],
    };
}

export function OrderDTOToJSON(value?: OrderDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'status': OrderStatusTypeToJSON(value['status']),
        'substatus': OrderSubstatusTypeToJSON(value['substatus']),
        'creationDate': value['creationDate'],
        'updatedAt': value['updatedAt'],
        'currency': CurrencyTypeToJSON(value['currency']),
        'itemsTotal': value['itemsTotal'],
        'deliveryTotal': value['deliveryTotal'],
        'buyerItemsTotal': value['buyerItemsTotal'],
        'buyerTotal': value['buyerTotal'],
        'buyerItemsTotalBeforeDiscount': value['buyerItemsTotalBeforeDiscount'],
        'buyerTotalBeforeDiscount': value['buyerTotalBeforeDiscount'],
        'paymentType': OrderPaymentTypeToJSON(value['paymentType']),
        'paymentMethod': OrderPaymentMethodTypeToJSON(value['paymentMethod']),
        'fake': value['fake'],
        'items': ((value['items'] as Array<any>).map(OrderItemDTOToJSON)),
        'subsidies': value['subsidies'] == null ? undefined : ((value['subsidies'] as Array<any>).map(OrderSubsidyDTOToJSON)),
        'delivery': OrderDeliveryDTOToJSON(value['delivery']),
        'buyer': OrderBuyerDTOToJSON(value['buyer']),
        'notes': value['notes'],
        'taxSystem': OrderTaxSystemTypeToJSON(value['taxSystem']),
        'cancelRequested': value['cancelRequested'],
        'expiryDate': value['expiryDate'],
    };
}

