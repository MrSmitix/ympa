/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BidRecommendationItemDTO } from './BidRecommendationItemDTO';
import {
    BidRecommendationItemDTOFromJSON,
    BidRecommendationItemDTOFromJSONTyped,
    BidRecommendationItemDTOToJSON,
} from './BidRecommendationItemDTO';
import type { PriceRecommendationItemDTO } from './PriceRecommendationItemDTO';
import {
    PriceRecommendationItemDTOFromJSON,
    PriceRecommendationItemDTOFromJSONTyped,
    PriceRecommendationItemDTOToJSON,
} from './PriceRecommendationItemDTO';

/**
 * Список товаров с рекомендованными ставками.
 * @export
 * @interface SkuBidRecommendationItemDTO
 */
export interface SkuBidRecommendationItemDTO {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof SkuBidRecommendationItemDTO
     */
    sku: string;
    /**
     * Значение ставки.
     * @type {number}
     * @memberof SkuBidRecommendationItemDTO
     */
    bid: number;
    /**
     * Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить.
     * 
     * @type {Array<BidRecommendationItemDTO>}
     * @memberof SkuBidRecommendationItemDTO
     */
    bidRecommendations?: Array<BidRecommendationItemDTO> | null;
    /**
     * Рекомендованные цены.
     * @type {Array<PriceRecommendationItemDTO>}
     * @memberof SkuBidRecommendationItemDTO
     */
    priceRecommendations?: Array<PriceRecommendationItemDTO> | null;
}

/**
 * Check if a given object implements the SkuBidRecommendationItemDTO interface.
 */
export function instanceOfSkuBidRecommendationItemDTO(value: object): value is SkuBidRecommendationItemDTO {
    if (!('sku' in value) || value['sku'] === undefined) return false;
    if (!('bid' in value) || value['bid'] === undefined) return false;
    return true;
}

export function SkuBidRecommendationItemDTOFromJSON(json: any): SkuBidRecommendationItemDTO {
    return SkuBidRecommendationItemDTOFromJSONTyped(json, false);
}

export function SkuBidRecommendationItemDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): SkuBidRecommendationItemDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'sku': json['sku'],
        'bid': json['bid'],
        'bidRecommendations': json['bidRecommendations'] == null ? undefined : ((json['bidRecommendations'] as Array<any>).map(BidRecommendationItemDTOFromJSON)),
        'priceRecommendations': json['priceRecommendations'] == null ? undefined : ((json['priceRecommendations'] as Array<any>).map(PriceRecommendationItemDTOFromJSON)),
    };
}

export function SkuBidRecommendationItemDTOToJSON(value?: SkuBidRecommendationItemDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'sku': value['sku'],
        'bid': value['bid'],
        'bidRecommendations': value['bidRecommendations'] == null ? undefined : ((value['bidRecommendations'] as Array<any>).map(BidRecommendationItemDTOToJSON)),
        'priceRecommendations': value['priceRecommendations'] == null ? undefined : ((value['priceRecommendations'] as Array<any>).map(PriceRecommendationItemDTOToJSON)),
    };
}

