/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Услуга:
 * 
 * * `FEE` — размещение товара на Маркете.
 * * `FULFILLMENT` — складская обработка. Не возвращается с 1 января 2024 года.
 * * `LOYALTY_PARTICIPATION_FEE` — участие в программе лояльности и отзывы за баллы.
 * * `AUCTION_PROMOTION` — буст продаж с оплатой за продажи.
 * * `INSTALLMENT` — рассрочка. Не возвращается с 24 февраля 2022 года.
 * * `DELIVERY_TO_CUSTOMER` — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета.
 * * `EXPRESS_DELIVERY_TO_CUSTOMER` — экспресс-доставка покупателю (Экспресс).
 * * `AGENCY` — прием платежа покупателя.
 * * `PAYMENT_TRANSFER` — перевод платежа покупателя.
 * * `RETURNED_ORDERS_STORAGE` — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета.
 * * `SORTING` — обработка заказа (FBS).
 * * `INTAKE_SORTING` — организация забора заказов со склада продавца (FBS).
 * * `RETURN_PROCESSING` — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета.
 * * `ILLIQUID_GOODS_SALE` — вознаграждение за продажу невывезенных товаров.
 * 
 * @export
 */
export const OrdersStatsCommissionType = {
    Fee: 'FEE',
    Fulfillment: 'FULFILLMENT',
    LoyaltyParticipationFee: 'LOYALTY_PARTICIPATION_FEE',
    AuctionPromotion: 'AUCTION_PROMOTION',
    Installment: 'INSTALLMENT',
    DeliveryToCustomer: 'DELIVERY_TO_CUSTOMER',
    ExpressDeliveryToCustomer: 'EXPRESS_DELIVERY_TO_CUSTOMER',
    Agency: 'AGENCY',
    PaymentTransfer: 'PAYMENT_TRANSFER',
    ReturnedOrdersStorage: 'RETURNED_ORDERS_STORAGE',
    Sorting: 'SORTING',
    IntakeSorting: 'INTAKE_SORTING',
    ReturnProcessing: 'RETURN_PROCESSING',
    IlliquidGoodsSale: 'ILLIQUID_GOODS_SALE'
} as const;
export type OrdersStatsCommissionType = typeof OrdersStatsCommissionType[keyof typeof OrdersStatsCommissionType];


export function instanceOfOrdersStatsCommissionType(value: any): boolean {
    for (const key in OrdersStatsCommissionType) {
        if (Object.prototype.hasOwnProperty.call(OrdersStatsCommissionType, key)) {
            if (OrdersStatsCommissionType[key as keyof typeof OrdersStatsCommissionType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function OrdersStatsCommissionTypeFromJSON(json: any): OrdersStatsCommissionType {
    return OrdersStatsCommissionTypeFromJSONTyped(json, false);
}

export function OrdersStatsCommissionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrdersStatsCommissionType {
    return json as OrdersStatsCommissionType;
}

export function OrdersStatsCommissionTypeToJSON(value?: OrdersStatsCommissionType | null): any {
    return value as any;
}

