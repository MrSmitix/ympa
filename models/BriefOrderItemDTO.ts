/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderItemInstanceDTO } from './OrderItemInstanceDTO';
import {
    OrderItemInstanceDTOFromJSON,
    OrderItemInstanceDTOFromJSONTyped,
    OrderItemInstanceDTOToJSON,
} from './OrderItemInstanceDTO';
import type { OrderVatType } from './OrderVatType';
import {
    OrderVatTypeFromJSON,
    OrderVatTypeFromJSONTyped,
    OrderVatTypeToJSON,
} from './OrderVatType';

/**
 * Информация о маркированном товаре.
 * @export
 * @interface BriefOrderItemDTO
 */
export interface BriefOrderItemDTO {
    /**
     * Идентификатор товара в заказе.
     * 
     * Позволяет идентифицировать товар в рамках данного заказа.
     * 
     * @type {number}
     * @memberof BriefOrderItemDTO
     */
    id?: number;
    /**
     * 
     * @type {OrderVatType}
     * @memberof BriefOrderItemDTO
     */
    vat?: OrderVatType;
    /**
     * Количество единиц товара.
     * @type {number}
     * @memberof BriefOrderItemDTO
     */
    count?: number;
    /**
     * Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.
     * 
     * @type {number}
     * @memberof BriefOrderItemDTO
     */
    price?: number;
    /**
     * Название товара.
     * @type {string}
     * @memberof BriefOrderItemDTO
     */
    offerName?: string;
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof BriefOrderItemDTO
     */
    offerId?: string;
    /**
     * Переданные вами коды маркировки.
     * @type {Array<OrderItemInstanceDTO>}
     * @memberof BriefOrderItemDTO
     */
    instances?: Array<OrderItemInstanceDTO> | null;
}



/**
 * Check if a given object implements the BriefOrderItemDTO interface.
 */
export function instanceOfBriefOrderItemDTO(value: object): value is BriefOrderItemDTO {
    return true;
}

export function BriefOrderItemDTOFromJSON(json: any): BriefOrderItemDTO {
    return BriefOrderItemDTOFromJSONTyped(json, false);
}

export function BriefOrderItemDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): BriefOrderItemDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'vat': json['vat'] == null ? undefined : OrderVatTypeFromJSON(json['vat']),
        'count': json['count'] == null ? undefined : json['count'],
        'price': json['price'] == null ? undefined : json['price'],
        'offerName': json['offerName'] == null ? undefined : json['offerName'],
        'offerId': json['offerId'] == null ? undefined : json['offerId'],
        'instances': json['instances'] == null ? undefined : ((json['instances'] as Array<any>).map(OrderItemInstanceDTOFromJSON)),
    };
}

export function BriefOrderItemDTOToJSON(value?: BriefOrderItemDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'vat': OrderVatTypeToJSON(value['vat']),
        'count': value['count'],
        'price': value['price'],
        'offerName': value['offerName'],
        'offerId': value['offerId'],
        'instances': value['instances'] == null ? undefined : ((value['instances'] as Array<any>).map(OrderItemInstanceDTOToJSON)),
    };
}

