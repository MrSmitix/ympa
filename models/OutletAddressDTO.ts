/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Адрес точки продаж.
 * 
 * @export
 * @interface OutletAddressDTO
 */
export interface OutletAddressDTO {
    /**
     * Идентификатор региона.
     * 
     * Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).
     * 
     * {% note alert %}
     * 
     * При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).
     * 
     * {% endnote %}
     * 
     * @type {number}
     * @memberof OutletAddressDTO
     */
    regionId: number;
    /**
     * Улица.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    street?: string;
    /**
     * Номер дома.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    number?: string;
    /**
     * Номер строения.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    building?: string;
    /**
     * Номер владения.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    estate?: string;
    /**
     * Номер корпуса.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    block?: string;
    /**
     * Дополнительная информация.
     * @type {string}
     * @memberof OutletAddressDTO
     */
    additional?: string;
    /**
     * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
     * @type {number}
     * @memberof OutletAddressDTO
     */
    km?: number;
    /**
     * {% note warning "" %}
     * 
     * Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.
     * 
     * {% endnote %}
     * 
     * @type {string}
     * @memberof OutletAddressDTO
     */
    city?: string;
}

/**
 * Check if a given object implements the OutletAddressDTO interface.
 */
export function instanceOfOutletAddressDTO(value: object): value is OutletAddressDTO {
    if (!('regionId' in value) || value['regionId'] === undefined) return false;
    return true;
}

export function OutletAddressDTOFromJSON(json: any): OutletAddressDTO {
    return OutletAddressDTOFromJSONTyped(json, false);
}

export function OutletAddressDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutletAddressDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'regionId': json['regionId'],
        'street': json['street'] == null ? undefined : json['street'],
        'number': json['number'] == null ? undefined : json['number'],
        'building': json['building'] == null ? undefined : json['building'],
        'estate': json['estate'] == null ? undefined : json['estate'],
        'block': json['block'] == null ? undefined : json['block'],
        'additional': json['additional'] == null ? undefined : json['additional'],
        'km': json['km'] == null ? undefined : json['km'],
        'city': json['city'] == null ? undefined : json['city'],
    };
}

export function OutletAddressDTOToJSON(value?: OutletAddressDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'regionId': value['regionId'],
        'street': value['street'],
        'number': value['number'],
        'building': value['building'],
        'estate': value['estate'],
        'block': value['block'],
        'additional': value['additional'],
        'km': value['km'],
        'city': value['city'],
    };
}

