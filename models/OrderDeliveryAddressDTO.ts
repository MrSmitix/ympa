/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GpsDTO } from './GpsDTO';
import {
    GpsDTOFromJSON,
    GpsDTOFromJSONTyped,
    GpsDTOToJSON,
} from './GpsDTO';

/**
 * Адрес доставки.
 * 
 * Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи).
 * 
 * @export
 * @interface OrderDeliveryAddressDTO
 */
export interface OrderDeliveryAddressDTO {
    /**
     * Страна.
     * 
     * Обязательный параметр.
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    country?: string;
    /**
     * Почтовый индекс.
     * 
     * Указывается, если выбрана доставка почтой (`delivery type=POST`).
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    postcode?: string;
    /**
     * Город или населенный пункт.
     * 
     * Обязательный параметр.
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    city?: string;
    /**
     * Район.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    district?: string;
    /**
     * Станция метро.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    subway?: string;
    /**
     * Улица.
     * 
     * Обязательный параметр.
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    street?: string;
    /**
     * Дом или владение.
     * 
     * Обязательный параметр.
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    house?: string;
    /**
     * Корпус или строение.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    block?: string;
    /**
     * Подъезд.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    entrance?: string;
    /**
     * Код домофона.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    entryphone?: string;
    /**
     * Этаж.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    floor?: string;
    /**
     * Квартира или офис.
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    apartment?: string;
    /**
     * Телефон получателя заказа.
     * 
     * Обязательный параметр.
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    phone?: string;
    /**
     * Фамилия, имя и отчество получателя заказа.
     * 
     * Обязательный параметр.
     * 
     * @type {string}
     * @memberof OrderDeliveryAddressDTO
     */
    recipient?: string;
    /**
     * 
     * @type {GpsDTO}
     * @memberof OrderDeliveryAddressDTO
     */
    gps?: GpsDTO;
}

/**
 * Check if a given object implements the OrderDeliveryAddressDTO interface.
 */
export function instanceOfOrderDeliveryAddressDTO(value: object): value is OrderDeliveryAddressDTO {
    return true;
}

export function OrderDeliveryAddressDTOFromJSON(json: any): OrderDeliveryAddressDTO {
    return OrderDeliveryAddressDTOFromJSONTyped(json, false);
}

export function OrderDeliveryAddressDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderDeliveryAddressDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'country': json['country'] == null ? undefined : json['country'],
        'postcode': json['postcode'] == null ? undefined : json['postcode'],
        'city': json['city'] == null ? undefined : json['city'],
        'district': json['district'] == null ? undefined : json['district'],
        'subway': json['subway'] == null ? undefined : json['subway'],
        'street': json['street'] == null ? undefined : json['street'],
        'house': json['house'] == null ? undefined : json['house'],
        'block': json['block'] == null ? undefined : json['block'],
        'entrance': json['entrance'] == null ? undefined : json['entrance'],
        'entryphone': json['entryphone'] == null ? undefined : json['entryphone'],
        'floor': json['floor'] == null ? undefined : json['floor'],
        'apartment': json['apartment'] == null ? undefined : json['apartment'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'recipient': json['recipient'] == null ? undefined : json['recipient'],
        'gps': json['gps'] == null ? undefined : GpsDTOFromJSON(json['gps']),
    };
}

export function OrderDeliveryAddressDTOToJSON(value?: OrderDeliveryAddressDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'country': value['country'],
        'postcode': value['postcode'],
        'city': value['city'],
        'district': value['district'],
        'subway': value['subway'],
        'street': value['street'],
        'house': value['house'],
        'block': value['block'],
        'entrance': value['entrance'],
        'entryphone': value['entryphone'],
        'floor': value['floor'],
        'apartment': value['apartment'],
        'phone': value['phone'],
        'recipient': value['recipient'],
        'gps': GpsDTOToJSON(value['gps']),
    };
}

