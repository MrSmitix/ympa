/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderStatsStatusType } from './OrderStatsStatusType';
import {
    OrderStatsStatusTypeFromJSON,
    OrderStatsStatusTypeFromJSONTyped,
    OrderStatsStatusTypeToJSON,
} from './OrderStatsStatusType';

/**
 * Запрос информации по заказам.
 * @export
 * @interface GetOrdersStatsRequest
 */
export interface GetOrdersStatsRequest {
    /**
     * Начальная дата, когда заказ был сформирован.
     * 
     * Формат даты: `ГГГГ‑ММ‑ДД`.
     * 
     * Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.
     * 
     * @type {Date}
     * @memberof GetOrdersStatsRequest
     */
    dateFrom?: Date;
    /**
     * Конечная дата, когда заказ был сформирован.
     * 
     * Формат даты: `ГГГГ‑ММ‑ДД`.
     * 
     * Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.
     * 
     * @type {Date}
     * @memberof GetOrdersStatsRequest
     */
    dateTo?: Date;
    /**
     * Начальная дата периода, за который были изменения статуса заказа.
     * 
     * Формат даты: `ГГГГ‑ММ‑ДД`.
     * 
     * Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.
     * 
     * @type {Date}
     * @memberof GetOrdersStatsRequest
     */
    updateFrom?: Date;
    /**
     * Конечная дата периода, за который были изменения статуса заказа.
     * 
     * Формат даты: `ГГГГ‑ММ‑ДД`.
     * 
     * Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.
     * 
     * @type {Date}
     * @memberof GetOrdersStatsRequest
     */
    updateTo?: Date;
    /**
     * Список идентификаторов заказов.
     * @type {Array<number>}
     * @memberof GetOrdersStatsRequest
     */
    orders?: Array<number> | null;
    /**
     * Список статусов заказов.
     * @type {Array<OrderStatsStatusType>}
     * @memberof GetOrdersStatsRequest
     */
    statuses?: Array<OrderStatsStatusType> | null;
    /**
     * Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):
     * 
     * * `true` — да.
     * * `false` — нет.
     * Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.
     * 
     * @type {boolean}
     * @memberof GetOrdersStatsRequest
     */
    hasCis?: boolean;
}

/**
 * Check if a given object implements the GetOrdersStatsRequest interface.
 */
export function instanceOfGetOrdersStatsRequest(value: object): value is GetOrdersStatsRequest {
    return true;
}

export function GetOrdersStatsRequestFromJSON(json: any): GetOrdersStatsRequest {
    return GetOrdersStatsRequestFromJSONTyped(json, false);
}

export function GetOrdersStatsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetOrdersStatsRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'dateFrom': json['dateFrom'] == null ? undefined : (new Date(json['dateFrom'])),
        'dateTo': json['dateTo'] == null ? undefined : (new Date(json['dateTo'])),
        'updateFrom': json['updateFrom'] == null ? undefined : (new Date(json['updateFrom'])),
        'updateTo': json['updateTo'] == null ? undefined : (new Date(json['updateTo'])),
        'orders': json['orders'] == null ? undefined : json['orders'],
        'statuses': json['statuses'] == null ? undefined : ((json['statuses'] as Array<any>).map(OrderStatsStatusTypeFromJSON)),
        'hasCis': json['hasCis'] == null ? undefined : json['hasCis'],
    };
}

export function GetOrdersStatsRequestToJSON(value?: GetOrdersStatsRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'dateFrom': value['dateFrom'] == null ? undefined : ((value['dateFrom']).toISOString().substring(0,10)),
        'dateTo': value['dateTo'] == null ? undefined : ((value['dateTo']).toISOString().substring(0,10)),
        'updateFrom': value['updateFrom'] == null ? undefined : ((value['updateFrom']).toISOString().substring(0,10)),
        'updateTo': value['updateTo'] == null ? undefined : ((value['updateTo']).toISOString().substring(0,10)),
        'orders': value['orders'],
        'statuses': value['statuses'] == null ? undefined : ((value['statuses'] as Array<any>).map(OrderStatsStatusTypeToJSON)),
        'hasCis': value['hasCis'],
    };
}

