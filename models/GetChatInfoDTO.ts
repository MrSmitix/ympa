/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatStatusType } from './ChatStatusType';
import {
    ChatStatusTypeFromJSON,
    ChatStatusTypeFromJSONTyped,
    ChatStatusTypeToJSON,
} from './ChatStatusType';
import type { ChatType } from './ChatType';
import {
    ChatTypeFromJSON,
    ChatTypeFromJSONTyped,
    ChatTypeToJSON,
} from './ChatType';

/**
 * Информация о чатах.
 * @export
 * @interface GetChatInfoDTO
 */
export interface GetChatInfoDTO {
    /**
     * Идентификатор чата.
     * @type {number}
     * @memberof GetChatInfoDTO
     */
    chatId: number;
    /**
     * Идентификатор заказа.
     * @type {number}
     * @memberof GetChatInfoDTO
     */
    orderId: number;
    /**
     * 
     * @type {ChatType}
     * @memberof GetChatInfoDTO
     */
    type: ChatType;
    /**
     * 
     * @type {ChatStatusType}
     * @memberof GetChatInfoDTO
     */
    status: ChatStatusType;
    /**
     * Дата и время создания чата.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
     * 
     * @type {Date}
     * @memberof GetChatInfoDTO
     */
    createdAt: Date;
    /**
     * Дата и время последнего сообщения в чате.
     * @type {Date}
     * @memberof GetChatInfoDTO
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the GetChatInfoDTO interface.
 */
export function instanceOfGetChatInfoDTO(value: object): value is GetChatInfoDTO {
    if (!('chatId' in value) || value['chatId'] === undefined) return false;
    if (!('orderId' in value) || value['orderId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GetChatInfoDTOFromJSON(json: any): GetChatInfoDTO {
    return GetChatInfoDTOFromJSONTyped(json, false);
}

export function GetChatInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetChatInfoDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'chatId': json['chatId'],
        'orderId': json['orderId'],
        'type': ChatTypeFromJSON(json['type']),
        'status': ChatStatusTypeFromJSON(json['status']),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function GetChatInfoDTOToJSON(value?: GetChatInfoDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'chatId': value['chatId'],
        'orderId': value['orderId'],
        'type': ChatTypeToJSON(value['type']),
        'status': ChatStatusTypeToJSON(value['status']),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

