/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeedIndexLogsIndexType } from './FeedIndexLogsIndexType';
import {
    FeedIndexLogsIndexTypeFromJSON,
    FeedIndexLogsIndexTypeFromJSONTyped,
    FeedIndexLogsIndexTypeToJSON,
} from './FeedIndexLogsIndexType';
import type { FeedIndexLogsErrorDTO } from './FeedIndexLogsErrorDTO';
import {
    FeedIndexLogsErrorDTOFromJSON,
    FeedIndexLogsErrorDTOFromJSONTyped,
    FeedIndexLogsErrorDTOToJSON,
} from './FeedIndexLogsErrorDTO';
import type { FeedIndexLogsOffersDTO } from './FeedIndexLogsOffersDTO';
import {
    FeedIndexLogsOffersDTOFromJSON,
    FeedIndexLogsOffersDTOFromJSONTyped,
    FeedIndexLogsOffersDTOToJSON,
} from './FeedIndexLogsOffersDTO';
import type { FeedIndexLogsStatusType } from './FeedIndexLogsStatusType';
import {
    FeedIndexLogsStatusTypeFromJSON,
    FeedIndexLogsStatusTypeFromJSONTyped,
    FeedIndexLogsStatusTypeToJSON,
} from './FeedIndexLogsStatusType';

/**
 * Список отчетов по индексации прайс-листа.
 * @export
 * @interface FeedIndexLogsRecordDTO
 */
export interface FeedIndexLogsRecordDTO {
    /**
     * Дата и время загрузки прайс-листа.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.
     * 
     * @type {Date}
     * @memberof FeedIndexLogsRecordDTO
     */
    downloadTime?: Date;
    /**
     * Дата и время, которые магазин указал в прайс-листе.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.
     * 
     * @type {Date}
     * @memberof FeedIndexLogsRecordDTO
     */
    fileTime?: Date;
    /**
     * Идентификатор индексации.
     * @type {number}
     * @memberof FeedIndexLogsRecordDTO
     */
    generationId?: number;
    /**
     * 
     * @type {FeedIndexLogsIndexType}
     * @memberof FeedIndexLogsRecordDTO
     */
    indexType?: FeedIndexLogsIndexType;
    /**
     * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.
     * 
     * @type {Date}
     * @memberof FeedIndexLogsRecordDTO
     */
    publishedTime?: Date;
    /**
     * 
     * @type {FeedIndexLogsStatusType}
     * @memberof FeedIndexLogsRecordDTO
     */
    status?: FeedIndexLogsStatusType;
    /**
     * 
     * @type {FeedIndexLogsErrorDTO}
     * @memberof FeedIndexLogsRecordDTO
     */
    error?: FeedIndexLogsErrorDTO;
    /**
     * 
     * @type {FeedIndexLogsOffersDTO}
     * @memberof FeedIndexLogsRecordDTO
     */
    offers?: FeedIndexLogsOffersDTO;
}



/**
 * Check if a given object implements the FeedIndexLogsRecordDTO interface.
 */
export function instanceOfFeedIndexLogsRecordDTO(value: object): value is FeedIndexLogsRecordDTO {
    return true;
}

export function FeedIndexLogsRecordDTOFromJSON(json: any): FeedIndexLogsRecordDTO {
    return FeedIndexLogsRecordDTOFromJSONTyped(json, false);
}

export function FeedIndexLogsRecordDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedIndexLogsRecordDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'downloadTime': json['downloadTime'] == null ? undefined : (new Date(json['downloadTime'])),
        'fileTime': json['fileTime'] == null ? undefined : (new Date(json['fileTime'])),
        'generationId': json['generationId'] == null ? undefined : json['generationId'],
        'indexType': json['indexType'] == null ? undefined : FeedIndexLogsIndexTypeFromJSON(json['indexType']),
        'publishedTime': json['publishedTime'] == null ? undefined : (new Date(json['publishedTime'])),
        'status': json['status'] == null ? undefined : FeedIndexLogsStatusTypeFromJSON(json['status']),
        'error': json['error'] == null ? undefined : FeedIndexLogsErrorDTOFromJSON(json['error']),
        'offers': json['offers'] == null ? undefined : FeedIndexLogsOffersDTOFromJSON(json['offers']),
    };
}

export function FeedIndexLogsRecordDTOToJSON(value?: FeedIndexLogsRecordDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'downloadTime': value['downloadTime'] == null ? undefined : ((value['downloadTime']).toISOString()),
        'fileTime': value['fileTime'] == null ? undefined : ((value['fileTime']).toISOString()),
        'generationId': value['generationId'],
        'indexType': FeedIndexLogsIndexTypeToJSON(value['indexType']),
        'publishedTime': value['publishedTime'] == null ? undefined : ((value['publishedTime']).toISOString()),
        'status': FeedIndexLogsStatusTypeToJSON(value['status']),
        'error': FeedIndexLogsErrorDTOToJSON(value['error']),
        'offers': FeedIndexLogsOffersDTOToJSON(value['offers']),
    };
}

