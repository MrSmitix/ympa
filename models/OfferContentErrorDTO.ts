/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OfferContentErrorType } from './OfferContentErrorType';
import {
    OfferContentErrorTypeFromJSON,
    OfferContentErrorTypeFromJSONTyped,
    OfferContentErrorTypeToJSON,
} from './OfferContentErrorType';

/**
 * Текст ошибки.
 * @export
 * @interface OfferContentErrorDTO
 */
export interface OfferContentErrorDTO {
    /**
     * 
     * @type {OfferContentErrorType}
     * @memberof OfferContentErrorDTO
     */
    type: OfferContentErrorType;
    /**
     * Идентификатор характеристики, с которой связана ошибка.
     * @type {number}
     * @memberof OfferContentErrorDTO
     */
    parameterId?: number;
    /**
     * Текст ошибки.
     * @type {string}
     * @memberof OfferContentErrorDTO
     */
    message: string;
}



/**
 * Check if a given object implements the OfferContentErrorDTO interface.
 */
export function instanceOfOfferContentErrorDTO(value: object): value is OfferContentErrorDTO {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function OfferContentErrorDTOFromJSON(json: any): OfferContentErrorDTO {
    return OfferContentErrorDTOFromJSONTyped(json, false);
}

export function OfferContentErrorDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OfferContentErrorDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'type': OfferContentErrorTypeFromJSON(json['type']),
        'parameterId': json['parameterId'] == null ? undefined : json['parameterId'],
        'message': json['message'],
    };
}

export function OfferContentErrorDTOToJSON(value?: OfferContentErrorDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': OfferContentErrorTypeToJSON(value['type']),
        'parameterId': value['parameterId'],
        'message': value['message'],
    };
}

