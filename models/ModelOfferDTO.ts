/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Информация о предложении.
 * @export
 * @interface ModelOfferDTO
 */
export interface ModelOfferDTO {
    /**
     * Скидка на предложение в процентах.
     * @type {number}
     * @memberof ModelOfferDTO
     */
    discount?: number;
    /**
     * Наименование предложения.
     * @type {string}
     * @memberof ModelOfferDTO
     */
    name?: string;
    /**
     * Позиция предложения в выдаче Маркета на карточке модели.
     * @type {number}
     * @memberof ModelOfferDTO
     */
    pos?: number;
    /**
     * Цена предложения без скидки магазина.
     * @type {number}
     * @memberof ModelOfferDTO
     */
    preDiscountPrice?: number;
    /**
     * Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
     * @type {number}
     * @memberof ModelOfferDTO
     */
    price?: number;
    /**
     * Идентификатор региона предложения (регион, откуда доставляется товар).
     * 
     * Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них.
     * 
     * @type {number}
     * @memberof ModelOfferDTO
     */
    regionId?: number;
    /**
     * Стоимость доставки товара в регион:
     * 
     * * `0` — доставка осуществляется бесплатно.
     * * `-1` — магазин не осуществляет доставку этого товара (самовывоз).
     * 
     * Если стоимость доставки неизвестна, параметр не выводится.
     * 
     * @type {number}
     * @memberof ModelOfferDTO
     */
    shippingCost?: number;
    /**
     * Название магазина (в том виде, в котором отображается на Маркете).
     * @type {string}
     * @memberof ModelOfferDTO
     */
    shopName?: string;
    /**
     * Рейтинг магазина.
     * 
     * Возможные значения:
     * * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`.
     * * `1`.
     * * `2`.
     * * `3`.
     * * `4`.
     * * `5`.
     * 
     * @type {number}
     * @memberof ModelOfferDTO
     */
    shopRating?: number;
    /**
     * {% note warning "" %}
     * 
     * Этот параметр устарел. Не используйте его.
     * 
     * {% endnote %}
     * 
     * @type {number}
     * @memberof ModelOfferDTO
     * @deprecated
     */
    inStock?: number;
}

/**
 * Check if a given object implements the ModelOfferDTO interface.
 */
export function instanceOfModelOfferDTO(value: object): value is ModelOfferDTO {
    return true;
}

export function ModelOfferDTOFromJSON(json: any): ModelOfferDTO {
    return ModelOfferDTOFromJSONTyped(json, false);
}

export function ModelOfferDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelOfferDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'discount': json['discount'] == null ? undefined : json['discount'],
        'name': json['name'] == null ? undefined : json['name'],
        'pos': json['pos'] == null ? undefined : json['pos'],
        'preDiscountPrice': json['preDiscountPrice'] == null ? undefined : json['preDiscountPrice'],
        'price': json['price'] == null ? undefined : json['price'],
        'regionId': json['regionId'] == null ? undefined : json['regionId'],
        'shippingCost': json['shippingCost'] == null ? undefined : json['shippingCost'],
        'shopName': json['shopName'] == null ? undefined : json['shopName'],
        'shopRating': json['shopRating'] == null ? undefined : json['shopRating'],
        'inStock': json['inStock'] == null ? undefined : json['inStock'],
    };
}

export function ModelOfferDTOToJSON(value?: ModelOfferDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'discount': value['discount'],
        'name': value['name'],
        'pos': value['pos'],
        'preDiscountPrice': value['preDiscountPrice'],
        'price': value['price'],
        'regionId': value['regionId'],
        'shippingCost': value['shippingCost'],
        'shopName': value['shopName'],
        'shopRating': value['shopRating'],
        'inStock': value['inStock'],
    };
}

