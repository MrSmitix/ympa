/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReturnDecisionType } from './ReturnDecisionType';
import {
    ReturnDecisionTypeFromJSON,
    ReturnDecisionTypeFromJSONTyped,
    ReturnDecisionTypeToJSON,
} from './ReturnDecisionType';
import type { ReturnDecisionReasonType } from './ReturnDecisionReasonType';
import {
    ReturnDecisionReasonTypeFromJSON,
    ReturnDecisionReasonTypeFromJSONTyped,
    ReturnDecisionReasonTypeToJSON,
} from './ReturnDecisionReasonType';
import type { ReturnDecisionSubreasonType } from './ReturnDecisionSubreasonType';
import {
    ReturnDecisionSubreasonTypeFromJSON,
    ReturnDecisionSubreasonTypeFromJSONTyped,
    ReturnDecisionSubreasonTypeToJSON,
} from './ReturnDecisionSubreasonType';

/**
 * Решения по возвратам.
 * @export
 * @interface ReturnDecisionDTO
 */
export interface ReturnDecisionDTO {
    /**
     * Идентификатор товара в возврате.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    returnItemId?: number;
    /**
     * Количество единиц товара.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    count?: number;
    /**
     * Комментарий.
     * @type {string}
     * @memberof ReturnDecisionDTO
     */
    comment?: string;
    /**
     * 
     * @type {ReturnDecisionReasonType}
     * @memberof ReturnDecisionDTO
     */
    reasonType?: ReturnDecisionReasonType;
    /**
     * 
     * @type {ReturnDecisionSubreasonType}
     * @memberof ReturnDecisionDTO
     */
    subreasonType?: ReturnDecisionSubreasonType;
    /**
     * 
     * @type {ReturnDecisionType}
     * @memberof ReturnDecisionDTO
     */
    decisionType?: ReturnDecisionType;
    /**
     * Сумма возврата.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    refundAmount?: number;
    /**
     * Компенсация за обратную доставку.
     * @type {number}
     * @memberof ReturnDecisionDTO
     */
    partnerCompensation?: number;
    /**
     * Список хеш-кодов фотографий товара от покупателя.
     * @type {Array<string>}
     * @memberof ReturnDecisionDTO
     */
    images?: Array<string> | null;
}



/**
 * Check if a given object implements the ReturnDecisionDTO interface.
 */
export function instanceOfReturnDecisionDTO(value: object): value is ReturnDecisionDTO {
    return true;
}

export function ReturnDecisionDTOFromJSON(json: any): ReturnDecisionDTO {
    return ReturnDecisionDTOFromJSONTyped(json, false);
}

export function ReturnDecisionDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReturnDecisionDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'returnItemId': json['returnItemId'] == null ? undefined : json['returnItemId'],
        'count': json['count'] == null ? undefined : json['count'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'reasonType': json['reasonType'] == null ? undefined : ReturnDecisionReasonTypeFromJSON(json['reasonType']),
        'subreasonType': json['subreasonType'] == null ? undefined : ReturnDecisionSubreasonTypeFromJSON(json['subreasonType']),
        'decisionType': json['decisionType'] == null ? undefined : ReturnDecisionTypeFromJSON(json['decisionType']),
        'refundAmount': json['refundAmount'] == null ? undefined : json['refundAmount'],
        'partnerCompensation': json['partnerCompensation'] == null ? undefined : json['partnerCompensation'],
        'images': json['images'] == null ? undefined : json['images'],
    };
}

export function ReturnDecisionDTOToJSON(value?: ReturnDecisionDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'returnItemId': value['returnItemId'],
        'count': value['count'],
        'comment': value['comment'],
        'reasonType': ReturnDecisionReasonTypeToJSON(value['reasonType']),
        'subreasonType': ReturnDecisionSubreasonTypeToJSON(value['subreasonType']),
        'decisionType': ReturnDecisionTypeToJSON(value['decisionType']),
        'refundAmount': value['refundAmount'],
        'partnerCompensation': value['partnerCompensation'],
        'images': value['images'],
    };
}

