/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LogisticPickupPointDTO } from './LogisticPickupPointDTO';
import {
    LogisticPickupPointDTOFromJSON,
    LogisticPickupPointDTOFromJSONTyped,
    LogisticPickupPointDTOToJSON,
} from './LogisticPickupPointDTO';
import type { ReturnItemDTO } from './ReturnItemDTO';
import {
    ReturnItemDTOFromJSON,
    ReturnItemDTOFromJSONTyped,
    ReturnItemDTOToJSON,
} from './ReturnItemDTO';
import type { RefundStatusType } from './RefundStatusType';
import {
    RefundStatusTypeFromJSON,
    RefundStatusTypeFromJSONTyped,
    RefundStatusTypeToJSON,
} from './RefundStatusType';
import type { RecipientType } from './RecipientType';
import {
    RecipientTypeFromJSON,
    RecipientTypeFromJSONTyped,
    RecipientTypeToJSON,
} from './RecipientType';
import type { ReturnType } from './ReturnType';
import {
    ReturnTypeFromJSON,
    ReturnTypeFromJSONTyped,
    ReturnTypeToJSON,
} from './ReturnType';
import type { ReturnShipmentStatusType } from './ReturnShipmentStatusType';
import {
    ReturnShipmentStatusTypeFromJSON,
    ReturnShipmentStatusTypeFromJSONTyped,
    ReturnShipmentStatusTypeToJSON,
} from './ReturnShipmentStatusType';

/**
 * Возврат заказа.
 * @export
 * @interface ReturnDTO
 */
export interface ReturnDTO {
    /**
     * Идентификатор возврата.
     * @type {number}
     * @memberof ReturnDTO
     */
    id?: number;
    /**
     * Номер заказа.
     * @type {number}
     * @memberof ReturnDTO
     */
    orderId?: number;
    /**
     * Дата создания возврата клиентом.
     * @type {Date}
     * @memberof ReturnDTO
     */
    creationDate?: Date;
    /**
     * Дата обновления возврата.
     * @type {Date}
     * @memberof ReturnDTO
     */
    updateDate?: Date;
    /**
     * 
     * @type {RefundStatusType}
     * @memberof ReturnDTO
     */
    refundStatus?: RefundStatusType;
    /**
     * 
     * @type {LogisticPickupPointDTO}
     * @memberof ReturnDTO
     */
    logisticPickupPoint?: LogisticPickupPointDTO;
    /**
     * 
     * @type {RecipientType}
     * @memberof ReturnDTO
     */
    shipmentRecipientType?: RecipientType;
    /**
     * 
     * @type {ReturnShipmentStatusType}
     * @memberof ReturnDTO
     */
    shipmentStatus?: ReturnShipmentStatusType;
    /**
     * Сумма возврата.
     * @type {number}
     * @memberof ReturnDTO
     */
    refundAmount?: number;
    /**
     * Список товаров в возврате.
     * @type {Array<ReturnItemDTO>}
     * @memberof ReturnDTO
     */
    items: Array<ReturnItemDTO>;
    /**
     * 
     * @type {ReturnType}
     * @memberof ReturnDTO
     */
    returnType?: ReturnType;
    /**
     * Используется ли опция **Быстрый возврат денег за дешевый брак**.
     * 
     * @type {boolean}
     * @memberof ReturnDTO
     */
    fastReturn?: boolean;
}



/**
 * Check if a given object implements the ReturnDTO interface.
 */
export function instanceOfReturnDTO(value: object): value is ReturnDTO {
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function ReturnDTOFromJSON(json: any): ReturnDTO {
    return ReturnDTOFromJSONTyped(json, false);
}

export function ReturnDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReturnDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'orderId': json['orderId'] == null ? undefined : json['orderId'],
        'creationDate': json['creationDate'] == null ? undefined : (new Date(json['creationDate'])),
        'updateDate': json['updateDate'] == null ? undefined : (new Date(json['updateDate'])),
        'refundStatus': json['refundStatus'] == null ? undefined : RefundStatusTypeFromJSON(json['refundStatus']),
        'logisticPickupPoint': json['logisticPickupPoint'] == null ? undefined : LogisticPickupPointDTOFromJSON(json['logisticPickupPoint']),
        'shipmentRecipientType': json['shipmentRecipientType'] == null ? undefined : RecipientTypeFromJSON(json['shipmentRecipientType']),
        'shipmentStatus': json['shipmentStatus'] == null ? undefined : ReturnShipmentStatusTypeFromJSON(json['shipmentStatus']),
        'refundAmount': json['refundAmount'] == null ? undefined : json['refundAmount'],
        'items': ((json['items'] as Array<any>).map(ReturnItemDTOFromJSON)),
        'returnType': json['returnType'] == null ? undefined : ReturnTypeFromJSON(json['returnType']),
        'fastReturn': json['fastReturn'] == null ? undefined : json['fastReturn'],
    };
}

export function ReturnDTOToJSON(value?: ReturnDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'orderId': value['orderId'],
        'creationDate': value['creationDate'] == null ? undefined : ((value['creationDate']).toISOString()),
        'updateDate': value['updateDate'] == null ? undefined : ((value['updateDate']).toISOString()),
        'refundStatus': RefundStatusTypeToJSON(value['refundStatus']),
        'logisticPickupPoint': LogisticPickupPointDTOToJSON(value['logisticPickupPoint']),
        'shipmentRecipientType': RecipientTypeToJSON(value['shipmentRecipientType']),
        'shipmentStatus': ReturnShipmentStatusTypeToJSON(value['shipmentStatus']),
        'refundAmount': value['refundAmount'],
        'items': ((value['items'] as Array<any>).map(ReturnItemDTOToJSON)),
        'returnType': ReturnTypeToJSON(value['returnType']),
        'fastReturn': value['fastReturn'],
    };
}

