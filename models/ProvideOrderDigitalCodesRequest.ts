/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderDigitalItemDTO } from './OrderDigitalItemDTO';
import {
    OrderDigitalItemDTOFromJSON,
    OrderDigitalItemDTOFromJSONTyped,
    OrderDigitalItemDTOToJSON,
} from './OrderDigitalItemDTO';

/**
 * Запрос на передачу ключей цифровых товаров.
 * @export
 * @interface ProvideOrderDigitalCodesRequest
 */
export interface ProvideOrderDigitalCodesRequest {
    /**
     * Список проданных ключей.
     * 
     * Если в заказе есть несколько **одинаковых** товаров (например, несколько ключей к одной и той же подписке), передайте каждый в виде отдельного элемента массива. `id` у этих элементов должен быть один и тот же.
     * 
     * @type {Array<OrderDigitalItemDTO>}
     * @memberof ProvideOrderDigitalCodesRequest
     */
    items: Array<OrderDigitalItemDTO>;
}

/**
 * Check if a given object implements the ProvideOrderDigitalCodesRequest interface.
 */
export function instanceOfProvideOrderDigitalCodesRequest(value: object): value is ProvideOrderDigitalCodesRequest {
    if (!('items' in value) || value['items'] === undefined) return false;
    return true;
}

export function ProvideOrderDigitalCodesRequestFromJSON(json: any): ProvideOrderDigitalCodesRequest {
    return ProvideOrderDigitalCodesRequestFromJSONTyped(json, false);
}

export function ProvideOrderDigitalCodesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProvideOrderDigitalCodesRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(OrderDigitalItemDTOFromJSON)),
    };
}

export function ProvideOrderDigitalCodesRequestToJSON(value?: ProvideOrderDigitalCodesRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'items': ((value['items'] as Array<any>).map(OrderDigitalItemDTOToJSON)),
    };
}

