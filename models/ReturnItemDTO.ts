/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ReturnDecisionDTO } from './ReturnDecisionDTO';
import {
    ReturnDecisionDTOFromJSON,
    ReturnDecisionDTOFromJSONTyped,
    ReturnDecisionDTOToJSON,
} from './ReturnDecisionDTO';
import type { ReturnInstanceDTO } from './ReturnInstanceDTO';
import {
    ReturnInstanceDTOFromJSON,
    ReturnInstanceDTOFromJSONTyped,
    ReturnInstanceDTOToJSON,
} from './ReturnInstanceDTO';
import type { TrackDTO } from './TrackDTO';
import {
    TrackDTOFromJSON,
    TrackDTOFromJSONTyped,
    TrackDTOToJSON,
} from './TrackDTO';

/**
 * Список товаров в возврате.
 * @export
 * @interface ReturnItemDTO
 */
export interface ReturnItemDTO {
    /**
     * SKU на Маркете.
     * @type {number}
     * @memberof ReturnItemDTO
     */
    marketSku?: number;
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof ReturnItemDTO
     */
    shopSku: string;
    /**
     * Количество единиц товара.
     * @type {number}
     * @memberof ReturnItemDTO
     */
    count: number;
    /**
     * Список решений по возврату.
     * @type {Array<ReturnDecisionDTO>}
     * @memberof ReturnItemDTO
     */
    decisions?: Array<ReturnDecisionDTO> | null;
    /**
     * Список логистических позиций возврата.
     * @type {Array<ReturnInstanceDTO>}
     * @memberof ReturnItemDTO
     */
    instances?: Array<ReturnInstanceDTO> | null;
    /**
     * Список трек-кодов для почтовых отправлений.
     * @type {Array<TrackDTO>}
     * @memberof ReturnItemDTO
     */
    tracks?: Array<TrackDTO> | null;
}

/**
 * Check if a given object implements the ReturnItemDTO interface.
 */
export function instanceOfReturnItemDTO(value: object): value is ReturnItemDTO {
    if (!('shopSku' in value) || value['shopSku'] === undefined) return false;
    if (!('count' in value) || value['count'] === undefined) return false;
    return true;
}

export function ReturnItemDTOFromJSON(json: any): ReturnItemDTO {
    return ReturnItemDTOFromJSONTyped(json, false);
}

export function ReturnItemDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReturnItemDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'marketSku': json['marketSku'] == null ? undefined : json['marketSku'],
        'shopSku': json['shopSku'],
        'count': json['count'],
        'decisions': json['decisions'] == null ? undefined : ((json['decisions'] as Array<any>).map(ReturnDecisionDTOFromJSON)),
        'instances': json['instances'] == null ? undefined : ((json['instances'] as Array<any>).map(ReturnInstanceDTOFromJSON)),
        'tracks': json['tracks'] == null ? undefined : ((json['tracks'] as Array<any>).map(TrackDTOFromJSON)),
    };
}

export function ReturnItemDTOToJSON(value?: ReturnItemDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'marketSku': value['marketSku'],
        'shopSku': value['shopSku'],
        'count': value['count'],
        'decisions': value['decisions'] == null ? undefined : ((value['decisions'] as Array<any>).map(ReturnDecisionDTOToJSON)),
        'instances': value['instances'] == null ? undefined : ((value['instances'] as Array<any>).map(ReturnInstanceDTOToJSON)),
        'tracks': value['tracks'] == null ? undefined : ((value['tracks'] as Array<any>).map(TrackDTOToJSON)),
    };
}

