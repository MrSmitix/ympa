/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrdersStatsItemStatusType } from './OrdersStatsItemStatusType';
import {
    OrdersStatsItemStatusTypeFromJSON,
    OrdersStatsItemStatusTypeFromJSONTyped,
    OrdersStatsItemStatusTypeToJSON,
} from './OrdersStatsItemStatusType';
import type { OrdersStatsStockType } from './OrdersStatsStockType';
import {
    OrdersStatsStockTypeFromJSON,
    OrdersStatsStockTypeFromJSONTyped,
    OrdersStatsStockTypeToJSON,
} from './OrdersStatsStockType';

/**
 * Информация об удалении товара из заказа.
 * @export
 * @interface OrdersStatsDetailsDTO
 */
export interface OrdersStatsDetailsDTO {
    /**
     * 
     * @type {OrdersStatsItemStatusType}
     * @memberof OrdersStatsDetailsDTO
     */
    itemStatus?: OrdersStatsItemStatusType;
    /**
     * Количество товара со статусом, указанном в параметре `itemStatus`.
     * @type {number}
     * @memberof OrdersStatsDetailsDTO
     */
    itemCount?: number;
    /**
     * Дата, когда товар получил статус, указанный в параметре `itemStatus`.
     * 
     * Формат даты: `ГГГГ-ММ-ДД`.
     * 
     * @type {Date}
     * @memberof OrdersStatsDetailsDTO
     */
    updateDate?: Date;
    /**
     * 
     * @type {OrdersStatsStockType}
     * @memberof OrdersStatsDetailsDTO
     */
    stockType?: OrdersStatsStockType;
}



/**
 * Check if a given object implements the OrdersStatsDetailsDTO interface.
 */
export function instanceOfOrdersStatsDetailsDTO(value: object): value is OrdersStatsDetailsDTO {
    return true;
}

export function OrdersStatsDetailsDTOFromJSON(json: any): OrdersStatsDetailsDTO {
    return OrdersStatsDetailsDTOFromJSONTyped(json, false);
}

export function OrdersStatsDetailsDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrdersStatsDetailsDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'itemStatus': json['itemStatus'] == null ? undefined : OrdersStatsItemStatusTypeFromJSON(json['itemStatus']),
        'itemCount': json['itemCount'] == null ? undefined : json['itemCount'],
        'updateDate': json['updateDate'] == null ? undefined : (new Date(json['updateDate'])),
        'stockType': json['stockType'] == null ? undefined : OrdersStatsStockTypeFromJSON(json['stockType']),
    };
}

export function OrdersStatsDetailsDTOToJSON(value?: OrdersStatsDetailsDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'itemStatus': OrdersStatsItemStatusTypeToJSON(value['itemStatus']),
        'itemCount': value['itemCount'],
        'updateDate': value['updateDate'] == null ? undefined : ((value['updateDate']).toISOString().substring(0,10)),
        'stockType': OrdersStatsStockTypeToJSON(value['stockType']),
    };
}

