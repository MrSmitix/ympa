/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeedbackCommentAuthorDTO } from './FeedbackCommentAuthorDTO';
import {
    FeedbackCommentAuthorDTOFromJSON,
    FeedbackCommentAuthorDTOFromJSONTyped,
    FeedbackCommentAuthorDTOToJSON,
} from './FeedbackCommentAuthorDTO';

/**
 * Комментарий к отзыву на магазин.
 * @export
 * @interface FeedbackCommentDTO
 */
export interface FeedbackCommentDTO {
    /**
     * Идентификатор ответа.
     * @type {number}
     * @memberof FeedbackCommentDTO
     */
    id?: number;
    /**
     * Идентификатор родительского ответа.
     * @type {number}
     * @memberof FeedbackCommentDTO
     */
    parentId?: number;
    /**
     * Текст ответа.
     * @type {string}
     * @memberof FeedbackCommentDTO
     */
    body?: string;
    /**
     * Дата и время создания ответа.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
     * 
     * @type {Date}
     * @memberof FeedbackCommentDTO
     */
    createdAt?: Date;
    /**
     * Дата и время изменения ответа.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
     * 
     * @type {Date}
     * @memberof FeedbackCommentDTO
     */
    updatedAt?: Date;
    /**
     * 
     * @type {FeedbackCommentAuthorDTO}
     * @memberof FeedbackCommentDTO
     */
    author?: FeedbackCommentAuthorDTO;
    /**
     * Дочерние ответы.
     * @type {Array<FeedbackCommentDTO>}
     * @memberof FeedbackCommentDTO
     */
    children?: Array<FeedbackCommentDTO> | null;
}

/**
 * Check if a given object implements the FeedbackCommentDTO interface.
 */
export function instanceOfFeedbackCommentDTO(value: object): value is FeedbackCommentDTO {
    return true;
}

export function FeedbackCommentDTOFromJSON(json: any): FeedbackCommentDTO {
    return FeedbackCommentDTOFromJSONTyped(json, false);
}

export function FeedbackCommentDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedbackCommentDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'body': json['body'] == null ? undefined : json['body'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'author': json['author'] == null ? undefined : FeedbackCommentAuthorDTOFromJSON(json['author']),
        'children': json['children'] == null ? undefined : ((json['children'] as Array<any>).map(FeedbackCommentDTOFromJSON)),
    };
}

export function FeedbackCommentDTOToJSON(value?: FeedbackCommentDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'parentId': value['parentId'],
        'body': value['body'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'author': FeedbackCommentAuthorDTOToJSON(value['author']),
        'children': value['children'] == null ? undefined : ((value['children'] as Array<any>).map(FeedbackCommentDTOToJSON)),
    };
}

