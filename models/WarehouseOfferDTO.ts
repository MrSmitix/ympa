/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WarehouseStockDTO } from './WarehouseStockDTO';
import {
    WarehouseStockDTOFromJSON,
    WarehouseStockDTOFromJSONTyped,
    WarehouseStockDTOToJSON,
} from './WarehouseStockDTO';
import type { TurnoverDTO } from './TurnoverDTO';
import {
    TurnoverDTOFromJSON,
    TurnoverDTOFromJSONTyped,
    TurnoverDTOToJSON,
} from './TurnoverDTO';

/**
 * Информация об остатках товара.
 * @export
 * @interface WarehouseOfferDTO
 */
export interface WarehouseOfferDTO {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof WarehouseOfferDTO
     */
    offerId: string;
    /**
     * 
     * @type {TurnoverDTO}
     * @memberof WarehouseOfferDTO
     */
    turnoverSummary?: TurnoverDTO;
    /**
     * Информация об остатках.
     * @type {Array<WarehouseStockDTO>}
     * @memberof WarehouseOfferDTO
     */
    stocks: Array<WarehouseStockDTO>;
    /**
     * Дата и время последнего обновления информации об остатках.
     * 
     * Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, `2023-11-21T00:42:42+03:00`.
     * 
     * @type {Date}
     * @memberof WarehouseOfferDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the WarehouseOfferDTO interface.
 */
export function instanceOfWarehouseOfferDTO(value: object): value is WarehouseOfferDTO {
    if (!('offerId' in value) || value['offerId'] === undefined) return false;
    if (!('stocks' in value) || value['stocks'] === undefined) return false;
    return true;
}

export function WarehouseOfferDTOFromJSON(json: any): WarehouseOfferDTO {
    return WarehouseOfferDTOFromJSONTyped(json, false);
}

export function WarehouseOfferDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): WarehouseOfferDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'offerId': json['offerId'],
        'turnoverSummary': json['turnoverSummary'] == null ? undefined : TurnoverDTOFromJSON(json['turnoverSummary']),
        'stocks': ((json['stocks'] as Array<any>).map(WarehouseStockDTOFromJSON)),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function WarehouseOfferDTOToJSON(value?: WarehouseOfferDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'offerId': value['offerId'],
        'turnoverSummary': TurnoverDTOToJSON(value['turnoverSummary']),
        'stocks': ((value['stocks'] as Array<any>).map(WarehouseStockDTOToJSON)),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

