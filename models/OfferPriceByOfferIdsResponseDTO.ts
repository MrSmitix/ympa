/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PriceDTO } from './PriceDTO';
import {
    PriceDTOFromJSON,
    PriceDTOFromJSONTyped,
    PriceDTOToJSON,
} from './PriceDTO';

/**
 * Информация об установленной цене.
 * @export
 * @interface OfferPriceByOfferIdsResponseDTO
 */
export interface OfferPriceByOfferIdsResponseDTO {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof OfferPriceByOfferIdsResponseDTO
     */
    offerId?: string;
    /**
     * 
     * @type {PriceDTO}
     * @memberof OfferPriceByOfferIdsResponseDTO
     */
    price?: PriceDTO;
    /**
     * Дата и время последнего обновления цены.
     * @type {Date}
     * @memberof OfferPriceByOfferIdsResponseDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the OfferPriceByOfferIdsResponseDTO interface.
 */
export function instanceOfOfferPriceByOfferIdsResponseDTO(value: object): value is OfferPriceByOfferIdsResponseDTO {
    return true;
}

export function OfferPriceByOfferIdsResponseDTOFromJSON(json: any): OfferPriceByOfferIdsResponseDTO {
    return OfferPriceByOfferIdsResponseDTOFromJSONTyped(json, false);
}

export function OfferPriceByOfferIdsResponseDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OfferPriceByOfferIdsResponseDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'offerId': json['offerId'] == null ? undefined : json['offerId'],
        'price': json['price'] == null ? undefined : PriceDTOFromJSON(json['price']),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function OfferPriceByOfferIdsResponseDTOToJSON(value?: OfferPriceByOfferIdsResponseDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'offerId': value['offerId'],
        'price': PriceDTOToJSON(value['price']),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

