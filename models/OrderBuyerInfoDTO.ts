/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderBuyerType } from './OrderBuyerType';
import {
    OrderBuyerTypeFromJSON,
    OrderBuyerTypeFromJSONTyped,
    OrderBuyerTypeToJSON,
} from './OrderBuyerType';

/**
 * Информация о покупателе и его номере телефона.
 * @export
 * @interface OrderBuyerInfoDTO
 */
export interface OrderBuyerInfoDTO {
    /**
     * Идентификатор покупателя.
     * @type {string}
     * @memberof OrderBuyerInfoDTO
     */
    id?: string;
    /**
     * Фамилия покупателя.
     * @type {string}
     * @memberof OrderBuyerInfoDTO
     */
    lastName?: string;
    /**
     * Имя покупателя.
     * @type {string}
     * @memberof OrderBuyerInfoDTO
     */
    firstName?: string;
    /**
     * Отчество покупателя.
     * @type {string}
     * @memberof OrderBuyerInfoDTO
     */
    middleName?: string;
    /**
     * 
     * @type {OrderBuyerType}
     * @memberof OrderBuyerInfoDTO
     */
    type?: OrderBuyerType;
    /**
     * Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).
     * 
     * Формат номера: `+<код_страны><код_региона><номер_телефона>`.
     * 
     * @type {string}
     * @memberof OrderBuyerInfoDTO
     */
    phone?: string;
}



/**
 * Check if a given object implements the OrderBuyerInfoDTO interface.
 */
export function instanceOfOrderBuyerInfoDTO(value: object): value is OrderBuyerInfoDTO {
    return true;
}

export function OrderBuyerInfoDTOFromJSON(json: any): OrderBuyerInfoDTO {
    return OrderBuyerInfoDTOFromJSONTyped(json, false);
}

export function OrderBuyerInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderBuyerInfoDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'middleName': json['middleName'] == null ? undefined : json['middleName'],
        'type': json['type'] == null ? undefined : OrderBuyerTypeFromJSON(json['type']),
        'phone': json['phone'] == null ? undefined : json['phone'],
    };
}

export function OrderBuyerInfoDTOToJSON(value?: OrderBuyerInfoDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'lastName': value['lastName'],
        'firstName': value['firstName'],
        'middleName': value['middleName'],
        'type': OrderBuyerTypeToJSON(value['type']),
        'phone': value['phone'],
    };
}

