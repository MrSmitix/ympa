/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { FeedContentErrorDTO } from './FeedContentErrorDTO';
import {
    FeedContentErrorDTOFromJSON,
    FeedContentErrorDTOFromJSONTyped,
    FeedContentErrorDTOToJSON,
} from './FeedContentErrorDTO';
import type { FeedStatusType } from './FeedStatusType';
import {
    FeedStatusTypeFromJSON,
    FeedStatusTypeFromJSONTyped,
    FeedStatusTypeToJSON,
} from './FeedStatusType';

/**
 * Информация о проверке содержимого прайс-листа, загруженного на Маркет.
 * @export
 * @interface FeedContentDTO
 */
export interface FeedContentDTO {
    /**
     * Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа.
     * Выводится, если параметр `content status=OK`.
     * 
     * @type {number}
     * @memberof FeedContentDTO
     */
    rejectedOffersCount?: number;
    /**
     * 
     * @type {FeedStatusType}
     * @memberof FeedContentDTO
     */
    status?: FeedStatusType;
    /**
     * Количество предложений в прайс-листе.
     * Выводится, если параметр `content status=OK`.
     * 
     * @type {number}
     * @memberof FeedContentDTO
     */
    totalOffersCount?: number;
    /**
     * 
     * @type {FeedContentErrorDTO}
     * @memberof FeedContentDTO
     */
    error?: FeedContentErrorDTO;
}



/**
 * Check if a given object implements the FeedContentDTO interface.
 */
export function instanceOfFeedContentDTO(value: object): value is FeedContentDTO {
    return true;
}

export function FeedContentDTOFromJSON(json: any): FeedContentDTO {
    return FeedContentDTOFromJSONTyped(json, false);
}

export function FeedContentDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeedContentDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'rejectedOffersCount': json['rejectedOffersCount'] == null ? undefined : json['rejectedOffersCount'],
        'status': json['status'] == null ? undefined : FeedStatusTypeFromJSON(json['status']),
        'totalOffersCount': json['totalOffersCount'] == null ? undefined : json['totalOffersCount'],
        'error': json['error'] == null ? undefined : FeedContentErrorDTOFromJSON(json['error']),
    };
}

export function FeedContentDTOToJSON(value?: FeedContentDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'rejectedOffersCount': value['rejectedOffersCount'],
        'status': FeedStatusTypeToJSON(value['status']),
        'totalOffersCount': value['totalOffersCount'],
        'error': FeedContentErrorDTOToJSON(value['error']),
    };
}

