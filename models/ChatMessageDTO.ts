/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatMessagePayloadDTO } from './ChatMessagePayloadDTO';
import {
    ChatMessagePayloadDTOFromJSON,
    ChatMessagePayloadDTOFromJSONTyped,
    ChatMessagePayloadDTOToJSON,
} from './ChatMessagePayloadDTO';
import type { ChatMessageSenderType } from './ChatMessageSenderType';
import {
    ChatMessageSenderTypeFromJSON,
    ChatMessageSenderTypeFromJSONTyped,
    ChatMessageSenderTypeToJSON,
} from './ChatMessageSenderType';

/**
 * Информация о сообщениях.
 * @export
 * @interface ChatMessageDTO
 */
export interface ChatMessageDTO {
    /**
     * Идентификатор сообщения.
     * @type {number}
     * @memberof ChatMessageDTO
     */
    messageId: number;
    /**
     * Дата и время создания сообщения.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
     * 
     * @type {Date}
     * @memberof ChatMessageDTO
     */
    createdAt: Date;
    /**
     * 
     * @type {ChatMessageSenderType}
     * @memberof ChatMessageDTO
     */
    sender: ChatMessageSenderType;
    /**
     * Текст сообщения.
     * 
     * Необязательный параметр, если возвращается параметр `payload`.
     * 
     * @type {string}
     * @memberof ChatMessageDTO
     */
    message?: string;
    /**
     * Информация о приложенных к сообщению файлах.
     * 
     * Необязательный параметр, если возвращается параметр `message`.
     * 
     * @type {Array<ChatMessagePayloadDTO>}
     * @memberof ChatMessageDTO
     */
    payload?: Array<ChatMessagePayloadDTO> | null;
}



/**
 * Check if a given object implements the ChatMessageDTO interface.
 */
export function instanceOfChatMessageDTO(value: object): value is ChatMessageDTO {
    if (!('messageId' in value) || value['messageId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('sender' in value) || value['sender'] === undefined) return false;
    return true;
}

export function ChatMessageDTOFromJSON(json: any): ChatMessageDTO {
    return ChatMessageDTOFromJSONTyped(json, false);
}

export function ChatMessageDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatMessageDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'messageId': json['messageId'],
        'createdAt': (new Date(json['createdAt'])),
        'sender': ChatMessageSenderTypeFromJSON(json['sender']),
        'message': json['message'] == null ? undefined : json['message'],
        'payload': json['payload'] == null ? undefined : ((json['payload'] as Array<any>).map(ChatMessagePayloadDTOFromJSON)),
    };
}

export function ChatMessageDTOToJSON(value?: ChatMessageDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'messageId': value['messageId'],
        'createdAt': ((value['createdAt']).toISOString()),
        'sender': ChatMessageSenderTypeToJSON(value['sender']),
        'message': value['message'],
        'payload': value['payload'] == null ? undefined : ((value['payload'] as Array<any>).map(ChatMessagePayloadDTOToJSON)),
    };
}

