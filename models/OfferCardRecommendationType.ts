/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * Рекомендация по дополнению или замене контента. Не возвращается для карточек, которые заполнены Маркетом или содержат бывшие в употреблении товары.
 * 
 * Часть рекомендаций относятся к **основным параметрам**, которые есть у товаров любых категорий. Другие — к тем **характеристикам**, которые есть у товара потому, что он относится к определенной категории.
 * 
 * **1. Рекомендации, относящиеся к основным параметрам**
 * 
 * Каждая такая рекомендация относится к **единственному параметру**. Чтобы заполнить этот параметр, пользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).
 * 
 * Рекомендации по заполнению параметров в `updateOfferMappings`:
 * 
 * * `RECOGNIZED_VENDOR` — напишите название производителя так, как его пишет сам производитель (параметр `vendor`).
 * * `PICTURE_COUNT` — добавьте изображения (параметр `pictures`).
 * * `FIRST_PICTURE_SIZE` — замените первое изображение более крупным (параметр `pictures`).
 * * `TITLE_LENGTH` — измените название (параметр `name`). Составьте название по схеме: тип + бренд или производитель + модель + особенности, если есть (размер, вес, цвет).
 * * `DESCRIPTION_LENGTH` — добавьте описание рекомендуемого размера (параметр `description`).
 * * `AVERAGE_PICTURE_SIZE` — замените все изображения на изображения высокого качества (параметр `pictures`).
 * * `FIRST_VIDEO_LENGTH` — добавьте первое видео рекомендуемой длины (параметр `videos`).
 * * `AVERAGE_VIDEO_SIZE` — замените все видео на видео высокого качества (параметр `videos`).
 * * `VIDEO_COUNT` — добавьте больше видео (параметр `videos`).
 * 
 * Рекомендуемые значения параметров описаны в [Справке Яндекс Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/add/).
 * 
 * **2. Рекомендации, относящиеся к характеристикам по категориям**
 * 
 * Каждая такая рекомендация предполагает заполнение **одной или нескольких характеристик**. Чтобы узнать, какие именно характеристики нужно заполнить, воспользуйтесь запросом [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md). Например, если вы получили рекомендацию `MAIN`, нужно заполнить характеристики, имеющие `MAIN` в массиве `recommendationTypes`.
 * 
 * Рекомендации:
 * 
 * * `MAIN` — заполните ключевые характеристики товара, которые используются в поиске и фильтрах.
 * * `ADDITIONAL` — заполните дополнительные характеристики товара.
 * * `DISTINCTIVE` — заполните характеристики, которыми отличаются друг от друга варианты товара.
 * 
 * **3. Устаревшие рекомендации**
 * 
 * * `HAS_VIDEO`.
 * * `FILTERABLE`.
 * * `HAS_DESCRIPTION`.
 * * `HAS_BARCODE`.
 * 
 * @export
 */
export const OfferCardRecommendationType = {
    HasVideo: 'HAS_VIDEO',
    RecognizedVendor: 'RECOGNIZED_VENDOR',
    Main: 'MAIN',
    Additional: 'ADDITIONAL',
    Distinctive: 'DISTINCTIVE',
    Filterable: 'FILTERABLE',
    PictureCount: 'PICTURE_COUNT',
    HasDescription: 'HAS_DESCRIPTION',
    HasBarcode: 'HAS_BARCODE',
    FirstPictureSize: 'FIRST_PICTURE_SIZE',
    TitleLength: 'TITLE_LENGTH',
    DescriptionLength: 'DESCRIPTION_LENGTH',
    AveragePictureSize: 'AVERAGE_PICTURE_SIZE',
    FirstVideoSize: 'FIRST_VIDEO_SIZE',
    FirstVideoLength: 'FIRST_VIDEO_LENGTH',
    AverageVideoSize: 'AVERAGE_VIDEO_SIZE',
    VideoCount: 'VIDEO_COUNT'
} as const;
export type OfferCardRecommendationType = typeof OfferCardRecommendationType[keyof typeof OfferCardRecommendationType];


export function instanceOfOfferCardRecommendationType(value: any): boolean {
    for (const key in OfferCardRecommendationType) {
        if (Object.prototype.hasOwnProperty.call(OfferCardRecommendationType, key)) {
            if (OfferCardRecommendationType[key as keyof typeof OfferCardRecommendationType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function OfferCardRecommendationTypeFromJSON(json: any): OfferCardRecommendationType {
    return OfferCardRecommendationTypeFromJSONTyped(json, false);
}

export function OfferCardRecommendationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OfferCardRecommendationType {
    return json as OfferCardRecommendationType;
}

export function OfferCardRecommendationTypeToJSON(value?: OfferCardRecommendationType | null): any {
    return value as any;
}

