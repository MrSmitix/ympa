/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LicenseCheckStatusType } from './LicenseCheckStatusType';
import {
    LicenseCheckStatusTypeFromJSON,
    LicenseCheckStatusTypeFromJSONTyped,
    LicenseCheckStatusTypeToJSON,
} from './LicenseCheckStatusType';
import type { LicenseType } from './LicenseType';
import {
    LicenseTypeFromJSON,
    LicenseTypeFromJSONTyped,
    LicenseTypeToJSON,
} from './LicenseType';

/**
 * Информация о лицензии.
 * @export
 * @interface FullOutletLicenseDTO
 */
export interface FullOutletLicenseDTO {
    /**
     * Идентификатор лицензии.
     * 
     * Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.
     * 
     * Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре `number`.
     * 
     * @type {number}
     * @memberof FullOutletLicenseDTO
     */
    id?: number;
    /**
     * Идентификатор точки продаж, для которой действительна лицензия.
     * @type {number}
     * @memberof FullOutletLicenseDTO
     */
    outletId?: number;
    /**
     * 
     * @type {LicenseType}
     * @memberof FullOutletLicenseDTO
     */
    licenseType?: LicenseType;
    /**
     * Номер лицензии.
     * @type {string}
     * @memberof FullOutletLicenseDTO
     */
    number?: string;
    /**
     * Дата выдачи лицензии.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.
     * 
     * Обязательный параметр.
     * 
     * Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`.
     * 
     * @type {Date}
     * @memberof FullOutletLicenseDTO
     */
    dateOfIssue?: Date;
    /**
     * Дата окончания действия лицензии.
     * 
     * Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.
     * 
     * Обязательный параметр.
     * 
     * Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`.
     * 
     * @type {Date}
     * @memberof FullOutletLicenseDTO
     */
    dateOfExpiry?: Date;
    /**
     * 
     * @type {LicenseCheckStatusType}
     * @memberof FullOutletLicenseDTO
     */
    checkStatus?: LicenseCheckStatusType;
    /**
     * Причина, по которой лицензия не прошла проверку.
     * 
     * Параметр возвращается, только если параметр `checkStatus` имеет значение `FAIL`.
     * 
     * @type {string}
     * @memberof FullOutletLicenseDTO
     */
    checkComment?: string;
}



/**
 * Check if a given object implements the FullOutletLicenseDTO interface.
 */
export function instanceOfFullOutletLicenseDTO(value: object): value is FullOutletLicenseDTO {
    return true;
}

export function FullOutletLicenseDTOFromJSON(json: any): FullOutletLicenseDTO {
    return FullOutletLicenseDTOFromJSONTyped(json, false);
}

export function FullOutletLicenseDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): FullOutletLicenseDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'outletId': json['outletId'] == null ? undefined : json['outletId'],
        'licenseType': json['licenseType'] == null ? undefined : LicenseTypeFromJSON(json['licenseType']),
        'number': json['number'] == null ? undefined : json['number'],
        'dateOfIssue': json['dateOfIssue'] == null ? undefined : (new Date(json['dateOfIssue'])),
        'dateOfExpiry': json['dateOfExpiry'] == null ? undefined : (new Date(json['dateOfExpiry'])),
        'checkStatus': json['checkStatus'] == null ? undefined : LicenseCheckStatusTypeFromJSON(json['checkStatus']),
        'checkComment': json['checkComment'] == null ? undefined : json['checkComment'],
    };
}

export function FullOutletLicenseDTOToJSON(value?: FullOutletLicenseDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'outletId': value['outletId'],
        'licenseType': LicenseTypeToJSON(value['licenseType']),
        'number': value['number'],
        'dateOfIssue': value['dateOfIssue'] == null ? undefined : ((value['dateOfIssue']).toISOString()),
        'dateOfExpiry': value['dateOfExpiry'] == null ? undefined : ((value['dateOfExpiry']).toISOString()),
        'checkStatus': LicenseCheckStatusTypeToJSON(value['checkStatus']),
        'checkComment': value['checkComment'],
    };
}

