/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OfferMappingErrorDTO } from './OfferMappingErrorDTO';
import {
    OfferMappingErrorDTOFromJSON,
    OfferMappingErrorDTOFromJSONTyped,
    OfferMappingErrorDTOToJSON,
} from './OfferMappingErrorDTO';

/**
 * Ошибки и предупреждения, которые появились из-за переданных характеристик.
 * @export
 * @interface UpdateOfferMappingResultDTO
 */
export interface UpdateOfferMappingResultDTO {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof UpdateOfferMappingResultDTO
     */
    offerId: string;
    /**
     * Ошибки — информация в каталоге не обновится.
     * @type {Array<OfferMappingErrorDTO>}
     * @memberof UpdateOfferMappingResultDTO
     */
    errors?: Array<OfferMappingErrorDTO> | null;
    /**
     * Предупреждения — информация в каталоге обновится.
     * @type {Array<OfferMappingErrorDTO>}
     * @memberof UpdateOfferMappingResultDTO
     */
    warnings?: Array<OfferMappingErrorDTO> | null;
}

/**
 * Check if a given object implements the UpdateOfferMappingResultDTO interface.
 */
export function instanceOfUpdateOfferMappingResultDTO(value: object): value is UpdateOfferMappingResultDTO {
    if (!('offerId' in value) || value['offerId'] === undefined) return false;
    return true;
}

export function UpdateOfferMappingResultDTOFromJSON(json: any): UpdateOfferMappingResultDTO {
    return UpdateOfferMappingResultDTOFromJSONTyped(json, false);
}

export function UpdateOfferMappingResultDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateOfferMappingResultDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'offerId': json['offerId'],
        'errors': json['errors'] == null ? undefined : ((json['errors'] as Array<any>).map(OfferMappingErrorDTOFromJSON)),
        'warnings': json['warnings'] == null ? undefined : ((json['warnings'] as Array<any>).map(OfferMappingErrorDTOFromJSON)),
    };
}

export function UpdateOfferMappingResultDTOToJSON(value?: UpdateOfferMappingResultDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'offerId': value['offerId'],
        'errors': value['errors'] == null ? undefined : ((value['errors'] as Array<any>).map(OfferMappingErrorDTOToJSON)),
        'warnings': value['warnings'] == null ? undefined : ((value['warnings'] as Array<any>).map(OfferMappingErrorDTOToJSON)),
    };
}

