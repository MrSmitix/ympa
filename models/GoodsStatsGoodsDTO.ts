/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GoodsStatsWeightDimensionsDTO } from './GoodsStatsWeightDimensionsDTO';
import {
    GoodsStatsWeightDimensionsDTOFromJSON,
    GoodsStatsWeightDimensionsDTOFromJSONTyped,
    GoodsStatsWeightDimensionsDTOToJSON,
} from './GoodsStatsWeightDimensionsDTO';
import type { GoodsStatsWarehouseDTO } from './GoodsStatsWarehouseDTO';
import {
    GoodsStatsWarehouseDTOFromJSON,
    GoodsStatsWarehouseDTOFromJSONTyped,
    GoodsStatsWarehouseDTOToJSON,
} from './GoodsStatsWarehouseDTO';
import type { TariffDTO } from './TariffDTO';
import {
    TariffDTOFromJSON,
    TariffDTOFromJSONTyped,
    TariffDTOToJSON,
} from './TariffDTO';

/**
 * Информация о товаре.
 * @export
 * @interface GoodsStatsGoodsDTO
 */
export interface GoodsStatsGoodsDTO {
    /**
     * Ваш SKU — идентификатор товара в вашей системе.
     * 
     * Разрешена любая последовательность длиной до 255 знаков.
     * 
     * Правила использования SKU:
     * 
     * * У каждого товара SKU должен быть свой.
     * 
     * * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.
     * 
     * * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.
     * 
     * [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     * 
     * @type {string}
     * @memberof GoodsStatsGoodsDTO
     */
    shopSku?: string;
    /**
     * SKU на Маркете.
     * @type {number}
     * @memberof GoodsStatsGoodsDTO
     */
    marketSku?: number;
    /**
     * Название товара.
     * @type {string}
     * @memberof GoodsStatsGoodsDTO
     */
    name?: string;
    /**
     * Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
     * @type {number}
     * @memberof GoodsStatsGoodsDTO
     */
    price?: number;
    /**
     * Идентификатор категории товара на Маркете.
     * @type {number}
     * @memberof GoodsStatsGoodsDTO
     */
    categoryId?: number;
    /**
     * Название категории товара на Маркете.
     * @type {string}
     * @memberof GoodsStatsGoodsDTO
     */
    categoryName?: string;
    /**
     * 
     * @type {GoodsStatsWeightDimensionsDTO}
     * @memberof GoodsStatsGoodsDTO
     */
    weightDimensions?: GoodsStatsWeightDimensionsDTO;
    /**
     * Информация о складах, на которых хранится товар.
     * 
     * Параметр не приходит, если товара нет ни на одном складе.
     * 
     * @type {Array<GoodsStatsWarehouseDTO>}
     * @memberof GoodsStatsGoodsDTO
     */
    warehouses?: Array<GoodsStatsWarehouseDTO> | null;
    /**
     * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
     * 
     * По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки
     * и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).
     * 
     * @type {Array<TariffDTO>}
     * @memberof GoodsStatsGoodsDTO
     */
    tariffs?: Array<TariffDTO> | null;
    /**
     * Ссылки (URL) изображений товара в хорошем качестве.
     * @type {Array<string>}
     * @memberof GoodsStatsGoodsDTO
     */
    pictures?: Array<string> | null;
}

/**
 * Check if a given object implements the GoodsStatsGoodsDTO interface.
 */
export function instanceOfGoodsStatsGoodsDTO(value: object): value is GoodsStatsGoodsDTO {
    return true;
}

export function GoodsStatsGoodsDTOFromJSON(json: any): GoodsStatsGoodsDTO {
    return GoodsStatsGoodsDTOFromJSONTyped(json, false);
}

export function GoodsStatsGoodsDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoodsStatsGoodsDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'shopSku': json['shopSku'] == null ? undefined : json['shopSku'],
        'marketSku': json['marketSku'] == null ? undefined : json['marketSku'],
        'name': json['name'] == null ? undefined : json['name'],
        'price': json['price'] == null ? undefined : json['price'],
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'categoryName': json['categoryName'] == null ? undefined : json['categoryName'],
        'weightDimensions': json['weightDimensions'] == null ? undefined : GoodsStatsWeightDimensionsDTOFromJSON(json['weightDimensions']),
        'warehouses': json['warehouses'] == null ? undefined : ((json['warehouses'] as Array<any>).map(GoodsStatsWarehouseDTOFromJSON)),
        'tariffs': json['tariffs'] == null ? undefined : ((json['tariffs'] as Array<any>).map(TariffDTOFromJSON)),
        'pictures': json['pictures'] == null ? undefined : json['pictures'],
    };
}

export function GoodsStatsGoodsDTOToJSON(value?: GoodsStatsGoodsDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'shopSku': value['shopSku'],
        'marketSku': value['marketSku'],
        'name': value['name'],
        'price': value['price'],
        'categoryId': value['categoryId'],
        'categoryName': value['categoryName'],
        'weightDimensions': GoodsStatsWeightDimensionsDTOToJSON(value['weightDimensions']),
        'warehouses': value['warehouses'] == null ? undefined : ((value['warehouses'] as Array<any>).map(GoodsStatsWarehouseDTOToJSON)),
        'tariffs': value['tariffs'] == null ? undefined : ((value['tariffs'] as Array<any>).map(TariffDTOToJSON)),
        'pictures': value['pictures'],
    };
}

