/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.TariffsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 * Version: LATEST
* Generator version: 7.8.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license BSD 3-Clause
 * https://opensource.org/license/bsd-3-clause/
 */

goog.provide('API.Client.TariffsApi');

goog.require('API.Client.ApiClientDataErrorResponse');
goog.require('API.Client.ApiForbiddenErrorResponse');
goog.require('API.Client.ApiLimitErrorResponse');
goog.require('API.Client.ApiNotFoundErrorResponse');
goog.require('API.Client.ApiServerErrorResponse');
goog.require('API.Client.ApiUnauthorizedErrorResponse');
goog.require('API.Client.CalculateTariffsRequest');
goog.require('API.Client.CalculateTariffsResponse');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.TariffsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('TariffsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('TariffsApiBasePath')) :
                   'https://api.partner.market.yandex.ru';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('TariffsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('TariffsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.TariffsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Калькулятор стоимости услуг
 * Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
 * @param {!CalculateTariffsRequest} calculateTariffsRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.CalculateTariffsResponse>}
 */
API.Client.TariffsApi.prototype.calculateTariffs = function(calculateTariffsRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/tariffs/calculate';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'calculateTariffsRequest' is set
  if (!calculateTariffsRequest) {
    throw new Error('Missing required parameter calculateTariffsRequest when calling calculateTariffs');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: calculateTariffsRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
