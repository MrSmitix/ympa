/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.OrderDeliveryApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 * Version: LATEST
* Generator version: 7.8.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license BSD 3-Clause
 * https://opensource.org/license/bsd-3-clause/
 */

goog.provide('API.Client.OrderDeliveryApi');

goog.require('API.Client.ApiClientDataErrorResponse');
goog.require('API.Client.ApiForbiddenErrorResponse');
goog.require('API.Client.ApiLimitErrorResponse');
goog.require('API.Client.ApiNotFoundErrorResponse');
goog.require('API.Client.ApiServerErrorResponse');
goog.require('API.Client.ApiUnauthorizedErrorResponse');
goog.require('API.Client.EmptyApiResponse');
goog.require('API.Client.GetOrderBuyerInfoResponse');
goog.require('API.Client.SetOrderDeliveryDateRequest');
goog.require('API.Client.SetOrderDeliveryTrackCodeRequest');
goog.require('API.Client.UpdateOrderStorageLimitRequest');
goog.require('API.Client.VerifyOrderEacRequest');
goog.require('API.Client.VerifyOrderEacResponse');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.OrderDeliveryApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('OrderDeliveryApiBasePath') ?
                   /** @type {!string} */ ($injector.get('OrderDeliveryApiBasePath')) :
                   'https://api.partner.market.yandex.ru';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('OrderDeliveryApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('OrderDeliveryApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.OrderDeliveryApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Информация о покупателе — физическом лице
 * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
 * @param {!number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
 * @param {!number} orderId Идентификатор заказа.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GetOrderBuyerInfoResponse>}
 */
API.Client.OrderDeliveryApi.prototype.getOrderBuyerInfo = function(campaignId, orderId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/campaigns/{campaignId}/orders/{orderId}/buyer'
      .replace('{' + 'campaignId' + '}', String(campaignId))
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'campaignId' is set
  if (!campaignId) {
    throw new Error('Missing required parameter campaignId when calling getOrderBuyerInfo');
  }
  // verify required parameter 'orderId' is set
  if (!orderId) {
    throw new Error('Missing required parameter orderId when calling getOrderBuyerInfo');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Изменение даты доставки заказа
 * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * @param {!number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
 * @param {!number} orderId Идентификатор заказа.
 * @param {!SetOrderDeliveryDateRequest} setOrderDeliveryDateRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.EmptyApiResponse>}
 */
API.Client.OrderDeliveryApi.prototype.setOrderDeliveryDate = function(campaignId, orderId, setOrderDeliveryDateRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/campaigns/{campaignId}/orders/{orderId}/delivery/date'
      .replace('{' + 'campaignId' + '}', String(campaignId))
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'campaignId' is set
  if (!campaignId) {
    throw new Error('Missing required parameter campaignId when calling setOrderDeliveryDate');
  }
  // verify required parameter 'orderId' is set
  if (!orderId) {
    throw new Error('Missing required parameter orderId when calling setOrderDeliveryDate');
  }
  // verify required parameter 'setOrderDeliveryDateRequest' is set
  if (!setOrderDeliveryDateRequest) {
    throw new Error('Missing required parameter setOrderDeliveryDateRequest when calling setOrderDeliveryDate');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: setOrderDeliveryDateRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Передача трек‑номера посылки
 * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * @param {!number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
 * @param {!number} orderId Идентификатор заказа.
 * @param {!SetOrderDeliveryTrackCodeRequest} setOrderDeliveryTrackCodeRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.EmptyApiResponse>}
 */
API.Client.OrderDeliveryApi.prototype.setOrderDeliveryTrackCode = function(campaignId, orderId, setOrderDeliveryTrackCodeRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/campaigns/{campaignId}/orders/{orderId}/delivery/track'
      .replace('{' + 'campaignId' + '}', String(campaignId))
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'campaignId' is set
  if (!campaignId) {
    throw new Error('Missing required parameter campaignId when calling setOrderDeliveryTrackCode');
  }
  // verify required parameter 'orderId' is set
  if (!orderId) {
    throw new Error('Missing required parameter orderId when calling setOrderDeliveryTrackCode');
  }
  // verify required parameter 'setOrderDeliveryTrackCodeRequest' is set
  if (!setOrderDeliveryTrackCodeRequest) {
    throw new Error('Missing required parameter setOrderDeliveryTrackCodeRequest when calling setOrderDeliveryTrackCode');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: setOrderDeliveryTrackCodeRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Продление срока хранения заказа
 * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * @param {!number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
 * @param {!number} orderId Идентификатор заказа.
 * @param {!UpdateOrderStorageLimitRequest} updateOrderStorageLimitRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.EmptyApiResponse>}
 */
API.Client.OrderDeliveryApi.prototype.updateOrderStorageLimit = function(campaignId, orderId, updateOrderStorageLimitRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit'
      .replace('{' + 'campaignId' + '}', String(campaignId))
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'campaignId' is set
  if (!campaignId) {
    throw new Error('Missing required parameter campaignId when calling updateOrderStorageLimit');
  }
  // verify required parameter 'orderId' is set
  if (!orderId) {
    throw new Error('Missing required parameter orderId when calling updateOrderStorageLimit');
  }
  // verify required parameter 'updateOrderStorageLimitRequest' is set
  if (!updateOrderStorageLimitRequest) {
    throw new Error('Missing required parameter updateOrderStorageLimitRequest when calling updateOrderStorageLimit');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: updateOrderStorageLimitRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Передача кода подтверждения
 * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
 * @param {!number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
 * @param {!number} orderId Идентификатор заказа.
 * @param {!VerifyOrderEacRequest} verifyOrderEacRequest 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.VerifyOrderEacResponse>}
 */
API.Client.OrderDeliveryApi.prototype.verifyOrderEac = function(campaignId, orderId, verifyOrderEacRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/campaigns/{campaignId}/orders/{orderId}/verifyEac'
      .replace('{' + 'campaignId' + '}', String(campaignId))
      .replace('{' + 'orderId' + '}', String(orderId));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'campaignId' is set
  if (!campaignId) {
    throw new Error('Missing required parameter campaignId when calling verifyOrderEac');
  }
  // verify required parameter 'orderId' is set
  if (!orderId) {
    throw new Error('Missing required parameter orderId when calling verifyOrderEac');
  }
  // verify required parameter 'verifyOrderEacRequest' is set
  if (!verifyOrderEacRequest) {
    throw new Error('Missing required parameter verifyOrderEacRequest when calling verifyOrderEac');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: verifyOrderEacRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
