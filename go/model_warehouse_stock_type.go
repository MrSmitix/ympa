// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// WarehouseStockType : Тип остатков товаров на складе:  * `AVAILABLE` (соответствует типу «Доступный к заказу» в отчете «Остатки на складе» в кабинете продавца на Маркете) — товар, доступный для продажи.  * `DEFECT` (соответствует типу «Брак») — товар с браком.  * `EXPIRED` (соответствует типу «Просрочен») — товар с истекшим сроком годности.  * `FIT` (соответствует типу «Годный») — товар, который доступен для продажи или уже зарезервирован.  * `FREEZE` — товар, который зарезервирован для заказов.  * `QUARANTINE` (соответствует типу «Карантин») — товар, временно недоступный для продажи (например, товар перемещают из одного помещения склада в другое).  * `UTILIZATION` — товар, который будет утилизирован. 
type WarehouseStockType string

// List of WarehouseStockType
const (
	FIT WarehouseStockType = "FIT"
	FREEZE WarehouseStockType = "FREEZE"
	AVAILABLE WarehouseStockType = "AVAILABLE"
	QUARANTINE WarehouseStockType = "QUARANTINE"
	UTILIZATION WarehouseStockType = "UTILIZATION"
	DEFECT WarehouseStockType = "DEFECT"
	EXPIRED WarehouseStockType = "EXPIRED"
)

// AllowedWarehouseStockTypeEnumValues is all the allowed values of WarehouseStockType enum
var AllowedWarehouseStockTypeEnumValues = []WarehouseStockType{
	"FIT",
	"FREEZE",
	"AVAILABLE",
	"QUARANTINE",
	"UTILIZATION",
	"DEFECT",
	"EXPIRED",
}

// validWarehouseStockTypeEnumValue provides a map of WarehouseStockTypes for fast verification of use input
var validWarehouseStockTypeEnumValues = map[WarehouseStockType]struct{}{
	"FIT": {},
	"FREEZE": {},
	"AVAILABLE": {},
	"QUARANTINE": {},
	"UTILIZATION": {},
	"DEFECT": {},
	"EXPIRED": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WarehouseStockType) IsValid() bool {
	_, ok := validWarehouseStockTypeEnumValues[v]
	return ok
}

// NewWarehouseStockTypeFromValue returns a pointer to a valid WarehouseStockType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWarehouseStockTypeFromValue(v string) (WarehouseStockType, error) {
	ev := WarehouseStockType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for WarehouseStockType: valid values are %v", v, AllowedWarehouseStockTypeEnumValues)
}



// AssertWarehouseStockTypeRequired checks if the required fields are not zero-ed
func AssertWarehouseStockTypeRequired(obj WarehouseStockType) error {
	return nil
}

// AssertWarehouseStockTypeConstraints checks if the values respects the defined constraints
func AssertWarehouseStockTypeConstraints(obj WarehouseStockType) error {
	return nil
}
