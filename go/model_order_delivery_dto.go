// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server




// OrderDeliveryDto - Информация о доставке.
type OrderDeliveryDto struct {

	// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
	Id string `json:"id,omitempty"`

	Type OrderDeliveryType `json:"type,omitempty"`

	// Наименование службы доставки.
	ServiceName string `json:"serviceName,omitempty"`

	// {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа. 
	// Deprecated
	Price float32 `json:"price,omitempty"`

	DeliveryPartnerType OrderDeliveryPartnerType `json:"deliveryPartnerType,omitempty"`

	Courier OrderCourierDto `json:"courier,omitempty"`

	Dates OrderDeliveryDatesDto `json:"dates,omitempty"`

	Region RegionDto `json:"region,omitempty"`

	Address OrderDeliveryAddressDto `json:"address,omitempty"`

	Vat OrderVatType `json:"vat,omitempty"`

	// Идентификатор службы доставки.
	DeliveryServiceId int64 `json:"deliveryServiceId,omitempty"`

	LiftType OrderLiftType `json:"liftType,omitempty"`

	// Стоимость подъема на этаж.
	LiftPrice float32 `json:"liftPrice,omitempty"`

	// Идентификатор пункта самовывоза, присвоенный магазином.
	OutletCode string `json:"outletCode,omitempty"`

	// Формат даты: `ДД-ММ-ГГГГ`. 
	OutletStorageLimitDate string `json:"outletStorageLimitDate,omitempty"`

	DispatchType OrderDeliveryDispatchType `json:"dispatchType,omitempty"`

	// Информация для отслеживания перемещений посылки.
	Tracks *[]OrderTrackDto `json:"tracks,omitempty"`

	// Информация о посылках.
	Shipments *[]OrderShipmentDto `json:"shipments,omitempty"`

	// Приблизительная ли дата доставки.
	Estimated bool `json:"estimated,omitempty"`

	EacType OrderDeliveryEacType `json:"eacType,omitempty"`

	// Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`). 
	EacCode string `json:"eacCode,omitempty"`
}

// AssertOrderDeliveryDtoRequired checks if the required fields are not zero-ed
func AssertOrderDeliveryDtoRequired(obj OrderDeliveryDto) error {
	if err := AssertOrderCourierDtoRequired(obj.Courier); err != nil {
		return err
	}
	if err := AssertOrderDeliveryDatesDtoRequired(obj.Dates); err != nil {
		return err
	}
	if err := AssertRegionDtoRequired(obj.Region); err != nil {
		return err
	}
	if err := AssertOrderDeliveryAddressDtoRequired(obj.Address); err != nil {
		return err
	}
	if obj.Tracks != nil {
		for _, el := range *obj.Tracks {
			if err := AssertOrderTrackDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if obj.Shipments != nil {
		for _, el := range *obj.Shipments {
			if err := AssertOrderShipmentDtoRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertOrderDeliveryDtoConstraints checks if the values respects the defined constraints
func AssertOrderDeliveryDtoConstraints(obj OrderDeliveryDto) error {
	if err := AssertOrderCourierDtoConstraints(obj.Courier); err != nil {
		return err
	}
	if err := AssertOrderDeliveryDatesDtoConstraints(obj.Dates); err != nil {
		return err
	}
	if err := AssertRegionDtoConstraints(obj.Region); err != nil {
		return err
	}
	if err := AssertOrderDeliveryAddressDtoConstraints(obj.Address); err != nil {
		return err
	}
    if obj.Tracks != nil {
     	for _, el := range *obj.Tracks {
     		if err := AssertOrderTrackDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
    if obj.Shipments != nil {
     	for _, el := range *obj.Shipments {
     		if err := AssertOrderShipmentDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	return nil
}
