// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"errors"
)



// SkuBidRecommendationItemDto - Список товаров с рекомендованными ставками.
type SkuBidRecommendationItemDto struct {

	// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
	Sku string `json:"sku" validate:"regexp=^[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`

	// Значение ставки.
	Bid int32 `json:"bid"`

	// Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
	BidRecommendations *[]BidRecommendationItemDto `json:"bidRecommendations,omitempty"`

	// Рекомендованные цены.
	PriceRecommendations *[]PriceRecommendationItemDto `json:"priceRecommendations,omitempty"`
}

// AssertSkuBidRecommendationItemDtoRequired checks if the required fields are not zero-ed
func AssertSkuBidRecommendationItemDtoRequired(obj SkuBidRecommendationItemDto) error {
	elements := map[string]interface{}{
		"sku": obj.Sku,
		"bid": obj.Bid,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.BidRecommendations != nil {
		for _, el := range *obj.BidRecommendations {
			if err := AssertBidRecommendationItemDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if obj.PriceRecommendations != nil {
		for _, el := range *obj.PriceRecommendations {
			if err := AssertPriceRecommendationItemDtoRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertSkuBidRecommendationItemDtoConstraints checks if the values respects the defined constraints
func AssertSkuBidRecommendationItemDtoConstraints(obj SkuBidRecommendationItemDto) error {
	if obj.Bid < 0 {
		return &ParsingError{Param: "Bid", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Bid > 9999 {
		return &ParsingError{Param: "Bid", Err: errors.New(errMsgMaxValueConstraint)}
	}
    if obj.BidRecommendations != nil {
     	for _, el := range *obj.BidRecommendations {
     		if err := AssertBidRecommendationItemDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
    if obj.PriceRecommendations != nil {
     	for _, el := range *obj.PriceRecommendations {
     		if err := AssertPriceRecommendationItemDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	return nil
}
