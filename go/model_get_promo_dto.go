// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server




// GetPromoDto - Информация об акции.
type GetPromoDto struct {

	// Идентификатор акции.
	Id string `json:"id"`

	// Название акции.
	Name string `json:"name"`

	Period PromoPeriodDto `json:"period"`

	// Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
	Participating bool `json:"participating"`

	AssortmentInfo GetPromoAssortmentInfoDto `json:"assortmentInfo"`

	MechanicsInfo GetPromoMechanicsInfoDto `json:"mechanicsInfo"`

	BestsellerInfo GetPromoBestsellerInfoDto `json:"bestsellerInfo"`

	// Список каналов продвижения товаров.
	Channels *[]ChannelType `json:"channels,omitempty"`

	Constraints GetPromoConstraintsDto `json:"constraints,omitempty"`
}

// AssertGetPromoDtoRequired checks if the required fields are not zero-ed
func AssertGetPromoDtoRequired(obj GetPromoDto) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"name": obj.Name,
		"period": obj.Period,
		"participating": obj.Participating,
		"assortmentInfo": obj.AssortmentInfo,
		"mechanicsInfo": obj.MechanicsInfo,
		"bestsellerInfo": obj.BestsellerInfo,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPromoPeriodDtoRequired(obj.Period); err != nil {
		return err
	}
	if err := AssertGetPromoAssortmentInfoDtoRequired(obj.AssortmentInfo); err != nil {
		return err
	}
	if err := AssertGetPromoMechanicsInfoDtoRequired(obj.MechanicsInfo); err != nil {
		return err
	}
	if err := AssertGetPromoBestsellerInfoDtoRequired(obj.BestsellerInfo); err != nil {
		return err
	}
	if obj.Channels != nil {
		for _, el := range *obj.Channels {
			if err := AssertChannelTypeRequired(el); err != nil {
				return err
			}
		}
	}
	if err := AssertGetPromoConstraintsDtoRequired(obj.Constraints); err != nil {
		return err
	}
	return nil
}

// AssertGetPromoDtoConstraints checks if the values respects the defined constraints
func AssertGetPromoDtoConstraints(obj GetPromoDto) error {
	if err := AssertPromoPeriodDtoConstraints(obj.Period); err != nil {
		return err
	}
	if err := AssertGetPromoAssortmentInfoDtoConstraints(obj.AssortmentInfo); err != nil {
		return err
	}
	if err := AssertGetPromoMechanicsInfoDtoConstraints(obj.MechanicsInfo); err != nil {
		return err
	}
	if err := AssertGetPromoBestsellerInfoDtoConstraints(obj.BestsellerInfo); err != nil {
		return err
	}
    if obj.Channels != nil {
     	for _, el := range *obj.Channels {
     		if err := AssertChannelTypeConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	if err := AssertGetPromoConstraintsDtoConstraints(obj.Constraints); err != nil {
		return err
	}
	return nil
}
