// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// ReturnDecisionType : Решение по возврату:  * `REFUND_MONEY` — вернуть деньги покупателю.  * `REFUND_MONEY_INCLUDING_SHIPMENT` — вернуть деньги за товар и пересылку.  * `REPAIR` — отремонтировать товар.  * `REPLACE` — заменить товар.  * `SEND_TO_EXAMINATION` — взять товар на экспертизу.  * `DECLINE_REFUND` — отказать в возврате.  * `OTHER_DECISION` — другое решение. 
type ReturnDecisionType string

// List of ReturnDecisionType
const (
	REFUND_MONEY ReturnDecisionType = "REFUND_MONEY"
	REFUND_MONEY_INCLUDING_SHIPMENT ReturnDecisionType = "REFUND_MONEY_INCLUDING_SHIPMENT"
	REPAIR ReturnDecisionType = "REPAIR"
	REPLACE ReturnDecisionType = "REPLACE"
	SEND_TO_EXAMINATION ReturnDecisionType = "SEND_TO_EXAMINATION"
	DECLINE_REFUND ReturnDecisionType = "DECLINE_REFUND"
	OTHER_DECISION ReturnDecisionType = "OTHER_DECISION"
	UNKNOWN ReturnDecisionType = "UNKNOWN"
)

// AllowedReturnDecisionTypeEnumValues is all the allowed values of ReturnDecisionType enum
var AllowedReturnDecisionTypeEnumValues = []ReturnDecisionType{
	"REFUND_MONEY",
	"REFUND_MONEY_INCLUDING_SHIPMENT",
	"REPAIR",
	"REPLACE",
	"SEND_TO_EXAMINATION",
	"DECLINE_REFUND",
	"OTHER_DECISION",
	"UNKNOWN",
}

// validReturnDecisionTypeEnumValue provides a map of ReturnDecisionTypes for fast verification of use input
var validReturnDecisionTypeEnumValues = map[ReturnDecisionType]struct{}{
	"REFUND_MONEY": {},
	"REFUND_MONEY_INCLUDING_SHIPMENT": {},
	"REPAIR": {},
	"REPLACE": {},
	"SEND_TO_EXAMINATION": {},
	"DECLINE_REFUND": {},
	"OTHER_DECISION": {},
	"UNKNOWN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnDecisionType) IsValid() bool {
	_, ok := validReturnDecisionTypeEnumValues[v]
	return ok
}

// NewReturnDecisionTypeFromValue returns a pointer to a valid ReturnDecisionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnDecisionTypeFromValue(v string) (ReturnDecisionType, error) {
	ev := ReturnDecisionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ReturnDecisionType: valid values are %v", v, AllowedReturnDecisionTypeEnumValues)
}



// AssertReturnDecisionTypeRequired checks if the required fields are not zero-ed
func AssertReturnDecisionTypeRequired(obj ReturnDecisionType) error {
	return nil
}

// AssertReturnDecisionTypeConstraints checks if the values respects the defined constraints
func AssertReturnDecisionTypeConstraints(obj ReturnDecisionType) error {
	return nil
}
