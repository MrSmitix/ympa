// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ReturnsAPIController binds http requests to an api service and writes the service results to the http response
type ReturnsAPIController struct {
	service ReturnsAPIServicer
	errorHandler ErrorHandler
}

// ReturnsAPIOption for how the controller is set up.
type ReturnsAPIOption func(*ReturnsAPIController)

// WithReturnsAPIErrorHandler inject ErrorHandler into controller
func WithReturnsAPIErrorHandler(h ErrorHandler) ReturnsAPIOption {
	return func(c *ReturnsAPIController) {
		c.errorHandler = h
	}
}

// NewReturnsAPIController creates a default api controller
func NewReturnsAPIController(s ReturnsAPIServicer, opts ...ReturnsAPIOption) *ReturnsAPIController {
	controller := &ReturnsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReturnsAPIController
func (c *ReturnsAPIController) Routes() Routes {
	return Routes{
		"GetReturn": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}",
			c.GetReturn,
		},
		"GetReturnApplication": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application",
			c.GetReturnApplication,
		},
		"GetReturnPhoto": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}",
			c.GetReturnPhoto,
		},
		"GetReturns": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/returns",
			c.GetReturns,
		},
		"SetReturnDecision": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision",
			c.SetReturnDecision,
		},
		"SubmitReturnDecision": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit",
			c.SubmitReturnDecision,
		},
	}
}

// GetReturn - Информация о невыкупе или возврате
func (c *ReturnsAPIController) GetReturn(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	result, err := c.service.GetReturn(r.Context(), campaignIdParam, orderIdParam, returnIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturnApplication - Получение заявления на возврат
func (c *ReturnsAPIController) GetReturnApplication(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	result, err := c.service.GetReturnApplication(r.Context(), campaignIdParam, orderIdParam, returnIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturnPhoto - Получение фотографии возврата
func (c *ReturnsAPIController) GetReturnPhoto(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	itemIdParam, err := parseNumericParameter[int64](
		params["itemId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "itemId", Err: err}, nil)
		return
	}
	imageHashParam := params["imageHash"]
	if imageHashParam == "" {
		c.errorHandler(w, r, &RequiredError{"imageHash"}, nil)
		return
	}
	result, err := c.service.GetReturnPhoto(r.Context(), campaignIdParam, orderIdParam, returnIdParam, itemIdParam, imageHashParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturns - Список невыкупов и возвратов
func (c *ReturnsAPIController) GetReturns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	orderIdsParam, err := parseNumericArrayParameter[int64](
		query.Get("orderIds"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderIds", Err: err}, nil)
		return
	}
	var statusesParam []RefundStatusType
	if query.Has("statuses") {
		paramSplits := strings.Split(query.Get("statuses"), ",")
		statusesParam = make([]RefundStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewRefundStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "statuses", Err: err}, nil)
				return
			}
			statusesParam = append(statusesParam, paramEnum)
		}
	}
	var type_Param ReturnType
	if query.Has("type") {
		param := ReturnType(query.Get("type"))

		type_Param = param
	} else {
	}
	var fromDateParam string
	if query.Has("fromDate") {
		param := string(query.Get("fromDate"))

		fromDateParam = param
	} else {
	}
	var toDateParam string
	if query.Has("toDate") {
		param := string(query.Get("toDate"))

		toDateParam = param
	} else {
	}
	var fromDate2Param string
	if query.Has("from_date") {
		param := string(query.Get("from_date"))

		fromDate2Param = param
	} else {
	}
	var toDate2Param string
	if query.Has("to_date") {
		param := string(query.Get("to_date"))

		toDate2Param = param
	} else {
	}
	result, err := c.service.GetReturns(r.Context(), campaignIdParam, pageTokenParam, limitParam, orderIdsParam, statusesParam, type_Param, fromDateParam, toDateParam, fromDate2Param, toDate2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetReturnDecision - Принятие или изменение решения по возврату
func (c *ReturnsAPIController) SetReturnDecision(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	setReturnDecisionRequestParam := SetReturnDecisionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setReturnDecisionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetReturnDecisionRequestRequired(setReturnDecisionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetReturnDecisionRequestConstraints(setReturnDecisionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetReturnDecision(r.Context(), campaignIdParam, orderIdParam, returnIdParam, setReturnDecisionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SubmitReturnDecision - Подтверждение решения по возврату
func (c *ReturnsAPIController) SubmitReturnDecision(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	result, err := c.service.SubmitReturnDecision(r.Context(), campaignIdParam, orderIdParam, returnIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
