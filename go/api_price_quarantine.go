// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PriceQuarantineAPIController binds http requests to an api service and writes the service results to the http response
type PriceQuarantineAPIController struct {
	service PriceQuarantineAPIServicer
	errorHandler ErrorHandler
}

// PriceQuarantineAPIOption for how the controller is set up.
type PriceQuarantineAPIOption func(*PriceQuarantineAPIController)

// WithPriceQuarantineAPIErrorHandler inject ErrorHandler into controller
func WithPriceQuarantineAPIErrorHandler(h ErrorHandler) PriceQuarantineAPIOption {
	return func(c *PriceQuarantineAPIController) {
		c.errorHandler = h
	}
}

// NewPriceQuarantineAPIController creates a default api controller
func NewPriceQuarantineAPIController(s PriceQuarantineAPIServicer, opts ...PriceQuarantineAPIOption) *PriceQuarantineAPIController {
	controller := &PriceQuarantineAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PriceQuarantineAPIController
func (c *PriceQuarantineAPIController) Routes() Routes {
	return Routes{
		"ConfirmBusinessPrices": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/price-quarantine/confirm",
			c.ConfirmBusinessPrices,
		},
		"ConfirmCampaignPrices": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/price-quarantine/confirm",
			c.ConfirmCampaignPrices,
		},
		"GetBusinessQuarantineOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/price-quarantine",
			c.GetBusinessQuarantineOffers,
		},
		"GetCampaignQuarantineOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/price-quarantine",
			c.GetCampaignQuarantineOffers,
		},
	}
}

// ConfirmBusinessPrices - Удаление товара из карантина по цене в кабинете
func (c *PriceQuarantineAPIController) ConfirmBusinessPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	confirmPricesRequestParam := ConfirmPricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfirmPricesRequestRequired(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfirmPricesRequestConstraints(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfirmBusinessPrices(r.Context(), businessIdParam, confirmPricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ConfirmCampaignPrices - Удаление товара из карантина по цене в магазине
func (c *PriceQuarantineAPIController) ConfirmCampaignPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	confirmPricesRequestParam := ConfirmPricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfirmPricesRequestRequired(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfirmPricesRequestConstraints(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfirmCampaignPrices(r.Context(), campaignIdParam, confirmPricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBusinessQuarantineOffers - Список товаров, находящихся в карантине по цене в кабинете
func (c *PriceQuarantineAPIController) GetBusinessQuarantineOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getQuarantineOffersRequestParam := GetQuarantineOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestRequired(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestConstraints(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetBusinessQuarantineOffers(r.Context(), businessIdParam, getQuarantineOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignQuarantineOffers - Список товаров, находящихся в карантине по цене в магазине
func (c *PriceQuarantineAPIController) GetCampaignQuarantineOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getQuarantineOffersRequestParam := GetQuarantineOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestRequired(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestConstraints(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetCampaignQuarantineOffers(r.Context(), campaignIdParam, getQuarantineOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
