// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"
	"os"

	"github.com/gorilla/mux"
)

// ExpressAPIController binds http requests to an api service and writes the service results to the http response
type ExpressAPIController struct {
	service ExpressAPIServicer
	errorHandler ErrorHandler
}

// ExpressAPIOption for how the controller is set up.
type ExpressAPIOption func(*ExpressAPIController)

// WithExpressAPIErrorHandler inject ErrorHandler into controller
func WithExpressAPIErrorHandler(h ErrorHandler) ExpressAPIOption {
	return func(c *ExpressAPIController) {
		c.errorHandler = h
	}
}

// NewExpressAPIController creates a default api controller
func NewExpressAPIController(s ExpressAPIServicer, opts ...ExpressAPIOption) *ExpressAPIController {
	controller := &ExpressAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ExpressAPIController
func (c *ExpressAPIController) Routes() Routes {
	return Routes{
		"AddHiddenOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/hidden-offers",
			c.AddHiddenOffers,
		},
		"AddOffersToArchive": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/archive",
			c.AddOffersToArchive,
		},
		"CalculateTariffs": Route{
			strings.ToUpper("Post"),
			"/tariffs/calculate",
			c.CalculateTariffs,
		},
		"ConfirmBusinessPrices": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/price-quarantine/confirm",
			c.ConfirmBusinessPrices,
		},
		"ConfirmCampaignPrices": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/price-quarantine/confirm",
			c.ConfirmCampaignPrices,
		},
		"CreateChat": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/new",
			c.CreateChat,
		},
		"DeleteCampaignOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers/delete",
			c.DeleteCampaignOffers,
		},
		"DeleteGoodsFeedbackComment": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/comments/delete",
			c.DeleteGoodsFeedbackComment,
		},
		"DeleteHiddenOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/hidden-offers/delete",
			c.DeleteHiddenOffers,
		},
		"DeleteOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/delete",
			c.DeleteOffers,
		},
		"DeleteOffersFromArchive": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/unarchive",
			c.DeleteOffersFromArchive,
		},
		"DeletePromoOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos/offers/delete",
			c.DeletePromoOffers,
		},
		"GenerateBoostConsolidatedReport": Route{
			strings.ToUpper("Post"),
			"/reports/boost-consolidated/generate",
			c.GenerateBoostConsolidatedReport,
		},
		"GenerateCompetitorsPositionReport": Route{
			strings.ToUpper("Post"),
			"/reports/competitors-position/generate",
			c.GenerateCompetitorsPositionReport,
		},
		"GenerateGoodsFeedbackReport": Route{
			strings.ToUpper("Post"),
			"/reports/goods-feedback/generate",
			c.GenerateGoodsFeedbackReport,
		},
		"GenerateGoodsRealizationReport": Route{
			strings.ToUpper("Post"),
			"/reports/goods-realization/generate",
			c.GenerateGoodsRealizationReport,
		},
		"GenerateMassOrderLabelsReport": Route{
			strings.ToUpper("Post"),
			"/reports/documents/labels/generate",
			c.GenerateMassOrderLabelsReport,
		},
		"GenerateOrderLabel": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label",
			c.GenerateOrderLabel,
		},
		"GenerateOrderLabels": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/labels",
			c.GenerateOrderLabels,
		},
		"GeneratePricesReport": Route{
			strings.ToUpper("Post"),
			"/reports/prices/generate",
			c.GeneratePricesReport,
		},
		"GenerateShelfsStatisticsReport": Route{
			strings.ToUpper("Post"),
			"/reports/shelf-statistics/generate",
			c.GenerateShelfsStatisticsReport,
		},
		"GenerateShowsSalesReport": Route{
			strings.ToUpper("Post"),
			"/reports/shows-sales/generate",
			c.GenerateShowsSalesReport,
		},
		"GenerateStocksOnWarehousesReport": Route{
			strings.ToUpper("Post"),
			"/reports/stocks-on-warehouses/generate",
			c.GenerateStocksOnWarehousesReport,
		},
		"GenerateUnitedMarketplaceServicesReport": Route{
			strings.ToUpper("Post"),
			"/reports/united-marketplace-services/generate",
			c.GenerateUnitedMarketplaceServicesReport,
		},
		"GenerateUnitedNettingReport": Route{
			strings.ToUpper("Post"),
			"/reports/united-netting/generate",
			c.GenerateUnitedNettingReport,
		},
		"GenerateUnitedOrdersReport": Route{
			strings.ToUpper("Post"),
			"/reports/united-orders/generate",
			c.GenerateUnitedOrdersReport,
		},
		"GetAllOffers": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offers/all",
			c.GetAllOffers,
		},
		"GetBidsInfoForBusiness": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/bids/info",
			c.GetBidsInfoForBusiness,
		},
		"GetBidsRecommendations": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/bids/recommendations",
			c.GetBidsRecommendations,
		},
		"GetBusinessQuarantineOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/price-quarantine",
			c.GetBusinessQuarantineOffers,
		},
		"GetBusinessSettings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/settings",
			c.GetBusinessSettings,
		},
		"GetCampaign": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}",
			c.GetCampaign,
		},
		"GetCampaignLogins": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/logins",
			c.GetCampaignLogins,
		},
		"GetCampaignOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers",
			c.GetCampaignOffers,
		},
		"GetCampaignQuarantineOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/price-quarantine",
			c.GetCampaignQuarantineOffers,
		},
		"GetCampaignRegion": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/region",
			c.GetCampaignRegion,
		},
		"GetCampaignSettings": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/settings",
			c.GetCampaignSettings,
		},
		"GetCampaigns": Route{
			strings.ToUpper("Get"),
			"/campaigns",
			c.GetCampaigns,
		},
		"GetCampaignsByLogin": Route{
			strings.ToUpper("Get"),
			"/campaigns/by_login/{login}",
			c.GetCampaignsByLogin,
		},
		"GetCategoriesMaxSaleQuantum": Route{
			strings.ToUpper("Post"),
			"/categories/max-sale-quantum",
			c.GetCategoriesMaxSaleQuantum,
		},
		"GetCategoriesTree": Route{
			strings.ToUpper("Post"),
			"/categories/tree",
			c.GetCategoriesTree,
		},
		"GetCategoryContentParameters": Route{
			strings.ToUpper("Post"),
			"/category/{categoryId}/parameters",
			c.GetCategoryContentParameters,
		},
		"GetChatHistory": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/history",
			c.GetChatHistory,
		},
		"GetChats": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats",
			c.GetChats,
		},
		"GetDeliveryServices": Route{
			strings.ToUpper("Get"),
			"/delivery/services",
			c.GetDeliveryServices,
		},
		"GetFeed": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feeds/{feedId}",
			c.GetFeed,
		},
		"GetFeedIndexLogs": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feeds/{feedId}/index-logs",
			c.GetFeedIndexLogs,
		},
		"GetFeedbackAndCommentUpdates": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feedback/updates",
			c.GetFeedbackAndCommentUpdates,
		},
		"GetFeeds": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feeds",
			c.GetFeeds,
		},
		"GetGoodsFeedbackComments": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/comments",
			c.GetGoodsFeedbackComments,
		},
		"GetGoodsFeedbacks": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback",
			c.GetGoodsFeedbacks,
		},
		"GetGoodsStats": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/stats/skus",
			c.GetGoodsStats,
		},
		"GetHiddenOffers": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/hidden-offers",
			c.GetHiddenOffers,
		},
		"GetOfferCardsContentStatus": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-cards",
			c.GetOfferCardsContentStatus,
		},
		"GetOfferMappingEntries": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offer-mapping-entries",
			c.GetOfferMappingEntries,
		},
		"GetOfferMappings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings",
			c.GetOfferMappings,
		},
		"GetOfferRecommendations": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offers/recommendations",
			c.GetOfferRecommendations,
		},
		"GetOffers": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offers",
			c.GetOffers,
		},
		"GetOrder": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}",
			c.GetOrder,
		},
		"GetOrderBusinessBuyerInfo": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/business-buyer",
			c.GetOrderBusinessBuyerInfo,
		},
		"GetOrderBusinessDocumentsInfo": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/documents",
			c.GetOrderBusinessDocumentsInfo,
		},
		"GetOrderLabelsData": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data",
			c.GetOrderLabelsData,
		},
		"GetOrders": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders",
			c.GetOrders,
		},
		"GetOrdersStats": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/stats/orders",
			c.GetOrdersStats,
		},
		"GetPrices": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offer-prices",
			c.GetPrices,
		},
		"GetPricesByOfferIds": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-prices",
			c.GetPricesByOfferIds,
		},
		"GetPromoOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos/offers",
			c.GetPromoOffers,
		},
		"GetPromos": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos",
			c.GetPromos,
		},
		"GetQualityRatingDetails": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/ratings/quality/details",
			c.GetQualityRatingDetails,
		},
		"GetQualityRatings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/ratings/quality",
			c.GetQualityRatings,
		},
		"GetReportInfo": Route{
			strings.ToUpper("Get"),
			"/reports/info/{reportId}",
			c.GetReportInfo,
		},
		"GetReturn": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}",
			c.GetReturn,
		},
		"GetReturnApplication": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application",
			c.GetReturnApplication,
		},
		"GetReturnPhoto": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}",
			c.GetReturnPhoto,
		},
		"GetReturns": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/returns",
			c.GetReturns,
		},
		"GetStocks": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers/stocks",
			c.GetStocks,
		},
		"GetSuggestedOfferMappingEntries": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-mapping-entries/suggestions",
			c.GetSuggestedOfferMappingEntries,
		},
		"GetSuggestedOfferMappings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/suggestions",
			c.GetSuggestedOfferMappings,
		},
		"GetSuggestedPrices": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-prices/suggestions",
			c.GetSuggestedPrices,
		},
		"GetWarehouses": Route{
			strings.ToUpper("Get"),
			"/businesses/{businessId}/warehouses",
			c.GetWarehouses,
		},
		"ProvideOrderItemIdentifiers": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/identifiers",
			c.ProvideOrderItemIdentifiers,
		},
		"PutBidsForBusiness": Route{
			strings.ToUpper("Put"),
			"/businesses/{businessId}/bids",
			c.PutBidsForBusiness,
		},
		"PutBidsForCampaign": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/bids",
			c.PutBidsForCampaign,
		},
		"RefreshFeed": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/feeds/{feedId}/refresh",
			c.RefreshFeed,
		},
		"SearchRegionChildren": Route{
			strings.ToUpper("Get"),
			"/regions/{regionId}/children",
			c.SearchRegionChildren,
		},
		"SearchRegionsById": Route{
			strings.ToUpper("Get"),
			"/regions/{regionId}",
			c.SearchRegionsById,
		},
		"SearchRegionsByName": Route{
			strings.ToUpper("Get"),
			"/regions",
			c.SearchRegionsByName,
		},
		"SendFileToChat": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/file/send",
			c.SendFileToChat,
		},
		"SendMessageToChat": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/message",
			c.SendMessageToChat,
		},
		"SetFeedParams": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/feeds/{feedId}/params",
			c.SetFeedParams,
		},
		"SetOrderBoxLayout": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/boxes",
			c.SetOrderBoxLayout,
		},
		"SetOrderShipmentBoxes": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes",
			c.SetOrderShipmentBoxes,
		},
		"SkipGoodsFeedbacksReaction": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/skip-reaction",
			c.SkipGoodsFeedbacksReaction,
		},
		"UpdateBusinessPrices": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-prices/updates",
			c.UpdateBusinessPrices,
		},
		"UpdateCampaignOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers/update",
			c.UpdateCampaignOffers,
		},
		"UpdateGoodsFeedbackComment": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/comments/update",
			c.UpdateGoodsFeedbackComment,
		},
		"UpdateOfferContent": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-cards/update",
			c.UpdateOfferContent,
		},
		"UpdateOfferMappingEntries": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-mapping-entries/updates",
			c.UpdateOfferMappingEntries,
		},
		"UpdateOfferMappings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/update",
			c.UpdateOfferMappings,
		},
		"UpdateOrderItems": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/items",
			c.UpdateOrderItems,
		},
		"UpdateOrderStatus": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/status",
			c.UpdateOrderStatus,
		},
		"UpdateOrderStatuses": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/status-update",
			c.UpdateOrderStatuses,
		},
		"UpdatePrices": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-prices/updates",
			c.UpdatePrices,
		},
		"UpdatePromoOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos/offers/update",
			c.UpdatePromoOffers,
		},
		"UpdateStocks": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/offers/stocks",
			c.UpdateStocks,
		},
		"VerifyOrderEac": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/verifyEac",
			c.VerifyOrderEac,
		},
	}
}

// AddHiddenOffers - Скрытие товаров и настройки скрытия
func (c *ExpressAPIController) AddHiddenOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	addHiddenOffersRequestParam := AddHiddenOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddHiddenOffersRequestRequired(addHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddHiddenOffersRequestConstraints(addHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddHiddenOffers(r.Context(), campaignIdParam, addHiddenOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddOffersToArchive - Добавление товаров в архив
func (c *ExpressAPIController) AddOffersToArchive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	addOffersToArchiveRequestParam := AddOffersToArchiveRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addOffersToArchiveRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddOffersToArchiveRequestRequired(addOffersToArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddOffersToArchiveRequestConstraints(addOffersToArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddOffersToArchive(r.Context(), businessIdParam, addOffersToArchiveRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CalculateTariffs - Калькулятор стоимости услуг
func (c *ExpressAPIController) CalculateTariffs(w http.ResponseWriter, r *http.Request) {
	calculateTariffsRequestParam := CalculateTariffsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&calculateTariffsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCalculateTariffsRequestRequired(calculateTariffsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCalculateTariffsRequestConstraints(calculateTariffsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CalculateTariffs(r.Context(), calculateTariffsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ConfirmBusinessPrices - Удаление товара из карантина по цене в кабинете
func (c *ExpressAPIController) ConfirmBusinessPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	confirmPricesRequestParam := ConfirmPricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfirmPricesRequestRequired(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfirmPricesRequestConstraints(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfirmBusinessPrices(r.Context(), businessIdParam, confirmPricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ConfirmCampaignPrices - Удаление товара из карантина по цене в магазине
func (c *ExpressAPIController) ConfirmCampaignPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	confirmPricesRequestParam := ConfirmPricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfirmPricesRequestRequired(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfirmPricesRequestConstraints(confirmPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfirmCampaignPrices(r.Context(), campaignIdParam, confirmPricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateChat - Создание нового чата с покупателем
func (c *ExpressAPIController) CreateChat(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	createChatRequestParam := CreateChatRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createChatRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateChatRequestRequired(createChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateChatRequestConstraints(createChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateChat(r.Context(), businessIdParam, createChatRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCampaignOffers - Удаление товаров из ассортимента магазина
func (c *ExpressAPIController) DeleteCampaignOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	deleteCampaignOffersRequestParam := DeleteCampaignOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteCampaignOffersRequestRequired(deleteCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteCampaignOffersRequestConstraints(deleteCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteCampaignOffers(r.Context(), campaignIdParam, deleteCampaignOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGoodsFeedbackComment - Удаление комментария к отзыву
func (c *ExpressAPIController) DeleteGoodsFeedbackComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deleteGoodsFeedbackCommentRequestParam := DeleteGoodsFeedbackCommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteGoodsFeedbackCommentRequestRequired(deleteGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteGoodsFeedbackCommentRequestConstraints(deleteGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteGoodsFeedbackComment(r.Context(), businessIdParam, deleteGoodsFeedbackCommentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteHiddenOffers - Возобновление показа товаров
func (c *ExpressAPIController) DeleteHiddenOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	deleteHiddenOffersRequestParam := DeleteHiddenOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteHiddenOffersRequestRequired(deleteHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteHiddenOffersRequestConstraints(deleteHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteHiddenOffers(r.Context(), campaignIdParam, deleteHiddenOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOffers - Удаление товаров из каталога
func (c *ExpressAPIController) DeleteOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deleteOffersRequestParam := DeleteOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteOffersRequestRequired(deleteOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteOffersRequestConstraints(deleteOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteOffers(r.Context(), businessIdParam, deleteOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOffersFromArchive - Удаление товаров из архива
func (c *ExpressAPIController) DeleteOffersFromArchive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deleteOffersFromArchiveRequestParam := DeleteOffersFromArchiveRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteOffersFromArchiveRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteOffersFromArchiveRequestRequired(deleteOffersFromArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteOffersFromArchiveRequestConstraints(deleteOffersFromArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteOffersFromArchive(r.Context(), businessIdParam, deleteOffersFromArchiveRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePromoOffers - Удаление товаров из акции
func (c *ExpressAPIController) DeletePromoOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deletePromoOffersRequestParam := DeletePromoOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deletePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeletePromoOffersRequestRequired(deletePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeletePromoOffersRequestConstraints(deletePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeletePromoOffers(r.Context(), businessIdParam, deletePromoOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateBoostConsolidatedReport - Отчет по бусту продаж
func (c *ExpressAPIController) GenerateBoostConsolidatedReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateBoostConsolidatedRequestParam := GenerateBoostConsolidatedRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateBoostConsolidatedRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateBoostConsolidatedRequestRequired(generateBoostConsolidatedRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateBoostConsolidatedRequestConstraints(generateBoostConsolidatedRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateBoostConsolidatedReport(r.Context(), generateBoostConsolidatedRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateCompetitorsPositionReport - Отчет «Конкурентная позиция»
func (c *ExpressAPIController) GenerateCompetitorsPositionReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateCompetitorsPositionReportRequestParam := GenerateCompetitorsPositionReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateCompetitorsPositionReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateCompetitorsPositionReportRequestRequired(generateCompetitorsPositionReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateCompetitorsPositionReportRequestConstraints(generateCompetitorsPositionReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateCompetitorsPositionReport(r.Context(), generateCompetitorsPositionReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateGoodsFeedbackReport - Отчет по отзывам о товарах
func (c *ExpressAPIController) GenerateGoodsFeedbackReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateGoodsFeedbackRequestParam := GenerateGoodsFeedbackRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateGoodsFeedbackRequestRequired(generateGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateGoodsFeedbackRequestConstraints(generateGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateGoodsFeedbackReport(r.Context(), generateGoodsFeedbackRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateGoodsRealizationReport - Отчет по реализации
func (c *ExpressAPIController) GenerateGoodsRealizationReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateGoodsRealizationReportRequestParam := GenerateGoodsRealizationReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateGoodsRealizationReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateGoodsRealizationReportRequestRequired(generateGoodsRealizationReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateGoodsRealizationReportRequestConstraints(generateGoodsRealizationReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateGoodsRealizationReport(r.Context(), generateGoodsRealizationReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateMassOrderLabelsReport - Готовые ярлыки‑наклейки на все коробки в нескольких заказах
func (c *ExpressAPIController) GenerateMassOrderLabelsReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateMassOrderLabelsRequestParam := GenerateMassOrderLabelsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateMassOrderLabelsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateMassOrderLabelsRequestRequired(generateMassOrderLabelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateMassOrderLabelsRequestConstraints(generateMassOrderLabelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam PageFormatType
	if query.Has("format") {
		param := PageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateMassOrderLabelsReport(r.Context(), generateMassOrderLabelsRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateOrderLabel - Готовый ярлык‑наклейка для коробки в заказе
func (c *ExpressAPIController) GenerateOrderLabel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	boxIdParam, err := parseNumericParameter[int64](
		params["boxId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "boxId", Err: err}, nil)
		return
	}
	var formatParam PageFormatType
	if query.Has("format") {
		param := PageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateOrderLabel(r.Context(), campaignIdParam, orderIdParam, shipmentIdParam, boxIdParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateOrderLabels - Готовые ярлыки‑наклейки на все коробки в одном заказе
func (c *ExpressAPIController) GenerateOrderLabels(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	var formatParam PageFormatType
	if query.Has("format") {
		param := PageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateOrderLabels(r.Context(), campaignIdParam, orderIdParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GeneratePricesReport - Отчет «Цены на рынке»
func (c *ExpressAPIController) GeneratePricesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generatePricesReportRequestParam := GeneratePricesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generatePricesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGeneratePricesReportRequestRequired(generatePricesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGeneratePricesReportRequestConstraints(generatePricesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GeneratePricesReport(r.Context(), generatePricesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateShelfsStatisticsReport - Отчет по полкам
func (c *ExpressAPIController) GenerateShelfsStatisticsReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateShelfsStatisticsRequestParam := GenerateShelfsStatisticsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateShelfsStatisticsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateShelfsStatisticsRequestRequired(generateShelfsStatisticsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateShelfsStatisticsRequestConstraints(generateShelfsStatisticsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateShelfsStatisticsReport(r.Context(), generateShelfsStatisticsRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateShowsSalesReport - Отчет «Аналитика продаж»
func (c *ExpressAPIController) GenerateShowsSalesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateShowsSalesReportRequestParam := GenerateShowsSalesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateShowsSalesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateShowsSalesReportRequestRequired(generateShowsSalesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateShowsSalesReportRequestConstraints(generateShowsSalesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateShowsSalesReport(r.Context(), generateShowsSalesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateStocksOnWarehousesReport - Отчет по остаткам на складах
func (c *ExpressAPIController) GenerateStocksOnWarehousesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateStocksOnWarehousesReportRequestParam := GenerateStocksOnWarehousesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateStocksOnWarehousesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateStocksOnWarehousesReportRequestRequired(generateStocksOnWarehousesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateStocksOnWarehousesReportRequestConstraints(generateStocksOnWarehousesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateStocksOnWarehousesReport(r.Context(), generateStocksOnWarehousesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateUnitedMarketplaceServicesReport - Отчет по стоимости услуг
func (c *ExpressAPIController) GenerateUnitedMarketplaceServicesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateUnitedMarketplaceServicesReportRequestParam := GenerateUnitedMarketplaceServicesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateUnitedMarketplaceServicesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateUnitedMarketplaceServicesReportRequestRequired(generateUnitedMarketplaceServicesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateUnitedMarketplaceServicesReportRequestConstraints(generateUnitedMarketplaceServicesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateUnitedMarketplaceServicesReport(r.Context(), generateUnitedMarketplaceServicesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateUnitedNettingReport - Отчет по платежам
func (c *ExpressAPIController) GenerateUnitedNettingReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateUnitedNettingReportRequestParam := GenerateUnitedNettingReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateUnitedNettingReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateUnitedNettingReportRequestRequired(generateUnitedNettingReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateUnitedNettingReportRequestConstraints(generateUnitedNettingReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateUnitedNettingReport(r.Context(), generateUnitedNettingReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateUnitedOrdersReport - Отчет по заказам
func (c *ExpressAPIController) GenerateUnitedOrdersReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateUnitedOrdersRequestParam := GenerateUnitedOrdersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateUnitedOrdersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateUnitedOrdersRequestRequired(generateUnitedOrdersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateUnitedOrdersRequestConstraints(generateUnitedOrdersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateUnitedOrdersReport(r.Context(), generateUnitedOrdersRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllOffers - Все предложения магазина
// Deprecated
func (c *ExpressAPIController) GetAllOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var feedIdParam int64
	if query.Has("feedId") {
		param, err := parseNumericParameter[int64](
			query.Get("feedId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
			return
		}

		feedIdParam = param
	} else {
	}
	var chunkParam int32
	if query.Has("chunk") {
		param, err := parseNumericParameter[int32](
			query.Get("chunk"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chunk", Err: err}, nil)
			return
		}

		chunkParam = param
	} else {
	}
	result, err := c.service.GetAllOffers(r.Context(), campaignIdParam, feedIdParam, chunkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBidsInfoForBusiness - Информация об установленных ставках
func (c *ExpressAPIController) GetBidsInfoForBusiness(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getBidsInfoRequestParam := GetBidsInfoRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getBidsInfoRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetBidsInfoRequestRequired(getBidsInfoRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetBidsInfoRequestConstraints(getBidsInfoRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetBidsInfoForBusiness(r.Context(), businessIdParam, pageTokenParam, limitParam, getBidsInfoRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBidsRecommendations - Рекомендованные ставки для заданных товаров
func (c *ExpressAPIController) GetBidsRecommendations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getBidsRecommendationsRequestParam := GetBidsRecommendationsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getBidsRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetBidsRecommendationsRequestRequired(getBidsRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetBidsRecommendationsRequestConstraints(getBidsRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetBidsRecommendations(r.Context(), businessIdParam, getBidsRecommendationsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBusinessQuarantineOffers - Список товаров, находящихся в карантине по цене в кабинете
func (c *ExpressAPIController) GetBusinessQuarantineOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getQuarantineOffersRequestParam := GetQuarantineOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestRequired(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestConstraints(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetBusinessQuarantineOffers(r.Context(), businessIdParam, getQuarantineOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBusinessSettings - Настройки кабинета
func (c *ExpressAPIController) GetBusinessSettings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	result, err := c.service.GetBusinessSettings(r.Context(), businessIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaign - Информация о магазине
func (c *ExpressAPIController) GetCampaign(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaign(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignLogins - Логины, связанные с магазином
func (c *ExpressAPIController) GetCampaignLogins(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaignLogins(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignOffers - Информация о товарах, которые размещены в заданном магазине
func (c *ExpressAPIController) GetCampaignOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getCampaignOffersRequestParam := GetCampaignOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetCampaignOffersRequestRequired(getCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetCampaignOffersRequestConstraints(getCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetCampaignOffers(r.Context(), campaignIdParam, getCampaignOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignQuarantineOffers - Список товаров, находящихся в карантине по цене в магазине
func (c *ExpressAPIController) GetCampaignQuarantineOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getQuarantineOffersRequestParam := GetQuarantineOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestRequired(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetQuarantineOffersRequestConstraints(getQuarantineOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetCampaignQuarantineOffers(r.Context(), campaignIdParam, getQuarantineOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignRegion - Регион магазина
// Deprecated
func (c *ExpressAPIController) GetCampaignRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaignRegion(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignSettings - Настройки магазина
func (c *ExpressAPIController) GetCampaignSettings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaignSettings(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaigns - Список магазинов пользователя
func (c *ExpressAPIController) GetCampaigns(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetCampaigns(r.Context(), pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignsByLogin - Магазины, доступные логину
func (c *ExpressAPIController) GetCampaignsByLogin(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	loginParam := params["login"]
	if loginParam == "" {
		c.errorHandler(w, r, &RequiredError{"login"}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetCampaignsByLogin(r.Context(), loginParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCategoriesMaxSaleQuantum - Лимит на установку кванта продажи и минимального количества товаров в заказе
func (c *ExpressAPIController) GetCategoriesMaxSaleQuantum(w http.ResponseWriter, r *http.Request) {
	getCategoriesMaxSaleQuantumRequestParam := GetCategoriesMaxSaleQuantumRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getCategoriesMaxSaleQuantumRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetCategoriesMaxSaleQuantumRequestRequired(getCategoriesMaxSaleQuantumRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetCategoriesMaxSaleQuantumRequestConstraints(getCategoriesMaxSaleQuantumRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetCategoriesMaxSaleQuantum(r.Context(), getCategoriesMaxSaleQuantumRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCategoriesTree - Дерево категорий
func (c *ExpressAPIController) GetCategoriesTree(w http.ResponseWriter, r *http.Request) {
	getCategoriesRequestParam := GetCategoriesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getCategoriesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetCategoriesRequestRequired(getCategoriesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetCategoriesRequestConstraints(getCategoriesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetCategoriesTree(r.Context(), getCategoriesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCategoryContentParameters - Списки характеристик товаров по категориям
func (c *ExpressAPIController) GetCategoryContentParameters(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	categoryIdParam, err := parseNumericParameter[int64](
		params["categoryId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "categoryId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCategoryContentParameters(r.Context(), categoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChatHistory - Получение истории сообщений в чате
func (c *ExpressAPIController) GetChatHistory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var chatIdParam int64
	if query.Has("chatId") {
		param, err := parseNumericParameter[int64](
			query.Get("chatId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chatId", Err: err}, nil)
			return
		}

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chatId"}, nil)
		return
	}
	getChatHistoryRequestParam := GetChatHistoryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getChatHistoryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetChatHistoryRequestRequired(getChatHistoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetChatHistoryRequestConstraints(getChatHistoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetChatHistory(r.Context(), businessIdParam, chatIdParam, getChatHistoryRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChats - Получение доступных чатов
func (c *ExpressAPIController) GetChats(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getChatsRequestParam := GetChatsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getChatsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetChatsRequestRequired(getChatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetChatsRequestConstraints(getChatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetChats(r.Context(), businessIdParam, getChatsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDeliveryServices - Справочник служб доставки
func (c *ExpressAPIController) GetDeliveryServices(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDeliveryServices(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeed - Информация о прайс-листе
// Deprecated
func (c *ExpressAPIController) GetFeed(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	result, err := c.service.GetFeed(r.Context(), campaignIdParam, feedIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeedIndexLogs - Отчет по индексации прайс-листа
// Deprecated
func (c *ExpressAPIController) GetFeedIndexLogs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var publishedTimeFromParam time.Time
	if query.Has("published_time_from"){
		param, err := parseTime(query.Get("published_time_from"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "published_time_from", Err: err}, nil)
			return
		}

		publishedTimeFromParam = param
	} else {
	}
	var publishedTimeToParam time.Time
	if query.Has("published_time_to"){
		param, err := parseTime(query.Get("published_time_to"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "published_time_to", Err: err}, nil)
			return
		}

		publishedTimeToParam = param
	} else {
	}
	var statusParam FeedIndexLogsStatusType
	if query.Has("status") {
		param := FeedIndexLogsStatusType(query.Get("status"))

		statusParam = param
	} else {
	}
	result, err := c.service.GetFeedIndexLogs(r.Context(), campaignIdParam, feedIdParam, limitParam, publishedTimeFromParam, publishedTimeToParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeedbackAndCommentUpdates - Новые и обновленные отзывы о магазине
// Deprecated
func (c *ExpressAPIController) GetFeedbackAndCommentUpdates(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var fromDateParam string
	if query.Has("from_date") {
		param := string(query.Get("from_date"))

		fromDateParam = param
	} else {
	}
	result, err := c.service.GetFeedbackAndCommentUpdates(r.Context(), campaignIdParam, pageTokenParam, limitParam, fromDateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeeds - Список прайс-листов магазина
// Deprecated
func (c *ExpressAPIController) GetFeeds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetFeeds(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoodsFeedbackComments - Получение комментариев к отзыву
func (c *ExpressAPIController) GetGoodsFeedbackComments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getGoodsFeedbackCommentsRequestParam := GetGoodsFeedbackCommentsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGoodsFeedbackCommentsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGoodsFeedbackCommentsRequestRequired(getGoodsFeedbackCommentsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGoodsFeedbackCommentsRequestConstraints(getGoodsFeedbackCommentsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetGoodsFeedbackComments(r.Context(), businessIdParam, getGoodsFeedbackCommentsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoodsFeedbacks - Получение отзывов о товарах продавца
func (c *ExpressAPIController) GetGoodsFeedbacks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getGoodsFeedbackRequestParam := GetGoodsFeedbackRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGoodsFeedbackRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGoodsFeedbackRequestRequired(getGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGoodsFeedbackRequestConstraints(getGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetGoodsFeedbacks(r.Context(), businessIdParam, pageTokenParam, limitParam, getGoodsFeedbackRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoodsStats - Отчет по товарам
func (c *ExpressAPIController) GetGoodsStats(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getGoodsStatsRequestParam := GetGoodsStatsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGoodsStatsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGoodsStatsRequestRequired(getGoodsStatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGoodsStatsRequestConstraints(getGoodsStatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetGoodsStats(r.Context(), campaignIdParam, getGoodsStatsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHiddenOffers - Информация о скрытых вами товарах
func (c *ExpressAPIController) GetHiddenOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var offerIdParam []string
	if query.Has("offer_id") {
		offerIdParam = strings.Split(query.Get("offer_id"), ",")
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetHiddenOffers(r.Context(), campaignIdParam, offerIdParam, pageTokenParam, limitParam, offsetParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferCardsContentStatus - Получение информации о заполненности карточек магазина
func (c *ExpressAPIController) GetOfferCardsContentStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getOfferCardsContentStatusRequestParam := GetOfferCardsContentStatusRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOfferCardsContentStatusRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOfferCardsContentStatusRequestRequired(getOfferCardsContentStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOfferCardsContentStatusRequestConstraints(getOfferCardsContentStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOfferCardsContentStatus(r.Context(), businessIdParam, pageTokenParam, limitParam, getOfferCardsContentStatusRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferMappingEntries - Список товаров в каталоге
// Deprecated
func (c *ExpressAPIController) GetOfferMappingEntries(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var offerIdParam []string
	if query.Has("offer_id") {
		offerIdParam = strings.Split(query.Get("offer_id"), ",")
	}
	var shopSkuParam []string
	if query.Has("shop_sku") {
		shopSkuParam = strings.Split(query.Get("shop_sku"), ",")
	}
	var mappingKindParam OfferMappingKindType
	if query.Has("mapping_kind") {
		param := OfferMappingKindType(query.Get("mapping_kind"))

		mappingKindParam = param
	} else {
	}
	var statusParam []OfferProcessingStatusType
	if query.Has("status") {
		paramSplits := strings.Split(query.Get("status"), ",")
		statusParam = make([]OfferProcessingStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOfferProcessingStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "status", Err: err}, nil)
				return
			}
			statusParam = append(statusParam, paramEnum)
		}
	}
	var availabilityParam []OfferAvailabilityStatusType
	if query.Has("availability") {
		paramSplits := strings.Split(query.Get("availability"), ",")
		availabilityParam = make([]OfferAvailabilityStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOfferAvailabilityStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "availability", Err: err}, nil)
				return
			}
			availabilityParam = append(availabilityParam, paramEnum)
		}
	}
	categoryIdParam, err := parseNumericArrayParameter[int32](
		query.Get("category_id"), ",", false,
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "category_id", Err: err}, nil)
		return
	}
	var vendorParam []string
	if query.Has("vendor") {
		vendorParam = strings.Split(query.Get("vendor"), ",")
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetOfferMappingEntries(r.Context(), campaignIdParam, offerIdParam, shopSkuParam, mappingKindParam, statusParam, availabilityParam, categoryIdParam, vendorParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferMappings - Информация о товарах в каталоге
func (c *ExpressAPIController) GetOfferMappings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getOfferMappingsRequestParam := GetOfferMappingsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOfferMappingsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOfferMappingsRequestRequired(getOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOfferMappingsRequestConstraints(getOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOfferMappings(r.Context(), businessIdParam, pageTokenParam, limitParam, getOfferMappingsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferRecommendations - Рекомендации Маркета, касающиеся цен
func (c *ExpressAPIController) GetOfferRecommendations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getOfferRecommendationsRequestParam := GetOfferRecommendationsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOfferRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOfferRecommendationsRequestRequired(getOfferRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOfferRecommendationsRequestConstraints(getOfferRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetOfferRecommendations(r.Context(), businessIdParam, getOfferRecommendationsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOffers - Предложения магазина
// Deprecated
func (c *ExpressAPIController) GetOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
	}
	var feedIdParam int64
	if query.Has("feedId") {
		param, err := parseNumericParameter[int64](
			query.Get("feedId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
			return
		}

		feedIdParam = param
	} else {
	}
	var shopCategoryIdParam string
	if query.Has("shopCategoryId") {
		param := query.Get("shopCategoryId")

		shopCategoryIdParam = param
	} else {
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	var matchedParam bool
	if query.Has("matched") {
		param, err := parseBoolParameter(
			query.Get("matched"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "matched", Err: err}, nil)
			return
		}

		matchedParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetOffers(r.Context(), campaignIdParam, queryParam, feedIdParam, shopCategoryIdParam, currencyParam, matchedParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrder - Информация об одном заказе
func (c *ExpressAPIController) GetOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrder(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrderBusinessBuyerInfo - Информация о покупателе — юридическом лице
func (c *ExpressAPIController) GetOrderBusinessBuyerInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderBusinessBuyerInfo(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrderBusinessDocumentsInfo - Информация о документах
func (c *ExpressAPIController) GetOrderBusinessDocumentsInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderBusinessDocumentsInfo(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrderLabelsData - Данные для самостоятельного изготовления ярлыков
func (c *ExpressAPIController) GetOrderLabelsData(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderLabelsData(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrders - Информация о нескольких заказах
func (c *ExpressAPIController) GetOrders(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdsParam, err := parseNumericArrayParameter[int64](
		query.Get("orderIds"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderIds", Err: err}, nil)
		return
	}
	var statusParam []OrderStatusType
	if query.Has("status") {
		paramSplits := strings.Split(query.Get("status"), ",")
		statusParam = make([]OrderStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOrderStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "status", Err: err}, nil)
				return
			}
			statusParam = append(statusParam, paramEnum)
		}
	}
	var substatusParam []OrderSubstatusType
	if query.Has("substatus") {
		paramSplits := strings.Split(query.Get("substatus"), ",")
		substatusParam = make([]OrderSubstatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOrderSubstatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "substatus", Err: err}, nil)
				return
			}
			substatusParam = append(substatusParam, paramEnum)
		}
	}
	var fromDateParam string
	if query.Has("fromDate") {
		param := string(query.Get("fromDate"))

		fromDateParam = param
	} else {
	}
	var toDateParam string
	if query.Has("toDate") {
		param := string(query.Get("toDate"))

		toDateParam = param
	} else {
	}
	var supplierShipmentDateFromParam string
	if query.Has("supplierShipmentDateFrom") {
		param := string(query.Get("supplierShipmentDateFrom"))

		supplierShipmentDateFromParam = param
	} else {
	}
	var supplierShipmentDateToParam string
	if query.Has("supplierShipmentDateTo") {
		param := string(query.Get("supplierShipmentDateTo"))

		supplierShipmentDateToParam = param
	} else {
	}
	var updatedAtFromParam time.Time
	if query.Has("updatedAtFrom"){
		param, err := parseTime(query.Get("updatedAtFrom"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "updatedAtFrom", Err: err}, nil)
			return
		}

		updatedAtFromParam = param
	} else {
	}
	var updatedAtToParam time.Time
	if query.Has("updatedAtTo"){
		param, err := parseTime(query.Get("updatedAtTo"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "updatedAtTo", Err: err}, nil)
			return
		}

		updatedAtToParam = param
	} else {
	}
	var dispatchTypeParam OrderDeliveryDispatchType
	if query.Has("dispatchType") {
		param := OrderDeliveryDispatchType(query.Get("dispatchType"))

		dispatchTypeParam = param
	} else {
	}
	var fakeParam bool
	if query.Has("fake") {
		param, err := parseBoolParameter(
			query.Get("fake"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "fake", Err: err}, nil)
			return
		}

		fakeParam = param
	} else {
		var param bool = false
		fakeParam = param
	}
	var hasCisParam bool
	if query.Has("hasCis") {
		param, err := parseBoolParameter(
			query.Get("hasCis"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "hasCis", Err: err}, nil)
			return
		}

		hasCisParam = param
	} else {
		var param bool = false
		hasCisParam = param
	}
	var onlyWaitingForCancellationApproveParam bool
	if query.Has("onlyWaitingForCancellationApprove") {
		param, err := parseBoolParameter(
			query.Get("onlyWaitingForCancellationApprove"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "onlyWaitingForCancellationApprove", Err: err}, nil)
			return
		}

		onlyWaitingForCancellationApproveParam = param
	} else {
		var param bool = false
		onlyWaitingForCancellationApproveParam = param
	}
	var onlyEstimatedDeliveryParam bool
	if query.Has("onlyEstimatedDelivery") {
		param, err := parseBoolParameter(
			query.Get("onlyEstimatedDelivery"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "onlyEstimatedDelivery", Err: err}, nil)
			return
		}

		onlyEstimatedDeliveryParam = param
	} else {
		var param bool = false
		onlyEstimatedDeliveryParam = param
	}
	var buyerTypeParam OrderBuyerType
	if query.Has("buyerType") {
		param := OrderBuyerType(query.Get("buyerType"))

		buyerTypeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetOrders(r.Context(), campaignIdParam, orderIdsParam, statusParam, substatusParam, fromDateParam, toDateParam, supplierShipmentDateFromParam, supplierShipmentDateToParam, updatedAtFromParam, updatedAtToParam, dispatchTypeParam, fakeParam, hasCisParam, onlyWaitingForCancellationApproveParam, onlyEstimatedDeliveryParam, buyerTypeParam, pageParam, pageSizeParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrdersStats - Детальная информация по заказам
func (c *ExpressAPIController) GetOrdersStats(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getOrdersStatsRequestParam := GetOrdersStatsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOrdersStatsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOrdersStatsRequestRequired(getOrdersStatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOrdersStatsRequestConstraints(getOrdersStatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOrdersStats(r.Context(), campaignIdParam, pageTokenParam, limitParam, getOrdersStatsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPrices - Список цен
// Deprecated
func (c *ExpressAPIController) GetPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var archivedParam bool
	if query.Has("archived") {
		param, err := parseBoolParameter(
			query.Get("archived"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "archived", Err: err}, nil)
			return
		}

		archivedParam = param
	} else {
		var param bool = false
		archivedParam = param
	}
	result, err := c.service.GetPrices(r.Context(), campaignIdParam, pageTokenParam, limitParam, archivedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPricesByOfferIds - Просмотр цен на указанные товары в магазине
func (c *ExpressAPIController) GetPricesByOfferIds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getPricesByOfferIdsRequestParam := GetPricesByOfferIdsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPricesByOfferIdsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPricesByOfferIdsRequestRequired(getPricesByOfferIdsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPricesByOfferIdsRequestConstraints(getPricesByOfferIdsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetPricesByOfferIds(r.Context(), campaignIdParam, pageTokenParam, limitParam, getPricesByOfferIdsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPromoOffers - Получение списка товаров, которые участвуют или могут участвовать в акции
func (c *ExpressAPIController) GetPromoOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getPromoOffersRequestParam := GetPromoOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPromoOffersRequestRequired(getPromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPromoOffersRequestConstraints(getPromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetPromoOffers(r.Context(), businessIdParam, getPromoOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPromos - Получение списка акций
func (c *ExpressAPIController) GetPromos(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getPromosRequestParam := GetPromosRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPromosRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPromosRequestRequired(getPromosRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPromosRequestConstraints(getPromosRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetPromos(r.Context(), businessIdParam, getPromosRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetQualityRatingDetails - Заказы, которые повлияли на индекс качества
func (c *ExpressAPIController) GetQualityRatingDetails(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetQualityRatingDetails(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetQualityRatings - Индекс качества магазинов
func (c *ExpressAPIController) GetQualityRatings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getQualityRatingRequestParam := GetQualityRatingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getQualityRatingRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetQualityRatingRequestRequired(getQualityRatingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetQualityRatingRequestConstraints(getQualityRatingRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetQualityRatings(r.Context(), businessIdParam, getQualityRatingRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReportInfo - Получение заданного отчета
func (c *ExpressAPIController) GetReportInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	reportIdParam := params["reportId"]
	if reportIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"reportId"}, nil)
		return
	}
	result, err := c.service.GetReportInfo(r.Context(), reportIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturn - Информация о невыкупе или возврате
func (c *ExpressAPIController) GetReturn(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	result, err := c.service.GetReturn(r.Context(), campaignIdParam, orderIdParam, returnIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturnApplication - Получение заявления на возврат
func (c *ExpressAPIController) GetReturnApplication(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	result, err := c.service.GetReturnApplication(r.Context(), campaignIdParam, orderIdParam, returnIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturnPhoto - Получение фотографии возврата
func (c *ExpressAPIController) GetReturnPhoto(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	returnIdParam, err := parseNumericParameter[int64](
		params["returnId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "returnId", Err: err}, nil)
		return
	}
	itemIdParam, err := parseNumericParameter[int64](
		params["itemId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "itemId", Err: err}, nil)
		return
	}
	imageHashParam := params["imageHash"]
	if imageHashParam == "" {
		c.errorHandler(w, r, &RequiredError{"imageHash"}, nil)
		return
	}
	result, err := c.service.GetReturnPhoto(r.Context(), campaignIdParam, orderIdParam, returnIdParam, itemIdParam, imageHashParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturns - Список невыкупов и возвратов
func (c *ExpressAPIController) GetReturns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	orderIdsParam, err := parseNumericArrayParameter[int64](
		query.Get("orderIds"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderIds", Err: err}, nil)
		return
	}
	var statusesParam []RefundStatusType
	if query.Has("statuses") {
		paramSplits := strings.Split(query.Get("statuses"), ",")
		statusesParam = make([]RefundStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewRefundStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "statuses", Err: err}, nil)
				return
			}
			statusesParam = append(statusesParam, paramEnum)
		}
	}
	var type_Param ReturnType
	if query.Has("type") {
		param := ReturnType(query.Get("type"))

		type_Param = param
	} else {
	}
	var fromDateParam string
	if query.Has("fromDate") {
		param := string(query.Get("fromDate"))

		fromDateParam = param
	} else {
	}
	var toDateParam string
	if query.Has("toDate") {
		param := string(query.Get("toDate"))

		toDateParam = param
	} else {
	}
	var fromDate2Param string
	if query.Has("from_date") {
		param := string(query.Get("from_date"))

		fromDate2Param = param
	} else {
	}
	var toDate2Param string
	if query.Has("to_date") {
		param := string(query.Get("to_date"))

		toDate2Param = param
	} else {
	}
	result, err := c.service.GetReturns(r.Context(), campaignIdParam, pageTokenParam, limitParam, orderIdsParam, statusesParam, type_Param, fromDateParam, toDateParam, fromDate2Param, toDate2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStocks - Информация об остатках и оборачиваемости
func (c *ExpressAPIController) GetStocks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getWarehouseStocksRequestParam := GetWarehouseStocksRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getWarehouseStocksRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetWarehouseStocksRequestRequired(getWarehouseStocksRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetWarehouseStocksRequestConstraints(getWarehouseStocksRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetStocks(r.Context(), campaignIdParam, pageTokenParam, limitParam, getWarehouseStocksRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSuggestedOfferMappingEntries - Рекомендованные карточки для товаров
// Deprecated
func (c *ExpressAPIController) GetSuggestedOfferMappingEntries(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getSuggestedOfferMappingEntriesRequestParam := GetSuggestedOfferMappingEntriesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSuggestedOfferMappingEntriesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingEntriesRequestRequired(getSuggestedOfferMappingEntriesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingEntriesRequestConstraints(getSuggestedOfferMappingEntriesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSuggestedOfferMappingEntries(r.Context(), campaignIdParam, getSuggestedOfferMappingEntriesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSuggestedOfferMappings - Просмотр карточек на Маркете, которые подходят вашим товарам
func (c *ExpressAPIController) GetSuggestedOfferMappings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getSuggestedOfferMappingsRequestParam := GetSuggestedOfferMappingsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSuggestedOfferMappingsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingsRequestRequired(getSuggestedOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingsRequestConstraints(getSuggestedOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSuggestedOfferMappings(r.Context(), businessIdParam, getSuggestedOfferMappingsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSuggestedPrices - Цены для продвижения товаров
// Deprecated
func (c *ExpressAPIController) GetSuggestedPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	suggestPricesRequestParam := SuggestPricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&suggestPricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSuggestPricesRequestRequired(suggestPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSuggestPricesRequestConstraints(suggestPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSuggestedPrices(r.Context(), campaignIdParam, suggestPricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWarehouses - Список складов и групп складов
func (c *ExpressAPIController) GetWarehouses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	result, err := c.service.GetWarehouses(r.Context(), businessIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProvideOrderItemIdentifiers - Передача кодов маркировки единиц товара
func (c *ExpressAPIController) ProvideOrderItemIdentifiers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	provideOrderItemIdentifiersRequestParam := ProvideOrderItemIdentifiersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&provideOrderItemIdentifiersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProvideOrderItemIdentifiersRequestRequired(provideOrderItemIdentifiersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProvideOrderItemIdentifiersRequestConstraints(provideOrderItemIdentifiersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProvideOrderItemIdentifiers(r.Context(), campaignIdParam, orderIdParam, provideOrderItemIdentifiersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutBidsForBusiness - Включение буста продаж и установка ставок
func (c *ExpressAPIController) PutBidsForBusiness(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	putSkuBidsRequestParam := PutSkuBidsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putSkuBidsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutSkuBidsRequestRequired(putSkuBidsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutSkuBidsRequestConstraints(putSkuBidsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutBidsForBusiness(r.Context(), businessIdParam, putSkuBidsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutBidsForCampaign - Включение буста продаж и установка ставок для магазина
func (c *ExpressAPIController) PutBidsForCampaign(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	putSkuBidsRequestParam := PutSkuBidsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putSkuBidsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutSkuBidsRequestRequired(putSkuBidsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutSkuBidsRequestConstraints(putSkuBidsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutBidsForCampaign(r.Context(), campaignIdParam, putSkuBidsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RefreshFeed - Сообщить, что прайс-лист обновился
// Deprecated
func (c *ExpressAPIController) RefreshFeed(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	result, err := c.service.RefreshFeed(r.Context(), campaignIdParam, feedIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchRegionChildren - Информация о дочерних регионах
func (c *ExpressAPIController) SearchRegionChildren(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	regionIdParam, err := parseNumericParameter[int64](
		params["regionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.SearchRegionChildren(r.Context(), regionIdParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchRegionsById - Информация о регионе
func (c *ExpressAPIController) SearchRegionsById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam, err := parseNumericParameter[int64](
		params["regionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
		return
	}
	result, err := c.service.SearchRegionsById(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchRegionsByName - Поиск регионов по их имени
func (c *ExpressAPIController) SearchRegionsByName(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.SearchRegionsByName(r.Context(), nameParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendFileToChat - Отправка файла в чат
func (c *ExpressAPIController) SendFileToChat(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var chatIdParam int64
	if query.Has("chatId") {
		param, err := parseNumericParameter[int64](
			query.Get("chatId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chatId", Err: err}, nil)
			return
		}

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chatId"}, nil)
		return
	}
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "file", Err: err}, nil)
			return
		}

		fileParam = param
	}
	
	
	result, err := c.service.SendFileToChat(r.Context(), businessIdParam, chatIdParam, fileParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendMessageToChat - Отправка сообщения в чат
func (c *ExpressAPIController) SendMessageToChat(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var chatIdParam int64
	if query.Has("chatId") {
		param, err := parseNumericParameter[int64](
			query.Get("chatId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chatId", Err: err}, nil)
			return
		}

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chatId"}, nil)
		return
	}
	sendMessageToChatRequestParam := SendMessageToChatRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sendMessageToChatRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSendMessageToChatRequestRequired(sendMessageToChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSendMessageToChatRequestConstraints(sendMessageToChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendMessageToChat(r.Context(), businessIdParam, chatIdParam, sendMessageToChatRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetFeedParams - Изменение параметров прайс-листа
// Deprecated
func (c *ExpressAPIController) SetFeedParams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	setFeedParamsRequestParam := SetFeedParamsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setFeedParamsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetFeedParamsRequestRequired(setFeedParamsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetFeedParamsRequestConstraints(setFeedParamsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetFeedParams(r.Context(), campaignIdParam, feedIdParam, setFeedParamsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetOrderBoxLayout - Подготовка заказа
func (c *ExpressAPIController) SetOrderBoxLayout(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	setOrderBoxLayoutRequestParam := SetOrderBoxLayoutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setOrderBoxLayoutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetOrderBoxLayoutRequestRequired(setOrderBoxLayoutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetOrderBoxLayoutRequestConstraints(setOrderBoxLayoutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetOrderBoxLayout(r.Context(), campaignIdParam, orderIdParam, setOrderBoxLayoutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetOrderShipmentBoxes - Передача количества грузовых мест в заказе
func (c *ExpressAPIController) SetOrderShipmentBoxes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	setOrderShipmentBoxesRequestParam := SetOrderShipmentBoxesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setOrderShipmentBoxesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetOrderShipmentBoxesRequestRequired(setOrderShipmentBoxesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetOrderShipmentBoxesRequestConstraints(setOrderShipmentBoxesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetOrderShipmentBoxes(r.Context(), campaignIdParam, orderIdParam, shipmentIdParam, setOrderShipmentBoxesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SkipGoodsFeedbacksReaction - Отказ от ответа на отзывы
func (c *ExpressAPIController) SkipGoodsFeedbacksReaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	skipGoodsFeedbackReactionRequestParam := SkipGoodsFeedbackReactionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&skipGoodsFeedbackReactionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSkipGoodsFeedbackReactionRequestRequired(skipGoodsFeedbackReactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSkipGoodsFeedbackReactionRequestConstraints(skipGoodsFeedbackReactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SkipGoodsFeedbacksReaction(r.Context(), businessIdParam, skipGoodsFeedbackReactionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateBusinessPrices - Установка цен на товары во всех магазинах
func (c *ExpressAPIController) UpdateBusinessPrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateBusinessPricesRequestParam := UpdateBusinessPricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateBusinessPricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateBusinessPricesRequestRequired(updateBusinessPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateBusinessPricesRequestConstraints(updateBusinessPricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateBusinessPrices(r.Context(), businessIdParam, updateBusinessPricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCampaignOffers - Изменение условий продажи товаров в магазине
func (c *ExpressAPIController) UpdateCampaignOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateCampaignOffersRequestParam := UpdateCampaignOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateCampaignOffersRequestRequired(updateCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateCampaignOffersRequestConstraints(updateCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCampaignOffers(r.Context(), campaignIdParam, updateCampaignOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGoodsFeedbackComment - Добавление нового или изменение созданного комментария
func (c *ExpressAPIController) UpdateGoodsFeedbackComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateGoodsFeedbackCommentRequestParam := UpdateGoodsFeedbackCommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateGoodsFeedbackCommentRequestRequired(updateGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateGoodsFeedbackCommentRequestConstraints(updateGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGoodsFeedbackComment(r.Context(), businessIdParam, updateGoodsFeedbackCommentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOfferContent - Редактирование категорийных характеристик товара
func (c *ExpressAPIController) UpdateOfferContent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateOfferContentRequestParam := UpdateOfferContentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOfferContentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOfferContentRequestRequired(updateOfferContentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOfferContentRequestConstraints(updateOfferContentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOfferContent(r.Context(), businessIdParam, updateOfferContentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOfferMappingEntries - Добавление и редактирование товаров в каталоге
// Deprecated
func (c *ExpressAPIController) UpdateOfferMappingEntries(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateOfferMappingEntryRequestParam := UpdateOfferMappingEntryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOfferMappingEntryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOfferMappingEntryRequestRequired(updateOfferMappingEntryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOfferMappingEntryRequestConstraints(updateOfferMappingEntryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOfferMappingEntries(r.Context(), campaignIdParam, updateOfferMappingEntryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOfferMappings - Добавление товаров в каталог и изменение информации о них
func (c *ExpressAPIController) UpdateOfferMappings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateOfferMappingsRequestParam := UpdateOfferMappingsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOfferMappingsRequestRequired(updateOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOfferMappingsRequestConstraints(updateOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOfferMappings(r.Context(), businessIdParam, updateOfferMappingsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderItems - Удаление товара из заказа или уменьшение числа единиц
func (c *ExpressAPIController) UpdateOrderItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	updateOrderItemRequestParam := UpdateOrderItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderItemRequestRequired(updateOrderItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderItemRequestConstraints(updateOrderItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderItems(r.Context(), campaignIdParam, orderIdParam, updateOrderItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderStatus - Изменение статуса одного заказа
func (c *ExpressAPIController) UpdateOrderStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	updateOrderStatusRequestParam := UpdateOrderStatusRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderStatusRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderStatusRequestRequired(updateOrderStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderStatusRequestConstraints(updateOrderStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderStatus(r.Context(), campaignIdParam, orderIdParam, updateOrderStatusRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderStatuses - Изменение статусов нескольких заказов
func (c *ExpressAPIController) UpdateOrderStatuses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateOrderStatusesRequestParam := UpdateOrderStatusesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderStatusesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderStatusesRequestRequired(updateOrderStatusesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderStatusesRequestConstraints(updateOrderStatusesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderStatuses(r.Context(), campaignIdParam, updateOrderStatusesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePrices - Установка цен на товары в конкретном магазине
func (c *ExpressAPIController) UpdatePrices(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updatePricesRequestParam := UpdatePricesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePricesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdatePricesRequestRequired(updatePricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdatePricesRequestConstraints(updatePricesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePrices(r.Context(), campaignIdParam, updatePricesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePromoOffers - Добавление товаров в акцию или изменение их цен
func (c *ExpressAPIController) UpdatePromoOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updatePromoOffersRequestParam := UpdatePromoOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdatePromoOffersRequestRequired(updatePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdatePromoOffersRequestConstraints(updatePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePromoOffers(r.Context(), businessIdParam, updatePromoOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateStocks - Передача информации об остатках
func (c *ExpressAPIController) UpdateStocks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateStocksRequestParam := UpdateStocksRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateStocksRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateStocksRequestRequired(updateStocksRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateStocksRequestConstraints(updateStocksRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateStocks(r.Context(), campaignIdParam, updateStocksRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// VerifyOrderEac - Передача кода подтверждения
func (c *ExpressAPIController) VerifyOrderEac(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	verifyOrderEacRequestParam := VerifyOrderEacRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&verifyOrderEacRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVerifyOrderEacRequestRequired(verifyOrderEacRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVerifyOrderEacRequestConstraints(verifyOrderEacRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.VerifyOrderEac(r.Context(), campaignIdParam, orderIdParam, verifyOrderEacRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
