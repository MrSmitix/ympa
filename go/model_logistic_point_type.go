// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// LogisticPointType : Тип логистической точки:    * `WAREHOUSE` — склад.   * `PICKUP_POINT` — обычная точка выдачи заказов (ПВЗ).   * `PICKUP_TERMINAL` — постамат.   * `PICKUP_POST_OFFICE` — отделение почтовой связи (ОПС).   * `PICKUP_MIXED` — торговый зал и пункт выдачи заказов.   * `PICKUP_RETAIL` — торговый зал. 
type LogisticPointType string

// List of LogisticPointType
const (
	WAREHOUSE LogisticPointType = "WAREHOUSE"
	PICKUP_POINT LogisticPointType = "PICKUP_POINT"
	PICKUP_TERMINAL LogisticPointType = "PICKUP_TERMINAL"
	PICKUP_POST_OFFICE LogisticPointType = "PICKUP_POST_OFFICE"
	PICKUP_MIXED LogisticPointType = "PICKUP_MIXED"
	PICKUP_RETAIL LogisticPointType = "PICKUP_RETAIL"
	UNKNOWN LogisticPointType = "UNKNOWN"
)

// AllowedLogisticPointTypeEnumValues is all the allowed values of LogisticPointType enum
var AllowedLogisticPointTypeEnumValues = []LogisticPointType{
	"WAREHOUSE",
	"PICKUP_POINT",
	"PICKUP_TERMINAL",
	"PICKUP_POST_OFFICE",
	"PICKUP_MIXED",
	"PICKUP_RETAIL",
	"UNKNOWN",
}

// validLogisticPointTypeEnumValue provides a map of LogisticPointTypes for fast verification of use input
var validLogisticPointTypeEnumValues = map[LogisticPointType]struct{}{
	"WAREHOUSE": {},
	"PICKUP_POINT": {},
	"PICKUP_TERMINAL": {},
	"PICKUP_POST_OFFICE": {},
	"PICKUP_MIXED": {},
	"PICKUP_RETAIL": {},
	"UNKNOWN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogisticPointType) IsValid() bool {
	_, ok := validLogisticPointTypeEnumValues[v]
	return ok
}

// NewLogisticPointTypeFromValue returns a pointer to a valid LogisticPointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogisticPointTypeFromValue(v string) (LogisticPointType, error) {
	ev := LogisticPointType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LogisticPointType: valid values are %v", v, AllowedLogisticPointTypeEnumValues)
}



// AssertLogisticPointTypeRequired checks if the required fields are not zero-ed
func AssertLogisticPointTypeRequired(obj LogisticPointType) error {
	return nil
}

// AssertLogisticPointTypeConstraints checks if the values respects the defined constraints
func AssertLogisticPointTypeConstraints(obj LogisticPointType) error {
	return nil
}
