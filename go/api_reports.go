// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ReportsAPIController binds http requests to an api service and writes the service results to the http response
type ReportsAPIController struct {
	service ReportsAPIServicer
	errorHandler ErrorHandler
}

// ReportsAPIOption for how the controller is set up.
type ReportsAPIOption func(*ReportsAPIController)

// WithReportsAPIErrorHandler inject ErrorHandler into controller
func WithReportsAPIErrorHandler(h ErrorHandler) ReportsAPIOption {
	return func(c *ReportsAPIController) {
		c.errorHandler = h
	}
}

// NewReportsAPIController creates a default api controller
func NewReportsAPIController(s ReportsAPIServicer, opts ...ReportsAPIOption) *ReportsAPIController {
	controller := &ReportsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReportsAPIController
func (c *ReportsAPIController) Routes() Routes {
	return Routes{
		"GenerateBoostConsolidatedReport": Route{
			strings.ToUpper("Post"),
			"/reports/boost-consolidated/generate",
			c.GenerateBoostConsolidatedReport,
		},
		"GenerateCompetitorsPositionReport": Route{
			strings.ToUpper("Post"),
			"/reports/competitors-position/generate",
			c.GenerateCompetitorsPositionReport,
		},
		"GenerateGoodsFeedbackReport": Route{
			strings.ToUpper("Post"),
			"/reports/goods-feedback/generate",
			c.GenerateGoodsFeedbackReport,
		},
		"GenerateGoodsMovementReport": Route{
			strings.ToUpper("Post"),
			"/reports/goods-movement/generate",
			c.GenerateGoodsMovementReport,
		},
		"GenerateGoodsRealizationReport": Route{
			strings.ToUpper("Post"),
			"/reports/goods-realization/generate",
			c.GenerateGoodsRealizationReport,
		},
		"GenerateGoodsTurnoverReport": Route{
			strings.ToUpper("Post"),
			"/reports/goods-turnover/generate",
			c.GenerateGoodsTurnoverReport,
		},
		"GenerateMassOrderLabelsReport": Route{
			strings.ToUpper("Post"),
			"/reports/documents/labels/generate",
			c.GenerateMassOrderLabelsReport,
		},
		"GeneratePricesReport": Route{
			strings.ToUpper("Post"),
			"/reports/prices/generate",
			c.GeneratePricesReport,
		},
		"GenerateShelfsStatisticsReport": Route{
			strings.ToUpper("Post"),
			"/reports/shelf-statistics/generate",
			c.GenerateShelfsStatisticsReport,
		},
		"GenerateShipmentListDocumentReport": Route{
			strings.ToUpper("Post"),
			"/reports/documents/shipment-list/generate",
			c.GenerateShipmentListDocumentReport,
		},
		"GenerateShowsSalesReport": Route{
			strings.ToUpper("Post"),
			"/reports/shows-sales/generate",
			c.GenerateShowsSalesReport,
		},
		"GenerateStocksOnWarehousesReport": Route{
			strings.ToUpper("Post"),
			"/reports/stocks-on-warehouses/generate",
			c.GenerateStocksOnWarehousesReport,
		},
		"GenerateUnitedMarketplaceServicesReport": Route{
			strings.ToUpper("Post"),
			"/reports/united-marketplace-services/generate",
			c.GenerateUnitedMarketplaceServicesReport,
		},
		"GenerateUnitedNettingReport": Route{
			strings.ToUpper("Post"),
			"/reports/united-netting/generate",
			c.GenerateUnitedNettingReport,
		},
		"GenerateUnitedOrdersReport": Route{
			strings.ToUpper("Post"),
			"/reports/united-orders/generate",
			c.GenerateUnitedOrdersReport,
		},
		"GetReportInfo": Route{
			strings.ToUpper("Get"),
			"/reports/info/{reportId}",
			c.GetReportInfo,
		},
	}
}

// GenerateBoostConsolidatedReport - Отчет по бусту продаж
func (c *ReportsAPIController) GenerateBoostConsolidatedReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateBoostConsolidatedRequestParam := GenerateBoostConsolidatedRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateBoostConsolidatedRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateBoostConsolidatedRequestRequired(generateBoostConsolidatedRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateBoostConsolidatedRequestConstraints(generateBoostConsolidatedRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateBoostConsolidatedReport(r.Context(), generateBoostConsolidatedRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateCompetitorsPositionReport - Отчет «Конкурентная позиция»
func (c *ReportsAPIController) GenerateCompetitorsPositionReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateCompetitorsPositionReportRequestParam := GenerateCompetitorsPositionReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateCompetitorsPositionReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateCompetitorsPositionReportRequestRequired(generateCompetitorsPositionReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateCompetitorsPositionReportRequestConstraints(generateCompetitorsPositionReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateCompetitorsPositionReport(r.Context(), generateCompetitorsPositionReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateGoodsFeedbackReport - Отчет по отзывам о товарах
func (c *ReportsAPIController) GenerateGoodsFeedbackReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateGoodsFeedbackRequestParam := GenerateGoodsFeedbackRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateGoodsFeedbackRequestRequired(generateGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateGoodsFeedbackRequestConstraints(generateGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateGoodsFeedbackReport(r.Context(), generateGoodsFeedbackRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateGoodsMovementReport - Отчет по движению товаров
func (c *ReportsAPIController) GenerateGoodsMovementReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateGoodsMovementReportRequestParam := GenerateGoodsMovementReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateGoodsMovementReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateGoodsMovementReportRequestRequired(generateGoodsMovementReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateGoodsMovementReportRequestConstraints(generateGoodsMovementReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateGoodsMovementReport(r.Context(), generateGoodsMovementReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateGoodsRealizationReport - Отчет по реализации
func (c *ReportsAPIController) GenerateGoodsRealizationReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateGoodsRealizationReportRequestParam := GenerateGoodsRealizationReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateGoodsRealizationReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateGoodsRealizationReportRequestRequired(generateGoodsRealizationReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateGoodsRealizationReportRequestConstraints(generateGoodsRealizationReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateGoodsRealizationReport(r.Context(), generateGoodsRealizationReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateGoodsTurnoverReport - Отчет по оборачиваемости
func (c *ReportsAPIController) GenerateGoodsTurnoverReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateGoodsTurnoverRequestParam := GenerateGoodsTurnoverRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateGoodsTurnoverRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateGoodsTurnoverRequestRequired(generateGoodsTurnoverRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateGoodsTurnoverRequestConstraints(generateGoodsTurnoverRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateGoodsTurnoverReport(r.Context(), generateGoodsTurnoverRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateMassOrderLabelsReport - Готовые ярлыки‑наклейки на все коробки в нескольких заказах
func (c *ReportsAPIController) GenerateMassOrderLabelsReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateMassOrderLabelsRequestParam := GenerateMassOrderLabelsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateMassOrderLabelsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateMassOrderLabelsRequestRequired(generateMassOrderLabelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateMassOrderLabelsRequestConstraints(generateMassOrderLabelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam PageFormatType
	if query.Has("format") {
		param := PageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateMassOrderLabelsReport(r.Context(), generateMassOrderLabelsRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GeneratePricesReport - Отчет «Цены на рынке»
func (c *ReportsAPIController) GeneratePricesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generatePricesReportRequestParam := GeneratePricesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generatePricesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGeneratePricesReportRequestRequired(generatePricesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGeneratePricesReportRequestConstraints(generatePricesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GeneratePricesReport(r.Context(), generatePricesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateShelfsStatisticsReport - Отчет по полкам
func (c *ReportsAPIController) GenerateShelfsStatisticsReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateShelfsStatisticsRequestParam := GenerateShelfsStatisticsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateShelfsStatisticsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateShelfsStatisticsRequestRequired(generateShelfsStatisticsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateShelfsStatisticsRequestConstraints(generateShelfsStatisticsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateShelfsStatisticsReport(r.Context(), generateShelfsStatisticsRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateShipmentListDocumentReport - Получение листа сборки
func (c *ReportsAPIController) GenerateShipmentListDocumentReport(w http.ResponseWriter, r *http.Request) {
	generateShipmentListDocumentReportRequestParam := GenerateShipmentListDocumentReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateShipmentListDocumentReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateShipmentListDocumentReportRequestRequired(generateShipmentListDocumentReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateShipmentListDocumentReportRequestConstraints(generateShipmentListDocumentReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GenerateShipmentListDocumentReport(r.Context(), generateShipmentListDocumentReportRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateShowsSalesReport - Отчет «Аналитика продаж»
func (c *ReportsAPIController) GenerateShowsSalesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateShowsSalesReportRequestParam := GenerateShowsSalesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateShowsSalesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateShowsSalesReportRequestRequired(generateShowsSalesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateShowsSalesReportRequestConstraints(generateShowsSalesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateShowsSalesReport(r.Context(), generateShowsSalesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateStocksOnWarehousesReport - Отчет по остаткам на складах
func (c *ReportsAPIController) GenerateStocksOnWarehousesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateStocksOnWarehousesReportRequestParam := GenerateStocksOnWarehousesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateStocksOnWarehousesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateStocksOnWarehousesReportRequestRequired(generateStocksOnWarehousesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateStocksOnWarehousesReportRequestConstraints(generateStocksOnWarehousesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateStocksOnWarehousesReport(r.Context(), generateStocksOnWarehousesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateUnitedMarketplaceServicesReport - Отчет по стоимости услуг
func (c *ReportsAPIController) GenerateUnitedMarketplaceServicesReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateUnitedMarketplaceServicesReportRequestParam := GenerateUnitedMarketplaceServicesReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateUnitedMarketplaceServicesReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateUnitedMarketplaceServicesReportRequestRequired(generateUnitedMarketplaceServicesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateUnitedMarketplaceServicesReportRequestConstraints(generateUnitedMarketplaceServicesReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateUnitedMarketplaceServicesReport(r.Context(), generateUnitedMarketplaceServicesReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateUnitedNettingReport - Отчет по платежам
func (c *ReportsAPIController) GenerateUnitedNettingReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateUnitedNettingReportRequestParam := GenerateUnitedNettingReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateUnitedNettingReportRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateUnitedNettingReportRequestRequired(generateUnitedNettingReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateUnitedNettingReportRequestConstraints(generateUnitedNettingReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateUnitedNettingReport(r.Context(), generateUnitedNettingReportRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateUnitedOrdersReport - Отчет по заказам
func (c *ReportsAPIController) GenerateUnitedOrdersReport(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	generateUnitedOrdersRequestParam := GenerateUnitedOrdersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateUnitedOrdersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateUnitedOrdersRequestRequired(generateUnitedOrdersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateUnitedOrdersRequestConstraints(generateUnitedOrdersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var formatParam ReportFormatType
	if query.Has("format") {
		param := ReportFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateUnitedOrdersReport(r.Context(), generateUnitedOrdersRequestParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReportInfo - Получение заданного отчета
func (c *ReportsAPIController) GetReportInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	reportIdParam := params["reportId"]
	if reportIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"reportId"}, nil)
		return
	}
	result, err := c.service.GetReportInfo(r.Context(), reportIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
