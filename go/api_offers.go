// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OffersAPIController binds http requests to an api service and writes the service results to the http response
type OffersAPIController struct {
	service OffersAPIServicer
	errorHandler ErrorHandler
}

// OffersAPIOption for how the controller is set up.
type OffersAPIOption func(*OffersAPIController)

// WithOffersAPIErrorHandler inject ErrorHandler into controller
func WithOffersAPIErrorHandler(h ErrorHandler) OffersAPIOption {
	return func(c *OffersAPIController) {
		c.errorHandler = h
	}
}

// NewOffersAPIController creates a default api controller
func NewOffersAPIController(s OffersAPIServicer, opts ...OffersAPIOption) *OffersAPIController {
	controller := &OffersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OffersAPIController
func (c *OffersAPIController) Routes() Routes {
	return Routes{
		"DeleteCampaignOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers/delete",
			c.DeleteCampaignOffers,
		},
		"GetAllOffers": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offers/all",
			c.GetAllOffers,
		},
		"GetCampaignOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers",
			c.GetCampaignOffers,
		},
		"GetOfferRecommendations": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offers/recommendations",
			c.GetOfferRecommendations,
		},
		"GetOffers": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offers",
			c.GetOffers,
		},
		"UpdateCampaignOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offers/update",
			c.UpdateCampaignOffers,
		},
	}
}

// DeleteCampaignOffers - Удаление товаров из ассортимента магазина
func (c *OffersAPIController) DeleteCampaignOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	deleteCampaignOffersRequestParam := DeleteCampaignOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteCampaignOffersRequestRequired(deleteCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteCampaignOffersRequestConstraints(deleteCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteCampaignOffers(r.Context(), campaignIdParam, deleteCampaignOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllOffers - Все предложения магазина
// Deprecated
func (c *OffersAPIController) GetAllOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var feedIdParam int64
	if query.Has("feedId") {
		param, err := parseNumericParameter[int64](
			query.Get("feedId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
			return
		}

		feedIdParam = param
	} else {
	}
	var chunkParam int32
	if query.Has("chunk") {
		param, err := parseNumericParameter[int32](
			query.Get("chunk"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chunk", Err: err}, nil)
			return
		}

		chunkParam = param
	} else {
	}
	result, err := c.service.GetAllOffers(r.Context(), campaignIdParam, feedIdParam, chunkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignOffers - Информация о товарах, которые размещены в заданном магазине
func (c *OffersAPIController) GetCampaignOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getCampaignOffersRequestParam := GetCampaignOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetCampaignOffersRequestRequired(getCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetCampaignOffersRequestConstraints(getCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetCampaignOffers(r.Context(), campaignIdParam, getCampaignOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferRecommendations - Рекомендации Маркета, касающиеся цен
func (c *OffersAPIController) GetOfferRecommendations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getOfferRecommendationsRequestParam := GetOfferRecommendationsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOfferRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOfferRecommendationsRequestRequired(getOfferRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOfferRecommendationsRequestConstraints(getOfferRecommendationsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetOfferRecommendations(r.Context(), businessIdParam, getOfferRecommendationsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOffers - Предложения магазина
// Deprecated
func (c *OffersAPIController) GetOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
	}
	var feedIdParam int64
	if query.Has("feedId") {
		param, err := parseNumericParameter[int64](
			query.Get("feedId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
			return
		}

		feedIdParam = param
	} else {
	}
	var shopCategoryIdParam string
	if query.Has("shopCategoryId") {
		param := query.Get("shopCategoryId")

		shopCategoryIdParam = param
	} else {
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	var matchedParam bool
	if query.Has("matched") {
		param, err := parseBoolParameter(
			query.Get("matched"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "matched", Err: err}, nil)
			return
		}

		matchedParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetOffers(r.Context(), campaignIdParam, queryParam, feedIdParam, shopCategoryIdParam, currencyParam, matchedParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCampaignOffers - Изменение условий продажи товаров в магазине
func (c *OffersAPIController) UpdateCampaignOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateCampaignOffersRequestParam := UpdateCampaignOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateCampaignOffersRequestRequired(updateCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateCampaignOffersRequestConstraints(updateCampaignOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCampaignOffers(r.Context(), campaignIdParam, updateCampaignOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
