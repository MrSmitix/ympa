// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OutletLicensesAPIController binds http requests to an api service and writes the service results to the http response
type OutletLicensesAPIController struct {
	service OutletLicensesAPIServicer
	errorHandler ErrorHandler
}

// OutletLicensesAPIOption for how the controller is set up.
type OutletLicensesAPIOption func(*OutletLicensesAPIController)

// WithOutletLicensesAPIErrorHandler inject ErrorHandler into controller
func WithOutletLicensesAPIErrorHandler(h ErrorHandler) OutletLicensesAPIOption {
	return func(c *OutletLicensesAPIController) {
		c.errorHandler = h
	}
}

// NewOutletLicensesAPIController creates a default api controller
func NewOutletLicensesAPIController(s OutletLicensesAPIServicer, opts ...OutletLicensesAPIOption) *OutletLicensesAPIController {
	controller := &OutletLicensesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OutletLicensesAPIController
func (c *OutletLicensesAPIController) Routes() Routes {
	return Routes{
		"DeleteOutletLicenses": Route{
			strings.ToUpper("Delete"),
			"/campaigns/{campaignId}/outlets/licenses",
			c.DeleteOutletLicenses,
		},
		"GetOutletLicenses": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/outlets/licenses",
			c.GetOutletLicenses,
		},
		"UpdateOutletLicenses": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/outlets/licenses",
			c.UpdateOutletLicenses,
		},
	}
}

// DeleteOutletLicenses - Удаление лицензий для точек продаж
func (c *OutletLicensesAPIController) DeleteOutletLicenses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	idsParam, err := parseNumericArrayParameter[int64](
		query.Get("ids"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "ids", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteOutletLicenses(r.Context(), campaignIdParam, idsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOutletLicenses - Информация о лицензиях для точек продаж
func (c *OutletLicensesAPIController) GetOutletLicenses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	outletIdsParam, err := parseNumericArrayParameter[int64](
		query.Get("outletIds"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "outletIds", Err: err}, nil)
		return
	}
	idsParam, err := parseNumericArrayParameter[int64](
		query.Get("ids"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "ids", Err: err}, nil)
		return
	}
	result, err := c.service.GetOutletLicenses(r.Context(), campaignIdParam, outletIdsParam, idsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOutletLicenses - Создание и изменение лицензий для точек продаж
func (c *OutletLicensesAPIController) UpdateOutletLicenses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateOutletLicenseRequestParam := UpdateOutletLicenseRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOutletLicenseRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOutletLicenseRequestRequired(updateOutletLicenseRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOutletLicenseRequestConstraints(updateOutletLicenseRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOutletLicenses(r.Context(), campaignIdParam, updateOutletLicenseRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
