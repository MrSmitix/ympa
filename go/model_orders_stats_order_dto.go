// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"time"
)



// OrdersStatsOrderDto - Информация о заказе.
type OrdersStatsOrderDto struct {

	// Идентификатор заказа.
	Id int64 `json:"id,omitempty"`

	// Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
	CreationDate string `json:"creationDate,omitempty"`

	// Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
	StatusUpdateDate time.Time `json:"statusUpdateDate,omitempty"`

	Status OrderStatsStatusType `json:"status,omitempty"`

	// Идентификатор заказа в информационной системе магазина.
	PartnerOrderId string `json:"partnerOrderId,omitempty"`

	PaymentType OrdersStatsOrderPaymentType `json:"paymentType,omitempty"`

	// Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
	Fake bool `json:"fake,omitempty"`

	DeliveryRegion OrdersStatsDeliveryRegionDto `json:"deliveryRegion,omitempty"`

	// Список товаров в заказе после возможных изменений.
	Items []OrdersStatsItemDto `json:"items"`

	// Список товаров в заказе до изменений.
	InitialItems *[]OrdersStatsItemDto `json:"initialItems,omitempty"`

	// Информация о денежных переводах по заказу.
	Payments []OrdersStatsPaymentDto `json:"payments"`

	// Информация о комиссиях за заказ.
	Commissions []OrdersStatsCommissionDto `json:"commissions"`
}

// AssertOrdersStatsOrderDtoRequired checks if the required fields are not zero-ed
func AssertOrdersStatsOrderDtoRequired(obj OrdersStatsOrderDto) error {
	elements := map[string]interface{}{
		"items": obj.Items,
		"payments": obj.Payments,
		"commissions": obj.Commissions,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOrdersStatsDeliveryRegionDtoRequired(obj.DeliveryRegion); err != nil {
		return err
	}
	for _, el := range obj.Items {
		if err := AssertOrdersStatsItemDtoRequired(el); err != nil {
			return err
		}
	}
	if obj.InitialItems != nil {
		for _, el := range *obj.InitialItems {
			if err := AssertOrdersStatsItemDtoRequired(el); err != nil {
				return err
			}
		}
	}
	for _, el := range obj.Payments {
		if err := AssertOrdersStatsPaymentDtoRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Commissions {
		if err := AssertOrdersStatsCommissionDtoRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertOrdersStatsOrderDtoConstraints checks if the values respects the defined constraints
func AssertOrdersStatsOrderDtoConstraints(obj OrdersStatsOrderDto) error {
	if err := AssertOrdersStatsDeliveryRegionDtoConstraints(obj.DeliveryRegion); err != nil {
		return err
	}
	for _, el := range obj.Items {
		if err := AssertOrdersStatsItemDtoConstraints(el); err != nil {
			return err
		}
	}
    if obj.InitialItems != nil {
     	for _, el := range *obj.InitialItems {
     		if err := AssertOrdersStatsItemDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	for _, el := range obj.Payments {
		if err := AssertOrdersStatsPaymentDtoConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Commissions {
		if err := AssertOrdersStatsCommissionDtoConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
