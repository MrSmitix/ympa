// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CampaignsAPIController binds http requests to an api service and writes the service results to the http response
type CampaignsAPIController struct {
	service CampaignsAPIServicer
	errorHandler ErrorHandler
}

// CampaignsAPIOption for how the controller is set up.
type CampaignsAPIOption func(*CampaignsAPIController)

// WithCampaignsAPIErrorHandler inject ErrorHandler into controller
func WithCampaignsAPIErrorHandler(h ErrorHandler) CampaignsAPIOption {
	return func(c *CampaignsAPIController) {
		c.errorHandler = h
	}
}

// NewCampaignsAPIController creates a default api controller
func NewCampaignsAPIController(s CampaignsAPIServicer, opts ...CampaignsAPIOption) *CampaignsAPIController {
	controller := &CampaignsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CampaignsAPIController
func (c *CampaignsAPIController) Routes() Routes {
	return Routes{
		"GetCampaign": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}",
			c.GetCampaign,
		},
		"GetCampaignLogins": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/logins",
			c.GetCampaignLogins,
		},
		"GetCampaignRegion": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/region",
			c.GetCampaignRegion,
		},
		"GetCampaignSettings": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/settings",
			c.GetCampaignSettings,
		},
		"GetCampaigns": Route{
			strings.ToUpper("Get"),
			"/campaigns",
			c.GetCampaigns,
		},
		"GetCampaignsByLogin": Route{
			strings.ToUpper("Get"),
			"/campaigns/by_login/{login}",
			c.GetCampaignsByLogin,
		},
	}
}

// GetCampaign - Информация о магазине
func (c *CampaignsAPIController) GetCampaign(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaign(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignLogins - Логины, связанные с магазином
func (c *CampaignsAPIController) GetCampaignLogins(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaignLogins(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignRegion - Регион магазина
// Deprecated
func (c *CampaignsAPIController) GetCampaignRegion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaignRegion(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignSettings - Настройки магазина
func (c *CampaignsAPIController) GetCampaignSettings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCampaignSettings(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaigns - Список магазинов пользователя
func (c *CampaignsAPIController) GetCampaigns(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetCampaigns(r.Context(), pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCampaignsByLogin - Магазины, доступные логину
func (c *CampaignsAPIController) GetCampaignsByLogin(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	loginParam := params["login"]
	if loginParam == "" {
		c.errorHandler(w, r, &RequiredError{"login"}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetCampaignsByLogin(r.Context(), loginParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
