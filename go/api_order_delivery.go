// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OrderDeliveryAPIController binds http requests to an api service and writes the service results to the http response
type OrderDeliveryAPIController struct {
	service OrderDeliveryAPIServicer
	errorHandler ErrorHandler
}

// OrderDeliveryAPIOption for how the controller is set up.
type OrderDeliveryAPIOption func(*OrderDeliveryAPIController)

// WithOrderDeliveryAPIErrorHandler inject ErrorHandler into controller
func WithOrderDeliveryAPIErrorHandler(h ErrorHandler) OrderDeliveryAPIOption {
	return func(c *OrderDeliveryAPIController) {
		c.errorHandler = h
	}
}

// NewOrderDeliveryAPIController creates a default api controller
func NewOrderDeliveryAPIController(s OrderDeliveryAPIServicer, opts ...OrderDeliveryAPIOption) *OrderDeliveryAPIController {
	controller := &OrderDeliveryAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrderDeliveryAPIController
func (c *OrderDeliveryAPIController) Routes() Routes {
	return Routes{
		"GetOrderBuyerInfo": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/buyer",
			c.GetOrderBuyerInfo,
		},
		"SetOrderDeliveryDate": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/date",
			c.SetOrderDeliveryDate,
		},
		"SetOrderDeliveryTrackCode": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/track",
			c.SetOrderDeliveryTrackCode,
		},
		"UpdateOrderStorageLimit": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit",
			c.UpdateOrderStorageLimit,
		},
		"VerifyOrderEac": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/verifyEac",
			c.VerifyOrderEac,
		},
	}
}

// GetOrderBuyerInfo - Информация о покупателе — физическом лице
func (c *OrderDeliveryAPIController) GetOrderBuyerInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderBuyerInfo(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetOrderDeliveryDate - Изменение даты доставки заказа
func (c *OrderDeliveryAPIController) SetOrderDeliveryDate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	setOrderDeliveryDateRequestParam := SetOrderDeliveryDateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setOrderDeliveryDateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetOrderDeliveryDateRequestRequired(setOrderDeliveryDateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetOrderDeliveryDateRequestConstraints(setOrderDeliveryDateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetOrderDeliveryDate(r.Context(), campaignIdParam, orderIdParam, setOrderDeliveryDateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetOrderDeliveryTrackCode - Передача трек‑номера посылки
func (c *OrderDeliveryAPIController) SetOrderDeliveryTrackCode(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	setOrderDeliveryTrackCodeRequestParam := SetOrderDeliveryTrackCodeRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setOrderDeliveryTrackCodeRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetOrderDeliveryTrackCodeRequestRequired(setOrderDeliveryTrackCodeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetOrderDeliveryTrackCodeRequestConstraints(setOrderDeliveryTrackCodeRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetOrderDeliveryTrackCode(r.Context(), campaignIdParam, orderIdParam, setOrderDeliveryTrackCodeRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderStorageLimit - Продление срока хранения заказа
func (c *OrderDeliveryAPIController) UpdateOrderStorageLimit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	updateOrderStorageLimitRequestParam := UpdateOrderStorageLimitRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderStorageLimitRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderStorageLimitRequestRequired(updateOrderStorageLimitRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderStorageLimitRequestConstraints(updateOrderStorageLimitRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderStorageLimit(r.Context(), campaignIdParam, orderIdParam, updateOrderStorageLimitRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// VerifyOrderEac - Передача кода подтверждения
func (c *OrderDeliveryAPIController) VerifyOrderEac(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	verifyOrderEacRequestParam := VerifyOrderEacRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&verifyOrderEacRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertVerifyOrderEacRequestRequired(verifyOrderEacRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertVerifyOrderEacRequestConstraints(verifyOrderEacRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.VerifyOrderEac(r.Context(), campaignIdParam, orderIdParam, verifyOrderEacRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
