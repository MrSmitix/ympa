// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// AgeUnitType : Единицы измерения возраста:  * `YEAR` — год. * `MONTH` — месяц. 
type AgeUnitType string

// List of AgeUnitType
const (
	YEAR AgeUnitType = "YEAR"
	MONTH AgeUnitType = "MONTH"
)

// AllowedAgeUnitTypeEnumValues is all the allowed values of AgeUnitType enum
var AllowedAgeUnitTypeEnumValues = []AgeUnitType{
	"YEAR",
	"MONTH",
}

// validAgeUnitTypeEnumValue provides a map of AgeUnitTypes for fast verification of use input
var validAgeUnitTypeEnumValues = map[AgeUnitType]struct{}{
	"YEAR": {},
	"MONTH": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AgeUnitType) IsValid() bool {
	_, ok := validAgeUnitTypeEnumValues[v]
	return ok
}

// NewAgeUnitTypeFromValue returns a pointer to a valid AgeUnitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAgeUnitTypeFromValue(v string) (AgeUnitType, error) {
	ev := AgeUnitType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for AgeUnitType: valid values are %v", v, AllowedAgeUnitTypeEnumValues)
}



// AssertAgeUnitTypeRequired checks if the required fields are not zero-ed
func AssertAgeUnitTypeRequired(obj AgeUnitType) error {
	return nil
}

// AssertAgeUnitTypeConstraints checks if the values respects the defined constraints
func AssertAgeUnitTypeConstraints(obj AgeUnitType) error {
	return nil
}
