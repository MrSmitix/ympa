// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server




// ReturnItemDto - Список товаров в возврате.
type ReturnItemDto struct {

	// SKU на Маркете.
	MarketSku int64 `json:"marketSku,omitempty"`

	// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
	ShopSku string `json:"shopSku" validate:"regexp=^[^\\\\x00-\\\\x08\\\\x0A-\\\\x1f\\\\x7f]{1,255}$"`

	// Количество единиц товара.
	Count int64 `json:"count"`

	// Список решений по возврату.
	Decisions *[]ReturnDecisionDto `json:"decisions,omitempty"`

	// Список логистических позиций возврата.
	Instances *[]ReturnInstanceDto `json:"instances,omitempty"`

	// Список трек-кодов для почтовых отправлений.
	Tracks *[]TrackDto `json:"tracks,omitempty"`
}

// AssertReturnItemDtoRequired checks if the required fields are not zero-ed
func AssertReturnItemDtoRequired(obj ReturnItemDto) error {
	elements := map[string]interface{}{
		"shopSku": obj.ShopSku,
		"count": obj.Count,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.Decisions != nil {
		for _, el := range *obj.Decisions {
			if err := AssertReturnDecisionDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if obj.Instances != nil {
		for _, el := range *obj.Instances {
			if err := AssertReturnInstanceDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if obj.Tracks != nil {
		for _, el := range *obj.Tracks {
			if err := AssertTrackDtoRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertReturnItemDtoConstraints checks if the values respects the defined constraints
func AssertReturnItemDtoConstraints(obj ReturnItemDto) error {
    if obj.Decisions != nil {
     	for _, el := range *obj.Decisions {
     		if err := AssertReturnDecisionDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
    if obj.Instances != nil {
     	for _, el := range *obj.Instances {
     		if err := AssertReturnInstanceDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
    if obj.Tracks != nil {
     	for _, el := range *obj.Tracks {
     		if err := AssertTrackDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	return nil
}
