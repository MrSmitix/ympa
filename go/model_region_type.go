// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// RegionType : Тип региона.  Возможные значения:  * `CITY_DISTRICT` — район города.  * `CITY` — крупный город.  * `CONTINENT` — континент.  * `COUNTRY_DISTRICT` — область.  * `COUNTRY` — страна.  * `REGION` — регион.  * `REPUBLIC_AREA` — район субъекта федерации.  * `REPUBLIC` — субъект федерации.  * `SUBWAY_STATION` — станция метро.  * `VILLAGE` — город.  * `OTHER` — неизвестный регион. 
type RegionType string

// List of RegionType
const (
	OTHER RegionType = "OTHER"
	CONTINENT RegionType = "CONTINENT"
	REGION RegionType = "REGION"
	COUNTRY RegionType = "COUNTRY"
	COUNTRY_DISTRICT RegionType = "COUNTRY_DISTRICT"
	REPUBLIC RegionType = "REPUBLIC"
	CITY RegionType = "CITY"
	VILLAGE RegionType = "VILLAGE"
	CITY_DISTRICT RegionType = "CITY_DISTRICT"
	SUBWAY_STATION RegionType = "SUBWAY_STATION"
	REPUBLIC_AREA RegionType = "REPUBLIC_AREA"
)

// AllowedRegionTypeEnumValues is all the allowed values of RegionType enum
var AllowedRegionTypeEnumValues = []RegionType{
	"OTHER",
	"CONTINENT",
	"REGION",
	"COUNTRY",
	"COUNTRY_DISTRICT",
	"REPUBLIC",
	"CITY",
	"VILLAGE",
	"CITY_DISTRICT",
	"SUBWAY_STATION",
	"REPUBLIC_AREA",
}

// validRegionTypeEnumValue provides a map of RegionTypes for fast verification of use input
var validRegionTypeEnumValues = map[RegionType]struct{}{
	"OTHER": {},
	"CONTINENT": {},
	"REGION": {},
	"COUNTRY": {},
	"COUNTRY_DISTRICT": {},
	"REPUBLIC": {},
	"CITY": {},
	"VILLAGE": {},
	"CITY_DISTRICT": {},
	"SUBWAY_STATION": {},
	"REPUBLIC_AREA": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RegionType) IsValid() bool {
	_, ok := validRegionTypeEnumValues[v]
	return ok
}

// NewRegionTypeFromValue returns a pointer to a valid RegionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRegionTypeFromValue(v string) (RegionType, error) {
	ev := RegionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for RegionType: valid values are %v", v, AllowedRegionTypeEnumValues)
}



// AssertRegionTypeRequired checks if the required fields are not zero-ed
func AssertRegionTypeRequired(obj RegionType) error {
	return nil
}

// AssertRegionTypeConstraints checks if the values respects the defined constraints
func AssertRegionTypeConstraints(obj RegionType) error {
	return nil
}
