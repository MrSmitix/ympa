// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OutletsAPIController binds http requests to an api service and writes the service results to the http response
type OutletsAPIController struct {
	service OutletsAPIServicer
	errorHandler ErrorHandler
}

// OutletsAPIOption for how the controller is set up.
type OutletsAPIOption func(*OutletsAPIController)

// WithOutletsAPIErrorHandler inject ErrorHandler into controller
func WithOutletsAPIErrorHandler(h ErrorHandler) OutletsAPIOption {
	return func(c *OutletsAPIController) {
		c.errorHandler = h
	}
}

// NewOutletsAPIController creates a default api controller
func NewOutletsAPIController(s OutletsAPIServicer, opts ...OutletsAPIOption) *OutletsAPIController {
	controller := &OutletsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OutletsAPIController
func (c *OutletsAPIController) Routes() Routes {
	return Routes{
		"CreateOutlet": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/outlets",
			c.CreateOutlet,
		},
		"DeleteOutlet": Route{
			strings.ToUpper("Delete"),
			"/campaigns/{campaignId}/outlets/{outletId}",
			c.DeleteOutlet,
		},
		"GetOutlet": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/outlets/{outletId}",
			c.GetOutlet,
		},
		"GetOutlets": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/outlets",
			c.GetOutlets,
		},
		"UpdateOutlet": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/outlets/{outletId}",
			c.UpdateOutlet,
		},
	}
}

// CreateOutlet - Создание точки продаж
func (c *OutletsAPIController) CreateOutlet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	changeOutletRequestParam := ChangeOutletRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&changeOutletRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChangeOutletRequestRequired(changeOutletRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChangeOutletRequestConstraints(changeOutletRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOutlet(r.Context(), campaignIdParam, changeOutletRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOutlet - Удаление точки продаж
func (c *OutletsAPIController) DeleteOutlet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	outletIdParam, err := parseNumericParameter[int64](
		params["outletId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "outletId", Err: err}, nil)
		return
	}
	result, err := c.service.DeleteOutlet(r.Context(), campaignIdParam, outletIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOutlet - Информация об одной точке продаж
func (c *OutletsAPIController) GetOutlet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	outletIdParam, err := parseNumericParameter[int64](
		params["outletId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "outletId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOutlet(r.Context(), campaignIdParam, outletIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOutlets - Информация о нескольких точках продаж
func (c *OutletsAPIController) GetOutlets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var regionIdParam int64
	if query.Has("region_id") {
		param, err := parseNumericParameter[int64](
			query.Get("region_id"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "region_id", Err: err}, nil)
			return
		}

		regionIdParam = param
	} else {
	}
	var shopOutletCodeParam string
	if query.Has("shop_outlet_code") {
		param := query.Get("shop_outlet_code")

		shopOutletCodeParam = param
	} else {
	}
	var regionId2Param int64
	if query.Has("regionId") {
		param, err := parseNumericParameter[int64](
			query.Get("regionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
			return
		}

		regionId2Param = param
	} else {
	}
	result, err := c.service.GetOutlets(r.Context(), campaignIdParam, pageTokenParam, regionIdParam, shopOutletCodeParam, regionId2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOutlet - Изменение информации о точке продаж
func (c *OutletsAPIController) UpdateOutlet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	outletIdParam, err := parseNumericParameter[int64](
		params["outletId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "outletId", Err: err}, nil)
		return
	}
	changeOutletRequestParam := ChangeOutletRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&changeOutletRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChangeOutletRequestRequired(changeOutletRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChangeOutletRequestConstraints(changeOutletRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOutlet(r.Context(), campaignIdParam, outletIdParam, changeOutletRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
