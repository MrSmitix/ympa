// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// HiddenOffersAPIController binds http requests to an api service and writes the service results to the http response
type HiddenOffersAPIController struct {
	service HiddenOffersAPIServicer
	errorHandler ErrorHandler
}

// HiddenOffersAPIOption for how the controller is set up.
type HiddenOffersAPIOption func(*HiddenOffersAPIController)

// WithHiddenOffersAPIErrorHandler inject ErrorHandler into controller
func WithHiddenOffersAPIErrorHandler(h ErrorHandler) HiddenOffersAPIOption {
	return func(c *HiddenOffersAPIController) {
		c.errorHandler = h
	}
}

// NewHiddenOffersAPIController creates a default api controller
func NewHiddenOffersAPIController(s HiddenOffersAPIServicer, opts ...HiddenOffersAPIOption) *HiddenOffersAPIController {
	controller := &HiddenOffersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HiddenOffersAPIController
func (c *HiddenOffersAPIController) Routes() Routes {
	return Routes{
		"AddHiddenOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/hidden-offers",
			c.AddHiddenOffers,
		},
		"DeleteHiddenOffers": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/hidden-offers/delete",
			c.DeleteHiddenOffers,
		},
		"GetHiddenOffers": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/hidden-offers",
			c.GetHiddenOffers,
		},
	}
}

// AddHiddenOffers - Скрытие товаров и настройки скрытия
func (c *HiddenOffersAPIController) AddHiddenOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	addHiddenOffersRequestParam := AddHiddenOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddHiddenOffersRequestRequired(addHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddHiddenOffersRequestConstraints(addHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddHiddenOffers(r.Context(), campaignIdParam, addHiddenOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteHiddenOffers - Возобновление показа товаров
func (c *HiddenOffersAPIController) DeleteHiddenOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	deleteHiddenOffersRequestParam := DeleteHiddenOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteHiddenOffersRequestRequired(deleteHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteHiddenOffersRequestConstraints(deleteHiddenOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteHiddenOffers(r.Context(), campaignIdParam, deleteHiddenOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHiddenOffers - Информация о скрытых вами товарах
func (c *HiddenOffersAPIController) GetHiddenOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var offerIdParam []string
	if query.Has("offer_id") {
		offerIdParam = strings.Split(query.Get("offer_id"), ",")
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "offset", Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.GetHiddenOffers(r.Context(), campaignIdParam, offerIdParam, pageTokenParam, limitParam, offsetParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
