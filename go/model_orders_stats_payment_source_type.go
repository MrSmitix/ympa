// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// OrdersStatsPaymentSourceType : Способ денежного перевода: - `BUYER` — оплата или возврат деньгами. - `CASHBACK` — оплата или возврат баллами Плюса. - `MARKETPLACE` — оплата или возврат купонами. - `SPLIT` — оплата картой по частям (Сплит). 
type OrdersStatsPaymentSourceType string

// List of OrdersStatsPaymentSourceType
const (
	BUYER OrdersStatsPaymentSourceType = "BUYER"
	CASHBACK OrdersStatsPaymentSourceType = "CASHBACK"
	MARKETPLACE OrdersStatsPaymentSourceType = "MARKETPLACE"
	SPLIT OrdersStatsPaymentSourceType = "SPLIT"
)

// AllowedOrdersStatsPaymentSourceTypeEnumValues is all the allowed values of OrdersStatsPaymentSourceType enum
var AllowedOrdersStatsPaymentSourceTypeEnumValues = []OrdersStatsPaymentSourceType{
	"BUYER",
	"CASHBACK",
	"MARKETPLACE",
	"SPLIT",
}

// validOrdersStatsPaymentSourceTypeEnumValue provides a map of OrdersStatsPaymentSourceTypes for fast verification of use input
var validOrdersStatsPaymentSourceTypeEnumValues = map[OrdersStatsPaymentSourceType]struct{}{
	"BUYER": {},
	"CASHBACK": {},
	"MARKETPLACE": {},
	"SPLIT": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrdersStatsPaymentSourceType) IsValid() bool {
	_, ok := validOrdersStatsPaymentSourceTypeEnumValues[v]
	return ok
}

// NewOrdersStatsPaymentSourceTypeFromValue returns a pointer to a valid OrdersStatsPaymentSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrdersStatsPaymentSourceTypeFromValue(v string) (OrdersStatsPaymentSourceType, error) {
	ev := OrdersStatsPaymentSourceType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for OrdersStatsPaymentSourceType: valid values are %v", v, AllowedOrdersStatsPaymentSourceTypeEnumValues)
}



// AssertOrdersStatsPaymentSourceTypeRequired checks if the required fields are not zero-ed
func AssertOrdersStatsPaymentSourceTypeRequired(obj OrdersStatsPaymentSourceType) error {
	return nil
}

// AssertOrdersStatsPaymentSourceTypeConstraints checks if the values respects the defined constraints
func AssertOrdersStatsPaymentSourceTypeConstraints(obj OrdersStatsPaymentSourceType) error {
	return nil
}
