// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"net/http"
	"strings"
)

// DeliveryServicesAPIController binds http requests to an api service and writes the service results to the http response
type DeliveryServicesAPIController struct {
	service DeliveryServicesAPIServicer
	errorHandler ErrorHandler
}

// DeliveryServicesAPIOption for how the controller is set up.
type DeliveryServicesAPIOption func(*DeliveryServicesAPIController)

// WithDeliveryServicesAPIErrorHandler inject ErrorHandler into controller
func WithDeliveryServicesAPIErrorHandler(h ErrorHandler) DeliveryServicesAPIOption {
	return func(c *DeliveryServicesAPIController) {
		c.errorHandler = h
	}
}

// NewDeliveryServicesAPIController creates a default api controller
func NewDeliveryServicesAPIController(s DeliveryServicesAPIServicer, opts ...DeliveryServicesAPIOption) *DeliveryServicesAPIController {
	controller := &DeliveryServicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DeliveryServicesAPIController
func (c *DeliveryServicesAPIController) Routes() Routes {
	return Routes{
		"GetDeliveryServices": Route{
			strings.ToUpper("Get"),
			"/delivery/services",
			c.GetDeliveryServices,
		},
	}
}

// GetDeliveryServices - Справочник служб доставки
func (c *DeliveryServicesAPIController) GetDeliveryServices(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDeliveryServices(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
