// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BusinessesAPIController binds http requests to an api service and writes the service results to the http response
type BusinessesAPIController struct {
	service BusinessesAPIServicer
	errorHandler ErrorHandler
}

// BusinessesAPIOption for how the controller is set up.
type BusinessesAPIOption func(*BusinessesAPIController)

// WithBusinessesAPIErrorHandler inject ErrorHandler into controller
func WithBusinessesAPIErrorHandler(h ErrorHandler) BusinessesAPIOption {
	return func(c *BusinessesAPIController) {
		c.errorHandler = h
	}
}

// NewBusinessesAPIController creates a default api controller
func NewBusinessesAPIController(s BusinessesAPIServicer, opts ...BusinessesAPIOption) *BusinessesAPIController {
	controller := &BusinessesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BusinessesAPIController
func (c *BusinessesAPIController) Routes() Routes {
	return Routes{
		"GetBusinessSettings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/settings",
			c.GetBusinessSettings,
		},
	}
}

// GetBusinessSettings - Настройки кабинета
func (c *BusinessesAPIController) GetBusinessSettings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	result, err := c.service.GetBusinessSettings(r.Context(), businessIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
