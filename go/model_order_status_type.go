// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// OrderStatusType : Статус заказа:  * `CANCELLED` — отменен.  * `DELIVERED` — получен покупателем.  * `DELIVERY` — передан в службу доставки.  * `PICKUP` — доставлен в пункт самовывоза.  * `PROCESSING` — находится в обработке.  * `PENDING` — ожидает обработки со стороны продавца.  * `UNPAID` — оформлен, но еще не оплачен (если выбрана оплата при оформлении).  * `PLACING` — оформляется, подготовка к резервированию.  * `RESERVED` — зарезервирован, но недооформлен.  * `PARTIALLY_RETURNED` — возвращен частично.  * `RETURNED` — возвращен полностью.  * `UNKNOWN` — неизвестный статус.  Также могут возвращаться другие значения. Обрабатывать их не требуется. 
type OrderStatusType string

// List of OrderStatusType
const (
	PLACING OrderStatusType = "PLACING"
	RESERVED OrderStatusType = "RESERVED"
	UNPAID OrderStatusType = "UNPAID"
	PROCESSING OrderStatusType = "PROCESSING"
	DELIVERY OrderStatusType = "DELIVERY"
	PICKUP OrderStatusType = "PICKUP"
	DELIVERED OrderStatusType = "DELIVERED"
	CANCELLED OrderStatusType = "CANCELLED"
	PENDING OrderStatusType = "PENDING"
	PARTIALLY_RETURNED OrderStatusType = "PARTIALLY_RETURNED"
	RETURNED OrderStatusType = "RETURNED"
	UNKNOWN OrderStatusType = "UNKNOWN"
)

// AllowedOrderStatusTypeEnumValues is all the allowed values of OrderStatusType enum
var AllowedOrderStatusTypeEnumValues = []OrderStatusType{
	"PLACING",
	"RESERVED",
	"UNPAID",
	"PROCESSING",
	"DELIVERY",
	"PICKUP",
	"DELIVERED",
	"CANCELLED",
	"PENDING",
	"PARTIALLY_RETURNED",
	"RETURNED",
	"UNKNOWN",
}

// validOrderStatusTypeEnumValue provides a map of OrderStatusTypes for fast verification of use input
var validOrderStatusTypeEnumValues = map[OrderStatusType]struct{}{
	"PLACING": {},
	"RESERVED": {},
	"UNPAID": {},
	"PROCESSING": {},
	"DELIVERY": {},
	"PICKUP": {},
	"DELIVERED": {},
	"CANCELLED": {},
	"PENDING": {},
	"PARTIALLY_RETURNED": {},
	"RETURNED": {},
	"UNKNOWN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderStatusType) IsValid() bool {
	_, ok := validOrderStatusTypeEnumValues[v]
	return ok
}

// NewOrderStatusTypeFromValue returns a pointer to a valid OrderStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderStatusTypeFromValue(v string) (OrderStatusType, error) {
	ev := OrderStatusType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for OrderStatusType: valid values are %v", v, AllowedOrderStatusTypeEnumValues)
}



// AssertOrderStatusTypeRequired checks if the required fields are not zero-ed
func AssertOrderStatusTypeRequired(obj OrderStatusType) error {
	return nil
}

// AssertOrderStatusTypeConstraints checks if the values respects the defined constraints
func AssertOrderStatusTypeConstraints(obj OrderStatusType) error {
	return nil
}
