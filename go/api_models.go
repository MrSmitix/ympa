// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ModelsAPIController binds http requests to an api service and writes the service results to the http response
type ModelsAPIController struct {
	service ModelsAPIServicer
	errorHandler ErrorHandler
}

// ModelsAPIOption for how the controller is set up.
type ModelsAPIOption func(*ModelsAPIController)

// WithModelsAPIErrorHandler inject ErrorHandler into controller
func WithModelsAPIErrorHandler(h ErrorHandler) ModelsAPIOption {
	return func(c *ModelsAPIController) {
		c.errorHandler = h
	}
}

// NewModelsAPIController creates a default api controller
func NewModelsAPIController(s ModelsAPIServicer, opts ...ModelsAPIOption) *ModelsAPIController {
	controller := &ModelsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ModelsAPIController
func (c *ModelsAPIController) Routes() Routes {
	return Routes{
		"GetModel": Route{
			strings.ToUpper("Get"),
			"/models/{modelId}",
			c.GetModel,
		},
		"GetModelOffers": Route{
			strings.ToUpper("Get"),
			"/models/{modelId}/offers",
			c.GetModelOffers,
		},
		"GetModels": Route{
			strings.ToUpper("Post"),
			"/models",
			c.GetModels,
		},
		"GetModelsOffers": Route{
			strings.ToUpper("Post"),
			"/models/offers",
			c.GetModelsOffers,
		},
		"SearchModels": Route{
			strings.ToUpper("Get"),
			"/models",
			c.SearchModels,
		},
	}
}

// GetModel - Информация об одной модели
func (c *ModelsAPIController) GetModel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	modelIdParam, err := parseNumericParameter[int64](
		params["modelId"],
		WithRequire[int64](parseInt64),
		WithMinimum[int64](0),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "modelId", Err: err}, nil)
		return
	}
	var regionIdParam int64
	if query.Has("regionId") {
		param, err := parseNumericParameter[int64](
			query.Get("regionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
			return
		}

		regionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "regionId"}, nil)
		return
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	result, err := c.service.GetModel(r.Context(), modelIdParam, regionIdParam, currencyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelOffers - Список предложений для одной модели
func (c *ModelsAPIController) GetModelOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	modelIdParam, err := parseNumericParameter[int64](
		params["modelId"],
		WithRequire[int64](parseInt64),
		WithMinimum[int64](0),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "modelId", Err: err}, nil)
		return
	}
	var regionIdParam int64
	if query.Has("regionId") {
		param, err := parseNumericParameter[int64](
			query.Get("regionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
			return
		}

		regionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "regionId"}, nil)
		return
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	var orderByPriceParam SortOrderType
	if query.Has("orderByPrice") {
		param := SortOrderType(query.Get("orderByPrice"))

		orderByPriceParam = param
	} else {
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "count", Err: err}, nil)
			return
		}

		countParam = param
	} else {
		var param int32 = 10
		countParam = param
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	result, err := c.service.GetModelOffers(r.Context(), modelIdParam, regionIdParam, currencyParam, orderByPriceParam, countParam, pageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModels - Информация о нескольких моделях
func (c *ModelsAPIController) GetModels(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var regionIdParam int64
	if query.Has("regionId") {
		param, err := parseNumericParameter[int64](
			query.Get("regionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
			return
		}

		regionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "regionId"}, nil)
		return
	}
	getModelsRequestParam := GetModelsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getModelsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetModelsRequestRequired(getModelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetModelsRequestConstraints(getModelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	result, err := c.service.GetModels(r.Context(), regionIdParam, getModelsRequestParam, currencyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetModelsOffers - Список предложений для нескольких моделей
func (c *ModelsAPIController) GetModelsOffers(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var regionIdParam int64
	if query.Has("regionId") {
		param, err := parseNumericParameter[int64](
			query.Get("regionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
			return
		}

		regionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "regionId"}, nil)
		return
	}
	getModelsRequestParam := GetModelsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getModelsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetModelsRequestRequired(getModelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetModelsRequestConstraints(getModelsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	var orderByPriceParam SortOrderType
	if query.Has("orderByPrice") {
		param := SortOrderType(query.Get("orderByPrice"))

		orderByPriceParam = param
	} else {
	}
	result, err := c.service.GetModelsOffers(r.Context(), regionIdParam, getModelsRequestParam, currencyParam, orderByPriceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchModels - Поиск модели товара
func (c *ModelsAPIController) SearchModels(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "query"}, nil)
		return
	}
	var regionIdParam int64
	if query.Has("regionId") {
		param, err := parseNumericParameter[int64](
			query.Get("regionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
			return
		}

		regionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "regionId"}, nil)
		return
	}
	var currencyParam CurrencyType
	if query.Has("currency") {
		param := CurrencyType(query.Get("currency"))

		currencyParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.SearchModels(r.Context(), queryParam, regionIdParam, currencyParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
