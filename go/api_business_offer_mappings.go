// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BusinessOfferMappingsAPIController binds http requests to an api service and writes the service results to the http response
type BusinessOfferMappingsAPIController struct {
	service BusinessOfferMappingsAPIServicer
	errorHandler ErrorHandler
}

// BusinessOfferMappingsAPIOption for how the controller is set up.
type BusinessOfferMappingsAPIOption func(*BusinessOfferMappingsAPIController)

// WithBusinessOfferMappingsAPIErrorHandler inject ErrorHandler into controller
func WithBusinessOfferMappingsAPIErrorHandler(h ErrorHandler) BusinessOfferMappingsAPIOption {
	return func(c *BusinessOfferMappingsAPIController) {
		c.errorHandler = h
	}
}

// NewBusinessOfferMappingsAPIController creates a default api controller
func NewBusinessOfferMappingsAPIController(s BusinessOfferMappingsAPIServicer, opts ...BusinessOfferMappingsAPIOption) *BusinessOfferMappingsAPIController {
	controller := &BusinessOfferMappingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BusinessOfferMappingsAPIController
func (c *BusinessOfferMappingsAPIController) Routes() Routes {
	return Routes{
		"AddOffersToArchive": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/archive",
			c.AddOffersToArchive,
		},
		"DeleteOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/delete",
			c.DeleteOffers,
		},
		"DeleteOffersFromArchive": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/unarchive",
			c.DeleteOffersFromArchive,
		},
		"GetOfferMappings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings",
			c.GetOfferMappings,
		},
		"GetSuggestedOfferMappings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/suggestions",
			c.GetSuggestedOfferMappings,
		},
		"UpdateOfferMappings": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-mappings/update",
			c.UpdateOfferMappings,
		},
	}
}

// AddOffersToArchive - Добавление товаров в архив
func (c *BusinessOfferMappingsAPIController) AddOffersToArchive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	addOffersToArchiveRequestParam := AddOffersToArchiveRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addOffersToArchiveRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddOffersToArchiveRequestRequired(addOffersToArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddOffersToArchiveRequestConstraints(addOffersToArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddOffersToArchive(r.Context(), businessIdParam, addOffersToArchiveRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOffers - Удаление товаров из каталога
func (c *BusinessOfferMappingsAPIController) DeleteOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deleteOffersRequestParam := DeleteOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteOffersRequestRequired(deleteOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteOffersRequestConstraints(deleteOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteOffers(r.Context(), businessIdParam, deleteOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteOffersFromArchive - Удаление товаров из архива
func (c *BusinessOfferMappingsAPIController) DeleteOffersFromArchive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deleteOffersFromArchiveRequestParam := DeleteOffersFromArchiveRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteOffersFromArchiveRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteOffersFromArchiveRequestRequired(deleteOffersFromArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteOffersFromArchiveRequestConstraints(deleteOffersFromArchiveRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteOffersFromArchive(r.Context(), businessIdParam, deleteOffersFromArchiveRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferMappings - Информация о товарах в каталоге
func (c *BusinessOfferMappingsAPIController) GetOfferMappings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getOfferMappingsRequestParam := GetOfferMappingsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOfferMappingsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOfferMappingsRequestRequired(getOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOfferMappingsRequestConstraints(getOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOfferMappings(r.Context(), businessIdParam, pageTokenParam, limitParam, getOfferMappingsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSuggestedOfferMappings - Просмотр карточек на Маркете, которые подходят вашим товарам
func (c *BusinessOfferMappingsAPIController) GetSuggestedOfferMappings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getSuggestedOfferMappingsRequestParam := GetSuggestedOfferMappingsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSuggestedOfferMappingsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingsRequestRequired(getSuggestedOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingsRequestConstraints(getSuggestedOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSuggestedOfferMappings(r.Context(), businessIdParam, getSuggestedOfferMappingsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOfferMappings - Добавление товаров в каталог и изменение информации о них
func (c *BusinessOfferMappingsAPIController) UpdateOfferMappings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateOfferMappingsRequestParam := UpdateOfferMappingsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOfferMappingsRequestRequired(updateOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOfferMappingsRequestConstraints(updateOfferMappingsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOfferMappings(r.Context(), businessIdParam, updateOfferMappingsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
