// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RegionsAPIController binds http requests to an api service and writes the service results to the http response
type RegionsAPIController struct {
	service RegionsAPIServicer
	errorHandler ErrorHandler
}

// RegionsAPIOption for how the controller is set up.
type RegionsAPIOption func(*RegionsAPIController)

// WithRegionsAPIErrorHandler inject ErrorHandler into controller
func WithRegionsAPIErrorHandler(h ErrorHandler) RegionsAPIOption {
	return func(c *RegionsAPIController) {
		c.errorHandler = h
	}
}

// NewRegionsAPIController creates a default api controller
func NewRegionsAPIController(s RegionsAPIServicer, opts ...RegionsAPIOption) *RegionsAPIController {
	controller := &RegionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RegionsAPIController
func (c *RegionsAPIController) Routes() Routes {
	return Routes{
		"SearchRegionChildren": Route{
			strings.ToUpper("Get"),
			"/regions/{regionId}/children",
			c.SearchRegionChildren,
		},
		"SearchRegionsById": Route{
			strings.ToUpper("Get"),
			"/regions/{regionId}",
			c.SearchRegionsById,
		},
		"SearchRegionsByName": Route{
			strings.ToUpper("Get"),
			"/regions",
			c.SearchRegionsByName,
		},
	}
}

// SearchRegionChildren - Информация о дочерних регионах
func (c *RegionsAPIController) SearchRegionChildren(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	regionIdParam, err := parseNumericParameter[int64](
		params["regionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.SearchRegionChildren(r.Context(), regionIdParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchRegionsById - Информация о регионе
func (c *RegionsAPIController) SearchRegionsById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	regionIdParam, err := parseNumericParameter[int64](
		params["regionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "regionId", Err: err}, nil)
		return
	}
	result, err := c.service.SearchRegionsById(r.Context(), regionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchRegionsByName - Поиск регионов по их имени
func (c *RegionsAPIController) SearchRegionsByName(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.SearchRegionsByName(r.Context(), nameParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
