// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server




// OutletDto - Информация о точке продаж.
type OutletDto struct {

	// Название точки продаж. 
	Name string `json:"name"`

	Type OutletType `json:"type"`

	// Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
	Coords string `json:"coords,omitempty"`

	// Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
	IsMain bool `json:"isMain,omitempty"`

	// Идентификатор точки продаж, присвоенный магазином.
	ShopOutletCode string `json:"shopOutletCode,omitempty"`

	Visibility OutletVisibilityType `json:"visibility,omitempty"`

	Address OutletAddressDto `json:"address"`

	// Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
	Phones []string `json:"phones"`

	WorkingSchedule OutletWorkingScheduleDto `json:"workingSchedule"`

	// Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
	DeliveryRules *[]OutletDeliveryRuleDto `json:"deliveryRules,omitempty"`

	// Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
	StoragePeriod int64 `json:"storagePeriod,omitempty"`
}

// AssertOutletDtoRequired checks if the required fields are not zero-ed
func AssertOutletDtoRequired(obj OutletDto) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"type": obj.Type,
		"address": obj.Address,
		"phones": obj.Phones,
		"workingSchedule": obj.WorkingSchedule,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertOutletAddressDtoRequired(obj.Address); err != nil {
		return err
	}
	if err := AssertOutletWorkingScheduleDtoRequired(obj.WorkingSchedule); err != nil {
		return err
	}
	if obj.DeliveryRules != nil {
		for _, el := range *obj.DeliveryRules {
			if err := AssertOutletDeliveryRuleDtoRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertOutletDtoConstraints checks if the values respects the defined constraints
func AssertOutletDtoConstraints(obj OutletDto) error {
	if err := AssertOutletAddressDtoConstraints(obj.Address); err != nil {
		return err
	}
	if err := AssertOutletWorkingScheduleDtoConstraints(obj.WorkingSchedule); err != nil {
		return err
	}
    if obj.DeliveryRules != nil {
     	for _, el := range *obj.DeliveryRules {
     		if err := AssertOutletDeliveryRuleDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	return nil
}
