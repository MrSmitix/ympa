// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// FeedsAPIController binds http requests to an api service and writes the service results to the http response
type FeedsAPIController struct {
	service FeedsAPIServicer
	errorHandler ErrorHandler
}

// FeedsAPIOption for how the controller is set up.
type FeedsAPIOption func(*FeedsAPIController)

// WithFeedsAPIErrorHandler inject ErrorHandler into controller
func WithFeedsAPIErrorHandler(h ErrorHandler) FeedsAPIOption {
	return func(c *FeedsAPIController) {
		c.errorHandler = h
	}
}

// NewFeedsAPIController creates a default api controller
func NewFeedsAPIController(s FeedsAPIServicer, opts ...FeedsAPIOption) *FeedsAPIController {
	controller := &FeedsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FeedsAPIController
func (c *FeedsAPIController) Routes() Routes {
	return Routes{
		"GetFeed": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feeds/{feedId}",
			c.GetFeed,
		},
		"GetFeedIndexLogs": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feeds/{feedId}/index-logs",
			c.GetFeedIndexLogs,
		},
		"GetFeeds": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/feeds",
			c.GetFeeds,
		},
		"RefreshFeed": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/feeds/{feedId}/refresh",
			c.RefreshFeed,
		},
		"SetFeedParams": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/feeds/{feedId}/params",
			c.SetFeedParams,
		},
	}
}

// GetFeed - Информация о прайс-листе
// Deprecated
func (c *FeedsAPIController) GetFeed(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	result, err := c.service.GetFeed(r.Context(), campaignIdParam, feedIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeedIndexLogs - Отчет по индексации прайс-листа
// Deprecated
func (c *FeedsAPIController) GetFeedIndexLogs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var publishedTimeFromParam time.Time
	if query.Has("published_time_from"){
		param, err := parseTime(query.Get("published_time_from"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "published_time_from", Err: err}, nil)
			return
		}

		publishedTimeFromParam = param
	} else {
	}
	var publishedTimeToParam time.Time
	if query.Has("published_time_to"){
		param, err := parseTime(query.Get("published_time_to"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "published_time_to", Err: err}, nil)
			return
		}

		publishedTimeToParam = param
	} else {
	}
	var statusParam FeedIndexLogsStatusType
	if query.Has("status") {
		param := FeedIndexLogsStatusType(query.Get("status"))

		statusParam = param
	} else {
	}
	result, err := c.service.GetFeedIndexLogs(r.Context(), campaignIdParam, feedIdParam, limitParam, publishedTimeFromParam, publishedTimeToParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeeds - Список прайс-листов магазина
// Deprecated
func (c *FeedsAPIController) GetFeeds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	result, err := c.service.GetFeeds(r.Context(), campaignIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RefreshFeed - Сообщить, что прайс-лист обновился
// Deprecated
func (c *FeedsAPIController) RefreshFeed(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	result, err := c.service.RefreshFeed(r.Context(), campaignIdParam, feedIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetFeedParams - Изменение параметров прайс-листа
// Deprecated
func (c *FeedsAPIController) SetFeedParams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	feedIdParam, err := parseNumericParameter[int64](
		params["feedId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "feedId", Err: err}, nil)
		return
	}
	setFeedParamsRequestParam := SetFeedParamsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setFeedParamsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetFeedParamsRequestRequired(setFeedParamsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetFeedParamsRequestConstraints(setFeedParamsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetFeedParams(r.Context(), campaignIdParam, feedIdParam, setFeedParamsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
