// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server




// OrderDto - Заказ.
type OrderDto struct {

	// Идентификатор заказа.
	Id int64 `json:"id,omitempty"`

	Status OrderStatusType `json:"status,omitempty"`

	Substatus OrderSubstatusType `json:"substatus,omitempty"`

	CreationDate string `json:"creationDate,omitempty"`

	UpdatedAt string `json:"updatedAt,omitempty"`

	Currency CurrencyType `json:"currency,omitempty"`

	// Платеж покупателя. 
	ItemsTotal float32 `json:"itemsTotal,omitempty"`

	// Стоимость доставки. 
	DeliveryTotal float32 `json:"deliveryTotal,omitempty"`

	// {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
	// Deprecated
	BuyerItemsTotal float32 `json:"buyerItemsTotal,omitempty"`

	// {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
	// Deprecated
	BuyerTotal float32 `json:"buyerTotal,omitempty"`

	// Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
	BuyerItemsTotalBeforeDiscount float32 `json:"buyerItemsTotalBeforeDiscount,omitempty"`

	// {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
	// Deprecated
	BuyerTotalBeforeDiscount float32 `json:"buyerTotalBeforeDiscount,omitempty"`

	PaymentType OrderPaymentType `json:"paymentType,omitempty"`

	PaymentMethod OrderPaymentMethodType `json:"paymentMethod,omitempty"`

	// Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
	Fake bool `json:"fake,omitempty"`

	// Список товаров в заказе.
	Items []OrderItemDto `json:"items"`

	// Список субсидий по типам.
	Subsidies *[]OrderSubsidyDto `json:"subsidies,omitempty"`

	Delivery OrderDeliveryDto `json:"delivery,omitempty"`

	Buyer OrderBuyerDto `json:"buyer,omitempty"`

	// Комментарий к заказу.
	Notes string `json:"notes,omitempty"`

	TaxSystem OrderTaxSystemType `json:"taxSystem,omitempty"`

	// **Только для модели DBS**  Запрошена ли отмена. 
	CancelRequested bool `json:"cancelRequested,omitempty"`

	ExpiryDate string `json:"expiryDate,omitempty"`
}

// AssertOrderDtoRequired checks if the required fields are not zero-ed
func AssertOrderDtoRequired(obj OrderDto) error {
	elements := map[string]interface{}{
		"items": obj.Items,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Items {
		if err := AssertOrderItemDtoRequired(el); err != nil {
			return err
		}
	}
	if obj.Subsidies != nil {
		for _, el := range *obj.Subsidies {
			if err := AssertOrderSubsidyDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if err := AssertOrderDeliveryDtoRequired(obj.Delivery); err != nil {
		return err
	}
	if err := AssertOrderBuyerDtoRequired(obj.Buyer); err != nil {
		return err
	}
	return nil
}

// AssertOrderDtoConstraints checks if the values respects the defined constraints
func AssertOrderDtoConstraints(obj OrderDto) error {
	for _, el := range obj.Items {
		if err := AssertOrderItemDtoConstraints(el); err != nil {
			return err
		}
	}
    if obj.Subsidies != nil {
     	for _, el := range *obj.Subsidies {
     		if err := AssertOrderSubsidyDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	if err := AssertOrderDeliveryDtoConstraints(obj.Delivery); err != nil {
		return err
	}
	if err := AssertOrderBuyerDtoConstraints(obj.Buyer); err != nil {
		return err
	}
	return nil
}
