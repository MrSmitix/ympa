// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ShipmentsAPIController binds http requests to an api service and writes the service results to the http response
type ShipmentsAPIController struct {
	service ShipmentsAPIServicer
	errorHandler ErrorHandler
}

// ShipmentsAPIOption for how the controller is set up.
type ShipmentsAPIOption func(*ShipmentsAPIController)

// WithShipmentsAPIErrorHandler inject ErrorHandler into controller
func WithShipmentsAPIErrorHandler(h ErrorHandler) ShipmentsAPIOption {
	return func(c *ShipmentsAPIController) {
		c.errorHandler = h
	}
}

// NewShipmentsAPIController creates a default api controller
func NewShipmentsAPIController(s ShipmentsAPIServicer, opts ...ShipmentsAPIOption) *ShipmentsAPIController {
	controller := &ShipmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ShipmentsAPIController
func (c *ShipmentsAPIController) Routes() Routes {
	return Routes{
		"ConfirmShipment": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm",
			c.ConfirmShipment,
		},
		"DownloadShipmentAct": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act",
			c.DownloadShipmentAct,
		},
		"DownloadShipmentDiscrepancyAct": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act",
			c.DownloadShipmentDiscrepancyAct,
		},
		"DownloadShipmentInboundAct": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act",
			c.DownloadShipmentInboundAct,
		},
		"DownloadShipmentPalletLabels": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels",
			c.DownloadShipmentPalletLabels,
		},
		"DownloadShipmentReceptionTransferAct": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/shipments/reception-transfer-act",
			c.DownloadShipmentReceptionTransferAct,
		},
		"DownloadShipmentTransportationWaybill": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill",
			c.DownloadShipmentTransportationWaybill,
		},
		"GetShipment": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}",
			c.GetShipment,
		},
		"GetShipmentOrdersInfo": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info",
			c.GetShipmentOrdersInfo,
		},
		"SearchShipments": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/first-mile/shipments",
			c.SearchShipments,
		},
		"SetShipmentPalletsCount": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets",
			c.SetShipmentPalletsCount,
		},
		"TransferOrdersFromShipment": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer",
			c.TransferOrdersFromShipment,
		},
	}
}

// ConfirmShipment - Подтверждение отгрузки
func (c *ShipmentsAPIController) ConfirmShipment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	confirmShipmentRequestParam := ConfirmShipmentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&confirmShipmentRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConfirmShipmentRequestRequired(confirmShipmentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConfirmShipmentRequestConstraints(confirmShipmentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ConfirmShipment(r.Context(), campaignIdParam, shipmentIdParam, confirmShipmentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadShipmentAct - Получение акта приема-передачи
func (c *ShipmentsAPIController) DownloadShipmentAct(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	result, err := c.service.DownloadShipmentAct(r.Context(), campaignIdParam, shipmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadShipmentDiscrepancyAct - Получение акта расхождений
func (c *ShipmentsAPIController) DownloadShipmentDiscrepancyAct(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	result, err := c.service.DownloadShipmentDiscrepancyAct(r.Context(), campaignIdParam, shipmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadShipmentInboundAct - Получение фактического акта приема-передачи
func (c *ShipmentsAPIController) DownloadShipmentInboundAct(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	result, err := c.service.DownloadShipmentInboundAct(r.Context(), campaignIdParam, shipmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadShipmentPalletLabels - Ярлыки для доверительной приемки (FBS)
func (c *ShipmentsAPIController) DownloadShipmentPalletLabels(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	var formatParam ShipmentPalletLabelPageFormatType
	if query.Has("format") {
		param := ShipmentPalletLabelPageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.DownloadShipmentPalletLabels(r.Context(), campaignIdParam, shipmentIdParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadShipmentReceptionTransferAct - Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
func (c *ShipmentsAPIController) DownloadShipmentReceptionTransferAct(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var warehouseIdParam int32
	if query.Has("warehouse_id") {
		param, err := parseNumericParameter[int32](
			query.Get("warehouse_id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "warehouse_id", Err: err}, nil)
			return
		}

		warehouseIdParam = param
	} else {
	}
	result, err := c.service.DownloadShipmentReceptionTransferAct(r.Context(), campaignIdParam, warehouseIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadShipmentTransportationWaybill - Получение транспортной накладной
func (c *ShipmentsAPIController) DownloadShipmentTransportationWaybill(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	result, err := c.service.DownloadShipmentTransportationWaybill(r.Context(), campaignIdParam, shipmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetShipment - Получение информации об одной отгрузке
func (c *ShipmentsAPIController) GetShipment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	var cancelledOrdersParam bool
	if query.Has("cancelledOrders") {
		param, err := parseBoolParameter(
			query.Get("cancelledOrders"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "cancelledOrders", Err: err}, nil)
			return
		}

		cancelledOrdersParam = param
	} else {
		var param bool = true
		cancelledOrdersParam = param
	}
	result, err := c.service.GetShipment(r.Context(), campaignIdParam, shipmentIdParam, cancelledOrdersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetShipmentOrdersInfo - Получение информации о возможности печати ярлыков (FBS)
func (c *ShipmentsAPIController) GetShipmentOrdersInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	result, err := c.service.GetShipmentOrdersInfo(r.Context(), campaignIdParam, shipmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchShipments - Получение информации о нескольких отгрузках
func (c *ShipmentsAPIController) SearchShipments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	searchShipmentsRequestParam := SearchShipmentsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&searchShipmentsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSearchShipmentsRequestRequired(searchShipmentsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSearchShipmentsRequestConstraints(searchShipmentsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.SearchShipments(r.Context(), campaignIdParam, searchShipmentsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetShipmentPalletsCount - Передача количества упаковок в отгрузке
func (c *ShipmentsAPIController) SetShipmentPalletsCount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	setShipmentPalletsCountRequestParam := SetShipmentPalletsCountRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setShipmentPalletsCountRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetShipmentPalletsCountRequestRequired(setShipmentPalletsCountRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetShipmentPalletsCountRequestConstraints(setShipmentPalletsCountRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetShipmentPalletsCount(r.Context(), campaignIdParam, shipmentIdParam, setShipmentPalletsCountRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// TransferOrdersFromShipment - Перенос заказов в следующую отгрузку
func (c *ShipmentsAPIController) TransferOrdersFromShipment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	transferOrdersFromShipmentRequestParam := TransferOrdersFromShipmentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&transferOrdersFromShipmentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTransferOrdersFromShipmentRequestRequired(transferOrdersFromShipmentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTransferOrdersFromShipmentRequestConstraints(transferOrdersFromShipmentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TransferOrdersFromShipment(r.Context(), campaignIdParam, shipmentIdParam, transferOrdersFromShipmentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
