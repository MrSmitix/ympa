// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GoodsFeedbackAPIController binds http requests to an api service and writes the service results to the http response
type GoodsFeedbackAPIController struct {
	service GoodsFeedbackAPIServicer
	errorHandler ErrorHandler
}

// GoodsFeedbackAPIOption for how the controller is set up.
type GoodsFeedbackAPIOption func(*GoodsFeedbackAPIController)

// WithGoodsFeedbackAPIErrorHandler inject ErrorHandler into controller
func WithGoodsFeedbackAPIErrorHandler(h ErrorHandler) GoodsFeedbackAPIOption {
	return func(c *GoodsFeedbackAPIController) {
		c.errorHandler = h
	}
}

// NewGoodsFeedbackAPIController creates a default api controller
func NewGoodsFeedbackAPIController(s GoodsFeedbackAPIServicer, opts ...GoodsFeedbackAPIOption) *GoodsFeedbackAPIController {
	controller := &GoodsFeedbackAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GoodsFeedbackAPIController
func (c *GoodsFeedbackAPIController) Routes() Routes {
	return Routes{
		"DeleteGoodsFeedbackComment": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/comments/delete",
			c.DeleteGoodsFeedbackComment,
		},
		"GetGoodsFeedbackComments": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/comments",
			c.GetGoodsFeedbackComments,
		},
		"GetGoodsFeedbacks": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback",
			c.GetGoodsFeedbacks,
		},
		"SkipGoodsFeedbacksReaction": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/skip-reaction",
			c.SkipGoodsFeedbacksReaction,
		},
		"UpdateGoodsFeedbackComment": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/goods-feedback/comments/update",
			c.UpdateGoodsFeedbackComment,
		},
	}
}

// DeleteGoodsFeedbackComment - Удаление комментария к отзыву
func (c *GoodsFeedbackAPIController) DeleteGoodsFeedbackComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deleteGoodsFeedbackCommentRequestParam := DeleteGoodsFeedbackCommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteGoodsFeedbackCommentRequestRequired(deleteGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteGoodsFeedbackCommentRequestConstraints(deleteGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteGoodsFeedbackComment(r.Context(), businessIdParam, deleteGoodsFeedbackCommentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoodsFeedbackComments - Получение комментариев к отзыву
func (c *GoodsFeedbackAPIController) GetGoodsFeedbackComments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getGoodsFeedbackCommentsRequestParam := GetGoodsFeedbackCommentsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGoodsFeedbackCommentsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGoodsFeedbackCommentsRequestRequired(getGoodsFeedbackCommentsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGoodsFeedbackCommentsRequestConstraints(getGoodsFeedbackCommentsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetGoodsFeedbackComments(r.Context(), businessIdParam, getGoodsFeedbackCommentsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoodsFeedbacks - Получение отзывов о товарах продавца
func (c *GoodsFeedbackAPIController) GetGoodsFeedbacks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getGoodsFeedbackRequestParam := GetGoodsFeedbackRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGoodsFeedbackRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGoodsFeedbackRequestRequired(getGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGoodsFeedbackRequestConstraints(getGoodsFeedbackRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetGoodsFeedbacks(r.Context(), businessIdParam, pageTokenParam, limitParam, getGoodsFeedbackRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SkipGoodsFeedbacksReaction - Отказ от ответа на отзывы
func (c *GoodsFeedbackAPIController) SkipGoodsFeedbacksReaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	skipGoodsFeedbackReactionRequestParam := SkipGoodsFeedbackReactionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&skipGoodsFeedbackReactionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSkipGoodsFeedbackReactionRequestRequired(skipGoodsFeedbackReactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSkipGoodsFeedbackReactionRequestConstraints(skipGoodsFeedbackReactionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SkipGoodsFeedbacksReaction(r.Context(), businessIdParam, skipGoodsFeedbackReactionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGoodsFeedbackComment - Добавление нового или изменение созданного комментария
func (c *GoodsFeedbackAPIController) UpdateGoodsFeedbackComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateGoodsFeedbackCommentRequestParam := UpdateGoodsFeedbackCommentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateGoodsFeedbackCommentRequestRequired(updateGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateGoodsFeedbackCommentRequestConstraints(updateGoodsFeedbackCommentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGoodsFeedbackComment(r.Context(), businessIdParam, updateGoodsFeedbackCommentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
