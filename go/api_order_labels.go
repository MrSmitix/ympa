// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OrderLabelsAPIController binds http requests to an api service and writes the service results to the http response
type OrderLabelsAPIController struct {
	service OrderLabelsAPIServicer
	errorHandler ErrorHandler
}

// OrderLabelsAPIOption for how the controller is set up.
type OrderLabelsAPIOption func(*OrderLabelsAPIController)

// WithOrderLabelsAPIErrorHandler inject ErrorHandler into controller
func WithOrderLabelsAPIErrorHandler(h ErrorHandler) OrderLabelsAPIOption {
	return func(c *OrderLabelsAPIController) {
		c.errorHandler = h
	}
}

// NewOrderLabelsAPIController creates a default api controller
func NewOrderLabelsAPIController(s OrderLabelsAPIServicer, opts ...OrderLabelsAPIOption) *OrderLabelsAPIController {
	controller := &OrderLabelsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrderLabelsAPIController
func (c *OrderLabelsAPIController) Routes() Routes {
	return Routes{
		"GenerateOrderLabel": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label",
			c.GenerateOrderLabel,
		},
		"GenerateOrderLabels": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/labels",
			c.GenerateOrderLabels,
		},
		"GetOrderLabelsData": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data",
			c.GetOrderLabelsData,
		},
	}
}

// GenerateOrderLabel - Готовый ярлык‑наклейка для коробки в заказе
func (c *OrderLabelsAPIController) GenerateOrderLabel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	boxIdParam, err := parseNumericParameter[int64](
		params["boxId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "boxId", Err: err}, nil)
		return
	}
	var formatParam PageFormatType
	if query.Has("format") {
		param := PageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateOrderLabel(r.Context(), campaignIdParam, orderIdParam, shipmentIdParam, boxIdParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GenerateOrderLabels - Готовые ярлыки‑наклейки на все коробки в одном заказе
func (c *OrderLabelsAPIController) GenerateOrderLabels(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	var formatParam PageFormatType
	if query.Has("format") {
		param := PageFormatType(query.Get("format"))

		formatParam = param
	} else {
	}
	result, err := c.service.GenerateOrderLabels(r.Context(), campaignIdParam, orderIdParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrderLabelsData - Данные для самостоятельного изготовления ярлыков
func (c *OrderLabelsAPIController) GetOrderLabelsData(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderLabelsData(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
