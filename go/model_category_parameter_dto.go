// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server




// CategoryParameterDto - Характеристика товара.
type CategoryParameterDto struct {

	// Идентификатор характеристики.
	Id int64 `json:"id"`

	// Название характеристики.
	Name string `json:"name,omitempty"`

	Type ParameterType `json:"type"`

	Unit CategoryParameterUnitDto `json:"unit,omitempty"`

	// Описание характеристики.
	Description string `json:"description,omitempty"`

	// Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
	RecommendationTypes *[]OfferCardRecommendationType `json:"recommendationTypes,omitempty"`

	// Обязательность характеристики.
	Required bool `json:"required"`

	// Используется ли характеристика в фильтре.
	Filtering bool `json:"filtering"`

	// Является ли характеристика особенностью варианта.
	Distinctive bool `json:"distinctive"`

	// Можно ли передать сразу несколько значений.
	Multivalue bool `json:"multivalue"`

	// Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
	AllowCustomValues bool `json:"allowCustomValues"`

	// Список допустимых значений параметра. Только для характеристик типа `ENUM`.
	Values *[]ParameterValueOptionDto `json:"values,omitempty"`

	Constraints ParameterValueConstraintsDto `json:"constraints,omitempty"`

	// Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
	ValueRestrictions *[]ValueRestrictionDto `json:"valueRestrictions,omitempty"`
}

// AssertCategoryParameterDtoRequired checks if the required fields are not zero-ed
func AssertCategoryParameterDtoRequired(obj CategoryParameterDto) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"type": obj.Type,
		"required": obj.Required,
		"filtering": obj.Filtering,
		"distinctive": obj.Distinctive,
		"multivalue": obj.Multivalue,
		"allowCustomValues": obj.AllowCustomValues,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCategoryParameterUnitDtoRequired(obj.Unit); err != nil {
		return err
	}
	if obj.Values != nil {
		for _, el := range *obj.Values {
			if err := AssertParameterValueOptionDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if err := AssertParameterValueConstraintsDtoRequired(obj.Constraints); err != nil {
		return err
	}
	if obj.ValueRestrictions != nil {
		for _, el := range *obj.ValueRestrictions {
			if err := AssertValueRestrictionDtoRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertCategoryParameterDtoConstraints checks if the values respects the defined constraints
func AssertCategoryParameterDtoConstraints(obj CategoryParameterDto) error {
	if err := AssertCategoryParameterUnitDtoConstraints(obj.Unit); err != nil {
		return err
	}
    if obj.Values != nil {
     	for _, el := range *obj.Values {
     		if err := AssertParameterValueOptionDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	if err := AssertParameterValueConstraintsDtoConstraints(obj.Constraints); err != nil {
		return err
	}
    if obj.ValueRestrictions != nil {
     	for _, el := range *obj.ValueRestrictions {
     		if err := AssertValueRestrictionDtoConstraints(el); err != nil {
     			return err
     		}
     	}
    }
	return nil
}
