// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"
	"os"

	"github.com/gorilla/mux"
)

// ChatsAPIController binds http requests to an api service and writes the service results to the http response
type ChatsAPIController struct {
	service ChatsAPIServicer
	errorHandler ErrorHandler
}

// ChatsAPIOption for how the controller is set up.
type ChatsAPIOption func(*ChatsAPIController)

// WithChatsAPIErrorHandler inject ErrorHandler into controller
func WithChatsAPIErrorHandler(h ErrorHandler) ChatsAPIOption {
	return func(c *ChatsAPIController) {
		c.errorHandler = h
	}
}

// NewChatsAPIController creates a default api controller
func NewChatsAPIController(s ChatsAPIServicer, opts ...ChatsAPIOption) *ChatsAPIController {
	controller := &ChatsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ChatsAPIController
func (c *ChatsAPIController) Routes() Routes {
	return Routes{
		"CreateChat": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/new",
			c.CreateChat,
		},
		"GetChatHistory": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/history",
			c.GetChatHistory,
		},
		"GetChats": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats",
			c.GetChats,
		},
		"SendFileToChat": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/file/send",
			c.SendFileToChat,
		},
		"SendMessageToChat": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/chats/message",
			c.SendMessageToChat,
		},
	}
}

// CreateChat - Создание нового чата с покупателем
func (c *ChatsAPIController) CreateChat(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	createChatRequestParam := CreateChatRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createChatRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateChatRequestRequired(createChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateChatRequestConstraints(createChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateChat(r.Context(), businessIdParam, createChatRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChatHistory - Получение истории сообщений в чате
func (c *ChatsAPIController) GetChatHistory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var chatIdParam int64
	if query.Has("chatId") {
		param, err := parseNumericParameter[int64](
			query.Get("chatId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chatId", Err: err}, nil)
			return
		}

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chatId"}, nil)
		return
	}
	getChatHistoryRequestParam := GetChatHistoryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getChatHistoryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetChatHistoryRequestRequired(getChatHistoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetChatHistoryRequestConstraints(getChatHistoryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetChatHistory(r.Context(), businessIdParam, chatIdParam, getChatHistoryRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChats - Получение доступных чатов
func (c *ChatsAPIController) GetChats(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getChatsRequestParam := GetChatsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getChatsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetChatsRequestRequired(getChatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetChatsRequestConstraints(getChatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetChats(r.Context(), businessIdParam, getChatsRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendFileToChat - Отправка файла в чат
func (c *ChatsAPIController) SendFileToChat(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var chatIdParam int64
	if query.Has("chatId") {
		param, err := parseNumericParameter[int64](
			query.Get("chatId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chatId", Err: err}, nil)
			return
		}

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chatId"}, nil)
		return
	}
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "file", Err: err}, nil)
			return
		}

		fileParam = param
	}
	
	
	result, err := c.service.SendFileToChat(r.Context(), businessIdParam, chatIdParam, fileParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendMessageToChat - Отправка сообщения в чат
func (c *ChatsAPIController) SendMessageToChat(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var chatIdParam int64
	if query.Has("chatId") {
		param, err := parseNumericParameter[int64](
			query.Get("chatId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "chatId", Err: err}, nil)
			return
		}

		chatIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "chatId"}, nil)
		return
	}
	sendMessageToChatRequestParam := SendMessageToChatRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sendMessageToChatRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSendMessageToChatRequestRequired(sendMessageToChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSendMessageToChatRequestConstraints(sendMessageToChatRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendMessageToChat(r.Context(), businessIdParam, chatIdParam, sendMessageToChatRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
