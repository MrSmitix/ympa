// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// ChatStatusType : Статус чата:  * `NEW` — новый чат. * `WAITING_FOR_CUSTOMER` — нужен ответ покупателя. * `WAITING_FOR_PARTNER` — нужен ответ магазина. * `WAITING_FOR_ARBITER` — нужен ответ арбитра. * `WAITING_FOR_MARKET` — нужен ответ Маркета. * `FINISHED` — чат завершен. 
type ChatStatusType string

// List of ChatStatusType
const (
	NEW ChatStatusType = "NEW"
	WAITING_FOR_CUSTOMER ChatStatusType = "WAITING_FOR_CUSTOMER"
	WAITING_FOR_PARTNER ChatStatusType = "WAITING_FOR_PARTNER"
	WAITING_FOR_ARBITER ChatStatusType = "WAITING_FOR_ARBITER"
	WAITING_FOR_MARKET ChatStatusType = "WAITING_FOR_MARKET"
	FINISHED ChatStatusType = "FINISHED"
)

// AllowedChatStatusTypeEnumValues is all the allowed values of ChatStatusType enum
var AllowedChatStatusTypeEnumValues = []ChatStatusType{
	"NEW",
	"WAITING_FOR_CUSTOMER",
	"WAITING_FOR_PARTNER",
	"WAITING_FOR_ARBITER",
	"WAITING_FOR_MARKET",
	"FINISHED",
}

// validChatStatusTypeEnumValue provides a map of ChatStatusTypes for fast verification of use input
var validChatStatusTypeEnumValues = map[ChatStatusType]struct{}{
	"NEW": {},
	"WAITING_FOR_CUSTOMER": {},
	"WAITING_FOR_PARTNER": {},
	"WAITING_FOR_ARBITER": {},
	"WAITING_FOR_MARKET": {},
	"FINISHED": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatStatusType) IsValid() bool {
	_, ok := validChatStatusTypeEnumValues[v]
	return ok
}

// NewChatStatusTypeFromValue returns a pointer to a valid ChatStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatStatusTypeFromValue(v string) (ChatStatusType, error) {
	ev := ChatStatusType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ChatStatusType: valid values are %v", v, AllowedChatStatusTypeEnumValues)
}



// AssertChatStatusTypeRequired checks if the required fields are not zero-ed
func AssertChatStatusTypeRequired(obj ChatStatusType) error {
	return nil
}

// AssertChatStatusTypeConstraints checks if the values respects the defined constraints
func AssertChatStatusTypeConstraints(obj ChatStatusType) error {
	return nil
}
