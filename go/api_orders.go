// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// OrdersAPIController binds http requests to an api service and writes the service results to the http response
type OrdersAPIController struct {
	service OrdersAPIServicer
	errorHandler ErrorHandler
}

// OrdersAPIOption for how the controller is set up.
type OrdersAPIOption func(*OrdersAPIController)

// WithOrdersAPIErrorHandler inject ErrorHandler into controller
func WithOrdersAPIErrorHandler(h ErrorHandler) OrdersAPIOption {
	return func(c *OrdersAPIController) {
		c.errorHandler = h
	}
}

// NewOrdersAPIController creates a default api controller
func NewOrdersAPIController(s OrdersAPIServicer, opts ...OrdersAPIOption) *OrdersAPIController {
	controller := &OrdersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrdersAPIController
func (c *OrdersAPIController) Routes() Routes {
	return Routes{
		"AcceptOrderCancellation": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/cancellation/accept",
			c.AcceptOrderCancellation,
		},
		"GetOrder": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders/{orderId}",
			c.GetOrder,
		},
		"GetOrders": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/orders",
			c.GetOrders,
		},
		"ProvideOrderDigitalCodes": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods",
			c.ProvideOrderDigitalCodes,
		},
		"ProvideOrderItemIdentifiers": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/identifiers",
			c.ProvideOrderItemIdentifiers,
		},
		"SetOrderBoxLayout": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/boxes",
			c.SetOrderBoxLayout,
		},
		"SetOrderShipmentBoxes": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes",
			c.SetOrderShipmentBoxes,
		},
		"UpdateOrderItems": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/items",
			c.UpdateOrderItems,
		},
		"UpdateOrderStatus": Route{
			strings.ToUpper("Put"),
			"/campaigns/{campaignId}/orders/{orderId}/status",
			c.UpdateOrderStatus,
		},
		"UpdateOrderStatuses": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/status-update",
			c.UpdateOrderStatuses,
		},
	}
}

// AcceptOrderCancellation - Отмена заказа покупателем
func (c *OrdersAPIController) AcceptOrderCancellation(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	acceptOrderCancellationRequestParam := AcceptOrderCancellationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&acceptOrderCancellationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAcceptOrderCancellationRequestRequired(acceptOrderCancellationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAcceptOrderCancellationRequestConstraints(acceptOrderCancellationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AcceptOrderCancellation(r.Context(), campaignIdParam, orderIdParam, acceptOrderCancellationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrder - Информация об одном заказе
func (c *OrdersAPIController) GetOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrder(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrders - Информация о нескольких заказах
func (c *OrdersAPIController) GetOrders(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdsParam, err := parseNumericArrayParameter[int64](
		query.Get("orderIds"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderIds", Err: err}, nil)
		return
	}
	var statusParam []OrderStatusType
	if query.Has("status") {
		paramSplits := strings.Split(query.Get("status"), ",")
		statusParam = make([]OrderStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOrderStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "status", Err: err}, nil)
				return
			}
			statusParam = append(statusParam, paramEnum)
		}
	}
	var substatusParam []OrderSubstatusType
	if query.Has("substatus") {
		paramSplits := strings.Split(query.Get("substatus"), ",")
		substatusParam = make([]OrderSubstatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOrderSubstatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "substatus", Err: err}, nil)
				return
			}
			substatusParam = append(substatusParam, paramEnum)
		}
	}
	var fromDateParam string
	if query.Has("fromDate") {
		param := string(query.Get("fromDate"))

		fromDateParam = param
	} else {
	}
	var toDateParam string
	if query.Has("toDate") {
		param := string(query.Get("toDate"))

		toDateParam = param
	} else {
	}
	var supplierShipmentDateFromParam string
	if query.Has("supplierShipmentDateFrom") {
		param := string(query.Get("supplierShipmentDateFrom"))

		supplierShipmentDateFromParam = param
	} else {
	}
	var supplierShipmentDateToParam string
	if query.Has("supplierShipmentDateTo") {
		param := string(query.Get("supplierShipmentDateTo"))

		supplierShipmentDateToParam = param
	} else {
	}
	var updatedAtFromParam time.Time
	if query.Has("updatedAtFrom"){
		param, err := parseTime(query.Get("updatedAtFrom"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "updatedAtFrom", Err: err}, nil)
			return
		}

		updatedAtFromParam = param
	} else {
	}
	var updatedAtToParam time.Time
	if query.Has("updatedAtTo"){
		param, err := parseTime(query.Get("updatedAtTo"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "updatedAtTo", Err: err}, nil)
			return
		}

		updatedAtToParam = param
	} else {
	}
	var dispatchTypeParam OrderDeliveryDispatchType
	if query.Has("dispatchType") {
		param := OrderDeliveryDispatchType(query.Get("dispatchType"))

		dispatchTypeParam = param
	} else {
	}
	var fakeParam bool
	if query.Has("fake") {
		param, err := parseBoolParameter(
			query.Get("fake"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "fake", Err: err}, nil)
			return
		}

		fakeParam = param
	} else {
		var param bool = false
		fakeParam = param
	}
	var hasCisParam bool
	if query.Has("hasCis") {
		param, err := parseBoolParameter(
			query.Get("hasCis"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "hasCis", Err: err}, nil)
			return
		}

		hasCisParam = param
	} else {
		var param bool = false
		hasCisParam = param
	}
	var onlyWaitingForCancellationApproveParam bool
	if query.Has("onlyWaitingForCancellationApprove") {
		param, err := parseBoolParameter(
			query.Get("onlyWaitingForCancellationApprove"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "onlyWaitingForCancellationApprove", Err: err}, nil)
			return
		}

		onlyWaitingForCancellationApproveParam = param
	} else {
		var param bool = false
		onlyWaitingForCancellationApproveParam = param
	}
	var onlyEstimatedDeliveryParam bool
	if query.Has("onlyEstimatedDelivery") {
		param, err := parseBoolParameter(
			query.Get("onlyEstimatedDelivery"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "onlyEstimatedDelivery", Err: err}, nil)
			return
		}

		onlyEstimatedDeliveryParam = param
	} else {
		var param bool = false
		onlyEstimatedDeliveryParam = param
	}
	var buyerTypeParam OrderBuyerType
	if query.Has("buyerType") {
		param := OrderBuyerType(query.Get("buyerType"))

		buyerTypeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](10000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetOrders(r.Context(), campaignIdParam, orderIdsParam, statusParam, substatusParam, fromDateParam, toDateParam, supplierShipmentDateFromParam, supplierShipmentDateToParam, updatedAtFromParam, updatedAtToParam, dispatchTypeParam, fakeParam, hasCisParam, onlyWaitingForCancellationApproveParam, onlyEstimatedDeliveryParam, buyerTypeParam, pageParam, pageSizeParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProvideOrderDigitalCodes - Передача ключей цифровых товаров
func (c *OrdersAPIController) ProvideOrderDigitalCodes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	provideOrderDigitalCodesRequestParam := ProvideOrderDigitalCodesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&provideOrderDigitalCodesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProvideOrderDigitalCodesRequestRequired(provideOrderDigitalCodesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProvideOrderDigitalCodesRequestConstraints(provideOrderDigitalCodesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProvideOrderDigitalCodes(r.Context(), campaignIdParam, orderIdParam, provideOrderDigitalCodesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProvideOrderItemIdentifiers - Передача кодов маркировки единиц товара
func (c *OrdersAPIController) ProvideOrderItemIdentifiers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	provideOrderItemIdentifiersRequestParam := ProvideOrderItemIdentifiersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&provideOrderItemIdentifiersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProvideOrderItemIdentifiersRequestRequired(provideOrderItemIdentifiersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProvideOrderItemIdentifiersRequestConstraints(provideOrderItemIdentifiersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProvideOrderItemIdentifiers(r.Context(), campaignIdParam, orderIdParam, provideOrderItemIdentifiersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetOrderBoxLayout - Подготовка заказа
func (c *OrdersAPIController) SetOrderBoxLayout(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	setOrderBoxLayoutRequestParam := SetOrderBoxLayoutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setOrderBoxLayoutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetOrderBoxLayoutRequestRequired(setOrderBoxLayoutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetOrderBoxLayoutRequestConstraints(setOrderBoxLayoutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetOrderBoxLayout(r.Context(), campaignIdParam, orderIdParam, setOrderBoxLayoutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetOrderShipmentBoxes - Передача количества грузовых мест в заказе
func (c *OrdersAPIController) SetOrderShipmentBoxes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	shipmentIdParam, err := parseNumericParameter[int64](
		params["shipmentId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "shipmentId", Err: err}, nil)
		return
	}
	setOrderShipmentBoxesRequestParam := SetOrderShipmentBoxesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setOrderShipmentBoxesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetOrderShipmentBoxesRequestRequired(setOrderShipmentBoxesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetOrderShipmentBoxesRequestConstraints(setOrderShipmentBoxesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetOrderShipmentBoxes(r.Context(), campaignIdParam, orderIdParam, shipmentIdParam, setOrderShipmentBoxesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderItems - Удаление товара из заказа или уменьшение числа единиц
func (c *OrdersAPIController) UpdateOrderItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	updateOrderItemRequestParam := UpdateOrderItemRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderItemRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderItemRequestRequired(updateOrderItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderItemRequestConstraints(updateOrderItemRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderItems(r.Context(), campaignIdParam, orderIdParam, updateOrderItemRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderStatus - Изменение статуса одного заказа
func (c *OrdersAPIController) UpdateOrderStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	updateOrderStatusRequestParam := UpdateOrderStatusRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderStatusRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderStatusRequestRequired(updateOrderStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderStatusRequestConstraints(updateOrderStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderStatus(r.Context(), campaignIdParam, orderIdParam, updateOrderStatusRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOrderStatuses - Изменение статусов нескольких заказов
func (c *OrdersAPIController) UpdateOrderStatuses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateOrderStatusesRequestParam := UpdateOrderStatusesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOrderStatusesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOrderStatusesRequestRequired(updateOrderStatusesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOrderStatusesRequestConstraints(updateOrderStatusesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOrderStatuses(r.Context(), campaignIdParam, updateOrderStatusesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
