// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OrderBusinessInformationAPIController binds http requests to an api service and writes the service results to the http response
type OrderBusinessInformationAPIController struct {
	service OrderBusinessInformationAPIServicer
	errorHandler ErrorHandler
}

// OrderBusinessInformationAPIOption for how the controller is set up.
type OrderBusinessInformationAPIOption func(*OrderBusinessInformationAPIController)

// WithOrderBusinessInformationAPIErrorHandler inject ErrorHandler into controller
func WithOrderBusinessInformationAPIErrorHandler(h ErrorHandler) OrderBusinessInformationAPIOption {
	return func(c *OrderBusinessInformationAPIController) {
		c.errorHandler = h
	}
}

// NewOrderBusinessInformationAPIController creates a default api controller
func NewOrderBusinessInformationAPIController(s OrderBusinessInformationAPIServicer, opts ...OrderBusinessInformationAPIOption) *OrderBusinessInformationAPIController {
	controller := &OrderBusinessInformationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrderBusinessInformationAPIController
func (c *OrderBusinessInformationAPIController) Routes() Routes {
	return Routes{
		"GetOrderBusinessBuyerInfo": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/business-buyer",
			c.GetOrderBusinessBuyerInfo,
		},
		"GetOrderBusinessDocumentsInfo": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/orders/{orderId}/documents",
			c.GetOrderBusinessDocumentsInfo,
		},
	}
}

// GetOrderBusinessBuyerInfo - Информация о покупателе — юридическом лице
func (c *OrderBusinessInformationAPIController) GetOrderBusinessBuyerInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderBusinessBuyerInfo(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrderBusinessDocumentsInfo - Информация о документах
func (c *OrderBusinessInformationAPIController) GetOrderBusinessDocumentsInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	orderIdParam, err := parseNumericParameter[int64](
		params["orderId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "orderId", Err: err}, nil)
		return
	}
	result, err := c.service.GetOrderBusinessDocumentsInfo(r.Context(), campaignIdParam, orderIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
