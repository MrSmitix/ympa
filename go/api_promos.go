// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PromosAPIController binds http requests to an api service and writes the service results to the http response
type PromosAPIController struct {
	service PromosAPIServicer
	errorHandler ErrorHandler
}

// PromosAPIOption for how the controller is set up.
type PromosAPIOption func(*PromosAPIController)

// WithPromosAPIErrorHandler inject ErrorHandler into controller
func WithPromosAPIErrorHandler(h ErrorHandler) PromosAPIOption {
	return func(c *PromosAPIController) {
		c.errorHandler = h
	}
}

// NewPromosAPIController creates a default api controller
func NewPromosAPIController(s PromosAPIServicer, opts ...PromosAPIOption) *PromosAPIController {
	controller := &PromosAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PromosAPIController
func (c *PromosAPIController) Routes() Routes {
	return Routes{
		"DeletePromoOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos/offers/delete",
			c.DeletePromoOffers,
		},
		"GetPromoOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos/offers",
			c.GetPromoOffers,
		},
		"GetPromos": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos",
			c.GetPromos,
		},
		"UpdatePromoOffers": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/promos/offers/update",
			c.UpdatePromoOffers,
		},
	}
}

// DeletePromoOffers - Удаление товаров из акции
func (c *PromosAPIController) DeletePromoOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	deletePromoOffersRequestParam := DeletePromoOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deletePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeletePromoOffersRequestRequired(deletePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeletePromoOffersRequestConstraints(deletePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeletePromoOffers(r.Context(), businessIdParam, deletePromoOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPromoOffers - Получение списка товаров, которые участвуют или могут участвовать в акции
func (c *PromosAPIController) GetPromoOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getPromoOffersRequestParam := GetPromoOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPromoOffersRequestRequired(getPromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPromoOffersRequestConstraints(getPromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetPromoOffers(r.Context(), businessIdParam, getPromoOffersRequestParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPromos - Получение списка акций
func (c *PromosAPIController) GetPromos(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	getPromosRequestParam := GetPromosRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPromosRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPromosRequestRequired(getPromosRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPromosRequestConstraints(getPromosRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetPromos(r.Context(), businessIdParam, getPromosRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePromoOffers - Добавление товаров в акцию или изменение их цен
func (c *PromosAPIController) UpdatePromoOffers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updatePromoOffersRequestParam := UpdatePromoOffersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdatePromoOffersRequestRequired(updatePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdatePromoOffersRequestConstraints(updatePromoOffersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePromoOffers(r.Context(), businessIdParam, updatePromoOffersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
