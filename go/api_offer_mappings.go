// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OfferMappingsAPIController binds http requests to an api service and writes the service results to the http response
type OfferMappingsAPIController struct {
	service OfferMappingsAPIServicer
	errorHandler ErrorHandler
}

// OfferMappingsAPIOption for how the controller is set up.
type OfferMappingsAPIOption func(*OfferMappingsAPIController)

// WithOfferMappingsAPIErrorHandler inject ErrorHandler into controller
func WithOfferMappingsAPIErrorHandler(h ErrorHandler) OfferMappingsAPIOption {
	return func(c *OfferMappingsAPIController) {
		c.errorHandler = h
	}
}

// NewOfferMappingsAPIController creates a default api controller
func NewOfferMappingsAPIController(s OfferMappingsAPIServicer, opts ...OfferMappingsAPIOption) *OfferMappingsAPIController {
	controller := &OfferMappingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OfferMappingsAPIController
func (c *OfferMappingsAPIController) Routes() Routes {
	return Routes{
		"GetOfferMappingEntries": Route{
			strings.ToUpper("Get"),
			"/campaigns/{campaignId}/offer-mapping-entries",
			c.GetOfferMappingEntries,
		},
		"GetSuggestedOfferMappingEntries": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-mapping-entries/suggestions",
			c.GetSuggestedOfferMappingEntries,
		},
		"UpdateOfferMappingEntries": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/offer-mapping-entries/updates",
			c.UpdateOfferMappingEntries,
		},
	}
}

// GetOfferMappingEntries - Список товаров в каталоге
// Deprecated
func (c *OfferMappingsAPIController) GetOfferMappingEntries(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var offerIdParam []string
	if query.Has("offer_id") {
		offerIdParam = strings.Split(query.Get("offer_id"), ",")
	}
	var shopSkuParam []string
	if query.Has("shop_sku") {
		shopSkuParam = strings.Split(query.Get("shop_sku"), ",")
	}
	var mappingKindParam OfferMappingKindType
	if query.Has("mapping_kind") {
		param := OfferMappingKindType(query.Get("mapping_kind"))

		mappingKindParam = param
	} else {
	}
	var statusParam []OfferProcessingStatusType
	if query.Has("status") {
		paramSplits := strings.Split(query.Get("status"), ",")
		statusParam = make([]OfferProcessingStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOfferProcessingStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "status", Err: err}, nil)
				return
			}
			statusParam = append(statusParam, paramEnum)
		}
	}
	var availabilityParam []OfferAvailabilityStatusType
	if query.Has("availability") {
		paramSplits := strings.Split(query.Get("availability"), ",")
		availabilityParam = make([]OfferAvailabilityStatusType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewOfferAvailabilityStatusTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Param: "availability", Err: err}, nil)
				return
			}
			availabilityParam = append(availabilityParam, paramEnum)
		}
	}
	categoryIdParam, err := parseNumericArrayParameter[int32](
		query.Get("category_id"), ",", false,
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "category_id", Err: err}, nil)
		return
	}
	var vendorParam []string
	if query.Has("vendor") {
		vendorParam = strings.Split(query.Get("vendor"), ",")
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetOfferMappingEntries(r.Context(), campaignIdParam, offerIdParam, shopSkuParam, mappingKindParam, statusParam, availabilityParam, categoryIdParam, vendorParam, pageTokenParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSuggestedOfferMappingEntries - Рекомендованные карточки для товаров
// Deprecated
func (c *OfferMappingsAPIController) GetSuggestedOfferMappingEntries(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	getSuggestedOfferMappingEntriesRequestParam := GetSuggestedOfferMappingEntriesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSuggestedOfferMappingEntriesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingEntriesRequestRequired(getSuggestedOfferMappingEntriesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSuggestedOfferMappingEntriesRequestConstraints(getSuggestedOfferMappingEntriesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSuggestedOfferMappingEntries(r.Context(), campaignIdParam, getSuggestedOfferMappingEntriesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOfferMappingEntries - Добавление и редактирование товаров в каталоге
// Deprecated
func (c *OfferMappingsAPIController) UpdateOfferMappingEntries(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	updateOfferMappingEntryRequestParam := UpdateOfferMappingEntryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOfferMappingEntryRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOfferMappingEntryRequestRequired(updateOfferMappingEntryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOfferMappingEntryRequestConstraints(updateOfferMappingEntryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOfferMappingEntries(r.Context(), campaignIdParam, updateOfferMappingEntryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
