// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// ShipmentStatusType : Статус отгрузки:  * `OUTBOUND_CREATED` — формируется. * `OUTBOUND_READY_FOR_CONFIRMATION` — можно обрабатывать. * `OUTBOUND_CONFIRMED` — подтверждена и готова к отправке. * `OUTBOUND_SIGNED` — по ней подписан электронный акт приема-передачи. * `ACCEPTED` — принята в сортировочном центре или пункте приема. * `ACCEPTED_WITH_DISCREPANCIES` — принята с расхождениями. * `FINISHED` — завершена. * `ERROR` — отменена из-за ошибки. 
type ShipmentStatusType string

// List of ShipmentStatusType
const (
	OUTBOUND_CREATED ShipmentStatusType = "OUTBOUND_CREATED"
	OUTBOUND_READY_FOR_CONFIRMATION ShipmentStatusType = "OUTBOUND_READY_FOR_CONFIRMATION"
	OUTBOUND_CONFIRMED ShipmentStatusType = "OUTBOUND_CONFIRMED"
	OUTBOUND_SIGNED ShipmentStatusType = "OUTBOUND_SIGNED"
	FINISHED ShipmentStatusType = "FINISHED"
	ACCEPTED ShipmentStatusType = "ACCEPTED"
	ACCEPTED_WITH_DISCREPANCIES ShipmentStatusType = "ACCEPTED_WITH_DISCREPANCIES"
	ERROR ShipmentStatusType = "ERROR"
)

// AllowedShipmentStatusTypeEnumValues is all the allowed values of ShipmentStatusType enum
var AllowedShipmentStatusTypeEnumValues = []ShipmentStatusType{
	"OUTBOUND_CREATED",
	"OUTBOUND_READY_FOR_CONFIRMATION",
	"OUTBOUND_CONFIRMED",
	"OUTBOUND_SIGNED",
	"FINISHED",
	"ACCEPTED",
	"ACCEPTED_WITH_DISCREPANCIES",
	"ERROR",
}

// validShipmentStatusTypeEnumValue provides a map of ShipmentStatusTypes for fast verification of use input
var validShipmentStatusTypeEnumValues = map[ShipmentStatusType]struct{}{
	"OUTBOUND_CREATED": {},
	"OUTBOUND_READY_FOR_CONFIRMATION": {},
	"OUTBOUND_CONFIRMED": {},
	"OUTBOUND_SIGNED": {},
	"FINISHED": {},
	"ACCEPTED": {},
	"ACCEPTED_WITH_DISCREPANCIES": {},
	"ERROR": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentStatusType) IsValid() bool {
	_, ok := validShipmentStatusTypeEnumValues[v]
	return ok
}

// NewShipmentStatusTypeFromValue returns a pointer to a valid ShipmentStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentStatusTypeFromValue(v string) (ShipmentStatusType, error) {
	ev := ShipmentStatusType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ShipmentStatusType: valid values are %v", v, AllowedShipmentStatusTypeEnumValues)
}



// AssertShipmentStatusTypeRequired checks if the required fields are not zero-ed
func AssertShipmentStatusTypeRequired(obj ShipmentStatusType) error {
	return nil
}

// AssertShipmentStatusTypeConstraints checks if the values respects the defined constraints
func AssertShipmentStatusTypeConstraints(obj ShipmentStatusType) error {
	return nil
}
