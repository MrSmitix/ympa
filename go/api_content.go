// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContentAPIController binds http requests to an api service and writes the service results to the http response
type ContentAPIController struct {
	service ContentAPIServicer
	errorHandler ErrorHandler
}

// ContentAPIOption for how the controller is set up.
type ContentAPIOption func(*ContentAPIController)

// WithContentAPIErrorHandler inject ErrorHandler into controller
func WithContentAPIErrorHandler(h ErrorHandler) ContentAPIOption {
	return func(c *ContentAPIController) {
		c.errorHandler = h
	}
}

// NewContentAPIController creates a default api controller
func NewContentAPIController(s ContentAPIServicer, opts ...ContentAPIOption) *ContentAPIController {
	controller := &ContentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContentAPIController
func (c *ContentAPIController) Routes() Routes {
	return Routes{
		"GetCategoryContentParameters": Route{
			strings.ToUpper("Post"),
			"/category/{categoryId}/parameters",
			c.GetCategoryContentParameters,
		},
		"GetOfferCardsContentStatus": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-cards",
			c.GetOfferCardsContentStatus,
		},
		"UpdateOfferContent": Route{
			strings.ToUpper("Post"),
			"/businesses/{businessId}/offer-cards/update",
			c.UpdateOfferContent,
		},
	}
}

// GetCategoryContentParameters - Списки характеристик товаров по категориям
func (c *ContentAPIController) GetCategoryContentParameters(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	categoryIdParam, err := parseNumericParameter[int64](
		params["categoryId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "categoryId", Err: err}, nil)
		return
	}
	result, err := c.service.GetCategoryContentParameters(r.Context(), categoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOfferCardsContentStatus - Получение информации о заполненности карточек магазина
func (c *ContentAPIController) GetOfferCardsContentStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getOfferCardsContentStatusRequestParam := GetOfferCardsContentStatusRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOfferCardsContentStatusRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOfferCardsContentStatusRequestRequired(getOfferCardsContentStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOfferCardsContentStatusRequestConstraints(getOfferCardsContentStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOfferCardsContentStatus(r.Context(), businessIdParam, pageTokenParam, limitParam, getOfferCardsContentStatusRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateOfferContent - Редактирование категорийных характеристик товара
func (c *ContentAPIController) UpdateOfferContent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	businessIdParam, err := parseNumericParameter[int64](
		params["businessId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "businessId", Err: err}, nil)
		return
	}
	updateOfferContentRequestParam := UpdateOfferContentRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOfferContentRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOfferContentRequestRequired(updateOfferContentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOfferContentRequestConstraints(updateOfferContentRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateOfferContent(r.Context(), businessIdParam, updateOfferContentRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
