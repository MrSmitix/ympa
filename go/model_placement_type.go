// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// PlacementType : Модель, по которой работает магазин:  * `FBS` — FBS или Экспресс. * `FBY` — FBY. * `DBS` — DBS. 
type PlacementType string

// List of PlacementType
const (
	FBS PlacementType = "FBS"
	FBY PlacementType = "FBY"
	DBS PlacementType = "DBS"
)

// AllowedPlacementTypeEnumValues is all the allowed values of PlacementType enum
var AllowedPlacementTypeEnumValues = []PlacementType{
	"FBS",
	"FBY",
	"DBS",
}

// validPlacementTypeEnumValue provides a map of PlacementTypes for fast verification of use input
var validPlacementTypeEnumValues = map[PlacementType]struct{}{
	"FBS": {},
	"FBY": {},
	"DBS": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlacementType) IsValid() bool {
	_, ok := validPlacementTypeEnumValues[v]
	return ok
}

// NewPlacementTypeFromValue returns a pointer to a valid PlacementType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlacementTypeFromValue(v string) (PlacementType, error) {
	ev := PlacementType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for PlacementType: valid values are %v", v, AllowedPlacementTypeEnumValues)
}



// AssertPlacementTypeRequired checks if the required fields are not zero-ed
func AssertPlacementTypeRequired(obj PlacementType) error {
	return nil
}

// AssertPlacementTypeConstraints checks if the values respects the defined constraints
func AssertPlacementTypeConstraints(obj PlacementType) error {
	return nil
}
