// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// RefundStatusType : Cтатус возврата денег:  * `STARTED_BY_USER` — создан клиентом из личного кабинета.  * `REFUND_IN_PROGRESS` — ждет решение о возврате денег.  * `REFUNDED` — по возврату проведены все возвратные денежные транзакции.  * `FAILED` — невозможно провести возврат покупателю.  * `WAITING_FOR_DECISION` — ожидает решения.  * `DECISION_MADE` — по возврату принято решение.  * `REFUNDED_WITH_BONUSES` — возврат осуществлен баллами Плюса или промокодом.  * `REFUNDED_BY_SHOP` — магазин сделал самостоятельно возврат денег.  * `COMPLETE_WITHOUT_REFUND` — возврат денег не требуется.  * `CANCELLED` — возврат отменен. 
type RefundStatusType string

// List of RefundStatusType
const (
	STARTED_BY_USER RefundStatusType = "STARTED_BY_USER"
	REFUND_IN_PROGRESS RefundStatusType = "REFUND_IN_PROGRESS"
	REFUNDED RefundStatusType = "REFUNDED"
	FAILED RefundStatusType = "FAILED"
	WAITING_FOR_DECISION RefundStatusType = "WAITING_FOR_DECISION"
	DECISION_MADE RefundStatusType = "DECISION_MADE"
	REFUNDED_WITH_BONUSES RefundStatusType = "REFUNDED_WITH_BONUSES"
	REFUNDED_BY_SHOP RefundStatusType = "REFUNDED_BY_SHOP"
	CANCELLED RefundStatusType = "CANCELLED"
	COMPLETE_WITHOUT_REFUND RefundStatusType = "COMPLETE_WITHOUT_REFUND"
	UNKNOWN RefundStatusType = "UNKNOWN"
)

// AllowedRefundStatusTypeEnumValues is all the allowed values of RefundStatusType enum
var AllowedRefundStatusTypeEnumValues = []RefundStatusType{
	"STARTED_BY_USER",
	"REFUND_IN_PROGRESS",
	"REFUNDED",
	"FAILED",
	"WAITING_FOR_DECISION",
	"DECISION_MADE",
	"REFUNDED_WITH_BONUSES",
	"REFUNDED_BY_SHOP",
	"CANCELLED",
	"COMPLETE_WITHOUT_REFUND",
	"UNKNOWN",
}

// validRefundStatusTypeEnumValue provides a map of RefundStatusTypes for fast verification of use input
var validRefundStatusTypeEnumValues = map[RefundStatusType]struct{}{
	"STARTED_BY_USER": {},
	"REFUND_IN_PROGRESS": {},
	"REFUNDED": {},
	"FAILED": {},
	"WAITING_FOR_DECISION": {},
	"DECISION_MADE": {},
	"REFUNDED_WITH_BONUSES": {},
	"REFUNDED_BY_SHOP": {},
	"CANCELLED": {},
	"COMPLETE_WITHOUT_REFUND": {},
	"UNKNOWN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundStatusType) IsValid() bool {
	_, ok := validRefundStatusTypeEnumValues[v]
	return ok
}

// NewRefundStatusTypeFromValue returns a pointer to a valid RefundStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundStatusTypeFromValue(v string) (RefundStatusType, error) {
	ev := RefundStatusType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for RefundStatusType: valid values are %v", v, AllowedRefundStatusTypeEnumValues)
}



// AssertRefundStatusTypeRequired checks if the required fields are not zero-ed
func AssertRefundStatusTypeRequired(obj RefundStatusType) error {
	return nil
}

// AssertRefundStatusTypeConstraints checks if the values respects the defined constraints
func AssertRefundStatusTypeConstraints(obj RefundStatusType) error {
	return nil
}
