// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// ReturnInstanceStockType : Тип остатка на складе.
type ReturnInstanceStockType string

// List of ReturnInstanceStockType
const (
	FIT ReturnInstanceStockType = "FIT"
	DEFECT ReturnInstanceStockType = "DEFECT"
	ANOMALY ReturnInstanceStockType = "ANOMALY"
	SURPLUS ReturnInstanceStockType = "SURPLUS"
	EXPIRED ReturnInstanceStockType = "EXPIRED"
	MISGRADING ReturnInstanceStockType = "MISGRADING"
	UNDEFINED ReturnInstanceStockType = "UNDEFINED"
	INCORRECT_IMEI ReturnInstanceStockType = "INCORRECT_IMEI"
	INCORRECT_SERIAL_NUMBER ReturnInstanceStockType = "INCORRECT_SERIAL_NUMBER"
	INCORRECT_CIS ReturnInstanceStockType = "INCORRECT_CIS"
	PART_MISSING ReturnInstanceStockType = "PART_MISSING"
	NON_COMPLIENT ReturnInstanceStockType = "NON_COMPLIENT"
	NOT_ACCEPTABLE ReturnInstanceStockType = "NOT_ACCEPTABLE"
	SERVICE ReturnInstanceStockType = "SERVICE"
	MARKDOWN ReturnInstanceStockType = "MARKDOWN"
	DEMO ReturnInstanceStockType = "DEMO"
	REPAIR ReturnInstanceStockType = "REPAIR"
	FIRMWARE ReturnInstanceStockType = "FIRMWARE"
	UNKNOWN ReturnInstanceStockType = "UNKNOWN"
)

// AllowedReturnInstanceStockTypeEnumValues is all the allowed values of ReturnInstanceStockType enum
var AllowedReturnInstanceStockTypeEnumValues = []ReturnInstanceStockType{
	"FIT",
	"DEFECT",
	"ANOMALY",
	"SURPLUS",
	"EXPIRED",
	"MISGRADING",
	"UNDEFINED",
	"INCORRECT_IMEI",
	"INCORRECT_SERIAL_NUMBER",
	"INCORRECT_CIS",
	"PART_MISSING",
	"NON_COMPLIENT",
	"NOT_ACCEPTABLE",
	"SERVICE",
	"MARKDOWN",
	"DEMO",
	"REPAIR",
	"FIRMWARE",
	"UNKNOWN",
}

// validReturnInstanceStockTypeEnumValue provides a map of ReturnInstanceStockTypes for fast verification of use input
var validReturnInstanceStockTypeEnumValues = map[ReturnInstanceStockType]struct{}{
	"FIT": {},
	"DEFECT": {},
	"ANOMALY": {},
	"SURPLUS": {},
	"EXPIRED": {},
	"MISGRADING": {},
	"UNDEFINED": {},
	"INCORRECT_IMEI": {},
	"INCORRECT_SERIAL_NUMBER": {},
	"INCORRECT_CIS": {},
	"PART_MISSING": {},
	"NON_COMPLIENT": {},
	"NOT_ACCEPTABLE": {},
	"SERVICE": {},
	"MARKDOWN": {},
	"DEMO": {},
	"REPAIR": {},
	"FIRMWARE": {},
	"UNKNOWN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnInstanceStockType) IsValid() bool {
	_, ok := validReturnInstanceStockTypeEnumValues[v]
	return ok
}

// NewReturnInstanceStockTypeFromValue returns a pointer to a valid ReturnInstanceStockType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnInstanceStockTypeFromValue(v string) (ReturnInstanceStockType, error) {
	ev := ReturnInstanceStockType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ReturnInstanceStockType: valid values are %v", v, AllowedReturnInstanceStockTypeEnumValues)
}



// AssertReturnInstanceStockTypeRequired checks if the required fields are not zero-ed
func AssertReturnInstanceStockTypeRequired(obj ReturnInstanceStockType) error {
	return nil
}

// AssertReturnInstanceStockTypeConstraints checks if the values respects the defined constraints
func AssertReturnInstanceStockTypeConstraints(obj ReturnInstanceStockType) error {
	return nil
}
