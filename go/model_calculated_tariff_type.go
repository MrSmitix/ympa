// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// CalculatedTariffType : Услуга Маркета:  * `AGENCY_COMMISSION` — прием платежа покупателя.  * `PAYMENT_TRANSFER` — перевод платежа покупателя.  * `FEE` — размещение товара на Маркете.  * `DELIVERY_TO_CUSTOMER` — доставка покупателю.  * `CROSSREGIONAL_DELIVERY` — доставка в федеральный округ, город или населенный пункт.  * `EXPRESS_DELIVERY` — экспресс-доставка покупателю.  * `SORTING` — обработка заказа.  * `MIDDLE_MILE` — средняя миля.  Подробнее об услугах Маркета читайте [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/introduction/rates/index.html). 
type CalculatedTariffType string

// List of CalculatedTariffType
const (
	AGENCY_COMMISSION CalculatedTariffType = "AGENCY_COMMISSION"
	PAYMENT_TRANSFER CalculatedTariffType = "PAYMENT_TRANSFER"
	FEE CalculatedTariffType = "FEE"
	DELIVERY_TO_CUSTOMER CalculatedTariffType = "DELIVERY_TO_CUSTOMER"
	CROSSREGIONAL_DELIVERY CalculatedTariffType = "CROSSREGIONAL_DELIVERY"
	EXPRESS_DELIVERY CalculatedTariffType = "EXPRESS_DELIVERY"
	SORTING CalculatedTariffType = "SORTING"
	MIDDLE_MILE CalculatedTariffType = "MIDDLE_MILE"
)

// AllowedCalculatedTariffTypeEnumValues is all the allowed values of CalculatedTariffType enum
var AllowedCalculatedTariffTypeEnumValues = []CalculatedTariffType{
	"AGENCY_COMMISSION",
	"PAYMENT_TRANSFER",
	"FEE",
	"DELIVERY_TO_CUSTOMER",
	"CROSSREGIONAL_DELIVERY",
	"EXPRESS_DELIVERY",
	"SORTING",
	"MIDDLE_MILE",
}

// validCalculatedTariffTypeEnumValue provides a map of CalculatedTariffTypes for fast verification of use input
var validCalculatedTariffTypeEnumValues = map[CalculatedTariffType]struct{}{
	"AGENCY_COMMISSION": {},
	"PAYMENT_TRANSFER": {},
	"FEE": {},
	"DELIVERY_TO_CUSTOMER": {},
	"CROSSREGIONAL_DELIVERY": {},
	"EXPRESS_DELIVERY": {},
	"SORTING": {},
	"MIDDLE_MILE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalculatedTariffType) IsValid() bool {
	_, ok := validCalculatedTariffTypeEnumValues[v]
	return ok
}

// NewCalculatedTariffTypeFromValue returns a pointer to a valid CalculatedTariffType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalculatedTariffTypeFromValue(v string) (CalculatedTariffType, error) {
	ev := CalculatedTariffType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CalculatedTariffType: valid values are %v", v, AllowedCalculatedTariffTypeEnumValues)
}



// AssertCalculatedTariffTypeRequired checks if the required fields are not zero-ed
func AssertCalculatedTariffTypeRequired(obj CalculatedTariffType) error {
	return nil
}

// AssertCalculatedTariffTypeConstraints checks if the values respects the defined constraints
func AssertCalculatedTariffTypeConstraints(obj CalculatedTariffType) error {
	return nil
}
