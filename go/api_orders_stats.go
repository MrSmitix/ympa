// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OrdersStatsAPIController binds http requests to an api service and writes the service results to the http response
type OrdersStatsAPIController struct {
	service OrdersStatsAPIServicer
	errorHandler ErrorHandler
}

// OrdersStatsAPIOption for how the controller is set up.
type OrdersStatsAPIOption func(*OrdersStatsAPIController)

// WithOrdersStatsAPIErrorHandler inject ErrorHandler into controller
func WithOrdersStatsAPIErrorHandler(h ErrorHandler) OrdersStatsAPIOption {
	return func(c *OrdersStatsAPIController) {
		c.errorHandler = h
	}
}

// NewOrdersStatsAPIController creates a default api controller
func NewOrdersStatsAPIController(s OrdersStatsAPIServicer, opts ...OrdersStatsAPIOption) *OrdersStatsAPIController {
	controller := &OrdersStatsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OrdersStatsAPIController
func (c *OrdersStatsAPIController) Routes() Routes {
	return Routes{
		"GetOrdersStats": Route{
			strings.ToUpper("Post"),
			"/campaigns/{campaignId}/stats/orders",
			c.GetOrdersStats,
		},
	}
}

// GetOrdersStats - Детальная информация по заказам
func (c *OrdersStatsAPIController) GetOrdersStats(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	campaignIdParam, err := parseNumericParameter[int64](
		params["campaignId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "campaignId", Err: err}, nil)
		return
	}
	var pageTokenParam string
	if query.Has("page_token") {
		param := query.Get("page_token")

		pageTokenParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	getOrdersStatsRequestParam := GetOrdersStatsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOrdersStatsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOrdersStatsRequestRequired(getOrdersStatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOrdersStatsRequestConstraints(getOrdersStatsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetOrdersStats(r.Context(), campaignIdParam, pageTokenParam, limitParam, getOrdersStatsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
