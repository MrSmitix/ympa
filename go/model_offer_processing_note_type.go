// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"fmt"
)


// OfferProcessingNoteType : Тип причины, по которой товар не прошел модерацию:  * `ASSORTMENT` — товар производится в разных вариантах. Каждый из них нужно описать как отдельный товар (входной параметр `offer-mapping-entry` запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md) или строка в каталоге, если вы загружаете товары через кабинет продавца на Маркете). * `CANCELLED` — товар отозван с модерации по вашей инициативе. * `CONFLICTING_INFORMATION` _(ранее ошибочно `CONFLICTING`)_ — вы предоставили противоречивую информацию о товаре. Параметры, которые нужно исправить, указаны в параметре `payload`. * `DEPARTMENT_FROZEN` — правила размещения товаров в данной категории перерабатываются, поэтому товар пока не может пройти модерацию. * `INCORRECT_INFORMATION` — информация о товаре, которую вы предоставили, противоречит описанию от производителя. Параметры, которые нужно исправить, указаны в параметре `payload`. * `LEGAL_CONFLICT` — товар не прошел модерацию по юридическим причинам. Например, он официально не продается в России или у вас нет разрешения на его продажу. * `NEED_CLASSIFICATION_INFORMATION` — информации о товаре, которую вы предоставили, не хватает, чтобы отнести его к категории. Проверьте, что правильно указали название, категорию, производителя и страны производства товара, а также URL изображений или страниц с описанием, по которым можно идентифицировать товар. * `NEED_INFORMATION` — товар раньше не продавался в России и пока не размещается на Маркете. Для него можно создать карточку. Подробнее см. в разделе [Работа с карточкой товара](https://yandex.ru/support/marketplace/assortment/content/index.html) Справки Маркета для продавцов. * `NEED_PICTURES` — для идентификации товара нужны его изображения. Отправьте URL изображений товара в запросе [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md) или загрузите обновленный каталог через кабинет продавца на Маркете. * `NEED_VENDOR` — неверно указан производитель товара. * `NO_CATEGORY`, `NO_KNOWLEDGE` — товары из указанной категории пока не размещаются на Маркете. Если категория появится, товар будет снова отправлен на модерацию. * `NO_PARAMETERS_IN_SHOP_TITLE` — товар производится в разных вариантах, и из указанного названия непонятно, о каком идет речь. Параметры, которые нужно добавить в название товара, указаны в параметре `payload`. * `NO_SIZE_MEASURE` — для этого товара нужна размерная сетка. Отправьте ее в службу поддержки или вашему менеджеру. Требования к размерной сетке указаны в параметре `payload`. * `UNKNOWN` — товар не прошел модерацию по другой причине. Обратитесь в службу поддержки или к вашему менеджеру. 
type OfferProcessingNoteType string

// List of OfferProcessingNoteType
const (
	ASSORTMENT OfferProcessingNoteType = "ASSORTMENT"
	CANCELLED OfferProcessingNoteType = "CANCELLED"
	CONFLICTING_INFORMATION OfferProcessingNoteType = "CONFLICTING_INFORMATION"
	OTHER OfferProcessingNoteType = "OTHER"
	DEPARTMENT_FROZEN OfferProcessingNoteType = "DEPARTMENT_FROZEN"
	INCORRECT_INFORMATION OfferProcessingNoteType = "INCORRECT_INFORMATION"
	LEGAL_CONFLICT OfferProcessingNoteType = "LEGAL_CONFLICT"
	NEED_CLASSIFICATION_INFORMATION OfferProcessingNoteType = "NEED_CLASSIFICATION_INFORMATION"
	NEED_INFORMATION OfferProcessingNoteType = "NEED_INFORMATION"
	NEED_PICTURES OfferProcessingNoteType = "NEED_PICTURES"
	NEED_VENDOR OfferProcessingNoteType = "NEED_VENDOR"
	NO_CATEGORY OfferProcessingNoteType = "NO_CATEGORY"
	NO_KNOWLEDGE OfferProcessingNoteType = "NO_KNOWLEDGE"
	NO_PARAMETERS_IN_SHOP_TITLE OfferProcessingNoteType = "NO_PARAMETERS_IN_SHOP_TITLE"
	NO_SIZE_MEASURE OfferProcessingNoteType = "NO_SIZE_MEASURE"
	SAMPLE_LINE OfferProcessingNoteType = "SAMPLE_LINE"
)

// AllowedOfferProcessingNoteTypeEnumValues is all the allowed values of OfferProcessingNoteType enum
var AllowedOfferProcessingNoteTypeEnumValues = []OfferProcessingNoteType{
	"ASSORTMENT",
	"CANCELLED",
	"CONFLICTING_INFORMATION",
	"OTHER",
	"DEPARTMENT_FROZEN",
	"INCORRECT_INFORMATION",
	"LEGAL_CONFLICT",
	"NEED_CLASSIFICATION_INFORMATION",
	"NEED_INFORMATION",
	"NEED_PICTURES",
	"NEED_VENDOR",
	"NO_CATEGORY",
	"NO_KNOWLEDGE",
	"NO_PARAMETERS_IN_SHOP_TITLE",
	"NO_SIZE_MEASURE",
	"SAMPLE_LINE",
}

// validOfferProcessingNoteTypeEnumValue provides a map of OfferProcessingNoteTypes for fast verification of use input
var validOfferProcessingNoteTypeEnumValues = map[OfferProcessingNoteType]struct{}{
	"ASSORTMENT": {},
	"CANCELLED": {},
	"CONFLICTING_INFORMATION": {},
	"OTHER": {},
	"DEPARTMENT_FROZEN": {},
	"INCORRECT_INFORMATION": {},
	"LEGAL_CONFLICT": {},
	"NEED_CLASSIFICATION_INFORMATION": {},
	"NEED_INFORMATION": {},
	"NEED_PICTURES": {},
	"NEED_VENDOR": {},
	"NO_CATEGORY": {},
	"NO_KNOWLEDGE": {},
	"NO_PARAMETERS_IN_SHOP_TITLE": {},
	"NO_SIZE_MEASURE": {},
	"SAMPLE_LINE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OfferProcessingNoteType) IsValid() bool {
	_, ok := validOfferProcessingNoteTypeEnumValues[v]
	return ok
}

// NewOfferProcessingNoteTypeFromValue returns a pointer to a valid OfferProcessingNoteType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOfferProcessingNoteTypeFromValue(v string) (OfferProcessingNoteType, error) {
	ev := OfferProcessingNoteType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for OfferProcessingNoteType: valid values are %v", v, AllowedOfferProcessingNoteTypeEnumValues)
}



// AssertOfferProcessingNoteTypeRequired checks if the required fields are not zero-ed
func AssertOfferProcessingNoteTypeRequired(obj OfferProcessingNoteType) error {
	return nil
}

// AssertOfferProcessingNoteTypeConstraints checks if the values respects the defined constraints
func AssertOfferProcessingNoteTypeConstraints(obj OfferProcessingNoteType) error {
	return nil
}
