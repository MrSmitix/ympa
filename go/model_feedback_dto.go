// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API version: LATEST
 */

package ympa_go_server


import (
	"time"
)



// FeedbackDto - Отзыв пользователя Яндекс Маркета об указанном магазине.
type FeedbackDto struct {

	// Идентификатор отзыва.
	Id int64 `json:"id,omitempty"`

	// Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
	CreatedAt time.Time `json:"createdAt,omitempty"`

	// Комментарий автора отзыва.
	Text string `json:"text,omitempty"`

	State FeedbackStateType `json:"state,omitempty"`

	Author FeedbackAuthorDto `json:"author,omitempty"`

	// Достоинства магазина, описанные в отзыве.
	Pro string `json:"pro,omitempty"`

	// Недостатки магазина, описанные в отзыве.
	Contra string `json:"contra,omitempty"`

	// Переписка автора отзыва с магазином.
	Comments []FeedbackCommentDto `json:"comments"`

	Shop FeedbackShopDto `json:"shop,omitempty"`

	// Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
	Resolved bool `json:"resolved,omitempty"`

	// {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
	Verified bool `json:"verified,omitempty"`

	// Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
	Recommend bool `json:"recommend,omitempty"`

	Grades FeedbackGradesDto `json:"grades,omitempty"`

	Order FeedbackOrderDto `json:"order,omitempty"`
}

// AssertFeedbackDtoRequired checks if the required fields are not zero-ed
func AssertFeedbackDtoRequired(obj FeedbackDto) error {
	elements := map[string]interface{}{
		"comments": obj.Comments,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertFeedbackAuthorDtoRequired(obj.Author); err != nil {
		return err
	}
	for _, el := range obj.Comments {
		if err := AssertFeedbackCommentDtoRequired(el); err != nil {
			return err
		}
	}
	if err := AssertFeedbackShopDtoRequired(obj.Shop); err != nil {
		return err
	}
	if err := AssertFeedbackGradesDtoRequired(obj.Grades); err != nil {
		return err
	}
	if err := AssertFeedbackOrderDtoRequired(obj.Order); err != nil {
		return err
	}
	return nil
}

// AssertFeedbackDtoConstraints checks if the values respects the defined constraints
func AssertFeedbackDtoConstraints(obj FeedbackDto) error {
	if err := AssertFeedbackAuthorDtoConstraints(obj.Author); err != nil {
		return err
	}
	for _, el := range obj.Comments {
		if err := AssertFeedbackCommentDtoConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertFeedbackShopDtoConstraints(obj.Shop); err != nil {
		return err
	}
	if err := AssertFeedbackGradesDtoConstraints(obj.Grades); err != nil {
		return err
	}
	if err := AssertFeedbackOrderDtoConstraints(obj.Order); err != nil {
		return err
	}
	return nil
}
