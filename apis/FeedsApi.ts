// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiLockedErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    EmptyApiResponse,
    FeedIndexLogsStatusType,
    GetFeedIndexLogsResponse,
    GetFeedResponse,
    GetFeedsResponse,
    SetFeedParamsRequest,
} from '../models';

export interface GetFeedRequest {
    campaignId: number;
    feedId: number;
}

export interface GetFeedIndexLogsRequest {
    campaignId: number;
    feedId: number;
    limit?: number;
    publishedTimeFrom?: string;
    publishedTimeTo?: string;
    status?: FeedIndexLogsStatusType;
}

export interface GetFeedsRequest {
    campaignId: number;
}

export interface RefreshFeedRequest {
    campaignId: number;
    feedId: number;
}

export interface SetFeedParamsRequest {
    campaignId: number;
    feedId: number;
    setFeedParamsRequest: SetFeedParamsRequest;
}

/**
 * no description
 */
export class FeedsApi extends BaseAPI {

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Информация о прайс-листе
     */
    getFeed({ campaignId, feedId }: GetFeedRequest): Observable<GetFeedResponse>
    getFeed({ campaignId, feedId }: GetFeedRequest, opts?: OperationOpts): Observable<AjaxResponse<GetFeedResponse>>
    getFeed({ campaignId, feedId }: GetFeedRequest, opts?: OperationOpts): Observable<GetFeedResponse | AjaxResponse<GetFeedResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getFeed');
        throwIfNullOrUndefined(feedId, 'feedId', 'getFeed');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetFeedResponse>({
            url: '/campaigns/{campaignId}/feeds/{feedId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{feedId}', encodeURI(feedId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отчет по индексации прайс-листа
     */
    getFeedIndexLogs({ campaignId, feedId, limit, publishedTimeFrom, publishedTimeTo, status }: GetFeedIndexLogsRequest): Observable<GetFeedIndexLogsResponse>
    getFeedIndexLogs({ campaignId, feedId, limit, publishedTimeFrom, publishedTimeTo, status }: GetFeedIndexLogsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetFeedIndexLogsResponse>>
    getFeedIndexLogs({ campaignId, feedId, limit, publishedTimeFrom, publishedTimeTo, status }: GetFeedIndexLogsRequest, opts?: OperationOpts): Observable<GetFeedIndexLogsResponse | AjaxResponse<GetFeedIndexLogsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getFeedIndexLogs');
        throwIfNullOrUndefined(feedId, 'feedId', 'getFeedIndexLogs');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (publishedTimeFrom != null) { query['published_time_from'] = (publishedTimeFrom as any).toISOString(); }
        if (publishedTimeTo != null) { query['published_time_to'] = (publishedTimeTo as any).toISOString(); }
        if (status != null) { query['status'] = status; }

        return this.request<GetFeedIndexLogsResponse>({
            url: '/campaigns/{campaignId}/feeds/{feedId}/index-logs'.replace('{campaignId}', encodeURI(campaignId)).replace('{feedId}', encodeURI(feedId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Список прайс-листов магазина
     */
    getFeeds({ campaignId }: GetFeedsRequest): Observable<GetFeedsResponse>
    getFeeds({ campaignId }: GetFeedsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetFeedsResponse>>
    getFeeds({ campaignId }: GetFeedsRequest, opts?: OperationOpts): Observable<GetFeedsResponse | AjaxResponse<GetFeedsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getFeeds');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetFeedsResponse>({
            url: '/campaigns/{campaignId}/feeds'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * Сообщить, что прайс-лист обновился
     */
    refreshFeed({ campaignId, feedId }: RefreshFeedRequest): Observable<EmptyApiResponse>
    refreshFeed({ campaignId, feedId }: RefreshFeedRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    refreshFeed({ campaignId, feedId }: RefreshFeedRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'refreshFeed');
        throwIfNullOrUndefined(feedId, 'feedId', 'refreshFeed');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/feeds/{feedId}/refresh'.replace('{campaignId}', encodeURI(campaignId)).replace('{feedId}', encodeURI(feedId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * Изменение параметров прайс-листа
     */
    setFeedParams({ campaignId, feedId, setFeedParamsRequest }: SetFeedParamsRequest): Observable<EmptyApiResponse>
    setFeedParams({ campaignId, feedId, setFeedParamsRequest }: SetFeedParamsRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    setFeedParams({ campaignId, feedId, setFeedParamsRequest }: SetFeedParamsRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setFeedParams');
        throwIfNullOrUndefined(feedId, 'feedId', 'setFeedParams');
        throwIfNullOrUndefined(setFeedParamsRequest, 'setFeedParamsRequest', 'setFeedParams');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/feeds/{feedId}/params'.replace('{campaignId}', encodeURI(campaignId)).replace('{feedId}', encodeURI(feedId)),
            method: 'POST',
            headers,
            body: setFeedParamsRequest,
        }, opts?.responseOpts);
    };

}
