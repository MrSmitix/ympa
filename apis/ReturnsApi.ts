// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    EmptyApiResponse,
    GetReturnResponse,
    GetReturnsResponse,
    RefundStatusType,
    ReturnType,
    SetReturnDecisionRequest,
} from '../models';

export interface GetReturnRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnApplicationRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnPhotoRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    itemId: number;
    imageHash: string;
}

export interface GetReturnsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    orderIds?: Array<number>;
    statuses?: Array<RefundStatusType>;
    type?: ReturnType;
    fromDate?: string;
    toDate?: string;
    fromDate2?: string;
    toDate2?: string;
}

export interface SetReturnDecisionRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    setReturnDecisionRequest: SetReturnDecisionRequest;
}

export interface SubmitReturnDecisionRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

/**
 * no description
 */
export class ReturnsApi extends BaseAPI {

    /**
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Информация о невыкупе или возврате
     */
    getReturn({ campaignId, orderId, returnId }: GetReturnRequest): Observable<GetReturnResponse>
    getReturn({ campaignId, orderId, returnId }: GetReturnRequest, opts?: OperationOpts): Observable<AjaxResponse<GetReturnResponse>>
    getReturn({ campaignId, orderId, returnId }: GetReturnRequest, opts?: OperationOpts): Observable<GetReturnResponse | AjaxResponse<GetReturnResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getReturn');
        throwIfNullOrUndefined(orderId, 'orderId', 'getReturn');
        throwIfNullOrUndefined(returnId, 'returnId', 'getReturn');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetReturnResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)).replace('{returnId}', encodeURI(returnId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение заявления на возврат
     */
    getReturnApplication({ campaignId, orderId, returnId }: GetReturnApplicationRequest): Observable<Blob>
    getReturnApplication({ campaignId, orderId, returnId }: GetReturnApplicationRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    getReturnApplication({ campaignId, orderId, returnId }: GetReturnApplicationRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getReturnApplication');
        throwIfNullOrUndefined(orderId, 'orderId', 'getReturnApplication');
        throwIfNullOrUndefined(returnId, 'returnId', 'getReturnApplication');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)).replace('{returnId}', encodeURI(returnId)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение фотографии возврата
     */
    getReturnPhoto({ campaignId, orderId, returnId, itemId, imageHash }: GetReturnPhotoRequest): Observable<Blob>
    getReturnPhoto({ campaignId, orderId, returnId, itemId, imageHash }: GetReturnPhotoRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    getReturnPhoto({ campaignId, orderId, returnId, itemId, imageHash }: GetReturnPhotoRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getReturnPhoto');
        throwIfNullOrUndefined(orderId, 'orderId', 'getReturnPhoto');
        throwIfNullOrUndefined(returnId, 'returnId', 'getReturnPhoto');
        throwIfNullOrUndefined(itemId, 'itemId', 'getReturnPhoto');
        throwIfNullOrUndefined(imageHash, 'imageHash', 'getReturnPhoto');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)).replace('{returnId}', encodeURI(returnId)).replace('{itemId}', encodeURI(itemId)).replace('{imageHash}', encodeURI(imageHash)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Список невыкупов и возвратов
     */
    getReturns({ campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2 }: GetReturnsRequest): Observable<GetReturnsResponse>
    getReturns({ campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2 }: GetReturnsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetReturnsResponse>>
    getReturns({ campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2 }: GetReturnsRequest, opts?: OperationOpts): Observable<GetReturnsResponse | AjaxResponse<GetReturnsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getReturns');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }
        if (orderIds != null) { query['orderIds'] = orderIds.join(COLLECTION_FORMATS['csv']); }
        if (statuses != null) { query['statuses'] = statuses.join(COLLECTION_FORMATS['csv']); }
        if (type != null) { query['type'] = type; }
        if (fromDate != null) { query['fromDate'] = (fromDate as any).toISOString().split('T')[0]; }
        if (toDate != null) { query['toDate'] = (toDate as any).toISOString().split('T')[0]; }
        if (fromDate2 != null) { query['from_date'] = (fromDate2 as any).toISOString().split('T')[0]; }
        if (toDate2 != null) { query['to_date'] = (toDate2 as any).toISOString().split('T')[0]; }

        return this.request<GetReturnsResponse>({
            url: '/campaigns/{campaignId}/returns'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Принятие или изменение решения по возврату
     */
    setReturnDecision({ campaignId, orderId, returnId, setReturnDecisionRequest }: SetReturnDecisionRequest): Observable<EmptyApiResponse>
    setReturnDecision({ campaignId, orderId, returnId, setReturnDecisionRequest }: SetReturnDecisionRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    setReturnDecision({ campaignId, orderId, returnId, setReturnDecisionRequest }: SetReturnDecisionRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setReturnDecision');
        throwIfNullOrUndefined(orderId, 'orderId', 'setReturnDecision');
        throwIfNullOrUndefined(returnId, 'returnId', 'setReturnDecision');
        throwIfNullOrUndefined(setReturnDecisionRequest, 'setReturnDecisionRequest', 'setReturnDecision');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)).replace('{returnId}', encodeURI(returnId)),
            method: 'POST',
            headers,
            body: setReturnDecisionRequest,
        }, opts?.responseOpts);
    };

    /**
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Подтверждение решения по возврату
     */
    submitReturnDecision({ campaignId, orderId, returnId }: SubmitReturnDecisionRequest): Observable<EmptyApiResponse>
    submitReturnDecision({ campaignId, orderId, returnId }: SubmitReturnDecisionRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    submitReturnDecision({ campaignId, orderId, returnId }: SubmitReturnDecisionRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'submitReturnDecision');
        throwIfNullOrUndefined(orderId, 'orderId', 'submitReturnDecision');
        throwIfNullOrUndefined(returnId, 'returnId', 'submitReturnDecision');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)).replace('{returnId}', encodeURI(returnId)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

}
