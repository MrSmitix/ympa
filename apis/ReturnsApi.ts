/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  EmptyApiResponse,
  GetReturnResponse,
  GetReturnsResponse,
  RefundStatusType,
  ReturnType,
  SetReturnDecisionRequest,
} from '../models/index';
import {
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    GetReturnResponseFromJSON,
    GetReturnResponseToJSON,
    GetReturnsResponseFromJSON,
    GetReturnsResponseToJSON,
    RefundStatusTypeFromJSON,
    RefundStatusTypeToJSON,
    ReturnTypeFromJSON,
    ReturnTypeToJSON,
    SetReturnDecisionRequestFromJSON,
    SetReturnDecisionRequestToJSON,
} from '../models/index';

export interface GetReturnRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnApplicationRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnPhotoRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    itemId: number;
    imageHash: string;
}

export interface GetReturnsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    orderIds?: Array<number>;
    statuses?: Array<RefundStatusType>;
    type?: ReturnType;
    fromDate?: Date;
    toDate?: Date;
    fromDate2?: Date;
    toDate2?: Date;
}

export interface SetReturnDecisionOperationRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    setReturnDecisionRequest: SetReturnDecisionRequest;
}

export interface SubmitReturnDecisionRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

/**
 * 
 */
export class ReturnsApi extends runtime.BaseAPI {

    /**
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Информация о невыкупе или возврате
     */
    async getReturnRaw(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReturnResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturn().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getReturn().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling getReturn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReturnResponseFromJSON(jsonValue));
    }

    /**
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Информация о невыкупе или возврате
     */
    async getReturn(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReturnResponse> {
        const response = await this.getReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение заявления на возврат
     */
    async getReturnApplicationRaw(requestParameters: GetReturnApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturnApplication().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getReturnApplication().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling getReturnApplication().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение заявления на возврат
     */
    async getReturnApplication(requestParameters: GetReturnApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getReturnApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение фотографии возврата
     */
    async getReturnPhotoRaw(requestParameters: GetReturnPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['imageHash'] == null) {
            throw new runtime.RequiredError(
                'imageHash',
                'Required parameter "imageHash" was null or undefined when calling getReturnPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"imageHash"}}`, encodeURIComponent(String(requestParameters['imageHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение фотографии возврата
     */
    async getReturnPhoto(requestParameters: GetReturnPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getReturnPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Список невыкупов и возвратов
     */
    async getReturnsRaw(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReturnsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturns().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orderIds'] != null) {
            queryParameters['orderIds'] = requestParameters['orderIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['statuses'] != null) {
            queryParameters['statuses'] = requestParameters['statuses']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['fromDate2'] != null) {
            queryParameters['from_date'] = (requestParameters['fromDate2'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate2'] != null) {
            queryParameters['to_date'] = (requestParameters['toDate2'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/returns`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReturnsResponseFromJSON(jsonValue));
    }

    /**
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Список невыкупов и возвратов
     */
    async getReturns(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReturnsResponse> {
        const response = await this.getReturnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Принятие или изменение решения по возврату
     */
    async setReturnDecisionRaw(requestParameters: SetReturnDecisionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling setReturnDecision().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling setReturnDecision().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling setReturnDecision().'
            );
        }

        if (requestParameters['setReturnDecisionRequest'] == null) {
            throw new runtime.RequiredError(
                'setReturnDecisionRequest',
                'Required parameter "setReturnDecisionRequest" was null or undefined when calling setReturnDecision().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetReturnDecisionRequestToJSON(requestParameters['setReturnDecisionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Принятие или изменение решения по возврату
     */
    async setReturnDecision(requestParameters: SetReturnDecisionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.setReturnDecisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Подтверждение решения по возврату
     */
    async submitReturnDecisionRaw(requestParameters: SubmitReturnDecisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling submitReturnDecision().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling submitReturnDecision().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling submitReturnDecision().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Подтверждение решения по возврату
     */
    async submitReturnDecision(requestParameters: SubmitReturnDecisionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.submitReturnDecisionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
