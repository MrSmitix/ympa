// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    GetRegionWithChildrenResponse,
    GetRegionsResponse,
} from '../models';

export interface SearchRegionChildrenRequest {
    regionId: number;
    page?: number;
    pageSize?: number;
}

export interface SearchRegionsByIdRequest {
    regionId: number;
}

export interface SearchRegionsByNameRequest {
    name: string;
    pageToken?: string;
    limit?: number;
}

/**
 * no description
 */
export class RegionsApi extends BaseAPI {

    /**
     * Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Информация о дочерних регионах
     */
    searchRegionChildren({ regionId, page, pageSize }: SearchRegionChildrenRequest): Observable<GetRegionWithChildrenResponse>
    searchRegionChildren({ regionId, page, pageSize }: SearchRegionChildrenRequest, opts?: OperationOpts): Observable<AjaxResponse<GetRegionWithChildrenResponse>>
    searchRegionChildren({ regionId, page, pageSize }: SearchRegionChildrenRequest, opts?: OperationOpts): Observable<GetRegionWithChildrenResponse | AjaxResponse<GetRegionWithChildrenResponse>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'searchRegionChildren');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<GetRegionWithChildrenResponse>({
            url: '/regions/{regionId}/children'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Информация о регионе
     */
    searchRegionsById({ regionId }: SearchRegionsByIdRequest): Observable<GetRegionsResponse>
    searchRegionsById({ regionId }: SearchRegionsByIdRequest, opts?: OperationOpts): Observable<AjaxResponse<GetRegionsResponse>>
    searchRegionsById({ regionId }: SearchRegionsByIdRequest, opts?: OperationOpts): Observable<GetRegionsResponse | AjaxResponse<GetRegionsResponse>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'searchRegionsById');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetRegionsResponse>({
            url: '/regions/{regionId}'.replace('{regionId}', encodeURI(regionId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Поиск регионов по их имени
     */
    searchRegionsByName({ name, pageToken, limit }: SearchRegionsByNameRequest): Observable<GetRegionsResponse>
    searchRegionsByName({ name, pageToken, limit }: SearchRegionsByNameRequest, opts?: OperationOpts): Observable<AjaxResponse<GetRegionsResponse>>
    searchRegionsByName({ name, pageToken, limit }: SearchRegionsByNameRequest, opts?: OperationOpts): Observable<GetRegionsResponse | AjaxResponse<GetRegionsResponse>> {
        throwIfNullOrUndefined(name, 'name', 'searchRegionsByName');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'name': name,
        };

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetRegionsResponse>({
            url: '/regions',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
