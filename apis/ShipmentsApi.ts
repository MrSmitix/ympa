// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    ConfirmShipmentRequest,
    EmptyApiResponse,
    GetShipmentOrdersInfoResponse,
    GetShipmentResponse,
    SearchShipmentsRequest,
    SearchShipmentsResponse,
    SetShipmentPalletsCountRequest,
    ShipmentPalletLabelPageFormatType,
    TransferOrdersFromShipmentRequest,
} from '../models';

export interface ConfirmShipmentRequest {
    campaignId: number;
    shipmentId: number;
    confirmShipmentRequest?: ConfirmShipmentRequest;
}

export interface DownloadShipmentActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentDiscrepancyActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentInboundActRequest {
    campaignId: number;
    shipmentId: number;
}

export interface DownloadShipmentPalletLabelsRequest {
    campaignId: number;
    shipmentId: number;
    format?: ShipmentPalletLabelPageFormatType;
}

export interface DownloadShipmentReceptionTransferActRequest {
    campaignId: number;
    warehouseId?: number;
}

export interface DownloadShipmentTransportationWaybillRequest {
    campaignId: number;
    shipmentId: number;
}

export interface GetShipmentRequest {
    campaignId: number;
    shipmentId: number;
    cancelledOrders?: boolean;
}

export interface GetShipmentOrdersInfoRequest {
    campaignId: number;
    shipmentId: number;
}

export interface SearchShipmentsRequest {
    campaignId: number;
    searchShipmentsRequest: SearchShipmentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface SetShipmentPalletsCountRequest {
    campaignId: number;
    shipmentId: number;
    setShipmentPalletsCountRequest: SetShipmentPalletsCountRequest;
}

export interface TransferOrdersFromShipmentRequest {
    campaignId: number;
    shipmentId: number;
    transferOrdersFromShipmentRequest: TransferOrdersFromShipmentRequest;
}

/**
 * no description
 */
export class ShipmentsApi extends BaseAPI {

    /**
     * Подтверждает отгрузку товаров в сортировочный центр или пункт приема заказов. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Подтверждение отгрузки
     */
    confirmShipment({ campaignId, shipmentId, confirmShipmentRequest }: ConfirmShipmentRequest): Observable<EmptyApiResponse>
    confirmShipment({ campaignId, shipmentId, confirmShipmentRequest }: ConfirmShipmentRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    confirmShipment({ campaignId, shipmentId, confirmShipmentRequest }: ConfirmShipmentRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'confirmShipment');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'confirmShipment');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'POST',
            headers,
            body: confirmShipmentRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам Яндекс Go, подготавливать акт приема‑передачи не нужно.  {% endnote %}  Запрос формирует акт приема-передачи заказов, входящих в отгрузку, и возвращает акт в формате PDF. В акте содержатся собранные и готовые к отправке заказы.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                         | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Дата                                                      | Дата запроса.                                                                                                                                                                                                                                                        | | Отправитель                                               | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                               | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                         | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика)       | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                      | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Вес                                                       | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                           | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Получение акта приема-передачи
     */
    downloadShipmentAct({ campaignId, shipmentId }: DownloadShipmentActRequest): Observable<Blob>
    downloadShipmentAct({ campaignId, shipmentId }: DownloadShipmentActRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadShipmentAct({ campaignId, shipmentId }: DownloadShipmentActRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'downloadShipmentAct');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'downloadShipmentAct');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Возвращает акт расхождений для заданной отгрузки. |**⚙️ Лимит:** 200 запросов в час| |-| 
     * Получение акта расхождений
     */
    downloadShipmentDiscrepancyAct({ campaignId, shipmentId }: DownloadShipmentDiscrepancyActRequest): Observable<Blob>
    downloadShipmentDiscrepancyAct({ campaignId, shipmentId }: DownloadShipmentDiscrepancyActRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadShipmentDiscrepancyAct({ campaignId, shipmentId }: DownloadShipmentDiscrepancyActRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'downloadShipmentDiscrepancyAct');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'downloadShipmentDiscrepancyAct');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Возвращает фактический акт приема-передачи для заданной отгрузки.  Такой акт становится доступен спустя несколько часов после завершения отгрузки. Он может понадобиться, если после отгрузки обнаружатся расхождения.  |**⚙️ Лимит:** 200 запросов в час| |-| 
     * Получение фактического акта приема-передачи
     */
    downloadShipmentInboundAct({ campaignId, shipmentId }: DownloadShipmentInboundActRequest): Observable<Blob>
    downloadShipmentInboundAct({ campaignId, shipmentId }: DownloadShipmentInboundActRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadShipmentInboundAct({ campaignId, shipmentId }: DownloadShipmentInboundActRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'downloadShipmentInboundAct');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'downloadShipmentInboundAct');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * PDF-файл с ярлыками на каждый короб или палету в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Распечатайте по несколько копий каждого ярлыка: на одну тару нужно наклеить минимум 2 ярлыка с разных сторон.  Количество упаковок в отгрузке задается в запросе [PUT campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets](../../reference/shipments/setShipmentPalletsCount.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
     * Ярлыки для доверительной приемки (FBS)
     */
    downloadShipmentPalletLabels({ campaignId, shipmentId, format }: DownloadShipmentPalletLabelsRequest): Observable<Blob>
    downloadShipmentPalletLabels({ campaignId, shipmentId, format }: DownloadShipmentPalletLabelsRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadShipmentPalletLabels({ campaignId, shipmentId, format }: DownloadShipmentPalletLabelsRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'downloadShipmentPalletLabels');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'downloadShipmentPalletLabels');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
            query,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Запрос подтверждает ближайшую отгрузку и возвращает акт приема-передачи в формате PDF.  {% note warning \"Экспресс‑доставка\" %}  Если ваш магазин подключен к экспресс‑доставке и вы отгружаете заказы курьерам [Яндекс Go](https://go.yandex/), подготавливать акт приема‑передачи не нужно.  {% endnote %}  В акт входят собранные и готовые к отправке заказы, которые отгружаются в сортировочный центр или пункт приема или курьерам Маркета.  При формировании акта Маркет автоматически находит и подставляет в шаблон следующие данные:  {% cut \"Данные, из которых Маркет формирует акт\" %}  | **Данные в акте**                                   | **Описание**                                                                                                                                                                                                                                                         | | --------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Отправитель                                         | Название вашего юридического лица, указанное в кабинете продавца на Маркете.                                                                                                                                                                                         | | Исполнитель                                         | Название юридического лица сортировочного центра или службы доставки.                                                                                                                                                                                                | | № отправления в системе заказчика                   | Ваш идентификатор заказа, который вы указали в ответе на запрос [POST order/accept](../../pushapi/reference/orderAccept.md) от Маркета.                                                                                                                              | | № отправления в системе исполнителя (субподрядчика) | Идентификатор заказа на Маркете, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md).                                                                                                                             | | Объявленная ценность                                | Общая сумма заказа без учета стоимости доставки, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                       | | Стоимость всех товаров в заказе                     | Стоимость всех заказанных товаров.                                                                                                                                                                                                                                   | | Вес                                                 | Масса брутто грузового места (суммарная масса упаковки и содержимого), как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md). | | Количество мест                                     | Количество грузовых мест в заказе, как в выходных данных запроса [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).                                     |  {% endcut %}  Остальные поля нужно заполнить самостоятельно в распечатанном акте. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Подтверждение ближайшей отгрузки и получение акта приема-передачи для нее
     */
    downloadShipmentReceptionTransferAct({ campaignId, warehouseId }: DownloadShipmentReceptionTransferActRequest): Observable<Blob>
    downloadShipmentReceptionTransferAct({ campaignId, warehouseId }: DownloadShipmentReceptionTransferActRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadShipmentReceptionTransferAct({ campaignId, warehouseId }: DownloadShipmentReceptionTransferActRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'downloadShipmentReceptionTransferAct');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (warehouseId != null) { query['warehouse_id'] = warehouseId; }

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/shipments/reception-transfer-act'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Возвращает транспортную накладную для заданной отгрузки.  Транспортная накладная понадобится, если вы отгружаете товары непосредственно со своего склада. [Подробно об этом способе отгрузки](https://yandex.ru/support/marketplace/orders/fbs/settings/shipment.html#at-your-warehouse)  |**⚙️ Лимит:** 200 запросов в час| |-| 
     * Получение транспортной накладной
     */
    downloadShipmentTransportationWaybill({ campaignId, shipmentId }: DownloadShipmentTransportationWaybillRequest): Observable<Blob>
    downloadShipmentTransportationWaybill({ campaignId, shipmentId }: DownloadShipmentTransportationWaybillRequest, opts?: OperationOpts): Observable<AjaxResponse<Blob>>
    downloadShipmentTransportationWaybill({ campaignId, shipmentId }: DownloadShipmentTransportationWaybillRequest, opts?: OperationOpts): Observable<Blob | AjaxResponse<Blob>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'downloadShipmentTransportationWaybill');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'downloadShipmentTransportationWaybill');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<Blob>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
            responseType: 'blob',
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию об отгрузке по ее идентификатору. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Получение информации об одной отгрузке
     */
    getShipment({ campaignId, shipmentId, cancelledOrders }: GetShipmentRequest): Observable<GetShipmentResponse>
    getShipment({ campaignId, shipmentId, cancelledOrders }: GetShipmentRequest, opts?: OperationOpts): Observable<AjaxResponse<GetShipmentResponse>>
    getShipment({ campaignId, shipmentId, cancelledOrders }: GetShipmentRequest, opts?: OperationOpts): Observable<GetShipmentResponse | AjaxResponse<GetShipmentResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getShipment');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'getShipment');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (cancelledOrders != null) { query['cancelledOrders'] = cancelledOrders; }

        return this.request<GetShipmentResponse>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о возможности печати ярлыков-наклеек для заказов в отгрузке. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Получение информации о возможности печати ярлыков (FBS)
     */
    getShipmentOrdersInfo({ campaignId, shipmentId }: GetShipmentOrdersInfoRequest): Observable<GetShipmentOrdersInfoResponse>
    getShipmentOrdersInfo({ campaignId, shipmentId }: GetShipmentOrdersInfoRequest, opts?: OperationOpts): Observable<AjaxResponse<GetShipmentOrdersInfoResponse>>
    getShipmentOrdersInfo({ campaignId, shipmentId }: GetShipmentOrdersInfoRequest, opts?: OperationOpts): Observable<GetShipmentOrdersInfoResponse | AjaxResponse<GetShipmentOrdersInfoResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getShipmentOrdersInfo');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'getShipmentOrdersInfo');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetShipmentOrdersInfoResponse>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию об отгрузках по заданным параметрам:  * дате; * статусу; * идентификаторам заказов.  Результаты возвращаются постранично. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Получение информации о нескольких отгрузках
     */
    searchShipments({ campaignId, searchShipmentsRequest, pageToken, limit }: SearchShipmentsRequest): Observable<SearchShipmentsResponse>
    searchShipments({ campaignId, searchShipmentsRequest, pageToken, limit }: SearchShipmentsRequest, opts?: OperationOpts): Observable<AjaxResponse<SearchShipmentsResponse>>
    searchShipments({ campaignId, searchShipmentsRequest, pageToken, limit }: SearchShipmentsRequest, opts?: OperationOpts): Observable<SearchShipmentsResponse | AjaxResponse<SearchShipmentsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'searchShipments');
        throwIfNullOrUndefined(searchShipmentsRequest, 'searchShipmentsRequest', 'searchShipments');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<SearchShipmentsResponse>({
            url: '/campaigns/{campaignId}/first-mile/shipments'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'PUT',
            headers,
            query,
            body: searchShipmentsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Передает Маркету количество коробов или палет в отгрузке для доверительной приемки. Подробнее про доверительную приемку написано в [Справке Маркета](https://yandex.ru/support/marketplace/orders/fbs/process.html#acceptance).  Получить PDF-файл с ярлыками для упаковок можно с помощью запроса [GET campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels](../../reference/shipments/downloadShipmentPalletLabels.md). |**⚙️ Лимит:** 200 запросов в час| |-| 
     * Передача количества упаковок в отгрузке
     */
    setShipmentPalletsCount({ campaignId, shipmentId, setShipmentPalletsCountRequest }: SetShipmentPalletsCountRequest): Observable<EmptyApiResponse>
    setShipmentPalletsCount({ campaignId, shipmentId, setShipmentPalletsCountRequest }: SetShipmentPalletsCountRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    setShipmentPalletsCount({ campaignId, shipmentId, setShipmentPalletsCountRequest }: SetShipmentPalletsCountRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setShipmentPalletsCount');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'setShipmentPalletsCount');
        throwIfNullOrUndefined(setShipmentPalletsCountRequest, 'setShipmentPalletsCountRequest', 'setShipmentPalletsCount');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'PUT',
            headers,
            body: setShipmentPalletsCountRequest,
        }, opts?.responseOpts);
    };

    /**
     * Переносит указанные заказы из указанной отгрузки в следующую отгрузку. [Что такое отгрузка?](https://yandex.ru/support/marketplace/orders/fbs/process.html#ship)  Используйте этот запрос, если не успеваете собрать и упаковать заказы вовремя.  {% note warning \"Такие переносы снижают индекс качества магазина\" %}  Этот запрос предназначен для исключительных случаев. Если вы будете переносить заказы слишком часто, магазин столкнется с ограничениями. [Что за ограничения?](https://yandex.ru/support/marketplace/quality/score/fbs.html)  {% endnote %}  Переносить заказы можно, если до формирования отгрузки осталось больше получаса.  Перенос происходит не мгновенно, а занимает несколько минут.  |**⚙️ Лимит:** 200 запросов в час| |-| 
     * Перенос заказов в следующую отгрузку
     */
    transferOrdersFromShipment({ campaignId, shipmentId, transferOrdersFromShipmentRequest }: TransferOrdersFromShipmentRequest): Observable<EmptyApiResponse>
    transferOrdersFromShipment({ campaignId, shipmentId, transferOrdersFromShipmentRequest }: TransferOrdersFromShipmentRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    transferOrdersFromShipment({ campaignId, shipmentId, transferOrdersFromShipmentRequest }: TransferOrdersFromShipmentRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'transferOrdersFromShipment');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'transferOrdersFromShipment');
        throwIfNullOrUndefined(transferOrdersFromShipmentRequest, 'transferOrdersFromShipmentRequest', 'transferOrdersFromShipment');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer'.replace('{campaignId}', encodeURI(campaignId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'POST',
            headers,
            body: transferOrdersFromShipmentRequest,
        }, opts?.responseOpts);
    };

}
