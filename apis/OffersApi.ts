// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiLockedErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    CurrencyType,
    DeleteCampaignOffersRequest,
    DeleteCampaignOffersResponse,
    EmptyApiResponse,
    GetAllOffersResponse,
    GetCampaignOffersRequest,
    GetCampaignOffersResponse,
    GetOfferRecommendationsRequest,
    GetOfferRecommendationsResponse,
    GetOffersResponse,
    UpdateCampaignOffersRequest,
} from '../models';

export interface DeleteCampaignOffersRequest {
    campaignId: number;
    deleteCampaignOffersRequest: DeleteCampaignOffersRequest;
}

export interface GetAllOffersRequest {
    campaignId: number;
    feedId?: number;
    chunk?: number;
}

export interface GetCampaignOffersRequest {
    campaignId: number;
    getCampaignOffersRequest: GetCampaignOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetOfferRecommendationsRequest {
    businessId: number;
    getOfferRecommendationsRequest: GetOfferRecommendationsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetOffersRequest {
    campaignId: number;
    query?: string;
    feedId?: number;
    shopCategoryId?: string;
    currency?: CurrencyType;
    matched?: boolean;
    page?: number;
    pageSize?: number;
}

export interface UpdateCampaignOffersRequest {
    campaignId: number;
    updateCampaignOffersRequest: UpdateCampaignOffersRequest;
}

/**
 * no description
 */
export class OffersApi extends BaseAPI {

    /**
     * Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Удаление товаров из ассортимента магазина
     */
    deleteCampaignOffers({ campaignId, deleteCampaignOffersRequest }: DeleteCampaignOffersRequest): Observable<DeleteCampaignOffersResponse>
    deleteCampaignOffers({ campaignId, deleteCampaignOffersRequest }: DeleteCampaignOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteCampaignOffersResponse>>
    deleteCampaignOffers({ campaignId, deleteCampaignOffersRequest }: DeleteCampaignOffersRequest, opts?: OperationOpts): Observable<DeleteCampaignOffersResponse | AjaxResponse<DeleteCampaignOffersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'deleteCampaignOffers');
        throwIfNullOrUndefined(deleteCampaignOffersRequest, 'deleteCampaignOffersRequest', 'deleteCampaignOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeleteCampaignOffersResponse>({
            url: '/campaigns/{campaignId}/offers/delete'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: deleteCampaignOffersRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * Все предложения магазина
     */
    getAllOffers({ campaignId, feedId, chunk }: GetAllOffersRequest): Observable<GetAllOffersResponse>
    getAllOffers({ campaignId, feedId, chunk }: GetAllOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetAllOffersResponse>>
    getAllOffers({ campaignId, feedId, chunk }: GetAllOffersRequest, opts?: OperationOpts): Observable<GetAllOffersResponse | AjaxResponse<GetAllOffersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getAllOffers');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (feedId != null) { query['feedId'] = feedId; }
        if (chunk != null) { query['chunk'] = chunk; }

        return this.request<GetAllOffersResponse>({
            url: '/campaigns/{campaignId}/offers/all'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Информация о товарах, которые размещены в заданном магазине
     */
    getCampaignOffers({ campaignId, getCampaignOffersRequest, pageToken, limit }: GetCampaignOffersRequest): Observable<GetCampaignOffersResponse>
    getCampaignOffers({ campaignId, getCampaignOffersRequest, pageToken, limit }: GetCampaignOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignOffersResponse>>
    getCampaignOffers({ campaignId, getCampaignOffersRequest, pageToken, limit }: GetCampaignOffersRequest, opts?: OperationOpts): Observable<GetCampaignOffersResponse | AjaxResponse<GetCampaignOffersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getCampaignOffers');
        throwIfNullOrUndefined(getCampaignOffersRequest, 'getCampaignOffersRequest', 'getCampaignOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetCampaignOffersResponse>({
            url: '/campaigns/{campaignId}/offers'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            query,
            body: getCampaignOffersRequest,
        }, opts?.responseOpts);
    };

    /**
     * Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Рекомендации Маркета, касающиеся цен
     */
    getOfferRecommendations({ businessId, getOfferRecommendationsRequest, pageToken, limit }: GetOfferRecommendationsRequest): Observable<GetOfferRecommendationsResponse>
    getOfferRecommendations({ businessId, getOfferRecommendationsRequest, pageToken, limit }: GetOfferRecommendationsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOfferRecommendationsResponse>>
    getOfferRecommendations({ businessId, getOfferRecommendationsRequest, pageToken, limit }: GetOfferRecommendationsRequest, opts?: OperationOpts): Observable<GetOfferRecommendationsResponse | AjaxResponse<GetOfferRecommendationsResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getOfferRecommendations');
        throwIfNullOrUndefined(getOfferRecommendationsRequest, 'getOfferRecommendationsRequest', 'getOfferRecommendations');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetOfferRecommendationsResponse>({
            url: '/businesses/{businessId}/offers/recommendations'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: getOfferRecommendationsRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * Предложения магазина
     */
    getOffers({ campaignId, query: queryAlias, feedId, shopCategoryId, currency, matched, page, pageSize }: GetOffersRequest): Observable<GetOffersResponse>
    getOffers({ campaignId, query: queryAlias, feedId, shopCategoryId, currency, matched, page, pageSize }: GetOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOffersResponse>>
    getOffers({ campaignId, query: queryAlias, feedId, shopCategoryId, currency, matched, page, pageSize }: GetOffersRequest, opts?: OperationOpts): Observable<GetOffersResponse | AjaxResponse<GetOffersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOffers');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (queryAlias != null) { query['query'] = queryAlias; }
        if (feedId != null) { query['feedId'] = feedId; }
        if (shopCategoryId != null) { query['shopCategoryId'] = shopCategoryId; }
        if (currency != null) { query['currency'] = currency; }
        if (matched != null) { query['matched'] = matched; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<GetOffersResponse>({
            url: '/campaigns/{campaignId}/offers'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Изменение условий продажи товаров в магазине
     */
    updateCampaignOffers({ campaignId, updateCampaignOffersRequest }: UpdateCampaignOffersRequest): Observable<EmptyApiResponse>
    updateCampaignOffers({ campaignId, updateCampaignOffersRequest }: UpdateCampaignOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    updateCampaignOffers({ campaignId, updateCampaignOffersRequest }: UpdateCampaignOffersRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateCampaignOffers');
        throwIfNullOrUndefined(updateCampaignOffersRequest, 'updateCampaignOffersRequest', 'updateCampaignOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/offers/update'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: updateCampaignOffersRequest,
        }, opts?.responseOpts);
    };

}
