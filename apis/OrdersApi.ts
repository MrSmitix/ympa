// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AcceptOrderCancellationRequest,
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    EmptyApiResponse,
    GetOrderResponse,
    GetOrdersResponse,
    OrderBuyerType,
    OrderDeliveryDispatchType,
    OrderStatusType,
    OrderSubstatusType,
    ProvideOrderDigitalCodesRequest,
    ProvideOrderItemIdentifiersRequest,
    ProvideOrderItemIdentifiersResponse,
    SetOrderBoxLayoutRequest,
    SetOrderBoxLayoutResponse,
    SetOrderShipmentBoxesRequest,
    SetOrderShipmentBoxesResponse,
    UpdateOrderItemRequest,
    UpdateOrderStatusRequest,
    UpdateOrderStatusResponse,
    UpdateOrderStatusesRequest,
    UpdateOrderStatusesResponse,
} from '../models';

export interface AcceptOrderCancellationRequest {
    campaignId: number;
    orderId: number;
    acceptOrderCancellationRequest: AcceptOrderCancellationRequest;
}

export interface GetOrderRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrdersRequest {
    campaignId: number;
    orderIds?: Array<number>;
    status?: Set<OrderStatusType>;
    substatus?: Set<OrderSubstatusType>;
    fromDate?: string;
    toDate?: string;
    supplierShipmentDateFrom?: string;
    supplierShipmentDateTo?: string;
    updatedAtFrom?: string;
    updatedAtTo?: string;
    dispatchType?: OrderDeliveryDispatchType;
    fake?: boolean;
    hasCis?: boolean;
    onlyWaitingForCancellationApprove?: boolean;
    onlyEstimatedDelivery?: boolean;
    buyerType?: OrderBuyerType;
    page?: number;
    pageSize?: number;
    pageToken?: string;
    limit?: number;
}

export interface ProvideOrderDigitalCodesRequest {
    campaignId: number;
    orderId: number;
    provideOrderDigitalCodesRequest: ProvideOrderDigitalCodesRequest;
}

export interface ProvideOrderItemIdentifiersRequest {
    campaignId: number;
    orderId: number;
    provideOrderItemIdentifiersRequest: ProvideOrderItemIdentifiersRequest;
}

export interface SetOrderBoxLayoutRequest {
    campaignId: number;
    orderId: number;
    setOrderBoxLayoutRequest: SetOrderBoxLayoutRequest;
}

export interface SetOrderShipmentBoxesRequest {
    campaignId: number;
    orderId: number;
    shipmentId: number;
    setOrderShipmentBoxesRequest: SetOrderShipmentBoxesRequest;
}

export interface UpdateOrderItemsRequest {
    campaignId: number;
    orderId: number;
    updateOrderItemRequest: UpdateOrderItemRequest;
}

export interface UpdateOrderStatusRequest {
    campaignId: number;
    orderId: number;
    updateOrderStatusRequest: UpdateOrderStatusRequest;
}

export interface UpdateOrderStatusesRequest {
    campaignId: number;
    updateOrderStatusesRequest: UpdateOrderStatusesRequest;
}

/**
 * no description
 */
export class OrdersApi extends BaseAPI {

    /**
     * Подтверждает или отклоняет запрос покупателя на отмену заказа, который передан службе доставки.  Покупатель может отменить заказ в течение его обработки или доставки. Если заказ еще обрабатывается (имеет статус PROCESSING), вам не нужно подтверждать отмену заказа — он будет отменен автоматически.  Если заказ уже передан службе доставки (принимает статус `DELIVERY` или `PICKUP`) и пользователь отменил его, вы можете предупредить службу об отмене в течение 48 часов. Если служба доставки узнала об отмене до передачи заказа покупателю, подтвердите отмену с помощью запроса [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md). Если заказ уже доставлен, отклоните отмену с помощью этого же запроса. Тогда у покупателя останется заказ, и деньги за него возвращаться не будут.  Чтобы узнать, какие заказы были отменены в статусе `DELIVERY` или `PICKUP`, отправьте запрос [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md). В его URL добавьте входной параметр `onlyWaitingForCancellationApprove=true`. Вы также можете узнать об отмененных заказах в кабинете или через почту — на нее придет уведомление об отмене.  Если в течение 48 часов вы не подтвердите или отклоните отмену, заказ будет отменен автоматически.  |**⚙️ Лимит:** 500 запросов в час| |-| 
     * Отмена заказа покупателем
     */
    acceptOrderCancellation({ campaignId, orderId, acceptOrderCancellationRequest }: AcceptOrderCancellationRequest): Observable<EmptyApiResponse>
    acceptOrderCancellation({ campaignId, orderId, acceptOrderCancellationRequest }: AcceptOrderCancellationRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    acceptOrderCancellation({ campaignId, orderId, acceptOrderCancellationRequest }: AcceptOrderCancellationRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'acceptOrderCancellation');
        throwIfNullOrUndefined(orderId, 'orderId', 'acceptOrderCancellation');
        throwIfNullOrUndefined(acceptOrderCancellationRequest, 'acceptOrderCancellationRequest', 'acceptOrderCancellation');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/cancellation/accept'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: acceptOrderCancellationRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Информация об одном заказе
     */
    getOrder({ campaignId, orderId }: GetOrderRequest): Observable<GetOrderResponse>
    getOrder({ campaignId, orderId }: GetOrderRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOrderResponse>>
    getOrder({ campaignId, orderId }: GetOrderRequest, opts?: OperationOpts): Observable<GetOrderResponse | AjaxResponse<GetOrderResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOrder');
        throwIfNullOrUndefined(orderId, 'orderId', 'getOrder');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetOrderResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Информация о нескольких заказах
     */
    getOrders({ campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit }: GetOrdersRequest): Observable<GetOrdersResponse>
    getOrders({ campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit }: GetOrdersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOrdersResponse>>
    getOrders({ campaignId, orderIds, status, substatus, fromDate, toDate, supplierShipmentDateFrom, supplierShipmentDateTo, updatedAtFrom, updatedAtTo, dispatchType, fake, hasCis, onlyWaitingForCancellationApprove, onlyEstimatedDelivery, buyerType, page, pageSize, pageToken, limit }: GetOrdersRequest, opts?: OperationOpts): Observable<GetOrdersResponse | AjaxResponse<GetOrdersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOrders');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (orderIds != null) { query['orderIds'] = orderIds.join(COLLECTION_FORMATS['csv']); }
        if (status != null) { query['status'] = status.join(COLLECTION_FORMATS['csv']); }
        if (substatus != null) { query['substatus'] = substatus.join(COLLECTION_FORMATS['csv']); }
        if (fromDate != null) { query['fromDate'] = (fromDate as any).toISOString().split('T')[0]; }
        if (toDate != null) { query['toDate'] = (toDate as any).toISOString().split('T')[0]; }
        if (supplierShipmentDateFrom != null) { query['supplierShipmentDateFrom'] = (supplierShipmentDateFrom as any).toISOString().split('T')[0]; }
        if (supplierShipmentDateTo != null) { query['supplierShipmentDateTo'] = (supplierShipmentDateTo as any).toISOString().split('T')[0]; }
        if (updatedAtFrom != null) { query['updatedAtFrom'] = (updatedAtFrom as any).toISOString(); }
        if (updatedAtTo != null) { query['updatedAtTo'] = (updatedAtTo as any).toISOString(); }
        if (dispatchType != null) { query['dispatchType'] = dispatchType; }
        if (fake != null) { query['fake'] = fake; }
        if (hasCis != null) { query['hasCis'] = hasCis; }
        if (onlyWaitingForCancellationApprove != null) { query['onlyWaitingForCancellationApprove'] = onlyWaitingForCancellationApprove; }
        if (onlyEstimatedDelivery != null) { query['onlyEstimatedDelivery'] = onlyEstimatedDelivery; }
        if (buyerType != null) { query['buyerType'] = buyerType; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }
        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetOrdersResponse>({
            url: '/campaigns/{campaignId}/orders'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Передает ключи цифровых товаров, которые покупатель заказал и оплатил. После выполнения запроса Маркет отправит ему письмо с ключами и инструкциями по активации, а также переведет заказ в финальный статус `DELIVERED`.  Ключ нужно передать в течение 30 минут после перехода заказа в статус `PROCESSING`.  Если в один заказ входят несколько ключей, передавайте их все в одном запросе.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Передача ключей цифровых товаров
     */
    provideOrderDigitalCodes({ campaignId, orderId, provideOrderDigitalCodesRequest }: ProvideOrderDigitalCodesRequest): Observable<EmptyApiResponse>
    provideOrderDigitalCodes({ campaignId, orderId, provideOrderDigitalCodesRequest }: ProvideOrderDigitalCodesRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    provideOrderDigitalCodes({ campaignId, orderId, provideOrderDigitalCodesRequest }: ProvideOrderDigitalCodesRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'provideOrderDigitalCodes');
        throwIfNullOrUndefined(orderId, 'orderId', 'provideOrderDigitalCodes');
        throwIfNullOrUndefined(provideOrderDigitalCodesRequest, 'provideOrderDigitalCodesRequest', 'provideOrderDigitalCodes');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'POST',
            headers,
            body: provideOrderDigitalCodesRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Передает Маркету коды маркировки для единиц товара в указанном заказе.  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  {% note warning %}  Прежде чем работать с этим методом, обязательно прочтите [статью о работе с маркируемыми товарами](https://yandex.ru/support/marketplace/orders/cz.html).  {% endnote %}  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Передача кодов маркировки единиц товара
     */
    provideOrderItemIdentifiers({ campaignId, orderId, provideOrderItemIdentifiersRequest }: ProvideOrderItemIdentifiersRequest): Observable<ProvideOrderItemIdentifiersResponse>
    provideOrderItemIdentifiers({ campaignId, orderId, provideOrderItemIdentifiersRequest }: ProvideOrderItemIdentifiersRequest, opts?: OperationOpts): Observable<AjaxResponse<ProvideOrderItemIdentifiersResponse>>
    provideOrderItemIdentifiers({ campaignId, orderId, provideOrderItemIdentifiersRequest }: ProvideOrderItemIdentifiersRequest, opts?: OperationOpts): Observable<ProvideOrderItemIdentifiersResponse | AjaxResponse<ProvideOrderItemIdentifiersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'provideOrderItemIdentifiers');
        throwIfNullOrUndefined(orderId, 'orderId', 'provideOrderItemIdentifiers');
        throwIfNullOrUndefined(provideOrderItemIdentifiersRequest, 'provideOrderItemIdentifiersRequest', 'provideOrderItemIdentifiers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<ProvideOrderItemIdentifiersResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/identifiers'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: provideOrderItemIdentifiersRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note tip \"Подходит и для DBS\" %}  Запрос предназначен для работы с FBS-заказами, но вы можете использовать его для обработки DBS-заказов, если это удобно.  {% endnote %}  Позволяет выполнить три операции:  * передать Маркету информацию о распределении товаров по коробкам; * передать Маркету коды маркировки для товаров; * удалить товар из заказа, если его не оказалось на складе.  Если нужно что-то поправить в переданных данных, просто повторите запрос — это можно делать сколько угодно раз до перевода заказа в статус **Готов к отгрузке**. ⚠️ Если вы меняете раскладку уже после печати и расклейки ярлыков, не забудье перепечатать их и наклеить заново.  ## Как передать информацию о распределении товаров  В этом запросе вам нужно передать Маркету список коробок и указать, какие именно товары лежат в каждой из них. Коробки могут быть двух типов:  * **Содержащие товары целиком.** Такая коробка может содержать сколько угодно единиц любых товаров.  * **Содержащие часть товара.** Такие коробки содержат по одной части одного товара. Например, одна содержит внешний блок кондиционера, а другая — внутренний блок.  ⚠️ Одна коробка не может содержать и товары целиком, и части товаров.  ## Как передавать коды маркировки  Если в заказе есть товары, подлежащие маркировке, в запросе нужно передать соответствующие уникальные коды. [Что такое маркировка?](https://yandex.ru/support/marketplace/orders/cz.html)  Принимаются коды следующих типов:  * Коды «Честного знака». * УИН для ювелирных изделий. * РНПТ и ГТД для импортных прослеживаемых товаров.  Для каждой позиции в заказе, требующей маркировки, нужно передать список кодов — по одному для каждой единицы товара. Например, если в заказе две пары тапочек и одна пара туфель, получится список из двух кодов для первой позиции и список из одного кода для второй.  Если товар едет в нескольких коробках, код маркировки нужно передать для каждой из них.  ## Как удалить товар из заказа  Чтобы удалить товар из заказа:  1. Добавьте в запрос `allowRemove: true`. 2. Передайте распределение по коробкам без товара, который нужно удалить.  {% note warning \"Удаление нельзя отменить\" %}  Эта операция необратима: покупатель сразу получит уведомление, а состав заказа изменится.  {% endnote %}  Чтобы удалить позицию целиком, не передавайте соответствующий `OrderBoxLayoutItemDTO`. Чтобы уменьшить количество товара, передайте уменьшенное значение в поле `fullCount`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если вы не можете отгрузить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  ## Примеры  {% cut \"Товар умещается в коробку\" %}  Вот как будет выглядеть запрос, если в одной коробке едут:    * три единицы одного товара, требующего маркировки;   * одна единица другого товара, не требущего маркировки.    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"fullCount\": 3,                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           },                           {                               \"cis\": \"010304109478gftJ14545762!\\u001dhGt264\"                           },                           {                               \"cis\": \"010304109478fRs28323ks23!\\u001dhet201\"                           }                       ]                   },                   {                       \"id\": 654321,                       \"fullCount\": 1                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Товар едет в разных коробках\" %}  Вот как будет выглядеть запрос, если товар едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  {% cut \"Одинаковые товары, где каждый едет в нескольких коробках\" %}  Вот как будет выглядеть запрос, если каждый из двух одинаковых товаров едет в двух коробках:    ```json   {       \"boxes\": [           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 1,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           },           {               \"items\": [                   {                       \"id\": 123456,                       \"partialCount\": {                           \"current\": 2,                           \"total\": 2                       },                       \"instances\": [                           {                               \"cis\": \"01030410947874432155Qbag!\\u001d93Zjqw\"                           }                       ]                   }               ]           }       ]   }   ```  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Подготовка заказа
     */
    setOrderBoxLayout({ campaignId, orderId, setOrderBoxLayoutRequest }: SetOrderBoxLayoutRequest): Observable<SetOrderBoxLayoutResponse>
    setOrderBoxLayout({ campaignId, orderId, setOrderBoxLayoutRequest }: SetOrderBoxLayoutRequest, opts?: OperationOpts): Observable<AjaxResponse<SetOrderBoxLayoutResponse>>
    setOrderBoxLayout({ campaignId, orderId, setOrderBoxLayoutRequest }: SetOrderBoxLayoutRequest, opts?: OperationOpts): Observable<SetOrderBoxLayoutResponse | AjaxResponse<SetOrderBoxLayoutResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setOrderBoxLayout');
        throwIfNullOrUndefined(orderId, 'orderId', 'setOrderBoxLayout');
        throwIfNullOrUndefined(setOrderBoxLayoutRequest, 'setOrderBoxLayoutRequest', 'setOrderBoxLayout');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<SetOrderBoxLayoutResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/boxes'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: setOrderBoxLayoutRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Отгружаемый Маркету заказ может не влезть в одну коробку или упаковку — в этом случае получается, что он занимает несколько грузовых мест.  Количество грузовых мест нужно обязательно передавать Маркету, если оно не равно 1. Это делается перед переводом его в статус **Готов к отгрузке**. Подробно о том, что в какой момент нужно передавать, рассказано в [пошаговой инструкции](../../step-by-step/fbs.md).  Метод устроен немного нестандартно: количество задается длиной массива пустых объектов.  Раньше метод требовал передачи большего количества данных. Запросы, оформленные по старому образцу, работают, но лучше делать по-новому.  {% cut \"Как было раньше\" %}  Структура тела PUT-запроса:  ``` {   \"boxes\":   [     {       \"fulfilmentId\": \"{string}\",       \"weight\": {int64},       \"width\": {int64},       \"height\": {int64},       \"depth\": {int64},       \"items\":       [         {           \"id\": {int64},           \"count\": {int32}         },         ...       ]     },     ...   ] } ``` | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `boxes`       |           | Список грузовых мест.       |  **Параметры, вложенные в `boxes`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `fulfilmentId`       |  String   | Идентификатор грузового места в информационной системе магазина. Сформируйте идентификатор по шаблону: `номер заказа на Маркете-номер грузового места`. Например, `7206821‑1, 7206821‑2` и т. д. | | `weight`       | Int64        | Масса брутто грузового места (суммарная масса упаковки и содержимого) в граммах. | | `width`       | Int64   | Ширина грузового места в сантиметрах.       | | `height`       | Int64   | Высота грузового места в сантиметрах.       | | `depth`       | Int64   | Глубина грузового места в сантиметрах.        | | `items`       | Int64   | Список товаров в грузовом месте.       |  **Параметры, вложенные в `items`** | **Параметр**  | **Тип**  | **Значение**  | | ----------- | ----------- | ----------- | | `id`       | Int64     | Идентификатор товара в рамках заказа.   | | `count`    | Int32     | Количество единиц товара в грузовом месте.       |  {% endcut %}  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Передача количества грузовых мест в заказе
     */
    setOrderShipmentBoxes({ campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest }: SetOrderShipmentBoxesRequest): Observable<SetOrderShipmentBoxesResponse>
    setOrderShipmentBoxes({ campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest }: SetOrderShipmentBoxesRequest, opts?: OperationOpts): Observable<AjaxResponse<SetOrderShipmentBoxesResponse>>
    setOrderShipmentBoxes({ campaignId, orderId, shipmentId, setOrderShipmentBoxesRequest }: SetOrderShipmentBoxesRequest, opts?: OperationOpts): Observable<SetOrderShipmentBoxesResponse | AjaxResponse<SetOrderShipmentBoxesResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setOrderShipmentBoxes');
        throwIfNullOrUndefined(orderId, 'orderId', 'setOrderShipmentBoxes');
        throwIfNullOrUndefined(shipmentId, 'shipmentId', 'setOrderShipmentBoxes');
        throwIfNullOrUndefined(setOrderShipmentBoxesRequest, 'setOrderShipmentBoxesRequest', 'setOrderShipmentBoxes');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<SetOrderShipmentBoxesResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)).replace('{shipmentId}', encodeURI(shipmentId)),
            method: 'PUT',
            headers,
            body: setOrderShipmentBoxesRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"Этот запрос только для DBS\" %}  Если вы работаете по модели FBS, пользуйтесь [PUT campaigns/{campaignId}/orders/{orderId}/boxes](../../reference/orders/setOrderBoxLayout.md).  {% endnote %}  Изменяет состав заказа, если позволяет выбранная служба доставки, в случаях:  * покупатель уменьшил количество товара; * магазин не может поставить все товары в заказе.  Для этого заказ должен находится в статусе `\"status\": \"PROCESSING\"` этапа обработки `\"substatus\": \"STARTED\"`. После передачи статуса `\"substatus\": \"READY_TO_SHIP\"` изменить состав невозможно.  Если одинаковых товаров несколько, для уменьшения количества передайте обновленное значение в атрибуте `count` параметра `item`.  Чтобы полностью удалить товар из заказа:  * передайте значение `0`; или * не передавайте параметр `item`.  Нельзя удалить или уменьшить количество товара, если он:  * добавлен по акции; * составляет 99% стоимости заказа; * единственный товар в заказе.  Если необходимо удалить такой товар, отмените заказ. Для этого отправьте запрос методом [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md) и передайте статус заказа `CANCELLED` с причиной отмены `SHOP_FAILED`.  {% note info \"Увеличить заказ нельзя\" %}  С помощью запроса нельзя увеличить количество одинаковых товаров, добавить новые товары в заказ или заменить один товар другим.  {% endnote %}  **Возврат денег покупателю**  Если покупатель оплатил товар при оформлении, Маркет вернет ему деньги за удаленные из заказа товары в течение двух дней:  * при оплате банковской картой — с момента, когда магазин переведет заказ в статус `SHIPPED`;  * при оплате через Apple Pay или Google Pay — с момента, когда магазин удалит товар из заказа.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Удаление товара из заказа или уменьшение числа единиц
     */
    updateOrderItems({ campaignId, orderId, updateOrderItemRequest }: UpdateOrderItemsRequest): Observable<void>
    updateOrderItems({ campaignId, orderId, updateOrderItemRequest }: UpdateOrderItemsRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    updateOrderItems({ campaignId, orderId, updateOrderItemRequest }: UpdateOrderItemsRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateOrderItems');
        throwIfNullOrUndefined(orderId, 'orderId', 'updateOrderItems');
        throwIfNullOrUndefined(updateOrderItemRequest, 'updateOrderItemRequest', 'updateOrderItems');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<void>({
            url: '/campaigns/{campaignId}/orders/{orderId}/items'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: updateOrderItemRequest,
        }, opts?.responseOpts);
    };

    /**
     * Изменяет статус заказа. Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Изменение статуса одного заказа
     */
    updateOrderStatus({ campaignId, orderId, updateOrderStatusRequest }: UpdateOrderStatusRequest): Observable<UpdateOrderStatusResponse>
    updateOrderStatus({ campaignId, orderId, updateOrderStatusRequest }: UpdateOrderStatusRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateOrderStatusResponse>>
    updateOrderStatus({ campaignId, orderId, updateOrderStatusRequest }: UpdateOrderStatusRequest, opts?: OperationOpts): Observable<UpdateOrderStatusResponse | AjaxResponse<UpdateOrderStatusResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateOrderStatus');
        throwIfNullOrUndefined(orderId, 'orderId', 'updateOrderStatus');
        throwIfNullOrUndefined(updateOrderStatusRequest, 'updateOrderStatusRequest', 'updateOrderStatus');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateOrderStatusResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/status'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: updateOrderStatusRequest,
        }, opts?.responseOpts);
    };

    /**
     * Изменяет статусы нескольких заказов.  Возможные изменения статусов:  * Если магазин подтвердил и подготовил заказ к отправке, то заказ из статуса `\"status\": \"PROCESSING\"`и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"PROCESSING\"` и этап обработки `\"substatus\": \"READY_TO_SHIP\"`. * Если магазин подтвердил заказ, но не может его выполнить (например, товар числится в базе, но отсутствует на складе или нет нужного цвета), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"STARTED\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`. * Если магазин подготовил заказ к отгрузке, но не может его выполнить (например, последний товар был поврежден или оказался с браком), то заказ из статуса `\"status\": \"PROCESSING\"` и этапа обработки `\"substatus\": \"READY_TO_SHIP\"` нужно перевести в статус `\"status\": \"CANCELLED\"` с причиной отмены заказа `\"substatus\": \"SHOP_FAILED\"`.  Максимальное количество заказов, у которых можно изменить статус в одном запросе, — 30.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Изменение статусов нескольких заказов
     */
    updateOrderStatuses({ campaignId, updateOrderStatusesRequest }: UpdateOrderStatusesRequest): Observable<UpdateOrderStatusesResponse>
    updateOrderStatuses({ campaignId, updateOrderStatusesRequest }: UpdateOrderStatusesRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateOrderStatusesResponse>>
    updateOrderStatuses({ campaignId, updateOrderStatusesRequest }: UpdateOrderStatusesRequest, opts?: OperationOpts): Observable<UpdateOrderStatusesResponse | AjaxResponse<UpdateOrderStatusesResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateOrderStatuses');
        throwIfNullOrUndefined(updateOrderStatusesRequest, 'updateOrderStatusesRequest', 'updateOrderStatuses');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateOrderStatusesResponse>({
            url: '/campaigns/{campaignId}/orders/status-update'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: updateOrderStatusesRequest,
        }, opts?.responseOpts);
    };

}
