// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    CreateChatRequest,
    CreateChatResponse,
    EmptyApiResponse,
    GetChatHistoryRequest,
    GetChatHistoryResponse,
    GetChatsRequest,
    GetChatsResponse,
    SendMessageToChatRequest,
} from '../models';

export interface CreateChatRequest {
    businessId: number;
    createChatRequest: CreateChatRequest;
}

export interface GetChatHistoryRequest {
    businessId: number;
    chatId: number;
    getChatHistoryRequest: GetChatHistoryRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetChatsRequest {
    businessId: number;
    getChatsRequest: GetChatsRequest;
    pageToken?: string;
    limit?: number;
}

export interface SendFileToChatRequest {
    businessId: number;
    chatId: number;
    file: Blob;
}

export interface SendMessageToChatRequest {
    businessId: number;
    chatId: number;
    sendMessageToChatRequest: SendMessageToChatRequest;
}

/**
 * no description
 */
export class ChatsApi extends BaseAPI {

    /**
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Создание нового чата с покупателем
     */
    createChat({ businessId, createChatRequest }: CreateChatRequest): Observable<CreateChatResponse>
    createChat({ businessId, createChatRequest }: CreateChatRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateChatResponse>>
    createChat({ businessId, createChatRequest }: CreateChatRequest, opts?: OperationOpts): Observable<CreateChatResponse | AjaxResponse<CreateChatResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'createChat');
        throwIfNullOrUndefined(createChatRequest, 'createChatRequest', 'createChat');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CreateChatResponse>({
            url: '/businesses/{businessId}/chats/new'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: createChatRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение истории сообщений в чате
     */
    getChatHistory({ businessId, chatId, getChatHistoryRequest, pageToken, limit }: GetChatHistoryRequest): Observable<GetChatHistoryResponse>
    getChatHistory({ businessId, chatId, getChatHistoryRequest, pageToken, limit }: GetChatHistoryRequest, opts?: OperationOpts): Observable<AjaxResponse<GetChatHistoryResponse>>
    getChatHistory({ businessId, chatId, getChatHistoryRequest, pageToken, limit }: GetChatHistoryRequest, opts?: OperationOpts): Observable<GetChatHistoryResponse | AjaxResponse<GetChatHistoryResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getChatHistory');
        throwIfNullOrUndefined(chatId, 'chatId', 'getChatHistory');
        throwIfNullOrUndefined(getChatHistoryRequest, 'getChatHistoryRequest', 'getChatHistory');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'chatId': chatId,
        };

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetChatHistoryResponse>({
            url: '/businesses/{businessId}/chats/history'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: getChatHistoryRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение доступных чатов
     */
    getChats({ businessId, getChatsRequest, pageToken, limit }: GetChatsRequest): Observable<GetChatsResponse>
    getChats({ businessId, getChatsRequest, pageToken, limit }: GetChatsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetChatsResponse>>
    getChats({ businessId, getChatsRequest, pageToken, limit }: GetChatsRequest, opts?: OperationOpts): Observable<GetChatsResponse | AjaxResponse<GetChatsResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getChats');
        throwIfNullOrUndefined(getChatsRequest, 'getChatsRequest', 'getChats');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetChatsResponse>({
            url: '/businesses/{businessId}/chats'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: getChatsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Отправка файла в чат
     */
    sendFileToChat({ businessId, chatId, file }: SendFileToChatRequest): Observable<EmptyApiResponse>
    sendFileToChat({ businessId, chatId, file }: SendFileToChatRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    sendFileToChat({ businessId, chatId, file }: SendFileToChatRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'sendFileToChat');
        throwIfNullOrUndefined(chatId, 'chatId', 'sendFileToChat');
        throwIfNullOrUndefined(file, 'file', 'sendFileToChat');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'chatId': chatId,
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<EmptyApiResponse>({
            url: '/businesses/{businessId}/chats/file/send'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: formData,
        }, opts?.responseOpts);
    };

    /**
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Отправка сообщения в чат
     */
    sendMessageToChat({ businessId, chatId, sendMessageToChatRequest }: SendMessageToChatRequest): Observable<EmptyApiResponse>
    sendMessageToChat({ businessId, chatId, sendMessageToChatRequest }: SendMessageToChatRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    sendMessageToChat({ businessId, chatId, sendMessageToChatRequest }: SendMessageToChatRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'sendMessageToChat');
        throwIfNullOrUndefined(chatId, 'chatId', 'sendMessageToChat');
        throwIfNullOrUndefined(sendMessageToChatRequest, 'sendMessageToChatRequest', 'sendMessageToChat');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'chatId': chatId,
        };

        return this.request<EmptyApiResponse>({
            url: '/businesses/{businessId}/chats/message'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: sendMessageToChatRequest,
        }, opts?.responseOpts);
    };

}
