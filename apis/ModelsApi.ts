// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    CurrencyType,
    GetModelsOffersResponse,
    GetModelsRequest,
    GetModelsResponse,
    SearchModelsResponse,
    SortOrderType,
} from '../models';

export interface GetModelRequest {
    modelId: number;
    regionId: number;
    currency?: CurrencyType;
}

export interface GetModelOffersRequest {
    modelId: number;
    regionId: number;
    currency?: CurrencyType;
    orderByPrice?: SortOrderType;
    count?: number;
    page?: number;
}

export interface GetModelsRequest {
    regionId: number;
    getModelsRequest: GetModelsRequest;
    currency?: CurrencyType;
}

export interface GetModelsOffersRequest {
    regionId: number;
    getModelsRequest: GetModelsRequest;
    currency?: CurrencyType;
    orderByPrice?: SortOrderType;
}

export interface SearchModelsRequest {
    query: string;
    regionId: number;
    currency?: CurrencyType;
    page?: number;
    pageSize?: number;
}

/**
 * no description
 */
export class ModelsApi extends BaseAPI {

    /**
     * Возвращает информацию о модели товара.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * Информация об одной модели
     */
    getModel({ modelId, regionId, currency }: GetModelRequest): Observable<GetModelsResponse>
    getModel({ modelId, regionId, currency }: GetModelRequest, opts?: OperationOpts): Observable<AjaxResponse<GetModelsResponse>>
    getModel({ modelId, regionId, currency }: GetModelRequest, opts?: OperationOpts): Observable<GetModelsResponse | AjaxResponse<GetModelsResponse>> {
        throwIfNullOrUndefined(modelId, 'modelId', 'getModel');
        throwIfNullOrUndefined(regionId, 'regionId', 'getModel');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'regionId': regionId,
        };

        if (currency != null) { query['currency'] = currency; }

        return this.request<GetModelsResponse>({
            url: '/models/{modelId}'.replace('{modelId}', encodeURI(modelId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов `GET models/{modelId}/offers` и `POST models/offers` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * Список предложений для одной модели
     */
    getModelOffers({ modelId, regionId, currency, orderByPrice, count, page }: GetModelOffersRequest): Observable<GetModelsOffersResponse>
    getModelOffers({ modelId, regionId, currency, orderByPrice, count, page }: GetModelOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetModelsOffersResponse>>
    getModelOffers({ modelId, regionId, currency, orderByPrice, count, page }: GetModelOffersRequest, opts?: OperationOpts): Observable<GetModelsOffersResponse | AjaxResponse<GetModelsOffersResponse>> {
        throwIfNullOrUndefined(modelId, 'modelId', 'getModelOffers');
        throwIfNullOrUndefined(regionId, 'regionId', 'getModelOffers');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'regionId': regionId,
        };

        if (currency != null) { query['currency'] = currency; }
        if (orderByPrice != null) { query['orderByPrice'] = orderByPrice; }
        if (count != null) { query['count'] = count; }
        if (page != null) { query['page'] = page; }

        return this.request<GetModelsOffersResponse>({
            url: '/models/{modelId}/offers'.replace('{modelId}', encodeURI(modelId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * Информация о нескольких моделях
     */
    getModels({ regionId, getModelsRequest, currency }: GetModelsRequest): Observable<GetModelsResponse>
    getModels({ regionId, getModelsRequest, currency }: GetModelsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetModelsResponse>>
    getModels({ regionId, getModelsRequest, currency }: GetModelsRequest, opts?: OperationOpts): Observable<GetModelsResponse | AjaxResponse<GetModelsResponse>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'getModels');
        throwIfNullOrUndefined(getModelsRequest, 'getModelsRequest', 'getModels');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'regionId': regionId,
        };

        if (currency != null) { query['currency'] = currency; }

        return this.request<GetModelsResponse>({
            url: '/models',
            method: 'POST',
            headers,
            query,
            body: getModelsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов `GET models/{modelId}/offers` и `POST models/offers` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * Список предложений для нескольких моделей
     */
    getModelsOffers({ regionId, getModelsRequest, currency, orderByPrice }: GetModelsOffersRequest): Observable<GetModelsOffersResponse>
    getModelsOffers({ regionId, getModelsRequest, currency, orderByPrice }: GetModelsOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetModelsOffersResponse>>
    getModelsOffers({ regionId, getModelsRequest, currency, orderByPrice }: GetModelsOffersRequest, opts?: OperationOpts): Observable<GetModelsOffersResponse | AjaxResponse<GetModelsOffersResponse>> {
        throwIfNullOrUndefined(regionId, 'regionId', 'getModelsOffers');
        throwIfNullOrUndefined(getModelsRequest, 'getModelsRequest', 'getModelsOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'regionId': regionId,
        };

        if (currency != null) { query['currency'] = currency; }
        if (orderByPrice != null) { query['orderByPrice'] = orderByPrice; }

        return this.request<GetModelsOffersResponse>({
            url: '/models/offers',
            method: 'POST',
            headers,
            query,
            body: getModelsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о моделях, удовлетворяющих заданным в запросе условиям поиска.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
     * Поиск модели товара
     */
    searchModels({ query: queryAlias, regionId, currency, page, pageSize }: SearchModelsRequest): Observable<SearchModelsResponse>
    searchModels({ query: queryAlias, regionId, currency, page, pageSize }: SearchModelsRequest, opts?: OperationOpts): Observable<AjaxResponse<SearchModelsResponse>>
    searchModels({ query: queryAlias, regionId, currency, page, pageSize }: SearchModelsRequest, opts?: OperationOpts): Observable<SearchModelsResponse | AjaxResponse<SearchModelsResponse>> {
        throwIfNullOrUndefined(queryAlias, 'queryAlias', 'searchModels');
        throwIfNullOrUndefined(regionId, 'regionId', 'searchModels');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
            'regionId': regionId,
        };

        if (currency != null) { query['currency'] = currency; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<SearchModelsResponse>({
            url: '/models',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
