// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    GenerateBoostConsolidatedRequest,
    GenerateCompetitorsPositionReportRequest,
    GenerateGoodsFeedbackRequest,
    GenerateGoodsMovementReportRequest,
    GenerateGoodsRealizationReportRequest,
    GenerateGoodsTurnoverRequest,
    GenerateMassOrderLabelsRequest,
    GeneratePricesReportRequest,
    GenerateReportResponse,
    GenerateShelfsStatisticsRequest,
    GenerateShipmentListDocumentReportRequest,
    GenerateShowsSalesReportRequest,
    GenerateStocksOnWarehousesReportRequest,
    GenerateUnitedMarketplaceServicesReportRequest,
    GenerateUnitedNettingReportRequest,
    GenerateUnitedOrdersRequest,
    GetReportInfoResponse,
    PageFormatType,
    ReportFormatType,
} from '../models';

export interface GenerateBoostConsolidatedReportRequest {
    generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest;
    format?: ReportFormatType;
}

export interface GenerateCompetitorsPositionReportRequest {
    generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsFeedbackReportRequest {
    generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsMovementReportRequest {
    generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsRealizationReportRequest {
    generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsTurnoverReportRequest {
    generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest;
    format?: ReportFormatType;
}

export interface GenerateMassOrderLabelsReportRequest {
    generateMassOrderLabelsRequest: GenerateMassOrderLabelsRequest;
    format?: PageFormatType;
}

export interface GeneratePricesReportRequest {
    generatePricesReportRequest: GeneratePricesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateShelfsStatisticsReportRequest {
    generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest;
    format?: ReportFormatType;
}

export interface GenerateShipmentListDocumentReportRequest {
    generateShipmentListDocumentReportRequest: GenerateShipmentListDocumentReportRequest;
}

export interface GenerateShowsSalesReportRequest {
    generateShowsSalesReportRequest: GenerateShowsSalesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateStocksOnWarehousesReportRequest {
    generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedMarketplaceServicesReportRequest {
    generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedNettingReportRequest {
    generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedOrdersReportRequest {
    generateUnitedOrdersRequest: GenerateUnitedOrdersRequest;
    format?: ReportFormatType;
}

export interface GetReportInfoRequest {
    reportId: string;
}

/**
 * no description
 */
export class ReportsApi extends BaseAPI {

    /**
     * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по бусту продаж
     */
    generateBoostConsolidatedReport({ generateBoostConsolidatedRequest, format }: GenerateBoostConsolidatedReportRequest): Observable<GenerateReportResponse>
    generateBoostConsolidatedReport({ generateBoostConsolidatedRequest, format }: GenerateBoostConsolidatedReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateBoostConsolidatedReport({ generateBoostConsolidatedRequest, format }: GenerateBoostConsolidatedReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateBoostConsolidatedRequest, 'generateBoostConsolidatedRequest', 'generateBoostConsolidatedReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/boost-consolidated/generate',
            method: 'POST',
            headers,
            query,
            body: generateBoostConsolidatedRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * Отчет «Конкурентная позиция»
     */
    generateCompetitorsPositionReport({ generateCompetitorsPositionReportRequest, format }: GenerateCompetitorsPositionReportRequest): Observable<GenerateReportResponse>
    generateCompetitorsPositionReport({ generateCompetitorsPositionReportRequest, format }: GenerateCompetitorsPositionReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateCompetitorsPositionReport({ generateCompetitorsPositionReportRequest, format }: GenerateCompetitorsPositionReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateCompetitorsPositionReportRequest, 'generateCompetitorsPositionReportRequest', 'generateCompetitorsPositionReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/competitors-position/generate',
            method: 'POST',
            headers,
            query,
            body: generateCompetitorsPositionReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по отзывам о товарах
     */
    generateGoodsFeedbackReport({ generateGoodsFeedbackRequest, format }: GenerateGoodsFeedbackReportRequest): Observable<GenerateReportResponse>
    generateGoodsFeedbackReport({ generateGoodsFeedbackRequest, format }: GenerateGoodsFeedbackReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateGoodsFeedbackReport({ generateGoodsFeedbackRequest, format }: GenerateGoodsFeedbackReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateGoodsFeedbackRequest, 'generateGoodsFeedbackRequest', 'generateGoodsFeedbackReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/goods-feedback/generate',
            method: 'POST',
            headers,
            query,
            body: generateGoodsFeedbackRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по движению товаров
     */
    generateGoodsMovementReport({ generateGoodsMovementReportRequest, format }: GenerateGoodsMovementReportRequest): Observable<GenerateReportResponse>
    generateGoodsMovementReport({ generateGoodsMovementReportRequest, format }: GenerateGoodsMovementReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateGoodsMovementReport({ generateGoodsMovementReportRequest, format }: GenerateGoodsMovementReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateGoodsMovementReportRequest, 'generateGoodsMovementReportRequest', 'generateGoodsMovementReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/goods-movement/generate',
            method: 'POST',
            headers,
            query,
            body: generateGoodsMovementReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по реализации
     */
    generateGoodsRealizationReport({ generateGoodsRealizationReportRequest, format }: GenerateGoodsRealizationReportRequest): Observable<GenerateReportResponse>
    generateGoodsRealizationReport({ generateGoodsRealizationReportRequest, format }: GenerateGoodsRealizationReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateGoodsRealizationReport({ generateGoodsRealizationReportRequest, format }: GenerateGoodsRealizationReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateGoodsRealizationReportRequest, 'generateGoodsRealizationReportRequest', 'generateGoodsRealizationReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/goods-realization/generate',
            method: 'POST',
            headers,
            query,
            body: generateGoodsRealizationReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по оборачиваемости
     */
    generateGoodsTurnoverReport({ generateGoodsTurnoverRequest, format }: GenerateGoodsTurnoverReportRequest): Observable<GenerateReportResponse>
    generateGoodsTurnoverReport({ generateGoodsTurnoverRequest, format }: GenerateGoodsTurnoverReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateGoodsTurnoverReport({ generateGoodsTurnoverRequest, format }: GenerateGoodsTurnoverReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateGoodsTurnoverRequest, 'generateGoodsTurnoverRequest', 'generateGoodsTurnoverReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/goods-turnover/generate',
            method: 'POST',
            headers,
            query,
            body: generateGoodsTurnoverRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     */
    generateMassOrderLabelsReport({ generateMassOrderLabelsRequest, format }: GenerateMassOrderLabelsReportRequest): Observable<GenerateReportResponse>
    generateMassOrderLabelsReport({ generateMassOrderLabelsRequest, format }: GenerateMassOrderLabelsReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateMassOrderLabelsReport({ generateMassOrderLabelsRequest, format }: GenerateMassOrderLabelsReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateMassOrderLabelsRequest, 'generateMassOrderLabelsRequest', 'generateMassOrderLabelsReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/documents/labels/generate',
            method: 'POST',
            headers,
            query,
            body: generateMassOrderLabelsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет «Цены на рынке»
     */
    generatePricesReport({ generatePricesReportRequest, format }: GeneratePricesReportRequest): Observable<GenerateReportResponse>
    generatePricesReport({ generatePricesReportRequest, format }: GeneratePricesReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generatePricesReport({ generatePricesReportRequest, format }: GeneratePricesReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generatePricesReportRequest, 'generatePricesReportRequest', 'generatePricesReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/prices/generate',
            method: 'POST',
            headers,
            query,
            body: generatePricesReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по полкам
     */
    generateShelfsStatisticsReport({ generateShelfsStatisticsRequest, format }: GenerateShelfsStatisticsReportRequest): Observable<GenerateReportResponse>
    generateShelfsStatisticsReport({ generateShelfsStatisticsRequest, format }: GenerateShelfsStatisticsReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateShelfsStatisticsReport({ generateShelfsStatisticsRequest, format }: GenerateShelfsStatisticsReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateShelfsStatisticsRequest, 'generateShelfsStatisticsRequest', 'generateShelfsStatisticsReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/shelf-statistics/generate',
            method: 'POST',
            headers,
            query,
            body: generateShelfsStatisticsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Получение листа сборки
     */
    generateShipmentListDocumentReport({ generateShipmentListDocumentReportRequest }: GenerateShipmentListDocumentReportRequest): Observable<GenerateReportResponse>
    generateShipmentListDocumentReport({ generateShipmentListDocumentReportRequest }: GenerateShipmentListDocumentReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateShipmentListDocumentReport({ generateShipmentListDocumentReportRequest }: GenerateShipmentListDocumentReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateShipmentListDocumentReportRequest, 'generateShipmentListDocumentReportRequest', 'generateShipmentListDocumentReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GenerateReportResponse>({
            url: '/reports/documents/shipment-list/generate',
            method: 'POST',
            headers,
            body: generateShipmentListDocumentReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * Отчет «Аналитика продаж»
     */
    generateShowsSalesReport({ generateShowsSalesReportRequest, format }: GenerateShowsSalesReportRequest): Observable<GenerateReportResponse>
    generateShowsSalesReport({ generateShowsSalesReportRequest, format }: GenerateShowsSalesReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateShowsSalesReport({ generateShowsSalesReportRequest, format }: GenerateShowsSalesReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateShowsSalesReportRequest, 'generateShowsSalesReportRequest', 'generateShowsSalesReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/shows-sales/generate',
            method: 'POST',
            headers,
            query,
            body: generateShowsSalesReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по остаткам на складах
     */
    generateStocksOnWarehousesReport({ generateStocksOnWarehousesReportRequest, format }: GenerateStocksOnWarehousesReportRequest): Observable<GenerateReportResponse>
    generateStocksOnWarehousesReport({ generateStocksOnWarehousesReportRequest, format }: GenerateStocksOnWarehousesReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateStocksOnWarehousesReport({ generateStocksOnWarehousesReportRequest, format }: GenerateStocksOnWarehousesReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateStocksOnWarehousesReportRequest, 'generateStocksOnWarehousesReportRequest', 'generateStocksOnWarehousesReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/stocks-on-warehouses/generate',
            method: 'POST',
            headers,
            query,
            body: generateStocksOnWarehousesReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по стоимости услуг
     */
    generateUnitedMarketplaceServicesReport({ generateUnitedMarketplaceServicesReportRequest, format }: GenerateUnitedMarketplaceServicesReportRequest): Observable<GenerateReportResponse>
    generateUnitedMarketplaceServicesReport({ generateUnitedMarketplaceServicesReportRequest, format }: GenerateUnitedMarketplaceServicesReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateUnitedMarketplaceServicesReport({ generateUnitedMarketplaceServicesReportRequest, format }: GenerateUnitedMarketplaceServicesReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateUnitedMarketplaceServicesReportRequest, 'generateUnitedMarketplaceServicesReportRequest', 'generateUnitedMarketplaceServicesReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/united-marketplace-services/generate',
            method: 'POST',
            headers,
            query,
            body: generateUnitedMarketplaceServicesReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по платежам
     */
    generateUnitedNettingReport({ generateUnitedNettingReportRequest, format }: GenerateUnitedNettingReportRequest): Observable<GenerateReportResponse>
    generateUnitedNettingReport({ generateUnitedNettingReportRequest, format }: GenerateUnitedNettingReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateUnitedNettingReport({ generateUnitedNettingReportRequest, format }: GenerateUnitedNettingReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateUnitedNettingReportRequest, 'generateUnitedNettingReportRequest', 'generateUnitedNettingReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/united-netting/generate',
            method: 'POST',
            headers,
            query,
            body: generateUnitedNettingReportRequest,
        }, opts?.responseOpts);
    };

    /**
     * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по заказам
     */
    generateUnitedOrdersReport({ generateUnitedOrdersRequest, format }: GenerateUnitedOrdersReportRequest): Observable<GenerateReportResponse>
    generateUnitedOrdersReport({ generateUnitedOrdersRequest, format }: GenerateUnitedOrdersReportRequest, opts?: OperationOpts): Observable<AjaxResponse<GenerateReportResponse>>
    generateUnitedOrdersReport({ generateUnitedOrdersRequest, format }: GenerateUnitedOrdersReportRequest, opts?: OperationOpts): Observable<GenerateReportResponse | AjaxResponse<GenerateReportResponse>> {
        throwIfNullOrUndefined(generateUnitedOrdersRequest, 'generateUnitedOrdersRequest', 'generateUnitedOrdersReport');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (format != null) { query['format'] = format; }

        return this.request<GenerateReportResponse>({
            url: '/reports/united-orders/generate',
            method: 'POST',
            headers,
            query,
            body: generateUnitedOrdersRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Получение заданного отчета
     */
    getReportInfo({ reportId }: GetReportInfoRequest): Observable<GetReportInfoResponse>
    getReportInfo({ reportId }: GetReportInfoRequest, opts?: OperationOpts): Observable<AjaxResponse<GetReportInfoResponse>>
    getReportInfo({ reportId }: GetReportInfoRequest, opts?: OperationOpts): Observable<GetReportInfoResponse | AjaxResponse<GetReportInfoResponse>> {
        throwIfNullOrUndefined(reportId, 'reportId', 'getReportInfo');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetReportInfoResponse>({
            url: '/reports/info/{reportId}'.replace('{reportId}', encodeURI(reportId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
