// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    GetCampaignLoginsResponse,
    GetCampaignRegionResponse,
    GetCampaignResponse,
    GetCampaignSettingsResponse,
    GetCampaignsResponse,
} from '../models';

export interface GetCampaignRequest {
    campaignId: number;
}

export interface GetCampaignLoginsRequest {
    campaignId: number;
}

export interface GetCampaignRegionRequest {
    campaignId: number;
}

export interface GetCampaignSettingsRequest {
    campaignId: number;
}

export interface GetCampaignsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetCampaignsByLoginRequest {
    login: string;
    page?: number;
    pageSize?: number;
}

/**
 * no description
 */
export class CampaignsApi extends BaseAPI {

    /**
     * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Информация о магазине
     */
    getCampaign({ campaignId }: GetCampaignRequest): Observable<GetCampaignResponse>
    getCampaign({ campaignId }: GetCampaignRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignResponse>>
    getCampaign({ campaignId }: GetCampaignRequest, opts?: OperationOpts): Observable<GetCampaignResponse | AjaxResponse<GetCampaignResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getCampaign');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetCampaignResponse>({
            url: '/campaigns/{campaignId}'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Логины, связанные с магазином
     */
    getCampaignLogins({ campaignId }: GetCampaignLoginsRequest): Observable<GetCampaignLoginsResponse>
    getCampaignLogins({ campaignId }: GetCampaignLoginsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignLoginsResponse>>
    getCampaignLogins({ campaignId }: GetCampaignLoginsRequest, opts?: OperationOpts): Observable<GetCampaignLoginsResponse | AjaxResponse<GetCampaignLoginsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getCampaignLogins');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetCampaignLoginsResponse>({
            url: '/campaigns/{campaignId}/logins'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
     * Регион магазина
     */
    getCampaignRegion({ campaignId }: GetCampaignRegionRequest): Observable<GetCampaignRegionResponse>
    getCampaignRegion({ campaignId }: GetCampaignRegionRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignRegionResponse>>
    getCampaignRegion({ campaignId }: GetCampaignRegionRequest, opts?: OperationOpts): Observable<GetCampaignRegionResponse | AjaxResponse<GetCampaignRegionResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getCampaignRegion');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetCampaignRegionResponse>({
            url: '/campaigns/{campaignId}/region'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Настройки магазина
     */
    getCampaignSettings({ campaignId }: GetCampaignSettingsRequest): Observable<GetCampaignSettingsResponse>
    getCampaignSettings({ campaignId }: GetCampaignSettingsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignSettingsResponse>>
    getCampaignSettings({ campaignId }: GetCampaignSettingsRequest, opts?: OperationOpts): Observable<GetCampaignSettingsResponse | AjaxResponse<GetCampaignSettingsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getCampaignSettings');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetCampaignSettingsResponse>({
            url: '/campaigns/{campaignId}/settings'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Список магазинов пользователя
     */
    getCampaigns({ page, pageSize }: GetCampaignsRequest): Observable<GetCampaignsResponse>
    getCampaigns({ page, pageSize }: GetCampaignsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignsResponse>>
    getCampaigns({ page, pageSize }: GetCampaignsRequest, opts?: OperationOpts): Observable<GetCampaignsResponse | AjaxResponse<GetCampaignsResponse>> {

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<GetCampaignsResponse>({
            url: '/campaigns',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Магазины, доступные логину
     */
    getCampaignsByLogin({ login, page, pageSize }: GetCampaignsByLoginRequest): Observable<GetCampaignsResponse>
    getCampaignsByLogin({ login, page, pageSize }: GetCampaignsByLoginRequest, opts?: OperationOpts): Observable<AjaxResponse<GetCampaignsResponse>>
    getCampaignsByLogin({ login, page, pageSize }: GetCampaignsByLoginRequest, opts?: OperationOpts): Observable<GetCampaignsResponse | AjaxResponse<GetCampaignsResponse>> {
        throwIfNullOrUndefined(login, 'login', 'getCampaignsByLogin');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<GetCampaignsResponse>({
            url: '/campaigns/by_login/{login}'.replace('{login}', encodeURI(login)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
