/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  DeleteGoodsFeedbackCommentRequest,
  EmptyApiResponse,
  GetGoodsFeedbackCommentsRequest,
  GetGoodsFeedbackCommentsResponse,
  GetGoodsFeedbackRequest,
  GetGoodsFeedbackResponse,
  SkipGoodsFeedbackReactionRequest,
  UpdateGoodsFeedbackCommentRequest,
  UpdateGoodsFeedbackCommentResponse,
} from '../models/index';
import {
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    DeleteGoodsFeedbackCommentRequestFromJSON,
    DeleteGoodsFeedbackCommentRequestToJSON,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    GetGoodsFeedbackCommentsRequestFromJSON,
    GetGoodsFeedbackCommentsRequestToJSON,
    GetGoodsFeedbackCommentsResponseFromJSON,
    GetGoodsFeedbackCommentsResponseToJSON,
    GetGoodsFeedbackRequestFromJSON,
    GetGoodsFeedbackRequestToJSON,
    GetGoodsFeedbackResponseFromJSON,
    GetGoodsFeedbackResponseToJSON,
    SkipGoodsFeedbackReactionRequestFromJSON,
    SkipGoodsFeedbackReactionRequestToJSON,
    UpdateGoodsFeedbackCommentRequestFromJSON,
    UpdateGoodsFeedbackCommentRequestToJSON,
    UpdateGoodsFeedbackCommentResponseFromJSON,
    UpdateGoodsFeedbackCommentResponseToJSON,
} from '../models/index';

export interface DeleteGoodsFeedbackCommentOperationRequest {
    businessId: number;
    deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest;
}

export interface GetGoodsFeedbackCommentsOperationRequest {
    businessId: number;
    getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetGoodsFeedbacksRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getGoodsFeedbackRequest?: GetGoodsFeedbackRequest;
}

export interface SkipGoodsFeedbacksReactionRequest {
    businessId: number;
    skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest;
}

export interface UpdateGoodsFeedbackCommentOperationRequest {
    businessId: number;
    updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest;
}

/**
 * 
 */
export class GoodsFeedbackApi extends runtime.BaseAPI {

    /**
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Удаление комментария к отзыву
     */
    async deleteGoodsFeedbackCommentRaw(requestParameters: DeleteGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deleteGoodsFeedbackComment().'
            );
        }

        if (requestParameters['deleteGoodsFeedbackCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteGoodsFeedbackCommentRequest',
                'Required parameter "deleteGoodsFeedbackCommentRequest" was null or undefined when calling deleteGoodsFeedbackComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/comments/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteGoodsFeedbackCommentRequestToJSON(requestParameters['deleteGoodsFeedbackCommentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Удаление комментария к отзыву
     */
    async deleteGoodsFeedbackComment(requestParameters: DeleteGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.deleteGoodsFeedbackCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение комментариев к отзыву
     */
    async getGoodsFeedbackCommentsRaw(requestParameters: GetGoodsFeedbackCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoodsFeedbackCommentsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getGoodsFeedbackComments().'
            );
        }

        if (requestParameters['getGoodsFeedbackCommentsRequest'] == null) {
            throw new runtime.RequiredError(
                'getGoodsFeedbackCommentsRequest',
                'Required parameter "getGoodsFeedbackCommentsRequest" was null or undefined when calling getGoodsFeedbackComments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/comments`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetGoodsFeedbackCommentsRequestToJSON(requestParameters['getGoodsFeedbackCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoodsFeedbackCommentsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение комментариев к отзыву
     */
    async getGoodsFeedbackComments(requestParameters: GetGoodsFeedbackCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoodsFeedbackCommentsResponse> {
        const response = await this.getGoodsFeedbackCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение отзывов о товарах продавца
     */
    async getGoodsFeedbacksRaw(requestParameters: GetGoodsFeedbacksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoodsFeedbackResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getGoodsFeedbacks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetGoodsFeedbackRequestToJSON(requestParameters['getGoodsFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoodsFeedbackResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение отзывов о товарах продавца
     */
    async getGoodsFeedbacks(requestParameters: GetGoodsFeedbacksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoodsFeedbackResponse> {
        const response = await this.getGoodsFeedbacksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отказ от ответа на отзывы
     */
    async skipGoodsFeedbacksReactionRaw(requestParameters: SkipGoodsFeedbacksReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling skipGoodsFeedbacksReaction().'
            );
        }

        if (requestParameters['skipGoodsFeedbackReactionRequest'] == null) {
            throw new runtime.RequiredError(
                'skipGoodsFeedbackReactionRequest',
                'Required parameter "skipGoodsFeedbackReactionRequest" was null or undefined when calling skipGoodsFeedbacksReaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/skip-reaction`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkipGoodsFeedbackReactionRequestToJSON(requestParameters['skipGoodsFeedbackReactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отказ от ответа на отзывы
     */
    async skipGoodsFeedbacksReaction(requestParameters: SkipGoodsFeedbacksReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.skipGoodsFeedbacksReactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Добавление нового или изменение созданного комментария
     */
    async updateGoodsFeedbackCommentRaw(requestParameters: UpdateGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateGoodsFeedbackCommentResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateGoodsFeedbackComment().'
            );
        }

        if (requestParameters['updateGoodsFeedbackCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGoodsFeedbackCommentRequest',
                'Required parameter "updateGoodsFeedbackCommentRequest" was null or undefined when calling updateGoodsFeedbackComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/comments/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGoodsFeedbackCommentRequestToJSON(requestParameters['updateGoodsFeedbackCommentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateGoodsFeedbackCommentResponseFromJSON(jsonValue));
    }

    /**
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Добавление нового или изменение созданного комментария
     */
    async updateGoodsFeedbackComment(requestParameters: UpdateGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateGoodsFeedbackCommentResponse> {
        const response = await this.updateGoodsFeedbackCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
