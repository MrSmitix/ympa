// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    DeleteGoodsFeedbackCommentRequest,
    EmptyApiResponse,
    GetGoodsFeedbackCommentsRequest,
    GetGoodsFeedbackCommentsResponse,
    GetGoodsFeedbackRequest,
    GetGoodsFeedbackResponse,
    SkipGoodsFeedbackReactionRequest,
    UpdateGoodsFeedbackCommentRequest,
    UpdateGoodsFeedbackCommentResponse,
} from '../models';

export interface DeleteGoodsFeedbackCommentRequest {
    businessId: number;
    deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest;
}

export interface GetGoodsFeedbackCommentsRequest {
    businessId: number;
    getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetGoodsFeedbacksRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getGoodsFeedbackRequest?: GetGoodsFeedbackRequest;
}

export interface SkipGoodsFeedbacksReactionRequest {
    businessId: number;
    skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest;
}

export interface UpdateGoodsFeedbackCommentRequest {
    businessId: number;
    updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest;
}

/**
 * no description
 */
export class GoodsFeedbackApi extends BaseAPI {

    /**
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Удаление комментария к отзыву
     */
    deleteGoodsFeedbackComment({ businessId, deleteGoodsFeedbackCommentRequest }: DeleteGoodsFeedbackCommentRequest): Observable<EmptyApiResponse>
    deleteGoodsFeedbackComment({ businessId, deleteGoodsFeedbackCommentRequest }: DeleteGoodsFeedbackCommentRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    deleteGoodsFeedbackComment({ businessId, deleteGoodsFeedbackCommentRequest }: DeleteGoodsFeedbackCommentRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'deleteGoodsFeedbackComment');
        throwIfNullOrUndefined(deleteGoodsFeedbackCommentRequest, 'deleteGoodsFeedbackCommentRequest', 'deleteGoodsFeedbackComment');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/businesses/{businessId}/goods-feedback/comments/delete'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: deleteGoodsFeedbackCommentRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение комментариев к отзыву
     */
    getGoodsFeedbackComments({ businessId, getGoodsFeedbackCommentsRequest, pageToken, limit }: GetGoodsFeedbackCommentsRequest): Observable<GetGoodsFeedbackCommentsResponse>
    getGoodsFeedbackComments({ businessId, getGoodsFeedbackCommentsRequest, pageToken, limit }: GetGoodsFeedbackCommentsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetGoodsFeedbackCommentsResponse>>
    getGoodsFeedbackComments({ businessId, getGoodsFeedbackCommentsRequest, pageToken, limit }: GetGoodsFeedbackCommentsRequest, opts?: OperationOpts): Observable<GetGoodsFeedbackCommentsResponse | AjaxResponse<GetGoodsFeedbackCommentsResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getGoodsFeedbackComments');
        throwIfNullOrUndefined(getGoodsFeedbackCommentsRequest, 'getGoodsFeedbackCommentsRequest', 'getGoodsFeedbackComments');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetGoodsFeedbackCommentsResponse>({
            url: '/businesses/{businessId}/goods-feedback/comments'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: getGoodsFeedbackCommentsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение отзывов о товарах продавца
     */
    getGoodsFeedbacks({ businessId, pageToken, limit, getGoodsFeedbackRequest }: GetGoodsFeedbacksRequest): Observable<GetGoodsFeedbackResponse>
    getGoodsFeedbacks({ businessId, pageToken, limit, getGoodsFeedbackRequest }: GetGoodsFeedbacksRequest, opts?: OperationOpts): Observable<AjaxResponse<GetGoodsFeedbackResponse>>
    getGoodsFeedbacks({ businessId, pageToken, limit, getGoodsFeedbackRequest }: GetGoodsFeedbacksRequest, opts?: OperationOpts): Observable<GetGoodsFeedbackResponse | AjaxResponse<GetGoodsFeedbackResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getGoodsFeedbacks');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetGoodsFeedbackResponse>({
            url: '/businesses/{businessId}/goods-feedback'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: getGoodsFeedbackRequest,
        }, opts?.responseOpts);
    };

    /**
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отказ от ответа на отзывы
     */
    skipGoodsFeedbacksReaction({ businessId, skipGoodsFeedbackReactionRequest }: SkipGoodsFeedbacksReactionRequest): Observable<EmptyApiResponse>
    skipGoodsFeedbacksReaction({ businessId, skipGoodsFeedbackReactionRequest }: SkipGoodsFeedbacksReactionRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    skipGoodsFeedbacksReaction({ businessId, skipGoodsFeedbackReactionRequest }: SkipGoodsFeedbacksReactionRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'skipGoodsFeedbacksReaction');
        throwIfNullOrUndefined(skipGoodsFeedbackReactionRequest, 'skipGoodsFeedbackReactionRequest', 'skipGoodsFeedbacksReaction');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/businesses/{businessId}/goods-feedback/skip-reaction'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: skipGoodsFeedbackReactionRequest,
        }, opts?.responseOpts);
    };

    /**
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Добавление нового или изменение созданного комментария
     */
    updateGoodsFeedbackComment({ businessId, updateGoodsFeedbackCommentRequest }: UpdateGoodsFeedbackCommentRequest): Observable<UpdateGoodsFeedbackCommentResponse>
    updateGoodsFeedbackComment({ businessId, updateGoodsFeedbackCommentRequest }: UpdateGoodsFeedbackCommentRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateGoodsFeedbackCommentResponse>>
    updateGoodsFeedbackComment({ businessId, updateGoodsFeedbackCommentRequest }: UpdateGoodsFeedbackCommentRequest, opts?: OperationOpts): Observable<UpdateGoodsFeedbackCommentResponse | AjaxResponse<UpdateGoodsFeedbackCommentResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updateGoodsFeedbackComment');
        throwIfNullOrUndefined(updateGoodsFeedbackCommentRequest, 'updateGoodsFeedbackCommentRequest', 'updateGoodsFeedbackComment');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateGoodsFeedbackCommentResponse>({
            url: '/businesses/{businessId}/goods-feedback/comments/update'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: updateGoodsFeedbackCommentRequest,
        }, opts?.responseOpts);
    };

}
