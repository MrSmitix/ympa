/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddOffersToArchiveRequest,
  AddOffersToArchiveResponse,
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiLockedErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  DeleteOffersFromArchiveRequest,
  DeleteOffersFromArchiveResponse,
  DeleteOffersRequest,
  DeleteOffersResponse,
  GetOfferMappingsRequest,
  GetOfferMappingsResponse,
  GetSuggestedOfferMappingsRequest,
  GetSuggestedOfferMappingsResponse,
  UpdateOfferMappingsRequest,
  UpdateOfferMappingsResponse,
} from '../models/index';
import {
    AddOffersToArchiveRequestFromJSON,
    AddOffersToArchiveRequestToJSON,
    AddOffersToArchiveResponseFromJSON,
    AddOffersToArchiveResponseToJSON,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiLockedErrorResponseFromJSON,
    ApiLockedErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    DeleteOffersFromArchiveRequestFromJSON,
    DeleteOffersFromArchiveRequestToJSON,
    DeleteOffersFromArchiveResponseFromJSON,
    DeleteOffersFromArchiveResponseToJSON,
    DeleteOffersRequestFromJSON,
    DeleteOffersRequestToJSON,
    DeleteOffersResponseFromJSON,
    DeleteOffersResponseToJSON,
    GetOfferMappingsRequestFromJSON,
    GetOfferMappingsRequestToJSON,
    GetOfferMappingsResponseFromJSON,
    GetOfferMappingsResponseToJSON,
    GetSuggestedOfferMappingsRequestFromJSON,
    GetSuggestedOfferMappingsRequestToJSON,
    GetSuggestedOfferMappingsResponseFromJSON,
    GetSuggestedOfferMappingsResponseToJSON,
    UpdateOfferMappingsRequestFromJSON,
    UpdateOfferMappingsRequestToJSON,
    UpdateOfferMappingsResponseFromJSON,
    UpdateOfferMappingsResponseToJSON,
} from '../models/index';

export interface AddOffersToArchiveOperationRequest {
    businessId: number;
    addOffersToArchiveRequest: AddOffersToArchiveRequest;
}

export interface DeleteOffersOperationRequest {
    businessId: number;
    deleteOffersRequest: DeleteOffersRequest;
}

export interface DeleteOffersFromArchiveOperationRequest {
    businessId: number;
    deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest;
}

export interface GetOfferMappingsOperationRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferMappingsRequest?: GetOfferMappingsRequest;
}

export interface GetSuggestedOfferMappingsOperationRequest {
    businessId: number;
    getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest;
}

export interface UpdateOfferMappingsOperationRequest {
    businessId: number;
    updateOfferMappingsRequest: UpdateOfferMappingsRequest;
}

/**
 * 
 */
export class BusinessOfferMappingsApi extends runtime.BaseAPI {

    /**
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Добавление товаров в архив
     */
    async addOffersToArchiveRaw(requestParameters: AddOffersToArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOffersToArchiveResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling addOffersToArchive().'
            );
        }

        if (requestParameters['addOffersToArchiveRequest'] == null) {
            throw new runtime.RequiredError(
                'addOffersToArchiveRequest',
                'Required parameter "addOffersToArchiveRequest" was null or undefined when calling addOffersToArchive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/archive`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOffersToArchiveRequestToJSON(requestParameters['addOffersToArchiveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOffersToArchiveResponseFromJSON(jsonValue));
    }

    /**
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Добавление товаров в архив
     */
    async addOffersToArchive(requestParameters: AddOffersToArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOffersToArchiveResponse> {
        const response = await this.addOffersToArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из каталога
     */
    async deleteOffersRaw(requestParameters: DeleteOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deleteOffers().'
            );
        }

        if (requestParameters['deleteOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOffersRequest',
                'Required parameter "deleteOffersRequest" was null or undefined when calling deleteOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOffersRequestToJSON(requestParameters['deleteOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOffersResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из каталога
     */
    async deleteOffers(requestParameters: DeleteOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOffersResponse> {
        const response = await this.deleteOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из архива
     */
    async deleteOffersFromArchiveRaw(requestParameters: DeleteOffersFromArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOffersFromArchiveResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deleteOffersFromArchive().'
            );
        }

        if (requestParameters['deleteOffersFromArchiveRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOffersFromArchiveRequest',
                'Required parameter "deleteOffersFromArchiveRequest" was null or undefined when calling deleteOffersFromArchive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/unarchive`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOffersFromArchiveRequestToJSON(requestParameters['deleteOffersFromArchiveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOffersFromArchiveResponseFromJSON(jsonValue));
    }

    /**
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из архива
     */
    async deleteOffersFromArchive(requestParameters: DeleteOffersFromArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOffersFromArchiveResponse> {
        const response = await this.deleteOffersFromArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * Информация о товарах в каталоге
     */
    async getOfferMappingsRaw(requestParameters: GetOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOfferMappingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getOfferMappings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOfferMappingsRequestToJSON(requestParameters['getOfferMappingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferMappingsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * Информация о товарах в каталоге
     */
    async getOfferMappings(requestParameters: GetOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOfferMappingsResponse> {
        const response = await this.getOfferMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     */
    async getSuggestedOfferMappingsRaw(requestParameters: GetSuggestedOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSuggestedOfferMappingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getSuggestedOfferMappings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/suggestions`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSuggestedOfferMappingsRequestToJSON(requestParameters['getSuggestedOfferMappingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSuggestedOfferMappingsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     */
    async getSuggestedOfferMappings(requestParameters: GetSuggestedOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSuggestedOfferMappingsResponse> {
        const response = await this.getSuggestedOfferMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Добавление товаров в каталог и изменение информации о них
     */
    async updateOfferMappingsRaw(requestParameters: UpdateOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOfferMappingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateOfferMappings().'
            );
        }

        if (requestParameters['updateOfferMappingsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOfferMappingsRequest',
                'Required parameter "updateOfferMappingsRequest" was null or undefined when calling updateOfferMappings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOfferMappingsRequestToJSON(requestParameters['updateOfferMappingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOfferMappingsResponseFromJSON(jsonValue));
    }

    /**
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Добавление товаров в каталог и изменение информации о них
     */
    async updateOfferMappings(requestParameters: UpdateOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOfferMappingsResponse> {
        const response = await this.updateOfferMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
