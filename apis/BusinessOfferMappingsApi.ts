// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AddOffersToArchiveRequest,
    AddOffersToArchiveResponse,
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiLockedErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    DeleteOffersFromArchiveRequest,
    DeleteOffersFromArchiveResponse,
    DeleteOffersRequest,
    DeleteOffersResponse,
    GetOfferMappingsRequest,
    GetOfferMappingsResponse,
    GetSuggestedOfferMappingsRequest,
    GetSuggestedOfferMappingsResponse,
    UpdateOfferMappingsRequest,
    UpdateOfferMappingsResponse,
} from '../models';

export interface AddOffersToArchiveRequest {
    businessId: number;
    addOffersToArchiveRequest: AddOffersToArchiveRequest;
}

export interface DeleteOffersRequest {
    businessId: number;
    deleteOffersRequest: DeleteOffersRequest;
}

export interface DeleteOffersFromArchiveRequest {
    businessId: number;
    deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest;
}

export interface GetOfferMappingsRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferMappingsRequest?: GetOfferMappingsRequest;
}

export interface GetSuggestedOfferMappingsRequest {
    businessId: number;
    getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest;
}

export interface UpdateOfferMappingsRequest {
    businessId: number;
    updateOfferMappingsRequest: UpdateOfferMappingsRequest;
}

/**
 * no description
 */
export class BusinessOfferMappingsApi extends BaseAPI {

    /**
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Добавление товаров в архив
     */
    addOffersToArchive({ businessId, addOffersToArchiveRequest }: AddOffersToArchiveRequest): Observable<AddOffersToArchiveResponse>
    addOffersToArchive({ businessId, addOffersToArchiveRequest }: AddOffersToArchiveRequest, opts?: OperationOpts): Observable<AjaxResponse<AddOffersToArchiveResponse>>
    addOffersToArchive({ businessId, addOffersToArchiveRequest }: AddOffersToArchiveRequest, opts?: OperationOpts): Observable<AddOffersToArchiveResponse | AjaxResponse<AddOffersToArchiveResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'addOffersToArchive');
        throwIfNullOrUndefined(addOffersToArchiveRequest, 'addOffersToArchiveRequest', 'addOffersToArchive');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<AddOffersToArchiveResponse>({
            url: '/businesses/{businessId}/offer-mappings/archive'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: addOffersToArchiveRequest,
        }, opts?.responseOpts);
    };

    /**
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из каталога
     */
    deleteOffers({ businessId, deleteOffersRequest }: DeleteOffersRequest): Observable<DeleteOffersResponse>
    deleteOffers({ businessId, deleteOffersRequest }: DeleteOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteOffersResponse>>
    deleteOffers({ businessId, deleteOffersRequest }: DeleteOffersRequest, opts?: OperationOpts): Observable<DeleteOffersResponse | AjaxResponse<DeleteOffersResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'deleteOffers');
        throwIfNullOrUndefined(deleteOffersRequest, 'deleteOffersRequest', 'deleteOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeleteOffersResponse>({
            url: '/businesses/{businessId}/offer-mappings/delete'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: deleteOffersRequest,
        }, opts?.responseOpts);
    };

    /**
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из архива
     */
    deleteOffersFromArchive({ businessId, deleteOffersFromArchiveRequest }: DeleteOffersFromArchiveRequest): Observable<DeleteOffersFromArchiveResponse>
    deleteOffersFromArchive({ businessId, deleteOffersFromArchiveRequest }: DeleteOffersFromArchiveRequest, opts?: OperationOpts): Observable<AjaxResponse<DeleteOffersFromArchiveResponse>>
    deleteOffersFromArchive({ businessId, deleteOffersFromArchiveRequest }: DeleteOffersFromArchiveRequest, opts?: OperationOpts): Observable<DeleteOffersFromArchiveResponse | AjaxResponse<DeleteOffersFromArchiveResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'deleteOffersFromArchive');
        throwIfNullOrUndefined(deleteOffersFromArchiveRequest, 'deleteOffersFromArchiveRequest', 'deleteOffersFromArchive');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<DeleteOffersFromArchiveResponse>({
            url: '/businesses/{businessId}/offer-mappings/unarchive'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: deleteOffersFromArchiveRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * Информация о товарах в каталоге
     */
    getOfferMappings({ businessId, pageToken, limit, getOfferMappingsRequest }: GetOfferMappingsRequest): Observable<GetOfferMappingsResponse>
    getOfferMappings({ businessId, pageToken, limit, getOfferMappingsRequest }: GetOfferMappingsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOfferMappingsResponse>>
    getOfferMappings({ businessId, pageToken, limit, getOfferMappingsRequest }: GetOfferMappingsRequest, opts?: OperationOpts): Observable<GetOfferMappingsResponse | AjaxResponse<GetOfferMappingsResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getOfferMappings');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetOfferMappingsResponse>({
            url: '/businesses/{businessId}/offer-mappings'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            query,
            body: getOfferMappingsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     */
    getSuggestedOfferMappings({ businessId, getSuggestedOfferMappingsRequest }: GetSuggestedOfferMappingsRequest): Observable<GetSuggestedOfferMappingsResponse>
    getSuggestedOfferMappings({ businessId, getSuggestedOfferMappingsRequest }: GetSuggestedOfferMappingsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetSuggestedOfferMappingsResponse>>
    getSuggestedOfferMappings({ businessId, getSuggestedOfferMappingsRequest }: GetSuggestedOfferMappingsRequest, opts?: OperationOpts): Observable<GetSuggestedOfferMappingsResponse | AjaxResponse<GetSuggestedOfferMappingsResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'getSuggestedOfferMappings');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetSuggestedOfferMappingsResponse>({
            url: '/businesses/{businessId}/offer-mappings/suggestions'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: getSuggestedOfferMappingsRequest,
        }, opts?.responseOpts);
    };

    /**
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Добавление товаров в каталог и изменение информации о них
     */
    updateOfferMappings({ businessId, updateOfferMappingsRequest }: UpdateOfferMappingsRequest): Observable<UpdateOfferMappingsResponse>
    updateOfferMappings({ businessId, updateOfferMappingsRequest }: UpdateOfferMappingsRequest, opts?: OperationOpts): Observable<AjaxResponse<UpdateOfferMappingsResponse>>
    updateOfferMappings({ businessId, updateOfferMappingsRequest }: UpdateOfferMappingsRequest, opts?: OperationOpts): Observable<UpdateOfferMappingsResponse | AjaxResponse<UpdateOfferMappingsResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updateOfferMappings');
        throwIfNullOrUndefined(updateOfferMappingsRequest, 'updateOfferMappingsRequest', 'updateOfferMappings');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<UpdateOfferMappingsResponse>({
            url: '/businesses/{businessId}/offer-mappings/update'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: updateOfferMappingsRequest,
        }, opts?.responseOpts);
    };

}
