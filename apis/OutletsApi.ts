/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  ChangeOutletRequest,
  CreateOutletResponse,
  EmptyApiResponse,
  GetOutletResponse,
  GetOutletsResponse,
} from '../models/index';
import {
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    ChangeOutletRequestFromJSON,
    ChangeOutletRequestToJSON,
    CreateOutletResponseFromJSON,
    CreateOutletResponseToJSON,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    GetOutletResponseFromJSON,
    GetOutletResponseToJSON,
    GetOutletsResponseFromJSON,
    GetOutletsResponseToJSON,
} from '../models/index';

export interface CreateOutletRequest {
    campaignId: number;
    changeOutletRequest: ChangeOutletRequest;
}

export interface DeleteOutletRequest {
    campaignId: number;
    outletId: number;
}

export interface GetOutletRequest {
    campaignId: number;
    outletId: number;
}

export interface GetOutletsRequest {
    campaignId: number;
    pageToken?: string;
    regionId?: number;
    shopOutletCode?: string;
    regionId2?: number;
}

export interface UpdateOutletRequest {
    campaignId: number;
    outletId: number;
    changeOutletRequest: ChangeOutletRequest;
}

/**
 * 
 */
export class OutletsApi extends runtime.BaseAPI {

    /**
     * Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Создание точки продаж
     */
    async createOutletRaw(requestParameters: CreateOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateOutletResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling createOutlet().'
            );
        }

        if (requestParameters['changeOutletRequest'] == null) {
            throw new runtime.RequiredError(
                'changeOutletRequest',
                'Required parameter "changeOutletRequest" was null or undefined when calling createOutlet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/outlets`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeOutletRequestToJSON(requestParameters['changeOutletRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateOutletResponseFromJSON(jsonValue));
    }

    /**
     * Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Создание точки продаж
     */
    async createOutlet(requestParameters: CreateOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateOutletResponse> {
        const response = await this.createOutletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Удаление точки продаж
     */
    async deleteOutletRaw(requestParameters: DeleteOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteOutlet().'
            );
        }

        if (requestParameters['outletId'] == null) {
            throw new runtime.RequiredError(
                'outletId',
                'Required parameter "outletId" was null or undefined when calling deleteOutlet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/outlets/{outletId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"outletId"}}`, encodeURIComponent(String(requestParameters['outletId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Удаление точки продаж
     */
    async deleteOutlet(requestParameters: DeleteOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.deleteOutletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о точках продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Информация об одной точке продаж
     */
    async getOutletRaw(requestParameters: GetOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOutletResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOutlet().'
            );
        }

        if (requestParameters['outletId'] == null) {
            throw new runtime.RequiredError(
                'outletId',
                'Required parameter "outletId" was null or undefined when calling getOutlet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/outlets/{outletId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"outletId"}}`, encodeURIComponent(String(requestParameters['outletId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOutletResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о точках продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Информация об одной точке продаж
     */
    async getOutlet(requestParameters: GetOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOutletResponse> {
        const response = await this.getOutletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список точек продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Информация о нескольких точках продаж
     */
    async getOutletsRaw(requestParameters: GetOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOutletsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOutlets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['regionId'] != null) {
            queryParameters['region_id'] = requestParameters['regionId'];
        }

        if (requestParameters['shopOutletCode'] != null) {
            queryParameters['shop_outlet_code'] = requestParameters['shopOutletCode'];
        }

        if (requestParameters['regionId2'] != null) {
            queryParameters['regionId'] = requestParameters['regionId2'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/outlets`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOutletsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список точек продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Информация о нескольких точках продаж
     */
    async getOutlets(requestParameters: GetOutletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOutletsResponse> {
        const response = await this.getOutletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Изменяет информацию о точке продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Изменение информации о точке продаж
     */
    async updateOutletRaw(requestParameters: UpdateOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updateOutlet().'
            );
        }

        if (requestParameters['outletId'] == null) {
            throw new runtime.RequiredError(
                'outletId',
                'Required parameter "outletId" was null or undefined when calling updateOutlet().'
            );
        }

        if (requestParameters['changeOutletRequest'] == null) {
            throw new runtime.RequiredError(
                'changeOutletRequest',
                'Required parameter "changeOutletRequest" was null or undefined when calling updateOutlet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/outlets/{outletId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"outletId"}}`, encodeURIComponent(String(requestParameters['outletId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeOutletRequestToJSON(requestParameters['changeOutletRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Изменяет информацию о точке продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Изменение информации о точке продаж
     */
    async updateOutlet(requestParameters: UpdateOutletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.updateOutletRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
