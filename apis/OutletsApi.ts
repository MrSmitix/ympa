// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    ChangeOutletRequest,
    CreateOutletResponse,
    EmptyApiResponse,
    GetOutletResponse,
    GetOutletsResponse,
} from '../models';

export interface CreateOutletRequest {
    campaignId: number;
    changeOutletRequest: ChangeOutletRequest;
}

export interface DeleteOutletRequest {
    campaignId: number;
    outletId: number;
}

export interface GetOutletRequest {
    campaignId: number;
    outletId: number;
}

export interface GetOutletsRequest {
    campaignId: number;
    pageToken?: string;
    regionId?: number;
    shopOutletCode?: string;
    regionId2?: number;
}

export interface UpdateOutletRequest {
    campaignId: number;
    outletId: number;
    changeOutletRequest: ChangeOutletRequest;
}

/**
 * no description
 */
export class OutletsApi extends BaseAPI {

    /**
     * Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Создание точки продаж
     */
    createOutlet({ campaignId, changeOutletRequest }: CreateOutletRequest): Observable<CreateOutletResponse>
    createOutlet({ campaignId, changeOutletRequest }: CreateOutletRequest, opts?: OperationOpts): Observable<AjaxResponse<CreateOutletResponse>>
    createOutlet({ campaignId, changeOutletRequest }: CreateOutletRequest, opts?: OperationOpts): Observable<CreateOutletResponse | AjaxResponse<CreateOutletResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'createOutlet');
        throwIfNullOrUndefined(changeOutletRequest, 'changeOutletRequest', 'createOutlet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CreateOutletResponse>({
            url: '/campaigns/{campaignId}/outlets'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: changeOutletRequest,
        }, opts?.responseOpts);
    };

    /**
     * Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Удаление точки продаж
     */
    deleteOutlet({ campaignId, outletId }: DeleteOutletRequest): Observable<EmptyApiResponse>
    deleteOutlet({ campaignId, outletId }: DeleteOutletRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    deleteOutlet({ campaignId, outletId }: DeleteOutletRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'deleteOutlet');
        throwIfNullOrUndefined(outletId, 'outletId', 'deleteOutlet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/outlets/{outletId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{outletId}', encodeURI(outletId)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает информацию о точках продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Информация об одной точке продаж
     */
    getOutlet({ campaignId, outletId }: GetOutletRequest): Observable<GetOutletResponse>
    getOutlet({ campaignId, outletId }: GetOutletRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOutletResponse>>
    getOutlet({ campaignId, outletId }: GetOutletRequest, opts?: OperationOpts): Observable<GetOutletResponse | AjaxResponse<GetOutletResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOutlet');
        throwIfNullOrUndefined(outletId, 'outletId', 'getOutlet');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetOutletResponse>({
            url: '/campaigns/{campaignId}/outlets/{outletId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{outletId}', encodeURI(outletId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список точек продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Информация о нескольких точках продаж
     */
    getOutlets({ campaignId, pageToken, regionId, shopOutletCode, regionId2 }: GetOutletsRequest): Observable<GetOutletsResponse>
    getOutlets({ campaignId, pageToken, regionId, shopOutletCode, regionId2 }: GetOutletsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOutletsResponse>>
    getOutlets({ campaignId, pageToken, regionId, shopOutletCode, regionId2 }: GetOutletsRequest, opts?: OperationOpts): Observable<GetOutletsResponse | AjaxResponse<GetOutletsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOutlets');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (regionId != null) { query['region_id'] = regionId; }
        if (shopOutletCode != null) { query['shop_outlet_code'] = shopOutletCode; }
        if (regionId2 != null) { query['regionId'] = regionId2; }

        return this.request<GetOutletsResponse>({
            url: '/campaigns/{campaignId}/outlets'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Изменяет информацию о точке продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * Изменение информации о точке продаж
     */
    updateOutlet({ campaignId, outletId, changeOutletRequest }: UpdateOutletRequest): Observable<EmptyApiResponse>
    updateOutlet({ campaignId, outletId, changeOutletRequest }: UpdateOutletRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    updateOutlet({ campaignId, outletId, changeOutletRequest }: UpdateOutletRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateOutlet');
        throwIfNullOrUndefined(outletId, 'outletId', 'updateOutlet');
        throwIfNullOrUndefined(changeOutletRequest, 'changeOutletRequest', 'updateOutlet');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/outlets/{outletId}'.replace('{campaignId}', encodeURI(campaignId)).replace('{outletId}', encodeURI(outletId)),
            method: 'PUT',
            headers,
            body: changeOutletRequest,
        }, opts?.responseOpts);
    };

}
