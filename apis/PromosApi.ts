/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  DeletePromoOffersRequest,
  DeletePromoOffersResponse,
  GetPromoOffersRequest,
  GetPromoOffersResponse,
  GetPromosRequest,
  GetPromosResponse,
  UpdatePromoOffersRequest,
  UpdatePromoOffersResponse,
} from '../models/index';
import {
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    DeletePromoOffersRequestFromJSON,
    DeletePromoOffersRequestToJSON,
    DeletePromoOffersResponseFromJSON,
    DeletePromoOffersResponseToJSON,
    GetPromoOffersRequestFromJSON,
    GetPromoOffersRequestToJSON,
    GetPromoOffersResponseFromJSON,
    GetPromoOffersResponseToJSON,
    GetPromosRequestFromJSON,
    GetPromosRequestToJSON,
    GetPromosResponseFromJSON,
    GetPromosResponseToJSON,
    UpdatePromoOffersRequestFromJSON,
    UpdatePromoOffersRequestToJSON,
    UpdatePromoOffersResponseFromJSON,
    UpdatePromoOffersResponseToJSON,
} from '../models/index';

export interface DeletePromoOffersOperationRequest {
    businessId: number;
    deletePromoOffersRequest: DeletePromoOffersRequest;
}

export interface GetPromoOffersOperationRequest {
    businessId: number;
    getPromoOffersRequest: GetPromoOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetPromosOperationRequest {
    businessId: number;
    getPromosRequest?: GetPromosRequest;
}

export interface UpdatePromoOffersOperationRequest {
    businessId: number;
    updatePromoOffersRequest: UpdatePromoOffersRequest;
}

/**
 * 
 */
export class PromosApi extends runtime.BaseAPI {

    /**
     * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Удаление товаров из акции
     */
    async deletePromoOffersRaw(requestParameters: DeletePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePromoOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deletePromoOffers().'
            );
        }

        if (requestParameters['deletePromoOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deletePromoOffersRequest',
                'Required parameter "deletePromoOffersRequest" was null or undefined when calling deletePromoOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos/offers/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeletePromoOffersRequestToJSON(requestParameters['deletePromoOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePromoOffersResponseFromJSON(jsonValue));
    }

    /**
     * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Удаление товаров из акции
     */
    async deletePromoOffers(requestParameters: DeletePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePromoOffersResponse> {
        const response = await this.deletePromoOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     */
    async getPromoOffersRaw(requestParameters: GetPromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPromoOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getPromoOffers().'
            );
        }

        if (requestParameters['getPromoOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'getPromoOffersRequest',
                'Required parameter "getPromoOffersRequest" was null or undefined when calling getPromoOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos/offers`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPromoOffersRequestToJSON(requestParameters['getPromoOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPromoOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     */
    async getPromoOffers(requestParameters: GetPromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPromoOffersResponse> {
        const response = await this.getPromoOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Получение списка акций
     */
    async getPromosRaw(requestParameters: GetPromosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPromosResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getPromos().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPromosRequestToJSON(requestParameters['getPromosRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPromosResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Получение списка акций
     */
    async getPromos(requestParameters: GetPromosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPromosResponse> {
        const response = await this.getPromosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Добавление товаров в акцию или изменение их цен
     */
    async updatePromoOffersRaw(requestParameters: UpdatePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePromoOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updatePromoOffers().'
            );
        }

        if (requestParameters['updatePromoOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePromoOffersRequest',
                'Required parameter "updatePromoOffersRequest" was null or undefined when calling updatePromoOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos/offers/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePromoOffersRequestToJSON(requestParameters['updatePromoOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePromoOffersResponseFromJSON(jsonValue));
    }

    /**
     * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Добавление товаров в акцию или изменение их цен
     */
    async updatePromoOffers(requestParameters: UpdatePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePromoOffersResponse> {
        const response = await this.updatePromoOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
