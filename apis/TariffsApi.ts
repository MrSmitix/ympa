// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    CalculateTariffsRequest,
    CalculateTariffsResponse,
} from '../models';

export interface CalculateTariffsRequest {
    calculateTariffsRequest: CalculateTariffsRequest;
}

/**
 * no description
 */
export class TariffsApi extends BaseAPI {

    /**
     * Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Калькулятор стоимости услуг
     */
    calculateTariffs({ calculateTariffsRequest }: CalculateTariffsRequest): Observable<CalculateTariffsResponse>
    calculateTariffs({ calculateTariffsRequest }: CalculateTariffsRequest, opts?: OperationOpts): Observable<AjaxResponse<CalculateTariffsResponse>>
    calculateTariffs({ calculateTariffsRequest }: CalculateTariffsRequest, opts?: OperationOpts): Observable<CalculateTariffsResponse | AjaxResponse<CalculateTariffsResponse>> {
        throwIfNullOrUndefined(calculateTariffsRequest, 'calculateTariffsRequest', 'calculateTariffs');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<CalculateTariffsResponse>({
            url: '/tariffs/calculate',
            method: 'POST',
            headers,
            body: calculateTariffsRequest,
        }, opts?.responseOpts);
    };

}
