// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiLockedErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    EmptyApiResponse,
    GetPricesByOfferIdsRequest,
    GetPricesByOfferIdsResponse,
    GetPricesResponse,
    SuggestPricesRequest,
    SuggestPricesResponse,
    UpdateBusinessPricesRequest,
    UpdatePricesRequest,
} from '../models';

export interface GetPricesRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    archived?: boolean;
}

export interface GetPricesByOfferIdsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getPricesByOfferIdsRequest?: GetPricesByOfferIdsRequest;
}

export interface GetSuggestedPricesRequest {
    campaignId: number;
    suggestPricesRequest: SuggestPricesRequest;
}

export interface UpdateBusinessPricesRequest {
    businessId: number;
    updateBusinessPricesRequest: UpdateBusinessPricesRequest;
}

export interface UpdatePricesRequest {
    campaignId: number;
    updatePricesRequest: UpdatePricesRequest;
}

/**
 * no description
 */
export class PricesApi extends BaseAPI {

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
     * Список цен
     */
    getPrices({ campaignId, pageToken, limit, archived }: GetPricesRequest): Observable<GetPricesResponse>
    getPrices({ campaignId, pageToken, limit, archived }: GetPricesRequest, opts?: OperationOpts): Observable<AjaxResponse<GetPricesResponse>>
    getPrices({ campaignId, pageToken, limit, archived }: GetPricesRequest, opts?: OperationOpts): Observable<GetPricesResponse | AjaxResponse<GetPricesResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getPrices');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }
        if (archived != null) { query['archived'] = archived; }

        return this.request<GetPricesResponse>({
            url: '/campaigns/{campaignId}/offer-prices'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
     * Просмотр цен на указанные товары в магазине
     */
    getPricesByOfferIds({ campaignId, pageToken, limit, getPricesByOfferIdsRequest }: GetPricesByOfferIdsRequest): Observable<GetPricesByOfferIdsResponse>
    getPricesByOfferIds({ campaignId, pageToken, limit, getPricesByOfferIdsRequest }: GetPricesByOfferIdsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetPricesByOfferIdsResponse>>
    getPricesByOfferIds({ campaignId, pageToken, limit, getPricesByOfferIdsRequest }: GetPricesByOfferIdsRequest, opts?: OperationOpts): Observable<GetPricesByOfferIdsResponse | AjaxResponse<GetPricesByOfferIdsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getPricesByOfferIds');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetPricesByOfferIdsResponse>({
            url: '/campaigns/{campaignId}/offer-prices'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            query,
            body: getPricesByOfferIdsRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Цены для продвижения товаров
     */
    getSuggestedPrices({ campaignId, suggestPricesRequest }: GetSuggestedPricesRequest): Observable<SuggestPricesResponse>
    getSuggestedPrices({ campaignId, suggestPricesRequest }: GetSuggestedPricesRequest, opts?: OperationOpts): Observable<AjaxResponse<SuggestPricesResponse>>
    getSuggestedPrices({ campaignId, suggestPricesRequest }: GetSuggestedPricesRequest, opts?: OperationOpts): Observable<SuggestPricesResponse | AjaxResponse<SuggestPricesResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getSuggestedPrices');
        throwIfNullOrUndefined(suggestPricesRequest, 'suggestPricesRequest', 'getSuggestedPrices');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<SuggestPricesResponse>({
            url: '/campaigns/{campaignId}/offer-prices/suggestions'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: suggestPricesRequest,
        }, opts?.responseOpts);
    };

    /**
     * Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Установка цен на товары во всех магазинах
     */
    updateBusinessPrices({ businessId, updateBusinessPricesRequest }: UpdateBusinessPricesRequest): Observable<EmptyApiResponse>
    updateBusinessPrices({ businessId, updateBusinessPricesRequest }: UpdateBusinessPricesRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    updateBusinessPrices({ businessId, updateBusinessPricesRequest }: UpdateBusinessPricesRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(businessId, 'businessId', 'updateBusinessPrices');
        throwIfNullOrUndefined(updateBusinessPricesRequest, 'updateBusinessPricesRequest', 'updateBusinessPrices');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/businesses/{businessId}/offer-prices/updates'.replace('{businessId}', encodeURI(businessId)),
            method: 'POST',
            headers,
            body: updateBusinessPricesRequest,
        }, opts?.responseOpts);
    };

    /**
     * Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Установка цен на товары в конкретном магазине
     */
    updatePrices({ campaignId, updatePricesRequest }: UpdatePricesRequest): Observable<EmptyApiResponse>
    updatePrices({ campaignId, updatePricesRequest }: UpdatePricesRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    updatePrices({ campaignId, updatePricesRequest }: UpdatePricesRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updatePrices');
        throwIfNullOrUndefined(updatePricesRequest, 'updatePricesRequest', 'updatePrices');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/offer-prices/updates'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: updatePricesRequest,
        }, opts?.responseOpts);
    };

}
