// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    EmptyApiResponse,
    GetOrderBuyerInfoResponse,
    SetOrderDeliveryDateRequest,
    SetOrderDeliveryTrackCodeRequest,
    UpdateOrderStorageLimitRequest,
    VerifyOrderEacRequest,
    VerifyOrderEacResponse,
} from '../models';

export interface GetOrderBuyerInfoRequest {
    campaignId: number;
    orderId: number;
}

export interface SetOrderDeliveryDateRequest {
    campaignId: number;
    orderId: number;
    setOrderDeliveryDateRequest: SetOrderDeliveryDateRequest;
}

export interface SetOrderDeliveryTrackCodeRequest {
    campaignId: number;
    orderId: number;
    setOrderDeliveryTrackCodeRequest: SetOrderDeliveryTrackCodeRequest;
}

export interface UpdateOrderStorageLimitRequest {
    campaignId: number;
    orderId: number;
    updateOrderStorageLimitRequest: UpdateOrderStorageLimitRequest;
}

export interface VerifyOrderEacRequest {
    campaignId: number;
    orderId: number;
    verifyOrderEacRequest: VerifyOrderEacRequest;
}

/**
 * no description
 */
export class OrderDeliveryApi extends BaseAPI {

    /**
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * Информация о покупателе — физическом лице
     */
    getOrderBuyerInfo({ campaignId, orderId }: GetOrderBuyerInfoRequest): Observable<GetOrderBuyerInfoResponse>
    getOrderBuyerInfo({ campaignId, orderId }: GetOrderBuyerInfoRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOrderBuyerInfoResponse>>
    getOrderBuyerInfo({ campaignId, orderId }: GetOrderBuyerInfoRequest, opts?: OperationOpts): Observable<GetOrderBuyerInfoResponse | AjaxResponse<GetOrderBuyerInfoResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOrderBuyerInfo');
        throwIfNullOrUndefined(orderId, 'orderId', 'getOrderBuyerInfo');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<GetOrderBuyerInfoResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/buyer'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Метод изменяет дату доставки заказа в статусе `PROCESSING` или `DELIVERY`. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Изменение даты доставки заказа
     */
    setOrderDeliveryDate({ campaignId, orderId, setOrderDeliveryDateRequest }: SetOrderDeliveryDateRequest): Observable<EmptyApiResponse>
    setOrderDeliveryDate({ campaignId, orderId, setOrderDeliveryDateRequest }: SetOrderDeliveryDateRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    setOrderDeliveryDate({ campaignId, orderId, setOrderDeliveryDateRequest }: SetOrderDeliveryDateRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setOrderDeliveryDate');
        throwIfNullOrUndefined(orderId, 'orderId', 'setOrderDeliveryDate');
        throwIfNullOrUndefined(setOrderDeliveryDateRequest, 'setOrderDeliveryDateRequest', 'setOrderDeliveryDate');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/delivery/date'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: setOrderDeliveryDateRequest,
        }, opts?.responseOpts);
    };

    /**
     * {% note warning \"Этот запрос только для DBS\" %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY` или `PICKUP`.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Передача трек‑номера посылки
     */
    setOrderDeliveryTrackCode({ campaignId, orderId, setOrderDeliveryTrackCodeRequest }: SetOrderDeliveryTrackCodeRequest): Observable<EmptyApiResponse>
    setOrderDeliveryTrackCode({ campaignId, orderId, setOrderDeliveryTrackCodeRequest }: SetOrderDeliveryTrackCodeRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    setOrderDeliveryTrackCode({ campaignId, orderId, setOrderDeliveryTrackCodeRequest }: SetOrderDeliveryTrackCodeRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'setOrderDeliveryTrackCode');
        throwIfNullOrUndefined(orderId, 'orderId', 'setOrderDeliveryTrackCode');
        throwIfNullOrUndefined(setOrderDeliveryTrackCodeRequest, 'setOrderDeliveryTrackCodeRequest', 'setOrderDeliveryTrackCode');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/delivery/track'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'POST',
            headers,
            body: setOrderDeliveryTrackCodeRequest,
        }, opts?.responseOpts);
    };

    /**
     * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе `PICKUP`. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре `outletStorageLimitDate` запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Продление срока хранения заказа
     */
    updateOrderStorageLimit({ campaignId, orderId, updateOrderStorageLimitRequest }: UpdateOrderStorageLimitRequest): Observable<EmptyApiResponse>
    updateOrderStorageLimit({ campaignId, orderId, updateOrderStorageLimitRequest }: UpdateOrderStorageLimitRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    updateOrderStorageLimit({ campaignId, orderId, updateOrderStorageLimitRequest }: UpdateOrderStorageLimitRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateOrderStorageLimit');
        throwIfNullOrUndefined(orderId, 'orderId', 'updateOrderStorageLimit');
        throwIfNullOrUndefined(updateOrderStorageLimitRequest, 'updateOrderStorageLimitRequest', 'updateOrderStorageLimit');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: updateOrderStorageLimitRequest,
        }, opts?.responseOpts);
    };

    /**
     * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре `delivery`, вложенном в `order` будет возвращаться параметр `eacType` с типом `Enum` — тип кода подтверждения для передачи заказа.  Возможные значения: `MERCHANT_TO_COURIER` — магазин называет код курьеру, `COURIER_TO_MERCHANT` — курьер называет код магазину.  Параметр `eacType` возвращается при статусах заказа `COURIER_FOUND`, `COURIER_ARRIVED_TO_SENDER` и `DELIVERY_SERVICE_UNDELIVERED`. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Передача кода подтверждения
     */
    verifyOrderEac({ campaignId, orderId, verifyOrderEacRequest }: VerifyOrderEacRequest): Observable<VerifyOrderEacResponse>
    verifyOrderEac({ campaignId, orderId, verifyOrderEacRequest }: VerifyOrderEacRequest, opts?: OperationOpts): Observable<AjaxResponse<VerifyOrderEacResponse>>
    verifyOrderEac({ campaignId, orderId, verifyOrderEacRequest }: VerifyOrderEacRequest, opts?: OperationOpts): Observable<VerifyOrderEacResponse | AjaxResponse<VerifyOrderEacResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'verifyOrderEac');
        throwIfNullOrUndefined(orderId, 'orderId', 'verifyOrderEac');
        throwIfNullOrUndefined(verifyOrderEacRequest, 'verifyOrderEacRequest', 'verifyOrderEac');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<VerifyOrderEacResponse>({
            url: '/campaigns/{campaignId}/orders/{orderId}/verifyEac'.replace('{campaignId}', encodeURI(campaignId)).replace('{orderId}', encodeURI(orderId)),
            method: 'PUT',
            headers,
            body: verifyOrderEacRequest,
        }, opts?.responseOpts);
    };

}
