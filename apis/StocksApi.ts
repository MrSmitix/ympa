// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    EmptyApiResponse,
    GetWarehouseStocksRequest,
    GetWarehouseStocksResponse,
    UpdateStocksRequest,
} from '../models';

export interface GetStocksRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getWarehouseStocksRequest?: GetWarehouseStocksRequest;
}

export interface UpdateStocksRequest {
    campaignId: number;
    updateStocksRequest: UpdateStocksRequest;
}

/**
 * no description
 */
export class StocksApi extends BaseAPI {

    /**
     * Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
     * Информация об остатках и оборачиваемости
     */
    getStocks({ campaignId, pageToken, limit, getWarehouseStocksRequest }: GetStocksRequest): Observable<GetWarehouseStocksResponse>
    getStocks({ campaignId, pageToken, limit, getWarehouseStocksRequest }: GetStocksRequest, opts?: OperationOpts): Observable<AjaxResponse<GetWarehouseStocksResponse>>
    getStocks({ campaignId, pageToken, limit, getWarehouseStocksRequest }: GetStocksRequest, opts?: OperationOpts): Observable<GetWarehouseStocksResponse | AjaxResponse<GetWarehouseStocksResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getStocks');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetWarehouseStocksResponse>({
            url: '/campaigns/{campaignId}/offers/stocks'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            query,
            body: getWarehouseStocksRequest,
        }, opts?.responseOpts);
    };

    /**
     * Передает данные об остатках товаров на витрине.  Обязательно указывайте SKU **в точности** так, как он указан в каталоге. Например, _557722_ и _0557722_ — это два разных SKU.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-| 
     * Передача информации об остатках
     */
    updateStocks({ campaignId, updateStocksRequest }: UpdateStocksRequest): Observable<EmptyApiResponse>
    updateStocks({ campaignId, updateStocksRequest }: UpdateStocksRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    updateStocks({ campaignId, updateStocksRequest }: UpdateStocksRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'updateStocks');
        throwIfNullOrUndefined(updateStocksRequest, 'updateStocksRequest', 'updateStocks');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/offers/stocks'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'PUT',
            headers,
            body: updateStocksRequest,
        }, opts?.responseOpts);
    };

}
