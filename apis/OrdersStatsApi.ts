// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    GetOrdersStatsRequest,
    GetOrdersStatsResponse,
} from '../models';

export interface GetOrdersStatsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getOrdersStatsRequest?: GetOrdersStatsRequest;
}

/**
 * no description
 */
export class OrdersStatsApi extends BaseAPI {

    /**
     * Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Детальная информация по заказам
     */
    getOrdersStats({ campaignId, pageToken, limit, getOrdersStatsRequest }: GetOrdersStatsRequest): Observable<GetOrdersStatsResponse>
    getOrdersStats({ campaignId, pageToken, limit, getOrdersStatsRequest }: GetOrdersStatsRequest, opts?: OperationOpts): Observable<AjaxResponse<GetOrdersStatsResponse>>
    getOrdersStats({ campaignId, pageToken, limit, getOrdersStatsRequest }: GetOrdersStatsRequest, opts?: OperationOpts): Observable<GetOrdersStatsResponse | AjaxResponse<GetOrdersStatsResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getOrdersStats');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<GetOrdersStatsResponse>({
            url: '/campaigns/{campaignId}/stats/orders'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            query,
            body: getOrdersStatsRequest,
        }, opts?.responseOpts);
    };

}
