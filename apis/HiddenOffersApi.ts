/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddHiddenOffersRequest,
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiLockedErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  DeleteHiddenOffersRequest,
  EmptyApiResponse,
  GetHiddenOffersResponse,
} from '../models/index';
import {
    AddHiddenOffersRequestFromJSON,
    AddHiddenOffersRequestToJSON,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiLockedErrorResponseFromJSON,
    ApiLockedErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    DeleteHiddenOffersRequestFromJSON,
    DeleteHiddenOffersRequestToJSON,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    GetHiddenOffersResponseFromJSON,
    GetHiddenOffersResponseToJSON,
} from '../models/index';

export interface AddHiddenOffersOperationRequest {
    campaignId: number;
    addHiddenOffersRequest: AddHiddenOffersRequest;
}

export interface DeleteHiddenOffersOperationRequest {
    campaignId: number;
    deleteHiddenOffersRequest: DeleteHiddenOffersRequest;
}

export interface GetHiddenOffersRequest {
    campaignId: number;
    offerId?: Array<string>;
    pageToken?: string;
    limit?: number;
    offset?: number;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class HiddenOffersApi extends runtime.BaseAPI {

    /**
     * Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Скрытие товаров и настройки скрытия
     */
    async addHiddenOffersRaw(requestParameters: AddHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling addHiddenOffers().'
            );
        }

        if (requestParameters['addHiddenOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'addHiddenOffersRequest',
                'Required parameter "addHiddenOffersRequest" was null or undefined when calling addHiddenOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/hidden-offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddHiddenOffersRequestToJSON(requestParameters['addHiddenOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Скрытие товаров и настройки скрытия
     */
    async addHiddenOffers(requestParameters: AddHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.addHiddenOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Возобновление показа товаров
     */
    async deleteHiddenOffersRaw(requestParameters: DeleteHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteHiddenOffers().'
            );
        }

        if (requestParameters['deleteHiddenOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteHiddenOffersRequest',
                'Required parameter "deleteHiddenOffersRequest" was null or undefined when calling deleteHiddenOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/hidden-offers/delete`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteHiddenOffersRequestToJSON(requestParameters['deleteHiddenOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Возобновление показа товаров
     */
    async deleteHiddenOffers(requestParameters: DeleteHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.deleteHiddenOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Информация о скрытых вами товарах
     */
    async getHiddenOffersRaw(requestParameters: GetHiddenOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHiddenOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getHiddenOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offerId'] != null) {
            queryParameters['offer_id'] = requestParameters['offerId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/hidden-offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHiddenOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Информация о скрытых вами товарах
     */
    async getHiddenOffers(requestParameters: GetHiddenOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHiddenOffersResponse> {
        const response = await this.getHiddenOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
