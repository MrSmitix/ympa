// tslint:disable
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    AddHiddenOffersRequest,
    ApiClientDataErrorResponse,
    ApiForbiddenErrorResponse,
    ApiLimitErrorResponse,
    ApiLockedErrorResponse,
    ApiNotFoundErrorResponse,
    ApiServerErrorResponse,
    ApiUnauthorizedErrorResponse,
    DeleteHiddenOffersRequest,
    EmptyApiResponse,
    GetHiddenOffersResponse,
} from '../models';

export interface AddHiddenOffersRequest {
    campaignId: number;
    addHiddenOffersRequest: AddHiddenOffersRequest;
}

export interface DeleteHiddenOffersRequest {
    campaignId: number;
    deleteHiddenOffersRequest: DeleteHiddenOffersRequest;
}

export interface GetHiddenOffersRequest {
    campaignId: number;
    offerId?: Array<string>;
    pageToken?: string;
    limit?: number;
    offset?: number;
    page?: number;
    pageSize?: number;
}

/**
 * no description
 */
export class HiddenOffersApi extends BaseAPI {

    /**
     * Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Скрытие товаров и настройки скрытия
     */
    addHiddenOffers({ campaignId, addHiddenOffersRequest }: AddHiddenOffersRequest): Observable<EmptyApiResponse>
    addHiddenOffers({ campaignId, addHiddenOffersRequest }: AddHiddenOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    addHiddenOffers({ campaignId, addHiddenOffersRequest }: AddHiddenOffersRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'addHiddenOffers');
        throwIfNullOrUndefined(addHiddenOffersRequest, 'addHiddenOffersRequest', 'addHiddenOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/hidden-offers'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: addHiddenOffersRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Возобновление показа товаров
     */
    deleteHiddenOffers({ campaignId, deleteHiddenOffersRequest }: DeleteHiddenOffersRequest): Observable<EmptyApiResponse>
    deleteHiddenOffers({ campaignId, deleteHiddenOffersRequest }: DeleteHiddenOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<EmptyApiResponse>>
    deleteHiddenOffers({ campaignId, deleteHiddenOffersRequest }: DeleteHiddenOffersRequest, opts?: OperationOpts): Observable<EmptyApiResponse | AjaxResponse<EmptyApiResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'deleteHiddenOffers');
        throwIfNullOrUndefined(deleteHiddenOffersRequest, 'deleteHiddenOffersRequest', 'deleteHiddenOffers');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        return this.request<EmptyApiResponse>({
            url: '/campaigns/{campaignId}/hidden-offers/delete'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'POST',
            headers,
            body: deleteHiddenOffersRequest,
        }, opts?.responseOpts);
    };

    /**
     * Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Информация о скрытых вами товарах
     */
    getHiddenOffers({ campaignId, offerId, pageToken, limit, offset, page, pageSize }: GetHiddenOffersRequest): Observable<GetHiddenOffersResponse>
    getHiddenOffers({ campaignId, offerId, pageToken, limit, offset, page, pageSize }: GetHiddenOffersRequest, opts?: OperationOpts): Observable<AjaxResponse<GetHiddenOffersResponse>>
    getHiddenOffers({ campaignId, offerId, pageToken, limit, offset, page, pageSize }: GetHiddenOffersRequest, opts?: OperationOpts): Observable<GetHiddenOffersResponse | AjaxResponse<GetHiddenOffersResponse>> {
        throwIfNullOrUndefined(campaignId, 'campaignId', 'getHiddenOffers');

        const headers: HttpHeaders = {
            // oauth required
            ...(this.configuration.accessToken != null
                ? { Authorization: typeof this.configuration.accessToken === 'function'
                    ? this.configuration.accessToken('OAuth', ['market:partner-api'])
                    : this.configuration.accessToken }
                : undefined
            ),
        };

        const query: HttpQuery = {};

        if (offerId != null) { query['offer_id'] = offerId.join(COLLECTION_FORMATS['csv']); }
        if (pageToken != null) { query['page_token'] = pageToken; }
        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (page != null) { query['page'] = page; }
        if (pageSize != null) { query['pageSize'] = pageSize; }

        return this.request<GetHiddenOffersResponse>({
            url: '/campaigns/{campaignId}/hidden-offers'.replace('{campaignId}', encodeURI(campaignId)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
