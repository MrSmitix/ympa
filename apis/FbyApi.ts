/* tslint:disable */
/* eslint-disable */
/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddHiddenOffersRequest,
  AddOffersToArchiveRequest,
  AddOffersToArchiveResponse,
  ApiClientDataErrorResponse,
  ApiForbiddenErrorResponse,
  ApiLimitErrorResponse,
  ApiLockedErrorResponse,
  ApiNotFoundErrorResponse,
  ApiServerErrorResponse,
  ApiUnauthorizedErrorResponse,
  CalculateTariffsRequest,
  CalculateTariffsResponse,
  ConfirmPricesRequest,
  CreateChatRequest,
  CreateChatResponse,
  CurrencyType,
  DeleteCampaignOffersRequest,
  DeleteCampaignOffersResponse,
  DeleteGoodsFeedbackCommentRequest,
  DeleteHiddenOffersRequest,
  DeleteOffersFromArchiveRequest,
  DeleteOffersFromArchiveResponse,
  DeleteOffersRequest,
  DeleteOffersResponse,
  DeletePromoOffersRequest,
  DeletePromoOffersResponse,
  EmptyApiResponse,
  FeedIndexLogsStatusType,
  GenerateBoostConsolidatedRequest,
  GenerateCompetitorsPositionReportRequest,
  GenerateGoodsFeedbackRequest,
  GenerateGoodsMovementReportRequest,
  GenerateGoodsRealizationReportRequest,
  GenerateGoodsTurnoverRequest,
  GeneratePricesReportRequest,
  GenerateReportResponse,
  GenerateShelfsStatisticsRequest,
  GenerateShowsSalesReportRequest,
  GenerateStocksOnWarehousesReportRequest,
  GenerateUnitedMarketplaceServicesReportRequest,
  GenerateUnitedNettingReportRequest,
  GenerateUnitedOrdersRequest,
  GetAllOffersResponse,
  GetBidsInfoRequest,
  GetBidsInfoResponse,
  GetBidsRecommendationsRequest,
  GetBidsRecommendationsResponse,
  GetBusinessBuyerInfoResponse,
  GetBusinessDocumentsInfoResponse,
  GetBusinessSettingsResponse,
  GetCampaignLoginsResponse,
  GetCampaignOffersRequest,
  GetCampaignOffersResponse,
  GetCampaignRegionResponse,
  GetCampaignResponse,
  GetCampaignSettingsResponse,
  GetCampaignsResponse,
  GetCategoriesMaxSaleQuantumRequest,
  GetCategoriesMaxSaleQuantumResponse,
  GetCategoriesRequest,
  GetCategoriesResponse,
  GetCategoryContentParametersResponse,
  GetChatHistoryRequest,
  GetChatHistoryResponse,
  GetChatsRequest,
  GetChatsResponse,
  GetFeedIndexLogsResponse,
  GetFeedResponse,
  GetFeedbackListResponse,
  GetFeedsResponse,
  GetFulfillmentWarehousesResponse,
  GetGoodsFeedbackCommentsRequest,
  GetGoodsFeedbackCommentsResponse,
  GetGoodsFeedbackRequest,
  GetGoodsFeedbackResponse,
  GetGoodsStatsRequest,
  GetGoodsStatsResponse,
  GetHiddenOffersResponse,
  GetOfferCardsContentStatusRequest,
  GetOfferCardsContentStatusResponse,
  GetOfferMappingEntriesResponse,
  GetOfferMappingsRequest,
  GetOfferMappingsResponse,
  GetOfferRecommendationsRequest,
  GetOfferRecommendationsResponse,
  GetOffersResponse,
  GetOrderResponse,
  GetOrdersResponse,
  GetOrdersStatsRequest,
  GetOrdersStatsResponse,
  GetPricesByOfferIdsRequest,
  GetPricesByOfferIdsResponse,
  GetPricesResponse,
  GetPromoOffersRequest,
  GetPromoOffersResponse,
  GetPromosRequest,
  GetPromosResponse,
  GetQualityRatingRequest,
  GetQualityRatingResponse,
  GetQuarantineOffersRequest,
  GetQuarantineOffersResponse,
  GetRegionWithChildrenResponse,
  GetRegionsResponse,
  GetReportInfoResponse,
  GetReturnResponse,
  GetReturnsResponse,
  GetSuggestedOfferMappingEntriesRequest,
  GetSuggestedOfferMappingEntriesResponse,
  GetSuggestedOfferMappingsRequest,
  GetSuggestedOfferMappingsResponse,
  GetWarehouseStocksRequest,
  GetWarehouseStocksResponse,
  OfferAvailabilityStatusType,
  OfferMappingKindType,
  OfferProcessingStatusType,
  OrderBuyerType,
  OrderDeliveryDispatchType,
  OrderStatusType,
  OrderSubstatusType,
  PutSkuBidsRequest,
  RefundStatusType,
  ReportFormatType,
  ReturnType,
  SendMessageToChatRequest,
  SetFeedParamsRequest,
  SkipGoodsFeedbackReactionRequest,
  SuggestPricesRequest,
  SuggestPricesResponse,
  UpdateBusinessPricesRequest,
  UpdateCampaignOffersRequest,
  UpdateGoodsFeedbackCommentRequest,
  UpdateGoodsFeedbackCommentResponse,
  UpdateOfferContentRequest,
  UpdateOfferContentResponse,
  UpdateOfferMappingEntryRequest,
  UpdateOfferMappingsRequest,
  UpdateOfferMappingsResponse,
  UpdatePricesRequest,
  UpdatePromoOffersRequest,
  UpdatePromoOffersResponse,
} from '../models/index';
import {
    AddHiddenOffersRequestFromJSON,
    AddHiddenOffersRequestToJSON,
    AddOffersToArchiveRequestFromJSON,
    AddOffersToArchiveRequestToJSON,
    AddOffersToArchiveResponseFromJSON,
    AddOffersToArchiveResponseToJSON,
    ApiClientDataErrorResponseFromJSON,
    ApiClientDataErrorResponseToJSON,
    ApiForbiddenErrorResponseFromJSON,
    ApiForbiddenErrorResponseToJSON,
    ApiLimitErrorResponseFromJSON,
    ApiLimitErrorResponseToJSON,
    ApiLockedErrorResponseFromJSON,
    ApiLockedErrorResponseToJSON,
    ApiNotFoundErrorResponseFromJSON,
    ApiNotFoundErrorResponseToJSON,
    ApiServerErrorResponseFromJSON,
    ApiServerErrorResponseToJSON,
    ApiUnauthorizedErrorResponseFromJSON,
    ApiUnauthorizedErrorResponseToJSON,
    CalculateTariffsRequestFromJSON,
    CalculateTariffsRequestToJSON,
    CalculateTariffsResponseFromJSON,
    CalculateTariffsResponseToJSON,
    ConfirmPricesRequestFromJSON,
    ConfirmPricesRequestToJSON,
    CreateChatRequestFromJSON,
    CreateChatRequestToJSON,
    CreateChatResponseFromJSON,
    CreateChatResponseToJSON,
    CurrencyTypeFromJSON,
    CurrencyTypeToJSON,
    DeleteCampaignOffersRequestFromJSON,
    DeleteCampaignOffersRequestToJSON,
    DeleteCampaignOffersResponseFromJSON,
    DeleteCampaignOffersResponseToJSON,
    DeleteGoodsFeedbackCommentRequestFromJSON,
    DeleteGoodsFeedbackCommentRequestToJSON,
    DeleteHiddenOffersRequestFromJSON,
    DeleteHiddenOffersRequestToJSON,
    DeleteOffersFromArchiveRequestFromJSON,
    DeleteOffersFromArchiveRequestToJSON,
    DeleteOffersFromArchiveResponseFromJSON,
    DeleteOffersFromArchiveResponseToJSON,
    DeleteOffersRequestFromJSON,
    DeleteOffersRequestToJSON,
    DeleteOffersResponseFromJSON,
    DeleteOffersResponseToJSON,
    DeletePromoOffersRequestFromJSON,
    DeletePromoOffersRequestToJSON,
    DeletePromoOffersResponseFromJSON,
    DeletePromoOffersResponseToJSON,
    EmptyApiResponseFromJSON,
    EmptyApiResponseToJSON,
    FeedIndexLogsStatusTypeFromJSON,
    FeedIndexLogsStatusTypeToJSON,
    GenerateBoostConsolidatedRequestFromJSON,
    GenerateBoostConsolidatedRequestToJSON,
    GenerateCompetitorsPositionReportRequestFromJSON,
    GenerateCompetitorsPositionReportRequestToJSON,
    GenerateGoodsFeedbackRequestFromJSON,
    GenerateGoodsFeedbackRequestToJSON,
    GenerateGoodsMovementReportRequestFromJSON,
    GenerateGoodsMovementReportRequestToJSON,
    GenerateGoodsRealizationReportRequestFromJSON,
    GenerateGoodsRealizationReportRequestToJSON,
    GenerateGoodsTurnoverRequestFromJSON,
    GenerateGoodsTurnoverRequestToJSON,
    GeneratePricesReportRequestFromJSON,
    GeneratePricesReportRequestToJSON,
    GenerateReportResponseFromJSON,
    GenerateReportResponseToJSON,
    GenerateShelfsStatisticsRequestFromJSON,
    GenerateShelfsStatisticsRequestToJSON,
    GenerateShowsSalesReportRequestFromJSON,
    GenerateShowsSalesReportRequestToJSON,
    GenerateStocksOnWarehousesReportRequestFromJSON,
    GenerateStocksOnWarehousesReportRequestToJSON,
    GenerateUnitedMarketplaceServicesReportRequestFromJSON,
    GenerateUnitedMarketplaceServicesReportRequestToJSON,
    GenerateUnitedNettingReportRequestFromJSON,
    GenerateUnitedNettingReportRequestToJSON,
    GenerateUnitedOrdersRequestFromJSON,
    GenerateUnitedOrdersRequestToJSON,
    GetAllOffersResponseFromJSON,
    GetAllOffersResponseToJSON,
    GetBidsInfoRequestFromJSON,
    GetBidsInfoRequestToJSON,
    GetBidsInfoResponseFromJSON,
    GetBidsInfoResponseToJSON,
    GetBidsRecommendationsRequestFromJSON,
    GetBidsRecommendationsRequestToJSON,
    GetBidsRecommendationsResponseFromJSON,
    GetBidsRecommendationsResponseToJSON,
    GetBusinessBuyerInfoResponseFromJSON,
    GetBusinessBuyerInfoResponseToJSON,
    GetBusinessDocumentsInfoResponseFromJSON,
    GetBusinessDocumentsInfoResponseToJSON,
    GetBusinessSettingsResponseFromJSON,
    GetBusinessSettingsResponseToJSON,
    GetCampaignLoginsResponseFromJSON,
    GetCampaignLoginsResponseToJSON,
    GetCampaignOffersRequestFromJSON,
    GetCampaignOffersRequestToJSON,
    GetCampaignOffersResponseFromJSON,
    GetCampaignOffersResponseToJSON,
    GetCampaignRegionResponseFromJSON,
    GetCampaignRegionResponseToJSON,
    GetCampaignResponseFromJSON,
    GetCampaignResponseToJSON,
    GetCampaignSettingsResponseFromJSON,
    GetCampaignSettingsResponseToJSON,
    GetCampaignsResponseFromJSON,
    GetCampaignsResponseToJSON,
    GetCategoriesMaxSaleQuantumRequestFromJSON,
    GetCategoriesMaxSaleQuantumRequestToJSON,
    GetCategoriesMaxSaleQuantumResponseFromJSON,
    GetCategoriesMaxSaleQuantumResponseToJSON,
    GetCategoriesRequestFromJSON,
    GetCategoriesRequestToJSON,
    GetCategoriesResponseFromJSON,
    GetCategoriesResponseToJSON,
    GetCategoryContentParametersResponseFromJSON,
    GetCategoryContentParametersResponseToJSON,
    GetChatHistoryRequestFromJSON,
    GetChatHistoryRequestToJSON,
    GetChatHistoryResponseFromJSON,
    GetChatHistoryResponseToJSON,
    GetChatsRequestFromJSON,
    GetChatsRequestToJSON,
    GetChatsResponseFromJSON,
    GetChatsResponseToJSON,
    GetFeedIndexLogsResponseFromJSON,
    GetFeedIndexLogsResponseToJSON,
    GetFeedResponseFromJSON,
    GetFeedResponseToJSON,
    GetFeedbackListResponseFromJSON,
    GetFeedbackListResponseToJSON,
    GetFeedsResponseFromJSON,
    GetFeedsResponseToJSON,
    GetFulfillmentWarehousesResponseFromJSON,
    GetFulfillmentWarehousesResponseToJSON,
    GetGoodsFeedbackCommentsRequestFromJSON,
    GetGoodsFeedbackCommentsRequestToJSON,
    GetGoodsFeedbackCommentsResponseFromJSON,
    GetGoodsFeedbackCommentsResponseToJSON,
    GetGoodsFeedbackRequestFromJSON,
    GetGoodsFeedbackRequestToJSON,
    GetGoodsFeedbackResponseFromJSON,
    GetGoodsFeedbackResponseToJSON,
    GetGoodsStatsRequestFromJSON,
    GetGoodsStatsRequestToJSON,
    GetGoodsStatsResponseFromJSON,
    GetGoodsStatsResponseToJSON,
    GetHiddenOffersResponseFromJSON,
    GetHiddenOffersResponseToJSON,
    GetOfferCardsContentStatusRequestFromJSON,
    GetOfferCardsContentStatusRequestToJSON,
    GetOfferCardsContentStatusResponseFromJSON,
    GetOfferCardsContentStatusResponseToJSON,
    GetOfferMappingEntriesResponseFromJSON,
    GetOfferMappingEntriesResponseToJSON,
    GetOfferMappingsRequestFromJSON,
    GetOfferMappingsRequestToJSON,
    GetOfferMappingsResponseFromJSON,
    GetOfferMappingsResponseToJSON,
    GetOfferRecommendationsRequestFromJSON,
    GetOfferRecommendationsRequestToJSON,
    GetOfferRecommendationsResponseFromJSON,
    GetOfferRecommendationsResponseToJSON,
    GetOffersResponseFromJSON,
    GetOffersResponseToJSON,
    GetOrderResponseFromJSON,
    GetOrderResponseToJSON,
    GetOrdersResponseFromJSON,
    GetOrdersResponseToJSON,
    GetOrdersStatsRequestFromJSON,
    GetOrdersStatsRequestToJSON,
    GetOrdersStatsResponseFromJSON,
    GetOrdersStatsResponseToJSON,
    GetPricesByOfferIdsRequestFromJSON,
    GetPricesByOfferIdsRequestToJSON,
    GetPricesByOfferIdsResponseFromJSON,
    GetPricesByOfferIdsResponseToJSON,
    GetPricesResponseFromJSON,
    GetPricesResponseToJSON,
    GetPromoOffersRequestFromJSON,
    GetPromoOffersRequestToJSON,
    GetPromoOffersResponseFromJSON,
    GetPromoOffersResponseToJSON,
    GetPromosRequestFromJSON,
    GetPromosRequestToJSON,
    GetPromosResponseFromJSON,
    GetPromosResponseToJSON,
    GetQualityRatingRequestFromJSON,
    GetQualityRatingRequestToJSON,
    GetQualityRatingResponseFromJSON,
    GetQualityRatingResponseToJSON,
    GetQuarantineOffersRequestFromJSON,
    GetQuarantineOffersRequestToJSON,
    GetQuarantineOffersResponseFromJSON,
    GetQuarantineOffersResponseToJSON,
    GetRegionWithChildrenResponseFromJSON,
    GetRegionWithChildrenResponseToJSON,
    GetRegionsResponseFromJSON,
    GetRegionsResponseToJSON,
    GetReportInfoResponseFromJSON,
    GetReportInfoResponseToJSON,
    GetReturnResponseFromJSON,
    GetReturnResponseToJSON,
    GetReturnsResponseFromJSON,
    GetReturnsResponseToJSON,
    GetSuggestedOfferMappingEntriesRequestFromJSON,
    GetSuggestedOfferMappingEntriesRequestToJSON,
    GetSuggestedOfferMappingEntriesResponseFromJSON,
    GetSuggestedOfferMappingEntriesResponseToJSON,
    GetSuggestedOfferMappingsRequestFromJSON,
    GetSuggestedOfferMappingsRequestToJSON,
    GetSuggestedOfferMappingsResponseFromJSON,
    GetSuggestedOfferMappingsResponseToJSON,
    GetWarehouseStocksRequestFromJSON,
    GetWarehouseStocksRequestToJSON,
    GetWarehouseStocksResponseFromJSON,
    GetWarehouseStocksResponseToJSON,
    OfferAvailabilityStatusTypeFromJSON,
    OfferAvailabilityStatusTypeToJSON,
    OfferMappingKindTypeFromJSON,
    OfferMappingKindTypeToJSON,
    OfferProcessingStatusTypeFromJSON,
    OfferProcessingStatusTypeToJSON,
    OrderBuyerTypeFromJSON,
    OrderBuyerTypeToJSON,
    OrderDeliveryDispatchTypeFromJSON,
    OrderDeliveryDispatchTypeToJSON,
    OrderStatusTypeFromJSON,
    OrderStatusTypeToJSON,
    OrderSubstatusTypeFromJSON,
    OrderSubstatusTypeToJSON,
    PutSkuBidsRequestFromJSON,
    PutSkuBidsRequestToJSON,
    RefundStatusTypeFromJSON,
    RefundStatusTypeToJSON,
    ReportFormatTypeFromJSON,
    ReportFormatTypeToJSON,
    ReturnTypeFromJSON,
    ReturnTypeToJSON,
    SendMessageToChatRequestFromJSON,
    SendMessageToChatRequestToJSON,
    SetFeedParamsRequestFromJSON,
    SetFeedParamsRequestToJSON,
    SkipGoodsFeedbackReactionRequestFromJSON,
    SkipGoodsFeedbackReactionRequestToJSON,
    SuggestPricesRequestFromJSON,
    SuggestPricesRequestToJSON,
    SuggestPricesResponseFromJSON,
    SuggestPricesResponseToJSON,
    UpdateBusinessPricesRequestFromJSON,
    UpdateBusinessPricesRequestToJSON,
    UpdateCampaignOffersRequestFromJSON,
    UpdateCampaignOffersRequestToJSON,
    UpdateGoodsFeedbackCommentRequestFromJSON,
    UpdateGoodsFeedbackCommentRequestToJSON,
    UpdateGoodsFeedbackCommentResponseFromJSON,
    UpdateGoodsFeedbackCommentResponseToJSON,
    UpdateOfferContentRequestFromJSON,
    UpdateOfferContentRequestToJSON,
    UpdateOfferContentResponseFromJSON,
    UpdateOfferContentResponseToJSON,
    UpdateOfferMappingEntryRequestFromJSON,
    UpdateOfferMappingEntryRequestToJSON,
    UpdateOfferMappingsRequestFromJSON,
    UpdateOfferMappingsRequestToJSON,
    UpdateOfferMappingsResponseFromJSON,
    UpdateOfferMappingsResponseToJSON,
    UpdatePricesRequestFromJSON,
    UpdatePricesRequestToJSON,
    UpdatePromoOffersRequestFromJSON,
    UpdatePromoOffersRequestToJSON,
    UpdatePromoOffersResponseFromJSON,
    UpdatePromoOffersResponseToJSON,
} from '../models/index';

export interface AddHiddenOffersOperationRequest {
    campaignId: number;
    addHiddenOffersRequest: AddHiddenOffersRequest;
}

export interface AddOffersToArchiveOperationRequest {
    businessId: number;
    addOffersToArchiveRequest: AddOffersToArchiveRequest;
}

export interface CalculateTariffsOperationRequest {
    calculateTariffsRequest: CalculateTariffsRequest;
}

export interface ConfirmBusinessPricesRequest {
    businessId: number;
    confirmPricesRequest: ConfirmPricesRequest;
}

export interface ConfirmCampaignPricesRequest {
    campaignId: number;
    confirmPricesRequest: ConfirmPricesRequest;
}

export interface CreateChatOperationRequest {
    businessId: number;
    createChatRequest: CreateChatRequest;
}

export interface DeleteCampaignOffersOperationRequest {
    campaignId: number;
    deleteCampaignOffersRequest: DeleteCampaignOffersRequest;
}

export interface DeleteGoodsFeedbackCommentOperationRequest {
    businessId: number;
    deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest;
}

export interface DeleteHiddenOffersOperationRequest {
    campaignId: number;
    deleteHiddenOffersRequest: DeleteHiddenOffersRequest;
}

export interface DeleteOffersOperationRequest {
    businessId: number;
    deleteOffersRequest: DeleteOffersRequest;
}

export interface DeleteOffersFromArchiveOperationRequest {
    businessId: number;
    deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest;
}

export interface DeletePromoOffersOperationRequest {
    businessId: number;
    deletePromoOffersRequest: DeletePromoOffersRequest;
}

export interface GenerateBoostConsolidatedReportRequest {
    generateBoostConsolidatedRequest: GenerateBoostConsolidatedRequest;
    format?: ReportFormatType;
}

export interface GenerateCompetitorsPositionReportOperationRequest {
    generateCompetitorsPositionReportRequest: GenerateCompetitorsPositionReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsFeedbackReportRequest {
    generateGoodsFeedbackRequest: GenerateGoodsFeedbackRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsMovementReportOperationRequest {
    generateGoodsMovementReportRequest: GenerateGoodsMovementReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsRealizationReportOperationRequest {
    generateGoodsRealizationReportRequest: GenerateGoodsRealizationReportRequest;
    format?: ReportFormatType;
}

export interface GenerateGoodsTurnoverReportRequest {
    generateGoodsTurnoverRequest: GenerateGoodsTurnoverRequest;
    format?: ReportFormatType;
}

export interface GeneratePricesReportOperationRequest {
    generatePricesReportRequest: GeneratePricesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateShelfsStatisticsReportRequest {
    generateShelfsStatisticsRequest: GenerateShelfsStatisticsRequest;
    format?: ReportFormatType;
}

export interface GenerateShowsSalesReportOperationRequest {
    generateShowsSalesReportRequest: GenerateShowsSalesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateStocksOnWarehousesReportOperationRequest {
    generateStocksOnWarehousesReportRequest: GenerateStocksOnWarehousesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedMarketplaceServicesReportOperationRequest {
    generateUnitedMarketplaceServicesReportRequest: GenerateUnitedMarketplaceServicesReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedNettingReportOperationRequest {
    generateUnitedNettingReportRequest: GenerateUnitedNettingReportRequest;
    format?: ReportFormatType;
}

export interface GenerateUnitedOrdersReportRequest {
    generateUnitedOrdersRequest: GenerateUnitedOrdersRequest;
    format?: ReportFormatType;
}

export interface GetAllOffersRequest {
    campaignId: number;
    feedId?: number;
    chunk?: number;
}

export interface GetBidsInfoForBusinessRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getBidsInfoRequest?: GetBidsInfoRequest;
}

export interface GetBidsRecommendationsOperationRequest {
    businessId: number;
    getBidsRecommendationsRequest: GetBidsRecommendationsRequest;
}

export interface GetBusinessQuarantineOffersRequest {
    businessId: number;
    getQuarantineOffersRequest: GetQuarantineOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetBusinessSettingsRequest {
    businessId: number;
}

export interface GetCampaignRequest {
    campaignId: number;
}

export interface GetCampaignLoginsRequest {
    campaignId: number;
}

export interface GetCampaignOffersOperationRequest {
    campaignId: number;
    getCampaignOffersRequest: GetCampaignOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetCampaignQuarantineOffersRequest {
    campaignId: number;
    getQuarantineOffersRequest: GetQuarantineOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetCampaignRegionRequest {
    campaignId: number;
}

export interface GetCampaignSettingsRequest {
    campaignId: number;
}

export interface GetCampaignsRequest {
    page?: number;
    pageSize?: number;
}

export interface GetCampaignsByLoginRequest {
    login: string;
    page?: number;
    pageSize?: number;
}

export interface GetCategoriesMaxSaleQuantumOperationRequest {
    getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest;
}

export interface GetCategoriesTreeRequest {
    getCategoriesRequest?: GetCategoriesRequest;
}

export interface GetCategoryContentParametersRequest {
    categoryId: number;
}

export interface GetChatHistoryOperationRequest {
    businessId: number;
    chatId: number;
    getChatHistoryRequest: GetChatHistoryRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetChatsOperationRequest {
    businessId: number;
    getChatsRequest: GetChatsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetFeedRequest {
    campaignId: number;
    feedId: number;
}

export interface GetFeedIndexLogsRequest {
    campaignId: number;
    feedId: number;
    limit?: number;
    publishedTimeFrom?: Date;
    publishedTimeTo?: Date;
    status?: FeedIndexLogsStatusType;
}

export interface GetFeedbackAndCommentUpdatesRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    fromDate?: Date;
}

export interface GetFeedsRequest {
    campaignId: number;
}

export interface GetGoodsFeedbackCommentsOperationRequest {
    businessId: number;
    getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetGoodsFeedbacksRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getGoodsFeedbackRequest?: GetGoodsFeedbackRequest;
}

export interface GetGoodsStatsOperationRequest {
    campaignId: number;
    getGoodsStatsRequest: GetGoodsStatsRequest;
}

export interface GetHiddenOffersRequest {
    campaignId: number;
    offerId?: Array<string>;
    pageToken?: string;
    limit?: number;
    offset?: number;
    page?: number;
    pageSize?: number;
}

export interface GetOfferCardsContentStatusOperationRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferCardsContentStatusRequest?: GetOfferCardsContentStatusRequest;
}

export interface GetOfferMappingEntriesRequest {
    campaignId: number;
    offerId?: Array<string>;
    shopSku?: Array<string>;
    mappingKind?: OfferMappingKindType;
    status?: Array<OfferProcessingStatusType>;
    availability?: Array<OfferAvailabilityStatusType>;
    categoryId?: Array<number>;
    vendor?: Array<string>;
    pageToken?: string;
    limit?: number;
}

export interface GetOfferMappingsOperationRequest {
    businessId: number;
    pageToken?: string;
    limit?: number;
    getOfferMappingsRequest?: GetOfferMappingsRequest;
}

export interface GetOfferRecommendationsOperationRequest {
    businessId: number;
    getOfferRecommendationsRequest: GetOfferRecommendationsRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetOffersRequest {
    campaignId: number;
    query?: string;
    feedId?: number;
    shopCategoryId?: string;
    currency?: CurrencyType;
    matched?: boolean;
    page?: number;
    pageSize?: number;
}

export interface GetOrderRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrderBusinessBuyerInfoRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrderBusinessDocumentsInfoRequest {
    campaignId: number;
    orderId: number;
}

export interface GetOrdersRequest {
    campaignId: number;
    orderIds?: Array<number>;
    status?: Set<OrderStatusType>;
    substatus?: Set<OrderSubstatusType>;
    fromDate?: Date;
    toDate?: Date;
    supplierShipmentDateFrom?: Date;
    supplierShipmentDateTo?: Date;
    updatedAtFrom?: Date;
    updatedAtTo?: Date;
    dispatchType?: OrderDeliveryDispatchType;
    fake?: boolean;
    hasCis?: boolean;
    onlyWaitingForCancellationApprove?: boolean;
    onlyEstimatedDelivery?: boolean;
    buyerType?: OrderBuyerType;
    page?: number;
    pageSize?: number;
    pageToken?: string;
    limit?: number;
}

export interface GetOrdersStatsOperationRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getOrdersStatsRequest?: GetOrdersStatsRequest;
}

export interface GetPricesRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    archived?: boolean;
}

export interface GetPricesByOfferIdsOperationRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getPricesByOfferIdsRequest?: GetPricesByOfferIdsRequest;
}

export interface GetPromoOffersOperationRequest {
    businessId: number;
    getPromoOffersRequest: GetPromoOffersRequest;
    pageToken?: string;
    limit?: number;
}

export interface GetPromosOperationRequest {
    businessId: number;
    getPromosRequest?: GetPromosRequest;
}

export interface GetQualityRatingsRequest {
    businessId: number;
    getQualityRatingRequest: GetQualityRatingRequest;
}

export interface GetReportInfoRequest {
    reportId: string;
}

export interface GetReturnRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
}

export interface GetReturnPhotoRequest {
    campaignId: number;
    orderId: number;
    returnId: number;
    itemId: number;
    imageHash: string;
}

export interface GetReturnsRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    orderIds?: Array<number>;
    statuses?: Array<RefundStatusType>;
    type?: ReturnType;
    fromDate?: Date;
    toDate?: Date;
    fromDate2?: Date;
    toDate2?: Date;
}

export interface GetStocksRequest {
    campaignId: number;
    pageToken?: string;
    limit?: number;
    getWarehouseStocksRequest?: GetWarehouseStocksRequest;
}

export interface GetSuggestedOfferMappingEntriesOperationRequest {
    campaignId: number;
    getSuggestedOfferMappingEntriesRequest: GetSuggestedOfferMappingEntriesRequest;
}

export interface GetSuggestedOfferMappingsOperationRequest {
    businessId: number;
    getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest;
}

export interface GetSuggestedPricesRequest {
    campaignId: number;
    suggestPricesRequest: SuggestPricesRequest;
}

export interface PutBidsForBusinessRequest {
    businessId: number;
    putSkuBidsRequest: PutSkuBidsRequest;
}

export interface PutBidsForCampaignRequest {
    campaignId: number;
    putSkuBidsRequest: PutSkuBidsRequest;
}

export interface RefreshFeedRequest {
    campaignId: number;
    feedId: number;
}

export interface SearchRegionChildrenRequest {
    regionId: number;
    page?: number;
    pageSize?: number;
}

export interface SearchRegionsByIdRequest {
    regionId: number;
}

export interface SearchRegionsByNameRequest {
    name: string;
    pageToken?: string;
    limit?: number;
}

export interface SendFileToChatRequest {
    businessId: number;
    chatId: number;
    file: Blob;
}

export interface SendMessageToChatOperationRequest {
    businessId: number;
    chatId: number;
    sendMessageToChatRequest: SendMessageToChatRequest;
}

export interface SetFeedParamsOperationRequest {
    campaignId: number;
    feedId: number;
    setFeedParamsRequest: SetFeedParamsRequest;
}

export interface SkipGoodsFeedbacksReactionRequest {
    businessId: number;
    skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest;
}

export interface UpdateBusinessPricesOperationRequest {
    businessId: number;
    updateBusinessPricesRequest: UpdateBusinessPricesRequest;
}

export interface UpdateCampaignOffersOperationRequest {
    campaignId: number;
    updateCampaignOffersRequest: UpdateCampaignOffersRequest;
}

export interface UpdateGoodsFeedbackCommentOperationRequest {
    businessId: number;
    updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest;
}

export interface UpdateOfferContentOperationRequest {
    businessId: number;
    updateOfferContentRequest: UpdateOfferContentRequest;
}

export interface UpdateOfferMappingEntriesRequest {
    campaignId: number;
    updateOfferMappingEntryRequest: UpdateOfferMappingEntryRequest;
}

export interface UpdateOfferMappingsOperationRequest {
    businessId: number;
    updateOfferMappingsRequest: UpdateOfferMappingsRequest;
}

export interface UpdatePricesOperationRequest {
    campaignId: number;
    updatePricesRequest: UpdatePricesRequest;
}

export interface UpdatePromoOffersOperationRequest {
    businessId: number;
    updatePromoOffersRequest: UpdatePromoOffersRequest;
}

/**
 * 
 */
export class FbyApi extends runtime.BaseAPI {

    /**
     * Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Скрытие товаров и настройки скрытия
     */
    async addHiddenOffersRaw(requestParameters: AddHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling addHiddenOffers().'
            );
        }

        if (requestParameters['addHiddenOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'addHiddenOffersRequest',
                'Required parameter "addHiddenOffersRequest" was null or undefined when calling addHiddenOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/hidden-offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddHiddenOffersRequestToJSON(requestParameters['addHiddenOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Скрытие товаров и настройки скрытия
     */
    async addHiddenOffers(requestParameters: AddHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.addHiddenOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Добавление товаров в архив
     */
    async addOffersToArchiveRaw(requestParameters: AddOffersToArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddOffersToArchiveResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling addOffersToArchive().'
            );
        }

        if (requestParameters['addOffersToArchiveRequest'] == null) {
            throw new runtime.RequiredError(
                'addOffersToArchiveRequest',
                'Required parameter "addOffersToArchiveRequest" was null or undefined when calling addOffersToArchive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/archive`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddOffersToArchiveRequestToJSON(requestParameters['addOffersToArchiveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddOffersToArchiveResponseFromJSON(jsonValue));
    }

    /**
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Добавление товаров в архив
     */
    async addOffersToArchive(requestParameters: AddOffersToArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddOffersToArchiveResponse> {
        const response = await this.addOffersToArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Калькулятор стоимости услуг
     */
    async calculateTariffsRaw(requestParameters: CalculateTariffsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculateTariffsResponse>> {
        if (requestParameters['calculateTariffsRequest'] == null) {
            throw new runtime.RequiredError(
                'calculateTariffsRequest',
                'Required parameter "calculateTariffsRequest" was null or undefined when calling calculateTariffs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/tariffs/calculate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateTariffsRequestToJSON(requestParameters['calculateTariffsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculateTariffsResponseFromJSON(jsonValue));
    }

    /**
     * Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Калькулятор стоимости услуг
     */
    async calculateTariffs(requestParameters: CalculateTariffsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculateTariffsResponse> {
        const response = await this.calculateTariffsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товара из карантина по цене в кабинете
     */
    async confirmBusinessPricesRaw(requestParameters: ConfirmBusinessPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling confirmBusinessPrices().'
            );
        }

        if (requestParameters['confirmPricesRequest'] == null) {
            throw new runtime.RequiredError(
                'confirmPricesRequest',
                'Required parameter "confirmPricesRequest" was null or undefined when calling confirmBusinessPrices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/price-quarantine/confirm`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmPricesRequestToJSON(requestParameters['confirmPricesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товара из карантина по цене в кабинете
     */
    async confirmBusinessPrices(requestParameters: ConfirmBusinessPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.confirmBusinessPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Удаление товара из карантина по цене в магазине
     */
    async confirmCampaignPricesRaw(requestParameters: ConfirmCampaignPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling confirmCampaignPrices().'
            );
        }

        if (requestParameters['confirmPricesRequest'] == null) {
            throw new runtime.RequiredError(
                'confirmPricesRequest',
                'Required parameter "confirmPricesRequest" was null or undefined when calling confirmCampaignPrices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/price-quarantine/confirm`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmPricesRequestToJSON(requestParameters['confirmPricesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Удаление товара из карантина по цене в магазине
     */
    async confirmCampaignPrices(requestParameters: ConfirmCampaignPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.confirmCampaignPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Создание нового чата с покупателем
     */
    async createChatRaw(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateChatResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling createChat().'
            );
        }

        if (requestParameters['createChatRequest'] == null) {
            throw new runtime.RequiredError(
                'createChatRequest',
                'Required parameter "createChatRequest" was null or undefined when calling createChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/chats/new`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatRequestToJSON(requestParameters['createChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateChatResponseFromJSON(jsonValue));
    }

    /**
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Создание нового чата с покупателем
     */
    async createChat(requestParameters: CreateChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateChatResponse> {
        const response = await this.createChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Удаление товаров из ассортимента магазина
     */
    async deleteCampaignOffersRaw(requestParameters: DeleteCampaignOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteCampaignOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteCampaignOffers().'
            );
        }

        if (requestParameters['deleteCampaignOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteCampaignOffersRequest',
                'Required parameter "deleteCampaignOffersRequest" was null or undefined when calling deleteCampaignOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offers/delete`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteCampaignOffersRequestToJSON(requestParameters['deleteCampaignOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteCampaignOffersResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Удаление товаров из ассортимента магазина
     */
    async deleteCampaignOffers(requestParameters: DeleteCampaignOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteCampaignOffersResponse> {
        const response = await this.deleteCampaignOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Удаление комментария к отзыву
     */
    async deleteGoodsFeedbackCommentRaw(requestParameters: DeleteGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deleteGoodsFeedbackComment().'
            );
        }

        if (requestParameters['deleteGoodsFeedbackCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteGoodsFeedbackCommentRequest',
                'Required parameter "deleteGoodsFeedbackCommentRequest" was null or undefined when calling deleteGoodsFeedbackComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/comments/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteGoodsFeedbackCommentRequestToJSON(requestParameters['deleteGoodsFeedbackCommentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Удаление комментария к отзыву
     */
    async deleteGoodsFeedbackComment(requestParameters: DeleteGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.deleteGoodsFeedbackCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Возобновление показа товаров
     */
    async deleteHiddenOffersRaw(requestParameters: DeleteHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteHiddenOffers().'
            );
        }

        if (requestParameters['deleteHiddenOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteHiddenOffersRequest',
                'Required parameter "deleteHiddenOffersRequest" was null or undefined when calling deleteHiddenOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/hidden-offers/delete`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteHiddenOffersRequestToJSON(requestParameters['deleteHiddenOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Возобновление показа товаров
     */
    async deleteHiddenOffers(requestParameters: DeleteHiddenOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.deleteHiddenOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из каталога
     */
    async deleteOffersRaw(requestParameters: DeleteOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deleteOffers().'
            );
        }

        if (requestParameters['deleteOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOffersRequest',
                'Required parameter "deleteOffersRequest" was null or undefined when calling deleteOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOffersRequestToJSON(requestParameters['deleteOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOffersResponseFromJSON(jsonValue));
    }

    /**
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из каталога
     */
    async deleteOffers(requestParameters: DeleteOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOffersResponse> {
        const response = await this.deleteOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из архива
     */
    async deleteOffersFromArchiveRaw(requestParameters: DeleteOffersFromArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteOffersFromArchiveResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deleteOffersFromArchive().'
            );
        }

        if (requestParameters['deleteOffersFromArchiveRequest'] == null) {
            throw new runtime.RequiredError(
                'deleteOffersFromArchiveRequest',
                'Required parameter "deleteOffersFromArchiveRequest" was null or undefined when calling deleteOffersFromArchive().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/unarchive`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteOffersFromArchiveRequestToJSON(requestParameters['deleteOffersFromArchiveRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteOffersFromArchiveResponseFromJSON(jsonValue));
    }

    /**
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * Удаление товаров из архива
     */
    async deleteOffersFromArchive(requestParameters: DeleteOffersFromArchiveOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteOffersFromArchiveResponse> {
        const response = await this.deleteOffersFromArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Удаление товаров из акции
     */
    async deletePromoOffersRaw(requestParameters: DeletePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeletePromoOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling deletePromoOffers().'
            );
        }

        if (requestParameters['deletePromoOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'deletePromoOffersRequest',
                'Required parameter "deletePromoOffersRequest" was null or undefined when calling deletePromoOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos/offers/delete`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeletePromoOffersRequestToJSON(requestParameters['deletePromoOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePromoOffersResponseFromJSON(jsonValue));
    }

    /**
     * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Удаление товаров из акции
     */
    async deletePromoOffers(requestParameters: DeletePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeletePromoOffersResponse> {
        const response = await this.deletePromoOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по бусту продаж
     */
    async generateBoostConsolidatedReportRaw(requestParameters: GenerateBoostConsolidatedReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateBoostConsolidatedRequest'] == null) {
            throw new runtime.RequiredError(
                'generateBoostConsolidatedRequest',
                'Required parameter "generateBoostConsolidatedRequest" was null or undefined when calling generateBoostConsolidatedReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/boost-consolidated/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateBoostConsolidatedRequestToJSON(requestParameters['generateBoostConsolidatedRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по бусту продаж
     */
    async generateBoostConsolidatedReport(requestParameters: GenerateBoostConsolidatedReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateBoostConsolidatedReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * Отчет «Конкурентная позиция»
     */
    async generateCompetitorsPositionReportRaw(requestParameters: GenerateCompetitorsPositionReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateCompetitorsPositionReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateCompetitorsPositionReportRequest',
                'Required parameter "generateCompetitorsPositionReportRequest" was null or undefined when calling generateCompetitorsPositionReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/competitors-position/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateCompetitorsPositionReportRequestToJSON(requestParameters['generateCompetitorsPositionReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * Отчет «Конкурентная позиция»
     */
    async generateCompetitorsPositionReport(requestParameters: GenerateCompetitorsPositionReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateCompetitorsPositionReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по отзывам о товарах
     */
    async generateGoodsFeedbackReportRaw(requestParameters: GenerateGoodsFeedbackReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateGoodsFeedbackRequest'] == null) {
            throw new runtime.RequiredError(
                'generateGoodsFeedbackRequest',
                'Required parameter "generateGoodsFeedbackRequest" was null or undefined when calling generateGoodsFeedbackReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/goods-feedback/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateGoodsFeedbackRequestToJSON(requestParameters['generateGoodsFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по отзывам о товарах
     */
    async generateGoodsFeedbackReport(requestParameters: GenerateGoodsFeedbackReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateGoodsFeedbackReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по движению товаров
     */
    async generateGoodsMovementReportRaw(requestParameters: GenerateGoodsMovementReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateGoodsMovementReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateGoodsMovementReportRequest',
                'Required parameter "generateGoodsMovementReportRequest" was null or undefined when calling generateGoodsMovementReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/goods-movement/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateGoodsMovementReportRequestToJSON(requestParameters['generateGoodsMovementReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по движению товаров
     */
    async generateGoodsMovementReport(requestParameters: GenerateGoodsMovementReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateGoodsMovementReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по реализации
     */
    async generateGoodsRealizationReportRaw(requestParameters: GenerateGoodsRealizationReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateGoodsRealizationReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateGoodsRealizationReportRequest',
                'Required parameter "generateGoodsRealizationReportRequest" was null or undefined when calling generateGoodsRealizationReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/goods-realization/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateGoodsRealizationReportRequestToJSON(requestParameters['generateGoodsRealizationReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по реализации
     */
    async generateGoodsRealizationReport(requestParameters: GenerateGoodsRealizationReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateGoodsRealizationReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по оборачиваемости
     */
    async generateGoodsTurnoverReportRaw(requestParameters: GenerateGoodsTurnoverReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateGoodsTurnoverRequest'] == null) {
            throw new runtime.RequiredError(
                'generateGoodsTurnoverRequest',
                'Required parameter "generateGoodsTurnoverRequest" was null or undefined when calling generateGoodsTurnoverReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/goods-turnover/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateGoodsTurnoverRequestToJSON(requestParameters['generateGoodsTurnoverRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по оборачиваемости
     */
    async generateGoodsTurnoverReport(requestParameters: GenerateGoodsTurnoverReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateGoodsTurnoverReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет «Цены на рынке»
     */
    async generatePricesReportRaw(requestParameters: GeneratePricesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generatePricesReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generatePricesReportRequest',
                'Required parameter "generatePricesReportRequest" was null or undefined when calling generatePricesReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/prices/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GeneratePricesReportRequestToJSON(requestParameters['generatePricesReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет «Цены на рынке»
     */
    async generatePricesReport(requestParameters: GeneratePricesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generatePricesReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по полкам
     */
    async generateShelfsStatisticsReportRaw(requestParameters: GenerateShelfsStatisticsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateShelfsStatisticsRequest'] == null) {
            throw new runtime.RequiredError(
                'generateShelfsStatisticsRequest',
                'Required parameter "generateShelfsStatisticsRequest" was null or undefined when calling generateShelfsStatisticsReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/shelf-statistics/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateShelfsStatisticsRequestToJSON(requestParameters['generateShelfsStatisticsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по полкам
     */
    async generateShelfsStatisticsReport(requestParameters: GenerateShelfsStatisticsReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateShelfsStatisticsReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * Отчет «Аналитика продаж»
     */
    async generateShowsSalesReportRaw(requestParameters: GenerateShowsSalesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateShowsSalesReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateShowsSalesReportRequest',
                'Required parameter "generateShowsSalesReportRequest" was null or undefined when calling generateShowsSalesReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/shows-sales/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateShowsSalesReportRequestToJSON(requestParameters['generateShowsSalesReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * Отчет «Аналитика продаж»
     */
    async generateShowsSalesReport(requestParameters: GenerateShowsSalesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateShowsSalesReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по остаткам на складах
     */
    async generateStocksOnWarehousesReportRaw(requestParameters: GenerateStocksOnWarehousesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateStocksOnWarehousesReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateStocksOnWarehousesReportRequest',
                'Required parameter "generateStocksOnWarehousesReportRequest" was null or undefined when calling generateStocksOnWarehousesReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/stocks-on-warehouses/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateStocksOnWarehousesReportRequestToJSON(requestParameters['generateStocksOnWarehousesReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по остаткам на складах
     */
    async generateStocksOnWarehousesReport(requestParameters: GenerateStocksOnWarehousesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateStocksOnWarehousesReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по стоимости услуг
     */
    async generateUnitedMarketplaceServicesReportRaw(requestParameters: GenerateUnitedMarketplaceServicesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateUnitedMarketplaceServicesReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateUnitedMarketplaceServicesReportRequest',
                'Required parameter "generateUnitedMarketplaceServicesReportRequest" was null or undefined when calling generateUnitedMarketplaceServicesReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/united-marketplace-services/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateUnitedMarketplaceServicesReportRequestToJSON(requestParameters['generateUnitedMarketplaceServicesReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по стоимости услуг
     */
    async generateUnitedMarketplaceServicesReport(requestParameters: GenerateUnitedMarketplaceServicesReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateUnitedMarketplaceServicesReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по платежам
     */
    async generateUnitedNettingReportRaw(requestParameters: GenerateUnitedNettingReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateUnitedNettingReportRequest'] == null) {
            throw new runtime.RequiredError(
                'generateUnitedNettingReportRequest',
                'Required parameter "generateUnitedNettingReportRequest" was null or undefined when calling generateUnitedNettingReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/united-netting/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateUnitedNettingReportRequestToJSON(requestParameters['generateUnitedNettingReportRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по платежам
     */
    async generateUnitedNettingReport(requestParameters: GenerateUnitedNettingReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateUnitedNettingReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по заказам
     */
    async generateUnitedOrdersReportRaw(requestParameters: GenerateUnitedOrdersReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenerateReportResponse>> {
        if (requestParameters['generateUnitedOrdersRequest'] == null) {
            throw new runtime.RequiredError(
                'generateUnitedOrdersRequest',
                'Required parameter "generateUnitedOrdersRequest" was null or undefined when calling generateUnitedOrdersReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/united-orders/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateUnitedOrdersRequestToJSON(requestParameters['generateUnitedOrdersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateReportResponseFromJSON(jsonValue));
    }

    /**
     * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Отчет по заказам
     */
    async generateUnitedOrdersReport(requestParameters: GenerateUnitedOrdersReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenerateReportResponse> {
        const response = await this.generateUnitedOrdersReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * Все предложения магазина
     * @deprecated
     */
    async getAllOffersRaw(requestParameters: GetAllOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getAllOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feedId'] = requestParameters['feedId'];
        }

        if (requestParameters['chunk'] != null) {
            queryParameters['chunk'] = requestParameters['chunk'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offers/all`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllOffersResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * Все предложения магазина
     * @deprecated
     */
    async getAllOffers(requestParameters: GetAllOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllOffersResponse> {
        const response = await this.getAllOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Информация об установленных ставках
     */
    async getBidsInfoForBusinessRaw(requestParameters: GetBidsInfoForBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBidsInfoResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getBidsInfoForBusiness().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/bids/info`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetBidsInfoRequestToJSON(requestParameters['getBidsInfoRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBidsInfoResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Информация об установленных ставках
     */
    async getBidsInfoForBusiness(requestParameters: GetBidsInfoForBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBidsInfoResponse> {
        const response = await this.getBidsInfoForBusinessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Рекомендованные ставки для заданных товаров
     */
    async getBidsRecommendationsRaw(requestParameters: GetBidsRecommendationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBidsRecommendationsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getBidsRecommendations().'
            );
        }

        if (requestParameters['getBidsRecommendationsRequest'] == null) {
            throw new runtime.RequiredError(
                'getBidsRecommendationsRequest',
                'Required parameter "getBidsRecommendationsRequest" was null or undefined when calling getBidsRecommendations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/bids/recommendations`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetBidsRecommendationsRequestToJSON(requestParameters['getBidsRecommendationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBidsRecommendationsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Рекомендованные ставки для заданных товаров
     */
    async getBidsRecommendations(requestParameters: GetBidsRecommendationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBidsRecommendationsResponse> {
        const response = await this.getBidsRecommendationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Список товаров, находящихся в карантине по цене в кабинете
     */
    async getBusinessQuarantineOffersRaw(requestParameters: GetBusinessQuarantineOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuarantineOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getBusinessQuarantineOffers().'
            );
        }

        if (requestParameters['getQuarantineOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'getQuarantineOffersRequest',
                'Required parameter "getQuarantineOffersRequest" was null or undefined when calling getBusinessQuarantineOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/price-quarantine`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetQuarantineOffersRequestToJSON(requestParameters['getQuarantineOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuarantineOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Список товаров, находящихся в карантине по цене в кабинете
     */
    async getBusinessQuarantineOffers(requestParameters: GetBusinessQuarantineOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuarantineOffersResponse> {
        const response = await this.getBusinessQuarantineOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Настройки кабинета
     */
    async getBusinessSettingsRaw(requestParameters: GetBusinessSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBusinessSettingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getBusinessSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/settings`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBusinessSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Настройки кабинета
     */
    async getBusinessSettings(requestParameters: GetBusinessSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBusinessSettingsResponse> {
        const response = await this.getBusinessSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Информация о магазине
     */
    async getCampaignRaw(requestParameters: GetCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Информация о магазине
     */
    async getCampaign(requestParameters: GetCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignResponse> {
        const response = await this.getCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Логины, связанные с магазином
     */
    async getCampaignLoginsRaw(requestParameters: GetCampaignLoginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignLoginsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaignLogins().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/logins`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignLoginsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Логины, связанные с магазином
     */
    async getCampaignLogins(requestParameters: GetCampaignLoginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignLoginsResponse> {
        const response = await this.getCampaignLoginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Информация о товарах, которые размещены в заданном магазине
     */
    async getCampaignOffersRaw(requestParameters: GetCampaignOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaignOffers().'
            );
        }

        if (requestParameters['getCampaignOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'getCampaignOffersRequest',
                'Required parameter "getCampaignOffersRequest" was null or undefined when calling getCampaignOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCampaignOffersRequestToJSON(requestParameters['getCampaignOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Информация о товарах, которые размещены в заданном магазине
     */
    async getCampaignOffers(requestParameters: GetCampaignOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignOffersResponse> {
        const response = await this.getCampaignOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Список товаров, находящихся в карантине по цене в магазине
     */
    async getCampaignQuarantineOffersRaw(requestParameters: GetCampaignQuarantineOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuarantineOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaignQuarantineOffers().'
            );
        }

        if (requestParameters['getQuarantineOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'getQuarantineOffersRequest',
                'Required parameter "getQuarantineOffersRequest" was null or undefined when calling getCampaignQuarantineOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/price-quarantine`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetQuarantineOffersRequestToJSON(requestParameters['getQuarantineOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuarantineOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Список товаров, находящихся в карантине по цене в магазине
     */
    async getCampaignQuarantineOffers(requestParameters: GetCampaignQuarantineOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuarantineOffersResponse> {
        const response = await this.getCampaignQuarantineOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
     * Регион магазина
     * @deprecated
     */
    async getCampaignRegionRaw(requestParameters: GetCampaignRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignRegionResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaignRegion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/region`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignRegionResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
     * Регион магазина
     * @deprecated
     */
    async getCampaignRegion(requestParameters: GetCampaignRegionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignRegionResponse> {
        const response = await this.getCampaignRegionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Настройки магазина
     */
    async getCampaignSettingsRaw(requestParameters: GetCampaignSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignSettingsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaignSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/settings`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignSettingsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Настройки магазина
     */
    async getCampaignSettings(requestParameters: GetCampaignSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignSettingsResponse> {
        const response = await this.getCampaignSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Список магазинов пользователя
     */
    async getCampaignsRaw(requestParameters: GetCampaignsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Список магазинов пользователя
     */
    async getCampaigns(requestParameters: GetCampaignsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignsResponse> {
        const response = await this.getCampaignsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Магазины, доступные логину
     */
    async getCampaignsByLoginRaw(requestParameters: GetCampaignsByLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignsResponse>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling getCampaignsByLogin().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/by_login/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Магазины, доступные логину
     */
    async getCampaignsByLogin(requestParameters: GetCampaignsByLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignsResponse> {
        const response = await this.getCampaignsByLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     */
    async getCategoriesMaxSaleQuantumRaw(requestParameters: GetCategoriesMaxSaleQuantumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCategoriesMaxSaleQuantumResponse>> {
        if (requestParameters['getCategoriesMaxSaleQuantumRequest'] == null) {
            throw new runtime.RequiredError(
                'getCategoriesMaxSaleQuantumRequest',
                'Required parameter "getCategoriesMaxSaleQuantumRequest" was null or undefined when calling getCategoriesMaxSaleQuantum().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/categories/max-sale-quantum`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCategoriesMaxSaleQuantumRequestToJSON(requestParameters['getCategoriesMaxSaleQuantumRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoriesMaxSaleQuantumResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Лимит на установку кванта продажи и минимального количества товаров в заказе
     */
    async getCategoriesMaxSaleQuantum(requestParameters: GetCategoriesMaxSaleQuantumOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCategoriesMaxSaleQuantumResponse> {
        const response = await this.getCategoriesMaxSaleQuantumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Дерево категорий
     */
    async getCategoriesTreeRaw(requestParameters: GetCategoriesTreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCategoriesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/categories/tree`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCategoriesRequestToJSON(requestParameters['getCategoriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Дерево категорий
     */
    async getCategoriesTree(requestParameters: GetCategoriesTreeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCategoriesResponse> {
        const response = await this.getCategoriesTreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
     * Списки характеристик товаров по категориям
     */
    async getCategoryContentParametersRaw(requestParameters: GetCategoryContentParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCategoryContentParametersResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getCategoryContentParameters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/category/{categoryId}/parameters`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoryContentParametersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
     * Списки характеристик товаров по категориям
     */
    async getCategoryContentParameters(requestParameters: GetCategoryContentParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCategoryContentParametersResponse> {
        const response = await this.getCategoryContentParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение истории сообщений в чате
     */
    async getChatHistoryRaw(requestParameters: GetChatHistoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChatHistoryResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getChatHistory().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getChatHistory().'
            );
        }

        if (requestParameters['getChatHistoryRequest'] == null) {
            throw new runtime.RequiredError(
                'getChatHistoryRequest',
                'Required parameter "getChatHistoryRequest" was null or undefined when calling getChatHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chatId'] != null) {
            queryParameters['chatId'] = requestParameters['chatId'];
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/chats/history`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChatHistoryRequestToJSON(requestParameters['getChatHistoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChatHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение истории сообщений в чате
     */
    async getChatHistory(requestParameters: GetChatHistoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChatHistoryResponse> {
        const response = await this.getChatHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение доступных чатов
     */
    async getChatsRaw(requestParameters: GetChatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetChatsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getChats().'
            );
        }

        if (requestParameters['getChatsRequest'] == null) {
            throw new runtime.RequiredError(
                'getChatsRequest',
                'Required parameter "getChatsRequest" was null or undefined when calling getChats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/chats`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetChatsRequestToJSON(requestParameters['getChatsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetChatsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение доступных чатов
     */
    async getChats(requestParameters: GetChatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetChatsResponse> {
        const response = await this.getChatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Информация о прайс-листе
     * @deprecated
     */
    async getFeedRaw(requestParameters: GetFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getFeed().'
            );
        }

        if (requestParameters['feedId'] == null) {
            throw new runtime.RequiredError(
                'feedId',
                'Required parameter "feedId" was null or undefined when calling getFeed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/feeds/{feedId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters['feedId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Информация о прайс-листе
     * @deprecated
     */
    async getFeed(requestParameters: GetFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedResponse> {
        const response = await this.getFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отчет по индексации прайс-листа
     * @deprecated
     */
    async getFeedIndexLogsRaw(requestParameters: GetFeedIndexLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedIndexLogsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getFeedIndexLogs().'
            );
        }

        if (requestParameters['feedId'] == null) {
            throw new runtime.RequiredError(
                'feedId',
                'Required parameter "feedId" was null or undefined when calling getFeedIndexLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['publishedTimeFrom'] != null) {
            queryParameters['published_time_from'] = (requestParameters['publishedTimeFrom'] as any).toISOString();
        }

        if (requestParameters['publishedTimeTo'] != null) {
            queryParameters['published_time_to'] = (requestParameters['publishedTimeTo'] as any).toISOString();
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/feeds/{feedId}/index-logs`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters['feedId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedIndexLogsResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отчет по индексации прайс-листа
     * @deprecated
     */
    async getFeedIndexLogs(requestParameters: GetFeedIndexLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedIndexLogsResponse> {
        const response = await this.getFeedIndexLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Новые и обновленные отзывы о магазине
     * @deprecated
     */
    async getFeedbackAndCommentUpdatesRaw(requestParameters: GetFeedbackAndCommentUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedbackListResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getFeedbackAndCommentUpdates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['fromDate'] != null) {
            queryParameters['from_date'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/feedback/updates`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedbackListResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * Новые и обновленные отзывы о магазине
     * @deprecated
     */
    async getFeedbackAndCommentUpdates(requestParameters: GetFeedbackAndCommentUpdatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedbackListResponse> {
        const response = await this.getFeedbackAndCommentUpdatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Список прайс-листов магазина
     * @deprecated
     */
    async getFeedsRaw(requestParameters: GetFeedsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFeedsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getFeeds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/feeds`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFeedsResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Список прайс-листов магазина
     * @deprecated
     */
    async getFeeds(requestParameters: GetFeedsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFeedsResponse> {
        const response = await this.getFeedsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Идентификаторы складов Маркета (FBY)
     */
    async getFulfillmentWarehousesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFulfillmentWarehousesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/warehouses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFulfillmentWarehousesResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Идентификаторы складов Маркета (FBY)
     */
    async getFulfillmentWarehouses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFulfillmentWarehousesResponse> {
        const response = await this.getFulfillmentWarehousesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение комментариев к отзыву
     */
    async getGoodsFeedbackCommentsRaw(requestParameters: GetGoodsFeedbackCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoodsFeedbackCommentsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getGoodsFeedbackComments().'
            );
        }

        if (requestParameters['getGoodsFeedbackCommentsRequest'] == null) {
            throw new runtime.RequiredError(
                'getGoodsFeedbackCommentsRequest',
                'Required parameter "getGoodsFeedbackCommentsRequest" was null or undefined when calling getGoodsFeedbackComments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/comments`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetGoodsFeedbackCommentsRequestToJSON(requestParameters['getGoodsFeedbackCommentsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoodsFeedbackCommentsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение комментариев к отзыву
     */
    async getGoodsFeedbackComments(requestParameters: GetGoodsFeedbackCommentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoodsFeedbackCommentsResponse> {
        const response = await this.getGoodsFeedbackCommentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение отзывов о товарах продавца
     */
    async getGoodsFeedbacksRaw(requestParameters: GetGoodsFeedbacksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoodsFeedbackResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getGoodsFeedbacks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetGoodsFeedbackRequestToJSON(requestParameters['getGoodsFeedbackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoodsFeedbackResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Получение отзывов о товарах продавца
     */
    async getGoodsFeedbacks(requestParameters: GetGoodsFeedbacksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoodsFeedbackResponse> {
        const response = await this.getGoodsFeedbacksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Отчет по товарам
     */
    async getGoodsStatsRaw(requestParameters: GetGoodsStatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoodsStatsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getGoodsStats().'
            );
        }

        if (requestParameters['getGoodsStatsRequest'] == null) {
            throw new runtime.RequiredError(
                'getGoodsStatsRequest',
                'Required parameter "getGoodsStatsRequest" was null or undefined when calling getGoodsStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/stats/skus`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetGoodsStatsRequestToJSON(requestParameters['getGoodsStatsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoodsStatsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Отчет по товарам
     */
    async getGoodsStats(requestParameters: GetGoodsStatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoodsStatsResponse> {
        const response = await this.getGoodsStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Информация о скрытых вами товарах
     */
    async getHiddenOffersRaw(requestParameters: GetHiddenOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetHiddenOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getHiddenOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offerId'] != null) {
            queryParameters['offer_id'] = requestParameters['offerId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/hidden-offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHiddenOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Информация о скрытых вами товарах
     */
    async getHiddenOffers(requestParameters: GetHiddenOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetHiddenOffersResponse> {
        const response = await this.getHiddenOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
     * Получение информации о заполненности карточек магазина
     */
    async getOfferCardsContentStatusRaw(requestParameters: GetOfferCardsContentStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOfferCardsContentStatusResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getOfferCardsContentStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-cards`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOfferCardsContentStatusRequestToJSON(requestParameters['getOfferCardsContentStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferCardsContentStatusResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
     * Получение информации о заполненности карточек магазина
     */
    async getOfferCardsContentStatus(requestParameters: GetOfferCardsContentStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOfferCardsContentStatusResponse> {
        const response = await this.getOfferCardsContentStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
     * Список товаров в каталоге
     * @deprecated
     */
    async getOfferMappingEntriesRaw(requestParameters: GetOfferMappingEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOfferMappingEntriesResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOfferMappingEntries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['offerId'] != null) {
            queryParameters['offer_id'] = requestParameters['offerId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['shopSku'] != null) {
            queryParameters['shop_sku'] = requestParameters['shopSku']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['mappingKind'] != null) {
            queryParameters['mapping_kind'] = requestParameters['mappingKind'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['availability'] != null) {
            queryParameters['availability'] = requestParameters['availability']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['categoryId'] != null) {
            queryParameters['category_id'] = requestParameters['categoryId']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['vendor'] != null) {
            queryParameters['vendor'] = requestParameters['vendor']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-mapping-entries`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferMappingEntriesResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
     * Список товаров в каталоге
     * @deprecated
     */
    async getOfferMappingEntries(requestParameters: GetOfferMappingEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOfferMappingEntriesResponse> {
        const response = await this.getOfferMappingEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * Информация о товарах в каталоге
     */
    async getOfferMappingsRaw(requestParameters: GetOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOfferMappingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getOfferMappings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOfferMappingsRequestToJSON(requestParameters['getOfferMappingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferMappingsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * Информация о товарах в каталоге
     */
    async getOfferMappings(requestParameters: GetOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOfferMappingsResponse> {
        const response = await this.getOfferMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Рекомендации Маркета, касающиеся цен
     */
    async getOfferRecommendationsRaw(requestParameters: GetOfferRecommendationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOfferRecommendationsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getOfferRecommendations().'
            );
        }

        if (requestParameters['getOfferRecommendationsRequest'] == null) {
            throw new runtime.RequiredError(
                'getOfferRecommendationsRequest',
                'Required parameter "getOfferRecommendationsRequest" was null or undefined when calling getOfferRecommendations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offers/recommendations`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOfferRecommendationsRequestToJSON(requestParameters['getOfferRecommendationsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferRecommendationsResponseFromJSON(jsonValue));
    }

    /**
     * Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Рекомендации Маркета, касающиеся цен
     */
    async getOfferRecommendations(requestParameters: GetOfferRecommendationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOfferRecommendationsResponse> {
        const response = await this.getOfferRecommendationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * Предложения магазина
     * @deprecated
     */
    async getOffersRaw(requestParameters: GetOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOffersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feedId'] = requestParameters['feedId'];
        }

        if (requestParameters['shopCategoryId'] != null) {
            queryParameters['shopCategoryId'] = requestParameters['shopCategoryId'];
        }

        if (requestParameters['currency'] != null) {
            queryParameters['currency'] = requestParameters['currency'];
        }

        if (requestParameters['matched'] != null) {
            queryParameters['matched'] = requestParameters['matched'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offers`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOffersResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * Предложения магазина
     * @deprecated
     */
    async getOffers(requestParameters: GetOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOffersResponse> {
        const response = await this.getOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Информация об одном заказе
     */
    async getOrderRaw(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrderResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOrder().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrderResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Информация об одном заказе
     */
    async getOrder(requestParameters: GetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrderResponse> {
        const response = await this.getOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * Информация о покупателе — юридическом лице
     */
    async getOrderBusinessBuyerInfoRaw(requestParameters: GetOrderBusinessBuyerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBusinessBuyerInfoResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOrderBusinessBuyerInfo().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getOrderBusinessBuyerInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/business-buyer`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBusinessBuyerInfoResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * Информация о покупателе — юридическом лице
     */
    async getOrderBusinessBuyerInfo(requestParameters: GetOrderBusinessBuyerInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBusinessBuyerInfoResponse> {
        const response = await this.getOrderBusinessBuyerInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * Информация о документах
     */
    async getOrderBusinessDocumentsInfoRaw(requestParameters: GetOrderBusinessDocumentsInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBusinessDocumentsInfoResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOrderBusinessDocumentsInfo().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getOrderBusinessDocumentsInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/documents`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBusinessDocumentsInfoResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * Информация о документах
     */
    async getOrderBusinessDocumentsInfo(requestParameters: GetOrderBusinessDocumentsInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBusinessDocumentsInfoResponse> {
        const response = await this.getOrderBusinessDocumentsInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Информация о нескольких заказах
     */
    async getOrdersRaw(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrdersResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['orderIds'] != null) {
            queryParameters['orderIds'] = requestParameters['orderIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = Array.from(requestParameters['status'])!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['substatus'] != null) {
            queryParameters['substatus'] = Array.from(requestParameters['substatus'])!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['supplierShipmentDateFrom'] != null) {
            queryParameters['supplierShipmentDateFrom'] = (requestParameters['supplierShipmentDateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['supplierShipmentDateTo'] != null) {
            queryParameters['supplierShipmentDateTo'] = (requestParameters['supplierShipmentDateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['updatedAtFrom'] != null) {
            queryParameters['updatedAtFrom'] = (requestParameters['updatedAtFrom'] as any).toISOString();
        }

        if (requestParameters['updatedAtTo'] != null) {
            queryParameters['updatedAtTo'] = (requestParameters['updatedAtTo'] as any).toISOString();
        }

        if (requestParameters['dispatchType'] != null) {
            queryParameters['dispatchType'] = requestParameters['dispatchType'];
        }

        if (requestParameters['fake'] != null) {
            queryParameters['fake'] = requestParameters['fake'];
        }

        if (requestParameters['hasCis'] != null) {
            queryParameters['hasCis'] = requestParameters['hasCis'];
        }

        if (requestParameters['onlyWaitingForCancellationApprove'] != null) {
            queryParameters['onlyWaitingForCancellationApprove'] = requestParameters['onlyWaitingForCancellationApprove'];
        }

        if (requestParameters['onlyEstimatedDelivery'] != null) {
            queryParameters['onlyEstimatedDelivery'] = requestParameters['onlyEstimatedDelivery'];
        }

        if (requestParameters['buyerType'] != null) {
            queryParameters['buyerType'] = requestParameters['buyerType'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrdersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Информация о нескольких заказах
     */
    async getOrders(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrdersResponse> {
        const response = await this.getOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Детальная информация по заказам
     */
    async getOrdersStatsRaw(requestParameters: GetOrdersStatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetOrdersStatsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getOrdersStats().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/stats/orders`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetOrdersStatsRequestToJSON(requestParameters['getOrdersStatsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOrdersStatsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * Детальная информация по заказам
     */
    async getOrdersStats(requestParameters: GetOrdersStatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetOrdersStatsResponse> {
        const response = await this.getOrdersStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
     * Список цен
     * @deprecated
     */
    async getPricesRaw(requestParameters: GetPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPricesResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getPrices().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-prices`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPricesResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
     * Список цен
     * @deprecated
     */
    async getPrices(requestParameters: GetPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPricesResponse> {
        const response = await this.getPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
     * Просмотр цен на указанные товары в магазине
     */
    async getPricesByOfferIdsRaw(requestParameters: GetPricesByOfferIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPricesByOfferIdsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getPricesByOfferIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-prices`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPricesByOfferIdsRequestToJSON(requestParameters['getPricesByOfferIdsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPricesByOfferIdsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
     * Просмотр цен на указанные товары в магазине
     */
    async getPricesByOfferIds(requestParameters: GetPricesByOfferIdsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPricesByOfferIdsResponse> {
        const response = await this.getPricesByOfferIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     */
    async getPromoOffersRaw(requestParameters: GetPromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPromoOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getPromoOffers().'
            );
        }

        if (requestParameters['getPromoOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'getPromoOffersRequest',
                'Required parameter "getPromoOffersRequest" was null or undefined when calling getPromoOffers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos/offers`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPromoOffersRequestToJSON(requestParameters['getPromoOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPromoOffersResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Получение списка товаров, которые участвуют или могут участвовать в акции
     */
    async getPromoOffers(requestParameters: GetPromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPromoOffersResponse> {
        const response = await this.getPromoOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Получение списка акций
     */
    async getPromosRaw(requestParameters: GetPromosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPromosResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getPromos().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPromosRequestToJSON(requestParameters['getPromosRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPromosResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Получение списка акций
     */
    async getPromos(requestParameters: GetPromosOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPromosResponse> {
        const response = await this.getPromosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Индекс качества магазинов
     */
    async getQualityRatingsRaw(requestParameters: GetQualityRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQualityRatingResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getQualityRatings().'
            );
        }

        if (requestParameters['getQualityRatingRequest'] == null) {
            throw new runtime.RequiredError(
                'getQualityRatingRequest',
                'Required parameter "getQualityRatingRequest" was null or undefined when calling getQualityRatings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/ratings/quality`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetQualityRatingRequestToJSON(requestParameters['getQualityRatingRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQualityRatingResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Индекс качества магазинов
     */
    async getQualityRatings(requestParameters: GetQualityRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQualityRatingResponse> {
        const response = await this.getQualityRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Получение заданного отчета
     */
    async getReportInfoRaw(requestParameters: GetReportInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReportInfoResponse>> {
        if (requestParameters['reportId'] == null) {
            throw new runtime.RequiredError(
                'reportId',
                'Required parameter "reportId" was null or undefined when calling getReportInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/reports/info/{reportId}`.replace(`{${"reportId"}}`, encodeURIComponent(String(requestParameters['reportId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReportInfoResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * Получение заданного отчета
     */
    async getReportInfo(requestParameters: GetReportInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReportInfoResponse> {
        const response = await this.getReportInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Информация о невыкупе или возврате
     */
    async getReturnRaw(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReturnResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturn().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getReturn().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling getReturn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReturnResponseFromJSON(jsonValue));
    }

    /**
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Информация о невыкупе или возврате
     */
    async getReturn(requestParameters: GetReturnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReturnResponse> {
        const response = await this.getReturnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение фотографии возврата
     */
    async getReturnPhotoRaw(requestParameters: GetReturnPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['returnId'] == null) {
            throw new runtime.RequiredError(
                'returnId',
                'Required parameter "returnId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling getReturnPhoto().'
            );
        }

        if (requestParameters['imageHash'] == null) {
            throw new runtime.RequiredError(
                'imageHash',
                'Required parameter "imageHash" was null or undefined when calling getReturnPhoto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"returnId"}}`, encodeURIComponent(String(requestParameters['returnId']))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters['itemId']))).replace(`{${"imageHash"}}`, encodeURIComponent(String(requestParameters['imageHash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Получение фотографии возврата
     */
    async getReturnPhoto(requestParameters: GetReturnPhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getReturnPhotoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Список невыкупов и возвратов
     */
    async getReturnsRaw(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetReturnsResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getReturns().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['orderIds'] != null) {
            queryParameters['orderIds'] = requestParameters['orderIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['statuses'] != null) {
            queryParameters['statuses'] = requestParameters['statuses']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['fromDate'] != null) {
            queryParameters['fromDate'] = (requestParameters['fromDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate'] != null) {
            queryParameters['toDate'] = (requestParameters['toDate'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['fromDate2'] != null) {
            queryParameters['from_date'] = (requestParameters['fromDate2'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['toDate2'] != null) {
            queryParameters['to_date'] = (requestParameters['toDate2'] as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/returns`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetReturnsResponseFromJSON(jsonValue));
    }

    /**
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * Список невыкупов и возвратов
     */
    async getReturns(requestParameters: GetReturnsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetReturnsResponse> {
        const response = await this.getReturnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
     * Информация об остатках и оборачиваемости
     */
    async getStocksRaw(requestParameters: GetStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWarehouseStocksResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getStocks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offers/stocks`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetWarehouseStocksRequestToJSON(requestParameters['getWarehouseStocksRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWarehouseStocksResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
     * Информация об остатках и оборачиваемости
     */
    async getStocks(requestParameters: GetStocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWarehouseStocksResponse> {
        const response = await this.getStocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
     * Рекомендованные карточки для товаров
     * @deprecated
     */
    async getSuggestedOfferMappingEntriesRaw(requestParameters: GetSuggestedOfferMappingEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSuggestedOfferMappingEntriesResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getSuggestedOfferMappingEntries().'
            );
        }

        if (requestParameters['getSuggestedOfferMappingEntriesRequest'] == null) {
            throw new runtime.RequiredError(
                'getSuggestedOfferMappingEntriesRequest',
                'Required parameter "getSuggestedOfferMappingEntriesRequest" was null or undefined when calling getSuggestedOfferMappingEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-mapping-entries/suggestions`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSuggestedOfferMappingEntriesRequestToJSON(requestParameters['getSuggestedOfferMappingEntriesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSuggestedOfferMappingEntriesResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
     * Рекомендованные карточки для товаров
     * @deprecated
     */
    async getSuggestedOfferMappingEntries(requestParameters: GetSuggestedOfferMappingEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSuggestedOfferMappingEntriesResponse> {
        const response = await this.getSuggestedOfferMappingEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     */
    async getSuggestedOfferMappingsRaw(requestParameters: GetSuggestedOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSuggestedOfferMappingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling getSuggestedOfferMappings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/suggestions`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSuggestedOfferMappingsRequestToJSON(requestParameters['getSuggestedOfferMappingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSuggestedOfferMappingsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     */
    async getSuggestedOfferMappings(requestParameters: GetSuggestedOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSuggestedOfferMappingsResponse> {
        const response = await this.getSuggestedOfferMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Цены для продвижения товаров
     * @deprecated
     */
    async getSuggestedPricesRaw(requestParameters: GetSuggestedPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuggestPricesResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getSuggestedPrices().'
            );
        }

        if (requestParameters['suggestPricesRequest'] == null) {
            throw new runtime.RequiredError(
                'suggestPricesRequest',
                'Required parameter "suggestPricesRequest" was null or undefined when calling getSuggestedPrices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-prices/suggestions`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SuggestPricesRequestToJSON(requestParameters['suggestPricesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuggestPricesResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * Цены для продвижения товаров
     * @deprecated
     */
    async getSuggestedPrices(requestParameters: GetSuggestedPricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuggestPricesResponse> {
        const response = await this.getSuggestedPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Включение буста продаж и установка ставок
     */
    async putBidsForBusinessRaw(requestParameters: PutBidsForBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling putBidsForBusiness().'
            );
        }

        if (requestParameters['putSkuBidsRequest'] == null) {
            throw new runtime.RequiredError(
                'putSkuBidsRequest',
                'Required parameter "putSkuBidsRequest" was null or undefined when calling putBidsForBusiness().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/bids`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutSkuBidsRequestToJSON(requestParameters['putSkuBidsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Включение буста продаж и установка ставок
     */
    async putBidsForBusiness(requestParameters: PutBidsForBusinessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.putBidsForBusinessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Включение буста продаж и установка ставок для магазина
     */
    async putBidsForCampaignRaw(requestParameters: PutBidsForCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling putBidsForCampaign().'
            );
        }

        if (requestParameters['putSkuBidsRequest'] == null) {
            throw new runtime.RequiredError(
                'putSkuBidsRequest',
                'Required parameter "putSkuBidsRequest" was null or undefined when calling putBidsForCampaign().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/bids`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutSkuBidsRequestToJSON(requestParameters['putSkuBidsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     * Включение буста продаж и установка ставок для магазина
     */
    async putBidsForCampaign(requestParameters: PutBidsForCampaignRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.putBidsForCampaignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * Сообщить, что прайс-лист обновился
     * @deprecated
     */
    async refreshFeedRaw(requestParameters: RefreshFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling refreshFeed().'
            );
        }

        if (requestParameters['feedId'] == null) {
            throw new runtime.RequiredError(
                'feedId',
                'Required parameter "feedId" was null or undefined when calling refreshFeed().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/feeds/{feedId}/refresh`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters['feedId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * Сообщить, что прайс-лист обновился
     * @deprecated
     */
    async refreshFeed(requestParameters: RefreshFeedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.refreshFeedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Информация о дочерних регионах
     */
    async searchRegionChildrenRaw(requestParameters: SearchRegionChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRegionWithChildrenResponse>> {
        if (requestParameters['regionId'] == null) {
            throw new runtime.RequiredError(
                'regionId',
                'Required parameter "regionId" was null or undefined when calling searchRegionChildren().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/regions/{regionId}/children`.replace(`{${"regionId"}}`, encodeURIComponent(String(requestParameters['regionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRegionWithChildrenResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Информация о дочерних регионах
     */
    async searchRegionChildren(requestParameters: SearchRegionChildrenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRegionWithChildrenResponse> {
        const response = await this.searchRegionChildrenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Информация о регионе
     */
    async searchRegionsByIdRaw(requestParameters: SearchRegionsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRegionsResponse>> {
        if (requestParameters['regionId'] == null) {
            throw new runtime.RequiredError(
                'regionId',
                'Required parameter "regionId" was null or undefined when calling searchRegionsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/regions/{regionId}`.replace(`{${"regionId"}}`, encodeURIComponent(String(requestParameters['regionId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRegionsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Информация о регионе
     */
    async searchRegionsById(requestParameters: SearchRegionsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRegionsResponse> {
        const response = await this.searchRegionsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Поиск регионов по их имени
     */
    async searchRegionsByNameRaw(requestParameters: SearchRegionsByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRegionsResponse>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling searchRegionsByName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['pageToken'] != null) {
            queryParameters['page_token'] = requestParameters['pageToken'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRegionsResponseFromJSON(jsonValue));
    }

    /**
     * Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
     * Поиск регионов по их имени
     */
    async searchRegionsByName(requestParameters: SearchRegionsByNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRegionsResponse> {
        const response = await this.searchRegionsByNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Отправка файла в чат
     */
    async sendFileToChatRaw(requestParameters: SendFileToChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling sendFileToChat().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling sendFileToChat().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling sendFileToChat().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chatId'] != null) {
            queryParameters['chatId'] = requestParameters['chatId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/chats/file/send`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Отправка файла в чат
     */
    async sendFileToChat(requestParameters: SendFileToChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.sendFileToChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Отправка сообщения в чат
     */
    async sendMessageToChatRaw(requestParameters: SendMessageToChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling sendMessageToChat().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling sendMessageToChat().'
            );
        }

        if (requestParameters['sendMessageToChatRequest'] == null) {
            throw new runtime.RequiredError(
                'sendMessageToChatRequest',
                'Required parameter "sendMessageToChatRequest" was null or undefined when calling sendMessageToChat().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chatId'] != null) {
            queryParameters['chatId'] = requestParameters['chatId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/chats/message`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendMessageToChatRequestToJSON(requestParameters['sendMessageToChatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * Отправка сообщения в чат
     */
    async sendMessageToChat(requestParameters: SendMessageToChatOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.sendMessageToChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * Изменение параметров прайс-листа
     * @deprecated
     */
    async setFeedParamsRaw(requestParameters: SetFeedParamsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling setFeedParams().'
            );
        }

        if (requestParameters['feedId'] == null) {
            throw new runtime.RequiredError(
                'feedId',
                'Required parameter "feedId" was null or undefined when calling setFeedParams().'
            );
        }

        if (requestParameters['setFeedParamsRequest'] == null) {
            throw new runtime.RequiredError(
                'setFeedParamsRequest',
                'Required parameter "setFeedParamsRequest" was null or undefined when calling setFeedParams().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/feeds/{feedId}/params`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"feedId"}}`, encodeURIComponent(String(requestParameters['feedId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetFeedParamsRequestToJSON(requestParameters['setFeedParamsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * Изменение параметров прайс-листа
     * @deprecated
     */
    async setFeedParams(requestParameters: SetFeedParamsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.setFeedParamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отказ от ответа на отзывы
     */
    async skipGoodsFeedbacksReactionRaw(requestParameters: SkipGoodsFeedbacksReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling skipGoodsFeedbacksReaction().'
            );
        }

        if (requestParameters['skipGoodsFeedbackReactionRequest'] == null) {
            throw new runtime.RequiredError(
                'skipGoodsFeedbackReactionRequest',
                'Required parameter "skipGoodsFeedbackReactionRequest" was null or undefined when calling skipGoodsFeedbacksReaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/skip-reaction`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkipGoodsFeedbackReactionRequestToJSON(requestParameters['skipGoodsFeedbackReactionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Отказ от ответа на отзывы
     */
    async skipGoodsFeedbacksReaction(requestParameters: SkipGoodsFeedbacksReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.skipGoodsFeedbacksReactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Установка цен на товары во всех магазинах
     */
    async updateBusinessPricesRaw(requestParameters: UpdateBusinessPricesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateBusinessPrices().'
            );
        }

        if (requestParameters['updateBusinessPricesRequest'] == null) {
            throw new runtime.RequiredError(
                'updateBusinessPricesRequest',
                'Required parameter "updateBusinessPricesRequest" was null or undefined when calling updateBusinessPrices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-prices/updates`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBusinessPricesRequestToJSON(requestParameters['updateBusinessPricesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Установка цен на товары во всех магазинах
     */
    async updateBusinessPrices(requestParameters: UpdateBusinessPricesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.updateBusinessPricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Изменение условий продажи товаров в магазине
     */
    async updateCampaignOffersRaw(requestParameters: UpdateCampaignOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updateCampaignOffers().'
            );
        }

        if (requestParameters['updateCampaignOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'updateCampaignOffersRequest',
                'Required parameter "updateCampaignOffersRequest" was null or undefined when calling updateCampaignOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offers/update`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCampaignOffersRequestToJSON(requestParameters['updateCampaignOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Изменение условий продажи товаров в магазине
     */
    async updateCampaignOffers(requestParameters: UpdateCampaignOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.updateCampaignOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Добавление нового или изменение созданного комментария
     */
    async updateGoodsFeedbackCommentRaw(requestParameters: UpdateGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateGoodsFeedbackCommentResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateGoodsFeedbackComment().'
            );
        }

        if (requestParameters['updateGoodsFeedbackCommentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGoodsFeedbackCommentRequest',
                'Required parameter "updateGoodsFeedbackCommentRequest" was null or undefined when calling updateGoodsFeedbackComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/goods-feedback/comments/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGoodsFeedbackCommentRequestToJSON(requestParameters['updateGoodsFeedbackCommentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateGoodsFeedbackCommentResponseFromJSON(jsonValue));
    }

    /**
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * Добавление нового или изменение созданного комментария
     */
    async updateGoodsFeedbackComment(requestParameters: UpdateGoodsFeedbackCommentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateGoodsFeedbackCommentResponse> {
        const response = await this.updateGoodsFeedbackCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Редактирование категорийных характеристик товара
     */
    async updateOfferContentRaw(requestParameters: UpdateOfferContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOfferContentResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateOfferContent().'
            );
        }

        if (requestParameters['updateOfferContentRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOfferContentRequest',
                'Required parameter "updateOfferContentRequest" was null or undefined when calling updateOfferContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-cards/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOfferContentRequestToJSON(requestParameters['updateOfferContentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOfferContentResponseFromJSON(jsonValue));
    }

    /**
     * Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Редактирование категорийных характеристик товара
     */
    async updateOfferContent(requestParameters: UpdateOfferContentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOfferContentResponse> {
        const response = await this.updateOfferContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
     * Добавление и редактирование товаров в каталоге
     * @deprecated
     */
    async updateOfferMappingEntriesRaw(requestParameters: UpdateOfferMappingEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updateOfferMappingEntries().'
            );
        }

        if (requestParameters['updateOfferMappingEntryRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOfferMappingEntryRequest',
                'Required parameter "updateOfferMappingEntryRequest" was null or undefined when calling updateOfferMappingEntries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-mapping-entries/updates`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOfferMappingEntryRequestToJSON(requestParameters['updateOfferMappingEntryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
     * Добавление и редактирование товаров в каталоге
     * @deprecated
     */
    async updateOfferMappingEntries(requestParameters: UpdateOfferMappingEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.updateOfferMappingEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Добавление товаров в каталог и изменение информации о них
     */
    async updateOfferMappingsRaw(requestParameters: UpdateOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateOfferMappingsResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updateOfferMappings().'
            );
        }

        if (requestParameters['updateOfferMappingsRequest'] == null) {
            throw new runtime.RequiredError(
                'updateOfferMappingsRequest',
                'Required parameter "updateOfferMappingsRequest" was null or undefined when calling updateOfferMappings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/offer-mappings/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOfferMappingsRequestToJSON(requestParameters['updateOfferMappingsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateOfferMappingsResponseFromJSON(jsonValue));
    }

    /**
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * Добавление товаров в каталог и изменение информации о них
     */
    async updateOfferMappings(requestParameters: UpdateOfferMappingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateOfferMappingsResponse> {
        const response = await this.updateOfferMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Установка цен на товары в конкретном магазине
     */
    async updatePricesRaw(requestParameters: UpdatePricesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmptyApiResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updatePrices().'
            );
        }

        if (requestParameters['updatePricesRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePricesRequest',
                'Required parameter "updatePricesRequest" was null or undefined when calling updatePrices().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/campaigns/{campaignId}/offer-prices/updates`.replace(`{${"campaignId"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePricesRequestToJSON(requestParameters['updatePricesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmptyApiResponseFromJSON(jsonValue));
    }

    /**
     * Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     * Установка цен на товары в конкретном магазине
     */
    async updatePrices(requestParameters: UpdatePricesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmptyApiResponse> {
        const response = await this.updatePricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Добавление товаров в акцию или изменение их цен
     */
    async updatePromoOffersRaw(requestParameters: UpdatePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdatePromoOffersResponse>> {
        if (requestParameters['businessId'] == null) {
            throw new runtime.RequiredError(
                'businessId',
                'Required parameter "businessId" was null or undefined when calling updatePromoOffers().'
            );
        }

        if (requestParameters['updatePromoOffersRequest'] == null) {
            throw new runtime.RequiredError(
                'updatePromoOffersRequest',
                'Required parameter "updatePromoOffersRequest" was null or undefined when calling updatePromoOffers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth", ["market:partner-api"]);
        }

        const response = await this.request({
            path: `/businesses/{businessId}/promos/offers/update`.replace(`{${"businessId"}}`, encodeURIComponent(String(requestParameters['businessId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePromoOffersRequestToJSON(requestParameters['updatePromoOffersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdatePromoOffersResponseFromJSON(jsonValue));
    }

    /**
     * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * Добавление товаров в акцию или изменение их цен
     */
    async updatePromoOffers(requestParameters: UpdatePromoOffersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdatePromoOffersResponse> {
        const response = await this.updatePromoOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
