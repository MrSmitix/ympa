# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class OrderDeliveryDatesDTO(BaseModel):
    """
    Диапазон дат доставки.  # noqa: E501
    """
    from_date: Optional[StrictStr] = Field(default=None, alias="fromDate", description="Формат даты: `ДД-ММ-ГГГГ`. ")
    to_date: Optional[StrictStr] = Field(default=None, alias="toDate", description="Формат даты: `ДД-ММ-ГГГГ`. ")
    from_time: Optional[StrictStr] = Field(default=None, alias="fromTime", description="Начало интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Минимальное значение: `00:00`. ")
    to_time: Optional[StrictStr] = Field(default=None, alias="toTime", description="Конец интервала времени доставки.  Передается только совместно с параметром `type=DELIVERY`.  Формат времени: 24-часовой, `ЧЧ:ММ`. В качестве минут всегда должно быть указано `00` (исключение — `23:59`).  Максимальное значение: `23:59`. ")
    real_delivery_date: Optional[StrictStr] = Field(default=None, alias="realDeliveryDate", description="Формат даты: `ДД-ММ-ГГГГ`. ")
    __properties = ["fromDate", "toDate", "fromTime", "toTime", "realDeliveryDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderDeliveryDatesDTO:
        """Create an instance of OrderDeliveryDatesDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderDeliveryDatesDTO:
        """Create an instance of OrderDeliveryDatesDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderDeliveryDatesDTO.parse_obj(obj)

        _obj = OrderDeliveryDatesDTO.parse_obj({
            "from_date": obj.get("fromDate"),
            "to_date": obj.get("toDate"),
            "from_time": obj.get("fromTime"),
            "to_time": obj.get("toTime"),
            "real_delivery_date": obj.get("realDeliveryDate")
        })
        return _obj


