# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist

class GenerateStocksOnWarehousesReportRequest(BaseModel):
    """
    Данные, необходимые для генерации отчета.   # noqa: E501
    """
    campaign_id: StrictInt = Field(default=..., alias="campaignId", description="Идентификатор магазина.")
    warehouse_ids: Optional[conlist(StrictInt)] = Field(default=None, alias="warehouseIds", description="Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).")
    report_date: Optional[date] = Field(default=None, alias="reportDate", description="Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.")
    category_ids: Optional[conlist(StrictInt)] = Field(default=None, alias="categoryIds", description="Фильтр по категориям на Маркете (кроме модели FBY).")
    has_stocks: Optional[StrictBool] = Field(default=None, alias="hasStocks", description="Фильтр по наличию остатков (кроме модели FBY).")
    __properties = ["campaignId", "warehouseIds", "reportDate", "categoryIds", "hasStocks"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GenerateStocksOnWarehousesReportRequest:
        """Create an instance of GenerateStocksOnWarehousesReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if warehouse_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.warehouse_ids is None and "warehouse_ids" in self.__fields_set__:
            _dict['warehouseIds'] = None

        # set to None if category_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.category_ids is None and "category_ids" in self.__fields_set__:
            _dict['categoryIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GenerateStocksOnWarehousesReportRequest:
        """Create an instance of GenerateStocksOnWarehousesReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GenerateStocksOnWarehousesReportRequest.parse_obj(obj)

        _obj = GenerateStocksOnWarehousesReportRequest.parse_obj({
            "campaign_id": obj.get("campaignId"),
            "warehouse_ids": obj.get("warehouseIds"),
            "report_date": obj.get("reportDate"),
            "category_ids": obj.get("categoryIds"),
            "has_stocks": obj.get("hasStocks")
        })
        return _obj


