# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from ympa_python_pydantic_v1_client.models.promo_offer_discount_params_dto import PromoOfferDiscountParamsDTO
from ympa_python_pydantic_v1_client.models.promo_offer_promocode_params_dto import PromoOfferPromocodeParamsDTO

class PromoOfferParamsDTO(BaseModel):
    """
    Параметры товара в акции.  Возвращается параметр, который соответствует типу акции.   # noqa: E501
    """
    discount_params: Optional[PromoOfferDiscountParamsDTO] = Field(default=None, alias="discountParams")
    promocode_params: Optional[PromoOfferPromocodeParamsDTO] = Field(default=None, alias="promocodeParams")
    __properties = ["discountParams", "promocodeParams"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PromoOfferParamsDTO:
        """Create an instance of PromoOfferParamsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount_params
        if self.discount_params:
            _dict['discountParams'] = self.discount_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promocode_params
        if self.promocode_params:
            _dict['promocodeParams'] = self.promocode_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PromoOfferParamsDTO:
        """Create an instance of PromoOfferParamsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PromoOfferParamsDTO.parse_obj(obj)

        _obj = PromoOfferParamsDTO.parse_obj({
            "discount_params": PromoOfferDiscountParamsDTO.from_dict(obj.get("discountParams")) if obj.get("discountParams") is not None else None,
            "promocode_params": PromoOfferPromocodeParamsDTO.from_dict(obj.get("promocodeParams")) if obj.get("promocodeParams") is not None else None
        })
        return _obj


