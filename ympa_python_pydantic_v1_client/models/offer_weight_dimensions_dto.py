# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class OfferWeightDimensionsDTO(BaseModel):
    """
    Габариты упаковки и вес товара.  Если товар занимает несколько коробок, перед измерением размеров сложите их компактно.  ![Схема измерения многоместных грузов](../../_images/reference/boxes-measure.png)   # noqa: E501
    """
    length: Union[StrictFloat, StrictInt] = Field(default=..., description="Длина упаковки в см. ")
    width: Union[StrictFloat, StrictInt] = Field(default=..., description="Ширина упаковки в см. ")
    height: Union[StrictFloat, StrictInt] = Field(default=..., description="Высота упаковки в см. ")
    weight: Union[StrictFloat, StrictInt] = Field(default=..., description="Вес товара в кг с учетом упаковки (брутто). ")
    __properties = ["length", "width", "height", "weight"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfferWeightDimensionsDTO:
        """Create an instance of OfferWeightDimensionsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfferWeightDimensionsDTO:
        """Create an instance of OfferWeightDimensionsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OfferWeightDimensionsDTO.parse_obj(obj)

        _obj = OfferWeightDimensionsDTO.parse_obj({
            "length": obj.get("length"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "weight": obj.get("weight")
        })
        return _obj


