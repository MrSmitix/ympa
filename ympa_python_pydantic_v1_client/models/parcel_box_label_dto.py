# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ParcelBoxLabelDTO(BaseModel):
    """
    Информация о ярлыке для коробки.  # noqa: E501
    """
    url: StrictStr = Field(default=..., description="Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). ")
    supplier_name: StrictStr = Field(default=..., alias="supplierName", description="Юридическое название магазина.")
    delivery_service_name: StrictStr = Field(default=..., alias="deliveryServiceName", description="Юридическое название службы доставки.")
    order_id: StrictInt = Field(default=..., alias="orderId", description="Идентификатор заказа в системе Маркета.")
    order_num: StrictStr = Field(default=..., alias="orderNum", description="Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. ")
    recipient_name: StrictStr = Field(default=..., alias="recipientName", description="Фамилия и инициалы получателя заказа.")
    box_id: StrictInt = Field(default=..., alias="boxId", description="Идентификатор коробки.")
    fulfilment_id: StrictStr = Field(default=..., alias="fulfilmentId", description="Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. ")
    place: StrictStr = Field(default=..., description="Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. ")
    weight: StrictStr = Field(default=..., description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. ")
    delivery_service_id: StrictStr = Field(default=..., alias="deliveryServiceId", description="Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).")
    delivery_address: Optional[StrictStr] = Field(default=None, alias="deliveryAddress", description="Адрес получателя.")
    shipment_date: Optional[StrictStr] = Field(default=None, alias="shipmentDate", description="Дата отгрузки в формате `dd.MM.yyyy`.")
    __properties = ["url", "supplierName", "deliveryServiceName", "orderId", "orderNum", "recipientName", "boxId", "fulfilmentId", "place", "weight", "deliveryServiceId", "deliveryAddress", "shipmentDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParcelBoxLabelDTO:
        """Create an instance of ParcelBoxLabelDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParcelBoxLabelDTO:
        """Create an instance of ParcelBoxLabelDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParcelBoxLabelDTO.parse_obj(obj)

        _obj = ParcelBoxLabelDTO.parse_obj({
            "url": obj.get("url"),
            "supplier_name": obj.get("supplierName"),
            "delivery_service_name": obj.get("deliveryServiceName"),
            "order_id": obj.get("orderId"),
            "order_num": obj.get("orderNum"),
            "recipient_name": obj.get("recipientName"),
            "box_id": obj.get("boxId"),
            "fulfilment_id": obj.get("fulfilmentId"),
            "place": obj.get("place"),
            "weight": obj.get("weight"),
            "delivery_service_id": obj.get("deliveryServiceId"),
            "delivery_address": obj.get("deliveryAddress"),
            "shipment_date": obj.get("shipmentDate")
        })
        return _obj


