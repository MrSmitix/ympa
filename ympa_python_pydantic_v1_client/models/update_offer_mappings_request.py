# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from ympa_python_pydantic_v1_client.models.update_offer_mapping_dto import UpdateOfferMappingDTO

class UpdateOfferMappingsRequest(BaseModel):
    """
    UpdateOfferMappingsRequest
    """
    offer_mappings: conlist(UpdateOfferMappingDTO, max_items=500, min_items=1) = Field(default=..., alias="offerMappings", description="Перечень товаров, которые нужно добавить или обновить.")
    only_partner_media_content: Optional[StrictBool] = Field(default=None, alias="onlyPartnerMediaContent", description="Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`. ")
    __properties = ["offerMappings", "onlyPartnerMediaContent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOfferMappingsRequest:
        """Create an instance of UpdateOfferMappingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in offer_mappings (list)
        _items = []
        if self.offer_mappings:
            for _item in self.offer_mappings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['offerMappings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOfferMappingsRequest:
        """Create an instance of UpdateOfferMappingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateOfferMappingsRequest.parse_obj(obj)

        _obj = UpdateOfferMappingsRequest.parse_obj({
            "offer_mappings": [UpdateOfferMappingDTO.from_dict(_item) for _item in obj.get("offerMappings")] if obj.get("offerMappings") is not None else None,
            "only_partner_media_content": obj.get("onlyPartnerMediaContent")
        })
        return _obj


