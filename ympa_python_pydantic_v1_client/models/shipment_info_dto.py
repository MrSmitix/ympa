# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ympa_python_pydantic_v1_client.models.delivery_service_dto import DeliveryServiceDTO
from ympa_python_pydantic_v1_client.models.pallets_count_dto import PalletsCountDTO
from ympa_python_pydantic_v1_client.models.partner_shipment_warehouse_dto import PartnerShipmentWarehouseDTO
from ympa_python_pydantic_v1_client.models.shipment_status_type import ShipmentStatusType
from ympa_python_pydantic_v1_client.models.shipment_type import ShipmentType

class ShipmentInfoDTO(BaseModel):
    """
    Список с информацией об отгрузках.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор отгрузки.")
    plan_interval_from: Optional[datetime] = Field(default=None, alias="planIntervalFrom", description="Начало планового интервала отгрузки.")
    plan_interval_to: Optional[datetime] = Field(default=None, alias="planIntervalTo", description="Конец планового интервала отгрузки.")
    shipment_type: Optional[ShipmentType] = Field(default=None, alias="shipmentType")
    warehouse: Optional[PartnerShipmentWarehouseDTO] = None
    warehouse_to: Optional[PartnerShipmentWarehouseDTO] = Field(default=None, alias="warehouseTo")
    external_id: Optional[StrictStr] = Field(default=None, alias="externalId", description="Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.")
    delivery_service: Optional[DeliveryServiceDTO] = Field(default=None, alias="deliveryService")
    pallets_count: Optional[PalletsCountDTO] = Field(default=None, alias="palletsCount")
    order_ids: conlist(StrictInt, unique_items=True) = Field(default=..., alias="orderIds", description="Идентификаторы заказов в отгрузке.")
    draft_count: Optional[StrictInt] = Field(default=None, alias="draftCount", description="Количество заказов, которое Маркет запланировал к отгрузке.")
    planned_count: Optional[StrictInt] = Field(default=None, alias="plannedCount", description="Количество заказов, которое Маркет подтвердил к отгрузке.")
    fact_count: Optional[StrictInt] = Field(default=None, alias="factCount", description="Количество заказов, принятых в сортировочном центре или пункте приема.")
    status: Optional[ShipmentStatusType] = None
    status_description: Optional[StrictStr] = Field(default=None, alias="statusDescription", description="Описание статуса отгрузки.")
    status_update_time: Optional[datetime] = Field(default=None, alias="statusUpdateTime", description="Время последнего изменения статуса отгрузки.")
    __properties = ["id", "planIntervalFrom", "planIntervalTo", "shipmentType", "warehouse", "warehouseTo", "externalId", "deliveryService", "palletsCount", "orderIds", "draftCount", "plannedCount", "factCount", "status", "statusDescription", "statusUpdateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ShipmentInfoDTO:
        """Create an instance of ShipmentInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of warehouse_to
        if self.warehouse_to:
            _dict['warehouseTo'] = self.warehouse_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_service
        if self.delivery_service:
            _dict['deliveryService'] = self.delivery_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pallets_count
        if self.pallets_count:
            _dict['palletsCount'] = self.pallets_count.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ShipmentInfoDTO:
        """Create an instance of ShipmentInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ShipmentInfoDTO.parse_obj(obj)

        _obj = ShipmentInfoDTO.parse_obj({
            "id": obj.get("id"),
            "plan_interval_from": obj.get("planIntervalFrom"),
            "plan_interval_to": obj.get("planIntervalTo"),
            "shipment_type": obj.get("shipmentType"),
            "warehouse": PartnerShipmentWarehouseDTO.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "warehouse_to": PartnerShipmentWarehouseDTO.from_dict(obj.get("warehouseTo")) if obj.get("warehouseTo") is not None else None,
            "external_id": obj.get("externalId"),
            "delivery_service": DeliveryServiceDTO.from_dict(obj.get("deliveryService")) if obj.get("deliveryService") is not None else None,
            "pallets_count": PalletsCountDTO.from_dict(obj.get("palletsCount")) if obj.get("palletsCount") is not None else None,
            "order_ids": obj.get("orderIds"),
            "draft_count": obj.get("draftCount"),
            "planned_count": obj.get("plannedCount"),
            "fact_count": obj.get("factCount"),
            "status": obj.get("status"),
            "status_description": obj.get("statusDescription"),
            "status_update_time": obj.get("statusUpdateTime")
        })
        return _obj


