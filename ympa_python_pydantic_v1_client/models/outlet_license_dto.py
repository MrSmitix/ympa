# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.license_type import LicenseType

class OutletLicenseDTO(BaseModel):
    """
    Информация о лицензии.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре `number`. ")
    outlet_id: Optional[StrictInt] = Field(default=None, alias="outletId", description="Идентификатор точки продаж, для которой действительна лицензия.")
    license_type: Optional[LicenseType] = Field(default=None, alias="licenseType")
    number: Optional[StrictStr] = Field(default=None, description="Номер лицензии.")
    date_of_issue: Optional[datetime] = Field(default=None, alias="dateOfIssue", description="Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`. ")
    date_of_expiry: Optional[datetime] = Field(default=None, alias="dateOfExpiry", description="Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`. ")
    __properties = ["id", "outletId", "licenseType", "number", "dateOfIssue", "dateOfExpiry"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OutletLicenseDTO:
        """Create an instance of OutletLicenseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OutletLicenseDTO:
        """Create an instance of OutletLicenseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OutletLicenseDTO.parse_obj(obj)

        _obj = OutletLicenseDTO.parse_obj({
            "id": obj.get("id"),
            "outlet_id": obj.get("outletId"),
            "license_type": obj.get("licenseType"),
            "number": obj.get("number"),
            "date_of_issue": obj.get("dateOfIssue"),
            "date_of_expiry": obj.get("dateOfExpiry")
        })
        return _obj


