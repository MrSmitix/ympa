# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class GetPromoBestsellerInfoDTO(BaseModel):
    """
    Информация об акции «Бестселлеры Маркета».  # noqa: E501
    """
    bestseller: StrictBool = Field(default=..., description="Является ли акция «Бестселлером Маркета». Подробнее об этой акции читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/bestsellers).")
    entry_deadline: Optional[datetime] = Field(default=None, alias="entryDeadline", description="До какой даты можно добавить товар в акцию «Бестселлеры Маркета».  Параметр возвращается только для текущих и будущих акций «Бестселлеры Маркета». ")
    __properties = ["bestseller", "entryDeadline"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPromoBestsellerInfoDTO:
        """Create an instance of GetPromoBestsellerInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPromoBestsellerInfoDTO:
        """Create an instance of GetPromoBestsellerInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPromoBestsellerInfoDTO.parse_obj(obj)

        _obj = GetPromoBestsellerInfoDTO.parse_obj({
            "bestseller": obj.get("bestseller"),
            "entry_deadline": obj.get("entryDeadline")
        })
        return _obj


