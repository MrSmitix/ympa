# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from ympa_python_pydantic_v1_client.models.chat_status_type import ChatStatusType
from ympa_python_pydantic_v1_client.models.chat_type import ChatType

class GetChatsRequest(BaseModel):
    """
    Фильтры по чатам, которые нужно вернуть.   # noqa: E501
    """
    order_ids: Optional[conlist(StrictInt, min_items=1)] = Field(default=None, alias="orderIds", description="Фильтр по идентификаторам заказов на Маркете.")
    types: Optional[conlist(ChatType, min_items=1)] = Field(default=None, description="Фильтр по типам чатов.")
    statuses: Optional[conlist(ChatStatusType, min_items=1)] = Field(default=None, description="Фильтр по статусам чатов.")
    __properties = ["orderIds", "types", "statuses"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetChatsRequest:
        """Create an instance of GetChatsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if order_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.order_ids is None and "order_ids" in self.__fields_set__:
            _dict['orderIds'] = None

        # set to None if types (nullable) is None
        # and __fields_set__ contains the field
        if self.types is None and "types" in self.__fields_set__:
            _dict['types'] = None

        # set to None if statuses (nullable) is None
        # and __fields_set__ contains the field
        if self.statuses is None and "statuses" in self.__fields_set__:
            _dict['statuses'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetChatsRequest:
        """Create an instance of GetChatsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetChatsRequest.parse_obj(obj)

        _obj = GetChatsRequest.parse_obj({
            "order_ids": obj.get("orderIds"),
            "types": obj.get("types"),
            "statuses": obj.get("statuses")
        })
        return _obj


