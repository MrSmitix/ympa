# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.price_dto import PriceDTO

class OfferPriceResponseDTO(BaseModel):
    """
    Информация об установленной цене на товар.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(default=None, description="Идентификатор предложения из прайс-листа.")
    price: Optional[PriceDTO] = None
    market_sku: Optional[StrictInt] = Field(default=None, alias="marketSku", description="SKU на Маркете.")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt", description="Дата и время последнего обновления цены на товар.")
    __properties = ["id", "price", "marketSku", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfferPriceResponseDTO:
        """Create an instance of OfferPriceResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfferPriceResponseDTO:
        """Create an instance of OfferPriceResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OfferPriceResponseDTO.parse_obj(obj)

        _obj = OfferPriceResponseDTO.parse_obj({
            "id": obj.get("id"),
            "price": PriceDTO.from_dict(obj.get("price")) if obj.get("price") is not None else None,
            "market_sku": obj.get("marketSku"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


