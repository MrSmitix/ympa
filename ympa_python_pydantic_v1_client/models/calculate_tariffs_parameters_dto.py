# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from ympa_python_pydantic_v1_client.models.payment_frequency_type import PaymentFrequencyType
from ympa_python_pydantic_v1_client.models.selling_program_type import SellingProgramType

class CalculateTariffsParametersDTO(BaseModel):
    """
    Параметры для расчета стоимости услуг.  # noqa: E501
    """
    campaign_id: Optional[StrictInt] = Field(default=None, alias="campaignId", description="Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке. ")
    selling_program: Optional[SellingProgramType] = Field(default=None, alias="sellingProgram")
    frequency: Optional[PaymentFrequencyType] = None
    __properties = ["campaignId", "sellingProgram", "frequency"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CalculateTariffsParametersDTO:
        """Create an instance of CalculateTariffsParametersDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CalculateTariffsParametersDTO:
        """Create an instance of CalculateTariffsParametersDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CalculateTariffsParametersDTO.parse_obj(obj)

        _obj = CalculateTariffsParametersDTO.parse_obj({
            "campaign_id": obj.get("campaignId"),
            "selling_program": obj.get("sellingProgram"),
            "frequency": obj.get("frequency")
        })
        return _obj


