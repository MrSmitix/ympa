# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ympa_python_pydantic_v1_client.models.order_parcel_box_dto import OrderParcelBoxDTO
from ympa_python_pydantic_v1_client.models.order_track_dto import OrderTrackDTO

class OrderShipmentDTO(BaseModel):
    """
    Список посылок.  В параметре может указываться несколько посылок.   # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор посылки, присвоенный Маркетом.")
    shipment_date: Optional[StrictStr] = Field(default=None, alias="shipmentDate", description="Формат даты: `ДД-ММ-ГГГГ`. ")
    shipment_time: Optional[StrictStr] = Field(default=None, alias="shipmentTime", description="**Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. ")
    tracks: Optional[conlist(OrderTrackDTO)] = Field(default=None, description="**Только для модели DBS**  Информация для отслеживания перемещений посылки. ")
    boxes: Optional[conlist(OrderParcelBoxDTO)] = Field(default=None, description="Список грузовых мест.")
    __properties = ["id", "shipmentDate", "shipmentTime", "tracks", "boxes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderShipmentDTO:
        """Create an instance of OrderShipmentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tracks (list)
        _items = []
        if self.tracks:
            for _item in self.tracks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tracks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in boxes (list)
        _items = []
        if self.boxes:
            for _item in self.boxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['boxes'] = _items
        # set to None if tracks (nullable) is None
        # and __fields_set__ contains the field
        if self.tracks is None and "tracks" in self.__fields_set__:
            _dict['tracks'] = None

        # set to None if boxes (nullable) is None
        # and __fields_set__ contains the field
        if self.boxes is None and "boxes" in self.__fields_set__:
            _dict['boxes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderShipmentDTO:
        """Create an instance of OrderShipmentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderShipmentDTO.parse_obj(obj)

        _obj = OrderShipmentDTO.parse_obj({
            "id": obj.get("id"),
            "shipment_date": obj.get("shipmentDate"),
            "shipment_time": obj.get("shipmentTime"),
            "tracks": [OrderTrackDTO.from_dict(_item) for _item in obj.get("tracks")] if obj.get("tracks") is not None else None,
            "boxes": [OrderParcelBoxDTO.from_dict(_item) for _item in obj.get("boxes")] if obj.get("boxes") is not None else None
        })
        return _obj


