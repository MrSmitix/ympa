# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from ympa_python_pydantic_v1_client.models.feed_index_logs_error_dto import FeedIndexLogsErrorDTO
from ympa_python_pydantic_v1_client.models.feed_index_logs_index_type import FeedIndexLogsIndexType
from ympa_python_pydantic_v1_client.models.feed_index_logs_offers_dto import FeedIndexLogsOffersDTO
from ympa_python_pydantic_v1_client.models.feed_index_logs_status_type import FeedIndexLogsStatusType

class FeedIndexLogsRecordDTO(BaseModel):
    """
    Список отчетов по индексации прайс-листа.  # noqa: E501
    """
    download_time: Optional[datetime] = Field(default=None, alias="downloadTime", description="Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. ")
    file_time: Optional[datetime] = Field(default=None, alias="fileTime", description="Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. ")
    generation_id: Optional[StrictInt] = Field(default=None, alias="generationId", description="Идентификатор индексации.")
    index_type: Optional[FeedIndexLogsIndexType] = Field(default=None, alias="indexType")
    published_time: Optional[datetime] = Field(default=None, alias="publishedTime", description="Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. ")
    status: Optional[FeedIndexLogsStatusType] = None
    error: Optional[FeedIndexLogsErrorDTO] = None
    offers: Optional[FeedIndexLogsOffersDTO] = None
    __properties = ["downloadTime", "fileTime", "generationId", "indexType", "publishedTime", "status", "error", "offers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeedIndexLogsRecordDTO:
        """Create an instance of FeedIndexLogsRecordDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offers
        if self.offers:
            _dict['offers'] = self.offers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeedIndexLogsRecordDTO:
        """Create an instance of FeedIndexLogsRecordDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeedIndexLogsRecordDTO.parse_obj(obj)

        _obj = FeedIndexLogsRecordDTO.parse_obj({
            "download_time": obj.get("downloadTime"),
            "file_time": obj.get("fileTime"),
            "generation_id": obj.get("generationId"),
            "index_type": obj.get("indexType"),
            "published_time": obj.get("publishedTime"),
            "status": obj.get("status"),
            "error": FeedIndexLogsErrorDTO.from_dict(obj.get("error")) if obj.get("error") is not None else None,
            "offers": FeedIndexLogsOffersDTO.from_dict(obj.get("offers")) if obj.get("offers") is not None else None
        })
        return _obj


