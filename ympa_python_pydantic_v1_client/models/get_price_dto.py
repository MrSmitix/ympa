# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Union
from pydantic import BaseModel, Field, confloat, conint
from ympa_python_pydantic_v1_client.models.currency_type import CurrencyType

class GetPriceDTO(BaseModel):
    """
    Цена с указанием времени последнего обновления.  # noqa: E501
    """
    value: Union[confloat(gt=0, strict=True), conint(gt=0, strict=True)] = Field(default=..., description="Значение.")
    currency_id: CurrencyType = Field(default=..., alias="currencyId")
    updated_at: datetime = Field(default=..., alias="updatedAt", description="Время последнего обновления.")
    __properties = ["value", "currencyId", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetPriceDTO:
        """Create an instance of GetPriceDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetPriceDTO:
        """Create an instance of GetPriceDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetPriceDTO.parse_obj(obj)

        _obj = GetPriceDTO.parse_obj({
            "value": obj.get("value"),
            "currency_id": obj.get("currencyId"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


