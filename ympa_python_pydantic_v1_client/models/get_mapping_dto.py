# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class GetMappingDTO(BaseModel):
    """
    Информация о товарах в каталоге.   # noqa: E501
    """
    market_sku: Optional[StrictInt] = Field(default=None, alias="marketSku", description="SKU на Маркете.")
    market_sku_name: Optional[StrictStr] = Field(default=None, alias="marketSkuName", description="Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. ")
    market_model_id: Optional[StrictInt] = Field(default=None, alias="marketModelId", description="Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. ")
    market_model_name: Optional[StrictStr] = Field(default=None, alias="marketModelName", description="Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. ")
    market_category_id: Optional[StrictInt] = Field(default=None, alias="marketCategoryId", description="Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. ")
    market_category_name: Optional[StrictStr] = Field(default=None, alias="marketCategoryName", description="Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. ")
    __properties = ["marketSku", "marketSkuName", "marketModelId", "marketModelName", "marketCategoryId", "marketCategoryName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetMappingDTO:
        """Create an instance of GetMappingDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetMappingDTO:
        """Create an instance of GetMappingDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetMappingDTO.parse_obj(obj)

        _obj = GetMappingDTO.parse_obj({
            "market_sku": obj.get("marketSku"),
            "market_sku_name": obj.get("marketSkuName"),
            "market_model_id": obj.get("marketModelId"),
            "market_model_name": obj.get("marketModelName"),
            "market_category_id": obj.get("marketCategoryId"),
            "market_category_name": obj.get("marketCategoryName")
        })
        return _obj


