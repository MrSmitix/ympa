# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ModelOfferDTO(BaseModel):
    """
    Информация о предложении.  # noqa: E501
    """
    discount: Optional[StrictInt] = Field(default=None, description="Скидка на предложение в процентах.")
    name: Optional[StrictStr] = Field(default=None, description="Наименование предложения.")
    pos: Optional[StrictInt] = Field(default=None, description="Позиция предложения в выдаче Маркета на карточке модели.")
    pre_discount_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="preDiscountPrice", description="Цена предложения без скидки магазина.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.")
    region_id: Optional[StrictInt] = Field(default=None, alias="regionId", description="Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре `regionId`. Предложения, доставляемые из других регионов, показываются после них. ")
    shipping_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="shippingCost", description="Стоимость доставки товара в регион:  * `0` — доставка осуществляется бесплатно. * `-1` — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. ")
    shop_name: Optional[StrictStr] = Field(default=None, alias="shopName", description="Название магазина (в том виде, в котором отображается на Маркете).")
    shop_rating: Optional[StrictInt] = Field(default=None, alias="shopRating", description="Рейтинг магазина.  Возможные значения: * `-1` — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение `-1`. * `1`. * `2`. * `3`. * `4`. * `5`. ")
    in_stock: Optional[StrictInt] = Field(default=None, alias="inStock", description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %} ")
    __properties = ["discount", "name", "pos", "preDiscountPrice", "price", "regionId", "shippingCost", "shopName", "shopRating", "inStock"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelOfferDTO:
        """Create an instance of ModelOfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelOfferDTO:
        """Create an instance of ModelOfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelOfferDTO.parse_obj(obj)

        _obj = ModelOfferDTO.parse_obj({
            "discount": obj.get("discount"),
            "name": obj.get("name"),
            "pos": obj.get("pos"),
            "pre_discount_price": obj.get("preDiscountPrice"),
            "price": obj.get("price"),
            "region_id": obj.get("regionId"),
            "shipping_cost": obj.get("shippingCost"),
            "shop_name": obj.get("shopName"),
            "shop_rating": obj.get("shopRating"),
            "in_stock": obj.get("inStock")
        })
        return _obj


