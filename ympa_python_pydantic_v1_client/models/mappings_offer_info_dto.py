# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.day_of_week_type import DayOfWeekType
from ympa_python_pydantic_v1_client.models.offer_availability_status_type import OfferAvailabilityStatusType
from ympa_python_pydantic_v1_client.models.offer_processing_state_dto import OfferProcessingStateDTO
from ympa_python_pydantic_v1_client.models.offer_weight_dimensions_dto import OfferWeightDimensionsDTO
from ympa_python_pydantic_v1_client.models.time_period_dto import TimePeriodDTO

class MappingsOfferInfoDTO(BaseModel):
    """
    Базовая информация о товарах в каталоге.  # noqa: E501
    """
    name: Optional[constr(strict=True, max_length=256)] = Field(default=None, description="Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) ")
    shop_sku: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(default=None, alias="shopSku", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    category: Optional[StrictStr] = Field(default=None, description="Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. ")
    vendor: Optional[StrictStr] = Field(default=None, description="Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.")
    vendor_code: Optional[StrictStr] = Field(default=None, alias="vendorCode", description="Артикул товара от производителя.")
    description: Optional[constr(strict=True, max_length=6000)] = Field(default=None, description="Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) ")
    id: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(default=None, description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    feed_id: Optional[StrictInt] = Field(default=None, alias="feedId", description="Идентификатор фида.")
    barcodes: Optional[conlist(StrictStr)] = Field(default=None, description="Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  ")
    urls: Optional[conlist(StrictStr)] = Field(default=None, description="URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. ")
    pictures: Optional[conlist(StrictStr)] = Field(default=None, description="Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. ")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. ")
    manufacturer_countries: Optional[conlist(StrictStr)] = Field(default=None, alias="manufacturerCountries", description="Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. ")
    min_shipment: Optional[StrictInt] = Field(default=None, alias="minShipment", description="Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. ")
    transport_unit_size: Optional[StrictInt] = Field(default=None, alias="transportUnitSize", description="Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. ")
    quantum_of_supply: Optional[StrictInt] = Field(default=None, alias="quantumOfSupply", description="Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. ")
    delivery_duration_days: Optional[StrictInt] = Field(default=None, alias="deliveryDurationDays", description="Срок, за который продавец поставляет товары на склад, в днях.")
    box_count: Optional[StrictInt] = Field(default=None, alias="boxCount", description="Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. ")
    customs_commodity_codes: Optional[conlist(StrictStr)] = Field(default=None, alias="customsCommodityCodes", description="Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. ")
    weight_dimensions: Optional[OfferWeightDimensionsDTO] = Field(default=None, alias="weightDimensions")
    supply_schedule_days: Optional[conlist(DayOfWeekType)] = Field(default=None, alias="supplyScheduleDays", description="Дни недели, в которые продавец поставляет товары на склад.")
    shelf_life_days: Optional[StrictInt] = Field(default=None, alias="shelfLifeDays", description="{% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. ")
    life_time_days: Optional[StrictInt] = Field(default=None, alias="lifeTimeDays", description="{% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. ")
    guarantee_period_days: Optional[StrictInt] = Field(default=None, alias="guaranteePeriodDays", description="Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. ")
    processing_state: Optional[OfferProcessingStateDTO] = Field(default=None, alias="processingState")
    availability: Optional[OfferAvailabilityStatusType] = None
    shelf_life: Optional[TimePeriodDTO] = Field(default=None, alias="shelfLife")
    life_time: Optional[TimePeriodDTO] = Field(default=None, alias="lifeTime")
    guarantee_period: Optional[TimePeriodDTO] = Field(default=None, alias="guaranteePeriod")
    certificate: Optional[StrictStr] = Field(default=None, description="Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) ")
    __properties = ["name", "shopSku", "category", "vendor", "vendorCode", "description", "id", "feedId", "barcodes", "urls", "pictures", "manufacturer", "manufacturerCountries", "minShipment", "transportUnitSize", "quantumOfSupply", "deliveryDurationDays", "boxCount", "customsCommodityCodes", "weightDimensions", "supplyScheduleDays", "shelfLifeDays", "lifeTimeDays", "guaranteePeriodDays", "processingState", "availability", "shelfLife", "lifeTime", "guaranteePeriod", "certificate"]

    @validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    @validator('id')
    def id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MappingsOfferInfoDTO:
        """Create an instance of MappingsOfferInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of weight_dimensions
        if self.weight_dimensions:
            _dict['weightDimensions'] = self.weight_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_state
        if self.processing_state:
            _dict['processingState'] = self.processing_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shelf_life
        if self.shelf_life:
            _dict['shelfLife'] = self.shelf_life.to_dict()
        # override the default output from pydantic by calling `to_dict()` of life_time
        if self.life_time:
            _dict['lifeTime'] = self.life_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guarantee_period
        if self.guarantee_period:
            _dict['guaranteePeriod'] = self.guarantee_period.to_dict()
        # set to None if barcodes (nullable) is None
        # and __fields_set__ contains the field
        if self.barcodes is None and "barcodes" in self.__fields_set__:
            _dict['barcodes'] = None

        # set to None if urls (nullable) is None
        # and __fields_set__ contains the field
        if self.urls is None and "urls" in self.__fields_set__:
            _dict['urls'] = None

        # set to None if pictures (nullable) is None
        # and __fields_set__ contains the field
        if self.pictures is None and "pictures" in self.__fields_set__:
            _dict['pictures'] = None

        # set to None if manufacturer_countries (nullable) is None
        # and __fields_set__ contains the field
        if self.manufacturer_countries is None and "manufacturer_countries" in self.__fields_set__:
            _dict['manufacturerCountries'] = None

        # set to None if customs_commodity_codes (nullable) is None
        # and __fields_set__ contains the field
        if self.customs_commodity_codes is None and "customs_commodity_codes" in self.__fields_set__:
            _dict['customsCommodityCodes'] = None

        # set to None if supply_schedule_days (nullable) is None
        # and __fields_set__ contains the field
        if self.supply_schedule_days is None and "supply_schedule_days" in self.__fields_set__:
            _dict['supplyScheduleDays'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MappingsOfferInfoDTO:
        """Create an instance of MappingsOfferInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MappingsOfferInfoDTO.parse_obj(obj)

        _obj = MappingsOfferInfoDTO.parse_obj({
            "name": obj.get("name"),
            "shop_sku": obj.get("shopSku"),
            "category": obj.get("category"),
            "vendor": obj.get("vendor"),
            "vendor_code": obj.get("vendorCode"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "feed_id": obj.get("feedId"),
            "barcodes": obj.get("barcodes"),
            "urls": obj.get("urls"),
            "pictures": obj.get("pictures"),
            "manufacturer": obj.get("manufacturer"),
            "manufacturer_countries": obj.get("manufacturerCountries"),
            "min_shipment": obj.get("minShipment"),
            "transport_unit_size": obj.get("transportUnitSize"),
            "quantum_of_supply": obj.get("quantumOfSupply"),
            "delivery_duration_days": obj.get("deliveryDurationDays"),
            "box_count": obj.get("boxCount"),
            "customs_commodity_codes": obj.get("customsCommodityCodes"),
            "weight_dimensions": OfferWeightDimensionsDTO.from_dict(obj.get("weightDimensions")) if obj.get("weightDimensions") is not None else None,
            "supply_schedule_days": obj.get("supplyScheduleDays"),
            "shelf_life_days": obj.get("shelfLifeDays"),
            "life_time_days": obj.get("lifeTimeDays"),
            "guarantee_period_days": obj.get("guaranteePeriodDays"),
            "processing_state": OfferProcessingStateDTO.from_dict(obj.get("processingState")) if obj.get("processingState") is not None else None,
            "availability": obj.get("availability"),
            "shelf_life": TimePeriodDTO.from_dict(obj.get("shelfLife")) if obj.get("shelfLife") is not None else None,
            "life_time": TimePeriodDTO.from_dict(obj.get("lifeTime")) if obj.get("lifeTime") is not None else None,
            "guarantee_period": TimePeriodDTO.from_dict(obj.get("guaranteePeriod")) if obj.get("guaranteePeriod") is not None else None,
            "certificate": obj.get("certificate")
        })
        return _obj


