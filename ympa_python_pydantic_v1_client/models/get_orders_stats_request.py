# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist
from ympa_python_pydantic_v1_client.models.order_stats_status_type import OrderStatsStatusType

class GetOrdersStatsRequest(BaseModel):
    """
    Запрос информации по заказам.  # noqa: E501
    """
    date_from: Optional[date] = Field(default=None, alias="dateFrom", description="Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. ")
    date_to: Optional[date] = Field(default=None, alias="dateTo", description="Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. ")
    update_from: Optional[date] = Field(default=None, alias="updateFrom", description="Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. ")
    update_to: Optional[date] = Field(default=None, alias="updateTo", description="Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. ")
    orders: Optional[conlist(StrictInt)] = Field(default=None, description="Список идентификаторов заказов.")
    statuses: Optional[conlist(OrderStatsStatusType)] = Field(default=None, description="Список статусов заказов.")
    has_cis: Optional[StrictBool] = Field(default=None, alias="hasCis", description="Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. ")
    __properties = ["dateFrom", "dateTo", "updateFrom", "updateTo", "orders", "statuses", "hasCis"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetOrdersStatsRequest:
        """Create an instance of GetOrdersStatsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if orders (nullable) is None
        # and __fields_set__ contains the field
        if self.orders is None and "orders" in self.__fields_set__:
            _dict['orders'] = None

        # set to None if statuses (nullable) is None
        # and __fields_set__ contains the field
        if self.statuses is None and "statuses" in self.__fields_set__:
            _dict['statuses'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetOrdersStatsRequest:
        """Create an instance of GetOrdersStatsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetOrdersStatsRequest.parse_obj(obj)

        _obj = GetOrdersStatsRequest.parse_obj({
            "date_from": obj.get("dateFrom"),
            "date_to": obj.get("dateTo"),
            "update_from": obj.get("updateFrom"),
            "update_to": obj.get("updateTo"),
            "orders": obj.get("orders"),
            "statuses": obj.get("statuses"),
            "has_cis": obj.get("hasCis")
        })
        return _obj


