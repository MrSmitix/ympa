# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.currency_type import CurrencyType

class OfferDTO(BaseModel):
    """
    Предложение.  # noqa: E501
    """
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. ")
    feed_id: Optional[StrictInt] = Field(default=None, alias="feedId", description="Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. ")
    id: Optional[StrictStr] = Field(default=None, description="Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. ")
    shop_category_id: Optional[StrictStr] = Field(default=None, alias="shopCategoryId", description="Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. ")
    market_category_id: Optional[StrictInt] = Field(default=None, alias="marketCategoryId", description="Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. ")
    pre_discount_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="preDiscountPrice", description="Цена предложения без скидки.")
    discount: Optional[StrictInt] = Field(default=None, description="Скидка на предложение в процентах.")
    cut_price: Optional[StrictBool] = Field(default=None, alias="cutPrice", description="Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API. ")
    url: Optional[StrictStr] = Field(default=None, description="URL-адрес предложения на сайте магазина.")
    model_id: StrictInt = Field(default=..., alias="modelId", description="Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} ")
    name: Optional[StrictStr] = Field(default=None, description="Наименование предложения.")
    currency: Optional[CurrencyType] = None
    bid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. ")
    cbid: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. ")
    fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. ")
    blocked: Optional[StrictBool] = Field(default=None, description="Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. ")
    __properties = ["price", "feedId", "id", "shopCategoryId", "marketCategoryId", "preDiscountPrice", "discount", "cutPrice", "url", "modelId", "name", "currency", "bid", "cbid", "fee", "blocked"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfferDTO:
        """Create an instance of OfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfferDTO:
        """Create an instance of OfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OfferDTO.parse_obj(obj)

        _obj = OfferDTO.parse_obj({
            "price": obj.get("price"),
            "feed_id": obj.get("feedId"),
            "id": obj.get("id"),
            "shop_category_id": obj.get("shopCategoryId"),
            "market_category_id": obj.get("marketCategoryId"),
            "pre_discount_price": obj.get("preDiscountPrice"),
            "discount": obj.get("discount"),
            "cut_price": obj.get("cutPrice"),
            "url": obj.get("url"),
            "model_id": obj.get("modelId"),
            "name": obj.get("name"),
            "currency": obj.get("currency"),
            "bid": obj.get("bid"),
            "cbid": obj.get("cbid"),
            "fee": obj.get("fee"),
            "blocked": obj.get("blocked")
        })
        return _obj


