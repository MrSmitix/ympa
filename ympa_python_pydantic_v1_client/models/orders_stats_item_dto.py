# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.orders_stats_details_dto import OrdersStatsDetailsDTO
from ympa_python_pydantic_v1_client.models.orders_stats_price_dto import OrdersStatsPriceDTO
from ympa_python_pydantic_v1_client.models.orders_stats_warehouse_dto import OrdersStatsWarehouseDTO

class OrdersStatsItemDTO(BaseModel):
    """
    Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке `items` — только в списке `initialItems`.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке `items` (с уменьшенным количеством единиц `count`), и в списке `initialItems` (с первоначальным количеством единиц `initialCount`).   # noqa: E501
    """
    offer_name: Optional[StrictStr] = Field(default=None, alias="offerName", description="Название товара.")
    market_sku: Optional[StrictInt] = Field(default=None, alias="marketSku", description="SKU на Маркете.")
    shop_sku: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(default=None, alias="shopSku", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    count: Optional[StrictInt] = Field(default=None, description="Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. ")
    prices: Optional[conlist(OrdersStatsPriceDTO)] = Field(default=None, description="Цена или скидки на товар.")
    warehouse: Optional[OrdersStatsWarehouseDTO] = None
    details: Optional[conlist(OrdersStatsDetailsDTO)] = Field(default=None, description="Информация об удалении товара из заказа.")
    cis_list: Optional[conlist(StrictStr)] = Field(default=None, alias="cisList", description="Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).")
    initial_count: Optional[StrictInt] = Field(default=None, alias="initialCount", description="Первоначальное количество единиц товара.")
    bid_fee: Optional[conint(strict=True, le=10000, ge=0)] = Field(default=None, alias="bidFee", description="Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. ")
    cofinance_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cofinanceThreshold", description="Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. ")
    cofinance_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cofinanceValue", description="Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. ")
    __properties = ["offerName", "marketSku", "shopSku", "count", "prices", "warehouse", "details", "cisList", "initialCount", "bidFee", "cofinanceThreshold", "cofinanceValue"]

    @validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrdersStatsItemDTO:
        """Create an instance of OrdersStatsItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in prices (list)
        _items = []
        if self.prices:
            for _item in self.prices:
                if _item:
                    _items.append(_item.to_dict())
            _dict['prices'] = _items
        # override the default output from pydantic by calling `to_dict()` of warehouse
        if self.warehouse:
            _dict['warehouse'] = self.warehouse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # set to None if prices (nullable) is None
        # and __fields_set__ contains the field
        if self.prices is None and "prices" in self.__fields_set__:
            _dict['prices'] = None

        # set to None if details (nullable) is None
        # and __fields_set__ contains the field
        if self.details is None and "details" in self.__fields_set__:
            _dict['details'] = None

        # set to None if cis_list (nullable) is None
        # and __fields_set__ contains the field
        if self.cis_list is None and "cis_list" in self.__fields_set__:
            _dict['cisList'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrdersStatsItemDTO:
        """Create an instance of OrdersStatsItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrdersStatsItemDTO.parse_obj(obj)

        _obj = OrdersStatsItemDTO.parse_obj({
            "offer_name": obj.get("offerName"),
            "market_sku": obj.get("marketSku"),
            "shop_sku": obj.get("shopSku"),
            "count": obj.get("count"),
            "prices": [OrdersStatsPriceDTO.from_dict(_item) for _item in obj.get("prices")] if obj.get("prices") is not None else None,
            "warehouse": OrdersStatsWarehouseDTO.from_dict(obj.get("warehouse")) if obj.get("warehouse") is not None else None,
            "details": [OrdersStatsDetailsDTO.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "cis_list": obj.get("cisList"),
            "initial_count": obj.get("initialCount"),
            "bid_fee": obj.get("bidFee"),
            "cofinance_threshold": obj.get("cofinanceThreshold"),
            "cofinance_value": obj.get("cofinanceValue")
        })
        return _obj


