# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.order_item_detail_dto import OrderItemDetailDTO
from ympa_python_pydantic_v1_client.models.order_item_instance_dto import OrderItemInstanceDTO
from ympa_python_pydantic_v1_client.models.order_item_instance_type import OrderItemInstanceType
from ympa_python_pydantic_v1_client.models.order_item_promo_dto import OrderItemPromoDTO
from ympa_python_pydantic_v1_client.models.order_item_subsidy_dto import OrderItemSubsidyDTO
from ympa_python_pydantic_v1_client.models.order_vat_type import OrderVatType

class OrderItemDTO(BaseModel):
    """
    Список товаров в заказе.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. ")
    offer_id: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(default=None, alias="offerId", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    offer_name: Optional[StrictStr] = Field(default=None, alias="offerName", description="Название товара.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). ")
    buyer_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyerPrice", description="Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. ")
    buyer_price_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyerPriceBeforeDiscount", description="Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. ")
    price_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="priceBeforeDiscount", description="{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. ")
    count: Optional[StrictInt] = Field(default=None, description="Количество единиц товара.")
    vat: Optional[OrderVatType] = None
    shop_sku: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(default=None, alias="shopSku", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    subsidy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. ")
    partner_warehouse_id: Optional[StrictStr] = Field(default=None, alias="partnerWarehouseId", description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. ")
    promos: Optional[conlist(OrderItemPromoDTO)] = Field(default=None, description="Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.")
    instances: Optional[conlist(OrderItemInstanceDTO)] = Field(default=None, description="Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. ")
    details: Optional[conlist(OrderItemDetailDTO)] = Field(default=None, description="Информация об удалении товара из заказа. ")
    subsidies: Optional[conlist(OrderItemSubsidyDTO)] = Field(default=None, description="Список субсидий по типам.")
    required_instance_types: Optional[conlist(OrderItemInstanceType)] = Field(default=None, alias="requiredInstanceTypes", description="Список необходимых маркировок товара.")
    __properties = ["id", "offerId", "offerName", "price", "buyerPrice", "buyerPriceBeforeDiscount", "priceBeforeDiscount", "count", "vat", "shopSku", "subsidy", "partnerWarehouseId", "promos", "instances", "details", "subsidies", "requiredInstanceTypes"]

    @validator('offer_id')
    def offer_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    @validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderItemDTO:
        """Create an instance of OrderItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in promos (list)
        _items = []
        if self.promos:
            for _item in self.promos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['promos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item in self.instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item in self.details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['details'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subsidies (list)
        _items = []
        if self.subsidies:
            for _item in self.subsidies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subsidies'] = _items
        # set to None if promos (nullable) is None
        # and __fields_set__ contains the field
        if self.promos is None and "promos" in self.__fields_set__:
            _dict['promos'] = None

        # set to None if instances (nullable) is None
        # and __fields_set__ contains the field
        if self.instances is None and "instances" in self.__fields_set__:
            _dict['instances'] = None

        # set to None if details (nullable) is None
        # and __fields_set__ contains the field
        if self.details is None and "details" in self.__fields_set__:
            _dict['details'] = None

        # set to None if subsidies (nullable) is None
        # and __fields_set__ contains the field
        if self.subsidies is None and "subsidies" in self.__fields_set__:
            _dict['subsidies'] = None

        # set to None if required_instance_types (nullable) is None
        # and __fields_set__ contains the field
        if self.required_instance_types is None and "required_instance_types" in self.__fields_set__:
            _dict['requiredInstanceTypes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderItemDTO:
        """Create an instance of OrderItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderItemDTO.parse_obj(obj)

        _obj = OrderItemDTO.parse_obj({
            "id": obj.get("id"),
            "offer_id": obj.get("offerId"),
            "offer_name": obj.get("offerName"),
            "price": obj.get("price"),
            "buyer_price": obj.get("buyerPrice"),
            "buyer_price_before_discount": obj.get("buyerPriceBeforeDiscount"),
            "price_before_discount": obj.get("priceBeforeDiscount"),
            "count": obj.get("count"),
            "vat": obj.get("vat"),
            "shop_sku": obj.get("shopSku"),
            "subsidy": obj.get("subsidy"),
            "partner_warehouse_id": obj.get("partnerWarehouseId"),
            "promos": [OrderItemPromoDTO.from_dict(_item) for _item in obj.get("promos")] if obj.get("promos") is not None else None,
            "instances": [OrderItemInstanceDTO.from_dict(_item) for _item in obj.get("instances")] if obj.get("instances") is not None else None,
            "details": [OrderItemDetailDTO.from_dict(_item) for _item in obj.get("details")] if obj.get("details") is not None else None,
            "subsidies": [OrderItemSubsidyDTO.from_dict(_item) for _item in obj.get("subsidies")] if obj.get("subsidies") is not None else None,
            "required_instance_types": obj.get("requiredInstanceTypes")
        })
        return _obj


