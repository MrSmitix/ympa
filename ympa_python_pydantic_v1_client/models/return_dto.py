# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist
from ympa_python_pydantic_v1_client.models.logistic_pickup_point_dto import LogisticPickupPointDTO
from ympa_python_pydantic_v1_client.models.recipient_type import RecipientType
from ympa_python_pydantic_v1_client.models.refund_status_type import RefundStatusType
from ympa_python_pydantic_v1_client.models.return_item_dto import ReturnItemDTO
from ympa_python_pydantic_v1_client.models.return_shipment_status_type import ReturnShipmentStatusType
from ympa_python_pydantic_v1_client.models.return_type import ReturnType

class ReturnDTO(BaseModel):
    """
    Возврат заказа.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор возврата.")
    order_id: Optional[StrictInt] = Field(default=None, alias="orderId", description="Номер заказа.")
    creation_date: Optional[datetime] = Field(default=None, alias="creationDate", description="Дата создания возврата клиентом.")
    update_date: Optional[datetime] = Field(default=None, alias="updateDate", description="Дата обновления возврата.")
    refund_status: Optional[RefundStatusType] = Field(default=None, alias="refundStatus")
    logistic_pickup_point: Optional[LogisticPickupPointDTO] = Field(default=None, alias="logisticPickupPoint")
    shipment_recipient_type: Optional[RecipientType] = Field(default=None, alias="shipmentRecipientType")
    shipment_status: Optional[ReturnShipmentStatusType] = Field(default=None, alias="shipmentStatus")
    refund_amount: Optional[StrictInt] = Field(default=None, alias="refundAmount", description="Сумма возврата.")
    items: conlist(ReturnItemDTO) = Field(default=..., description="Список товаров в возврате.")
    return_type: Optional[ReturnType] = Field(default=None, alias="returnType")
    fast_return: Optional[StrictBool] = Field(default=None, alias="fastReturn", description="Используется ли опция **Быстрый возврат денег за дешевый брак**. ")
    __properties = ["id", "orderId", "creationDate", "updateDate", "refundStatus", "logisticPickupPoint", "shipmentRecipientType", "shipmentStatus", "refundAmount", "items", "returnType", "fastReturn"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReturnDTO:
        """Create an instance of ReturnDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of logistic_pickup_point
        if self.logistic_pickup_point:
            _dict['logisticPickupPoint'] = self.logistic_pickup_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReturnDTO:
        """Create an instance of ReturnDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReturnDTO.parse_obj(obj)

        _obj = ReturnDTO.parse_obj({
            "id": obj.get("id"),
            "order_id": obj.get("orderId"),
            "creation_date": obj.get("creationDate"),
            "update_date": obj.get("updateDate"),
            "refund_status": obj.get("refundStatus"),
            "logistic_pickup_point": LogisticPickupPointDTO.from_dict(obj.get("logisticPickupPoint")) if obj.get("logisticPickupPoint") is not None else None,
            "shipment_recipient_type": obj.get("shipmentRecipientType"),
            "shipment_status": obj.get("shipmentStatus"),
            "refund_amount": obj.get("refundAmount"),
            "items": [ReturnItemDTO.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "return_type": obj.get("returnType"),
            "fast_return": obj.get("fastReturn")
        })
        return _obj


