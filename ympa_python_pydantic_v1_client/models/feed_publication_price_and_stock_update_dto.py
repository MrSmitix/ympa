# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field

class FeedPublicationPriceAndStockUpdateDTO(BaseModel):
    """
    Последнее обновление цен и наличия товаров на Маркете. Если последнее по времени обновление было полным, в параметре выводятся те же данные, что и в параметре `full`. Выводится, если параметр `publication status=OK`.   # noqa: E501
    """
    file_time: Optional[datetime] = Field(default=None, alias="fileTime", description="Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. ")
    published_time: Optional[datetime] = Field(default=None, alias="publishedTime", description="Дата и время публикации предложений из прайс-листа на Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. ")
    __properties = ["fileTime", "publishedTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeedPublicationPriceAndStockUpdateDTO:
        """Create an instance of FeedPublicationPriceAndStockUpdateDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeedPublicationPriceAndStockUpdateDTO:
        """Create an instance of FeedPublicationPriceAndStockUpdateDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeedPublicationPriceAndStockUpdateDTO.parse_obj(obj)

        _obj = FeedPublicationPriceAndStockUpdateDTO.parse_obj({
            "file_time": obj.get("fileTime"),
            "published_time": obj.get("publishedTime")
        })
        return _obj


