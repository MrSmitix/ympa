# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.feed_index_logs_error_type import FeedIndexLogsErrorType

class FeedIndexLogsErrorDTO(BaseModel):
    """
    Информация об ошибке, произошедшей во время индексации прайс-листа.  Выводится, если во время индексации произошли ошибки (`index-log-record status=ERROR`).   # noqa: E501
    """
    http_status_code: Optional[StrictInt] = Field(default=None, alias="httpStatusCode", description="HTTP-код ошибки индексации прайс-листа.  Выводится, если `type=DOWNLOAD_HTTP_ERROR`. ")
    type: Optional[FeedIndexLogsErrorType] = None
    description: Optional[StrictStr] = Field(default=None, description="Описание ошибки.  Выводится, если `type=DOWNLOAD_ERROR`. ")
    __properties = ["httpStatusCode", "type", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeedIndexLogsErrorDTO:
        """Create an instance of FeedIndexLogsErrorDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeedIndexLogsErrorDTO:
        """Create an instance of FeedIndexLogsErrorDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeedIndexLogsErrorDTO.parse_obj(obj)

        _obj = FeedIndexLogsErrorDTO.parse_obj({
            "http_status_code": obj.get("httpStatusCode"),
            "type": obj.get("type"),
            "description": obj.get("description")
        })
        return _obj


