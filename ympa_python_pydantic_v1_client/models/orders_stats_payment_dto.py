# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.orders_stats_payment_order_dto import OrdersStatsPaymentOrderDTO
from ympa_python_pydantic_v1_client.models.orders_stats_payment_source_type import OrdersStatsPaymentSourceType
from ympa_python_pydantic_v1_client.models.orders_stats_payment_type import OrdersStatsPaymentType

class OrdersStatsPaymentDTO(BaseModel):
    """
    Информация о денежных переводах по заказу.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(default=None, description="Идентификатор денежного перевода.")
    var_date: Optional[date] = Field(default=None, alias="date", description="Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`. ")
    type: Optional[OrdersStatsPaymentType] = None
    source: Optional[OrdersStatsPaymentSourceType] = None
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. ")
    payment_order: Optional[OrdersStatsPaymentOrderDTO] = Field(default=None, alias="paymentOrder")
    __properties = ["id", "date", "type", "source", "total", "paymentOrder"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrdersStatsPaymentDTO:
        """Create an instance of OrdersStatsPaymentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payment_order
        if self.payment_order:
            _dict['paymentOrder'] = self.payment_order.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrdersStatsPaymentDTO:
        """Create an instance of OrdersStatsPaymentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrdersStatsPaymentDTO.parse_obj(obj)

        _obj = OrdersStatsPaymentDTO.parse_obj({
            "id": obj.get("id"),
            "var_date": obj.get("date"),
            "type": obj.get("type"),
            "source": obj.get("source"),
            "total": obj.get("total"),
            "payment_order": OrdersStatsPaymentOrderDTO.from_dict(obj.get("paymentOrder")) if obj.get("paymentOrder") is not None else None
        })
        return _obj


