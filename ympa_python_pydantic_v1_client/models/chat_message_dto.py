# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ympa_python_pydantic_v1_client.models.chat_message_payload_dto import ChatMessagePayloadDTO
from ympa_python_pydantic_v1_client.models.chat_message_sender_type import ChatMessageSenderType

class ChatMessageDTO(BaseModel):
    """
    Информация о сообщениях.  # noqa: E501
    """
    message_id: StrictInt = Field(default=..., alias="messageId", description="Идентификатор сообщения.")
    created_at: datetime = Field(default=..., alias="createdAt", description="Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. ")
    sender: ChatMessageSenderType = Field(...)
    message: Optional[StrictStr] = Field(default=None, description="Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`. ")
    payload: Optional[conlist(ChatMessagePayloadDTO)] = Field(default=None, description="Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`. ")
    __properties = ["messageId", "createdAt", "sender", "message", "payload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChatMessageDTO:
        """Create an instance of ChatMessageDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in payload (list)
        _items = []
        if self.payload:
            for _item in self.payload:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payload'] = _items
        # set to None if payload (nullable) is None
        # and __fields_set__ contains the field
        if self.payload is None and "payload" in self.__fields_set__:
            _dict['payload'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChatMessageDTO:
        """Create an instance of ChatMessageDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChatMessageDTO.parse_obj(obj)

        _obj = ChatMessageDTO.parse_obj({
            "message_id": obj.get("messageId"),
            "created_at": obj.get("createdAt"),
            "sender": obj.get("sender"),
            "message": obj.get("message"),
            "payload": [ChatMessagePayloadDTO.from_dict(_item) for _item in obj.get("payload")] if obj.get("payload") is not None else None
        })
        return _obj


