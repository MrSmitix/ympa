# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from ympa_python_pydantic_v1_client.models.mappings_offer_dto import MappingsOfferDTO
from ympa_python_pydantic_v1_client.models.offer_mapping_dto import OfferMappingDTO

class OfferMappingEntryDTO(BaseModel):
    """
    Список товаров.   # noqa: E501
    """
    mapping: Optional[OfferMappingDTO] = None
    awaiting_moderation_mapping: Optional[OfferMappingDTO] = Field(default=None, alias="awaitingModerationMapping")
    rejected_mapping: Optional[OfferMappingDTO] = Field(default=None, alias="rejectedMapping")
    offer: Optional[MappingsOfferDTO] = None
    __properties = ["mapping", "awaitingModerationMapping", "rejectedMapping", "offer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OfferMappingEntryDTO:
        """Create an instance of OfferMappingEntryDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of mapping
        if self.mapping:
            _dict['mapping'] = self.mapping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of awaiting_moderation_mapping
        if self.awaiting_moderation_mapping:
            _dict['awaitingModerationMapping'] = self.awaiting_moderation_mapping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rejected_mapping
        if self.rejected_mapping:
            _dict['rejectedMapping'] = self.rejected_mapping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OfferMappingEntryDTO:
        """Create an instance of OfferMappingEntryDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OfferMappingEntryDTO.parse_obj(obj)

        _obj = OfferMappingEntryDTO.parse_obj({
            "mapping": OfferMappingDTO.from_dict(obj.get("mapping")) if obj.get("mapping") is not None else None,
            "awaiting_moderation_mapping": OfferMappingDTO.from_dict(obj.get("awaitingModerationMapping")) if obj.get("awaitingModerationMapping") is not None else None,
            "rejected_mapping": OfferMappingDTO.from_dict(obj.get("rejectedMapping")) if obj.get("rejectedMapping") is not None else None,
            "offer": MappingsOfferDTO.from_dict(obj.get("offer")) if obj.get("offer") is not None else None
        })
        return _obj


