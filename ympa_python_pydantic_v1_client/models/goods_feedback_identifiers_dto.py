# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class GoodsFeedbackIdentifiersDTO(BaseModel):
    """
    Идентификаторы, которые связаны с отзывом.  # noqa: E501
    """
    order_id: StrictInt = Field(default=..., alias="orderId", description="Идентификатор заказа на Маркете.")
    model_id: StrictInt = Field(default=..., alias="modelId", description="Идентификатор модели товара.")
    __properties = ["orderId", "modelId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GoodsFeedbackIdentifiersDTO:
        """Create an instance of GoodsFeedbackIdentifiersDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GoodsFeedbackIdentifiersDTO:
        """Create an instance of GoodsFeedbackIdentifiersDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GoodsFeedbackIdentifiersDTO.parse_obj(obj)

        _obj = GoodsFeedbackIdentifiersDTO.parse_obj({
            "order_id": obj.get("orderId"),
            "model_id": obj.get("modelId")
        })
        return _obj


