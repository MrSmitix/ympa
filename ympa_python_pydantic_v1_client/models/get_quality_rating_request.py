# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist

class GetQualityRatingRequest(BaseModel):
    """
    Запрос информации по индексу качества.  # noqa: E501
    """
    date_from: Optional[date] = Field(default=None, alias="dateFrom", description="Начало периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть раньше 30 дней от текущей даты. ")
    date_to: Optional[date] = Field(default=None, alias="dateTo", description="Конец периода.  Формат даты: `ГГГГ‑ММ‑ДД`.  Не может быть позже текущей даты. ")
    campaign_ids: conlist(StrictInt, max_items=50, min_items=1, unique_items=True) = Field(default=..., alias="campaignIds", description="Список идентификаторов магазинов.")
    __properties = ["dateFrom", "dateTo", "campaignIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetQualityRatingRequest:
        """Create an instance of GetQualityRatingRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetQualityRatingRequest:
        """Create an instance of GetQualityRatingRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetQualityRatingRequest.parse_obj(obj)

        _obj = GetQualityRatingRequest.parse_obj({
            "date_from": obj.get("dateFrom"),
            "date_to": obj.get("dateTo"),
            "campaign_ids": obj.get("campaignIds")
        })
        return _obj


