# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from ympa_python_pydantic_v1_client.models.return_decision_reason_type import ReturnDecisionReasonType
from ympa_python_pydantic_v1_client.models.return_decision_subreason_type import ReturnDecisionSubreasonType
from ympa_python_pydantic_v1_client.models.return_decision_type import ReturnDecisionType

class ReturnDecisionDTO(BaseModel):
    """
    Решения по возвратам.  # noqa: E501
    """
    return_item_id: Optional[StrictInt] = Field(default=None, alias="returnItemId", description="Идентификатор товара в возврате.")
    count: Optional[StrictInt] = Field(default=None, description="Количество единиц товара.")
    comment: Optional[StrictStr] = Field(default=None, description="Комментарий.")
    reason_type: Optional[ReturnDecisionReasonType] = Field(default=None, alias="reasonType")
    subreason_type: Optional[ReturnDecisionSubreasonType] = Field(default=None, alias="subreasonType")
    decision_type: Optional[ReturnDecisionType] = Field(default=None, alias="decisionType")
    refund_amount: Optional[StrictInt] = Field(default=None, alias="refundAmount", description="Сумма возврата.")
    partner_compensation: Optional[StrictInt] = Field(default=None, alias="partnerCompensation", description="Компенсация за обратную доставку.")
    images: Optional[conlist(StrictStr)] = Field(default=None, description="Список хеш-кодов фотографий товара от покупателя.")
    __properties = ["returnItemId", "count", "comment", "reasonType", "subreasonType", "decisionType", "refundAmount", "partnerCompensation", "images"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReturnDecisionDTO:
        """Create an instance of ReturnDecisionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if images (nullable) is None
        # and __fields_set__ contains the field
        if self.images is None and "images" in self.__fields_set__:
            _dict['images'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReturnDecisionDTO:
        """Create an instance of ReturnDecisionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReturnDecisionDTO.parse_obj(obj)

        _obj = ReturnDecisionDTO.parse_obj({
            "return_item_id": obj.get("returnItemId"),
            "count": obj.get("count"),
            "comment": obj.get("comment"),
            "reason_type": obj.get("reasonType"),
            "subreason_type": obj.get("subreasonType"),
            "decision_type": obj.get("decisionType"),
            "refund_amount": obj.get("refundAmount"),
            "partner_compensation": obj.get("partnerCompensation"),
            "images": obj.get("images")
        })
        return _obj


