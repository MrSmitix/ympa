# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from ympa_python_pydantic_v1_client.models.currency_type import CurrencyType
from ympa_python_pydantic_v1_client.models.order_buyer_dto import OrderBuyerDTO
from ympa_python_pydantic_v1_client.models.order_delivery_dto import OrderDeliveryDTO
from ympa_python_pydantic_v1_client.models.order_item_dto import OrderItemDTO
from ympa_python_pydantic_v1_client.models.order_payment_method_type import OrderPaymentMethodType
from ympa_python_pydantic_v1_client.models.order_payment_type import OrderPaymentType
from ympa_python_pydantic_v1_client.models.order_status_type import OrderStatusType
from ympa_python_pydantic_v1_client.models.order_subsidy_dto import OrderSubsidyDTO
from ympa_python_pydantic_v1_client.models.order_substatus_type import OrderSubstatusType
from ympa_python_pydantic_v1_client.models.order_tax_system_type import OrderTaxSystemType

class OrderDTO(BaseModel):
    """
    Заказ.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор заказа.")
    status: Optional[OrderStatusType] = None
    substatus: Optional[OrderSubstatusType] = None
    creation_date: Optional[StrictStr] = Field(default=None, alias="creationDate")
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt")
    currency: Optional[CurrencyType] = None
    items_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="itemsTotal", description="Платеж покупателя. ")
    delivery_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="deliveryTotal", description="Стоимость доставки. ")
    buyer_items_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyerItemsTotal", description="{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. ")
    buyer_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyerTotal", description="{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. ")
    buyer_items_total_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyerItemsTotalBeforeDiscount", description="Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. ")
    buyer_total_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="buyerTotalBeforeDiscount", description="{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). ")
    payment_type: Optional[OrderPaymentType] = Field(default=None, alias="paymentType")
    payment_method: Optional[OrderPaymentMethodType] = Field(default=None, alias="paymentMethod")
    fake: Optional[StrictBool] = Field(default=None, description="Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. ")
    items: conlist(OrderItemDTO) = Field(default=..., description="Список товаров в заказе.")
    subsidies: Optional[conlist(OrderSubsidyDTO)] = Field(default=None, description="Список субсидий по типам.")
    delivery: Optional[OrderDeliveryDTO] = None
    buyer: Optional[OrderBuyerDTO] = None
    notes: Optional[StrictStr] = Field(default=None, description="Комментарий к заказу.")
    tax_system: Optional[OrderTaxSystemType] = Field(default=None, alias="taxSystem")
    cancel_requested: Optional[StrictBool] = Field(default=None, alias="cancelRequested", description="**Только для модели DBS**  Запрошена ли отмена. ")
    expiry_date: Optional[StrictStr] = Field(default=None, alias="expiryDate")
    __properties = ["id", "status", "substatus", "creationDate", "updatedAt", "currency", "itemsTotal", "deliveryTotal", "buyerItemsTotal", "buyerTotal", "buyerItemsTotalBeforeDiscount", "buyerTotalBeforeDiscount", "paymentType", "paymentMethod", "fake", "items", "subsidies", "delivery", "buyer", "notes", "taxSystem", "cancelRequested", "expiryDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderDTO:
        """Create an instance of OrderDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subsidies (list)
        _items = []
        if self.subsidies:
            for _item in self.subsidies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subsidies'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery
        if self.delivery:
            _dict['delivery'] = self.delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyer
        if self.buyer:
            _dict['buyer'] = self.buyer.to_dict()
        # set to None if subsidies (nullable) is None
        # and __fields_set__ contains the field
        if self.subsidies is None and "subsidies" in self.__fields_set__:
            _dict['subsidies'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderDTO:
        """Create an instance of OrderDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderDTO.parse_obj(obj)

        _obj = OrderDTO.parse_obj({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "substatus": obj.get("substatus"),
            "creation_date": obj.get("creationDate"),
            "updated_at": obj.get("updatedAt"),
            "currency": obj.get("currency"),
            "items_total": obj.get("itemsTotal"),
            "delivery_total": obj.get("deliveryTotal"),
            "buyer_items_total": obj.get("buyerItemsTotal"),
            "buyer_total": obj.get("buyerTotal"),
            "buyer_items_total_before_discount": obj.get("buyerItemsTotalBeforeDiscount"),
            "buyer_total_before_discount": obj.get("buyerTotalBeforeDiscount"),
            "payment_type": obj.get("paymentType"),
            "payment_method": obj.get("paymentMethod"),
            "fake": obj.get("fake"),
            "items": [OrderItemDTO.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "subsidies": [OrderSubsidyDTO.from_dict(_item) for _item in obj.get("subsidies")] if obj.get("subsidies") is not None else None,
            "delivery": OrderDeliveryDTO.from_dict(obj.get("delivery")) if obj.get("delivery") is not None else None,
            "buyer": OrderBuyerDTO.from_dict(obj.get("buyer")) if obj.get("buyer") is not None else None,
            "notes": obj.get("notes"),
            "tax_system": obj.get("taxSystem"),
            "cancel_requested": obj.get("cancelRequested"),
            "expiry_date": obj.get("expiryDate")
        })
        return _obj


