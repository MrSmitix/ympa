# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.business_dto import BusinessDTO
from ympa_python_pydantic_v1_client.models.placement_type import PlacementType

class CampaignDTO(BaseModel):
    """
    Информация о магазине.  # noqa: E501
    """
    domain: Optional[StrictStr] = Field(default=None, description="URL магазина.")
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор кампании.")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId", description="Идентификатор плательщика в Яндекс Балансе.")
    business: Optional[BusinessDTO] = None
    placement_type: Optional[PlacementType] = Field(default=None, alias="placementType")
    __properties = ["domain", "id", "clientId", "business", "placementType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignDTO:
        """Create an instance of CampaignDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of business
        if self.business:
            _dict['business'] = self.business.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignDTO:
        """Create an instance of CampaignDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignDTO.parse_obj(obj)

        _obj = CampaignDTO.parse_obj({
            "domain": obj.get("domain"),
            "id": obj.get("id"),
            "client_id": obj.get("clientId"),
            "business": BusinessDTO.from_dict(obj.get("business")) if obj.get("business") is not None else None,
            "placement_type": obj.get("placementType")
        })
        return _obj


