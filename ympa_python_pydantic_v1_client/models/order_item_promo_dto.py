# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.order_promo_type import OrderPromoType

class OrderItemPromoDTO(BaseModel):
    """
    Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.  # noqa: E501
    """
    type: OrderPromoType = Field(...)
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Размер пользовательской скидки в валюте покупателя. ")
    subsidy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. ")
    shop_promo_id: Optional[StrictStr] = Field(default=None, alias="shopPromoId", description="Идентификатор акции поставщика. ")
    market_promo_id: Optional[StrictStr] = Field(default=None, alias="marketPromoId", description="Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`. ")
    __properties = ["type", "discount", "subsidy", "shopPromoId", "marketPromoId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderItemPromoDTO:
        """Create an instance of OrderItemPromoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderItemPromoDTO:
        """Create an instance of OrderItemPromoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderItemPromoDTO.parse_obj(obj)

        _obj = OrderItemPromoDTO.parse_obj({
            "type": obj.get("type"),
            "discount": obj.get("discount"),
            "subsidy": obj.get("subsidy"),
            "shop_promo_id": obj.get("shopPromoId"),
            "market_promo_id": obj.get("marketPromoId")
        })
        return _obj


