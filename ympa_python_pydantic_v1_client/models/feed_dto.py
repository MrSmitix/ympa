# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.feed_content_dto import FeedContentDTO
from ympa_python_pydantic_v1_client.models.feed_download_dto import FeedDownloadDTO
from ympa_python_pydantic_v1_client.models.feed_placement_dto import FeedPlacementDTO
from ympa_python_pydantic_v1_client.models.feed_publication_dto import FeedPublicationDTO

class FeedDTO(BaseModel):
    """
    Информация о прайс-листе.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор прайс-листа.")
    login: Optional[StrictStr] = Field(default=None, description="Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. ")
    name: Optional[StrictStr] = Field(default=None, description="Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. ")
    password: Optional[StrictStr] = Field(default=None, description="Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. ")
    upload_date: Optional[datetime] = Field(default=None, alias="uploadDate", description="Дата загрузки прайс-листа на Маркет.  Формат даты: `ДД-ММ-ГГГГ`.  Параметр выводится при размещении прайс-листа на сервере Маркета. ")
    url: Optional[StrictStr] = Field(default=None, description="URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. ")
    content: Optional[FeedContentDTO] = None
    download: Optional[FeedDownloadDTO] = None
    placement: Optional[FeedPlacementDTO] = None
    publication: Optional[FeedPublicationDTO] = None
    __properties = ["id", "login", "name", "password", "uploadDate", "url", "content", "download", "placement", "publication"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeedDTO:
        """Create an instance of FeedDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of download
        if self.download:
            _dict['download'] = self.download.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placement
        if self.placement:
            _dict['placement'] = self.placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publication
        if self.publication:
            _dict['publication'] = self.publication.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeedDTO:
        """Create an instance of FeedDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeedDTO.parse_obj(obj)

        _obj = FeedDTO.parse_obj({
            "id": obj.get("id"),
            "login": obj.get("login"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "upload_date": obj.get("uploadDate"),
            "url": obj.get("url"),
            "content": FeedContentDTO.from_dict(obj.get("content")) if obj.get("content") is not None else None,
            "download": FeedDownloadDTO.from_dict(obj.get("download")) if obj.get("download") is not None else None,
            "placement": FeedPlacementDTO.from_dict(obj.get("placement")) if obj.get("placement") is not None else None,
            "publication": FeedPublicationDTO.from_dict(obj.get("publication")) if obj.get("publication") is not None else None
        })
        return _obj


