# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.goods_stats_warehouse_dto import GoodsStatsWarehouseDTO
from ympa_python_pydantic_v1_client.models.goods_stats_weight_dimensions_dto import GoodsStatsWeightDimensionsDTO
from ympa_python_pydantic_v1_client.models.tariff_dto import TariffDTO

class GoodsStatsGoodsDTO(BaseModel):
    """
    Информация о товаре.  # noqa: E501
    """
    shop_sku: Optional[constr(strict=True, max_length=255, min_length=1)] = Field(default=None, alias="shopSku", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    market_sku: Optional[StrictInt] = Field(default=None, alias="marketSku", description="SKU на Маркете.")
    name: Optional[StrictStr] = Field(default=None, description="Название товара.")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).")
    category_id: Optional[StrictInt] = Field(default=None, alias="categoryId", description="Идентификатор категории товара на Маркете.")
    category_name: Optional[StrictStr] = Field(default=None, alias="categoryName", description="Название категории товара на Маркете.")
    weight_dimensions: Optional[GoodsStatsWeightDimensionsDTO] = Field(default=None, alias="weightDimensions")
    warehouses: Optional[conlist(GoodsStatsWarehouseDTO)] = Field(default=None, description="Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. ")
    tariffs: Optional[conlist(TariffDTO)] = Field(default=None, description="Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). ")
    pictures: Optional[conlist(StrictStr)] = Field(default=None, description="Ссылки (URL) изображений товара в хорошем качестве.")
    __properties = ["shopSku", "marketSku", "name", "price", "categoryId", "categoryName", "weightDimensions", "warehouses", "tariffs", "pictures"]

    @validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GoodsStatsGoodsDTO:
        """Create an instance of GoodsStatsGoodsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of weight_dimensions
        if self.weight_dimensions:
            _dict['weightDimensions'] = self.weight_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warehouses (list)
        _items = []
        if self.warehouses:
            for _item in self.warehouses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warehouses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tariffs (list)
        _items = []
        if self.tariffs:
            for _item in self.tariffs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tariffs'] = _items
        # set to None if warehouses (nullable) is None
        # and __fields_set__ contains the field
        if self.warehouses is None and "warehouses" in self.__fields_set__:
            _dict['warehouses'] = None

        # set to None if tariffs (nullable) is None
        # and __fields_set__ contains the field
        if self.tariffs is None and "tariffs" in self.__fields_set__:
            _dict['tariffs'] = None

        # set to None if pictures (nullable) is None
        # and __fields_set__ contains the field
        if self.pictures is None and "pictures" in self.__fields_set__:
            _dict['pictures'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GoodsStatsGoodsDTO:
        """Create an instance of GoodsStatsGoodsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GoodsStatsGoodsDTO.parse_obj(obj)

        _obj = GoodsStatsGoodsDTO.parse_obj({
            "shop_sku": obj.get("shopSku"),
            "market_sku": obj.get("marketSku"),
            "name": obj.get("name"),
            "price": obj.get("price"),
            "category_id": obj.get("categoryId"),
            "category_name": obj.get("categoryName"),
            "weight_dimensions": GoodsStatsWeightDimensionsDTO.from_dict(obj.get("weightDimensions")) if obj.get("weightDimensions") is not None else None,
            "warehouses": [GoodsStatsWarehouseDTO.from_dict(_item) for _item in obj.get("warehouses")] if obj.get("warehouses") is not None else None,
            "tariffs": [TariffDTO.from_dict(_item) for _item in obj.get("tariffs")] if obj.get("tariffs") is not None else None,
            "pictures": obj.get("pictures")
        })
        return _obj


