# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from ympa_python_pydantic_v1_client.models.campaign_settings_time_period_dto import CampaignSettingsTimePeriodDTO

class CampaignSettingsScheduleDTO(BaseModel):
    """
    Расписание работы службы доставки в своем регионе.  # noqa: E501
    """
    available_on_holidays: Optional[StrictBool] = Field(default=None, alias="availableOnHolidays", description="Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни. ")
    custom_holidays: conlist(StrictStr) = Field(default=..., alias="customHolidays", description="Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.")
    custom_working_days: conlist(StrictStr) = Field(default=..., alias="customWorkingDays", description="Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.")
    period: Optional[CampaignSettingsTimePeriodDTO] = None
    total_holidays: conlist(StrictStr) = Field(default=..., alias="totalHolidays", description="Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.")
    weekly_holidays: conlist(conint(strict=True, le=7, ge=1)) = Field(default=..., alias="weeklyHolidays", description="Список выходных дней недели и государственных праздников.")
    __properties = ["availableOnHolidays", "customHolidays", "customWorkingDays", "period", "totalHolidays", "weeklyHolidays"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignSettingsScheduleDTO:
        """Create an instance of CampaignSettingsScheduleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict['period'] = self.period.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignSettingsScheduleDTO:
        """Create an instance of CampaignSettingsScheduleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignSettingsScheduleDTO.parse_obj(obj)

        _obj = CampaignSettingsScheduleDTO.parse_obj({
            "available_on_holidays": obj.get("availableOnHolidays"),
            "custom_holidays": obj.get("customHolidays"),
            "custom_working_days": obj.get("customWorkingDays"),
            "period": CampaignSettingsTimePeriodDTO.from_dict(obj.get("period")) if obj.get("period") is not None else None,
            "total_holidays": obj.get("totalHolidays"),
            "weekly_holidays": obj.get("weeklyHolidays")
        })
        return _obj


