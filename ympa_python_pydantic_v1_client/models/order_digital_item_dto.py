# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date

from pydantic import BaseModel, Field, StrictInt, StrictStr

class OrderDigitalItemDTO(BaseModel):
    """
    Ключ цифрового товара.  # noqa: E501
    """
    id: StrictInt = Field(default=..., description="Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. ")
    code: StrictStr = Field(default=..., description="Сам ключ.")
    slip: StrictStr = Field(default=..., description="Инструкция по активации.")
    activate_till: date = Field(default=..., description="Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: `ГГГГ-ММ-ДД`. ")
    __properties = ["id", "code", "slip", "activate_till"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderDigitalItemDTO:
        """Create an instance of OrderDigitalItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderDigitalItemDTO:
        """Create an instance of OrderDigitalItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderDigitalItemDTO.parse_obj(obj)

        _obj = OrderDigitalItemDTO.parse_obj({
            "id": obj.get("id"),
            "code": obj.get("code"),
            "slip": obj.get("slip"),
            "activate_till": obj.get("activate_till")
        })
        return _obj


