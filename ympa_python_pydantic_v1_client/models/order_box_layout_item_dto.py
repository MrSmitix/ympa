# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conint, conlist
from ympa_python_pydantic_v1_client.models.brief_order_item_instance_dto import BriefOrderItemInstanceDTO
from ympa_python_pydantic_v1_client.models.order_box_layout_partial_count_dto import OrderBoxLayoutPartialCountDTO

class OrderBoxLayoutItemDTO(BaseModel):
    """
    Информация о товаре в коробке.  # noqa: E501
    """
    id: StrictInt = Field(default=..., description="Идентификатор товара в заказе.  {% cut \"Где его взять\" %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`.  {% endcut %}   ")
    full_count: Optional[conint(strict=True, ge=1)] = Field(default=None, alias="fullCount", description="Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с `partialCount`. ")
    partial_count: Optional[OrderBoxLayoutPartialCountDTO] = Field(default=None, alias="partialCount")
    instances: Optional[conlist(BriefOrderItemInstanceDTO)] = Field(default=None, description="Переданные вами коды маркировки.")
    __properties = ["id", "fullCount", "partialCount", "instances"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderBoxLayoutItemDTO:
        """Create an instance of OrderBoxLayoutItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of partial_count
        if self.partial_count:
            _dict['partialCount'] = self.partial_count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item in self.instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instances'] = _items
        # set to None if instances (nullable) is None
        # and __fields_set__ contains the field
        if self.instances is None and "instances" in self.__fields_set__:
            _dict['instances'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderBoxLayoutItemDTO:
        """Create an instance of OrderBoxLayoutItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderBoxLayoutItemDTO.parse_obj(obj)

        _obj = OrderBoxLayoutItemDTO.parse_obj({
            "id": obj.get("id"),
            "full_count": obj.get("fullCount"),
            "partial_count": OrderBoxLayoutPartialCountDTO.from_dict(obj.get("partialCount")) if obj.get("partialCount") is not None else None,
            "instances": [BriefOrderItemInstanceDTO.from_dict(_item) for _item in obj.get("instances")] if obj.get("instances") is not None else None
        })
        return _obj


