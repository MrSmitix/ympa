# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.offer_campaign_status_type import OfferCampaignStatusType

class GetCampaignOffersRequest(BaseModel):
    """
    Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке.   # noqa: E501
    """
    offer_ids: Optional[conlist(constr(strict=True, max_length=255, min_length=1), max_items=200)] = Field(default=None, alias="offerIds", description="Идентификаторы товаров, информация о которых нужна.  {% note warning \"Такой список возвращается только целиком\" %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * `page_token` * `limit`  {% endnote %}    ")
    statuses: Optional[conlist(OfferCampaignStatusType)] = Field(default=None, description="Фильтр по статусам товаров. ")
    category_ids: Optional[conlist(StrictInt)] = Field(default=None, alias="categoryIds", description="Фильтр по категориям на Маркете.")
    vendor_names: Optional[conlist(StrictStr)] = Field(default=None, alias="vendorNames", description="Фильтр по брендам.")
    tags: Optional[conlist(StrictStr)] = Field(default=None, description="Фильтр по тегам.")
    __properties = ["offerIds", "statuses", "categoryIds", "vendorNames", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetCampaignOffersRequest:
        """Create an instance of GetCampaignOffersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if offer_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.offer_ids is None and "offer_ids" in self.__fields_set__:
            _dict['offerIds'] = None

        # set to None if statuses (nullable) is None
        # and __fields_set__ contains the field
        if self.statuses is None and "statuses" in self.__fields_set__:
            _dict['statuses'] = None

        # set to None if category_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.category_ids is None and "category_ids" in self.__fields_set__:
            _dict['categoryIds'] = None

        # set to None if vendor_names (nullable) is None
        # and __fields_set__ contains the field
        if self.vendor_names is None and "vendor_names" in self.__fields_set__:
            _dict['vendorNames'] = None

        # set to None if tags (nullable) is None
        # and __fields_set__ contains the field
        if self.tags is None and "tags" in self.__fields_set__:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetCampaignOffersRequest:
        """Create an instance of GetCampaignOffersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetCampaignOffersRequest.parse_obj(obj)

        _obj = GetCampaignOffersRequest.parse_obj({
            "offer_ids": obj.get("offerIds"),
            "statuses": obj.get("statuses"),
            "category_ids": obj.get("categoryIds"),
            "vendor_names": obj.get("vendorNames"),
            "tags": obj.get("tags")
        })
        return _obj


