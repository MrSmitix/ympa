# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from ympa_python_pydantic_v1_client.models.order_stats_status_type import OrderStatsStatusType
from ympa_python_pydantic_v1_client.models.orders_stats_commission_dto import OrdersStatsCommissionDTO
from ympa_python_pydantic_v1_client.models.orders_stats_delivery_region_dto import OrdersStatsDeliveryRegionDTO
from ympa_python_pydantic_v1_client.models.orders_stats_item_dto import OrdersStatsItemDTO
from ympa_python_pydantic_v1_client.models.orders_stats_order_payment_type import OrdersStatsOrderPaymentType
from ympa_python_pydantic_v1_client.models.orders_stats_payment_dto import OrdersStatsPaymentDTO

class OrdersStatsOrderDTO(BaseModel):
    """
    Информация о заказе.  # noqa: E501
    """
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор заказа.")
    creation_date: Optional[date] = Field(default=None, alias="creationDate", description="Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. ")
    status_update_date: Optional[datetime] = Field(default=None, alias="statusUpdateDate", description="Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). ")
    status: Optional[OrderStatsStatusType] = None
    partner_order_id: Optional[StrictStr] = Field(default=None, alias="partnerOrderId", description="Идентификатор заказа в информационной системе магазина.")
    payment_type: Optional[OrdersStatsOrderPaymentType] = Field(default=None, alias="paymentType")
    fake: Optional[StrictBool] = Field(default=None, description="Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. ")
    delivery_region: Optional[OrdersStatsDeliveryRegionDTO] = Field(default=None, alias="deliveryRegion")
    items: conlist(OrdersStatsItemDTO) = Field(default=..., description="Список товаров в заказе после возможных изменений.")
    initial_items: Optional[conlist(OrdersStatsItemDTO)] = Field(default=None, alias="initialItems", description="Список товаров в заказе до изменений.")
    payments: conlist(OrdersStatsPaymentDTO) = Field(default=..., description="Информация о денежных переводах по заказу.")
    commissions: conlist(OrdersStatsCommissionDTO) = Field(default=..., description="Информация о комиссиях за заказ.")
    __properties = ["id", "creationDate", "statusUpdateDate", "status", "partnerOrderId", "paymentType", "fake", "deliveryRegion", "items", "initialItems", "payments", "commissions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrdersStatsOrderDTO:
        """Create an instance of OrdersStatsOrderDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of delivery_region
        if self.delivery_region:
            _dict['deliveryRegion'] = self.delivery_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in initial_items (list)
        _items = []
        if self.initial_items:
            for _item in self.initial_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['initialItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in commissions (list)
        _items = []
        if self.commissions:
            for _item in self.commissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['commissions'] = _items
        # set to None if initial_items (nullable) is None
        # and __fields_set__ contains the field
        if self.initial_items is None and "initial_items" in self.__fields_set__:
            _dict['initialItems'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrdersStatsOrderDTO:
        """Create an instance of OrdersStatsOrderDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrdersStatsOrderDTO.parse_obj(obj)

        _obj = OrdersStatsOrderDTO.parse_obj({
            "id": obj.get("id"),
            "creation_date": obj.get("creationDate"),
            "status_update_date": obj.get("statusUpdateDate"),
            "status": obj.get("status"),
            "partner_order_id": obj.get("partnerOrderId"),
            "payment_type": obj.get("paymentType"),
            "fake": obj.get("fake"),
            "delivery_region": OrdersStatsDeliveryRegionDTO.from_dict(obj.get("deliveryRegion")) if obj.get("deliveryRegion") is not None else None,
            "items": [OrdersStatsItemDTO.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "initial_items": [OrdersStatsItemDTO.from_dict(_item) for _item in obj.get("initialItems")] if obj.get("initialItems") is not None else None,
            "payments": [OrdersStatsPaymentDTO.from_dict(_item) for _item in obj.get("payments")] if obj.get("payments") is not None else None,
            "commissions": [OrdersStatsCommissionDTO.from_dict(_item) for _item in obj.get("commissions")] if obj.get("commissions") is not None else None
        })
        return _obj


