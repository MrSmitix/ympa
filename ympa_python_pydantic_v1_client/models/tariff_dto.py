# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from ympa_python_pydantic_v1_client.models.tariff_parameter_dto import TariffParameterDTO
from ympa_python_pydantic_v1_client.models.tariff_type import TariffType

class TariffDTO(BaseModel):
    """
    Информация о тарифах, по которым нужно заплатить за услуги Маркета.  # noqa: E501
    """
    type: TariffType = Field(...)
    percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. ")
    amount: Union[StrictFloat, StrictInt] = Field(default=..., description="Значение тарифа в рублях.")
    parameters: conlist(TariffParameterDTO) = Field(default=..., description="Параметры расчета тарифа.")
    __properties = ["type", "percent", "amount", "parameters"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TariffDTO:
        """Create an instance of TariffDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TariffDTO:
        """Create an instance of TariffDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TariffDTO.parse_obj(obj)

        _obj = TariffDTO.parse_obj({
            "type": obj.get("type"),
            "percent": obj.get("percent"),
            "amount": obj.get("amount"),
            "parameters": [TariffParameterDTO.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None
        })
        return _obj


