# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.get_price_with_discount_dto import GetPriceWithDiscountDTO
from ympa_python_pydantic_v1_client.models.get_price_with_vat_dto import GetPriceWithVatDTO
from ympa_python_pydantic_v1_client.models.offer_campaign_status_type import OfferCampaignStatusType
from ympa_python_pydantic_v1_client.models.offer_error_dto import OfferErrorDTO
from ympa_python_pydantic_v1_client.models.quantum_dto import QuantumDTO

class GetCampaignOfferDTO(BaseModel):
    """
    Параметры размещения товара в магазине.  # noqa: E501
    """
    offer_id: constr(strict=True, max_length=255, min_length=1) = Field(default=..., alias="offerId", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    quantum: Optional[QuantumDTO] = None
    available: Optional[StrictBool] = Field(default=None, description="Есть ли товар в продаже. ")
    basic_price: Optional[GetPriceWithDiscountDTO] = Field(default=None, alias="basicPrice")
    campaign_price: Optional[GetPriceWithVatDTO] = Field(default=None, alias="campaignPrice")
    status: Optional[OfferCampaignStatusType] = None
    errors: Optional[conlist(OfferErrorDTO)] = Field(default=None, description="Ошибки, препятствующие размещению товара на витрине. ")
    warnings: Optional[conlist(OfferErrorDTO)] = Field(default=None, description="Предупреждения, не препятствующие размещению товара на витрине. ")
    __properties = ["offerId", "quantum", "available", "basicPrice", "campaignPrice", "status", "errors", "warnings"]

    @validator('offer_id')
    def offer_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetCampaignOfferDTO:
        """Create an instance of GetCampaignOfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of quantum
        if self.quantum:
            _dict['quantum'] = self.quantum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basic_price
        if self.basic_price:
            _dict['basicPrice'] = self.basic_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_price
        if self.campaign_price:
            _dict['campaignPrice'] = self.campaign_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        # set to None if errors (nullable) is None
        # and __fields_set__ contains the field
        if self.errors is None and "errors" in self.__fields_set__:
            _dict['errors'] = None

        # set to None if warnings (nullable) is None
        # and __fields_set__ contains the field
        if self.warnings is None and "warnings" in self.__fields_set__:
            _dict['warnings'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetCampaignOfferDTO:
        """Create an instance of GetCampaignOfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetCampaignOfferDTO.parse_obj(obj)

        _obj = GetCampaignOfferDTO.parse_obj({
            "offer_id": obj.get("offerId"),
            "quantum": QuantumDTO.from_dict(obj.get("quantum")) if obj.get("quantum") is not None else None,
            "available": obj.get("available"),
            "basic_price": GetPriceWithDiscountDTO.from_dict(obj.get("basicPrice")) if obj.get("basicPrice") is not None else None,
            "campaign_price": GetPriceWithVatDTO.from_dict(obj.get("campaignPrice")) if obj.get("campaignPrice") is not None else None,
            "status": obj.get("status"),
            "errors": [OfferErrorDTO.from_dict(_item) for _item in obj.get("errors")] if obj.get("errors") is not None else None,
            "warnings": [OfferErrorDTO.from_dict(_item) for _item in obj.get("warnings")] if obj.get("warnings") is not None else None
        })
        return _obj


