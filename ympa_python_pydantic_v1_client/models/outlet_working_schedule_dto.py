# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from ympa_python_pydantic_v1_client.models.outlet_working_schedule_item_dto import OutletWorkingScheduleItemDTO

class OutletWorkingScheduleDTO(BaseModel):
    """
    Список режимов работы точки продаж.   # noqa: E501
    """
    work_in_holiday: Optional[StrictBool] = Field(default=None, alias="workInHoliday", description="Признак, работает ли точка продаж в дни государственных праздников.  Возможные значения:  * `false` — точка продаж не работает в дни государственных праздников. * `true` — точка продаж работает в дни государственных праздников. ")
    schedule_items: conlist(OutletWorkingScheduleItemDTO, min_items=1) = Field(default=..., alias="scheduleItems", description="Список расписаний работы точки продаж. ")
    __properties = ["workInHoliday", "scheduleItems"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OutletWorkingScheduleDTO:
        """Create an instance of OutletWorkingScheduleDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in schedule_items (list)
        _items = []
        if self.schedule_items:
            for _item in self.schedule_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['scheduleItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OutletWorkingScheduleDTO:
        """Create an instance of OutletWorkingScheduleDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OutletWorkingScheduleDTO.parse_obj(obj)

        _obj = OutletWorkingScheduleDTO.parse_obj({
            "work_in_holiday": obj.get("workInHoliday"),
            "schedule_items": [OutletWorkingScheduleItemDTO.from_dict(_item) for _item in obj.get("scheduleItems")] if obj.get("scheduleItems") is not None else None
        })
        return _obj


