# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.campaign_settings_local_region_dto import CampaignSettingsLocalRegionDTO

class CampaignSettingsDTO(BaseModel):
    """
    Настройки магазина.  # noqa: E501
    """
    country_region: Optional[StrictInt] = Field(default=None, alias="countryRegion", description="Идентификатор региона, в котором находится магазин.")
    shop_name: Optional[StrictStr] = Field(default=None, alias="shopName", description="Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. ")
    show_in_context: Optional[StrictBool] = Field(default=None, alias="showInContext", description="Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. ")
    show_in_premium: Optional[StrictBool] = Field(default=None, alias="showInPremium", description="Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения. ")
    use_open_stat: Optional[StrictBool] = Field(default=None, alias="useOpenStat", description="Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. ")
    local_region: Optional[CampaignSettingsLocalRegionDTO] = Field(default=None, alias="localRegion")
    __properties = ["countryRegion", "shopName", "showInContext", "showInPremium", "useOpenStat", "localRegion"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignSettingsDTO:
        """Create an instance of CampaignSettingsDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local_region
        if self.local_region:
            _dict['localRegion'] = self.local_region.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignSettingsDTO:
        """Create an instance of CampaignSettingsDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignSettingsDTO.parse_obj(obj)

        _obj = CampaignSettingsDTO.parse_obj({
            "country_region": obj.get("countryRegion"),
            "shop_name": obj.get("shopName"),
            "show_in_context": obj.get("showInContext"),
            "show_in_premium": obj.get("showInPremium"),
            "use_open_stat": obj.get("useOpenStat"),
            "local_region": CampaignSettingsLocalRegionDTO.from_dict(obj.get("localRegion")) if obj.get("localRegion") is not None else None
        })
        return _obj


