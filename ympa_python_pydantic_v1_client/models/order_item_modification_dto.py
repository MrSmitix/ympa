# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conint, conlist
from ympa_python_pydantic_v1_client.models.brief_order_item_instance_dto import BriefOrderItemInstanceDTO

class OrderItemModificationDTO(BaseModel):
    """
    Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр.   # noqa: E501
    """
    id: StrictInt = Field(default=..., description="Идентификатор товара в рамках заказа.  Получить идентификатор можно с помощью ресурсов [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  Обязательный параметр. ")
    count: conint(strict=True, ge=0) = Field(default=..., description="Новое количество товара.")
    instances: Optional[conlist(BriefOrderItemInstanceDTO)] = Field(default=None, description="Информация о маркировке единиц товара.  Передавайте в запросе все единицы товара, который подлежит маркировке.  Обязательный параметр, если в заказе есть товары, подлежащие маркировке [в системе «Честный ЗНАК»](https://честныйзнак.рф/). ")
    __properties = ["id", "count", "instances"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderItemModificationDTO:
        """Create an instance of OrderItemModificationDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item in self.instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instances'] = _items
        # set to None if instances (nullable) is None
        # and __fields_set__ contains the field
        if self.instances is None and "instances" in self.__fields_set__:
            _dict['instances'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderItemModificationDTO:
        """Create an instance of OrderItemModificationDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrderItemModificationDTO.parse_obj(obj)

        _obj = OrderItemModificationDTO.parse_obj({
            "id": obj.get("id"),
            "count": obj.get("count"),
            "instances": [BriefOrderItemInstanceDTO.from_dict(_item) for _item in obj.get("instances")] if obj.get("instances") is not None else None
        })
        return _obj


