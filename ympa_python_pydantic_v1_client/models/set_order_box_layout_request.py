# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from ympa_python_pydantic_v1_client.models.order_box_layout_dto import OrderBoxLayoutDTO

class SetOrderBoxLayoutRequest(BaseModel):
    """
    SetOrderBoxLayoutRequest
    """
    boxes: conlist(OrderBoxLayoutDTO, min_items=1) = Field(default=..., description="Список коробок.")
    allow_remove: Optional[StrictBool] = Field(default=False, alias="allowRemove", description="Передайте `true`, если вы собираетесь удалить часть товаров из заказа.")
    __properties = ["boxes", "allowRemove"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SetOrderBoxLayoutRequest:
        """Create an instance of SetOrderBoxLayoutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in boxes (list)
        _items = []
        if self.boxes:
            for _item in self.boxes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['boxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SetOrderBoxLayoutRequest:
        """Create an instance of SetOrderBoxLayoutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SetOrderBoxLayoutRequest.parse_obj(obj)

        _obj = SetOrderBoxLayoutRequest.parse_obj({
            "boxes": [OrderBoxLayoutDTO.from_dict(_item) for _item in obj.get("boxes")] if obj.get("boxes") is not None else None,
            "allow_remove": obj.get("allowRemove") if obj.get("allowRemove") is not None else False
        })
        return _obj


