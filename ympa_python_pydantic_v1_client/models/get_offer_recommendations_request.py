# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.field_state_type import FieldStateType
from ympa_python_pydantic_v1_client.models.price_competitiveness_type import PriceCompetitivenessType

class GetOfferRecommendationsRequest(BaseModel):
    """
    GetOfferRecommendationsRequest
    """
    offer_ids: Optional[conlist(constr(strict=True, max_length=255, min_length=1))] = Field(default=None, alias="offerIds", description="Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.")
    cofinance_price_filter: Optional[FieldStateType] = Field(default=None, alias="cofinancePriceFilter")
    recommended_cofinance_price_filter: Optional[FieldStateType] = Field(default=None, alias="recommendedCofinancePriceFilter")
    competitiveness_filter: Optional[PriceCompetitivenessType] = Field(default=None, alias="competitivenessFilter")
    __properties = ["offerIds", "cofinancePriceFilter", "recommendedCofinancePriceFilter", "competitivenessFilter"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetOfferRecommendationsRequest:
        """Create an instance of GetOfferRecommendationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if offer_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.offer_ids is None and "offer_ids" in self.__fields_set__:
            _dict['offerIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetOfferRecommendationsRequest:
        """Create an instance of GetOfferRecommendationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetOfferRecommendationsRequest.parse_obj(obj)

        _obj = GetOfferRecommendationsRequest.parse_obj({
            "offer_ids": obj.get("offerIds"),
            "cofinance_price_filter": obj.get("cofinancePriceFilter"),
            "recommended_cofinance_price_filter": obj.get("recommendedCofinancePriceFilter"),
            "competitiveness_filter": obj.get("competitivenessFilter")
        })
        return _obj


