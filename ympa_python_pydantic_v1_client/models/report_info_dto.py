# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.report_status_type import ReportStatusType
from ympa_python_pydantic_v1_client.models.report_sub_status_type import ReportSubStatusType

class ReportInfoDTO(BaseModel):
    """
    Статус генерации и ссылка на готовый отчет.  # noqa: E501
    """
    status: ReportStatusType = Field(...)
    sub_status: Optional[ReportSubStatusType] = Field(default=None, alias="subStatus")
    generation_requested_at: datetime = Field(default=..., alias="generationRequestedAt", description="Дата и время запроса на генерацию.")
    generation_finished_at: Optional[datetime] = Field(default=None, alias="generationFinishedAt", description="Дата и время завершения генерации.")
    file: Optional[StrictStr] = Field(default=None, description="Ссылка на готовый отчет.")
    estimated_generation_time: Optional[StrictInt] = Field(default=None, alias="estimatedGenerationTime", description="Ожидаемая продолжительность генерации в миллисекундах.")
    __properties = ["status", "subStatus", "generationRequestedAt", "generationFinishedAt", "file", "estimatedGenerationTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReportInfoDTO:
        """Create an instance of ReportInfoDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReportInfoDTO:
        """Create an instance of ReportInfoDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReportInfoDTO.parse_obj(obj)

        _obj = ReportInfoDTO.parse_obj({
            "status": obj.get("status"),
            "sub_status": obj.get("subStatus"),
            "generation_requested_at": obj.get("generationRequestedAt"),
            "generation_finished_at": obj.get("generationFinishedAt"),
            "file": obj.get("file"),
            "estimated_generation_time": obj.get("estimatedGenerationTime")
        })
        return _obj


