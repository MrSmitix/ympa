# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from ympa_python_pydantic_v1_client.models.shows_sales_grouping_type import ShowsSalesGroupingType

class GenerateShowsSalesReportRequest(BaseModel):
    """
    Данные, необходимые для генерации отчета.  # noqa: E501
    """
    business_id: Optional[StrictInt] = Field(default=None, alias="businessId", description="Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. ")
    campaign_id: Optional[StrictInt] = Field(default=None, alias="campaignId", description="Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. ")
    date_from: date = Field(default=..., alias="dateFrom", description="Начало периода, включительно.")
    date_to: date = Field(default=..., alias="dateTo", description="Конец периода, включительно.")
    grouping: ShowsSalesGroupingType = Field(...)
    __properties = ["businessId", "campaignId", "dateFrom", "dateTo", "grouping"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GenerateShowsSalesReportRequest:
        """Create an instance of GenerateShowsSalesReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GenerateShowsSalesReportRequest:
        """Create an instance of GenerateShowsSalesReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GenerateShowsSalesReportRequest.parse_obj(obj)

        _obj = GenerateShowsSalesReportRequest.parse_obj({
            "business_id": obj.get("businessId"),
            "campaign_id": obj.get("campaignId"),
            "date_from": obj.get("dateFrom"),
            "date_to": obj.get("dateTo"),
            "grouping": obj.get("grouping")
        })
        return _obj


