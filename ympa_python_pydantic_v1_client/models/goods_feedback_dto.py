# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from ympa_python_pydantic_v1_client.models.goods_feedback_description_dto import GoodsFeedbackDescriptionDTO
from ympa_python_pydantic_v1_client.models.goods_feedback_identifiers_dto import GoodsFeedbackIdentifiersDTO
from ympa_python_pydantic_v1_client.models.goods_feedback_media_dto import GoodsFeedbackMediaDTO
from ympa_python_pydantic_v1_client.models.goods_feedback_statistics_dto import GoodsFeedbackStatisticsDTO

class GoodsFeedbackDTO(BaseModel):
    """
    Отзыв о товаре.  # noqa: E501
    """
    feedback_id: StrictInt = Field(default=..., alias="feedbackId", description="Идентификатор отзыва. ")
    created_at: datetime = Field(default=..., alias="createdAt", description="Дата и время создания отзыва.")
    need_reaction: StrictBool = Field(default=..., alias="needReaction", description="Нужен ли ответ на отзыв.")
    identifiers: GoodsFeedbackIdentifiersDTO = Field(...)
    author: Optional[StrictStr] = Field(default=None, description="Имя автора отзыва.")
    description: Optional[GoodsFeedbackDescriptionDTO] = None
    media: Optional[GoodsFeedbackMediaDTO] = None
    statistics: GoodsFeedbackStatisticsDTO = Field(...)
    __properties = ["feedbackId", "createdAt", "needReaction", "identifiers", "author", "description", "media", "statistics"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GoodsFeedbackDTO:
        """Create an instance of GoodsFeedbackDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of identifiers
        if self.identifiers:
            _dict['identifiers'] = self.identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GoodsFeedbackDTO:
        """Create an instance of GoodsFeedbackDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GoodsFeedbackDTO.parse_obj(obj)

        _obj = GoodsFeedbackDTO.parse_obj({
            "feedback_id": obj.get("feedbackId"),
            "created_at": obj.get("createdAt"),
            "need_reaction": obj.get("needReaction"),
            "identifiers": GoodsFeedbackIdentifiersDTO.from_dict(obj.get("identifiers")) if obj.get("identifiers") is not None else None,
            "author": obj.get("author"),
            "description": GoodsFeedbackDescriptionDTO.from_dict(obj.get("description")) if obj.get("description") is not None else None,
            "media": GoodsFeedbackMediaDTO.from_dict(obj.get("media")) if obj.get("media") is not None else None,
            "statistics": GoodsFeedbackStatisticsDTO.from_dict(obj.get("statistics")) if obj.get("statistics") is not None else None
        })
        return _obj


