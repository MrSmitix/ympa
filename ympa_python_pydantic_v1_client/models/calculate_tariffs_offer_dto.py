# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, confloat, conint

class CalculateTariffsOfferDTO(BaseModel):
    """
    Параметры товара, для которого нужно рассчитать стоимость услуг.  # noqa: E501
    """
    category_id: conint(strict=True, gt=0) = Field(default=..., alias="categoryId", description="Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). ")
    price: Union[confloat(gt=0, strict=True), conint(gt=0, strict=True)] = Field(default=..., description="Цена на товар в рублях.")
    length: Union[confloat(gt=0, strict=True), conint(gt=0, strict=True)] = Field(default=..., description="Длина товара в сантиметрах.")
    width: Union[confloat(gt=0, strict=True), conint(gt=0, strict=True)] = Field(default=..., description="Ширина товара в сантиметрах.")
    height: Union[confloat(gt=0, strict=True), conint(gt=0, strict=True)] = Field(default=..., description="Высота товара в сантиметрах.")
    weight: Union[confloat(gt=0, strict=True), conint(gt=0, strict=True)] = Field(default=..., description="Вес товара в килограммах.")
    quantity: Optional[conint(strict=True, ge=1)] = Field(default=1, description="Квант продажи — количество единиц товара в одном товарном предложении.")
    __properties = ["categoryId", "price", "length", "width", "height", "weight", "quantity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CalculateTariffsOfferDTO:
        """Create an instance of CalculateTariffsOfferDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CalculateTariffsOfferDTO:
        """Create an instance of CalculateTariffsOfferDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CalculateTariffsOfferDTO.parse_obj(obj)

        _obj = CalculateTariffsOfferDTO.parse_obj({
            "category_id": obj.get("categoryId"),
            "price": obj.get("price"),
            "length": obj.get("length"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "weight": obj.get("weight"),
            "quantity": obj.get("quantity") if obj.get("quantity") is not None else 1
        })
        return _obj


