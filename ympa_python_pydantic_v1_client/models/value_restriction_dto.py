# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from ympa_python_pydantic_v1_client.models.option_values_limited_dto import OptionValuesLimitedDTO

class ValueRestrictionDTO(BaseModel):
    """
    Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: `S`, `M`, `L`, `44`, `46`, `48`, `42/164`, `46/176`, `44S`.  Если ограничивающая характеристика **размерная сетка** принимает значение `RU`, список возможных значений размера сокращается до `44`, `46`, `48`.   # noqa: E501
    """
    limiting_parameter_id: StrictInt = Field(default=..., alias="limitingParameterId", description="Идентификатор ограничивающей характеристики.")
    limited_values: conlist(OptionValuesLimitedDTO) = Field(default=..., alias="limitedValues", description="Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.")
    __properties = ["limitingParameterId", "limitedValues"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValueRestrictionDTO:
        """Create an instance of ValueRestrictionDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in limited_values (list)
        _items = []
        if self.limited_values:
            for _item in self.limited_values:
                if _item:
                    _items.append(_item.to_dict())
            _dict['limitedValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValueRestrictionDTO:
        """Create an instance of ValueRestrictionDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValueRestrictionDTO.parse_obj(obj)

        _obj = ValueRestrictionDTO.parse_obj({
            "limiting_parameter_id": obj.get("limitingParameterId"),
            "limited_values": [OptionValuesLimitedDTO.from_dict(_item) for _item in obj.get("limitedValues")] if obj.get("limitedValues") is not None else None
        })
        return _obj


