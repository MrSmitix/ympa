# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ParameterValueDTO(BaseModel):
    """
    Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым.   # noqa: E501
    """
    parameter_id: StrictInt = Field(default=..., alias="parameterId", description="Идентификатор характеристики.")
    unit_id: Optional[StrictInt] = Field(default=None, alias="unitId", description="Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.")
    value_id: Optional[StrictInt] = Field(default=None, alias="valueId", description="Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`. ")
    value: Optional[StrictStr] = Field(default=None, description="Значение.")
    __properties = ["parameterId", "unitId", "valueId", "value"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParameterValueDTO:
        """Create an instance of ParameterValueDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParameterValueDTO:
        """Create an instance of ParameterValueDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParameterValueDTO.parse_obj(obj)

        _obj = ParameterValueDTO.parse_obj({
            "parameter_id": obj.get("parameterId"),
            "unit_id": obj.get("unitId"),
            "value_id": obj.get("valueId"),
            "value": obj.get("value")
        })
        return _obj


