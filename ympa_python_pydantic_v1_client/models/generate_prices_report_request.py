# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist

class GeneratePricesReportRequest(BaseModel):
    """
    Данные, необходимые для генерации отчета.  # noqa: E501
    """
    business_id: Optional[StrictInt] = Field(default=None, alias="businessId", description="Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан `campaignId`. ")
    campaign_id: Optional[StrictInt] = Field(default=None, alias="campaignId", description="Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать `businessId` не нужно. ")
    category_ids: Optional[conlist(StrictInt)] = Field(default=None, alias="categoryIds", description="Фильтр по категориям на Маркете.")
    creation_date_from: Optional[date] = Field(default=None, alias="creationDateFrom", description="Фильтр по времени появления предложения — начало периода.  Формат даты: `ДД-ММ-ГГГГ`. ")
    creation_date_to: Optional[date] = Field(default=None, alias="creationDateTo", description="Фильтр по времени появления предложения — окончание периода.  Формат даты: `ДД-ММ-ГГГГ`. ")
    __properties = ["businessId", "campaignId", "categoryIds", "creationDateFrom", "creationDateTo"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeneratePricesReportRequest:
        """Create an instance of GeneratePricesReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if category_ids (nullable) is None
        # and __fields_set__ contains the field
        if self.category_ids is None and "category_ids" in self.__fields_set__:
            _dict['categoryIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeneratePricesReportRequest:
        """Create an instance of GeneratePricesReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeneratePricesReportRequest.parse_obj(obj)

        _obj = GeneratePricesReportRequest.parse_obj({
            "business_id": obj.get("businessId"),
            "campaign_id": obj.get("campaignId"),
            "category_ids": obj.get("categoryIds"),
            "creation_date_from": obj.get("creationDateFrom"),
            "creation_date_to": obj.get("creationDateTo")
        })
        return _obj


