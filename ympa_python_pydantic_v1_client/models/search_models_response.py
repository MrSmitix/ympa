# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from ympa_python_pydantic_v1_client.models.currency_type import CurrencyType
from ympa_python_pydantic_v1_client.models.flipping_pager_dto import FlippingPagerDTO
from ympa_python_pydantic_v1_client.models.model_dto import ModelDTO

class SearchModelsResponse(BaseModel):
    """
    SearchModelsResponse
    """
    models: conlist(ModelDTO) = Field(default=..., description="Список моделей товаров.")
    currency: Optional[CurrencyType] = None
    region_id: Optional[StrictInt] = Field(default=None, alias="regionId", description="Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). ")
    pager: Optional[FlippingPagerDTO] = None
    __properties = ["models", "currency", "regionId", "pager"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchModelsResponse:
        """Create an instance of SearchModelsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in models (list)
        _items = []
        if self.models:
            for _item in self.models:
                if _item:
                    _items.append(_item.to_dict())
            _dict['models'] = _items
        # override the default output from pydantic by calling `to_dict()` of pager
        if self.pager:
            _dict['pager'] = self.pager.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchModelsResponse:
        """Create an instance of SearchModelsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchModelsResponse.parse_obj(obj)

        _obj = SearchModelsResponse.parse_obj({
            "models": [ModelDTO.from_dict(_item) for _item in obj.get("models")] if obj.get("models") is not None else None,
            "currency": obj.get("currency"),
            "region_id": obj.get("regionId"),
            "pager": FlippingPagerDTO.from_dict(obj.get("pager")) if obj.get("pager") is not None else None
        })
        return _obj


