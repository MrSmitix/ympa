# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class FlippingPagerDTO(BaseModel):
    """
    Модель для пагинации.  # noqa: E501
    """
    total: Optional[StrictInt] = Field(default=None, description="Сколько всего найдено элементов.")
    var_from: Optional[StrictInt] = Field(default=None, alias="from", description="Начальный номер найденного элемента на странице.")
    to: Optional[StrictInt] = Field(default=None, description="Конечный номер найденного элемента на странице.")
    current_page: Optional[StrictInt] = Field(default=None, alias="currentPage", description="Текущая страница.")
    pages_count: Optional[StrictInt] = Field(default=None, alias="pagesCount", description="Общее количество страниц.")
    page_size: Optional[StrictInt] = Field(default=None, alias="pageSize", description="Размер страницы.")
    __properties = ["total", "from", "to", "currentPage", "pagesCount", "pageSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FlippingPagerDTO:
        """Create an instance of FlippingPagerDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FlippingPagerDTO:
        """Create an instance of FlippingPagerDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FlippingPagerDTO.parse_obj(obj)

        _obj = FlippingPagerDTO.parse_obj({
            "total": obj.get("total"),
            "var_from": obj.get("from"),
            "to": obj.get("to"),
            "current_page": obj.get("currentPage"),
            "pages_count": obj.get("pagesCount"),
            "page_size": obj.get("pageSize")
        })
        return _obj


