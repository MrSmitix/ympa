# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr
from ympa_python_pydantic_v1_client.models.outlet_address_dto import OutletAddressDTO
from ympa_python_pydantic_v1_client.models.outlet_delivery_rule_dto import OutletDeliveryRuleDTO
from ympa_python_pydantic_v1_client.models.outlet_type import OutletType
from ympa_python_pydantic_v1_client.models.outlet_visibility_type import OutletVisibilityType
from ympa_python_pydantic_v1_client.models.outlet_working_schedule_dto import OutletWorkingScheduleDTO

class ChangeOutletRequest(BaseModel):
    """
    ChangeOutletRequest
    """
    name: StrictStr = Field(default=..., description="Название точки продаж. ")
    type: OutletType = Field(...)
    coords: Optional[StrictStr] = Field(default=None, description="Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. ")
    is_main: Optional[StrictBool] = Field(default=None, alias="isMain", description="Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. ")
    shop_outlet_code: Optional[StrictStr] = Field(default=None, alias="shopOutletCode", description="Идентификатор точки продаж, присвоенный магазином.")
    visibility: Optional[OutletVisibilityType] = None
    address: OutletAddressDTO = Field(...)
    phones: conlist(constr(strict=True, min_length=1), min_items=1) = Field(default=..., description="Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. ")
    working_schedule: OutletWorkingScheduleDTO = Field(default=..., alias="workingSchedule")
    delivery_rules: Optional[conlist(OutletDeliveryRuleDTO)] = Field(default=None, alias="deliveryRules", description="Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. ")
    storage_period: Optional[StrictInt] = Field(default=None, alias="storagePeriod", description="Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.")
    __properties = ["name", "type", "coords", "isMain", "shopOutletCode", "visibility", "address", "phones", "workingSchedule", "deliveryRules", "storagePeriod"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChangeOutletRequest:
        """Create an instance of ChangeOutletRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of working_schedule
        if self.working_schedule:
            _dict['workingSchedule'] = self.working_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in delivery_rules (list)
        _items = []
        if self.delivery_rules:
            for _item in self.delivery_rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['deliveryRules'] = _items
        # set to None if delivery_rules (nullable) is None
        # and __fields_set__ contains the field
        if self.delivery_rules is None and "delivery_rules" in self.__fields_set__:
            _dict['deliveryRules'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChangeOutletRequest:
        """Create an instance of ChangeOutletRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChangeOutletRequest.parse_obj(obj)

        _obj = ChangeOutletRequest.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "coords": obj.get("coords"),
            "is_main": obj.get("isMain"),
            "shop_outlet_code": obj.get("shopOutletCode"),
            "visibility": obj.get("visibility"),
            "address": OutletAddressDTO.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "phones": obj.get("phones"),
            "working_schedule": OutletWorkingScheduleDTO.from_dict(obj.get("workingSchedule")) if obj.get("workingSchedule") is not None else None,
            "delivery_rules": [OutletDeliveryRuleDTO.from_dict(_item) for _item in obj.get("deliveryRules")] if obj.get("deliveryRules") is not None else None,
            "storage_period": obj.get("storagePeriod")
        })
        return _obj


