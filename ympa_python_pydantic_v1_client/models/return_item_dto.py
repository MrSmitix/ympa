# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist, constr, validator
from ympa_python_pydantic_v1_client.models.return_decision_dto import ReturnDecisionDTO
from ympa_python_pydantic_v1_client.models.return_instance_dto import ReturnInstanceDTO
from ympa_python_pydantic_v1_client.models.track_dto import TrackDTO

class ReturnItemDTO(BaseModel):
    """
    Список товаров в возврате.  # noqa: E501
    """
    market_sku: Optional[StrictInt] = Field(default=None, alias="marketSku", description="SKU на Маркете.")
    shop_sku: constr(strict=True, max_length=255, min_length=1) = Field(default=..., alias="shopSku", description="Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
    count: StrictInt = Field(default=..., description="Количество единиц товара.")
    decisions: Optional[conlist(ReturnDecisionDTO)] = Field(default=None, description="Список решений по возврату.")
    instances: Optional[conlist(ReturnInstanceDTO)] = Field(default=None, description="Список логистических позиций возврата.")
    tracks: Optional[conlist(TrackDTO)] = Field(default=None, description="Список трек-кодов для почтовых отправлений.")
    __properties = ["marketSku", "shopSku", "count", "decisions", "instances", "tracks"]

    @validator('shop_sku')
    def shop_sku_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$", value):
            raise ValueError(r"must validate the regular expression /^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReturnItemDTO:
        """Create an instance of ReturnItemDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in decisions (list)
        _items = []
        if self.decisions:
            for _item in self.decisions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['decisions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item in self.instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tracks (list)
        _items = []
        if self.tracks:
            for _item in self.tracks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tracks'] = _items
        # set to None if decisions (nullable) is None
        # and __fields_set__ contains the field
        if self.decisions is None and "decisions" in self.__fields_set__:
            _dict['decisions'] = None

        # set to None if instances (nullable) is None
        # and __fields_set__ contains the field
        if self.instances is None and "instances" in self.__fields_set__:
            _dict['instances'] = None

        # set to None if tracks (nullable) is None
        # and __fields_set__ contains the field
        if self.tracks is None and "tracks" in self.__fields_set__:
            _dict['tracks'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReturnItemDTO:
        """Create an instance of ReturnItemDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReturnItemDTO.parse_obj(obj)

        _obj = ReturnItemDTO.parse_obj({
            "market_sku": obj.get("marketSku"),
            "shop_sku": obj.get("shopSku"),
            "count": obj.get("count"),
            "decisions": [ReturnDecisionDTO.from_dict(_item) for _item in obj.get("decisions")] if obj.get("decisions") is not None else None,
            "instances": [ReturnInstanceDTO.from_dict(_item) for _item in obj.get("instances")] if obj.get("instances") is not None else None,
            "tracks": [TrackDTO.from_dict(_item) for _item in obj.get("tracks")] if obj.get("tracks") is not None else None
        })
        return _obj


