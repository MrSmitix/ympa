# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class FeedParameterDTO(BaseModel):
    """
    Параметр прайс-листа.  # noqa: E501
    """
    deleted: Optional[StrictBool] = Field(default=None, description="Удалить ли значение параметра.  Возможное значение: * `true` — удалить значение параметра.  Используется вместе с параметром `name`. ")
    name: StrictStr = Field(default=..., description="Название параметра.  Возможное значение: - `reparseIntervalMinutes` — период скачивания прайс-листа. Маркет будет скачивать прайс-лист через количество минут, указанное в параметре `value`. Например, при `value=1440`, Маркет будет скачивать прайс-лист один раз в сутки.  {% note alert %}  Несмотря на установленное значение, Маркет скачает прайс-лист один раз в сутки.  {% endnote %}  Обязательный параметр. ")
    values: Optional[conlist(StrictInt)] = Field(default=None, description="Значения параметра.  Используется вместе с параметром `name`. ")
    __properties = ["deleted", "name", "values"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FeedParameterDTO:
        """Create an instance of FeedParameterDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if values (nullable) is None
        # and __fields_set__ contains the field
        if self.values is None and "values" in self.__fields_set__:
            _dict['values'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FeedParameterDTO:
        """Create an instance of FeedParameterDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FeedParameterDTO.parse_obj(obj)

        _obj = FeedParameterDTO.parse_obj({
            "deleted": obj.get("deleted"),
            "name": obj.get("name"),
            "values": obj.get("values")
        })
        return _obj


