<?php
/**
 * ReportsApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * ReportsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\ReportsApiInterface
 */
class ReportsApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for generateBoostConsolidatedReport
     *
     * Отчет по бусту продаж.
     *
     */
    public function testGenerateBoostConsolidatedReport(): void
    {
        $client = self::$client;

        $path = '/reports/boost-consolidated/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateBoostConsolidatedReport not implemented');
    }

    /**
     * Test case for generateCompetitorsPositionReport
     *
     * Отчет «Конкурентная позиция».
     *
     */
    public function testGenerateCompetitorsPositionReport(): void
    {
        $client = self::$client;

        $path = '/reports/competitors-position/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateCompetitorsPositionReport not implemented');
    }

    /**
     * Test case for generateGoodsFeedbackReport
     *
     * Отчет по отзывам о товарах.
     *
     */
    public function testGenerateGoodsFeedbackReport(): void
    {
        $client = self::$client;

        $path = '/reports/goods-feedback/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateGoodsFeedbackReport not implemented');
    }

    /**
     * Test case for generateGoodsMovementReport
     *
     * Отчет по движению товаров.
     *
     */
    public function testGenerateGoodsMovementReport(): void
    {
        $client = self::$client;

        $path = '/reports/goods-movement/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateGoodsMovementReport not implemented');
    }

    /**
     * Test case for generateGoodsRealizationReport
     *
     * Отчет по реализации.
     *
     */
    public function testGenerateGoodsRealizationReport(): void
    {
        $client = self::$client;

        $path = '/reports/goods-realization/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateGoodsRealizationReport not implemented');
    }

    /**
     * Test case for generateGoodsTurnoverReport
     *
     * Отчет по оборачиваемости.
     *
     */
    public function testGenerateGoodsTurnoverReport(): void
    {
        $client = self::$client;

        $path = '/reports/goods-turnover/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateGoodsTurnoverReport not implemented');
    }

    /**
     * Test case for generateMassOrderLabelsReport
     *
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах.
     *
     */
    public function testGenerateMassOrderLabelsReport(): void
    {
        $client = self::$client;

        $path = '/reports/documents/labels/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateMassOrderLabelsReport not implemented');
    }

    /**
     * Test case for generatePricesReport
     *
     * Отчет «Цены на рынке».
     *
     */
    public function testGeneratePricesReport(): void
    {
        $client = self::$client;

        $path = '/reports/prices/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generatePricesReport not implemented');
    }

    /**
     * Test case for generateShelfsStatisticsReport
     *
     * Отчет по полкам.
     *
     */
    public function testGenerateShelfsStatisticsReport(): void
    {
        $client = self::$client;

        $path = '/reports/shelf-statistics/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateShelfsStatisticsReport not implemented');
    }

    /**
     * Test case for generateShipmentListDocumentReport
     *
     * Получение листа сборки.
     *
     */
    public function testGenerateShipmentListDocumentReport(): void
    {
        $client = self::$client;

        $path = '/reports/documents/shipment-list/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateShipmentListDocumentReport not implemented');
    }

    /**
     * Test case for generateShowsSalesReport
     *
     * Отчет «Аналитика продаж».
     *
     */
    public function testGenerateShowsSalesReport(): void
    {
        $client = self::$client;

        $path = '/reports/shows-sales/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateShowsSalesReport not implemented');
    }

    /**
     * Test case for generateStocksOnWarehousesReport
     *
     * Отчет по остаткам на складах.
     *
     */
    public function testGenerateStocksOnWarehousesReport(): void
    {
        $client = self::$client;

        $path = '/reports/stocks-on-warehouses/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateStocksOnWarehousesReport not implemented');
    }

    /**
     * Test case for generateUnitedMarketplaceServicesReport
     *
     * Отчет по стоимости услуг.
     *
     */
    public function testGenerateUnitedMarketplaceServicesReport(): void
    {
        $client = self::$client;

        $path = '/reports/united-marketplace-services/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateUnitedMarketplaceServicesReport not implemented');
    }

    /**
     * Test case for generateUnitedNettingReport
     *
     * Отчет по платежам.
     *
     */
    public function testGenerateUnitedNettingReport(): void
    {
        $client = self::$client;

        $path = '/reports/united-netting/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateUnitedNettingReport not implemented');
    }

    /**
     * Test case for generateUnitedOrdersReport
     *
     * Отчет по заказам.
     *
     */
    public function testGenerateUnitedOrdersReport(): void
    {
        $client = self::$client;

        $path = '/reports/united-orders/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateUnitedOrdersReport not implemented');
    }

    /**
     * Test case for getReportInfo
     *
     * Получение заданного отчета.
     *
     */
    public function testGetReportInfo(): void
    {
        $client = self::$client;

        $path = '/reports/info/{reportId}';
        $pattern = '{reportId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReportInfo not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
