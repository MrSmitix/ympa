<?php
/**
 * DbsApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * DbsApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\DbsApiInterface
 */
class DbsApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for acceptOrderCancellation
     *
     * Отмена заказа покупателем.
     *
     */
    public function testAcceptOrderCancellation(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/cancellation/accept';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for acceptOrderCancellation not implemented');
    }

    /**
     * Test case for addHiddenOffers
     *
     * Скрытие товаров и настройки скрытия.
     *
     */
    public function testAddHiddenOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/hidden-offers';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for addHiddenOffers not implemented');
    }

    /**
     * Test case for addOffersToArchive
     *
     * Добавление товаров в архив.
     *
     */
    public function testAddOffersToArchive(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-mappings/archive';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for addOffersToArchive not implemented');
    }

    /**
     * Test case for calculateTariffs
     *
     * Калькулятор стоимости услуг.
     *
     */
    public function testCalculateTariffs(): void
    {
        $client = self::$client;

        $path = '/tariffs/calculate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for calculateTariffs not implemented');
    }

    /**
     * Test case for confirmBusinessPrices
     *
     * Удаление товара из карантина по цене в кабинете.
     *
     */
    public function testConfirmBusinessPrices(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/price-quarantine/confirm';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for confirmBusinessPrices not implemented');
    }

    /**
     * Test case for confirmCampaignPrices
     *
     * Удаление товара из карантина по цене в магазине.
     *
     */
    public function testConfirmCampaignPrices(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/price-quarantine/confirm';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for confirmCampaignPrices not implemented');
    }

    /**
     * Test case for createChat
     *
     * Создание нового чата с покупателем.
     *
     */
    public function testCreateChat(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/chats/new';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createChat not implemented');
    }

    /**
     * Test case for createOutlet
     *
     * Создание точки продаж.
     *
     */
    public function testCreateOutlet(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for createOutlet not implemented');
    }

    /**
     * Test case for deleteCampaignOffers
     *
     * Удаление товаров из ассортимента магазина.
     *
     */
    public function testDeleteCampaignOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers/delete';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deleteCampaignOffers not implemented');
    }

    /**
     * Test case for deleteGoodsFeedbackComment
     *
     * Удаление комментария к отзыву.
     *
     */
    public function testDeleteGoodsFeedbackComment(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/goods-feedback/comments/delete';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deleteGoodsFeedbackComment not implemented');
    }

    /**
     * Test case for deleteHiddenOffers
     *
     * Возобновление показа товаров.
     *
     */
    public function testDeleteHiddenOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/hidden-offers/delete';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deleteHiddenOffers not implemented');
    }

    /**
     * Test case for deleteOffers
     *
     * Удаление товаров из каталога.
     *
     */
    public function testDeleteOffers(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-mappings/delete';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deleteOffers not implemented');
    }

    /**
     * Test case for deleteOffersFromArchive
     *
     * Удаление товаров из архива.
     *
     */
    public function testDeleteOffersFromArchive(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-mappings/unarchive';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deleteOffersFromArchive not implemented');
    }

    /**
     * Test case for deleteOutlet
     *
     * Удаление точки продаж.
     *
     */
    public function testDeleteOutlet(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets/{outletId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{outletId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteOutlet not implemented');
    }

    /**
     * Test case for deleteOutletLicenses
     *
     * Удаление лицензий для точек продаж.
     *
     */
    public function testDeleteOutletLicenses(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets/licenses';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deleteOutletLicenses not implemented');
    }

    /**
     * Test case for deletePromoOffers
     *
     * Удаление товаров из акции.
     *
     */
    public function testDeletePromoOffers(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/promos/offers/delete';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for deletePromoOffers not implemented');
    }

    /**
     * Test case for generateBoostConsolidatedReport
     *
     * Отчет по бусту продаж.
     *
     */
    public function testGenerateBoostConsolidatedReport(): void
    {
        $client = self::$client;

        $path = '/reports/boost-consolidated/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateBoostConsolidatedReport not implemented');
    }

    /**
     * Test case for generateCompetitorsPositionReport
     *
     * Отчет «Конкурентная позиция».
     *
     */
    public function testGenerateCompetitorsPositionReport(): void
    {
        $client = self::$client;

        $path = '/reports/competitors-position/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateCompetitorsPositionReport not implemented');
    }

    /**
     * Test case for generateGoodsFeedbackReport
     *
     * Отчет по отзывам о товарах.
     *
     */
    public function testGenerateGoodsFeedbackReport(): void
    {
        $client = self::$client;

        $path = '/reports/goods-feedback/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateGoodsFeedbackReport not implemented');
    }

    /**
     * Test case for generateMassOrderLabelsReport
     *
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах.
     *
     */
    public function testGenerateMassOrderLabelsReport(): void
    {
        $client = self::$client;

        $path = '/reports/documents/labels/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateMassOrderLabelsReport not implemented');
    }

    /**
     * Test case for generateOrderLabel
     *
     * Готовый ярлык‑наклейка для коробки в заказе.
     *
     */
    public function testGenerateOrderLabel(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{shipmentId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{boxId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for generateOrderLabel not implemented');
    }

    /**
     * Test case for generateOrderLabels
     *
     * Готовые ярлыки‑наклейки на все коробки в одном заказе.
     *
     */
    public function testGenerateOrderLabels(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/labels';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for generateOrderLabels not implemented');
    }

    /**
     * Test case for generatePricesReport
     *
     * Отчет «Цены на рынке».
     *
     */
    public function testGeneratePricesReport(): void
    {
        $client = self::$client;

        $path = '/reports/prices/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generatePricesReport not implemented');
    }

    /**
     * Test case for generateShelfsStatisticsReport
     *
     * Отчет по полкам.
     *
     */
    public function testGenerateShelfsStatisticsReport(): void
    {
        $client = self::$client;

        $path = '/reports/shelf-statistics/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateShelfsStatisticsReport not implemented');
    }

    /**
     * Test case for generateShowsSalesReport
     *
     * Отчет «Аналитика продаж».
     *
     */
    public function testGenerateShowsSalesReport(): void
    {
        $client = self::$client;

        $path = '/reports/shows-sales/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateShowsSalesReport not implemented');
    }

    /**
     * Test case for generateStocksOnWarehousesReport
     *
     * Отчет по остаткам на складах.
     *
     */
    public function testGenerateStocksOnWarehousesReport(): void
    {
        $client = self::$client;

        $path = '/reports/stocks-on-warehouses/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateStocksOnWarehousesReport not implemented');
    }

    /**
     * Test case for generateUnitedMarketplaceServicesReport
     *
     * Отчет по стоимости услуг.
     *
     */
    public function testGenerateUnitedMarketplaceServicesReport(): void
    {
        $client = self::$client;

        $path = '/reports/united-marketplace-services/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateUnitedMarketplaceServicesReport not implemented');
    }

    /**
     * Test case for generateUnitedNettingReport
     *
     * Отчет по платежам.
     *
     */
    public function testGenerateUnitedNettingReport(): void
    {
        $client = self::$client;

        $path = '/reports/united-netting/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateUnitedNettingReport not implemented');
    }

    /**
     * Test case for generateUnitedOrdersReport
     *
     * Отчет по заказам.
     *
     */
    public function testGenerateUnitedOrdersReport(): void
    {
        $client = self::$client;

        $path = '/reports/united-orders/generate';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for generateUnitedOrdersReport not implemented');
    }

    /**
     * Test case for getAllOffers
     *
     * Все предложения магазина.
     *
     */
    public function testGetAllOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers/all';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAllOffers not implemented');
    }

    /**
     * Test case for getBidsInfoForBusiness
     *
     * Информация об установленных ставках.
     *
     */
    public function testGetBidsInfoForBusiness(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/bids/info';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getBidsInfoForBusiness not implemented');
    }

    /**
     * Test case for getBidsRecommendations
     *
     * Рекомендованные ставки для заданных товаров.
     *
     */
    public function testGetBidsRecommendations(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/bids/recommendations';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getBidsRecommendations not implemented');
    }

    /**
     * Test case for getBusinessQuarantineOffers
     *
     * Список товаров, находящихся в карантине по цене в кабинете.
     *
     */
    public function testGetBusinessQuarantineOffers(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/price-quarantine';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getBusinessQuarantineOffers not implemented');
    }

    /**
     * Test case for getBusinessSettings
     *
     * Настройки кабинета.
     *
     */
    public function testGetBusinessSettings(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/settings';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for getBusinessSettings not implemented');
    }

    /**
     * Test case for getCampaign
     *
     * Информация о магазине.
     *
     */
    public function testGetCampaign(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCampaign not implemented');
    }

    /**
     * Test case for getCampaignLogins
     *
     * Логины, связанные с магазином.
     *
     */
    public function testGetCampaignLogins(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/logins';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCampaignLogins not implemented');
    }

    /**
     * Test case for getCampaignOffers
     *
     * Информация о товарах, которые размещены в заданном магазине.
     *
     */
    public function testGetCampaignOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getCampaignOffers not implemented');
    }

    /**
     * Test case for getCampaignQuarantineOffers
     *
     * Список товаров, находящихся в карантине по цене в магазине.
     *
     */
    public function testGetCampaignQuarantineOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/price-quarantine';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getCampaignQuarantineOffers not implemented');
    }

    /**
     * Test case for getCampaignRegion
     *
     * Регион магазина.
     *
     */
    public function testGetCampaignRegion(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/region';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCampaignRegion not implemented');
    }

    /**
     * Test case for getCampaignSettings
     *
     * Настройки магазина.
     *
     */
    public function testGetCampaignSettings(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/settings';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCampaignSettings not implemented');
    }

    /**
     * Test case for getCampaigns
     *
     * Список магазинов пользователя.
     *
     */
    public function testGetCampaigns(): void
    {
        $client = self::$client;

        $path = '/campaigns';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCampaigns not implemented');
    }

    /**
     * Test case for getCampaignsByLogin
     *
     * Магазины, доступные логину.
     *
     */
    public function testGetCampaignsByLogin(): void
    {
        $client = self::$client;

        $path = '/campaigns/by_login/{login}';
        $pattern = '{login}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getCampaignsByLogin not implemented');
    }

    /**
     * Test case for getCategoriesMaxSaleQuantum
     *
     * Лимит на установку кванта продажи и минимального количества товаров в заказе.
     *
     */
    public function testGetCategoriesMaxSaleQuantum(): void
    {
        $client = self::$client;

        $path = '/categories/max-sale-quantum';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getCategoriesMaxSaleQuantum not implemented');
    }

    /**
     * Test case for getCategoriesTree
     *
     * Дерево категорий.
     *
     */
    public function testGetCategoriesTree(): void
    {
        $client = self::$client;

        $path = '/categories/tree';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getCategoriesTree not implemented');
    }

    /**
     * Test case for getCategoryContentParameters
     *
     * Списки характеристик товаров по категориям.
     *
     */
    public function testGetCategoryContentParameters(): void
    {
        $client = self::$client;

        $path = '/category/{categoryId}/parameters';
        $pattern = '{categoryId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for getCategoryContentParameters not implemented');
    }

    /**
     * Test case for getChatHistory
     *
     * Получение истории сообщений в чате.
     *
     */
    public function testGetChatHistory(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/chats/history';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getChatHistory not implemented');
    }

    /**
     * Test case for getChats
     *
     * Получение доступных чатов.
     *
     */
    public function testGetChats(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/chats';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getChats not implemented');
    }

    /**
     * Test case for getDeliveryServices
     *
     * Справочник служб доставки.
     *
     */
    public function testGetDeliveryServices(): void
    {
        $client = self::$client;

        $path = '/delivery/services';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getDeliveryServices not implemented');
    }

    /**
     * Test case for getFeed
     *
     * Информация о прайс-листе.
     *
     */
    public function testGetFeed(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/feeds/{feedId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{feedId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFeed not implemented');
    }

    /**
     * Test case for getFeedIndexLogs
     *
     * Отчет по индексации прайс-листа.
     *
     */
    public function testGetFeedIndexLogs(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/feeds/{feedId}/index-logs';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{feedId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFeedIndexLogs not implemented');
    }

    /**
     * Test case for getFeedbackAndCommentUpdates
     *
     * Новые и обновленные отзывы о магазине.
     *
     */
    public function testGetFeedbackAndCommentUpdates(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/feedback/updates';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFeedbackAndCommentUpdates not implemented');
    }

    /**
     * Test case for getFeeds
     *
     * Список прайс-листов магазина.
     *
     */
    public function testGetFeeds(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/feeds';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getFeeds not implemented');
    }

    /**
     * Test case for getGoodsFeedbackComments
     *
     * Получение комментариев к отзыву.
     *
     */
    public function testGetGoodsFeedbackComments(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/goods-feedback/comments';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getGoodsFeedbackComments not implemented');
    }

    /**
     * Test case for getGoodsFeedbacks
     *
     * Получение отзывов о товарах продавца.
     *
     */
    public function testGetGoodsFeedbacks(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/goods-feedback';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getGoodsFeedbacks not implemented');
    }

    /**
     * Test case for getGoodsStats
     *
     * Отчет по товарам.
     *
     */
    public function testGetGoodsStats(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/stats/skus';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getGoodsStats not implemented');
    }

    /**
     * Test case for getHiddenOffers
     *
     * Информация о скрытых вами товарах.
     *
     */
    public function testGetHiddenOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/hidden-offers';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getHiddenOffers not implemented');
    }

    /**
     * Test case for getModel
     *
     * Информация об одной модели.
     *
     */
    public function testGetModel(): void
    {
        $client = self::$client;

        $path = '/models/{modelId}';
        $pattern = '{modelId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModel not implemented');
    }

    /**
     * Test case for getModelOffers
     *
     * Список предложений для одной модели.
     *
     */
    public function testGetModelOffers(): void
    {
        $client = self::$client;

        $path = '/models/{modelId}/offers';
        $pattern = '{modelId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getModelOffers not implemented');
    }

    /**
     * Test case for getModels
     *
     * Информация о нескольких моделях.
     *
     */
    public function testGetModels(): void
    {
        $client = self::$client;

        $path = '/models';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getModels not implemented');
    }

    /**
     * Test case for getModelsOffers
     *
     * Список предложений для нескольких моделей.
     *
     */
    public function testGetModelsOffers(): void
    {
        $client = self::$client;

        $path = '/models/offers';

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getModelsOffers not implemented');
    }

    /**
     * Test case for getOfferCardsContentStatus
     *
     * Получение информации о заполненности карточек магазина.
     *
     */
    public function testGetOfferCardsContentStatus(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-cards';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getOfferCardsContentStatus not implemented');
    }

    /**
     * Test case for getOfferMappingEntries
     *
     * Список товаров в каталоге.
     *
     */
    public function testGetOfferMappingEntries(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-mapping-entries';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOfferMappingEntries not implemented');
    }

    /**
     * Test case for getOfferMappings
     *
     * Информация о товарах в каталоге.
     *
     */
    public function testGetOfferMappings(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-mappings';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getOfferMappings not implemented');
    }

    /**
     * Test case for getOfferRecommendations
     *
     * Рекомендации Маркета, касающиеся цен.
     *
     */
    public function testGetOfferRecommendations(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offers/recommendations';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getOfferRecommendations not implemented');
    }

    /**
     * Test case for getOffers
     *
     * Предложения магазина.
     *
     */
    public function testGetOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOffers not implemented');
    }

    /**
     * Test case for getOrder
     *
     * Информация об одном заказе.
     *
     */
    public function testGetOrder(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOrder not implemented');
    }

    /**
     * Test case for getOrderBusinessBuyerInfo
     *
     * Информация о покупателе — юридическом лице.
     *
     */
    public function testGetOrderBusinessBuyerInfo(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/business-buyer';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for getOrderBusinessBuyerInfo not implemented');
    }

    /**
     * Test case for getOrderBusinessDocumentsInfo
     *
     * Информация о документах.
     *
     */
    public function testGetOrderBusinessDocumentsInfo(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/documents';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for getOrderBusinessDocumentsInfo not implemented');
    }

    /**
     * Test case for getOrderBuyerInfo
     *
     * Информация о покупателе — физическом лице.
     *
     */
    public function testGetOrderBuyerInfo(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/buyer';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOrderBuyerInfo not implemented');
    }

    /**
     * Test case for getOrderLabelsData
     *
     * Данные для самостоятельного изготовления ярлыков.
     *
     */
    public function testGetOrderLabelsData(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/labels/data';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOrderLabelsData not implemented');
    }

    /**
     * Test case for getOrders
     *
     * Информация о нескольких заказах.
     *
     */
    public function testGetOrders(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOrders not implemented');
    }

    /**
     * Test case for getOrdersStats
     *
     * Детальная информация по заказам.
     *
     */
    public function testGetOrdersStats(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/stats/orders';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getOrdersStats not implemented');
    }

    /**
     * Test case for getOutlet
     *
     * Информация об одной точке продаж.
     *
     */
    public function testGetOutlet(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets/{outletId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{outletId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOutlet not implemented');
    }

    /**
     * Test case for getOutletLicenses
     *
     * Информация о лицензиях для точек продаж.
     *
     */
    public function testGetOutletLicenses(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets/licenses';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOutletLicenses not implemented');
    }

    /**
     * Test case for getOutlets
     *
     * Информация о нескольких точках продаж.
     *
     */
    public function testGetOutlets(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOutlets not implemented');
    }

    /**
     * Test case for getPrices
     *
     * Список цен.
     *
     */
    public function testGetPrices(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-prices';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPrices not implemented');
    }

    /**
     * Test case for getPricesByOfferIds
     *
     * Просмотр цен на указанные товары в магазине.
     *
     */
    public function testGetPricesByOfferIds(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-prices';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getPricesByOfferIds not implemented');
    }

    /**
     * Test case for getPromoOffers
     *
     * Получение списка товаров, которые участвуют или могут участвовать в акции.
     *
     */
    public function testGetPromoOffers(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/promos/offers';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getPromoOffers not implemented');
    }

    /**
     * Test case for getPromos
     *
     * Получение списка акций.
     *
     */
    public function testGetPromos(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/promos';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getPromos not implemented');
    }

    /**
     * Test case for getQualityRatingDetails
     *
     * Заказы, которые повлияли на индекс качества.
     *
     */
    public function testGetQualityRatingDetails(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/ratings/quality/details';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for getQualityRatingDetails not implemented');
    }

    /**
     * Test case for getQualityRatings
     *
     * Индекс качества магазинов.
     *
     */
    public function testGetQualityRatings(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/ratings/quality';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getQualityRatings not implemented');
    }

    /**
     * Test case for getReportInfo
     *
     * Получение заданного отчета.
     *
     */
    public function testGetReportInfo(): void
    {
        $client = self::$client;

        $path = '/reports/info/{reportId}';
        $pattern = '{reportId}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReportInfo not implemented');
    }

    /**
     * Test case for getReturn
     *
     * Информация о невыкупе или возврате.
     *
     */
    public function testGetReturn(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{returnId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReturn not implemented');
    }

    /**
     * Test case for getReturnApplication
     *
     * Получение заявления на возврат.
     *
     */
    public function testGetReturnApplication(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{returnId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReturnApplication not implemented');
    }

    /**
     * Test case for getReturnPhoto
     *
     * Получение фотографии возврата.
     *
     */
    public function testGetReturnPhoto(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{returnId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{itemId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{imageHash}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReturnPhoto not implemented');
    }

    /**
     * Test case for getReturns
     *
     * Список невыкупов и возвратов.
     *
     */
    public function testGetReturns(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/returns';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getReturns not implemented');
    }

    /**
     * Test case for getStocks
     *
     * Информация об остатках и оборачиваемости.
     *
     */
    public function testGetStocks(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers/stocks';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getStocks not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappingEntries
     *
     * Рекомендованные карточки для товаров.
     *
     */
    public function testGetSuggestedOfferMappingEntries(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-mapping-entries/suggestions';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getSuggestedOfferMappingEntries not implemented');
    }

    /**
     * Test case for getSuggestedOfferMappings
     *
     * Просмотр карточек на Маркете, которые подходят вашим товарам.
     *
     */
    public function testGetSuggestedOfferMappings(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-mappings/suggestions';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getSuggestedOfferMappings not implemented');
    }

    /**
     * Test case for getSuggestedPrices
     *
     * Цены для продвижения товаров.
     *
     */
    public function testGetSuggestedPrices(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-prices/suggestions';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for getSuggestedPrices not implemented');
    }

    /**
     * Test case for getWarehouses
     *
     * Список складов и групп складов.
     *
     */
    public function testGetWarehouses(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/warehouses';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getWarehouses not implemented');
    }

    /**
     * Test case for provideOrderDigitalCodes
     *
     * Передача ключей цифровых товаров.
     *
     */
    public function testProvideOrderDigitalCodes(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/deliverDigitalGoods';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for provideOrderDigitalCodes not implemented');
    }

    /**
     * Test case for provideOrderItemIdentifiers
     *
     * Передача кодов маркировки единиц товара.
     *
     */
    public function testProvideOrderItemIdentifiers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/identifiers';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for provideOrderItemIdentifiers not implemented');
    }

    /**
     * Test case for putBidsForBusiness
     *
     * Включение буста продаж и установка ставок.
     *
     */
    public function testPutBidsForBusiness(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/bids';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for putBidsForBusiness not implemented');
    }

    /**
     * Test case for putBidsForCampaign
     *
     * Включение буста продаж и установка ставок для магазина.
     *
     */
    public function testPutBidsForCampaign(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/bids';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for putBidsForCampaign not implemented');
    }

    /**
     * Test case for refreshFeed
     *
     * Сообщить, что прайс-лист обновился.
     *
     */
    public function testRefreshFeed(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/feeds/{feedId}/refresh';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{feedId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for refreshFeed not implemented');
    }

    /**
     * Test case for searchModels
     *
     * Поиск модели товара.
     *
     */
    public function testSearchModels(): void
    {
        $client = self::$client;

        $path = '/models';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for searchModels not implemented');
    }

    /**
     * Test case for searchRegionChildren
     *
     * Информация о дочерних регионах.
     *
     */
    public function testSearchRegionChildren(): void
    {
        $client = self::$client;

        $path = '/regions/{regionId}/children';
        $pattern = '{regionId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for searchRegionChildren not implemented');
    }

    /**
     * Test case for searchRegionsById
     *
     * Информация о регионе.
     *
     */
    public function testSearchRegionsById(): void
    {
        $client = self::$client;

        $path = '/regions/{regionId}';
        $pattern = '{regionId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for searchRegionsById not implemented');
    }

    /**
     * Test case for searchRegionsByName
     *
     * Поиск регионов по их имени.
     *
     */
    public function testSearchRegionsByName(): void
    {
        $client = self::$client;

        $path = '/regions';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for searchRegionsByName not implemented');
    }

    /**
     * Test case for sendFileToChat
     *
     * Отправка файла в чат.
     *
     */
    public function testSendFileToChat(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/chats/file/send';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for sendFileToChat not implemented');
    }

    /**
     * Test case for sendMessageToChat
     *
     * Отправка сообщения в чат.
     *
     */
    public function testSendMessageToChat(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/chats/message';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for sendMessageToChat not implemented');
    }

    /**
     * Test case for setFeedParams
     *
     * Изменение параметров прайс-листа.
     *
     */
    public function testSetFeedParams(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/feeds/{feedId}/params';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{feedId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for setFeedParams not implemented');
    }

    /**
     * Test case for setOrderBoxLayout
     *
     * Подготовка заказа.
     *
     */
    public function testSetOrderBoxLayout(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/boxes';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for setOrderBoxLayout not implemented');
    }

    /**
     * Test case for setOrderDeliveryDate
     *
     * Изменение даты доставки заказа.
     *
     */
    public function testSetOrderDeliveryDate(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/date';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for setOrderDeliveryDate not implemented');
    }

    /**
     * Test case for setOrderDeliveryTrackCode
     *
     * Передача трек‑номера посылки.
     *
     */
    public function testSetOrderDeliveryTrackCode(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/track';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for setOrderDeliveryTrackCode not implemented');
    }

    /**
     * Test case for setOrderShipmentBoxes
     *
     * Передача количества грузовых мест в заказе.
     *
     */
    public function testSetOrderShipmentBoxes(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{shipmentId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for setOrderShipmentBoxes not implemented');
    }

    /**
     * Test case for setReturnDecision
     *
     * Принятие или изменение решения по возврату.
     *
     */
    public function testSetReturnDecision(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{returnId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for setReturnDecision not implemented');
    }

    /**
     * Test case for skipGoodsFeedbacksReaction
     *
     * Отказ от ответа на отзывы.
     *
     */
    public function testSkipGoodsFeedbacksReaction(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/goods-feedback/skip-reaction';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for skipGoodsFeedbacksReaction not implemented');
    }

    /**
     * Test case for submitReturnDecision
     *
     * Подтверждение решения по возврату.
     *
     */
    public function testSubmitReturnDecision(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{returnId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for submitReturnDecision not implemented');
    }

    /**
     * Test case for updateBusinessPrices
     *
     * Установка цен на товары во всех магазинах.
     *
     */
    public function testUpdateBusinessPrices(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-prices/updates';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateBusinessPrices not implemented');
    }

    /**
     * Test case for updateCampaignOffers
     *
     * Изменение условий продажи товаров в магазине.
     *
     */
    public function testUpdateCampaignOffers(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers/update';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateCampaignOffers not implemented');
    }

    /**
     * Test case for updateGoodsFeedbackComment
     *
     * Добавление нового или изменение созданного комментария.
     *
     */
    public function testUpdateGoodsFeedbackComment(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/goods-feedback/comments/update';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateGoodsFeedbackComment not implemented');
    }

    /**
     * Test case for updateOfferContent
     *
     * Редактирование категорийных характеристик товара.
     *
     */
    public function testUpdateOfferContent(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-cards/update';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOfferContent not implemented');
    }

    /**
     * Test case for updateOfferMappingEntries
     *
     * Добавление и редактирование товаров в каталоге.
     *
     */
    public function testUpdateOfferMappingEntries(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-mapping-entries/updates';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOfferMappingEntries not implemented');
    }

    /**
     * Test case for updateOfferMappings
     *
     * Добавление товаров в каталог и изменение информации о них.
     *
     */
    public function testUpdateOfferMappings(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/offer-mappings/update';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOfferMappings not implemented');
    }

    /**
     * Test case for updateOrderItems
     *
     * Удаление товара из заказа или уменьшение числа единиц.
     *
     */
    public function testUpdateOrderItems(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/items';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderItems not implemented');
    }

    /**
     * Test case for updateOrderStatus
     *
     * Изменение статуса одного заказа.
     *
     */
    public function testUpdateOrderStatus(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/status';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStatus not implemented');
    }

    /**
     * Test case for updateOrderStatuses
     *
     * Изменение статусов нескольких заказов.
     *
     */
    public function testUpdateOrderStatuses(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/status-update';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStatuses not implemented');
    }

    /**
     * Test case for updateOrderStorageLimit
     *
     * Продление срока хранения заказа.
     *
     */
    public function testUpdateOrderStorageLimit(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{orderId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOrderStorageLimit not implemented');
    }

    /**
     * Test case for updateOutlet
     *
     * Изменение информации о точке продаж.
     *
     */
    public function testUpdateOutlet(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets/{outletId}';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{outletId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOutlet not implemented');
    }

    /**
     * Test case for updateOutletLicenses
     *
     * Создание и изменение лицензий для точек продаж.
     *
     */
    public function testUpdateOutletLicenses(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/outlets/licenses';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateOutletLicenses not implemented');
    }

    /**
     * Test case for updatePrices
     *
     * Установка цен на товары в конкретном магазине.
     *
     */
    public function testUpdatePrices(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offer-prices/updates';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updatePrices not implemented');
    }

    /**
     * Test case for updatePromoOffers
     *
     * Добавление товаров в акцию или изменение их цен.
     *
     */
    public function testUpdatePromoOffers(): void
    {
        $client = self::$client;

        $path = '/businesses/{businessId}/promos/offers/update';
        $pattern = '{businessId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updatePromoOffers not implemented');
    }

    /**
     * Test case for updateStocks
     *
     * Передача информации об остатках.
     *
     */
    public function testUpdateStocks(): void
    {
        $client = self::$client;

        $path = '/campaigns/{campaignId}/offers/stocks';
        $pattern = '{campaignId}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for updateStocks not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
