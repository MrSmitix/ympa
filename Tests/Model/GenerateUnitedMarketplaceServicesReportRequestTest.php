<?php
/**
 * GenerateUnitedMarketplaceServicesReportRequestTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\GenerateUnitedMarketplaceServicesReportRequest;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * GenerateUnitedMarketplaceServicesReportRequestTest Class Doc Comment
 *
 * @category    Class
 * @description Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\GenerateUnitedMarketplaceServicesReportRequest
 */
class GenerateUnitedMarketplaceServicesReportRequestTest extends TestCase
{
    protected GenerateUnitedMarketplaceServicesReportRequest|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(GenerateUnitedMarketplaceServicesReportRequest::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(GenerateUnitedMarketplaceServicesReportRequest::class));
        $this->assertInstanceOf(GenerateUnitedMarketplaceServicesReportRequest::class, $this->object);
    }

    /**
     * Test attribute "businessId"
     *
     * @group unit
     * @small
     */
    public function testPropertyBusinessId(): void
    {
        $this->markTestSkipped('Test for property businessId not implemented');
    }

    /**
     * Test attribute "dateTimeFrom"
     *
     * @group unit
     * @small
     */
    public function testPropertyDateTimeFrom(): void
    {
        $this->markTestSkipped('Test for property dateTimeFrom not implemented');
    }

    /**
     * Test attribute "dateTimeTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyDateTimeTo(): void
    {
        $this->markTestSkipped('Test for property dateTimeTo not implemented');
    }

    /**
     * Test attribute "dateFrom"
     *
     * @group unit
     * @small
     */
    public function testPropertyDateFrom(): void
    {
        $this->markTestSkipped('Test for property dateFrom not implemented');
    }

    /**
     * Test attribute "dateTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyDateTo(): void
    {
        $this->markTestSkipped('Test for property dateTo not implemented');
    }

    /**
     * Test attribute "yearFrom"
     *
     * @group unit
     * @small
     */
    public function testPropertyYearFrom(): void
    {
        $this->markTestSkipped('Test for property yearFrom not implemented');
    }

    /**
     * Test attribute "monthFrom"
     *
     * @group unit
     * @small
     */
    public function testPropertyMonthFrom(): void
    {
        $this->markTestSkipped('Test for property monthFrom not implemented');
    }

    /**
     * Test attribute "yearTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyYearTo(): void
    {
        $this->markTestSkipped('Test for property yearTo not implemented');
    }

    /**
     * Test attribute "monthTo"
     *
     * @group unit
     * @small
     */
    public function testPropertyMonthTo(): void
    {
        $this->markTestSkipped('Test for property monthTo not implemented');
    }

    /**
     * Test attribute "placementPrograms"
     *
     * @group unit
     * @small
     */
    public function testPropertyPlacementPrograms(): void
    {
        $this->markTestSkipped('Test for property placementPrograms not implemented');
    }

    /**
     * Test attribute "inns"
     *
     * @group unit
     * @small
     */
    public function testPropertyInns(): void
    {
        $this->markTestSkipped('Test for property inns not implemented');
    }

    /**
     * Test attribute "campaignIds"
     *
     * @group unit
     * @small
     */
    public function testPropertyCampaignIds(): void
    {
        $this->markTestSkipped('Test for property campaignIds not implemented');
    }
}
