<?php
/**
 * OrderDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\OrderDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OrderDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Заказ.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OrderDTO
 */
class OrderDTOTest extends TestCase
{
    protected OrderDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(OrderDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OrderDTO::class));
        $this->assertInstanceOf(OrderDTO::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "substatus"
     *
     * @group unit
     * @small
     */
    public function testPropertySubstatus(): void
    {
        $this->markTestSkipped('Test for property substatus not implemented');
    }

    /**
     * Test attribute "creationDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreationDate(): void
    {
        $this->markTestSkipped('Test for property creationDate not implemented');
    }

    /**
     * Test attribute "updatedAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyUpdatedAt(): void
    {
        $this->markTestSkipped('Test for property updatedAt not implemented');
    }

    /**
     * Test attribute "currency"
     *
     * @group unit
     * @small
     */
    public function testPropertyCurrency(): void
    {
        $this->markTestSkipped('Test for property currency not implemented');
    }

    /**
     * Test attribute "itemsTotal"
     *
     * @group unit
     * @small
     */
    public function testPropertyItemsTotal(): void
    {
        $this->markTestSkipped('Test for property itemsTotal not implemented');
    }

    /**
     * Test attribute "deliveryTotal"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeliveryTotal(): void
    {
        $this->markTestSkipped('Test for property deliveryTotal not implemented');
    }

    /**
     * Test attribute "buyerItemsTotal"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuyerItemsTotal(): void
    {
        $this->markTestSkipped('Test for property buyerItemsTotal not implemented');
    }

    /**
     * Test attribute "buyerTotal"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuyerTotal(): void
    {
        $this->markTestSkipped('Test for property buyerTotal not implemented');
    }

    /**
     * Test attribute "buyerItemsTotalBeforeDiscount"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuyerItemsTotalBeforeDiscount(): void
    {
        $this->markTestSkipped('Test for property buyerItemsTotalBeforeDiscount not implemented');
    }

    /**
     * Test attribute "buyerTotalBeforeDiscount"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuyerTotalBeforeDiscount(): void
    {
        $this->markTestSkipped('Test for property buyerTotalBeforeDiscount not implemented');
    }

    /**
     * Test attribute "paymentType"
     *
     * @group unit
     * @small
     */
    public function testPropertyPaymentType(): void
    {
        $this->markTestSkipped('Test for property paymentType not implemented');
    }

    /**
     * Test attribute "paymentMethod"
     *
     * @group unit
     * @small
     */
    public function testPropertyPaymentMethod(): void
    {
        $this->markTestSkipped('Test for property paymentMethod not implemented');
    }

    /**
     * Test attribute "fake"
     *
     * @group unit
     * @small
     */
    public function testPropertyFake(): void
    {
        $this->markTestSkipped('Test for property fake not implemented');
    }

    /**
     * Test attribute "items"
     *
     * @group unit
     * @small
     */
    public function testPropertyItems(): void
    {
        $this->markTestSkipped('Test for property items not implemented');
    }

    /**
     * Test attribute "subsidies"
     *
     * @group unit
     * @small
     */
    public function testPropertySubsidies(): void
    {
        $this->markTestSkipped('Test for property subsidies not implemented');
    }

    /**
     * Test attribute "delivery"
     *
     * @group unit
     * @small
     */
    public function testPropertyDelivery(): void
    {
        $this->markTestSkipped('Test for property delivery not implemented');
    }

    /**
     * Test attribute "buyer"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuyer(): void
    {
        $this->markTestSkipped('Test for property buyer not implemented');
    }

    /**
     * Test attribute "notes"
     *
     * @group unit
     * @small
     */
    public function testPropertyNotes(): void
    {
        $this->markTestSkipped('Test for property notes not implemented');
    }

    /**
     * Test attribute "taxSystem"
     *
     * @group unit
     * @small
     */
    public function testPropertyTaxSystem(): void
    {
        $this->markTestSkipped('Test for property taxSystem not implemented');
    }

    /**
     * Test attribute "cancelRequested"
     *
     * @group unit
     * @small
     */
    public function testPropertyCancelRequested(): void
    {
        $this->markTestSkipped('Test for property cancelRequested not implemented');
    }

    /**
     * Test attribute "expiryDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyExpiryDate(): void
    {
        $this->markTestSkipped('Test for property expiryDate not implemented');
    }
}
