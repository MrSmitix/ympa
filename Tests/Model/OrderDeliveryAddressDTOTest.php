<?php
/**
 * OrderDeliveryAddressDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\OrderDeliveryAddressDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OrderDeliveryAddressDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи).
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OrderDeliveryAddressDTO
 */
class OrderDeliveryAddressDTOTest extends TestCase
{
    protected OrderDeliveryAddressDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(OrderDeliveryAddressDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OrderDeliveryAddressDTO::class));
        $this->assertInstanceOf(OrderDeliveryAddressDTO::class, $this->object);
    }

    /**
     * Test attribute "country"
     *
     * @group unit
     * @small
     */
    public function testPropertyCountry(): void
    {
        $this->markTestSkipped('Test for property country not implemented');
    }

    /**
     * Test attribute "postcode"
     *
     * @group unit
     * @small
     */
    public function testPropertyPostcode(): void
    {
        $this->markTestSkipped('Test for property postcode not implemented');
    }

    /**
     * Test attribute "city"
     *
     * @group unit
     * @small
     */
    public function testPropertyCity(): void
    {
        $this->markTestSkipped('Test for property city not implemented');
    }

    /**
     * Test attribute "district"
     *
     * @group unit
     * @small
     */
    public function testPropertyDistrict(): void
    {
        $this->markTestSkipped('Test for property district not implemented');
    }

    /**
     * Test attribute "subway"
     *
     * @group unit
     * @small
     */
    public function testPropertySubway(): void
    {
        $this->markTestSkipped('Test for property subway not implemented');
    }

    /**
     * Test attribute "street"
     *
     * @group unit
     * @small
     */
    public function testPropertyStreet(): void
    {
        $this->markTestSkipped('Test for property street not implemented');
    }

    /**
     * Test attribute "house"
     *
     * @group unit
     * @small
     */
    public function testPropertyHouse(): void
    {
        $this->markTestSkipped('Test for property house not implemented');
    }

    /**
     * Test attribute "block"
     *
     * @group unit
     * @small
     */
    public function testPropertyBlock(): void
    {
        $this->markTestSkipped('Test for property block not implemented');
    }

    /**
     * Test attribute "entrance"
     *
     * @group unit
     * @small
     */
    public function testPropertyEntrance(): void
    {
        $this->markTestSkipped('Test for property entrance not implemented');
    }

    /**
     * Test attribute "entryphone"
     *
     * @group unit
     * @small
     */
    public function testPropertyEntryphone(): void
    {
        $this->markTestSkipped('Test for property entryphone not implemented');
    }

    /**
     * Test attribute "floor"
     *
     * @group unit
     * @small
     */
    public function testPropertyFloor(): void
    {
        $this->markTestSkipped('Test for property floor not implemented');
    }

    /**
     * Test attribute "apartment"
     *
     * @group unit
     * @small
     */
    public function testPropertyApartment(): void
    {
        $this->markTestSkipped('Test for property apartment not implemented');
    }

    /**
     * Test attribute "phone"
     *
     * @group unit
     * @small
     */
    public function testPropertyPhone(): void
    {
        $this->markTestSkipped('Test for property phone not implemented');
    }

    /**
     * Test attribute "recipient"
     *
     * @group unit
     * @small
     */
    public function testPropertyRecipient(): void
    {
        $this->markTestSkipped('Test for property recipient not implemented');
    }

    /**
     * Test attribute "gps"
     *
     * @group unit
     * @small
     */
    public function testPropertyGps(): void
    {
        $this->markTestSkipped('Test for property gps not implemented');
    }
}
