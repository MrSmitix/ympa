<?php
/**
 * SuggestedOfferDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\SuggestedOfferDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * SuggestedOfferDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Информация о товаре.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\SuggestedOfferDTO
 */
class SuggestedOfferDTOTest extends TestCase
{
    protected SuggestedOfferDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(SuggestedOfferDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(SuggestedOfferDTO::class));
        $this->assertInstanceOf(SuggestedOfferDTO::class, $this->object);
    }

    /**
     * Test attribute "offerId"
     *
     * @group unit
     * @small
     */
    public function testPropertyOfferId(): void
    {
        $this->markTestSkipped('Test for property offerId not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "category"
     *
     * @group unit
     * @small
     */
    public function testPropertyCategory(): void
    {
        $this->markTestSkipped('Test for property category not implemented');
    }

    /**
     * Test attribute "vendor"
     *
     * @group unit
     * @small
     */
    public function testPropertyVendor(): void
    {
        $this->markTestSkipped('Test for property vendor not implemented');
    }

    /**
     * Test attribute "barcodes"
     *
     * @group unit
     * @small
     */
    public function testPropertyBarcodes(): void
    {
        $this->markTestSkipped('Test for property barcodes not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @group unit
     * @small
     */
    public function testPropertyDescription(): void
    {
        $this->markTestSkipped('Test for property description not implemented');
    }

    /**
     * Test attribute "vendorCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyVendorCode(): void
    {
        $this->markTestSkipped('Test for property vendorCode not implemented');
    }

    /**
     * Test attribute "basicPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyBasicPrice(): void
    {
        $this->markTestSkipped('Test for property basicPrice not implemented');
    }
}
