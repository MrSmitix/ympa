<?php
/**
 * ReturnInstanceDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\ReturnInstanceDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * ReturnInstanceDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Логистическая информация по возврату.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\ReturnInstanceDTO
 */
class ReturnInstanceDTOTest extends TestCase
{
    protected ReturnInstanceDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(ReturnInstanceDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(ReturnInstanceDTO::class));
        $this->assertInstanceOf(ReturnInstanceDTO::class, $this->object);
    }

    /**
     * Test attribute "stockType"
     *
     * @group unit
     * @small
     */
    public function testPropertyStockType(): void
    {
        $this->markTestSkipped('Test for property stockType not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "cis"
     *
     * @group unit
     * @small
     */
    public function testPropertyCis(): void
    {
        $this->markTestSkipped('Test for property cis not implemented');
    }

    /**
     * Test attribute "imei"
     *
     * @group unit
     * @small
     */
    public function testPropertyImei(): void
    {
        $this->markTestSkipped('Test for property imei not implemented');
    }
}
