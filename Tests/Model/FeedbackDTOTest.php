<?php
/**
 * FeedbackDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\FeedbackDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * FeedbackDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Отзыв пользователя Яндекс Маркета об указанном магазине.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\FeedbackDTO
 */
class FeedbackDTOTest extends TestCase
{
    protected FeedbackDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(FeedbackDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(FeedbackDTO::class));
        $this->assertInstanceOf(FeedbackDTO::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "createdAt"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreatedAt(): void
    {
        $this->markTestSkipped('Test for property createdAt not implemented');
    }

    /**
     * Test attribute "text"
     *
     * @group unit
     * @small
     */
    public function testPropertyText(): void
    {
        $this->markTestSkipped('Test for property text not implemented');
    }

    /**
     * Test attribute "state"
     *
     * @group unit
     * @small
     */
    public function testPropertyState(): void
    {
        $this->markTestSkipped('Test for property state not implemented');
    }

    /**
     * Test attribute "author"
     *
     * @group unit
     * @small
     */
    public function testPropertyAuthor(): void
    {
        $this->markTestSkipped('Test for property author not implemented');
    }

    /**
     * Test attribute "pro"
     *
     * @group unit
     * @small
     */
    public function testPropertyPro(): void
    {
        $this->markTestSkipped('Test for property pro not implemented');
    }

    /**
     * Test attribute "contra"
     *
     * @group unit
     * @small
     */
    public function testPropertyContra(): void
    {
        $this->markTestSkipped('Test for property contra not implemented');
    }

    /**
     * Test attribute "comments"
     *
     * @group unit
     * @small
     */
    public function testPropertyComments(): void
    {
        $this->markTestSkipped('Test for property comments not implemented');
    }

    /**
     * Test attribute "shop"
     *
     * @group unit
     * @small
     */
    public function testPropertyShop(): void
    {
        $this->markTestSkipped('Test for property shop not implemented');
    }

    /**
     * Test attribute "resolved"
     *
     * @group unit
     * @small
     */
    public function testPropertyResolved(): void
    {
        $this->markTestSkipped('Test for property resolved not implemented');
    }

    /**
     * Test attribute "verified"
     *
     * @group unit
     * @small
     */
    public function testPropertyVerified(): void
    {
        $this->markTestSkipped('Test for property verified not implemented');
    }

    /**
     * Test attribute "recommend"
     *
     * @group unit
     * @small
     */
    public function testPropertyRecommend(): void
    {
        $this->markTestSkipped('Test for property recommend not implemented');
    }

    /**
     * Test attribute "grades"
     *
     * @group unit
     * @small
     */
    public function testPropertyGrades(): void
    {
        $this->markTestSkipped('Test for property grades not implemented');
    }

    /**
     * Test attribute "order"
     *
     * @group unit
     * @small
     */
    public function testPropertyOrder(): void
    {
        $this->markTestSkipped('Test for property order not implemented');
    }
}
