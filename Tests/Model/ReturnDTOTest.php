<?php
/**
 * ReturnDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\ReturnDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * ReturnDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Возврат заказа.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\ReturnDTO
 */
class ReturnDTOTest extends TestCase
{
    protected ReturnDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(ReturnDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(ReturnDTO::class));
        $this->assertInstanceOf(ReturnDTO::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "orderId"
     *
     * @group unit
     * @small
     */
    public function testPropertyOrderId(): void
    {
        $this->markTestSkipped('Test for property orderId not implemented');
    }

    /**
     * Test attribute "creationDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreationDate(): void
    {
        $this->markTestSkipped('Test for property creationDate not implemented');
    }

    /**
     * Test attribute "updateDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyUpdateDate(): void
    {
        $this->markTestSkipped('Test for property updateDate not implemented');
    }

    /**
     * Test attribute "refundStatus"
     *
     * @group unit
     * @small
     */
    public function testPropertyRefundStatus(): void
    {
        $this->markTestSkipped('Test for property refundStatus not implemented');
    }

    /**
     * Test attribute "logisticPickupPoint"
     *
     * @group unit
     * @small
     */
    public function testPropertyLogisticPickupPoint(): void
    {
        $this->markTestSkipped('Test for property logisticPickupPoint not implemented');
    }

    /**
     * Test attribute "shipmentRecipientType"
     *
     * @group unit
     * @small
     */
    public function testPropertyShipmentRecipientType(): void
    {
        $this->markTestSkipped('Test for property shipmentRecipientType not implemented');
    }

    /**
     * Test attribute "shipmentStatus"
     *
     * @group unit
     * @small
     */
    public function testPropertyShipmentStatus(): void
    {
        $this->markTestSkipped('Test for property shipmentStatus not implemented');
    }

    /**
     * Test attribute "refundAmount"
     *
     * @group unit
     * @small
     */
    public function testPropertyRefundAmount(): void
    {
        $this->markTestSkipped('Test for property refundAmount not implemented');
    }

    /**
     * Test attribute "items"
     *
     * @group unit
     * @small
     */
    public function testPropertyItems(): void
    {
        $this->markTestSkipped('Test for property items not implemented');
    }

    /**
     * Test attribute "returnType"
     *
     * @group unit
     * @small
     */
    public function testPropertyReturnType(): void
    {
        $this->markTestSkipped('Test for property returnType not implemented');
    }

    /**
     * Test attribute "fastReturn"
     *
     * @group unit
     * @small
     */
    public function testPropertyFastReturn(): void
    {
        $this->markTestSkipped('Test for property fastReturn not implemented');
    }
}
