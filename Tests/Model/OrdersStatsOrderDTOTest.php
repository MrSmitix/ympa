<?php
/**
 * OrdersStatsOrderDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\OrdersStatsOrderDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OrdersStatsOrderDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Информация о заказе.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OrdersStatsOrderDTO
 */
class OrdersStatsOrderDTOTest extends TestCase
{
    protected OrdersStatsOrderDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(OrdersStatsOrderDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OrdersStatsOrderDTO::class));
        $this->assertInstanceOf(OrdersStatsOrderDTO::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "creationDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyCreationDate(): void
    {
        $this->markTestSkipped('Test for property creationDate not implemented');
    }

    /**
     * Test attribute "statusUpdateDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatusUpdateDate(): void
    {
        $this->markTestSkipped('Test for property statusUpdateDate not implemented');
    }

    /**
     * Test attribute "status"
     *
     * @group unit
     * @small
     */
    public function testPropertyStatus(): void
    {
        $this->markTestSkipped('Test for property status not implemented');
    }

    /**
     * Test attribute "partnerOrderId"
     *
     * @group unit
     * @small
     */
    public function testPropertyPartnerOrderId(): void
    {
        $this->markTestSkipped('Test for property partnerOrderId not implemented');
    }

    /**
     * Test attribute "paymentType"
     *
     * @group unit
     * @small
     */
    public function testPropertyPaymentType(): void
    {
        $this->markTestSkipped('Test for property paymentType not implemented');
    }

    /**
     * Test attribute "fake"
     *
     * @group unit
     * @small
     */
    public function testPropertyFake(): void
    {
        $this->markTestSkipped('Test for property fake not implemented');
    }

    /**
     * Test attribute "deliveryRegion"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeliveryRegion(): void
    {
        $this->markTestSkipped('Test for property deliveryRegion not implemented');
    }

    /**
     * Test attribute "items"
     *
     * @group unit
     * @small
     */
    public function testPropertyItems(): void
    {
        $this->markTestSkipped('Test for property items not implemented');
    }

    /**
     * Test attribute "initialItems"
     *
     * @group unit
     * @small
     */
    public function testPropertyInitialItems(): void
    {
        $this->markTestSkipped('Test for property initialItems not implemented');
    }

    /**
     * Test attribute "payments"
     *
     * @group unit
     * @small
     */
    public function testPropertyPayments(): void
    {
        $this->markTestSkipped('Test for property payments not implemented');
    }

    /**
     * Test attribute "commissions"
     *
     * @group unit
     * @small
     */
    public function testPropertyCommissions(): void
    {
        $this->markTestSkipped('Test for property commissions not implemented');
    }
}
