<?php
/**
 * OrderDeliveryDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\OrderDeliveryDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OrderDeliveryDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Информация о доставке.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OrderDeliveryDTO
 */
class OrderDeliveryDTOTest extends TestCase
{
    protected OrderDeliveryDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(OrderDeliveryDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OrderDeliveryDTO::class));
        $this->assertInstanceOf(OrderDeliveryDTO::class, $this->object);
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "type"
     *
     * @group unit
     * @small
     */
    public function testPropertyType(): void
    {
        $this->markTestSkipped('Test for property type not implemented');
    }

    /**
     * Test attribute "serviceName"
     *
     * @group unit
     * @small
     */
    public function testPropertyServiceName(): void
    {
        $this->markTestSkipped('Test for property serviceName not implemented');
    }

    /**
     * Test attribute "price"
     *
     * @group unit
     * @small
     */
    public function testPropertyPrice(): void
    {
        $this->markTestSkipped('Test for property price not implemented');
    }

    /**
     * Test attribute "deliveryPartnerType"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeliveryPartnerType(): void
    {
        $this->markTestSkipped('Test for property deliveryPartnerType not implemented');
    }

    /**
     * Test attribute "courier"
     *
     * @group unit
     * @small
     */
    public function testPropertyCourier(): void
    {
        $this->markTestSkipped('Test for property courier not implemented');
    }

    /**
     * Test attribute "dates"
     *
     * @group unit
     * @small
     */
    public function testPropertyDates(): void
    {
        $this->markTestSkipped('Test for property dates not implemented');
    }

    /**
     * Test attribute "region"
     *
     * @group unit
     * @small
     */
    public function testPropertyRegion(): void
    {
        $this->markTestSkipped('Test for property region not implemented');
    }

    /**
     * Test attribute "address"
     *
     * @group unit
     * @small
     */
    public function testPropertyAddress(): void
    {
        $this->markTestSkipped('Test for property address not implemented');
    }

    /**
     * Test attribute "vat"
     *
     * @group unit
     * @small
     */
    public function testPropertyVat(): void
    {
        $this->markTestSkipped('Test for property vat not implemented');
    }

    /**
     * Test attribute "deliveryServiceId"
     *
     * @group unit
     * @small
     */
    public function testPropertyDeliveryServiceId(): void
    {
        $this->markTestSkipped('Test for property deliveryServiceId not implemented');
    }

    /**
     * Test attribute "liftType"
     *
     * @group unit
     * @small
     */
    public function testPropertyLiftType(): void
    {
        $this->markTestSkipped('Test for property liftType not implemented');
    }

    /**
     * Test attribute "liftPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyLiftPrice(): void
    {
        $this->markTestSkipped('Test for property liftPrice not implemented');
    }

    /**
     * Test attribute "outletCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyOutletCode(): void
    {
        $this->markTestSkipped('Test for property outletCode not implemented');
    }

    /**
     * Test attribute "outletStorageLimitDate"
     *
     * @group unit
     * @small
     */
    public function testPropertyOutletStorageLimitDate(): void
    {
        $this->markTestSkipped('Test for property outletStorageLimitDate not implemented');
    }

    /**
     * Test attribute "dispatchType"
     *
     * @group unit
     * @small
     */
    public function testPropertyDispatchType(): void
    {
        $this->markTestSkipped('Test for property dispatchType not implemented');
    }

    /**
     * Test attribute "tracks"
     *
     * @group unit
     * @small
     */
    public function testPropertyTracks(): void
    {
        $this->markTestSkipped('Test for property tracks not implemented');
    }

    /**
     * Test attribute "shipments"
     *
     * @group unit
     * @small
     */
    public function testPropertyShipments(): void
    {
        $this->markTestSkipped('Test for property shipments not implemented');
    }

    /**
     * Test attribute "estimated"
     *
     * @group unit
     * @small
     */
    public function testPropertyEstimated(): void
    {
        $this->markTestSkipped('Test for property estimated not implemented');
    }

    /**
     * Test attribute "eacType"
     *
     * @group unit
     * @small
     */
    public function testPropertyEacType(): void
    {
        $this->markTestSkipped('Test for property eacType not implemented');
    }

    /**
     * Test attribute "eacCode"
     *
     * @group unit
     * @small
     */
    public function testPropertyEacCode(): void
    {
        $this->markTestSkipped('Test for property eacCode not implemented');
    }
}
