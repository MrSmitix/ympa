<?php
/**
 * OfferCardDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\OfferCardDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OfferCardDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OfferCardDTO
 */
class OfferCardDTOTest extends TestCase
{
    protected OfferCardDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(OfferCardDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OfferCardDTO::class));
        $this->assertInstanceOf(OfferCardDTO::class, $this->object);
    }

    /**
     * Test attribute "offerId"
     *
     * @group unit
     * @small
     */
    public function testPropertyOfferId(): void
    {
        $this->markTestSkipped('Test for property offerId not implemented');
    }

    /**
     * Test attribute "mapping"
     *
     * @group unit
     * @small
     */
    public function testPropertyMapping(): void
    {
        $this->markTestSkipped('Test for property mapping not implemented');
    }

    /**
     * Test attribute "parameterValues"
     *
     * @group unit
     * @small
     */
    public function testPropertyParameterValues(): void
    {
        $this->markTestSkipped('Test for property parameterValues not implemented');
    }

    /**
     * Test attribute "cardStatus"
     *
     * @group unit
     * @small
     */
    public function testPropertyCardStatus(): void
    {
        $this->markTestSkipped('Test for property cardStatus not implemented');
    }

    /**
     * Test attribute "contentRating"
     *
     * @group unit
     * @small
     */
    public function testPropertyContentRating(): void
    {
        $this->markTestSkipped('Test for property contentRating not implemented');
    }

    /**
     * Test attribute "recommendations"
     *
     * @group unit
     * @small
     */
    public function testPropertyRecommendations(): void
    {
        $this->markTestSkipped('Test for property recommendations not implemented');
    }

    /**
     * Test attribute "errors"
     *
     * @group unit
     * @small
     */
    public function testPropertyErrors(): void
    {
        $this->markTestSkipped('Test for property errors not implemented');
    }

    /**
     * Test attribute "warnings"
     *
     * @group unit
     * @small
     */
    public function testPropertyWarnings(): void
    {
        $this->markTestSkipped('Test for property warnings not implemented');
    }
}
