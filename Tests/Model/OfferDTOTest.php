<?php
/**
 * OfferDTOTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\OfferDTO;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * OfferDTOTest Class Doc Comment
 *
 * @category    Class
 * @description Предложение.
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\OfferDTO
 */
class OfferDTOTest extends TestCase
{
    protected OfferDTO|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(OfferDTO::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(OfferDTO::class));
        $this->assertInstanceOf(OfferDTO::class, $this->object);
    }

    /**
     * Test attribute "price"
     *
     * @group unit
     * @small
     */
    public function testPropertyPrice(): void
    {
        $this->markTestSkipped('Test for property price not implemented');
    }

    /**
     * Test attribute "feedId"
     *
     * @group unit
     * @small
     */
    public function testPropertyFeedId(): void
    {
        $this->markTestSkipped('Test for property feedId not implemented');
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "shopCategoryId"
     *
     * @group unit
     * @small
     */
    public function testPropertyShopCategoryId(): void
    {
        $this->markTestSkipped('Test for property shopCategoryId not implemented');
    }

    /**
     * Test attribute "marketCategoryId"
     *
     * @group unit
     * @small
     */
    public function testPropertyMarketCategoryId(): void
    {
        $this->markTestSkipped('Test for property marketCategoryId not implemented');
    }

    /**
     * Test attribute "preDiscountPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyPreDiscountPrice(): void
    {
        $this->markTestSkipped('Test for property preDiscountPrice not implemented');
    }

    /**
     * Test attribute "discount"
     *
     * @group unit
     * @small
     */
    public function testPropertyDiscount(): void
    {
        $this->markTestSkipped('Test for property discount not implemented');
    }

    /**
     * Test attribute "cutPrice"
     *
     * @group unit
     * @small
     */
    public function testPropertyCutPrice(): void
    {
        $this->markTestSkipped('Test for property cutPrice not implemented');
    }

    /**
     * Test attribute "url"
     *
     * @group unit
     * @small
     */
    public function testPropertyUrl(): void
    {
        $this->markTestSkipped('Test for property url not implemented');
    }

    /**
     * Test attribute "modelId"
     *
     * @group unit
     * @small
     */
    public function testPropertyModelId(): void
    {
        $this->markTestSkipped('Test for property modelId not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "currency"
     *
     * @group unit
     * @small
     */
    public function testPropertyCurrency(): void
    {
        $this->markTestSkipped('Test for property currency not implemented');
    }

    /**
     * Test attribute "bid"
     *
     * @group unit
     * @small
     */
    public function testPropertyBid(): void
    {
        $this->markTestSkipped('Test for property bid not implemented');
    }

    /**
     * Test attribute "cbid"
     *
     * @group unit
     * @small
     */
    public function testPropertyCbid(): void
    {
        $this->markTestSkipped('Test for property cbid not implemented');
    }

    /**
     * Test attribute "fee"
     *
     * @group unit
     * @small
     */
    public function testPropertyFee(): void
    {
        $this->markTestSkipped('Test for property fee not implemented');
    }

    /**
     * Test attribute "blocked"
     *
     * @group unit
     * @small
     */
    public function testPropertyBlocked(): void
    {
        $this->markTestSkipped('Test for property blocked not implemented');
    }
}
