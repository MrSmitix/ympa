<?php

/**
 * Партнерский API Маркета
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 * The version of the OpenAPI document: LATEST
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */
namespace OpenAPIServer\Model;

use PHPUnit\Framework\TestCase;
use OpenAPIServer\Model\CategoryParameterDTO;

/**
 * CategoryParameterDTOTest Class Doc Comment
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 *
 * @coversDefaultClass \OpenAPIServer\Model\CategoryParameterDTO
 */
class CategoryParameterDTOTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "CategoryParameterDTO"
     */
    public function testCategoryParameterDTO()
    {
        $testCategoryParameterDTO = new CategoryParameterDTO();
        $namespacedClassname = CategoryParameterDTO::getModelsNamespace() . '\\CategoryParameterDTO';
        $this->assertSame('\\' . CategoryParameterDTO::class, $namespacedClassname);
        $this->assertTrue(
            class_exists($namespacedClassname),
            sprintf('Assertion failed that "%s" class exists', $namespacedClassname)
        );
        self::markTestIncomplete(
            'Test of "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        self::markTestIncomplete(
            'Test of "id" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
        self::markTestIncomplete(
            'Test of "name" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        self::markTestIncomplete(
            'Test of "type" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "unit"
     */
    public function testPropertyUnit()
    {
        self::markTestIncomplete(
            'Test of "unit" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "description"
     */
    public function testPropertyDescription()
    {
        self::markTestIncomplete(
            'Test of "description" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "recommendationTypes"
     */
    public function testPropertyRecommendationTypes()
    {
        self::markTestIncomplete(
            'Test of "recommendationTypes" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "required"
     */
    public function testPropertyRequired()
    {
        self::markTestIncomplete(
            'Test of "required" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "filtering"
     */
    public function testPropertyFiltering()
    {
        self::markTestIncomplete(
            'Test of "filtering" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "distinctive"
     */
    public function testPropertyDistinctive()
    {
        self::markTestIncomplete(
            'Test of "distinctive" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "multivalue"
     */
    public function testPropertyMultivalue()
    {
        self::markTestIncomplete(
            'Test of "multivalue" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "allowCustomValues"
     */
    public function testPropertyAllowCustomValues()
    {
        self::markTestIncomplete(
            'Test of "allowCustomValues" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "values"
     */
    public function testPropertyValues()
    {
        self::markTestIncomplete(
            'Test of "values" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "constraints"
     */
    public function testPropertyConstraints()
    {
        self::markTestIncomplete(
            'Test of "constraints" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test attribute "valueRestrictions"
     */
    public function testPropertyValueRestrictions()
    {
        self::markTestIncomplete(
            'Test of "valueRestrictions" property in "CategoryParameterDTO" model has not been implemented yet.'
        );
    }

    /**
     * Test getOpenApiSchema static method
     * @covers ::getOpenApiSchema
     */
    public function testGetOpenApiSchema()
    {
        $schemaArr = CategoryParameterDTO::getOpenApiSchema();
        $this->assertIsArray($schemaArr);
    }
}

