/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GetCategoriesMaxSaleQuantumResponse,
  GetCategoriesMaxSaleQuantumRequest,
  GetCategoriesRequest,
  GetCategoriesResponse,
} from './models';

/**
 * getCategoriesMaxSaleQuantum - parameters interface
 */
export interface IGetCategoriesMaxSaleQuantumParams {
  getCategoriesMaxSaleQuantumRequest: GetCategoriesMaxSaleQuantumRequest;
}

/**
 * getCategoriesTree - parameters interface
 */
export interface IGetCategoriesTreeParams {
  getCategoriesRequest?: GetCategoriesRequest;
}

/**
 * CategoriesApi - API class
 */
@autoinject()
export class CategoriesApi extends Api {

  /**
   * Creates a new CategoriesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Лимит на установку кванта продажи и минимального количества товаров в заказе
   * Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.getCategoriesMaxSaleQuantumRequest 
   */
  async getCategoriesMaxSaleQuantum(params: IGetCategoriesMaxSaleQuantumParams): Promise<GetCategoriesMaxSaleQuantumResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getCategoriesMaxSaleQuantum', params, 'getCategoriesMaxSaleQuantumRequest');

    // Create URL to call
    const url = `${this.basePath}/categories/max-sale-quantum`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getCategoriesMaxSaleQuantumRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Дерево категорий
   * Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.getCategoriesRequest 
   */
  async getCategoriesTree(params: IGetCategoriesTreeParams): Promise<GetCategoriesResponse> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/categories/tree`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getCategoriesRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

