/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "OrdersApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

OrdersApiImpl::OrdersApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : OrdersApi(rtr)
{
}

void OrdersApiImpl::accept_order_cancellation(const int64_t &campaignId, const int64_t &orderId, const AcceptOrderCancellationRequest &acceptOrderCancellationRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::get_order(const int64_t &campaignId, const int64_t &orderId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::get_orders(const int64_t &campaignId, const std::optional<std::vector<int64_t>> &orderIds, const std::optional<std::set<org::openapitools::server::model::OrderStatusType>> &status, const std::optional<std::set<org::openapitools::server::model::OrderSubstatusType>> &substatus, const std::optional<std::string> &fromDate, const std::optional<std::string> &toDate, const std::optional<std::string> &supplierShipmentDateFrom, const std::optional<std::string> &supplierShipmentDateTo, const std::optional<std::string> &updatedAtFrom, const std::optional<std::string> &updatedAtTo, const std::optional<org::openapitools::server::model::OrderDeliveryDispatchType> &dispatchType, const std::optional<bool> &fake, const std::optional<bool> &hasCis, const std::optional<bool> &onlyWaitingForCancellationApprove, const std::optional<bool> &onlyEstimatedDelivery, const std::optional<org::openapitools::server::model::OrderBuyerType> &buyerType, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::provide_order_digital_codes(const int64_t &campaignId, const int64_t &orderId, const ProvideOrderDigitalCodesRequest &provideOrderDigitalCodesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::provide_order_item_identifiers(const int64_t &campaignId, const int64_t &orderId, const ProvideOrderItemIdentifiersRequest &provideOrderItemIdentifiersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::set_order_box_layout(const int64_t &campaignId, const int64_t &orderId, const SetOrderBoxLayoutRequest &setOrderBoxLayoutRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::set_order_shipment_boxes(const int64_t &campaignId, const int64_t &orderId, const int64_t &shipmentId, const SetOrderShipmentBoxesRequest &setOrderShipmentBoxesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::update_order_items(const int64_t &campaignId, const int64_t &orderId, const UpdateOrderItemRequest &updateOrderItemRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::update_order_status(const int64_t &campaignId, const int64_t &orderId, const UpdateOrderStatusRequest &updateOrderStatusRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OrdersApiImpl::update_order_statuses(const int64_t &campaignId, const UpdateOrderStatusesRequest &updateOrderStatusesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

