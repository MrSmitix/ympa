/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* BidsApiImpl.h
*
* 
*/

#ifndef BIDS_API_IMPL_H_
#define BIDS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <BidsApi.h>


#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "EmptyApiResponse.h"
#include "GetBidsInfoRequest.h"
#include "GetBidsInfoResponse.h"
#include "GetBidsRecommendationsRequest.h"
#include "GetBidsRecommendationsResponse.h"
#include "PutSkuBidsRequest.h"
#include <string>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  BidsApiImpl : public org::openapitools::server::api::BidsApi {
public:
    explicit BidsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~BidsApiImpl() override = default;

    void get_bids_info_for_business(const int64_t &businessId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetBidsInfoRequest &getBidsInfoRequest, Pistache::Http::ResponseWriter &response);
    void get_bids_recommendations(const int64_t &businessId, const GetBidsRecommendationsRequest &getBidsRecommendationsRequest, Pistache::Http::ResponseWriter &response);
    void put_bids_for_business(const int64_t &businessId, const PutSkuBidsRequest &putSkuBidsRequest, Pistache::Http::ResponseWriter &response);
    void put_bids_for_campaign(const int64_t &campaignId, const PutSkuBidsRequest &putSkuBidsRequest, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
