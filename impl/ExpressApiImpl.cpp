/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ExpressApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ExpressApiImpl::ExpressApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ExpressApi(rtr)
{
}

void ExpressApiImpl::add_hidden_offers(const int64_t &campaignId, const AddHiddenOffersRequest &addHiddenOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::add_offers_to_archive(const int64_t &businessId, const AddOffersToArchiveRequest &addOffersToArchiveRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::calculate_tariffs(const CalculateTariffsRequest &calculateTariffsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::confirm_business_prices(const int64_t &businessId, const ConfirmPricesRequest &confirmPricesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::confirm_campaign_prices(const int64_t &campaignId, const ConfirmPricesRequest &confirmPricesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::create_chat(const int64_t &businessId, const CreateChatRequest &createChatRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::delete_campaign_offers(const int64_t &campaignId, const DeleteCampaignOffersRequest &deleteCampaignOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::delete_goods_feedback_comment(const int64_t &businessId, const DeleteGoodsFeedbackCommentRequest &deleteGoodsFeedbackCommentRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::delete_hidden_offers(const int64_t &campaignId, const DeleteHiddenOffersRequest &deleteHiddenOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::delete_offers(const int64_t &businessId, const DeleteOffersRequest &deleteOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::delete_offers_from_archive(const int64_t &businessId, const DeleteOffersFromArchiveRequest &deleteOffersFromArchiveRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::delete_promo_offers(const int64_t &businessId, const DeletePromoOffersRequest &deletePromoOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_boost_consolidated_report(const GenerateBoostConsolidatedRequest &generateBoostConsolidatedRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_competitors_position_report(const GenerateCompetitorsPositionReportRequest &generateCompetitorsPositionReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_goods_feedback_report(const GenerateGoodsFeedbackRequest &generateGoodsFeedbackRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_goods_realization_report(const GenerateGoodsRealizationReportRequest &generateGoodsRealizationReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_mass_order_labels_report(const GenerateMassOrderLabelsRequest &generateMassOrderLabelsRequest, const std::optional<org::openapitools::server::model::PageFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_order_label(const int64_t &campaignId, const int64_t &orderId, const int64_t &shipmentId, const int64_t &boxId, const std::optional<org::openapitools::server::model::PageFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_order_labels(const int64_t &campaignId, const int64_t &orderId, const std::optional<org::openapitools::server::model::PageFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_prices_report(const GeneratePricesReportRequest &generatePricesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_shelfs_statistics_report(const GenerateShelfsStatisticsRequest &generateShelfsStatisticsRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_shows_sales_report(const GenerateShowsSalesReportRequest &generateShowsSalesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_stocks_on_warehouses_report(const GenerateStocksOnWarehousesReportRequest &generateStocksOnWarehousesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_united_marketplace_services_report(const GenerateUnitedMarketplaceServicesReportRequest &generateUnitedMarketplaceServicesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_united_netting_report(const GenerateUnitedNettingReportRequest &generateUnitedNettingReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::generate_united_orders_report(const GenerateUnitedOrdersRequest &generateUnitedOrdersRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_all_offers(const int64_t &campaignId, const std::optional<int64_t> &feedId, const std::optional<int32_t> &chunk, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_bids_info_for_business(const int64_t &businessId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetBidsInfoRequest &getBidsInfoRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_bids_recommendations(const int64_t &businessId, const GetBidsRecommendationsRequest &getBidsRecommendationsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_business_quarantine_offers(const int64_t &businessId, const GetQuarantineOffersRequest &getQuarantineOffersRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_business_settings(const int64_t &businessId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaign(const int64_t &campaignId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaign_logins(const int64_t &campaignId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaign_offers(const int64_t &campaignId, const GetCampaignOffersRequest &getCampaignOffersRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaign_quarantine_offers(const int64_t &campaignId, const GetQuarantineOffersRequest &getQuarantineOffersRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaign_region(const int64_t &campaignId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaign_settings(const int64_t &campaignId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaigns(const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_campaigns_by_login(const std::string &login, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_categories_max_sale_quantum(const GetCategoriesMaxSaleQuantumRequest &getCategoriesMaxSaleQuantumRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_categories_tree(const GetCategoriesRequest &getCategoriesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_category_content_parameters(const int64_t &categoryId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_chat_history(const int64_t &businessId, const std::optional<int64_t> &chatId, const GetChatHistoryRequest &getChatHistoryRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_chats(const int64_t &businessId, const GetChatsRequest &getChatsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_delivery_services(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_feed(const int64_t &campaignId, const int64_t &feedId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_feed_index_logs(const int64_t &campaignId, const int64_t &feedId, const std::optional<int32_t> &limit, const std::optional<std::string> &publishedTimeFrom, const std::optional<std::string> &publishedTimeTo, const std::optional<org::openapitools::server::model::FeedIndexLogsStatusType> &status, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_feedback_and_comment_updates(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const std::optional<std::string> &fromDate, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_feeds(const int64_t &campaignId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_goods_feedback_comments(const int64_t &businessId, const GetGoodsFeedbackCommentsRequest &getGoodsFeedbackCommentsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_goods_feedbacks(const int64_t &businessId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetGoodsFeedbackRequest &getGoodsFeedbackRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_goods_stats(const int64_t &campaignId, const GetGoodsStatsRequest &getGoodsStatsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_hidden_offers(const int64_t &campaignId, const std::optional<std::vector<std::string>> &offerId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const std::optional<int32_t> &offset, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_offer_cards_content_status(const int64_t &businessId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetOfferCardsContentStatusRequest &getOfferCardsContentStatusRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_offer_mapping_entries(const int64_t &campaignId, const std::optional<std::vector<std::string>> &offerId, const std::optional<std::vector<std::string>> &shopSku, const std::optional<org::openapitools::server::model::OfferMappingKindType> &mappingKind, const std::optional<std::vector<org::openapitools::server::model::OfferProcessingStatusType>> &status, const std::optional<std::vector<org::openapitools::server::model::OfferAvailabilityStatusType>> &availability, const std::optional<std::vector<int32_t>> &categoryId, const std::optional<std::vector<std::string>> &vendor, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_offer_mappings(const int64_t &businessId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetOfferMappingsRequest &getOfferMappingsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_offer_recommendations(const int64_t &businessId, const GetOfferRecommendationsRequest &getOfferRecommendationsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_offers(const int64_t &campaignId, const std::optional<std::string> &query, const std::optional<int64_t> &feedId, const std::optional<std::string> &shopCategoryId, const std::optional<org::openapitools::server::model::CurrencyType> &currency, const std::optional<bool> &matched, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_order(const int64_t &campaignId, const int64_t &orderId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_order_business_buyer_info(const int64_t &campaignId, const int64_t &orderId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_order_business_documents_info(const int64_t &campaignId, const int64_t &orderId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_order_labels_data(const int64_t &campaignId, const int64_t &orderId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_orders(const int64_t &campaignId, const std::optional<std::vector<int64_t>> &orderIds, const std::optional<std::set<org::openapitools::server::model::OrderStatusType>> &status, const std::optional<std::set<org::openapitools::server::model::OrderSubstatusType>> &substatus, const std::optional<std::string> &fromDate, const std::optional<std::string> &toDate, const std::optional<std::string> &supplierShipmentDateFrom, const std::optional<std::string> &supplierShipmentDateTo, const std::optional<std::string> &updatedAtFrom, const std::optional<std::string> &updatedAtTo, const std::optional<org::openapitools::server::model::OrderDeliveryDispatchType> &dispatchType, const std::optional<bool> &fake, const std::optional<bool> &hasCis, const std::optional<bool> &onlyWaitingForCancellationApprove, const std::optional<bool> &onlyEstimatedDelivery, const std::optional<org::openapitools::server::model::OrderBuyerType> &buyerType, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_orders_stats(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetOrdersStatsRequest &getOrdersStatsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_prices(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const std::optional<bool> &archived, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_prices_by_offer_ids(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetPricesByOfferIdsRequest &getPricesByOfferIdsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_promo_offers(const int64_t &businessId, const GetPromoOffersRequest &getPromoOffersRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_promos(const int64_t &businessId, const GetPromosRequest &getPromosRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_quality_rating_details(const int64_t &campaignId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_quality_ratings(const int64_t &businessId, const GetQualityRatingRequest &getQualityRatingRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_report_info(const std::string &reportId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_return(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_return_application(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_return_photo(const int64_t &campaignId, const int64_t &orderId, const int64_t &returnId, const int64_t &itemId, const std::string &imageHash, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_returns(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const std::optional<std::vector<int64_t>> &orderIds, const std::optional<std::vector<org::openapitools::server::model::RefundStatusType>> &statuses, const std::optional<org::openapitools::server::model::ReturnType> &type, const std::optional<std::string> &fromDate, const std::optional<std::string> &toDate, const std::optional<std::string> &fromDate2, const std::optional<std::string> &toDate2, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_stocks(const int64_t &campaignId, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, const GetWarehouseStocksRequest &getWarehouseStocksRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_suggested_offer_mapping_entries(const int64_t &campaignId, const GetSuggestedOfferMappingEntriesRequest &getSuggestedOfferMappingEntriesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_suggested_offer_mappings(const int64_t &businessId, const GetSuggestedOfferMappingsRequest &getSuggestedOfferMappingsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_suggested_prices(const int64_t &campaignId, const SuggestPricesRequest &suggestPricesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::get_warehouses(const int64_t &businessId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::provide_order_item_identifiers(const int64_t &campaignId, const int64_t &orderId, const ProvideOrderItemIdentifiersRequest &provideOrderItemIdentifiersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::put_bids_for_business(const int64_t &businessId, const PutSkuBidsRequest &putSkuBidsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::put_bids_for_campaign(const int64_t &campaignId, const PutSkuBidsRequest &putSkuBidsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::refresh_feed(const int64_t &campaignId, const int64_t &feedId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::search_region_children(const int64_t &regionId, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::search_regions_by_id(const int64_t &regionId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::search_regions_by_name(const std::optional<std::string> &name, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::send_file_to_chat(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter &response){
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::send_message_to_chat(const int64_t &businessId, const std::optional<int64_t> &chatId, const SendMessageToChatRequest &sendMessageToChatRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::set_feed_params(const int64_t &campaignId, const int64_t &feedId, const SetFeedParamsRequest &setFeedParamsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::set_order_box_layout(const int64_t &campaignId, const int64_t &orderId, const SetOrderBoxLayoutRequest &setOrderBoxLayoutRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::set_order_shipment_boxes(const int64_t &campaignId, const int64_t &orderId, const int64_t &shipmentId, const SetOrderShipmentBoxesRequest &setOrderShipmentBoxesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::skip_goods_feedbacks_reaction(const int64_t &businessId, const SkipGoodsFeedbackReactionRequest &skipGoodsFeedbackReactionRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_business_prices(const int64_t &businessId, const UpdateBusinessPricesRequest &updateBusinessPricesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_campaign_offers(const int64_t &campaignId, const UpdateCampaignOffersRequest &updateCampaignOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_goods_feedback_comment(const int64_t &businessId, const UpdateGoodsFeedbackCommentRequest &updateGoodsFeedbackCommentRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_offer_content(const int64_t &businessId, const UpdateOfferContentRequest &updateOfferContentRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_offer_mapping_entries(const int64_t &campaignId, const UpdateOfferMappingEntryRequest &updateOfferMappingEntryRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_offer_mappings(const int64_t &businessId, const UpdateOfferMappingsRequest &updateOfferMappingsRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_order_items(const int64_t &campaignId, const int64_t &orderId, const UpdateOrderItemRequest &updateOrderItemRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_order_status(const int64_t &campaignId, const int64_t &orderId, const UpdateOrderStatusRequest &updateOrderStatusRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_order_statuses(const int64_t &campaignId, const UpdateOrderStatusesRequest &updateOrderStatusesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_prices(const int64_t &campaignId, const UpdatePricesRequest &updatePricesRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_promo_offers(const int64_t &businessId, const UpdatePromoOffersRequest &updatePromoOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::update_stocks(const int64_t &campaignId, const UpdateStocksRequest &updateStocksRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ExpressApiImpl::verify_order_eac(const int64_t &campaignId, const int64_t &orderId, const VerifyOrderEacRequest &verifyOrderEacRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

