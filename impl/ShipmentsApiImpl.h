/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* ShipmentsApiImpl.h
*
* 
*/

#ifndef SHIPMENTS_API_IMPL_H_
#define SHIPMENTS_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <memory>
#include <optional>

#include <ShipmentsApi.h>


#include "ApiClientDataErrorResponse.h"
#include "ApiForbiddenErrorResponse.h"
#include "ApiLimitErrorResponse.h"
#include "ApiNotFoundErrorResponse.h"
#include "ApiServerErrorResponse.h"
#include "ApiUnauthorizedErrorResponse.h"
#include "ConfirmShipmentRequest.h"
#include "EmptyApiResponse.h"
#include "GetShipmentOrdersInfoResponse.h"
#include "GetShipmentResponse.h"
#include "SearchShipmentsRequest.h"
#include "SearchShipmentsResponse.h"
#include "SetShipmentPalletsCountRequest.h"
#include "ShipmentPalletLabelPageFormatType.h"
#include "TransferOrdersFromShipmentRequest.h"
#include <string>

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::model;

class  ShipmentsApiImpl : public org::openapitools::server::api::ShipmentsApi {
public:
    explicit ShipmentsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~ShipmentsApiImpl() override = default;

    void confirm_shipment(const int64_t &campaignId, const int64_t &shipmentId, const ConfirmShipmentRequest &confirmShipmentRequest, Pistache::Http::ResponseWriter &response);
    void download_shipment_act(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response);
    void download_shipment_discrepancy_act(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response);
    void download_shipment_inbound_act(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response);
    void download_shipment_pallet_labels(const int64_t &campaignId, const int64_t &shipmentId, const std::optional<org::openapitools::server::model::ShipmentPalletLabelPageFormatType> &format, Pistache::Http::ResponseWriter &response);
    void download_shipment_reception_transfer_act(const int64_t &campaignId, const std::optional<int32_t> &warehouseId, Pistache::Http::ResponseWriter &response);
    void download_shipment_transportation_waybill(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response);
    void get_shipment(const int64_t &campaignId, const int64_t &shipmentId, const std::optional<bool> &cancelledOrders, Pistache::Http::ResponseWriter &response);
    void get_shipment_orders_info(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response);
    void search_shipments(const int64_t &campaignId, const SearchShipmentsRequest &searchShipmentsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response);
    void set_shipment_pallets_count(const int64_t &campaignId, const int64_t &shipmentId, const SetShipmentPalletsCountRequest &setShipmentPalletsCountRequest, Pistache::Http::ResponseWriter &response);
    void transfer_orders_from_shipment(const int64_t &campaignId, const int64_t &shipmentId, const TransferOrdersFromShipmentRequest &transferOrdersFromShipmentRequest, Pistache::Http::ResponseWriter &response);

};

} // namespace org::openapitools::server::api



#endif
