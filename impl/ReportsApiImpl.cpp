/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ReportsApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ReportsApiImpl::ReportsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ReportsApi(rtr)
{
}

void ReportsApiImpl::generate_boost_consolidated_report(const GenerateBoostConsolidatedRequest &generateBoostConsolidatedRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_competitors_position_report(const GenerateCompetitorsPositionReportRequest &generateCompetitorsPositionReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_goods_feedback_report(const GenerateGoodsFeedbackRequest &generateGoodsFeedbackRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_goods_movement_report(const GenerateGoodsMovementReportRequest &generateGoodsMovementReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_goods_realization_report(const GenerateGoodsRealizationReportRequest &generateGoodsRealizationReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_goods_turnover_report(const GenerateGoodsTurnoverRequest &generateGoodsTurnoverRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_mass_order_labels_report(const GenerateMassOrderLabelsRequest &generateMassOrderLabelsRequest, const std::optional<org::openapitools::server::model::PageFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_prices_report(const GeneratePricesReportRequest &generatePricesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_shelfs_statistics_report(const GenerateShelfsStatisticsRequest &generateShelfsStatisticsRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_shipment_list_document_report(const GenerateShipmentListDocumentReportRequest &generateShipmentListDocumentReportRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_shows_sales_report(const GenerateShowsSalesReportRequest &generateShowsSalesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_stocks_on_warehouses_report(const GenerateStocksOnWarehousesReportRequest &generateStocksOnWarehousesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_united_marketplace_services_report(const GenerateUnitedMarketplaceServicesReportRequest &generateUnitedMarketplaceServicesReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_united_netting_report(const GenerateUnitedNettingReportRequest &generateUnitedNettingReportRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::generate_united_orders_report(const GenerateUnitedOrdersRequest &generateUnitedOrdersRequest, const std::optional<org::openapitools::server::model::ReportFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ReportsApiImpl::get_report_info(const std::string &reportId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

