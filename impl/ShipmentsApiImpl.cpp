/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "ShipmentsApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

ShipmentsApiImpl::ShipmentsApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ShipmentsApi(rtr)
{
}

void ShipmentsApiImpl::confirm_shipment(const int64_t &campaignId, const int64_t &shipmentId, const ConfirmShipmentRequest &confirmShipmentRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::download_shipment_act(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::download_shipment_discrepancy_act(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::download_shipment_inbound_act(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::download_shipment_pallet_labels(const int64_t &campaignId, const int64_t &shipmentId, const std::optional<org::openapitools::server::model::ShipmentPalletLabelPageFormatType> &format, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::download_shipment_reception_transfer_act(const int64_t &campaignId, const std::optional<int32_t> &warehouseId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::download_shipment_transportation_waybill(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::get_shipment(const int64_t &campaignId, const int64_t &shipmentId, const std::optional<bool> &cancelledOrders, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::get_shipment_orders_info(const int64_t &campaignId, const int64_t &shipmentId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::search_shipments(const int64_t &campaignId, const SearchShipmentsRequest &searchShipmentsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::set_shipment_pallets_count(const int64_t &campaignId, const int64_t &shipmentId, const SetShipmentPalletsCountRequest &setShipmentPalletsCountRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void ShipmentsApiImpl::transfer_orders_from_shipment(const int64_t &campaignId, const int64_t &shipmentId, const TransferOrdersFromShipmentRequest &transferOrdersFromShipmentRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

