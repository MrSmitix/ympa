/**
* Партнерский API Маркета
* API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
*
* The version of the OpenAPI document: LATEST
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "OffersApiImpl.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

OffersApiImpl::OffersApiImpl(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : OffersApi(rtr)
{
}

void OffersApiImpl::delete_campaign_offers(const int64_t &campaignId, const DeleteCampaignOffersRequest &deleteCampaignOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OffersApiImpl::get_all_offers(const int64_t &campaignId, const std::optional<int64_t> &feedId, const std::optional<int32_t> &chunk, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OffersApiImpl::get_campaign_offers(const int64_t &campaignId, const GetCampaignOffersRequest &getCampaignOffersRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OffersApiImpl::get_offer_recommendations(const int64_t &businessId, const GetOfferRecommendationsRequest &getOfferRecommendationsRequest, const std::optional<std::string> &pageToken, const std::optional<int32_t> &limit, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OffersApiImpl::get_offers(const int64_t &campaignId, const std::optional<std::string> &query, const std::optional<int64_t> &feedId, const std::optional<std::string> &shopCategoryId, const std::optional<org::openapitools::server::model::CurrencyType> &currency, const std::optional<bool> &matched, const std::optional<int32_t> &page, const std::optional<int32_t> &pageSize, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void OffersApiImpl::update_campaign_offers(const int64_t &campaignId, const UpdateCampaignOffersRequest &updateCampaignOffersRequest, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

