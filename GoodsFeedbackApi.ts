/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  GetGoodsFeedbackRequest,
  UpdateGoodsFeedbackCommentRequest,
  DeleteGoodsFeedbackCommentRequest,
  UpdateGoodsFeedbackCommentResponse,
  GetGoodsFeedbackResponse,
  GetGoodsFeedbackCommentsResponse,
  GetGoodsFeedbackCommentsRequest,
  SkipGoodsFeedbackReactionRequest,
  EmptyApiResponse,
} from './models';

/**
 * deleteGoodsFeedbackComment - parameters interface
 */
export interface IDeleteGoodsFeedbackCommentParams {
  businessId: number;
  deleteGoodsFeedbackCommentRequest: DeleteGoodsFeedbackCommentRequest;
}

/**
 * getGoodsFeedbackComments - parameters interface
 */
export interface IGetGoodsFeedbackCommentsParams {
  businessId: number;
  getGoodsFeedbackCommentsRequest: GetGoodsFeedbackCommentsRequest;
  pageToken?: string;
  limit?: number;
}

/**
 * getGoodsFeedbacks - parameters interface
 */
export interface IGetGoodsFeedbacksParams {
  businessId: number;
  pageToken?: string;
  limit?: number;
  getGoodsFeedbackRequest?: GetGoodsFeedbackRequest;
}

/**
 * skipGoodsFeedbacksReaction - parameters interface
 */
export interface ISkipGoodsFeedbacksReactionParams {
  businessId: number;
  skipGoodsFeedbackReactionRequest: SkipGoodsFeedbackReactionRequest;
}

/**
 * updateGoodsFeedbackComment - parameters interface
 */
export interface IUpdateGoodsFeedbackCommentParams {
  businessId: number;
  updateGoodsFeedbackCommentRequest: UpdateGoodsFeedbackCommentRequest;
}

/**
 * GoodsFeedbackApi - API class
 */
@autoinject()
export class GoodsFeedbackApi extends Api {

  /**
   * Creates a new GoodsFeedbackApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Удаление комментария к отзыву
   * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.deleteGoodsFeedbackCommentRequest 
   */
  async deleteGoodsFeedbackComment(params: IDeleteGoodsFeedbackCommentParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteGoodsFeedbackComment', params, 'businessId');
    this.ensureParamIsSet('deleteGoodsFeedbackComment', params, 'deleteGoodsFeedbackCommentRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/goods-feedback/comments/delete`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['deleteGoodsFeedbackCommentRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Получение комментариев к отзыву
   * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.getGoodsFeedbackCommentsRequest 
   * @param params.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
   * @param params.limit Количество значений на одной странице. 
   */
  async getGoodsFeedbackComments(params: IGetGoodsFeedbackCommentsParams): Promise<GetGoodsFeedbackCommentsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getGoodsFeedbackComments', params, 'businessId');
    this.ensureParamIsSet('getGoodsFeedbackComments', params, 'getGoodsFeedbackCommentsRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/goods-feedback/comments`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'page_token': params['pageToken'],
        'limit': params['limit'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getGoodsFeedbackCommentsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Получение отзывов о товарах продавца
   * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
   * @param params.limit Количество значений на одной странице. 
   * @param params.getGoodsFeedbackRequest 
   */
  async getGoodsFeedbacks(params: IGetGoodsFeedbacksParams): Promise<GetGoodsFeedbackResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getGoodsFeedbacks', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/goods-feedback`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'page_token': params['pageToken'],
        'limit': params['limit'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getGoodsFeedbackRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Отказ от ответа на отзывы
   * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.skipGoodsFeedbackReactionRequest 
   */
  async skipGoodsFeedbacksReaction(params: ISkipGoodsFeedbacksReactionParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('skipGoodsFeedbacksReaction', params, 'businessId');
    this.ensureParamIsSet('skipGoodsFeedbacksReaction', params, 'skipGoodsFeedbackReactionRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/goods-feedback/skip-reaction`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['skipGoodsFeedbackReactionRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Добавление нового или изменение созданного комментария
   * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.updateGoodsFeedbackCommentRequest 
   */
  async updateGoodsFeedbackComment(params: IUpdateGoodsFeedbackCommentParams): Promise<UpdateGoodsFeedbackCommentResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateGoodsFeedbackComment', params, 'businessId');
    this.ensureParamIsSet('updateGoodsFeedbackComment', params, 'updateGoodsFeedbackCommentRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/goods-feedback/comments/update`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updateGoodsFeedbackCommentRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

