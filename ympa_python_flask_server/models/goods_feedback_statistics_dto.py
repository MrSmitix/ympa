from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server import util


class GoodsFeedbackStatisticsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rating=None, comments_count=None, recommended=None, paid_amount=None):  # noqa: E501
        """GoodsFeedbackStatisticsDTO - a model defined in OpenAPI

        :param rating: The rating of this GoodsFeedbackStatisticsDTO.  # noqa: E501
        :type rating: int
        :param comments_count: The comments_count of this GoodsFeedbackStatisticsDTO.  # noqa: E501
        :type comments_count: int
        :param recommended: The recommended of this GoodsFeedbackStatisticsDTO.  # noqa: E501
        :type recommended: bool
        :param paid_amount: The paid_amount of this GoodsFeedbackStatisticsDTO.  # noqa: E501
        :type paid_amount: int
        """
        self.openapi_types = {
            'rating': int,
            'comments_count': int,
            'recommended': bool,
            'paid_amount': int
        }

        self.attribute_map = {
            'rating': 'rating',
            'comments_count': 'commentsCount',
            'recommended': 'recommended',
            'paid_amount': 'paidAmount'
        }

        self._rating = rating
        self._comments_count = comments_count
        self._recommended = recommended
        self._paid_amount = paid_amount

    @classmethod
    def from_dict(cls, dikt) -> 'GoodsFeedbackStatisticsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoodsFeedbackStatisticsDTO of this GoodsFeedbackStatisticsDTO.  # noqa: E501
        :rtype: GoodsFeedbackStatisticsDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rating(self) -> int:
        """Gets the rating of this GoodsFeedbackStatisticsDTO.

        Оценка товара.  # noqa: E501

        :return: The rating of this GoodsFeedbackStatisticsDTO.
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating: int):
        """Sets the rating of this GoodsFeedbackStatisticsDTO.

        Оценка товара.  # noqa: E501

        :param rating: The rating of this GoodsFeedbackStatisticsDTO.
        :type rating: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501
        if rating is not None and rating > 5:  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value less than or equal to `5`")  # noqa: E501
        if rating is not None and rating < 1:  # noqa: E501
            raise ValueError("Invalid value for `rating`, must be a value greater than or equal to `1`")  # noqa: E501

        self._rating = rating

    @property
    def comments_count(self) -> int:
        """Gets the comments_count of this GoodsFeedbackStatisticsDTO.

        Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии.   # noqa: E501

        :return: The comments_count of this GoodsFeedbackStatisticsDTO.
        :rtype: int
        """
        return self._comments_count

    @comments_count.setter
    def comments_count(self, comments_count: int):
        """Sets the comments_count of this GoodsFeedbackStatisticsDTO.

        Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии.   # noqa: E501

        :param comments_count: The comments_count of this GoodsFeedbackStatisticsDTO.
        :type comments_count: int
        """
        if comments_count is None:
            raise ValueError("Invalid value for `comments_count`, must not be `None`")  # noqa: E501

        self._comments_count = comments_count

    @property
    def recommended(self) -> bool:
        """Gets the recommended of this GoodsFeedbackStatisticsDTO.

        Рекомендуют ли этот товар.  # noqa: E501

        :return: The recommended of this GoodsFeedbackStatisticsDTO.
        :rtype: bool
        """
        return self._recommended

    @recommended.setter
    def recommended(self, recommended: bool):
        """Sets the recommended of this GoodsFeedbackStatisticsDTO.

        Рекомендуют ли этот товар.  # noqa: E501

        :param recommended: The recommended of this GoodsFeedbackStatisticsDTO.
        :type recommended: bool
        """

        self._recommended = recommended

    @property
    def paid_amount(self) -> int:
        """Gets the paid_amount of this GoodsFeedbackStatisticsDTO.

        Количество баллов Плюса, которое автор получил за отзыв.  # noqa: E501

        :return: The paid_amount of this GoodsFeedbackStatisticsDTO.
        :rtype: int
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount: int):
        """Sets the paid_amount of this GoodsFeedbackStatisticsDTO.

        Количество баллов Плюса, которое автор получил за отзыв.  # noqa: E501

        :param paid_amount: The paid_amount of this GoodsFeedbackStatisticsDTO.
        :type paid_amount: int
        """

        self._paid_amount = paid_amount
