from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.bid_recommendation_item_dto import BidRecommendationItemDTO
from ympa_python_flask_server.models.price_recommendation_item_dto import PriceRecommendationItemDTO
import re
from ympa_python_flask_server import util

from ympa_python_flask_server.models.bid_recommendation_item_dto import BidRecommendationItemDTO  # noqa: E501
from ympa_python_flask_server.models.price_recommendation_item_dto import PriceRecommendationItemDTO  # noqa: E501
import re  # noqa: E501

class SkuBidRecommendationItemDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku=None, bid=None, bid_recommendations=None, price_recommendations=None):  # noqa: E501
        """SkuBidRecommendationItemDTO - a model defined in OpenAPI

        :param sku: The sku of this SkuBidRecommendationItemDTO.  # noqa: E501
        :type sku: str
        :param bid: The bid of this SkuBidRecommendationItemDTO.  # noqa: E501
        :type bid: int
        :param bid_recommendations: The bid_recommendations of this SkuBidRecommendationItemDTO.  # noqa: E501
        :type bid_recommendations: List[BidRecommendationItemDTO]
        :param price_recommendations: The price_recommendations of this SkuBidRecommendationItemDTO.  # noqa: E501
        :type price_recommendations: List[PriceRecommendationItemDTO]
        """
        self.openapi_types = {
            'sku': str,
            'bid': int,
            'bid_recommendations': List[BidRecommendationItemDTO],
            'price_recommendations': List[PriceRecommendationItemDTO]
        }

        self.attribute_map = {
            'sku': 'sku',
            'bid': 'bid',
            'bid_recommendations': 'bidRecommendations',
            'price_recommendations': 'priceRecommendations'
        }

        self._sku = sku
        self._bid = bid
        self._bid_recommendations = bid_recommendations
        self._price_recommendations = price_recommendations

    @classmethod
    def from_dict(cls, dikt) -> 'SkuBidRecommendationItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SkuBidRecommendationItemDTO of this SkuBidRecommendationItemDTO.  # noqa: E501
        :rtype: SkuBidRecommendationItemDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku(self) -> str:
        """Gets the sku of this SkuBidRecommendationItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The sku of this SkuBidRecommendationItemDTO.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku: str):
        """Sets the sku of this SkuBidRecommendationItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param sku: The sku of this SkuBidRecommendationItemDTO.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501
        if sku is not None and len(sku) > 255:
            raise ValueError("Invalid value for `sku`, length must be less than or equal to `255`")  # noqa: E501
        if sku is not None and len(sku) < 1:
            raise ValueError("Invalid value for `sku`, length must be greater than or equal to `1`")  # noqa: E501
        if sku is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', sku):  # noqa: E501
            raise ValueError("Invalid value for `sku`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._sku = sku

    @property
    def bid(self) -> int:
        """Gets the bid of this SkuBidRecommendationItemDTO.

        Значение ставки.  # noqa: E501

        :return: The bid of this SkuBidRecommendationItemDTO.
        :rtype: int
        """
        return self._bid

    @bid.setter
    def bid(self, bid: int):
        """Sets the bid of this SkuBidRecommendationItemDTO.

        Значение ставки.  # noqa: E501

        :param bid: The bid of this SkuBidRecommendationItemDTO.
        :type bid: int
        """
        if bid is None:
            raise ValueError("Invalid value for `bid`, must not be `None`")  # noqa: E501
        if bid is not None and bid > 9999:  # noqa: E501
            raise ValueError("Invalid value for `bid`, must be a value less than or equal to `9999`")  # noqa: E501
        if bid is not None and bid < 0:  # noqa: E501
            raise ValueError("Invalid value for `bid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bid = bid

    @property
    def bid_recommendations(self) -> List[BidRecommendationItemDTO]:
        """Gets the bid_recommendations of this SkuBidRecommendationItemDTO.

        Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить.   # noqa: E501

        :return: The bid_recommendations of this SkuBidRecommendationItemDTO.
        :rtype: List[BidRecommendationItemDTO]
        """
        return self._bid_recommendations

    @bid_recommendations.setter
    def bid_recommendations(self, bid_recommendations: List[BidRecommendationItemDTO]):
        """Sets the bid_recommendations of this SkuBidRecommendationItemDTO.

        Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить.   # noqa: E501

        :param bid_recommendations: The bid_recommendations of this SkuBidRecommendationItemDTO.
        :type bid_recommendations: List[BidRecommendationItemDTO]
        """

        self._bid_recommendations = bid_recommendations

    @property
    def price_recommendations(self) -> List[PriceRecommendationItemDTO]:
        """Gets the price_recommendations of this SkuBidRecommendationItemDTO.

        Рекомендованные цены.  # noqa: E501

        :return: The price_recommendations of this SkuBidRecommendationItemDTO.
        :rtype: List[PriceRecommendationItemDTO]
        """
        return self._price_recommendations

    @price_recommendations.setter
    def price_recommendations(self, price_recommendations: List[PriceRecommendationItemDTO]):
        """Sets the price_recommendations of this SkuBidRecommendationItemDTO.

        Рекомендованные цены.  # noqa: E501

        :param price_recommendations: The price_recommendations of this SkuBidRecommendationItemDTO.
        :type price_recommendations: List[PriceRecommendationItemDTO]
        """

        self._price_recommendations = price_recommendations
