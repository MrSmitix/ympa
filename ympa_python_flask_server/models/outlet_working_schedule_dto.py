from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.outlet_working_schedule_item_dto import OutletWorkingScheduleItemDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.outlet_working_schedule_item_dto import OutletWorkingScheduleItemDTO  # noqa: E501

class OutletWorkingScheduleDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, work_in_holiday=None, schedule_items=None):  # noqa: E501
        """OutletWorkingScheduleDTO - a model defined in OpenAPI

        :param work_in_holiday: The work_in_holiday of this OutletWorkingScheduleDTO.  # noqa: E501
        :type work_in_holiday: bool
        :param schedule_items: The schedule_items of this OutletWorkingScheduleDTO.  # noqa: E501
        :type schedule_items: List[OutletWorkingScheduleItemDTO]
        """
        self.openapi_types = {
            'work_in_holiday': bool,
            'schedule_items': List[OutletWorkingScheduleItemDTO]
        }

        self.attribute_map = {
            'work_in_holiday': 'workInHoliday',
            'schedule_items': 'scheduleItems'
        }

        self._work_in_holiday = work_in_holiday
        self._schedule_items = schedule_items

    @classmethod
    def from_dict(cls, dikt) -> 'OutletWorkingScheduleDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OutletWorkingScheduleDTO of this OutletWorkingScheduleDTO.  # noqa: E501
        :rtype: OutletWorkingScheduleDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def work_in_holiday(self) -> bool:
        """Gets the work_in_holiday of this OutletWorkingScheduleDTO.

        Признак, работает ли точка продаж в дни государственных праздников.  Возможные значения:  * `false` — точка продаж не работает в дни государственных праздников. * `true` — точка продаж работает в дни государственных праздников.   # noqa: E501

        :return: The work_in_holiday of this OutletWorkingScheduleDTO.
        :rtype: bool
        """
        return self._work_in_holiday

    @work_in_holiday.setter
    def work_in_holiday(self, work_in_holiday: bool):
        """Sets the work_in_holiday of this OutletWorkingScheduleDTO.

        Признак, работает ли точка продаж в дни государственных праздников.  Возможные значения:  * `false` — точка продаж не работает в дни государственных праздников. * `true` — точка продаж работает в дни государственных праздников.   # noqa: E501

        :param work_in_holiday: The work_in_holiday of this OutletWorkingScheduleDTO.
        :type work_in_holiday: bool
        """

        self._work_in_holiday = work_in_holiday

    @property
    def schedule_items(self) -> List[OutletWorkingScheduleItemDTO]:
        """Gets the schedule_items of this OutletWorkingScheduleDTO.

        Список расписаний работы точки продаж.   # noqa: E501

        :return: The schedule_items of this OutletWorkingScheduleDTO.
        :rtype: List[OutletWorkingScheduleItemDTO]
        """
        return self._schedule_items

    @schedule_items.setter
    def schedule_items(self, schedule_items: List[OutletWorkingScheduleItemDTO]):
        """Sets the schedule_items of this OutletWorkingScheduleDTO.

        Список расписаний работы точки продаж.   # noqa: E501

        :param schedule_items: The schedule_items of this OutletWorkingScheduleDTO.
        :type schedule_items: List[OutletWorkingScheduleItemDTO]
        """
        if schedule_items is None:
            raise ValueError("Invalid value for `schedule_items`, must not be `None`")  # noqa: E501
        if schedule_items is not None and len(schedule_items) < 1:
            raise ValueError("Invalid value for `schedule_items`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._schedule_items = schedule_items
