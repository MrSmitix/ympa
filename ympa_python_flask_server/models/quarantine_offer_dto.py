from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.base_price_dto import BasePriceDTO
from ympa_python_flask_server.models.price_quarantine_verdict_dto import PriceQuarantineVerdictDTO
import re
from ympa_python_flask_server import util

from ympa_python_flask_server.models.base_price_dto import BasePriceDTO  # noqa: E501
from ympa_python_flask_server.models.price_quarantine_verdict_dto import PriceQuarantineVerdictDTO  # noqa: E501
import re  # noqa: E501

class QuarantineOfferDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id=None, current_price=None, last_valid_price=None, verdicts=None):  # noqa: E501
        """QuarantineOfferDTO - a model defined in OpenAPI

        :param offer_id: The offer_id of this QuarantineOfferDTO.  # noqa: E501
        :type offer_id: str
        :param current_price: The current_price of this QuarantineOfferDTO.  # noqa: E501
        :type current_price: BasePriceDTO
        :param last_valid_price: The last_valid_price of this QuarantineOfferDTO.  # noqa: E501
        :type last_valid_price: BasePriceDTO
        :param verdicts: The verdicts of this QuarantineOfferDTO.  # noqa: E501
        :type verdicts: List[PriceQuarantineVerdictDTO]
        """
        self.openapi_types = {
            'offer_id': str,
            'current_price': BasePriceDTO,
            'last_valid_price': BasePriceDTO,
            'verdicts': List[PriceQuarantineVerdictDTO]
        }

        self.attribute_map = {
            'offer_id': 'offerId',
            'current_price': 'currentPrice',
            'last_valid_price': 'lastValidPrice',
            'verdicts': 'verdicts'
        }

        self._offer_id = offer_id
        self._current_price = current_price
        self._last_valid_price = last_valid_price
        self._verdicts = verdicts

    @classmethod
    def from_dict(cls, dikt) -> 'QuarantineOfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QuarantineOfferDTO of this QuarantineOfferDTO.  # noqa: E501
        :rtype: QuarantineOfferDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self) -> str:
        """Gets the offer_id of this QuarantineOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The offer_id of this QuarantineOfferDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id: str):
        """Sets the offer_id of this QuarantineOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param offer_id: The offer_id of this QuarantineOfferDTO.
        :type offer_id: str
        """
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")  # noqa: E501
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")  # noqa: E501
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):  # noqa: E501
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._offer_id = offer_id

    @property
    def current_price(self) -> BasePriceDTO:
        """Gets the current_price of this QuarantineOfferDTO.


        :return: The current_price of this QuarantineOfferDTO.
        :rtype: BasePriceDTO
        """
        return self._current_price

    @current_price.setter
    def current_price(self, current_price: BasePriceDTO):
        """Sets the current_price of this QuarantineOfferDTO.


        :param current_price: The current_price of this QuarantineOfferDTO.
        :type current_price: BasePriceDTO
        """

        self._current_price = current_price

    @property
    def last_valid_price(self) -> BasePriceDTO:
        """Gets the last_valid_price of this QuarantineOfferDTO.


        :return: The last_valid_price of this QuarantineOfferDTO.
        :rtype: BasePriceDTO
        """
        return self._last_valid_price

    @last_valid_price.setter
    def last_valid_price(self, last_valid_price: BasePriceDTO):
        """Sets the last_valid_price of this QuarantineOfferDTO.


        :param last_valid_price: The last_valid_price of this QuarantineOfferDTO.
        :type last_valid_price: BasePriceDTO
        """

        self._last_valid_price = last_valid_price

    @property
    def verdicts(self) -> List[PriceQuarantineVerdictDTO]:
        """Gets the verdicts of this QuarantineOfferDTO.

        Причины попадания товара в карантин.  # noqa: E501

        :return: The verdicts of this QuarantineOfferDTO.
        :rtype: List[PriceQuarantineVerdictDTO]
        """
        return self._verdicts

    @verdicts.setter
    def verdicts(self, verdicts: List[PriceQuarantineVerdictDTO]):
        """Sets the verdicts of this QuarantineOfferDTO.

        Причины попадания товара в карантин.  # noqa: E501

        :param verdicts: The verdicts of this QuarantineOfferDTO.
        :type verdicts: List[PriceQuarantineVerdictDTO]
        """

        self._verdicts = verdicts
