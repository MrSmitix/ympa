from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.feed_parameter_dto import FeedParameterDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.feed_parameter_dto import FeedParameterDTO  # noqa: E501

class SetFeedParamsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameters=None):  # noqa: E501
        """SetFeedParamsRequest - a model defined in OpenAPI

        :param parameters: The parameters of this SetFeedParamsRequest.  # noqa: E501
        :type parameters: List[FeedParameterDTO]
        """
        self.openapi_types = {
            'parameters': List[FeedParameterDTO]
        }

        self.attribute_map = {
            'parameters': 'parameters'
        }

        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'SetFeedParamsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SetFeedParamsRequest of this SetFeedParamsRequest.  # noqa: E501
        :rtype: SetFeedParamsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameters(self) -> List[FeedParameterDTO]:
        """Gets the parameters of this SetFeedParamsRequest.

        Параметры прайс-листа.  Обязательный параметр.   # noqa: E501

        :return: The parameters of this SetFeedParamsRequest.
        :rtype: List[FeedParameterDTO]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[FeedParameterDTO]):
        """Sets the parameters of this SetFeedParamsRequest.

        Параметры прайс-листа.  Обязательный параметр.   # noqa: E501

        :param parameters: The parameters of this SetFeedParamsRequest.
        :type parameters: List[FeedParameterDTO]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters
