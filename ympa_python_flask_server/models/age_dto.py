from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.age_unit_type import AgeUnitType
from ympa_python_flask_server import util

from ympa_python_flask_server.models.age_unit_type import AgeUnitType  # noqa: E501

class AgeDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, age_unit=None):  # noqa: E501
        """AgeDTO - a model defined in OpenAPI

        :param value: The value of this AgeDTO.  # noqa: E501
        :type value: float
        :param age_unit: The age_unit of this AgeDTO.  # noqa: E501
        :type age_unit: AgeUnitType
        """
        self.openapi_types = {
            'value': float,
            'age_unit': AgeUnitType
        }

        self.attribute_map = {
            'value': 'value',
            'age_unit': 'ageUnit'
        }

        self._value = value
        self._age_unit = age_unit

    @classmethod
    def from_dict(cls, dikt) -> 'AgeDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AgeDTO of this AgeDTO.  # noqa: E501
        :rtype: AgeDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> float:
        """Gets the value of this AgeDTO.

        Значение.   # noqa: E501

        :return: The value of this AgeDTO.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this AgeDTO.

        Значение.   # noqa: E501

        :param value: The value of this AgeDTO.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and value < 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def age_unit(self) -> AgeUnitType:
        """Gets the age_unit of this AgeDTO.


        :return: The age_unit of this AgeDTO.
        :rtype: AgeUnitType
        """
        return self._age_unit

    @age_unit.setter
    def age_unit(self, age_unit: AgeUnitType):
        """Sets the age_unit of this AgeDTO.


        :param age_unit: The age_unit of this AgeDTO.
        :type age_unit: AgeUnitType
        """
        if age_unit is None:
            raise ValueError("Invalid value for `age_unit`, must not be `None`")  # noqa: E501

        self._age_unit = age_unit
