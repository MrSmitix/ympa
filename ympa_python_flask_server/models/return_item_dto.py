from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.return_decision_dto import ReturnDecisionDTO
from ympa_python_flask_server.models.return_instance_dto import ReturnInstanceDTO
from ympa_python_flask_server.models.track_dto import TrackDTO
import re
from ympa_python_flask_server import util

from ympa_python_flask_server.models.return_decision_dto import ReturnDecisionDTO  # noqa: E501
from ympa_python_flask_server.models.return_instance_dto import ReturnInstanceDTO  # noqa: E501
from ympa_python_flask_server.models.track_dto import TrackDTO  # noqa: E501
import re  # noqa: E501

class ReturnItemDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, market_sku=None, shop_sku=None, count=None, decisions=None, instances=None, tracks=None):  # noqa: E501
        """ReturnItemDTO - a model defined in OpenAPI

        :param market_sku: The market_sku of this ReturnItemDTO.  # noqa: E501
        :type market_sku: int
        :param shop_sku: The shop_sku of this ReturnItemDTO.  # noqa: E501
        :type shop_sku: str
        :param count: The count of this ReturnItemDTO.  # noqa: E501
        :type count: int
        :param decisions: The decisions of this ReturnItemDTO.  # noqa: E501
        :type decisions: List[ReturnDecisionDTO]
        :param instances: The instances of this ReturnItemDTO.  # noqa: E501
        :type instances: List[ReturnInstanceDTO]
        :param tracks: The tracks of this ReturnItemDTO.  # noqa: E501
        :type tracks: List[TrackDTO]
        """
        self.openapi_types = {
            'market_sku': int,
            'shop_sku': str,
            'count': int,
            'decisions': List[ReturnDecisionDTO],
            'instances': List[ReturnInstanceDTO],
            'tracks': List[TrackDTO]
        }

        self.attribute_map = {
            'market_sku': 'marketSku',
            'shop_sku': 'shopSku',
            'count': 'count',
            'decisions': 'decisions',
            'instances': 'instances',
            'tracks': 'tracks'
        }

        self._market_sku = market_sku
        self._shop_sku = shop_sku
        self._count = count
        self._decisions = decisions
        self._instances = instances
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt) -> 'ReturnItemDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReturnItemDTO of this ReturnItemDTO.  # noqa: E501
        :rtype: ReturnItemDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def market_sku(self) -> int:
        """Gets the market_sku of this ReturnItemDTO.

        SKU на Маркете.  # noqa: E501

        :return: The market_sku of this ReturnItemDTO.
        :rtype: int
        """
        return self._market_sku

    @market_sku.setter
    def market_sku(self, market_sku: int):
        """Sets the market_sku of this ReturnItemDTO.

        SKU на Маркете.  # noqa: E501

        :param market_sku: The market_sku of this ReturnItemDTO.
        :type market_sku: int
        """

        self._market_sku = market_sku

    @property
    def shop_sku(self) -> str:
        """Gets the shop_sku of this ReturnItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The shop_sku of this ReturnItemDTO.
        :rtype: str
        """
        return self._shop_sku

    @shop_sku.setter
    def shop_sku(self, shop_sku: str):
        """Sets the shop_sku of this ReturnItemDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param shop_sku: The shop_sku of this ReturnItemDTO.
        :type shop_sku: str
        """
        if shop_sku is None:
            raise ValueError("Invalid value for `shop_sku`, must not be `None`")  # noqa: E501
        if shop_sku is not None and len(shop_sku) > 255:
            raise ValueError("Invalid value for `shop_sku`, length must be less than or equal to `255`")  # noqa: E501
        if shop_sku is not None and len(shop_sku) < 1:
            raise ValueError("Invalid value for `shop_sku`, length must be greater than or equal to `1`")  # noqa: E501
        if shop_sku is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', shop_sku):  # noqa: E501
            raise ValueError("Invalid value for `shop_sku`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._shop_sku = shop_sku

    @property
    def count(self) -> int:
        """Gets the count of this ReturnItemDTO.

        Количество единиц товара.  # noqa: E501

        :return: The count of this ReturnItemDTO.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this ReturnItemDTO.

        Количество единиц товара.  # noqa: E501

        :param count: The count of this ReturnItemDTO.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def decisions(self) -> List[ReturnDecisionDTO]:
        """Gets the decisions of this ReturnItemDTO.

        Список решений по возврату.  # noqa: E501

        :return: The decisions of this ReturnItemDTO.
        :rtype: List[ReturnDecisionDTO]
        """
        return self._decisions

    @decisions.setter
    def decisions(self, decisions: List[ReturnDecisionDTO]):
        """Sets the decisions of this ReturnItemDTO.

        Список решений по возврату.  # noqa: E501

        :param decisions: The decisions of this ReturnItemDTO.
        :type decisions: List[ReturnDecisionDTO]
        """

        self._decisions = decisions

    @property
    def instances(self) -> List[ReturnInstanceDTO]:
        """Gets the instances of this ReturnItemDTO.

        Список логистических позиций возврата.  # noqa: E501

        :return: The instances of this ReturnItemDTO.
        :rtype: List[ReturnInstanceDTO]
        """
        return self._instances

    @instances.setter
    def instances(self, instances: List[ReturnInstanceDTO]):
        """Sets the instances of this ReturnItemDTO.

        Список логистических позиций возврата.  # noqa: E501

        :param instances: The instances of this ReturnItemDTO.
        :type instances: List[ReturnInstanceDTO]
        """

        self._instances = instances

    @property
    def tracks(self) -> List[TrackDTO]:
        """Gets the tracks of this ReturnItemDTO.

        Список трек-кодов для почтовых отправлений.  # noqa: E501

        :return: The tracks of this ReturnItemDTO.
        :rtype: List[TrackDTO]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks: List[TrackDTO]):
        """Sets the tracks of this ReturnItemDTO.

        Список трек-кодов для почтовых отправлений.  # noqa: E501

        :param tracks: The tracks of this ReturnItemDTO.
        :type tracks: List[TrackDTO]
        """

        self._tracks = tracks
