from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.feedback_comment_author_dto import FeedbackCommentAuthorDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.feedback_comment_author_dto import FeedbackCommentAuthorDTO  # noqa: E501

class FeedbackCommentDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, parent_id=None, body=None, created_at=None, updated_at=None, author=None, children=None):  # noqa: E501
        """FeedbackCommentDTO - a model defined in OpenAPI

        :param id: The id of this FeedbackCommentDTO.  # noqa: E501
        :type id: int
        :param parent_id: The parent_id of this FeedbackCommentDTO.  # noqa: E501
        :type parent_id: int
        :param body: The body of this FeedbackCommentDTO.  # noqa: E501
        :type body: str
        :param created_at: The created_at of this FeedbackCommentDTO.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this FeedbackCommentDTO.  # noqa: E501
        :type updated_at: datetime
        :param author: The author of this FeedbackCommentDTO.  # noqa: E501
        :type author: FeedbackCommentAuthorDTO
        :param children: The children of this FeedbackCommentDTO.  # noqa: E501
        :type children: List[FeedbackCommentDTO]
        """
        self.openapi_types = {
            'id': int,
            'parent_id': int,
            'body': str,
            'created_at': datetime,
            'updated_at': datetime,
            'author': FeedbackCommentAuthorDTO,
            'children': List[FeedbackCommentDTO]
        }

        self.attribute_map = {
            'id': 'id',
            'parent_id': 'parentId',
            'body': 'body',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt',
            'author': 'author',
            'children': 'children'
        }

        self._id = id
        self._parent_id = parent_id
        self._body = body
        self._created_at = created_at
        self._updated_at = updated_at
        self._author = author
        self._children = children

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackCommentDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackCommentDTO of this FeedbackCommentDTO.  # noqa: E501
        :rtype: FeedbackCommentDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this FeedbackCommentDTO.

        Идентификатор ответа.  # noqa: E501

        :return: The id of this FeedbackCommentDTO.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this FeedbackCommentDTO.

        Идентификатор ответа.  # noqa: E501

        :param id: The id of this FeedbackCommentDTO.
        :type id: int
        """

        self._id = id

    @property
    def parent_id(self) -> int:
        """Gets the parent_id of this FeedbackCommentDTO.

        Идентификатор родительского ответа.  # noqa: E501

        :return: The parent_id of this FeedbackCommentDTO.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: int):
        """Sets the parent_id of this FeedbackCommentDTO.

        Идентификатор родительского ответа.  # noqa: E501

        :param parent_id: The parent_id of this FeedbackCommentDTO.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def body(self) -> str:
        """Gets the body of this FeedbackCommentDTO.

        Текст ответа.  # noqa: E501

        :return: The body of this FeedbackCommentDTO.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this FeedbackCommentDTO.

        Текст ответа.  # noqa: E501

        :param body: The body of this FeedbackCommentDTO.
        :type body: str
        """

        self._body = body

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this FeedbackCommentDTO.

        Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.   # noqa: E501

        :return: The created_at of this FeedbackCommentDTO.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this FeedbackCommentDTO.

        Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.   # noqa: E501

        :param created_at: The created_at of this FeedbackCommentDTO.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this FeedbackCommentDTO.

        Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.   # noqa: E501

        :return: The updated_at of this FeedbackCommentDTO.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this FeedbackCommentDTO.

        Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.   # noqa: E501

        :param updated_at: The updated_at of this FeedbackCommentDTO.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def author(self) -> FeedbackCommentAuthorDTO:
        """Gets the author of this FeedbackCommentDTO.


        :return: The author of this FeedbackCommentDTO.
        :rtype: FeedbackCommentAuthorDTO
        """
        return self._author

    @author.setter
    def author(self, author: FeedbackCommentAuthorDTO):
        """Sets the author of this FeedbackCommentDTO.


        :param author: The author of this FeedbackCommentDTO.
        :type author: FeedbackCommentAuthorDTO
        """

        self._author = author

    @property
    def children(self) -> List[FeedbackCommentDTO]:
        """Gets the children of this FeedbackCommentDTO.

        Дочерние ответы.  # noqa: E501

        :return: The children of this FeedbackCommentDTO.
        :rtype: List[FeedbackCommentDTO]
        """
        return self._children

    @children.setter
    def children(self, children: List[FeedbackCommentDTO]):
        """Sets the children of this FeedbackCommentDTO.

        Дочерние ответы.  # noqa: E501

        :param children: The children of this FeedbackCommentDTO.
        :type children: List[FeedbackCommentDTO]
        """

        self._children = children
