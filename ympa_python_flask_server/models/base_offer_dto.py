from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.age_dto import AgeDTO
from ympa_python_flask_server.models.offer_condition_dto import OfferConditionDTO
from ympa_python_flask_server.models.offer_manual_dto import OfferManualDTO
from ympa_python_flask_server.models.offer_param_dto import OfferParamDTO
from ympa_python_flask_server.models.offer_type import OfferType
from ympa_python_flask_server.models.offer_weight_dimensions_dto import OfferWeightDimensionsDTO
from ympa_python_flask_server.models.time_period_dto import TimePeriodDTO
import re
from ympa_python_flask_server import util

from ympa_python_flask_server.models.age_dto import AgeDTO  # noqa: E501
from ympa_python_flask_server.models.offer_condition_dto import OfferConditionDTO  # noqa: E501
from ympa_python_flask_server.models.offer_manual_dto import OfferManualDTO  # noqa: E501
from ympa_python_flask_server.models.offer_param_dto import OfferParamDTO  # noqa: E501
from ympa_python_flask_server.models.offer_type import OfferType  # noqa: E501
from ympa_python_flask_server.models.offer_weight_dimensions_dto import OfferWeightDimensionsDTO  # noqa: E501
from ympa_python_flask_server.models.time_period_dto import TimePeriodDTO  # noqa: E501
import re  # noqa: E501

class BaseOfferDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_id=None, name=None, market_category_id=None, category=None, pictures=None, videos=None, manuals=None, vendor=None, barcodes=None, description=None, manufacturer_countries=None, weight_dimensions=None, vendor_code=None, tags=None, shelf_life=None, life_time=None, guarantee_period=None, customs_commodity_code=None, certificates=None, box_count=None, condition=None, type=None, downloadable=None, adult=None, age=None, params=None):  # noqa: E501
        """BaseOfferDTO - a model defined in OpenAPI

        :param offer_id: The offer_id of this BaseOfferDTO.  # noqa: E501
        :type offer_id: str
        :param name: The name of this BaseOfferDTO.  # noqa: E501
        :type name: str
        :param market_category_id: The market_category_id of this BaseOfferDTO.  # noqa: E501
        :type market_category_id: int
        :param category: The category of this BaseOfferDTO.  # noqa: E501
        :type category: str
        :param pictures: The pictures of this BaseOfferDTO.  # noqa: E501
        :type pictures: List[str]
        :param videos: The videos of this BaseOfferDTO.  # noqa: E501
        :type videos: List[str]
        :param manuals: The manuals of this BaseOfferDTO.  # noqa: E501
        :type manuals: List[OfferManualDTO]
        :param vendor: The vendor of this BaseOfferDTO.  # noqa: E501
        :type vendor: str
        :param barcodes: The barcodes of this BaseOfferDTO.  # noqa: E501
        :type barcodes: List[str]
        :param description: The description of this BaseOfferDTO.  # noqa: E501
        :type description: str
        :param manufacturer_countries: The manufacturer_countries of this BaseOfferDTO.  # noqa: E501
        :type manufacturer_countries: List[str]
        :param weight_dimensions: The weight_dimensions of this BaseOfferDTO.  # noqa: E501
        :type weight_dimensions: OfferWeightDimensionsDTO
        :param vendor_code: The vendor_code of this BaseOfferDTO.  # noqa: E501
        :type vendor_code: str
        :param tags: The tags of this BaseOfferDTO.  # noqa: E501
        :type tags: List[str]
        :param shelf_life: The shelf_life of this BaseOfferDTO.  # noqa: E501
        :type shelf_life: TimePeriodDTO
        :param life_time: The life_time of this BaseOfferDTO.  # noqa: E501
        :type life_time: TimePeriodDTO
        :param guarantee_period: The guarantee_period of this BaseOfferDTO.  # noqa: E501
        :type guarantee_period: TimePeriodDTO
        :param customs_commodity_code: The customs_commodity_code of this BaseOfferDTO.  # noqa: E501
        :type customs_commodity_code: str
        :param certificates: The certificates of this BaseOfferDTO.  # noqa: E501
        :type certificates: List[str]
        :param box_count: The box_count of this BaseOfferDTO.  # noqa: E501
        :type box_count: int
        :param condition: The condition of this BaseOfferDTO.  # noqa: E501
        :type condition: OfferConditionDTO
        :param type: The type of this BaseOfferDTO.  # noqa: E501
        :type type: OfferType
        :param downloadable: The downloadable of this BaseOfferDTO.  # noqa: E501
        :type downloadable: bool
        :param adult: The adult of this BaseOfferDTO.  # noqa: E501
        :type adult: bool
        :param age: The age of this BaseOfferDTO.  # noqa: E501
        :type age: AgeDTO
        :param params: The params of this BaseOfferDTO.  # noqa: E501
        :type params: List[OfferParamDTO]
        """
        self.openapi_types = {
            'offer_id': str,
            'name': str,
            'market_category_id': int,
            'category': str,
            'pictures': List[str],
            'videos': List[str],
            'manuals': List[OfferManualDTO],
            'vendor': str,
            'barcodes': List[str],
            'description': str,
            'manufacturer_countries': List[str],
            'weight_dimensions': OfferWeightDimensionsDTO,
            'vendor_code': str,
            'tags': List[str],
            'shelf_life': TimePeriodDTO,
            'life_time': TimePeriodDTO,
            'guarantee_period': TimePeriodDTO,
            'customs_commodity_code': str,
            'certificates': List[str],
            'box_count': int,
            'condition': OfferConditionDTO,
            'type': OfferType,
            'downloadable': bool,
            'adult': bool,
            'age': AgeDTO,
            'params': List[OfferParamDTO]
        }

        self.attribute_map = {
            'offer_id': 'offerId',
            'name': 'name',
            'market_category_id': 'marketCategoryId',
            'category': 'category',
            'pictures': 'pictures',
            'videos': 'videos',
            'manuals': 'manuals',
            'vendor': 'vendor',
            'barcodes': 'barcodes',
            'description': 'description',
            'manufacturer_countries': 'manufacturerCountries',
            'weight_dimensions': 'weightDimensions',
            'vendor_code': 'vendorCode',
            'tags': 'tags',
            'shelf_life': 'shelfLife',
            'life_time': 'lifeTime',
            'guarantee_period': 'guaranteePeriod',
            'customs_commodity_code': 'customsCommodityCode',
            'certificates': 'certificates',
            'box_count': 'boxCount',
            'condition': 'condition',
            'type': 'type',
            'downloadable': 'downloadable',
            'adult': 'adult',
            'age': 'age',
            'params': 'params'
        }

        self._offer_id = offer_id
        self._name = name
        self._market_category_id = market_category_id
        self._category = category
        self._pictures = pictures
        self._videos = videos
        self._manuals = manuals
        self._vendor = vendor
        self._barcodes = barcodes
        self._description = description
        self._manufacturer_countries = manufacturer_countries
        self._weight_dimensions = weight_dimensions
        self._vendor_code = vendor_code
        self._tags = tags
        self._shelf_life = shelf_life
        self._life_time = life_time
        self._guarantee_period = guarantee_period
        self._customs_commodity_code = customs_commodity_code
        self._certificates = certificates
        self._box_count = box_count
        self._condition = condition
        self._type = type
        self._downloadable = downloadable
        self._adult = adult
        self._age = age
        self._params = params

    @classmethod
    def from_dict(cls, dikt) -> 'BaseOfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseOfferDTO of this BaseOfferDTO.  # noqa: E501
        :rtype: BaseOfferDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_id(self) -> str:
        """Gets the offer_id of this BaseOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The offer_id of this BaseOfferDTO.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id: str):
        """Sets the offer_id of this BaseOfferDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param offer_id: The offer_id of this BaseOfferDTO.
        :type offer_id: str
        """
        if offer_id is None:
            raise ValueError("Invalid value for `offer_id`, must not be `None`")  # noqa: E501
        if offer_id is not None and len(offer_id) > 255:
            raise ValueError("Invalid value for `offer_id`, length must be less than or equal to `255`")  # noqa: E501
        if offer_id is not None and len(offer_id) < 1:
            raise ValueError("Invalid value for `offer_id`, length must be greater than or equal to `1`")  # noqa: E501
        if offer_id is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', offer_id):  # noqa: E501
            raise ValueError("Invalid value for `offer_id`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._offer_id = offer_id

    @property
    def name(self) -> str:
        """Gets the name of this BaseOfferDTO.

        Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)   # noqa: E501

        :return: The name of this BaseOfferDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BaseOfferDTO.

        Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)   # noqa: E501

        :param name: The name of this BaseOfferDTO.
        :type name: str
        """
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501

        self._name = name

    @property
    def market_category_id(self) -> int:
        """Gets the market_category_id of this BaseOfferDTO.

        Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).   # noqa: E501

        :return: The market_category_id of this BaseOfferDTO.
        :rtype: int
        """
        return self._market_category_id

    @market_category_id.setter
    def market_category_id(self, market_category_id: int):
        """Sets the market_category_id of this BaseOfferDTO.

        Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).   # noqa: E501

        :param market_category_id: The market_category_id of this BaseOfferDTO.
        :type market_category_id: int
        """

        self._market_category_id = market_category_id

    @property
    def category(self) -> str:
        """Gets the category of this BaseOfferDTO.

        Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.   # noqa: E501

        :return: The category of this BaseOfferDTO.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this BaseOfferDTO.

        Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.   # noqa: E501

        :param category: The category of this BaseOfferDTO.
        :type category: str
        """

        self._category = category

    @property
    def pictures(self) -> List[str]:
        """Gets the pictures of this BaseOfferDTO.

        Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)   # noqa: E501

        :return: The pictures of this BaseOfferDTO.
        :rtype: List[str]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures: List[str]):
        """Sets the pictures of this BaseOfferDTO.

        Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)   # noqa: E501

        :param pictures: The pictures of this BaseOfferDTO.
        :type pictures: List[str]
        """

        self._pictures = pictures

    @property
    def videos(self) -> List[str]:
        """Gets the videos of this BaseOfferDTO.

        Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)   # noqa: E501

        :return: The videos of this BaseOfferDTO.
        :rtype: List[str]
        """
        return self._videos

    @videos.setter
    def videos(self, videos: List[str]):
        """Sets the videos of this BaseOfferDTO.

        Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)   # noqa: E501

        :param videos: The videos of this BaseOfferDTO.
        :type videos: List[str]
        """
        if videos is not None and len(videos) > 6:
            raise ValueError("Invalid value for `videos`, number of items must be less than or equal to `6`")  # noqa: E501

        self._videos = videos

    @property
    def manuals(self) -> List[OfferManualDTO]:
        """Gets the manuals of this BaseOfferDTO.

        Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся.   # noqa: E501

        :return: The manuals of this BaseOfferDTO.
        :rtype: List[OfferManualDTO]
        """
        return self._manuals

    @manuals.setter
    def manuals(self, manuals: List[OfferManualDTO]):
        """Sets the manuals of this BaseOfferDTO.

        Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся.   # noqa: E501

        :param manuals: The manuals of this BaseOfferDTO.
        :type manuals: List[OfferManualDTO]
        """
        if manuals is not None and len(manuals) > 6:
            raise ValueError("Invalid value for `manuals`, number of items must be less than or equal to `6`")  # noqa: E501

        self._manuals = manuals

    @property
    def vendor(self) -> str:
        """Gets the vendor of this BaseOfferDTO.

        Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.  # noqa: E501

        :return: The vendor of this BaseOfferDTO.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor: str):
        """Sets the vendor of this BaseOfferDTO.

        Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.  # noqa: E501

        :param vendor: The vendor of this BaseOfferDTO.
        :type vendor: str
        """

        self._vendor = vendor

    @property
    def barcodes(self) -> List[str]:
        """Gets the barcodes of this BaseOfferDTO.

        Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)    # noqa: E501

        :return: The barcodes of this BaseOfferDTO.
        :rtype: List[str]
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes: List[str]):
        """Sets the barcodes of this BaseOfferDTO.

        Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)    # noqa: E501

        :param barcodes: The barcodes of this BaseOfferDTO.
        :type barcodes: List[str]
        """

        self._barcodes = barcodes

    @property
    def description(self) -> str:
        """Gets the description of this BaseOfferDTO.

        Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)   # noqa: E501

        :return: The description of this BaseOfferDTO.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BaseOfferDTO.

        Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)   # noqa: E501

        :param description: The description of this BaseOfferDTO.
        :type description: str
        """
        if description is not None and len(description) > 6000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `6000`")  # noqa: E501

        self._description = description

    @property
    def manufacturer_countries(self) -> List[str]:
        """Gets the manufacturer_countries of this BaseOfferDTO.

        Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).   # noqa: E501

        :return: The manufacturer_countries of this BaseOfferDTO.
        :rtype: List[str]
        """
        return self._manufacturer_countries

    @manufacturer_countries.setter
    def manufacturer_countries(self, manufacturer_countries: List[str]):
        """Sets the manufacturer_countries of this BaseOfferDTO.

        Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).   # noqa: E501

        :param manufacturer_countries: The manufacturer_countries of this BaseOfferDTO.
        :type manufacturer_countries: List[str]
        """

        self._manufacturer_countries = manufacturer_countries

    @property
    def weight_dimensions(self) -> OfferWeightDimensionsDTO:
        """Gets the weight_dimensions of this BaseOfferDTO.


        :return: The weight_dimensions of this BaseOfferDTO.
        :rtype: OfferWeightDimensionsDTO
        """
        return self._weight_dimensions

    @weight_dimensions.setter
    def weight_dimensions(self, weight_dimensions: OfferWeightDimensionsDTO):
        """Sets the weight_dimensions of this BaseOfferDTO.


        :param weight_dimensions: The weight_dimensions of this BaseOfferDTO.
        :type weight_dimensions: OfferWeightDimensionsDTO
        """

        self._weight_dimensions = weight_dimensions

    @property
    def vendor_code(self) -> str:
        """Gets the vendor_code of this BaseOfferDTO.

        Артикул товара от производителя.  # noqa: E501

        :return: The vendor_code of this BaseOfferDTO.
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code: str):
        """Sets the vendor_code of this BaseOfferDTO.

        Артикул товара от производителя.  # noqa: E501

        :param vendor_code: The vendor_code of this BaseOfferDTO.
        :type vendor_code: str
        """

        self._vendor_code = vendor_code

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this BaseOfferDTO.

        Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов.   # noqa: E501

        :return: The tags of this BaseOfferDTO.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this BaseOfferDTO.

        Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов.   # noqa: E501

        :param tags: The tags of this BaseOfferDTO.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def shelf_life(self) -> TimePeriodDTO:
        """Gets the shelf_life of this BaseOfferDTO.


        :return: The shelf_life of this BaseOfferDTO.
        :rtype: TimePeriodDTO
        """
        return self._shelf_life

    @shelf_life.setter
    def shelf_life(self, shelf_life: TimePeriodDTO):
        """Sets the shelf_life of this BaseOfferDTO.


        :param shelf_life: The shelf_life of this BaseOfferDTO.
        :type shelf_life: TimePeriodDTO
        """

        self._shelf_life = shelf_life

    @property
    def life_time(self) -> TimePeriodDTO:
        """Gets the life_time of this BaseOfferDTO.


        :return: The life_time of this BaseOfferDTO.
        :rtype: TimePeriodDTO
        """
        return self._life_time

    @life_time.setter
    def life_time(self, life_time: TimePeriodDTO):
        """Sets the life_time of this BaseOfferDTO.


        :param life_time: The life_time of this BaseOfferDTO.
        :type life_time: TimePeriodDTO
        """

        self._life_time = life_time

    @property
    def guarantee_period(self) -> TimePeriodDTO:
        """Gets the guarantee_period of this BaseOfferDTO.


        :return: The guarantee_period of this BaseOfferDTO.
        :rtype: TimePeriodDTO
        """
        return self._guarantee_period

    @guarantee_period.setter
    def guarantee_period(self, guarantee_period: TimePeriodDTO):
        """Sets the guarantee_period of this BaseOfferDTO.


        :param guarantee_period: The guarantee_period of this BaseOfferDTO.
        :type guarantee_period: TimePeriodDTO
        """

        self._guarantee_period = guarantee_period

    @property
    def customs_commodity_code(self) -> str:
        """Gets the customs_commodity_code of this BaseOfferDTO.

        Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.   # noqa: E501

        :return: The customs_commodity_code of this BaseOfferDTO.
        :rtype: str
        """
        return self._customs_commodity_code

    @customs_commodity_code.setter
    def customs_commodity_code(self, customs_commodity_code: str):
        """Sets the customs_commodity_code of this BaseOfferDTO.

        Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.   # noqa: E501

        :param customs_commodity_code: The customs_commodity_code of this BaseOfferDTO.
        :type customs_commodity_code: str
        """

        self._customs_commodity_code = customs_commodity_code

    @property
    def certificates(self) -> List[str]:
        """Gets the certificates of this BaseOfferDTO.

        Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).   # noqa: E501

        :return: The certificates of this BaseOfferDTO.
        :rtype: List[str]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates: List[str]):
        """Sets the certificates of this BaseOfferDTO.

        Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).   # noqa: E501

        :param certificates: The certificates of this BaseOfferDTO.
        :type certificates: List[str]
        """

        self._certificates = certificates

    @property
    def box_count(self) -> int:
        """Gets the box_count of this BaseOfferDTO.

        Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.   # noqa: E501

        :return: The box_count of this BaseOfferDTO.
        :rtype: int
        """
        return self._box_count

    @box_count.setter
    def box_count(self, box_count: int):
        """Sets the box_count of this BaseOfferDTO.

        Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.   # noqa: E501

        :param box_count: The box_count of this BaseOfferDTO.
        :type box_count: int
        """

        self._box_count = box_count

    @property
    def condition(self) -> OfferConditionDTO:
        """Gets the condition of this BaseOfferDTO.


        :return: The condition of this BaseOfferDTO.
        :rtype: OfferConditionDTO
        """
        return self._condition

    @condition.setter
    def condition(self, condition: OfferConditionDTO):
        """Sets the condition of this BaseOfferDTO.


        :param condition: The condition of this BaseOfferDTO.
        :type condition: OfferConditionDTO
        """

        self._condition = condition

    @property
    def type(self) -> OfferType:
        """Gets the type of this BaseOfferDTO.


        :return: The type of this BaseOfferDTO.
        :rtype: OfferType
        """
        return self._type

    @type.setter
    def type(self, type: OfferType):
        """Sets the type of this BaseOfferDTO.


        :param type: The type of this BaseOfferDTO.
        :type type: OfferType
        """

        self._type = type

    @property
    def downloadable(self) -> bool:
        """Gets the downloadable of this BaseOfferDTO.

        Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)   # noqa: E501

        :return: The downloadable of this BaseOfferDTO.
        :rtype: bool
        """
        return self._downloadable

    @downloadable.setter
    def downloadable(self, downloadable: bool):
        """Sets the downloadable of this BaseOfferDTO.

        Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)   # noqa: E501

        :param downloadable: The downloadable of this BaseOfferDTO.
        :type downloadable: bool
        """

        self._downloadable = downloadable

    @property
    def adult(self) -> bool:
        """Gets the adult of this BaseOfferDTO.

        Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.   # noqa: E501

        :return: The adult of this BaseOfferDTO.
        :rtype: bool
        """
        return self._adult

    @adult.setter
    def adult(self, adult: bool):
        """Sets the adult of this BaseOfferDTO.

        Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.   # noqa: E501

        :param adult: The adult of this BaseOfferDTO.
        :type adult: bool
        """

        self._adult = adult

    @property
    def age(self) -> AgeDTO:
        """Gets the age of this BaseOfferDTO.


        :return: The age of this BaseOfferDTO.
        :rtype: AgeDTO
        """
        return self._age

    @age.setter
    def age(self, age: AgeDTO):
        """Sets the age of this BaseOfferDTO.


        :param age: The age of this BaseOfferDTO.
        :type age: AgeDTO
        """

        self._age = age

    @property
    def params(self) -> List[OfferParamDTO]:
        """Gets the params of this BaseOfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.   # noqa: E501

        :return: The params of this BaseOfferDTO.
        :rtype: List[OfferParamDTO]
        """
        return self._params

    @params.setter
    def params(self, params: List[OfferParamDTO]):
        """Sets the params of this BaseOfferDTO.

        {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.   # noqa: E501

        :param params: The params of this BaseOfferDTO.
        :type params: List[OfferParamDTO]
        """

        self._params = params
