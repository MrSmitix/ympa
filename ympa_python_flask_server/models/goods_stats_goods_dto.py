from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.goods_stats_warehouse_dto import GoodsStatsWarehouseDTO
from ympa_python_flask_server.models.goods_stats_weight_dimensions_dto import GoodsStatsWeightDimensionsDTO
from ympa_python_flask_server.models.tariff_dto import TariffDTO
import re
from ympa_python_flask_server import util

from ympa_python_flask_server.models.goods_stats_warehouse_dto import GoodsStatsWarehouseDTO  # noqa: E501
from ympa_python_flask_server.models.goods_stats_weight_dimensions_dto import GoodsStatsWeightDimensionsDTO  # noqa: E501
from ympa_python_flask_server.models.tariff_dto import TariffDTO  # noqa: E501
import re  # noqa: E501

class GoodsStatsGoodsDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shop_sku=None, market_sku=None, name=None, price=None, category_id=None, category_name=None, weight_dimensions=None, warehouses=None, tariffs=None, pictures=None):  # noqa: E501
        """GoodsStatsGoodsDTO - a model defined in OpenAPI

        :param shop_sku: The shop_sku of this GoodsStatsGoodsDTO.  # noqa: E501
        :type shop_sku: str
        :param market_sku: The market_sku of this GoodsStatsGoodsDTO.  # noqa: E501
        :type market_sku: int
        :param name: The name of this GoodsStatsGoodsDTO.  # noqa: E501
        :type name: str
        :param price: The price of this GoodsStatsGoodsDTO.  # noqa: E501
        :type price: float
        :param category_id: The category_id of this GoodsStatsGoodsDTO.  # noqa: E501
        :type category_id: int
        :param category_name: The category_name of this GoodsStatsGoodsDTO.  # noqa: E501
        :type category_name: str
        :param weight_dimensions: The weight_dimensions of this GoodsStatsGoodsDTO.  # noqa: E501
        :type weight_dimensions: GoodsStatsWeightDimensionsDTO
        :param warehouses: The warehouses of this GoodsStatsGoodsDTO.  # noqa: E501
        :type warehouses: List[GoodsStatsWarehouseDTO]
        :param tariffs: The tariffs of this GoodsStatsGoodsDTO.  # noqa: E501
        :type tariffs: List[TariffDTO]
        :param pictures: The pictures of this GoodsStatsGoodsDTO.  # noqa: E501
        :type pictures: List[str]
        """
        self.openapi_types = {
            'shop_sku': str,
            'market_sku': int,
            'name': str,
            'price': float,
            'category_id': int,
            'category_name': str,
            'weight_dimensions': GoodsStatsWeightDimensionsDTO,
            'warehouses': List[GoodsStatsWarehouseDTO],
            'tariffs': List[TariffDTO],
            'pictures': List[str]
        }

        self.attribute_map = {
            'shop_sku': 'shopSku',
            'market_sku': 'marketSku',
            'name': 'name',
            'price': 'price',
            'category_id': 'categoryId',
            'category_name': 'categoryName',
            'weight_dimensions': 'weightDimensions',
            'warehouses': 'warehouses',
            'tariffs': 'tariffs',
            'pictures': 'pictures'
        }

        self._shop_sku = shop_sku
        self._market_sku = market_sku
        self._name = name
        self._price = price
        self._category_id = category_id
        self._category_name = category_name
        self._weight_dimensions = weight_dimensions
        self._warehouses = warehouses
        self._tariffs = tariffs
        self._pictures = pictures

    @classmethod
    def from_dict(cls, dikt) -> 'GoodsStatsGoodsDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoodsStatsGoodsDTO of this GoodsStatsGoodsDTO.  # noqa: E501
        :rtype: GoodsStatsGoodsDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shop_sku(self) -> str:
        """Gets the shop_sku of this GoodsStatsGoodsDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :return: The shop_sku of this GoodsStatsGoodsDTO.
        :rtype: str
        """
        return self._shop_sku

    @shop_sku.setter
    def shop_sku(self, shop_sku: str):
        """Sets the shop_sku of this GoodsStatsGoodsDTO.

        Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)   # noqa: E501

        :param shop_sku: The shop_sku of this GoodsStatsGoodsDTO.
        :type shop_sku: str
        """
        if shop_sku is not None and len(shop_sku) > 255:
            raise ValueError("Invalid value for `shop_sku`, length must be less than or equal to `255`")  # noqa: E501
        if shop_sku is not None and len(shop_sku) < 1:
            raise ValueError("Invalid value for `shop_sku`, length must be greater than or equal to `1`")  # noqa: E501
        if shop_sku is not None and not re.search(r'^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$', shop_sku):  # noqa: E501
            raise ValueError("Invalid value for `shop_sku`, must be a follow pattern or equal to `/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/`")  # noqa: E501

        self._shop_sku = shop_sku

    @property
    def market_sku(self) -> int:
        """Gets the market_sku of this GoodsStatsGoodsDTO.

        SKU на Маркете.  # noqa: E501

        :return: The market_sku of this GoodsStatsGoodsDTO.
        :rtype: int
        """
        return self._market_sku

    @market_sku.setter
    def market_sku(self, market_sku: int):
        """Sets the market_sku of this GoodsStatsGoodsDTO.

        SKU на Маркете.  # noqa: E501

        :param market_sku: The market_sku of this GoodsStatsGoodsDTO.
        :type market_sku: int
        """

        self._market_sku = market_sku

    @property
    def name(self) -> str:
        """Gets the name of this GoodsStatsGoodsDTO.

        Название товара.  # noqa: E501

        :return: The name of this GoodsStatsGoodsDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GoodsStatsGoodsDTO.

        Название товара.  # noqa: E501

        :param name: The name of this GoodsStatsGoodsDTO.
        :type name: str
        """

        self._name = name

    @property
    def price(self) -> float:
        """Gets the price of this GoodsStatsGoodsDTO.

        Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).  # noqa: E501

        :return: The price of this GoodsStatsGoodsDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this GoodsStatsGoodsDTO.

        Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).  # noqa: E501

        :param price: The price of this GoodsStatsGoodsDTO.
        :type price: float
        """

        self._price = price

    @property
    def category_id(self) -> int:
        """Gets the category_id of this GoodsStatsGoodsDTO.

        Идентификатор категории товара на Маркете.  # noqa: E501

        :return: The category_id of this GoodsStatsGoodsDTO.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this GoodsStatsGoodsDTO.

        Идентификатор категории товара на Маркете.  # noqa: E501

        :param category_id: The category_id of this GoodsStatsGoodsDTO.
        :type category_id: int
        """

        self._category_id = category_id

    @property
    def category_name(self) -> str:
        """Gets the category_name of this GoodsStatsGoodsDTO.

        Название категории товара на Маркете.  # noqa: E501

        :return: The category_name of this GoodsStatsGoodsDTO.
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name: str):
        """Sets the category_name of this GoodsStatsGoodsDTO.

        Название категории товара на Маркете.  # noqa: E501

        :param category_name: The category_name of this GoodsStatsGoodsDTO.
        :type category_name: str
        """

        self._category_name = category_name

    @property
    def weight_dimensions(self) -> GoodsStatsWeightDimensionsDTO:
        """Gets the weight_dimensions of this GoodsStatsGoodsDTO.


        :return: The weight_dimensions of this GoodsStatsGoodsDTO.
        :rtype: GoodsStatsWeightDimensionsDTO
        """
        return self._weight_dimensions

    @weight_dimensions.setter
    def weight_dimensions(self, weight_dimensions: GoodsStatsWeightDimensionsDTO):
        """Sets the weight_dimensions of this GoodsStatsGoodsDTO.


        :param weight_dimensions: The weight_dimensions of this GoodsStatsGoodsDTO.
        :type weight_dimensions: GoodsStatsWeightDimensionsDTO
        """

        self._weight_dimensions = weight_dimensions

    @property
    def warehouses(self) -> List[GoodsStatsWarehouseDTO]:
        """Gets the warehouses of this GoodsStatsGoodsDTO.

        Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе.   # noqa: E501

        :return: The warehouses of this GoodsStatsGoodsDTO.
        :rtype: List[GoodsStatsWarehouseDTO]
        """
        return self._warehouses

    @warehouses.setter
    def warehouses(self, warehouses: List[GoodsStatsWarehouseDTO]):
        """Sets the warehouses of this GoodsStatsGoodsDTO.

        Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе.   # noqa: E501

        :param warehouses: The warehouses of this GoodsStatsGoodsDTO.
        :type warehouses: List[GoodsStatsWarehouseDTO]
        """

        self._warehouses = warehouses

    @property
    def tariffs(self) -> List[TariffDTO]:
        """Gets the tariffs of this GoodsStatsGoodsDTO.

        Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).   # noqa: E501

        :return: The tariffs of this GoodsStatsGoodsDTO.
        :rtype: List[TariffDTO]
        """
        return self._tariffs

    @tariffs.setter
    def tariffs(self, tariffs: List[TariffDTO]):
        """Sets the tariffs of this GoodsStatsGoodsDTO.

        Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).   # noqa: E501

        :param tariffs: The tariffs of this GoodsStatsGoodsDTO.
        :type tariffs: List[TariffDTO]
        """

        self._tariffs = tariffs

    @property
    def pictures(self) -> List[str]:
        """Gets the pictures of this GoodsStatsGoodsDTO.

        Ссылки (URL) изображений товара в хорошем качестве.  # noqa: E501

        :return: The pictures of this GoodsStatsGoodsDTO.
        :rtype: List[str]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures: List[str]):
        """Sets the pictures of this GoodsStatsGoodsDTO.

        Ссылки (URL) изображений товара в хорошем качестве.  # noqa: E501

        :param pictures: The pictures of this GoodsStatsGoodsDTO.
        :type pictures: List[str]
        """

        self._pictures = pictures
