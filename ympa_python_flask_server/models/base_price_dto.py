from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.currency_type import CurrencyType
from ympa_python_flask_server import util

from ympa_python_flask_server.models.currency_type import CurrencyType  # noqa: E501

class BasePriceDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, currency_id=None):  # noqa: E501
        """BasePriceDTO - a model defined in OpenAPI

        :param value: The value of this BasePriceDTO.  # noqa: E501
        :type value: float
        :param currency_id: The currency_id of this BasePriceDTO.  # noqa: E501
        :type currency_id: CurrencyType
        """
        self.openapi_types = {
            'value': float,
            'currency_id': CurrencyType
        }

        self.attribute_map = {
            'value': 'value',
            'currency_id': 'currencyId'
        }

        self._value = value
        self._currency_id = currency_id

    @classmethod
    def from_dict(cls, dikt) -> 'BasePriceDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BasePriceDTO of this BasePriceDTO.  # noqa: E501
        :rtype: BasePriceDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> float:
        """Gets the value of this BasePriceDTO.

        Значение.  # noqa: E501

        :return: The value of this BasePriceDTO.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this BasePriceDTO.

        Значение.  # noqa: E501

        :param value: The value of this BasePriceDTO.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and value <= 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than `0`")  # noqa: E501

        self._value = value

    @property
    def currency_id(self) -> CurrencyType:
        """Gets the currency_id of this BasePriceDTO.


        :return: The currency_id of this BasePriceDTO.
        :rtype: CurrencyType
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id: CurrencyType):
        """Sets the currency_id of this BasePriceDTO.


        :param currency_id: The currency_id of this BasePriceDTO.
        :type currency_id: CurrencyType
        """
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id
