from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server import util


class CalculateTariffsOfferDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_id=None, price=None, length=None, width=None, height=None, weight=None, quantity=1):  # noqa: E501
        """CalculateTariffsOfferDTO - a model defined in OpenAPI

        :param category_id: The category_id of this CalculateTariffsOfferDTO.  # noqa: E501
        :type category_id: int
        :param price: The price of this CalculateTariffsOfferDTO.  # noqa: E501
        :type price: float
        :param length: The length of this CalculateTariffsOfferDTO.  # noqa: E501
        :type length: float
        :param width: The width of this CalculateTariffsOfferDTO.  # noqa: E501
        :type width: float
        :param height: The height of this CalculateTariffsOfferDTO.  # noqa: E501
        :type height: float
        :param weight: The weight of this CalculateTariffsOfferDTO.  # noqa: E501
        :type weight: float
        :param quantity: The quantity of this CalculateTariffsOfferDTO.  # noqa: E501
        :type quantity: int
        """
        self.openapi_types = {
            'category_id': int,
            'price': float,
            'length': float,
            'width': float,
            'height': float,
            'weight': float,
            'quantity': int
        }

        self.attribute_map = {
            'category_id': 'categoryId',
            'price': 'price',
            'length': 'length',
            'width': 'width',
            'height': 'height',
            'weight': 'weight',
            'quantity': 'quantity'
        }

        self._category_id = category_id
        self._price = price
        self._length = length
        self._width = width
        self._height = height
        self._weight = weight
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt) -> 'CalculateTariffsOfferDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CalculateTariffsOfferDTO of this CalculateTariffsOfferDTO.  # noqa: E501
        :rtype: CalculateTariffsOfferDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_id(self) -> int:
        """Gets the category_id of this CalculateTariffsOfferDTO.

        Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).   # noqa: E501

        :return: The category_id of this CalculateTariffsOfferDTO.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id: int):
        """Sets the category_id of this CalculateTariffsOfferDTO.

        Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).   # noqa: E501

        :param category_id: The category_id of this CalculateTariffsOfferDTO.
        :type category_id: int
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501
        if category_id is not None and category_id <= 0:  # noqa: E501
            raise ValueError("Invalid value for `category_id`, must be a value greater than `0`")  # noqa: E501

        self._category_id = category_id

    @property
    def price(self) -> float:
        """Gets the price of this CalculateTariffsOfferDTO.

        Цена на товар в рублях.  # noqa: E501

        :return: The price of this CalculateTariffsOfferDTO.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this CalculateTariffsOfferDTO.

        Цена на товар в рублях.  # noqa: E501

        :param price: The price of this CalculateTariffsOfferDTO.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501
        if price is not None and price <= 0:  # noqa: E501
            raise ValueError("Invalid value for `price`, must be a value greater than `0`")  # noqa: E501

        self._price = price

    @property
    def length(self) -> float:
        """Gets the length of this CalculateTariffsOfferDTO.

        Длина товара в сантиметрах.  # noqa: E501

        :return: The length of this CalculateTariffsOfferDTO.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length: float):
        """Sets the length of this CalculateTariffsOfferDTO.

        Длина товара в сантиметрах.  # noqa: E501

        :param length: The length of this CalculateTariffsOfferDTO.
        :type length: float
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501
        if length is not None and length <= 0:  # noqa: E501
            raise ValueError("Invalid value for `length`, must be a value greater than `0`")  # noqa: E501

        self._length = length

    @property
    def width(self) -> float:
        """Gets the width of this CalculateTariffsOfferDTO.

        Ширина товара в сантиметрах.  # noqa: E501

        :return: The width of this CalculateTariffsOfferDTO.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width: float):
        """Sets the width of this CalculateTariffsOfferDTO.

        Ширина товара в сантиметрах.  # noqa: E501

        :param width: The width of this CalculateTariffsOfferDTO.
        :type width: float
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501
        if width is not None and width <= 0:  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than `0`")  # noqa: E501

        self._width = width

    @property
    def height(self) -> float:
        """Gets the height of this CalculateTariffsOfferDTO.

        Высота товара в сантиметрах.  # noqa: E501

        :return: The height of this CalculateTariffsOfferDTO.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this CalculateTariffsOfferDTO.

        Высота товара в сантиметрах.  # noqa: E501

        :param height: The height of this CalculateTariffsOfferDTO.
        :type height: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501
        if height is not None and height <= 0:  # noqa: E501
            raise ValueError("Invalid value for `height`, must be a value greater than `0`")  # noqa: E501

        self._height = height

    @property
    def weight(self) -> float:
        """Gets the weight of this CalculateTariffsOfferDTO.

        Вес товара в килограммах.  # noqa: E501

        :return: The weight of this CalculateTariffsOfferDTO.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this CalculateTariffsOfferDTO.

        Вес товара в килограммах.  # noqa: E501

        :param weight: The weight of this CalculateTariffsOfferDTO.
        :type weight: float
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501
        if weight is not None and weight <= 0:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than `0`")  # noqa: E501

        self._weight = weight

    @property
    def quantity(self) -> int:
        """Gets the quantity of this CalculateTariffsOfferDTO.

        Квант продажи — количество единиц товара в одном товарном предложении.  # noqa: E501

        :return: The quantity of this CalculateTariffsOfferDTO.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this CalculateTariffsOfferDTO.

        Квант продажи — количество единиц товара в одном товарном предложении.  # noqa: E501

        :param quantity: The quantity of this CalculateTariffsOfferDTO.
        :type quantity: int
        """
        if quantity is not None and quantity < 1:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `1`")  # noqa: E501

        self._quantity = quantity
