from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server import util


class ParameterValueDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_id=None, unit_id=None, value_id=None, value=None):  # noqa: E501
        """ParameterValueDTO - a model defined in OpenAPI

        :param parameter_id: The parameter_id of this ParameterValueDTO.  # noqa: E501
        :type parameter_id: int
        :param unit_id: The unit_id of this ParameterValueDTO.  # noqa: E501
        :type unit_id: int
        :param value_id: The value_id of this ParameterValueDTO.  # noqa: E501
        :type value_id: int
        :param value: The value of this ParameterValueDTO.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'parameter_id': int,
            'unit_id': int,
            'value_id': int,
            'value': str
        }

        self.attribute_map = {
            'parameter_id': 'parameterId',
            'unit_id': 'unitId',
            'value_id': 'valueId',
            'value': 'value'
        }

        self._parameter_id = parameter_id
        self._unit_id = unit_id
        self._value_id = value_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'ParameterValueDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParameterValueDTO of this ParameterValueDTO.  # noqa: E501
        :rtype: ParameterValueDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_id(self) -> int:
        """Gets the parameter_id of this ParameterValueDTO.

        Идентификатор характеристики.  # noqa: E501

        :return: The parameter_id of this ParameterValueDTO.
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id: int):
        """Sets the parameter_id of this ParameterValueDTO.

        Идентификатор характеристики.  # noqa: E501

        :param parameter_id: The parameter_id of this ParameterValueDTO.
        :type parameter_id: int
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")  # noqa: E501

        self._parameter_id = parameter_id

    @property
    def unit_id(self) -> int:
        """Gets the unit_id of this ParameterValueDTO.

        Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.  # noqa: E501

        :return: The unit_id of this ParameterValueDTO.
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id: int):
        """Sets the unit_id of this ParameterValueDTO.

        Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.  # noqa: E501

        :param unit_id: The unit_id of this ParameterValueDTO.
        :type unit_id: int
        """

        self._unit_id = unit_id

    @property
    def value_id(self) -> int:
        """Gets the value_id of this ParameterValueDTO.

        Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`.   # noqa: E501

        :return: The value_id of this ParameterValueDTO.
        :rtype: int
        """
        return self._value_id

    @value_id.setter
    def value_id(self, value_id: int):
        """Sets the value_id of this ParameterValueDTO.

        Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`.   # noqa: E501

        :param value_id: The value_id of this ParameterValueDTO.
        :type value_id: int
        """

        self._value_id = value_id

    @property
    def value(self) -> str:
        """Gets the value of this ParameterValueDTO.

        Значение.  # noqa: E501

        :return: The value of this ParameterValueDTO.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ParameterValueDTO.

        Значение.  # noqa: E501

        :param value: The value of this ParameterValueDTO.
        :type value: str
        """

        self._value = value
