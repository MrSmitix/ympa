from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server import util


class GetGoodsFeedbackCommentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feedback_id=None):  # noqa: E501
        """GetGoodsFeedbackCommentsRequest - a model defined in OpenAPI

        :param feedback_id: The feedback_id of this GetGoodsFeedbackCommentsRequest.  # noqa: E501
        :type feedback_id: int
        """
        self.openapi_types = {
            'feedback_id': int
        }

        self.attribute_map = {
            'feedback_id': 'feedbackId'
        }

        self._feedback_id = feedback_id

    @classmethod
    def from_dict(cls, dikt) -> 'GetGoodsFeedbackCommentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetGoodsFeedbackCommentsRequest of this GetGoodsFeedbackCommentsRequest.  # noqa: E501
        :rtype: GetGoodsFeedbackCommentsRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feedback_id(self) -> int:
        """Gets the feedback_id of this GetGoodsFeedbackCommentsRequest.

        Идентификатор отзыва.   # noqa: E501

        :return: The feedback_id of this GetGoodsFeedbackCommentsRequest.
        :rtype: int
        """
        return self._feedback_id

    @feedback_id.setter
    def feedback_id(self, feedback_id: int):
        """Sets the feedback_id of this GetGoodsFeedbackCommentsRequest.

        Идентификатор отзыва.   # noqa: E501

        :param feedback_id: The feedback_id of this GetGoodsFeedbackCommentsRequest.
        :type feedback_id: int
        """
        if feedback_id is None:
            raise ValueError("Invalid value for `feedback_id`, must not be `None`")  # noqa: E501

        self._feedback_id = feedback_id
