from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.warehouse_dto import WarehouseDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.warehouse_dto import WarehouseDTO  # noqa: E501

class WarehouseGroupDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, main_warehouse=None, warehouses=None):  # noqa: E501
        """WarehouseGroupDTO - a model defined in OpenAPI

        :param name: The name of this WarehouseGroupDTO.  # noqa: E501
        :type name: str
        :param main_warehouse: The main_warehouse of this WarehouseGroupDTO.  # noqa: E501
        :type main_warehouse: WarehouseDTO
        :param warehouses: The warehouses of this WarehouseGroupDTO.  # noqa: E501
        :type warehouses: List[WarehouseDTO]
        """
        self.openapi_types = {
            'name': str,
            'main_warehouse': WarehouseDTO,
            'warehouses': List[WarehouseDTO]
        }

        self.attribute_map = {
            'name': 'name',
            'main_warehouse': 'mainWarehouse',
            'warehouses': 'warehouses'
        }

        self._name = name
        self._main_warehouse = main_warehouse
        self._warehouses = warehouses

    @classmethod
    def from_dict(cls, dikt) -> 'WarehouseGroupDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WarehouseGroupDTO of this WarehouseGroupDTO.  # noqa: E501
        :rtype: WarehouseGroupDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this WarehouseGroupDTO.

        Название группы складов.  # noqa: E501

        :return: The name of this WarehouseGroupDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this WarehouseGroupDTO.

        Название группы складов.  # noqa: E501

        :param name: The name of this WarehouseGroupDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def main_warehouse(self) -> WarehouseDTO:
        """Gets the main_warehouse of this WarehouseGroupDTO.


        :return: The main_warehouse of this WarehouseGroupDTO.
        :rtype: WarehouseDTO
        """
        return self._main_warehouse

    @main_warehouse.setter
    def main_warehouse(self, main_warehouse: WarehouseDTO):
        """Sets the main_warehouse of this WarehouseGroupDTO.


        :param main_warehouse: The main_warehouse of this WarehouseGroupDTO.
        :type main_warehouse: WarehouseDTO
        """
        if main_warehouse is None:
            raise ValueError("Invalid value for `main_warehouse`, must not be `None`")  # noqa: E501

        self._main_warehouse = main_warehouse

    @property
    def warehouses(self) -> List[WarehouseDTO]:
        """Gets the warehouses of this WarehouseGroupDTO.

        Список складов, входящих в группу.  # noqa: E501

        :return: The warehouses of this WarehouseGroupDTO.
        :rtype: List[WarehouseDTO]
        """
        return self._warehouses

    @warehouses.setter
    def warehouses(self, warehouses: List[WarehouseDTO]):
        """Sets the warehouses of this WarehouseGroupDTO.

        Список складов, входящих в группу.  # noqa: E501

        :param warehouses: The warehouses of this WarehouseGroupDTO.
        :type warehouses: List[WarehouseDTO]
        """
        if warehouses is None:
            raise ValueError("Invalid value for `warehouses`, must not be `None`")  # noqa: E501

        self._warehouses = warehouses
