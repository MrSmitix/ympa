from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server import util


class GenerateStocksOnWarehousesReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id=None, warehouse_ids=None, report_date=None, category_ids=None, has_stocks=None):  # noqa: E501
        """GenerateStocksOnWarehousesReportRequest - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this GenerateStocksOnWarehousesReportRequest.  # noqa: E501
        :type campaign_id: int
        :param warehouse_ids: The warehouse_ids of this GenerateStocksOnWarehousesReportRequest.  # noqa: E501
        :type warehouse_ids: List[int]
        :param report_date: The report_date of this GenerateStocksOnWarehousesReportRequest.  # noqa: E501
        :type report_date: date
        :param category_ids: The category_ids of this GenerateStocksOnWarehousesReportRequest.  # noqa: E501
        :type category_ids: List[int]
        :param has_stocks: The has_stocks of this GenerateStocksOnWarehousesReportRequest.  # noqa: E501
        :type has_stocks: bool
        """
        self.openapi_types = {
            'campaign_id': int,
            'warehouse_ids': List[int],
            'report_date': date,
            'category_ids': List[int],
            'has_stocks': bool
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'warehouse_ids': 'warehouseIds',
            'report_date': 'reportDate',
            'category_ids': 'categoryIds',
            'has_stocks': 'hasStocks'
        }

        self._campaign_id = campaign_id
        self._warehouse_ids = warehouse_ids
        self._report_date = report_date
        self._category_ids = category_ids
        self._has_stocks = has_stocks

    @classmethod
    def from_dict(cls, dikt) -> 'GenerateStocksOnWarehousesReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GenerateStocksOnWarehousesReportRequest of this GenerateStocksOnWarehousesReportRequest.  # noqa: E501
        :rtype: GenerateStocksOnWarehousesReportRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self) -> int:
        """Gets the campaign_id of this GenerateStocksOnWarehousesReportRequest.

        Идентификатор магазина.  # noqa: E501

        :return: The campaign_id of this GenerateStocksOnWarehousesReportRequest.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id: int):
        """Sets the campaign_id of this GenerateStocksOnWarehousesReportRequest.

        Идентификатор магазина.  # noqa: E501

        :param campaign_id: The campaign_id of this GenerateStocksOnWarehousesReportRequest.
        :type campaign_id: int
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def warehouse_ids(self) -> List[int]:
        """Gets the warehouse_ids of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).  # noqa: E501

        :return: The warehouse_ids of this GenerateStocksOnWarehousesReportRequest.
        :rtype: List[int]
        """
        return self._warehouse_ids

    @warehouse_ids.setter
    def warehouse_ids(self, warehouse_ids: List[int]):
        """Sets the warehouse_ids of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).  # noqa: E501

        :param warehouse_ids: The warehouse_ids of this GenerateStocksOnWarehousesReportRequest.
        :type warehouse_ids: List[int]
        """

        self._warehouse_ids = warehouse_ids

    @property
    def report_date(self) -> date:
        """Gets the report_date of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.  # noqa: E501

        :return: The report_date of this GenerateStocksOnWarehousesReportRequest.
        :rtype: date
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date: date):
        """Sets the report_date of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.  # noqa: E501

        :param report_date: The report_date of this GenerateStocksOnWarehousesReportRequest.
        :type report_date: date
        """

        self._report_date = report_date

    @property
    def category_ids(self) -> List[int]:
        """Gets the category_ids of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по категориям на Маркете (кроме модели FBY).  # noqa: E501

        :return: The category_ids of this GenerateStocksOnWarehousesReportRequest.
        :rtype: List[int]
        """
        return self._category_ids

    @category_ids.setter
    def category_ids(self, category_ids: List[int]):
        """Sets the category_ids of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по категориям на Маркете (кроме модели FBY).  # noqa: E501

        :param category_ids: The category_ids of this GenerateStocksOnWarehousesReportRequest.
        :type category_ids: List[int]
        """

        self._category_ids = category_ids

    @property
    def has_stocks(self) -> bool:
        """Gets the has_stocks of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по наличию остатков (кроме модели FBY).  # noqa: E501

        :return: The has_stocks of this GenerateStocksOnWarehousesReportRequest.
        :rtype: bool
        """
        return self._has_stocks

    @has_stocks.setter
    def has_stocks(self, has_stocks: bool):
        """Sets the has_stocks of this GenerateStocksOnWarehousesReportRequest.

        Фильтр по наличию остатков (кроме модели FBY).  # noqa: E501

        :param has_stocks: The has_stocks of this GenerateStocksOnWarehousesReportRequest.
        :type has_stocks: bool
        """

        self._has_stocks = has_stocks
