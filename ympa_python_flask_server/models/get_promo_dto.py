from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.channel_type import ChannelType
from ympa_python_flask_server.models.get_promo_assortment_info_dto import GetPromoAssortmentInfoDTO
from ympa_python_flask_server.models.get_promo_bestseller_info_dto import GetPromoBestsellerInfoDTO
from ympa_python_flask_server.models.get_promo_constraints_dto import GetPromoConstraintsDTO
from ympa_python_flask_server.models.get_promo_mechanics_info_dto import GetPromoMechanicsInfoDTO
from ympa_python_flask_server.models.promo_period_dto import PromoPeriodDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.channel_type import ChannelType  # noqa: E501
from ympa_python_flask_server.models.get_promo_assortment_info_dto import GetPromoAssortmentInfoDTO  # noqa: E501
from ympa_python_flask_server.models.get_promo_bestseller_info_dto import GetPromoBestsellerInfoDTO  # noqa: E501
from ympa_python_flask_server.models.get_promo_constraints_dto import GetPromoConstraintsDTO  # noqa: E501
from ympa_python_flask_server.models.get_promo_mechanics_info_dto import GetPromoMechanicsInfoDTO  # noqa: E501
from ympa_python_flask_server.models.promo_period_dto import PromoPeriodDTO  # noqa: E501

class GetPromoDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, period=None, participating=None, assortment_info=None, mechanics_info=None, bestseller_info=None, channels=None, constraints=None):  # noqa: E501
        """GetPromoDTO - a model defined in OpenAPI

        :param id: The id of this GetPromoDTO.  # noqa: E501
        :type id: str
        :param name: The name of this GetPromoDTO.  # noqa: E501
        :type name: str
        :param period: The period of this GetPromoDTO.  # noqa: E501
        :type period: PromoPeriodDTO
        :param participating: The participating of this GetPromoDTO.  # noqa: E501
        :type participating: bool
        :param assortment_info: The assortment_info of this GetPromoDTO.  # noqa: E501
        :type assortment_info: GetPromoAssortmentInfoDTO
        :param mechanics_info: The mechanics_info of this GetPromoDTO.  # noqa: E501
        :type mechanics_info: GetPromoMechanicsInfoDTO
        :param bestseller_info: The bestseller_info of this GetPromoDTO.  # noqa: E501
        :type bestseller_info: GetPromoBestsellerInfoDTO
        :param channels: The channels of this GetPromoDTO.  # noqa: E501
        :type channels: List[ChannelType]
        :param constraints: The constraints of this GetPromoDTO.  # noqa: E501
        :type constraints: GetPromoConstraintsDTO
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'period': PromoPeriodDTO,
            'participating': bool,
            'assortment_info': GetPromoAssortmentInfoDTO,
            'mechanics_info': GetPromoMechanicsInfoDTO,
            'bestseller_info': GetPromoBestsellerInfoDTO,
            'channels': List[ChannelType],
            'constraints': GetPromoConstraintsDTO
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'period': 'period',
            'participating': 'participating',
            'assortment_info': 'assortmentInfo',
            'mechanics_info': 'mechanicsInfo',
            'bestseller_info': 'bestsellerInfo',
            'channels': 'channels',
            'constraints': 'constraints'
        }

        self._id = id
        self._name = name
        self._period = period
        self._participating = participating
        self._assortment_info = assortment_info
        self._mechanics_info = mechanics_info
        self._bestseller_info = bestseller_info
        self._channels = channels
        self._constraints = constraints

    @classmethod
    def from_dict(cls, dikt) -> 'GetPromoDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetPromoDTO of this GetPromoDTO.  # noqa: E501
        :rtype: GetPromoDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this GetPromoDTO.

        Идентификатор акции.  # noqa: E501

        :return: The id of this GetPromoDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this GetPromoDTO.

        Идентификатор акции.  # noqa: E501

        :param id: The id of this GetPromoDTO.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this GetPromoDTO.

        Название акции.  # noqa: E501

        :return: The name of this GetPromoDTO.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetPromoDTO.

        Название акции.  # noqa: E501

        :param name: The name of this GetPromoDTO.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def period(self) -> PromoPeriodDTO:
        """Gets the period of this GetPromoDTO.


        :return: The period of this GetPromoDTO.
        :rtype: PromoPeriodDTO
        """
        return self._period

    @period.setter
    def period(self, period: PromoPeriodDTO):
        """Sets the period of this GetPromoDTO.


        :param period: The period of this GetPromoDTO.
        :type period: PromoPeriodDTO
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def participating(self) -> bool:
        """Gets the participating of this GetPromoDTO.

        Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).   # noqa: E501

        :return: The participating of this GetPromoDTO.
        :rtype: bool
        """
        return self._participating

    @participating.setter
    def participating(self, participating: bool):
        """Sets the participating of this GetPromoDTO.

        Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).   # noqa: E501

        :param participating: The participating of this GetPromoDTO.
        :type participating: bool
        """
        if participating is None:
            raise ValueError("Invalid value for `participating`, must not be `None`")  # noqa: E501

        self._participating = participating

    @property
    def assortment_info(self) -> GetPromoAssortmentInfoDTO:
        """Gets the assortment_info of this GetPromoDTO.


        :return: The assortment_info of this GetPromoDTO.
        :rtype: GetPromoAssortmentInfoDTO
        """
        return self._assortment_info

    @assortment_info.setter
    def assortment_info(self, assortment_info: GetPromoAssortmentInfoDTO):
        """Sets the assortment_info of this GetPromoDTO.


        :param assortment_info: The assortment_info of this GetPromoDTO.
        :type assortment_info: GetPromoAssortmentInfoDTO
        """
        if assortment_info is None:
            raise ValueError("Invalid value for `assortment_info`, must not be `None`")  # noqa: E501

        self._assortment_info = assortment_info

    @property
    def mechanics_info(self) -> GetPromoMechanicsInfoDTO:
        """Gets the mechanics_info of this GetPromoDTO.


        :return: The mechanics_info of this GetPromoDTO.
        :rtype: GetPromoMechanicsInfoDTO
        """
        return self._mechanics_info

    @mechanics_info.setter
    def mechanics_info(self, mechanics_info: GetPromoMechanicsInfoDTO):
        """Sets the mechanics_info of this GetPromoDTO.


        :param mechanics_info: The mechanics_info of this GetPromoDTO.
        :type mechanics_info: GetPromoMechanicsInfoDTO
        """
        if mechanics_info is None:
            raise ValueError("Invalid value for `mechanics_info`, must not be `None`")  # noqa: E501

        self._mechanics_info = mechanics_info

    @property
    def bestseller_info(self) -> GetPromoBestsellerInfoDTO:
        """Gets the bestseller_info of this GetPromoDTO.


        :return: The bestseller_info of this GetPromoDTO.
        :rtype: GetPromoBestsellerInfoDTO
        """
        return self._bestseller_info

    @bestseller_info.setter
    def bestseller_info(self, bestseller_info: GetPromoBestsellerInfoDTO):
        """Sets the bestseller_info of this GetPromoDTO.


        :param bestseller_info: The bestseller_info of this GetPromoDTO.
        :type bestseller_info: GetPromoBestsellerInfoDTO
        """
        if bestseller_info is None:
            raise ValueError("Invalid value for `bestseller_info`, must not be `None`")  # noqa: E501

        self._bestseller_info = bestseller_info

    @property
    def channels(self) -> List[ChannelType]:
        """Gets the channels of this GetPromoDTO.

        Список каналов продвижения товаров.  # noqa: E501

        :return: The channels of this GetPromoDTO.
        :rtype: List[ChannelType]
        """
        return self._channels

    @channels.setter
    def channels(self, channels: List[ChannelType]):
        """Sets the channels of this GetPromoDTO.

        Список каналов продвижения товаров.  # noqa: E501

        :param channels: The channels of this GetPromoDTO.
        :type channels: List[ChannelType]
        """

        self._channels = channels

    @property
    def constraints(self) -> GetPromoConstraintsDTO:
        """Gets the constraints of this GetPromoDTO.


        :return: The constraints of this GetPromoDTO.
        :rtype: GetPromoConstraintsDTO
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: GetPromoConstraintsDTO):
        """Sets the constraints of this GetPromoDTO.


        :param constraints: The constraints of this GetPromoDTO.
        :type constraints: GetPromoConstraintsDTO
        """

        self._constraints = constraints
