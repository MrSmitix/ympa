from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.quality_rating_component_type import QualityRatingComponentType
from ympa_python_flask_server import util

from ympa_python_flask_server.models.quality_rating_component_type import QualityRatingComponentType  # noqa: E501

class QualityRatingComponentDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, value=None, component_type=None):  # noqa: E501
        """QualityRatingComponentDTO - a model defined in OpenAPI

        :param value: The value of this QualityRatingComponentDTO.  # noqa: E501
        :type value: float
        :param component_type: The component_type of this QualityRatingComponentDTO.  # noqa: E501
        :type component_type: QualityRatingComponentType
        """
        self.openapi_types = {
            'value': float,
            'component_type': QualityRatingComponentType
        }

        self.attribute_map = {
            'value': 'value',
            'component_type': 'componentType'
        }

        self._value = value
        self._component_type = component_type

    @classmethod
    def from_dict(cls, dikt) -> 'QualityRatingComponentDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QualityRatingComponentDTO of this QualityRatingComponentDTO.  # noqa: E501
        :rtype: QualityRatingComponentDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def value(self) -> float:
        """Gets the value of this QualityRatingComponentDTO.

        Значение составляющей в процентах.  # noqa: E501

        :return: The value of this QualityRatingComponentDTO.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this QualityRatingComponentDTO.

        Значение составляющей в процентах.  # noqa: E501

        :param value: The value of this QualityRatingComponentDTO.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and value > 100:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value less than or equal to `100`")  # noqa: E501
        if value is not None and value < 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def component_type(self) -> QualityRatingComponentType:
        """Gets the component_type of this QualityRatingComponentDTO.


        :return: The component_type of this QualityRatingComponentDTO.
        :rtype: QualityRatingComponentType
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type: QualityRatingComponentType):
        """Sets the component_type of this QualityRatingComponentDTO.


        :param component_type: The component_type of this QualityRatingComponentDTO.
        :type component_type: QualityRatingComponentType
        """
        if component_type is None:
            raise ValueError("Invalid value for `component_type`, must not be `None`")  # noqa: E501

        self._component_type = component_type
