from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.update_stock_dto import UpdateStockDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.update_stock_dto import UpdateStockDTO  # noqa: E501

class UpdateStocksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skus=None):  # noqa: E501
        """UpdateStocksRequest - a model defined in OpenAPI

        :param skus: The skus of this UpdateStocksRequest.  # noqa: E501
        :type skus: list[UpdateStockDTO]
        """
        self.openapi_types = {
            'skus': list[UpdateStockDTO]
        }

        self.attribute_map = {
            'skus': 'skus'
        }

        self._skus = skus

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateStocksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateStocksRequest of this UpdateStocksRequest.  # noqa: E501
        :rtype: UpdateStocksRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skus(self) -> list[UpdateStockDTO]:
        """Gets the skus of this UpdateStocksRequest.

        Данные об остатках товаров.   # noqa: E501

        :return: The skus of this UpdateStocksRequest.
        :rtype: list[UpdateStockDTO]
        """
        return self._skus

    @skus.setter
    def skus(self, skus: list[UpdateStockDTO]):
        """Sets the skus of this UpdateStocksRequest.

        Данные об остатках товаров.   # noqa: E501

        :param skus: The skus of this UpdateStocksRequest.
        :type skus: list[UpdateStockDTO]
        """
        if skus is None:
            raise ValueError("Invalid value for `skus`, must not be `None`")  # noqa: E501
        if skus is not None and len(skus) > 2000:
            raise ValueError("Invalid value for `skus`, number of items must be less than or equal to `2000`")  # noqa: E501
        if skus is not None and len(skus) < 1:
            raise ValueError("Invalid value for `skus`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._skus = skus
