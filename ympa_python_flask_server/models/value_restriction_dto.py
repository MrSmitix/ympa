from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ympa_python_flask_server.models.base_model import Model
from ympa_python_flask_server.models.option_values_limited_dto import OptionValuesLimitedDTO
from ympa_python_flask_server import util

from ympa_python_flask_server.models.option_values_limited_dto import OptionValuesLimitedDTO  # noqa: E501

class ValueRestrictionDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limiting_parameter_id=None, limited_values=None):  # noqa: E501
        """ValueRestrictionDTO - a model defined in OpenAPI

        :param limiting_parameter_id: The limiting_parameter_id of this ValueRestrictionDTO.  # noqa: E501
        :type limiting_parameter_id: int
        :param limited_values: The limited_values of this ValueRestrictionDTO.  # noqa: E501
        :type limited_values: List[OptionValuesLimitedDTO]
        """
        self.openapi_types = {
            'limiting_parameter_id': int,
            'limited_values': List[OptionValuesLimitedDTO]
        }

        self.attribute_map = {
            'limiting_parameter_id': 'limitingParameterId',
            'limited_values': 'limitedValues'
        }

        self._limiting_parameter_id = limiting_parameter_id
        self._limited_values = limited_values

    @classmethod
    def from_dict(cls, dikt) -> 'ValueRestrictionDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValueRestrictionDTO of this ValueRestrictionDTO.  # noqa: E501
        :rtype: ValueRestrictionDTO
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limiting_parameter_id(self) -> int:
        """Gets the limiting_parameter_id of this ValueRestrictionDTO.

        Идентификатор ограничивающей характеристики.  # noqa: E501

        :return: The limiting_parameter_id of this ValueRestrictionDTO.
        :rtype: int
        """
        return self._limiting_parameter_id

    @limiting_parameter_id.setter
    def limiting_parameter_id(self, limiting_parameter_id: int):
        """Sets the limiting_parameter_id of this ValueRestrictionDTO.

        Идентификатор ограничивающей характеристики.  # noqa: E501

        :param limiting_parameter_id: The limiting_parameter_id of this ValueRestrictionDTO.
        :type limiting_parameter_id: int
        """
        if limiting_parameter_id is None:
            raise ValueError("Invalid value for `limiting_parameter_id`, must not be `None`")  # noqa: E501

        self._limiting_parameter_id = limiting_parameter_id

    @property
    def limited_values(self) -> List[OptionValuesLimitedDTO]:
        """Gets the limited_values of this ValueRestrictionDTO.

        Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.  # noqa: E501

        :return: The limited_values of this ValueRestrictionDTO.
        :rtype: List[OptionValuesLimitedDTO]
        """
        return self._limited_values

    @limited_values.setter
    def limited_values(self, limited_values: List[OptionValuesLimitedDTO]):
        """Sets the limited_values of this ValueRestrictionDTO.

        Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.  # noqa: E501

        :param limited_values: The limited_values of this ValueRestrictionDTO.
        :type limited_values: List[OptionValuesLimitedDTO]
        """
        if limited_values is None:
            raise ValueError("Invalid value for `limited_values`, must not be `None`")  # noqa: E501

        self._limited_values = limited_values
