<?php

/**
 * OfferMappingsController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\OfferMappingsApiInterface;
use OpenAPI\Server\Model\ApiClientDataErrorResponse;
use OpenAPI\Server\Model\ApiForbiddenErrorResponse;
use OpenAPI\Server\Model\ApiLimitErrorResponse;
use OpenAPI\Server\Model\ApiLockedErrorResponse;
use OpenAPI\Server\Model\ApiNotFoundErrorResponse;
use OpenAPI\Server\Model\ApiServerErrorResponse;
use OpenAPI\Server\Model\ApiUnauthorizedErrorResponse;
use OpenAPI\Server\Model\EmptyApiResponse;
use OpenAPI\Server\Model\GetOfferMappingEntriesResponse;
use OpenAPI\Server\Model\GetSuggestedOfferMappingEntriesRequest;
use OpenAPI\Server\Model\GetSuggestedOfferMappingEntriesResponse;
use OpenAPI\Server\Model\OfferAvailabilityStatusType;
use OpenAPI\Server\Model\OfferMappingKindType;
use OpenAPI\Server\Model\OfferProcessingStatusType;
use OpenAPI\Server\Model\UpdateOfferMappingEntryRequest;

/**
 * OfferMappingsController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class OfferMappingsController extends Controller
{

    /**
     * Operation getOfferMappingEntries
     *
     * Список товаров в каталоге
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getOfferMappingEntriesAction(Request $request, $campaignId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $offerId = $request->query->get('offerId');
        $shopSku = $request->query->get('shopSku');
        $mappingKind = $request->query->get('mappingKind');
        $status = $request->query->get('status');
        $availability = $request->query->get('availability');
        $categoryId = $request->query->get('categoryId');
        $vendor = $request->query->get('vendor');
        $pageToken = $request->query->get('pageToken');
        $limit = $request->query->get('limit');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $offerId = $this->deserialize($offerId, 'array<csv,string>', 'string');
            $shopSku = $this->deserialize($shopSku, 'array<csv,string>', 'string');
            $mappingKind = $this->deserialize($mappingKind, '\OpenAPI\Server\Model\OfferMappingKindType', 'string');
            $status = $this->deserialize($status, 'array<csv,OpenAPI\Server\Model\OfferProcessingStatusType>', 'string');
            $availability = $this->deserialize($availability, 'array<csv,OpenAPI\Server\Model\OfferAvailabilityStatusType>', 'string');
            $categoryId = $this->deserialize($categoryId, 'array<csv,int>', 'string');
            $vendor = $this->deserialize($vendor, 'array<csv,string>', 'string');
            $pageToken = $this->deserialize($pageToken, 'string', 'string');
            $limit = $this->deserialize($limit, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($offerId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($shopSku, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("\OpenAPI\Server\Model\OfferMappingKindType");
        $response = $this->validate($mappingKind, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\OfferProcessingStatusType"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($status, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\OfferAvailabilityStatusType"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($availability, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($categoryId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("string"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($vendor, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pageToken, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($limit, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getOfferMappingEntries($campaignId, $offerId, $shopSku, $mappingKind, $status, $availability, $categoryId, $vendor, $pageToken, $limit, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Информация о товарах в каталоге.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSuggestedOfferMappingEntries
     *
     * Рекомендованные карточки для товаров
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function getSuggestedOfferMappingEntriesAction(Request $request, $campaignId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $getSuggestedOfferMappingEntriesRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $getSuggestedOfferMappingEntriesRequest = $this->deserialize($getSuggestedOfferMappingEntriesRequest, 'OpenAPI\Server\Model\GetSuggestedOfferMappingEntriesRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\GetSuggestedOfferMappingEntriesRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($getSuggestedOfferMappingEntriesRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getSuggestedOfferMappingEntries($campaignId, $getSuggestedOfferMappingEntriesRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Информация о товарах в каталоге.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOfferMappingEntries
     *
     * Добавление и редактирование товаров в каталоге
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     * @deprecated
     */
    public function updateOfferMappingEntriesAction(Request $request, $campaignId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updateOfferMappingEntryRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updateOfferMappingEntryRequest = $this->deserialize($updateOfferMappingEntryRequest, 'OpenAPI\Server\Model\UpdateOfferMappingEntryRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdateOfferMappingEntryRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updateOfferMappingEntryRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOfferMappingEntries($campaignId, $updateOfferMappingEntryRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Статус выполнения операции.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                423 => 'К ресурсу нельзя применить указанный метод.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return OfferMappingsApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('offerMappings');
    }
}
