<?php

/**
 * OrdersController
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Controller;

use \Exception;
use JMS\Serializer\Exception\RuntimeException as SerializerRuntimeException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Symfony\Component\Validator\Constraints as Assert;
use OpenAPI\Server\Api\OrdersApiInterface;
use OpenAPI\Server\Model\AcceptOrderCancellationRequest;
use OpenAPI\Server\Model\ApiClientDataErrorResponse;
use OpenAPI\Server\Model\ApiForbiddenErrorResponse;
use OpenAPI\Server\Model\ApiLimitErrorResponse;
use OpenAPI\Server\Model\ApiNotFoundErrorResponse;
use OpenAPI\Server\Model\ApiServerErrorResponse;
use OpenAPI\Server\Model\ApiUnauthorizedErrorResponse;
use OpenAPI\Server\Model\Date;
use OpenAPI\Server\Model\EmptyApiResponse;
use OpenAPI\Server\Model\GetOrderResponse;
use OpenAPI\Server\Model\GetOrdersResponse;
use OpenAPI\Server\Model\OrderBuyerType;
use OpenAPI\Server\Model\OrderDeliveryDispatchType;
use OpenAPI\Server\Model\OrderStatusType;
use OpenAPI\Server\Model\OrderSubstatusType;
use OpenAPI\Server\Model\ProvideOrderDigitalCodesRequest;
use OpenAPI\Server\Model\ProvideOrderItemIdentifiersRequest;
use OpenAPI\Server\Model\ProvideOrderItemIdentifiersResponse;
use OpenAPI\Server\Model\Set;
use OpenAPI\Server\Model\SetOrderBoxLayoutRequest;
use OpenAPI\Server\Model\SetOrderBoxLayoutResponse;
use OpenAPI\Server\Model\SetOrderShipmentBoxesRequest;
use OpenAPI\Server\Model\SetOrderShipmentBoxesResponse;
use OpenAPI\Server\Model\UpdateOrderItemRequest;
use OpenAPI\Server\Model\UpdateOrderStatusRequest;
use OpenAPI\Server\Model\UpdateOrderStatusResponse;
use OpenAPI\Server\Model\UpdateOrderStatusesRequest;
use OpenAPI\Server\Model\UpdateOrderStatusesResponse;

/**
 * OrdersController Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Controller
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class OrdersController extends Controller
{

    /**
     * Operation acceptOrderCancellation
     *
     * Отмена заказа покупателем
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function acceptOrderCancellationAction(Request $request, $campaignId, $orderId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $acceptOrderCancellationRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $acceptOrderCancellationRequest = $this->deserialize($acceptOrderCancellationRequest, 'OpenAPI\Server\Model\AcceptOrderCancellationRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\AcceptOrderCancellationRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($acceptOrderCancellationRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->acceptOrderCancellation($campaignId, $orderId, $acceptOrderCancellationRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Ответ на отмену заказа был успешно передан.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getOrder
     *
     * Информация об одном заказе
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getOrderAction(Request $request, $campaignId, $orderId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getOrder($campaignId, $orderId, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Информация о заказе.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getOrders
     *
     * Информация о нескольких заказах
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getOrdersAction(Request $request, $campaignId)
    {
        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $orderIds = $request->query->get('orderIds');
        $status = $request->query->get('status');
        $substatus = $request->query->get('substatus');
        $fromDate = $request->query->get('fromDate');
        $toDate = $request->query->get('toDate');
        $supplierShipmentDateFrom = $request->query->get('supplierShipmentDateFrom');
        $supplierShipmentDateTo = $request->query->get('supplierShipmentDateTo');
        $updatedAtFrom = $request->query->get('updatedAtFrom');
        $updatedAtTo = $request->query->get('updatedAtTo');
        $dispatchType = $request->query->get('dispatchType');
        $fake = $request->query->get('fake', false);
        $hasCis = $request->query->get('hasCis', false);
        $onlyWaitingForCancellationApprove = $request->query->get('onlyWaitingForCancellationApprove', false);
        $onlyEstimatedDelivery = $request->query->get('onlyEstimatedDelivery', false);
        $buyerType = $request->query->get('buyerType');
        $page = $request->query->get('page', 1);
        $pageSize = $request->query->get('pageSize');
        $pageToken = $request->query->get('pageToken');
        $limit = $request->query->get('limit');

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderIds = $this->deserialize($orderIds, 'array<csv,int>', 'string');
            $status = $this->deserialize($status, 'array<csv,OpenAPI\Server\Model\OrderStatusType>', 'string');
            $substatus = $this->deserialize($substatus, 'array<csv,OpenAPI\Server\Model\OrderSubstatusType>', 'string');
            $fromDate = $this->deserialize($fromDate, '\DateTime', 'string');
            $toDate = $this->deserialize($toDate, '\DateTime', 'string');
            $supplierShipmentDateFrom = $this->deserialize($supplierShipmentDateFrom, '\DateTime', 'string');
            $supplierShipmentDateTo = $this->deserialize($supplierShipmentDateTo, '\DateTime', 'string');
            $updatedAtFrom = $this->deserialize($updatedAtFrom, '\DateTime', 'string');
            $updatedAtTo = $this->deserialize($updatedAtTo, '\DateTime', 'string');
            $dispatchType = $this->deserialize($dispatchType, '\OpenAPI\Server\Model\OrderDeliveryDispatchType', 'string');
            $fake = $this->deserialize($fake, 'bool', 'string');
            $hasCis = $this->deserialize($hasCis, 'bool', 'string');
            $onlyWaitingForCancellationApprove = $this->deserialize($onlyWaitingForCancellationApprove, 'bool', 'string');
            $onlyEstimatedDelivery = $this->deserialize($onlyEstimatedDelivery, 'bool', 'string');
            $buyerType = $this->deserialize($buyerType, '\OpenAPI\Server\Model\OrderBuyerType', 'string');
            $page = $this->deserialize($page, 'int', 'string');
            $pageSize = $this->deserialize($pageSize, 'int', 'string');
            $pageToken = $this->deserialize($pageToken, 'string', 'string');
            $limit = $this->deserialize($limit, 'int', 'string');
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("int"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($orderIds, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\OrderStatusType"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($status, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\All([
            new Assert\Type("OpenAPI\Server\Model\OrderSubstatusType"),
        ]);
        $asserts[] = new Assert\Valid();
        $response = $this->validate($substatus, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Date();
        $response = $this->validate($fromDate, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Date();
        $response = $this->validate($toDate, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Date();
        $response = $this->validate($supplierShipmentDateFrom, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Date();
        $response = $this->validate($supplierShipmentDateTo, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("DateTime");
        $response = $this->validate($updatedAtFrom, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("DateTime");
        $response = $this->validate($updatedAtTo, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("\OpenAPI\Server\Model\OrderDeliveryDispatchType");
        $response = $this->validate($dispatchType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($fake, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($hasCis, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($onlyWaitingForCancellationApprove, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("bool");
        $response = $this->validate($onlyEstimatedDelivery, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("\OpenAPI\Server\Model\OrderBuyerType");
        $response = $this->validate($buyerType, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $asserts[] = new Assert\LessThanOrEqual(10000);
        $response = $this->validate($page, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($pageSize, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("string");
        $response = $this->validate($pageToken, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($limit, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->getOrders($campaignId, $orderIds, $status, $substatus, $fromDate, $toDate, $supplierShipmentDateFrom, $supplierShipmentDateTo, $updatedAtFrom, $updatedAtTo, $dispatchType, $fake, $hasCis, $onlyWaitingForCancellationApprove, $onlyEstimatedDelivery, $buyerType, $page, $pageSize, $pageToken, $limit, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Информация о заказах.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation provideOrderDigitalCodes
     *
     * Передача ключей цифровых товаров
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function provideOrderDigitalCodesAction(Request $request, $campaignId, $orderId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $provideOrderDigitalCodesRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $provideOrderDigitalCodesRequest = $this->deserialize($provideOrderDigitalCodesRequest, 'OpenAPI\Server\Model\ProvideOrderDigitalCodesRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ProvideOrderDigitalCodesRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($provideOrderDigitalCodesRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->provideOrderDigitalCodes($campaignId, $orderId, $provideOrderDigitalCodesRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Пустой ответ.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation provideOrderItemIdentifiers
     *
     * Передача кодов маркировки единиц товара
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function provideOrderItemIdentifiersAction(Request $request, $campaignId, $orderId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $provideOrderItemIdentifiersRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $provideOrderItemIdentifiersRequest = $this->deserialize($provideOrderItemIdentifiersRequest, 'OpenAPI\Server\Model\ProvideOrderItemIdentifiersRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\ProvideOrderItemIdentifiersRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($provideOrderItemIdentifiersRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->provideOrderItemIdentifiers($campaignId, $orderId, $provideOrderItemIdentifiersRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Ответ 200 обозначает, что коды успешно записались. Ответ содержит краткие сведения о промаркированных товарах.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation setOrderBoxLayout
     *
     * Подготовка заказа
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function setOrderBoxLayoutAction(Request $request, $campaignId, $orderId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $setOrderBoxLayoutRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $setOrderBoxLayoutRequest = $this->deserialize($setOrderBoxLayoutRequest, 'OpenAPI\Server\Model\SetOrderBoxLayoutRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\SetOrderBoxLayoutRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($setOrderBoxLayoutRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->setOrderBoxLayout($campaignId, $orderId, $setOrderBoxLayoutRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'В ответ придет переданная раскладка с идентификаторами коробок — они понадобятся для запроса ярлыков.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation setOrderShipmentBoxes
     *
     * Передача количества грузовых мест в заказе
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function setOrderShipmentBoxesAction(Request $request, $campaignId, $orderId, $shipmentId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $setOrderShipmentBoxesRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $shipmentId = $this->deserialize($shipmentId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $setOrderShipmentBoxesRequest = $this->deserialize($setOrderShipmentBoxesRequest, 'OpenAPI\Server\Model\SetOrderShipmentBoxesRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($shipmentId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\SetOrderShipmentBoxesRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($setOrderShipmentBoxesRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->setOrderShipmentBoxes($campaignId, $orderId, $shipmentId, $setOrderShipmentBoxesRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Имеет значение только тип ответа. Если ответ &#x60;ОК&#x60;, количество грузомест записано.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderItems
     *
     * Удаление товара из заказа или уменьшение числа единиц
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateOrderItemsAction(Request $request, $campaignId, $orderId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updateOrderItemRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updateOrderItemRequest = $this->deserialize($updateOrderItemRequest, 'OpenAPI\Server\Model\UpdateOrderItemRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdateOrderItemRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updateOrderItemRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 204;
            $responseHeaders = [];

            $handler->updateOrderItems($campaignId, $orderId, $updateOrderItemRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Маркет успешно обработал ваш запрос. Выходные данные не ожидаются.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                '',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderStatus
     *
     * Изменение статуса одного заказа
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateOrderStatusAction(Request $request, $campaignId, $orderId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updateOrderStatusRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $orderId = $this->deserialize($orderId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updateOrderStatusRequest = $this->deserialize($updateOrderStatusRequest, 'OpenAPI\Server\Model\UpdateOrderStatusRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($orderId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdateOrderStatusRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updateOrderStatusRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderStatus($campaignId, $orderId, $updateOrderStatusRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'В случае успешного изменения статуса заказа возвращается обновленная информация о заказе.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation updateOrderStatuses
     *
     * Изменение статусов нескольких заказов
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function updateOrderStatusesAction(Request $request, $campaignId)
    {
        // Make sure that the client is providing something that we can consume
        $consumes = ['application/json'];
        if (!static::isContentTypeAllowed($request, $consumes)) {
            // We can't consume the content that the client is sending us
            return new Response('', 415);
        }

        // Figure out what data format to return to the client
        $produces = ['application/json'];
        // Figure out what the client accepts
        $clientAccepts = $request->headers->has('Accept')?$request->headers->get('Accept'):'*/*';
        $responseFormat = $this->getOutputFormat($clientAccepts, $produces);
        if ($responseFormat === null) {
            return new Response('', 406);
        }

        // Handle authentication
        // Authentication 'OAuth' required
        // Oauth required
        $securityOAuth = $request->headers->get('authorization');

        // Read out all input parameter values into variables
        $updateOrderStatusesRequest = $request->getContent();

        // Use the default value if no value was provided

        // Deserialize the input values that needs it
        try {
            $campaignId = $this->deserialize($campaignId, 'int', 'string');
            $inputFormat = $request->getMimeType($request->getContentTypeFormat());
            $updateOrderStatusesRequest = $this->deserialize($updateOrderStatusesRequest, 'OpenAPI\Server\Model\UpdateOrderStatusesRequest', $inputFormat);
        } catch (SerializerRuntimeException $exception) {
            return $this->createBadRequestResponse($exception->getMessage());
        }

        // Validate the input values
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("int");
        $response = $this->validate($campaignId, $asserts);
        if ($response instanceof Response) {
            return $response;
        }
        $asserts = [];
        $asserts[] = new Assert\NotNull();
        $asserts[] = new Assert\Type("OpenAPI\Server\Model\UpdateOrderStatusesRequest");
        $asserts[] = new Assert\Valid();
        $response = $this->validate($updateOrderStatusesRequest, $asserts);
        if ($response instanceof Response) {
            return $response;
        }


        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'OAuth'
            $handler->setOAuth($securityOAuth);

            // Make the call to the business logic
            $responseCode = 200;
            $responseHeaders = [];

            $result = $handler->updateOrderStatuses($campaignId, $updateOrderStatusesRequest, $responseCode, $responseHeaders);

            $message = match($responseCode) {
                200 => 'Возвращается информация об обновленных статусах заказов.',
                400 => 'Запрос содержит неправильные данные.',
                401 => 'В запросе не указаны данные для авторизации.',
                403 => 'Данные для авторизации неверны или доступ к ресурсу запрещен.',
                404 => 'Запрашиваемый ресурс не найден.',
                420 => 'Превышено ограничение на доступ к ресурсу.',
                500 => 'Внутренняя ошибка сервера.',
                default => '',
            };

            return new Response(
                $result !== null ?$this->serialize($result, $responseFormat):'',
                $responseCode,
                array_merge(
                    $responseHeaders,
                    [
                        'Content-Type' => $responseFormat,
                        'X-OpenAPI-Message' => $message
                    ]
                )
            );
        } catch (\Throwable $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return OrdersApiInterface
     */
    public function getApiHandler()
    {
        return $this->apiServer->getApiHandler('orders');
    }
}
