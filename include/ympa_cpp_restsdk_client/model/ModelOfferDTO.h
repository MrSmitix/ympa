/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ModelOfferDTO.h
 *
 * Информация о предложении.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ModelOfferDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ModelOfferDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация о предложении.
/// </summary>
class  ModelOfferDTO
    : public ModelBase
{
public:
    ModelOfferDTO();
    virtual ~ModelOfferDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ModelOfferDTO members

    /// <summary>
    /// Скидка на предложение в процентах.
    /// </summary>
    int32_t getDiscount() const;
    bool discountIsSet() const;
    void unsetDiscount();

    void setDiscount(int32_t value);

    /// <summary>
    /// Наименование предложения.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Позиция предложения в выдаче Маркета на карточке модели.
    /// </summary>
    int32_t getPos() const;
    bool posIsSet() const;
    void unsetPos();

    void setPos(int32_t value);

    /// <summary>
    /// Цена предложения без скидки магазина.
    /// </summary>
    double getPreDiscountPrice() const;
    bool preDiscountPriceIsSet() const;
    void unsetPreDiscountPrice();

    void setPreDiscountPrice(double value);

    /// <summary>
    /// Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них. 
    /// </summary>
    int64_t getRegionId() const;
    bool regionIdIsSet() const;
    void unsetRegionId();

    void setRegionId(int64_t value);

    /// <summary>
    /// Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится. 
    /// </summary>
    double getShippingCost() const;
    bool shippingCostIsSet() const;
    void unsetShippingCost();

    void setShippingCost(double value);

    /// <summary>
    /// Название магазина (в том виде, в котором отображается на Маркете).
    /// </summary>
    utility::string_t getShopName() const;
    bool shopNameIsSet() const;
    void unsetShopName();

    void setShopName(const utility::string_t& value);

    /// <summary>
    /// Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;. 
    /// </summary>
    int32_t getShopRating() const;
    bool shopRatingIsSet() const;
    void unsetShopRating();

    void setShopRating(int32_t value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %} 
    /// </summary>
    int32_t getInStock() const;
    bool inStockIsSet() const;
    void unsetInStock();

    void setInStock(int32_t value);


protected:
    int32_t m_Discount;
    bool m_DiscountIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int32_t m_Pos;
    bool m_PosIsSet;
    double m_PreDiscountPrice;
    bool m_PreDiscountPriceIsSet;
    double m_Price;
    bool m_PriceIsSet;
    int64_t m_RegionId;
    bool m_RegionIdIsSet;
    double m_ShippingCost;
    bool m_ShippingCostIsSet;
    utility::string_t m_ShopName;
    bool m_ShopNameIsSet;
    int32_t m_ShopRating;
    bool m_ShopRatingIsSet;
    int32_t m_InStock;
    bool m_InStockIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ModelOfferDTO_H_ */
