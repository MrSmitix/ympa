/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletDTO.h
 *
 * Информация о точке продаж.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OutletDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OutletDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OutletType.h"
#include "ympa_cpp_restsdk_client/model/OutletAddressDTO.h"
#include "ympa_cpp_restsdk_client/model/OutletWorkingScheduleDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OutletDeliveryRuleDTO.h"
#include "ympa_cpp_restsdk_client/model/OutletVisibilityType.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OutletAddressDTO;
class OutletWorkingScheduleDTO;
class OutletDeliveryRuleDTO;


/// <summary>
/// Информация о точке продаж.
/// </summary>
class  OutletDTO
    : public ModelBase
{
public:
    OutletDTO();
    virtual ~OutletDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OutletDTO members

    /// <summary>
    /// Название точки продаж. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OutletType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<OutletType>& value);

    /// <summary>
    /// Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
    /// </summary>
    utility::string_t getCoords() const;
    bool coordsIsSet() const;
    void unsetCoords();

    void setCoords(const utility::string_t& value);

    /// <summary>
    /// Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
    /// </summary>
    bool isIsMain() const;
    bool isMainIsSet() const;
    void unsetIsMain();

    void setIsMain(bool value);

    /// <summary>
    /// Идентификатор точки продаж, присвоенный магазином.
    /// </summary>
    utility::string_t getShopOutletCode() const;
    bool shopOutletCodeIsSet() const;
    void unsetShopOutletCode();

    void setShopOutletCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OutletVisibilityType> getVisibility() const;
    bool visibilityIsSet() const;
    void unsetVisibility();

    void setVisibility(const std::shared_ptr<OutletVisibilityType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OutletAddressDTO> getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const std::shared_ptr<OutletAddressDTO>& value);

    /// <summary>
    /// Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
    /// </summary>
    std::vector<utility::string_t>& getPhones();
    bool phonesIsSet() const;
    void unsetPhones();

    void setPhones(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OutletWorkingScheduleDTO> getWorkingSchedule() const;
    bool workingScheduleIsSet() const;
    void unsetWorkingSchedule();

    void setWorkingSchedule(const std::shared_ptr<OutletWorkingScheduleDTO>& value);

    /// <summary>
    /// Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
    /// </summary>
    std::vector<std::shared_ptr<OutletDeliveryRuleDTO>>& getDeliveryRules();
    bool deliveryRulesIsSet() const;
    void unsetDeliveryRules();

    void setDeliveryRules(const std::vector<std::shared_ptr<OutletDeliveryRuleDTO>>& value);

    /// <summary>
    /// Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
    /// </summary>
    int64_t getStoragePeriod() const;
    bool storagePeriodIsSet() const;
    void unsetStoragePeriod();

    void setStoragePeriod(int64_t value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<OutletType> m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Coords;
    bool m_CoordsIsSet;
    bool m_IsMain;
    bool m_IsMainIsSet;
    utility::string_t m_ShopOutletCode;
    bool m_ShopOutletCodeIsSet;
    std::shared_ptr<OutletVisibilityType> m_Visibility;
    bool m_VisibilityIsSet;
    std::shared_ptr<OutletAddressDTO> m_Address;
    bool m_AddressIsSet;
    std::vector<utility::string_t> m_Phones;
    bool m_PhonesIsSet;
    std::shared_ptr<OutletWorkingScheduleDTO> m_WorkingSchedule;
    bool m_WorkingScheduleIsSet;
    std::vector<std::shared_ptr<OutletDeliveryRuleDTO>> m_DeliveryRules;
    bool m_DeliveryRulesIsSet;
    int64_t m_StoragePeriod;
    bool m_StoragePeriodIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OutletDTO_H_ */
