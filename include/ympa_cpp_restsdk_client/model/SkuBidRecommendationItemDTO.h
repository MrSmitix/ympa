/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SkuBidRecommendationItemDTO.h
 *
 * Список товаров с рекомендованными ставками.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SkuBidRecommendationItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SkuBidRecommendationItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/PriceRecommendationItemDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/BidRecommendationItemDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class BidRecommendationItemDTO;
class PriceRecommendationItemDTO;


/// <summary>
/// Список товаров с рекомендованными ставками.
/// </summary>
class  SkuBidRecommendationItemDTO
    : public ModelBase
{
public:
    SkuBidRecommendationItemDTO();
    virtual ~SkuBidRecommendationItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SkuBidRecommendationItemDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getSku() const;
    bool skuIsSet() const;
    void unsetSku();

    void setSku(const utility::string_t& value);

    /// <summary>
    /// Значение ставки.
    /// </summary>
    int32_t getBid() const;
    bool bidIsSet() const;
    void unsetBid();

    void setBid(int32_t value);

    /// <summary>
    /// Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
    /// </summary>
    std::vector<std::shared_ptr<BidRecommendationItemDTO>>& getBidRecommendations();
    bool bidRecommendationsIsSet() const;
    void unsetBidRecommendations();

    void setBidRecommendations(const std::vector<std::shared_ptr<BidRecommendationItemDTO>>& value);

    /// <summary>
    /// Рекомендованные цены.
    /// </summary>
    std::vector<std::shared_ptr<PriceRecommendationItemDTO>>& getPriceRecommendations();
    bool priceRecommendationsIsSet() const;
    void unsetPriceRecommendations();

    void setPriceRecommendations(const std::vector<std::shared_ptr<PriceRecommendationItemDTO>>& value);


protected:
    utility::string_t m_Sku;
    bool m_SkuIsSet;
    int32_t m_Bid;
    bool m_BidIsSet;
    std::vector<std::shared_ptr<BidRecommendationItemDTO>> m_BidRecommendations;
    bool m_BidRecommendationsIsSet;
    std::vector<std::shared_ptr<PriceRecommendationItemDTO>> m_PriceRecommendations;
    bool m_PriceRecommendationsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SkuBidRecommendationItemDTO_H_ */
