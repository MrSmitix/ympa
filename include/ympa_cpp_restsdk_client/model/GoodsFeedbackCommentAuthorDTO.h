/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackCommentAuthorDTO.h
 *
 * Информация об авторе комментария.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackCommentAuthorDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackCommentAuthorDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GoodsFeedbackCommentAuthorType.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация об авторе комментария.
/// </summary>
class  GoodsFeedbackCommentAuthorDTO
    : public ModelBase
{
public:
    GoodsFeedbackCommentAuthorDTO();
    virtual ~GoodsFeedbackCommentAuthorDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GoodsFeedbackCommentAuthorDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackCommentAuthorType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<GoodsFeedbackCommentAuthorType>& value);

    /// <summary>
    /// Имя автора или название кабинета.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);


protected:
    std::shared_ptr<GoodsFeedbackCommentAuthorType> m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackCommentAuthorDTO_H_ */
