/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnShipmentStatusType.h
 *
 * Статус передачи возврата:  * &#x60;CREATED&#x60; — возврат создан.  * &#x60;RECEIVED&#x60; — принят у покупателя.  * &#x60;IN_TRANSIT&#x60; — возврат в пути.  * &#x60;READY_FOR_PICKUP&#x60; — возврат готов к выдаче магазину.  * &#x60;PICKED&#x60; — возврат выдан магазину.  * &#x60;LOST&#x60; — возврат утерян при транспортировке.  * &#x60;CANCELLED&#x60; — возврат отменен.  * &#x60;FULFILMENT_RECEIVED&#x60; — возврат принят на складе Маркета.  * &#x60;PREPARED_FOR_UTILIZATION&#x60; — возврат передан в утилизацию.  * &#x60;UTILIZED&#x60; — возврат утилизирован. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnShipmentStatusType_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnShipmentStatusType_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


class  ReturnShipmentStatusType
    : public ModelBase
{
public:
    ReturnShipmentStatusType();
    virtual ~ReturnShipmentStatusType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eReturnShipmentStatusType
    {
        ReturnShipmentStatusType_CREATED,
        ReturnShipmentStatusType_RECEIVED,
        ReturnShipmentStatusType_IN_TRANSIT,
        ReturnShipmentStatusType_READY_FOR_PICKUP,
        ReturnShipmentStatusType_PICKED,
        ReturnShipmentStatusType_LOST,
        ReturnShipmentStatusType_EXPIRED,
        ReturnShipmentStatusType_CANCELLED,
        ReturnShipmentStatusType_FULFILMENT_RECEIVED,
        ReturnShipmentStatusType_PREPARED_FOR_UTILIZATION,
        ReturnShipmentStatusType_NOT_IN_DEMAND,
        ReturnShipmentStatusType_UTILIZED,
        ReturnShipmentStatusType_READY_FOR_EXPROPRIATION,
        ReturnShipmentStatusType_RECEIVED_FOR_EXPROPRIATION,
    };

    eReturnShipmentStatusType getValue() const;
    void setValue(eReturnShipmentStatusType const value);

    protected:
        eReturnShipmentStatusType m_value;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnShipmentStatusType_H_ */
