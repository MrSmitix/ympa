/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedbackCommentDTO.h
 *
 * Комментарий к отзыву на магазин.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_FeedbackCommentDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_FeedbackCommentDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/FeedbackCommentAuthorDTO.h"
#include "ympa_cpp_restsdk_client/model/FeedbackCommentDTO.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class FeedbackCommentAuthorDTO;


/// <summary>
/// Комментарий к отзыву на магазин.
/// </summary>
class  FeedbackCommentDTO
    : public ModelBase
{
public:
    FeedbackCommentDTO();
    virtual ~FeedbackCommentDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FeedbackCommentDTO members

    /// <summary>
    /// Идентификатор ответа.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Идентификатор родительского ответа.
    /// </summary>
    int64_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(int64_t value);

    /// <summary>
    /// Текст ответа.
    /// </summary>
    utility::string_t getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const utility::string_t& value);

    /// <summary>
    /// Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedbackCommentAuthorDTO> getAuthor() const;
    bool authorIsSet() const;
    void unsetAuthor();

    void setAuthor(const std::shared_ptr<FeedbackCommentAuthorDTO>& value);

    /// <summary>
    /// Дочерние ответы.
    /// </summary>
    std::vector<std::shared_ptr<FeedbackCommentDTO>>& getChildren();
    bool childrenIsSet() const;
    void unsetChildren();

    void setChildren(const std::vector<std::shared_ptr<FeedbackCommentDTO>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    int64_t m_ParentId;
    bool m_ParentIdIsSet;
    utility::string_t m_Body;
    bool m_BodyIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    std::shared_ptr<FeedbackCommentAuthorDTO> m_Author;
    bool m_AuthorIsSet;
    std::vector<std::shared_ptr<FeedbackCommentDTO>> m_Children;
    bool m_ChildrenIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_FeedbackCommentDTO_H_ */
