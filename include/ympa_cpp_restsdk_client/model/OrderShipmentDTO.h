/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderShipmentDTO.h
 *
 * Список посылок.  В параметре может указываться несколько посылок. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderShipmentDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderShipmentDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderParcelBoxDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderTrackDTO.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderTrackDTO;
class OrderParcelBoxDTO;


/// <summary>
/// Список посылок.  В параметре может указываться несколько посылок. 
/// </summary>
class  OrderShipmentDTO
    : public ModelBase
{
public:
    OrderShipmentDTO();
    virtual ~OrderShipmentDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderShipmentDTO members

    /// <summary>
    /// Идентификатор посылки, присвоенный Маркетом.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::string_t getShipmentDate() const;
    bool shipmentDateIsSet() const;
    void unsetShipmentDate();

    void setShipmentDate(const utility::string_t& value);

    /// <summary>
    /// **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
    /// </summary>
    utility::string_t getShipmentTime() const;
    bool shipmentTimeIsSet() const;
    void unsetShipmentTime();

    void setShipmentTime(const utility::string_t& value);

    /// <summary>
    /// **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
    /// </summary>
    std::vector<std::shared_ptr<OrderTrackDTO>>& getTracks();
    bool tracksIsSet() const;
    void unsetTracks();

    void setTracks(const std::vector<std::shared_ptr<OrderTrackDTO>>& value);

    /// <summary>
    /// Список грузовых мест.
    /// </summary>
    std::vector<std::shared_ptr<OrderParcelBoxDTO>>& getBoxes();
    bool boxesIsSet() const;
    void unsetBoxes();

    void setBoxes(const std::vector<std::shared_ptr<OrderParcelBoxDTO>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ShipmentDate;
    bool m_ShipmentDateIsSet;
    utility::string_t m_ShipmentTime;
    bool m_ShipmentTimeIsSet;
    std::vector<std::shared_ptr<OrderTrackDTO>> m_Tracks;
    bool m_TracksIsSet;
    std::vector<std::shared_ptr<OrderParcelBoxDTO>> m_Boxes;
    bool m_BoxesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderShipmentDTO_H_ */
