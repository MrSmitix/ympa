/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PromoOfferAutoParticipatingDetailsDTO.h
 *
 * Информация об автоматическом добавлении товара в акцию.  Причины, по которым товар не был добавлен автоматически в других магазинах, можно узнать в кабинете продавца на Маркете на странице акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PromoOfferAutoParticipatingDetailsDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PromoOfferAutoParticipatingDetailsDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация об автоматическом добавлении товара в акцию.  Причины, по которым товар не был добавлен автоматически в других магазинах, можно узнать в кабинете продавца на Маркете на странице акции.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
/// </summary>
class  PromoOfferAutoParticipatingDetailsDTO
    : public ModelBase
{
public:
    PromoOfferAutoParticipatingDetailsDTO();
    virtual ~PromoOfferAutoParticipatingDetailsDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PromoOfferAutoParticipatingDetailsDTO members

    /// <summary>
    /// Магазины, в которых товар добавлен в акцию автоматически.  Возвращается, если статус товара в акции — &#x60;PARTIALLY_AUTO&#x60;. 
    /// </summary>
    std::vector<int64_t>& getCampaignIds();
    bool campaignIdsIsSet() const;
    void unsetCampaignIds();

    void setCampaignIds(std::vector<int64_t> value);


protected:
    std::vector<int64_t> m_CampaignIds;
    bool m_CampaignIdsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PromoOfferAutoParticipatingDetailsDTO_H_ */
