/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetMappingDTO.h
 *
 * Информация о товарах в каталоге. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetMappingDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetMappingDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация о товарах в каталоге. 
/// </summary>
class  GetMappingDTO
    : public ModelBase
{
public:
    GetMappingDTO();
    virtual ~GetMappingDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetMappingDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    bool marketSkuIsSet() const;
    void unsetMarketSku();

    void setMarketSku(int64_t value);

    /// <summary>
    /// Название карточки товара.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    utility::string_t getMarketSkuName() const;
    bool marketSkuNameIsSet() const;
    void unsetMarketSkuName();

    void setMarketSkuName(const utility::string_t& value);

    /// <summary>
    /// Идентификатор модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    int64_t getMarketModelId() const;
    bool marketModelIdIsSet() const;
    void unsetMarketModelId();

    void setMarketModelId(int64_t value);

    /// <summary>
    /// Название модели на Маркете.  Может отсутствовать в ответе, если товар еще не привязан к карточке. 
    /// </summary>
    utility::string_t getMarketModelName() const;
    bool marketModelNameIsSet() const;
    void unsetMarketModelName();

    void setMarketModelName(const utility::string_t& value);

    /// <summary>
    /// Идентификатор категории на Маркете, в которую попал товар.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
    /// </summary>
    int64_t getMarketCategoryId() const;
    bool marketCategoryIdIsSet() const;
    void unsetMarketCategoryId();

    void setMarketCategoryId(int64_t value);

    /// <summary>
    /// Название категории карточки на Маркете.  Может отсутствовать в ответе, если Маркет еще не определил категорию товара. 
    /// </summary>
    utility::string_t getMarketCategoryName() const;
    bool marketCategoryNameIsSet() const;
    void unsetMarketCategoryName();

    void setMarketCategoryName(const utility::string_t& value);


protected:
    int64_t m_MarketSku;
    bool m_MarketSkuIsSet;
    utility::string_t m_MarketSkuName;
    bool m_MarketSkuNameIsSet;
    int64_t m_MarketModelId;
    bool m_MarketModelIdIsSet;
    utility::string_t m_MarketModelName;
    bool m_MarketModelNameIsSet;
    int64_t m_MarketCategoryId;
    bool m_MarketCategoryIdIsSet;
    utility::string_t m_MarketCategoryName;
    bool m_MarketCategoryNameIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetMappingDTO_H_ */
