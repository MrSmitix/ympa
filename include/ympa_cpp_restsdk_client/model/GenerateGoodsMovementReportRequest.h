/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateGoodsMovementReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateGoodsMovementReportRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateGoodsMovementReportRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GenerateGoodsMovementReportRequest
    : public ModelBase
{
public:
    GenerateGoodsMovementReportRequest();
    virtual ~GenerateGoodsMovementReportRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GenerateGoodsMovementReportRequest members

    /// <summary>
    /// Идентификатор кампании.
    /// </summary>
    int64_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaignId();

    void setCampaignId(int64_t value);

    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    utility::datetime getDateFrom() const;
    bool dateFromIsSet() const;
    void unsetDateFrom();

    void setDateFrom(const utility::datetime& value);

    /// <summary>
    /// Конец периода, включительно.
    /// </summary>
    utility::datetime getDateTo() const;
    bool dateToIsSet() const;
    void unsetDateTo();

    void setDateTo(const utility::datetime& value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getShopSku() const;
    bool shopSkuIsSet() const;
    void unsetShopSku();

    void setShopSku(const utility::string_t& value);


protected:
    int64_t m_CampaignId;
    bool m_CampaignIdIsSet;
    utility::datetime m_DateFrom;
    bool m_DateFromIsSet;
    utility::datetime m_DateTo;
    bool m_DateToIsSet;
    utility::string_t m_ShopSku;
    bool m_ShopSkuIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateGoodsMovementReportRequest_H_ */
