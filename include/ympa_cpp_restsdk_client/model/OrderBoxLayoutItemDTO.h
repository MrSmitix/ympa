/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderBoxLayoutItemDTO.h
 *
 * Информация о товаре в коробке.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderBoxLayoutItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderBoxLayoutItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderBoxLayoutPartialCountDTO.h"
#include "ympa_cpp_restsdk_client/model/BriefOrderItemInstanceDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderBoxLayoutPartialCountDTO;
class BriefOrderItemInstanceDTO;


/// <summary>
/// Информация о товаре в коробке.
/// </summary>
class  OrderBoxLayoutItemDTO
    : public ModelBase
{
public:
    OrderBoxLayoutItemDTO();
    virtual ~OrderBoxLayoutItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderBoxLayoutItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  {% cut \&quot;Где его взять\&quot; %}  Идентификатор приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;.  {% endcut %}   
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Количество единиц товара в коробке.  Используйте это поле, если в коробке поедут целые товары, не разделенные на части. Не используйте это поле одновременно с &#x60;partialCount&#x60;. 
    /// </summary>
    int32_t getFullCount() const;
    bool fullCountIsSet() const;
    void unsetFullCount();

    void setFullCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderBoxLayoutPartialCountDTO> getPartialCount() const;
    bool partialCountIsSet() const;
    void unsetPartialCount();

    void setPartialCount(const std::shared_ptr<OrderBoxLayoutPartialCountDTO>& value);

    /// <summary>
    /// Переданные вами коды маркировки.
    /// </summary>
    std::vector<std::shared_ptr<BriefOrderItemInstanceDTO>>& getInstances();
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(const std::vector<std::shared_ptr<BriefOrderItemInstanceDTO>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    int32_t m_FullCount;
    bool m_FullCountIsSet;
    std::shared_ptr<OrderBoxLayoutPartialCountDTO> m_PartialCount;
    bool m_PartialCountIsSet;
    std::vector<std::shared_ptr<BriefOrderItemInstanceDTO>> m_Instances;
    bool m_InstancesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderBoxLayoutItemDTO_H_ */
