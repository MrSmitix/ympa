/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferDTO.h
 *
 * Предложение.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OfferDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OfferDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/CurrencyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Предложение.
/// </summary>
class  OfferDTO
    : public ModelBase
{
public:
    OfferDTO();
    virtual ~OfferDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OfferDTO members

    /// <summary>
    /// Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    int64_t getFeedId() const;
    bool feedIdIsSet() const;
    void unsetFeedId();

    void setFeedId(int64_t value);

    /// <summary>
    /// Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    utility::string_t getShopCategoryId() const;
    bool shopCategoryIdIsSet() const;
    void unsetShopCategoryId();

    void setShopCategoryId(const utility::string_t& value);

    /// <summary>
    /// Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
    /// </summary>
    int32_t getMarketCategoryId() const;
    bool marketCategoryIdIsSet() const;
    void unsetMarketCategoryId();

    void setMarketCategoryId(int32_t value);

    /// <summary>
    /// Цена предложения без скидки.
    /// </summary>
    double getPreDiscountPrice() const;
    bool preDiscountPriceIsSet() const;
    void unsetPreDiscountPrice();

    void setPreDiscountPrice(double value);

    /// <summary>
    /// Скидка на предложение в процентах.
    /// </summary>
    int32_t getDiscount() const;
    bool discountIsSet() const;
    void unsetDiscount();

    void setDiscount(int32_t value);

    /// <summary>
    /// Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
    /// </summary>
    bool isCutPrice() const;
    bool cutPriceIsSet() const;
    void unsetCutPrice();

    void setCutPrice(bool value);

    /// <summary>
    /// URL-адрес предложения на сайте магазина.
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %} 
    /// </summary>
    int64_t getModelId() const;
    bool modelIdIsSet() const;
    void unsetModelId();

    void setModelId(int64_t value);

    /// <summary>
    /// Наименование предложения.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CurrencyType> getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const std::shared_ptr<CurrencyType>& value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    /// </summary>
    double getBid() const;
    bool bidIsSet() const;
    void unsetBid();

    void setBid(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
    /// </summary>
    double getCbid() const;
    bool cbidIsSet() const;
    void unsetCbid();

    void setCbid(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
    /// </summary>
    double getFee() const;
    bool feeIsSet() const;
    void unsetFee();

    void setFee(double value);

    /// <summary>
    /// Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
    /// </summary>
    bool isBlocked() const;
    bool blockedIsSet() const;
    void unsetBlocked();

    void setBlocked(bool value);


protected:
    double m_Price;
    bool m_PriceIsSet;
    int64_t m_FeedId;
    bool m_FeedIdIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ShopCategoryId;
    bool m_ShopCategoryIdIsSet;
    int32_t m_MarketCategoryId;
    bool m_MarketCategoryIdIsSet;
    double m_PreDiscountPrice;
    bool m_PreDiscountPriceIsSet;
    int32_t m_Discount;
    bool m_DiscountIsSet;
    bool m_CutPrice;
    bool m_CutPriceIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    int64_t m_ModelId;
    bool m_ModelIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<CurrencyType> m_Currency;
    bool m_CurrencyIsSet;
    double m_Bid;
    bool m_BidIsSet;
    double m_Cbid;
    bool m_CbidIsSet;
    double m_Fee;
    bool m_FeeIsSet;
    bool m_Blocked;
    bool m_BlockedIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OfferDTO_H_ */
