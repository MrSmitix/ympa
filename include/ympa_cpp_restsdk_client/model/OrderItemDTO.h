/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemDTO.h
 *
 * Список товаров в заказе.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderVatType.h"
#include "ympa_cpp_restsdk_client/model/OrderItemInstanceType.h"
#include "ympa_cpp_restsdk_client/model/OrderItemSubsidyDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderItemPromoDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderItemInstanceDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrderItemDetailDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderItemPromoDTO;
class OrderItemInstanceDTO;
class OrderItemDetailDTO;
class OrderItemSubsidyDTO;


/// <summary>
/// Список товаров в заказе.
/// </summary>
class  OrderItemDTO
    : public ModelBase
{
public:
    OrderItemDTO();
    virtual ~OrderItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getOfferId() const;
    bool offerIdIsSet() const;
    void unsetOfferId();

    void setOfferId(const utility::string_t& value);

    /// <summary>
    /// Название товара.
    /// </summary>
    utility::string_t getOfferName() const;
    bool offerNameIsSet() const;
    void unsetOfferName();

    void setOfferName(const utility::string_t& value);

    /// <summary>
    /// Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerPrice() const;
    bool buyerPriceIsSet() const;
    void unsetBuyerPrice();

    void setBuyerPrice(double value);

    /// <summary>
    /// Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerPriceBeforeDiscount() const;
    bool buyerPriceBeforeDiscountIsSet() const;
    void unsetBuyerPriceBeforeDiscount();

    void setBuyerPriceBeforeDiscount(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    /// </summary>
    double getPriceBeforeDiscount() const;
    bool priceBeforeDiscountIsSet() const;
    void unsetPriceBeforeDiscount();

    void setPriceBeforeDiscount(double value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderVatType> getVat() const;
    bool vatIsSet() const;
    void unsetVat();

    void setVat(const std::shared_ptr<OrderVatType>& value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getShopSku() const;
    bool shopSkuIsSet() const;
    void unsetShopSku();

    void setShopSku(const utility::string_t& value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    /// </summary>
    double getSubsidy() const;
    bool subsidyIsSet() const;
    void unsetSubsidy();

    void setSubsidy(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    /// </summary>
    utility::string_t getPartnerWarehouseId() const;
    bool partnerWarehouseIdIsSet() const;
    void unsetPartnerWarehouseId();

    void setPartnerWarehouseId(const utility::string_t& value);

    /// <summary>
    /// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemPromoDTO>>& getPromos();
    bool promosIsSet() const;
    void unsetPromos();

    void setPromos(const std::vector<std::shared_ptr<OrderItemPromoDTO>>& value);

    /// <summary>
    /// Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
    /// </summary>
    std::vector<std::shared_ptr<OrderItemInstanceDTO>>& getInstances();
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(const std::vector<std::shared_ptr<OrderItemInstanceDTO>>& value);

    /// <summary>
    /// Информация об удалении товара из заказа. 
    /// </summary>
    std::vector<std::shared_ptr<OrderItemDetailDTO>>& getDetails();
    bool detailsIsSet() const;
    void unsetDetails();

    void setDetails(const std::vector<std::shared_ptr<OrderItemDetailDTO>>& value);

    /// <summary>
    /// Список субсидий по типам.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemSubsidyDTO>>& getSubsidies();
    bool subsidiesIsSet() const;
    void unsetSubsidies();

    void setSubsidies(const std::vector<std::shared_ptr<OrderItemSubsidyDTO>>& value);

    /// <summary>
    /// Список необходимых маркировок товара.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemInstanceType>>& getRequiredInstanceTypes();
    bool requiredInstanceTypesIsSet() const;
    void unsetRequiredInstanceTypes();

    void setRequiredInstanceTypes(const std::vector<std::shared_ptr<OrderItemInstanceType>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_OfferId;
    bool m_OfferIdIsSet;
    utility::string_t m_OfferName;
    bool m_OfferNameIsSet;
    double m_Price;
    bool m_PriceIsSet;
    double m_BuyerPrice;
    bool m_BuyerPriceIsSet;
    double m_BuyerPriceBeforeDiscount;
    bool m_BuyerPriceBeforeDiscountIsSet;
    double m_PriceBeforeDiscount;
    bool m_PriceBeforeDiscountIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    std::shared_ptr<OrderVatType> m_Vat;
    bool m_VatIsSet;
    utility::string_t m_ShopSku;
    bool m_ShopSkuIsSet;
    double m_Subsidy;
    bool m_SubsidyIsSet;
    utility::string_t m_PartnerWarehouseId;
    bool m_PartnerWarehouseIdIsSet;
    std::vector<std::shared_ptr<OrderItemPromoDTO>> m_Promos;
    bool m_PromosIsSet;
    std::vector<std::shared_ptr<OrderItemInstanceDTO>> m_Instances;
    bool m_InstancesIsSet;
    std::vector<std::shared_ptr<OrderItemDetailDTO>> m_Details;
    bool m_DetailsIsSet;
    std::vector<std::shared_ptr<OrderItemSubsidyDTO>> m_Subsidies;
    bool m_SubsidiesIsSet;
    std::vector<std::shared_ptr<OrderItemInstanceType>> m_RequiredInstanceTypes;
    bool m_RequiredInstanceTypesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderItemDTO_H_ */
