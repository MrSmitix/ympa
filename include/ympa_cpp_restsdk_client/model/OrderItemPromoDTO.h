/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderItemPromoDTO.h
 *
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderItemPromoDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderItemPromoDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrderPromoType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
/// </summary>
class  OrderItemPromoDTO
    : public ModelBase
{
public:
    OrderItemPromoDTO();
    virtual ~OrderItemPromoDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderItemPromoDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderPromoType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<OrderPromoType>& value);

    /// <summary>
    /// Размер пользовательской скидки в валюте покупателя. 
    /// </summary>
    double getDiscount() const;
    bool discountIsSet() const;
    void unsetDiscount();

    void setDiscount(double value);

    /// <summary>
    /// Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
    /// </summary>
    double getSubsidy() const;
    bool subsidyIsSet() const;
    void unsetSubsidy();

    void setSubsidy(double value);

    /// <summary>
    /// Идентификатор акции поставщика. 
    /// </summary>
    utility::string_t getShopPromoId() const;
    bool shopPromoIdIsSet() const;
    void unsetShopPromoId();

    void setShopPromoId(const utility::string_t& value);

    /// <summary>
    /// Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр &#x60;type&#x3D;MARKET_DEAL&#x60;. 
    /// </summary>
    utility::string_t getMarketPromoId() const;
    bool marketPromoIdIsSet() const;
    void unsetMarketPromoId();

    void setMarketPromoId(const utility::string_t& value);


protected:
    std::shared_ptr<OrderPromoType> m_Type;
    bool m_TypeIsSet;
    double m_Discount;
    bool m_DiscountIsSet;
    double m_Subsidy;
    bool m_SubsidyIsSet;
    utility::string_t m_ShopPromoId;
    bool m_ShopPromoIdIsSet;
    utility::string_t m_MarketPromoId;
    bool m_MarketPromoIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderItemPromoDTO_H_ */
