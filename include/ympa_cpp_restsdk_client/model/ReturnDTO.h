/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnDTO.h
 *
 * Возврат заказа.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/RecipientType.h"
#include "ympa_cpp_restsdk_client/model/ReturnShipmentStatusType.h"
#include "ympa_cpp_restsdk_client/model/RefundStatusType.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/ReturnItemDTO.h"
#include "ympa_cpp_restsdk_client/model/ReturnType.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/LogisticPickupPointDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class LogisticPickupPointDTO;
class ReturnItemDTO;


/// <summary>
/// Возврат заказа.
/// </summary>
class  ReturnDTO
    : public ModelBase
{
public:
    ReturnDTO();
    virtual ~ReturnDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ReturnDTO members

    /// <summary>
    /// Идентификатор возврата.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Номер заказа.
    /// </summary>
    int64_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrderId();

    void setOrderId(int64_t value);

    /// <summary>
    /// Дата создания возврата клиентом.
    /// </summary>
    utility::datetime getCreationDate() const;
    bool creationDateIsSet() const;
    void unsetCreationDate();

    void setCreationDate(const utility::datetime& value);

    /// <summary>
    /// Дата обновления возврата.
    /// </summary>
    utility::datetime getUpdateDate() const;
    bool updateDateIsSet() const;
    void unsetUpdateDate();

    void setUpdateDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RefundStatusType> getRefundStatus() const;
    bool refundStatusIsSet() const;
    void unsetRefundStatus();

    void setRefundStatus(const std::shared_ptr<RefundStatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LogisticPickupPointDTO> getLogisticPickupPoint() const;
    bool logisticPickupPointIsSet() const;
    void unsetLogisticPickupPoint();

    void setLogisticPickupPoint(const std::shared_ptr<LogisticPickupPointDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RecipientType> getShipmentRecipientType() const;
    bool shipmentRecipientTypeIsSet() const;
    void unsetShipmentRecipientType();

    void setShipmentRecipientType(const std::shared_ptr<RecipientType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnShipmentStatusType> getShipmentStatus() const;
    bool shipmentStatusIsSet() const;
    void unsetShipmentStatus();

    void setShipmentStatus(const std::shared_ptr<ReturnShipmentStatusType>& value);

    /// <summary>
    /// Сумма возврата.
    /// </summary>
    int64_t getRefundAmount() const;
    bool refundAmountIsSet() const;
    void unsetRefundAmount();

    void setRefundAmount(int64_t value);

    /// <summary>
    /// Список товаров в возврате.
    /// </summary>
    std::vector<std::shared_ptr<ReturnItemDTO>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<ReturnItemDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReturnType> getReturnType() const;
    bool returnTypeIsSet() const;
    void unsetReturnType();

    void setReturnType(const std::shared_ptr<ReturnType>& value);

    /// <summary>
    /// Используется ли опция **Быстрый возврат денег за дешевый брак**. 
    /// </summary>
    bool isFastReturn() const;
    bool fastReturnIsSet() const;
    void unsetFastReturn();

    void setFastReturn(bool value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    int64_t m_OrderId;
    bool m_OrderIdIsSet;
    utility::datetime m_CreationDate;
    bool m_CreationDateIsSet;
    utility::datetime m_UpdateDate;
    bool m_UpdateDateIsSet;
    std::shared_ptr<RefundStatusType> m_RefundStatus;
    bool m_RefundStatusIsSet;
    std::shared_ptr<LogisticPickupPointDTO> m_LogisticPickupPoint;
    bool m_LogisticPickupPointIsSet;
    std::shared_ptr<RecipientType> m_ShipmentRecipientType;
    bool m_ShipmentRecipientTypeIsSet;
    std::shared_ptr<ReturnShipmentStatusType> m_ShipmentStatus;
    bool m_ShipmentStatusIsSet;
    int64_t m_RefundAmount;
    bool m_RefundAmountIsSet;
    std::vector<std::shared_ptr<ReturnItemDTO>> m_Items;
    bool m_ItemsIsSet;
    std::shared_ptr<ReturnType> m_ReturnType;
    bool m_ReturnTypeIsSet;
    bool m_FastReturn;
    bool m_FastReturnIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnDTO_H_ */
