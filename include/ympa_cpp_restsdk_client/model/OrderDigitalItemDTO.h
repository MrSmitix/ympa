/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDigitalItemDTO.h
 *
 * Ключ цифрового товара.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDigitalItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDigitalItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Ключ цифрового товара.
/// </summary>
class  OrderDigitalItemDTO
    : public ModelBase
{
public:
    OrderDigitalItemDTO();
    virtual ~OrderDigitalItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderDigitalItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;. 
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Сам ключ.
    /// </summary>
    utility::string_t getCode() const;
    bool codeIsSet() const;
    void unsetCode();

    void setCode(const utility::string_t& value);

    /// <summary>
    /// Инструкция по активации.
    /// </summary>
    utility::string_t getSlip() const;
    bool slipIsSet() const;
    void unsetSlip();

    void setSlip(const utility::string_t& value);

    /// <summary>
    /// Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    utility::datetime getActivateTill() const;
    bool activateTillIsSet() const;
    void unsetActivate_till();

    void setActivateTill(const utility::datetime& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Code;
    bool m_CodeIsSet;
    utility::string_t m_Slip;
    bool m_SlipIsSet;
    utility::datetime m_Activate_till;
    bool m_Activate_tillIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDigitalItemDTO_H_ */
