/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsOrderDTO.h
 *
 * Информация о заказе.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsOrderDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsOrderDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrdersStatsItemDTO.h"
#include "ympa_cpp_restsdk_client/model/OrdersStatsOrderPaymentType.h"
#include "ympa_cpp_restsdk_client/model/OrdersStatsPaymentDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderStatsStatusType.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrdersStatsCommissionDTO.h"
#include "ympa_cpp_restsdk_client/model/OrdersStatsDeliveryRegionDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrdersStatsDeliveryRegionDTO;
class OrdersStatsItemDTO;
class OrdersStatsPaymentDTO;
class OrdersStatsCommissionDTO;


/// <summary>
/// Информация о заказе.
/// </summary>
class  OrdersStatsOrderDTO
    : public ModelBase
{
public:
    OrdersStatsOrderDTO();
    virtual ~OrdersStatsOrderDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrdersStatsOrderDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    utility::datetime getCreationDate() const;
    bool creationDateIsSet() const;
    void unsetCreationDate();

    void setCreationDate(const utility::datetime& value);

    /// <summary>
    /// Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). 
    /// </summary>
    utility::datetime getStatusUpdateDate() const;
    bool statusUpdateDateIsSet() const;
    void unsetStatusUpdateDate();

    void setStatusUpdateDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderStatsStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<OrderStatsStatusType>& value);

    /// <summary>
    /// Идентификатор заказа в информационной системе магазина.
    /// </summary>
    utility::string_t getPartnerOrderId() const;
    bool partnerOrderIdIsSet() const;
    void unsetPartnerOrderId();

    void setPartnerOrderId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsOrderPaymentType> getPaymentType() const;
    bool paymentTypeIsSet() const;
    void unsetPaymentType();

    void setPaymentType(const std::shared_ptr<OrdersStatsOrderPaymentType>& value);

    /// <summary>
    /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    /// </summary>
    bool isFake() const;
    bool fakeIsSet() const;
    void unsetFake();

    void setFake(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsDeliveryRegionDTO> getDeliveryRegion() const;
    bool deliveryRegionIsSet() const;
    void unsetDeliveryRegion();

    void setDeliveryRegion(const std::shared_ptr<OrdersStatsDeliveryRegionDTO>& value);

    /// <summary>
    /// Список товаров в заказе после возможных изменений.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsItemDTO>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<OrdersStatsItemDTO>>& value);

    /// <summary>
    /// Список товаров в заказе до изменений.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsItemDTO>>& getInitialItems();
    bool initialItemsIsSet() const;
    void unsetInitialItems();

    void setInitialItems(const std::vector<std::shared_ptr<OrdersStatsItemDTO>>& value);

    /// <summary>
    /// Информация о денежных переводах по заказу.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsPaymentDTO>>& getPayments();
    bool paymentsIsSet() const;
    void unsetPayments();

    void setPayments(const std::vector<std::shared_ptr<OrdersStatsPaymentDTO>>& value);

    /// <summary>
    /// Информация о комиссиях за заказ.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsCommissionDTO>>& getCommissions();
    bool commissionsIsSet() const;
    void unsetCommissions();

    void setCommissions(const std::vector<std::shared_ptr<OrdersStatsCommissionDTO>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::datetime m_CreationDate;
    bool m_CreationDateIsSet;
    utility::datetime m_StatusUpdateDate;
    bool m_StatusUpdateDateIsSet;
    std::shared_ptr<OrderStatsStatusType> m_Status;
    bool m_StatusIsSet;
    utility::string_t m_PartnerOrderId;
    bool m_PartnerOrderIdIsSet;
    std::shared_ptr<OrdersStatsOrderPaymentType> m_PaymentType;
    bool m_PaymentTypeIsSet;
    bool m_Fake;
    bool m_FakeIsSet;
    std::shared_ptr<OrdersStatsDeliveryRegionDTO> m_DeliveryRegion;
    bool m_DeliveryRegionIsSet;
    std::vector<std::shared_ptr<OrdersStatsItemDTO>> m_Items;
    bool m_ItemsIsSet;
    std::vector<std::shared_ptr<OrdersStatsItemDTO>> m_InitialItems;
    bool m_InitialItemsIsSet;
    std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> m_Payments;
    bool m_PaymentsIsSet;
    std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> m_Commissions;
    bool m_CommissionsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsOrderDTO_H_ */
