/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatMessagesResultDTO.h
 *
 * Информация о сообщениях.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ChatMessagesResultDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ChatMessagesResultDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/ForwardScrollingPagerDTO.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/ChatMessageDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ChatMessageDTO;
class ForwardScrollingPagerDTO;


/// <summary>
/// Информация о сообщениях.
/// </summary>
class  ChatMessagesResultDTO
    : public ModelBase
{
public:
    ChatMessagesResultDTO();
    virtual ~ChatMessagesResultDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChatMessagesResultDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrderId();

    void setOrderId(int64_t value);

    /// <summary>
    /// Информация о сообщениях.
    /// </summary>
    std::vector<std::shared_ptr<ChatMessageDTO>>& getMessages();
    bool messagesIsSet() const;
    void unsetMessages();

    void setMessages(const std::vector<std::shared_ptr<ChatMessageDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ForwardScrollingPagerDTO> getPaging() const;
    bool pagingIsSet() const;
    void unsetPaging();

    void setPaging(const std::shared_ptr<ForwardScrollingPagerDTO>& value);


protected:
    int64_t m_OrderId;
    bool m_OrderIdIsSet;
    std::vector<std::shared_ptr<ChatMessageDTO>> m_Messages;
    bool m_MessagesIsSet;
    std::shared_ptr<ForwardScrollingPagerDTO> m_Paging;
    bool m_PagingIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ChatMessagesResultDTO_H_ */
