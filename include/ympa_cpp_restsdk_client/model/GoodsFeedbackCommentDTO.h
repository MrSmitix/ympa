/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackCommentDTO.h
 *
 * Комментарий к отзыву.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackCommentDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackCommentDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GoodsFeedbackCommentStatusType.h"
#include "ympa_cpp_restsdk_client/model/GoodsFeedbackCommentAuthorDTO.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GoodsFeedbackCommentAuthorDTO;


/// <summary>
/// Комментарий к отзыву.
/// </summary>
class  GoodsFeedbackCommentDTO
    : public ModelBase
{
public:
    GoodsFeedbackCommentDTO();
    virtual ~GoodsFeedbackCommentDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GoodsFeedbackCommentDTO members

    /// <summary>
    /// Идентификатор комментария к отзыву. 
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Текст комментария.
    /// </summary>
    utility::string_t getText() const;
    bool textIsSet() const;
    void unsetText();

    void setText(const utility::string_t& value);

    /// <summary>
    /// Может ли продавец изменять комментарий или удалять его.
    /// </summary>
    bool isCanModify() const;
    bool canModifyIsSet() const;
    void unsetCanModify();

    void setCanModify(bool value);

    /// <summary>
    /// Идентификатор комментария к отзыву. 
    /// </summary>
    int64_t getParentId() const;
    bool parentIdIsSet() const;
    void unsetParentId();

    void setParentId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackCommentAuthorDTO> getAuthor() const;
    bool authorIsSet() const;
    void unsetAuthor();

    void setAuthor(const std::shared_ptr<GoodsFeedbackCommentAuthorDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackCommentStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<GoodsFeedbackCommentStatusType>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Text;
    bool m_TextIsSet;
    bool m_CanModify;
    bool m_CanModifyIsSet;
    int64_t m_ParentId;
    bool m_ParentIdIsSet;
    std::shared_ptr<GoodsFeedbackCommentAuthorDTO> m_Author;
    bool m_AuthorIsSet;
    std::shared_ptr<GoodsFeedbackCommentStatusType> m_Status;
    bool m_StatusIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackCommentDTO_H_ */
