/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReportInfoDTO.h
 *
 * Статус генерации и ссылка на готовый отчет.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ReportInfoDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ReportInfoDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/ReportStatusType.h"
#include "ympa_cpp_restsdk_client/model/ReportSubStatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Статус генерации и ссылка на готовый отчет.
/// </summary>
class  ReportInfoDTO
    : public ModelBase
{
public:
    ReportInfoDTO();
    virtual ~ReportInfoDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ReportInfoDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<ReportStatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ReportSubStatusType> getSubStatus() const;
    bool subStatusIsSet() const;
    void unsetSubStatus();

    void setSubStatus(const std::shared_ptr<ReportSubStatusType>& value);

    /// <summary>
    /// Дата и время запроса на генерацию.
    /// </summary>
    utility::datetime getGenerationRequestedAt() const;
    bool generationRequestedAtIsSet() const;
    void unsetGenerationRequestedAt();

    void setGenerationRequestedAt(const utility::datetime& value);

    /// <summary>
    /// Дата и время завершения генерации.
    /// </summary>
    utility::datetime getGenerationFinishedAt() const;
    bool generationFinishedAtIsSet() const;
    void unsetGenerationFinishedAt();

    void setGenerationFinishedAt(const utility::datetime& value);

    /// <summary>
    /// Ссылка на готовый отчет.
    /// </summary>
    utility::string_t getFile() const;
    bool fileIsSet() const;
    void unsetfile();

    void setFile(const utility::string_t& value);

    /// <summary>
    /// Ожидаемая продолжительность генерации в миллисекундах.
    /// </summary>
    int64_t getEstimatedGenerationTime() const;
    bool estimatedGenerationTimeIsSet() const;
    void unsetEstimatedGenerationTime();

    void setEstimatedGenerationTime(int64_t value);


protected:
    std::shared_ptr<ReportStatusType> m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<ReportSubStatusType> m_SubStatus;
    bool m_SubStatusIsSet;
    utility::datetime m_GenerationRequestedAt;
    bool m_GenerationRequestedAtIsSet;
    utility::datetime m_GenerationFinishedAt;
    bool m_GenerationFinishedAtIsSet;
    utility::string_t m_file;
    bool m_fileIsSet;
    int64_t m_EstimatedGenerationTime;
    bool m_EstimatedGenerationTimeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ReportInfoDTO_H_ */
