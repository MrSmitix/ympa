/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsItemDTO.h
 *
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrdersStatsDetailsDTO.h"
#include "ympa_cpp_restsdk_client/model/OrdersStatsPriceDTO.h"
#include "ympa_cpp_restsdk_client/model/OrdersStatsWarehouseDTO.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrdersStatsPriceDTO;
class OrdersStatsWarehouseDTO;
class OrdersStatsDetailsDTO;


/// <summary>
/// Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
/// </summary>
class  OrdersStatsItemDTO
    : public ModelBase
{
public:
    OrdersStatsItemDTO();
    virtual ~OrdersStatsItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrdersStatsItemDTO members

    /// <summary>
    /// Название товара.
    /// </summary>
    utility::string_t getOfferName() const;
    bool offerNameIsSet() const;
    void unsetOfferName();

    void setOfferName(const utility::string_t& value);

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    bool marketSkuIsSet() const;
    void unsetMarketSku();

    void setMarketSku(int64_t value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getShopSku() const;
    bool shopSkuIsSet() const;
    void unsetShopSku();

    void setShopSku(const utility::string_t& value);

    /// <summary>
    /// Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// Цена или скидки на товар.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsPriceDTO>>& getPrices();
    bool pricesIsSet() const;
    void unsetPrices();

    void setPrices(const std::vector<std::shared_ptr<OrdersStatsPriceDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsWarehouseDTO> getWarehouse() const;
    bool warehouseIsSet() const;
    void unsetWarehouse();

    void setWarehouse(const std::shared_ptr<OrdersStatsWarehouseDTO>& value);

    /// <summary>
    /// Информация об удалении товара из заказа.
    /// </summary>
    std::vector<std::shared_ptr<OrdersStatsDetailsDTO>>& getDetails();
    bool detailsIsSet() const;
    void unsetDetails();

    void setDetails(const std::vector<std::shared_ptr<OrdersStatsDetailsDTO>>& value);

    /// <summary>
    /// Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    /// </summary>
    std::vector<utility::string_t>& getCisList();
    bool cisListIsSet() const;
    void unsetCisList();

    void setCisList(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Первоначальное количество единиц товара.
    /// </summary>
    int32_t getInitialCount() const;
    bool initialCountIsSet() const;
    void unsetInitialCount();

    void setInitialCount(int32_t value);

    /// <summary>
    /// Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
    /// </summary>
    int32_t getBidFee() const;
    bool bidFeeIsSet() const;
    void unsetBidFee();

    void setBidFee(int32_t value);

    /// <summary>
    /// Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
    /// </summary>
    double getCofinanceThreshold() const;
    bool cofinanceThresholdIsSet() const;
    void unsetCofinanceThreshold();

    void setCofinanceThreshold(double value);

    /// <summary>
    /// Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
    /// </summary>
    double getCofinanceValue() const;
    bool cofinanceValueIsSet() const;
    void unsetCofinanceValue();

    void setCofinanceValue(double value);


protected:
    utility::string_t m_OfferName;
    bool m_OfferNameIsSet;
    int64_t m_MarketSku;
    bool m_MarketSkuIsSet;
    utility::string_t m_ShopSku;
    bool m_ShopSkuIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    std::vector<std::shared_ptr<OrdersStatsPriceDTO>> m_Prices;
    bool m_PricesIsSet;
    std::shared_ptr<OrdersStatsWarehouseDTO> m_Warehouse;
    bool m_WarehouseIsSet;
    std::vector<std::shared_ptr<OrdersStatsDetailsDTO>> m_Details;
    bool m_DetailsIsSet;
    std::vector<utility::string_t> m_CisList;
    bool m_CisListIsSet;
    int32_t m_InitialCount;
    bool m_InitialCountIsSet;
    int32_t m_BidFee;
    bool m_BidFeeIsSet;
    double m_CofinanceThreshold;
    bool m_CofinanceThresholdIsSet;
    double m_CofinanceValue;
    bool m_CofinanceValueIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsItemDTO_H_ */
