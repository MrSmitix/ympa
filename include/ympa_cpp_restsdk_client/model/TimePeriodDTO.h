/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TimePeriodDTO.h
 *
 * Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TimePeriodDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TimePeriodDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/TimeUnitType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Временной отрезок с комментарием. Требования к содержанию комментария зависят от контекста использования параметра и указаны в описании поля, которое его содержит.
/// </summary>
class  TimePeriodDTO
    : public ModelBase
{
public:
    TimePeriodDTO();
    virtual ~TimePeriodDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TimePeriodDTO members

    /// <summary>
    /// Продолжительность в указанных единицах.
    /// </summary>
    int32_t getTimePeriod() const;
    bool timePeriodIsSet() const;
    void unsetTimePeriod();

    void setTimePeriod(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimeUnitType> getTimeUnit() const;
    bool timeUnitIsSet() const;
    void unsetTimeUnit();

    void setTimeUnit(const std::shared_ptr<TimeUnitType>& value);

    /// <summary>
    /// Комментарий.
    /// </summary>
    utility::string_t getComment() const;
    bool commentIsSet() const;
    void unsetComment();

    void setComment(const utility::string_t& value);


protected:
    int32_t m_TimePeriod;
    bool m_TimePeriodIsSet;
    std::shared_ptr<TimeUnitType> m_TimeUnit;
    bool m_TimeUnitIsSet;
    utility::string_t m_Comment;
    bool m_CommentIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TimePeriodDTO_H_ */
