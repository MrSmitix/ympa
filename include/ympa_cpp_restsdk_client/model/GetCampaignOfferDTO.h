/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetCampaignOfferDTO.h
 *
 * Параметры размещения товара в магазине.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetCampaignOfferDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetCampaignOfferDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GetPriceWithDiscountDTO.h"
#include "ympa_cpp_restsdk_client/model/OfferCampaignStatusType.h"
#include "ympa_cpp_restsdk_client/model/GetPriceWithVatDTO.h"
#include "ympa_cpp_restsdk_client/model/QuantumDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OfferErrorDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class QuantumDTO;
class GetPriceWithDiscountDTO;
class GetPriceWithVatDTO;
class OfferErrorDTO;


/// <summary>
/// Параметры размещения товара в магазине.
/// </summary>
class  GetCampaignOfferDTO
    : public ModelBase
{
public:
    GetCampaignOfferDTO();
    virtual ~GetCampaignOfferDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetCampaignOfferDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getOfferId() const;
    bool offerIdIsSet() const;
    void unsetOfferId();

    void setOfferId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QuantumDTO> getQuantum() const;
    bool quantumIsSet() const;
    void unsetQuantum();

    void setQuantum(const std::shared_ptr<QuantumDTO>& value);

    /// <summary>
    /// Есть ли товар в продаже. 
    /// </summary>
    bool isAvailable() const;
    bool availableIsSet() const;
    void unsetAvailable();

    void setAvailable(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPriceWithDiscountDTO> getBasicPrice() const;
    bool basicPriceIsSet() const;
    void unsetBasicPrice();

    void setBasicPrice(const std::shared_ptr<GetPriceWithDiscountDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPriceWithVatDTO> getCampaignPrice() const;
    bool campaignPriceIsSet() const;
    void unsetCampaignPrice();

    void setCampaignPrice(const std::shared_ptr<GetPriceWithVatDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfferCampaignStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<OfferCampaignStatusType>& value);

    /// <summary>
    /// Ошибки, препятствующие размещению товара на витрине. 
    /// </summary>
    std::vector<std::shared_ptr<OfferErrorDTO>>& getErrors();
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::vector<std::shared_ptr<OfferErrorDTO>>& value);

    /// <summary>
    /// Предупреждения, не препятствующие размещению товара на витрине. 
    /// </summary>
    std::vector<std::shared_ptr<OfferErrorDTO>>& getWarnings();
    bool warningsIsSet() const;
    void unsetWarnings();

    void setWarnings(const std::vector<std::shared_ptr<OfferErrorDTO>>& value);


protected:
    utility::string_t m_OfferId;
    bool m_OfferIdIsSet;
    std::shared_ptr<QuantumDTO> m_Quantum;
    bool m_QuantumIsSet;
    bool m_Available;
    bool m_AvailableIsSet;
    std::shared_ptr<GetPriceWithDiscountDTO> m_BasicPrice;
    bool m_BasicPriceIsSet;
    std::shared_ptr<GetPriceWithVatDTO> m_CampaignPrice;
    bool m_CampaignPriceIsSet;
    std::shared_ptr<OfferCampaignStatusType> m_Status;
    bool m_StatusIsSet;
    std::vector<std::shared_ptr<OfferErrorDTO>> m_Errors;
    bool m_ErrorsIsSet;
    std::vector<std::shared_ptr<OfferErrorDTO>> m_Warnings;
    bool m_WarningsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetCampaignOfferDTO_H_ */
