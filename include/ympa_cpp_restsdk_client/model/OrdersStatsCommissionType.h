/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsCommissionType.h
 *
 * Услуга:  * &#x60;FEE&#x60; — размещение товара на Маркете. * &#x60;FULFILLMENT&#x60; — складская обработка. Не возвращается с 1 января 2024 года. * &#x60;LOYALTY_PARTICIPATION_FEE&#x60; — участие в программе лояльности и отзывы за баллы. * &#x60;AUCTION_PROMOTION&#x60; — буст продаж с оплатой за продажи. * &#x60;INSTALLMENT&#x60; — рассрочка. Не возвращается с 24 февраля 2022 года. * &#x60;DELIVERY_TO_CUSTOMER&#x60; — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * &#x60;EXPRESS_DELIVERY_TO_CUSTOMER&#x60; — экспресс-доставка покупателю (Экспресс). * &#x60;AGENCY&#x60; — прием платежа покупателя. * &#x60;PAYMENT_TRANSFER&#x60; — перевод платежа покупателя. * &#x60;RETURNED_ORDERS_STORAGE&#x60; — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * &#x60;SORTING&#x60; — обработка заказа (FBS). * &#x60;INTAKE_SORTING&#x60; — организация забора заказов со склада продавца (FBS). * &#x60;RETURN_PROCESSING&#x60; — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * &#x60;ILLIQUID_GOODS_SALE&#x60; — вознаграждение за продажу невывезенных товаров. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsCommissionType_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsCommissionType_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


class  OrdersStatsCommissionType
    : public ModelBase
{
public:
    OrdersStatsCommissionType();
    virtual ~OrdersStatsCommissionType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eOrdersStatsCommissionType
    {
        OrdersStatsCommissionType_FEE,
        OrdersStatsCommissionType_FULFILLMENT,
        OrdersStatsCommissionType_LOYALTY_PARTICIPATION_FEE,
        OrdersStatsCommissionType_AUCTION_PROMOTION,
        OrdersStatsCommissionType_INSTALLMENT,
        OrdersStatsCommissionType_DELIVERY_TO_CUSTOMER,
        OrdersStatsCommissionType_EXPRESS_DELIVERY_TO_CUSTOMER,
        OrdersStatsCommissionType_AGENCY,
        OrdersStatsCommissionType_PAYMENT_TRANSFER,
        OrdersStatsCommissionType_RETURNED_ORDERS_STORAGE,
        OrdersStatsCommissionType_SORTING,
        OrdersStatsCommissionType_INTAKE_SORTING,
        OrdersStatsCommissionType_RETURN_PROCESSING,
        OrdersStatsCommissionType_ILLIQUID_GOODS_SALE,
    };

    eOrdersStatsCommissionType getValue() const;
    void setValue(eOrdersStatsCommissionType const value);

    protected:
        eOrdersStatsCommissionType m_value;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsCommissionType_H_ */
