/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProvideOrderDigitalCodesRequest.h
 *
 * Запрос на передачу ключей цифровых товаров.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ProvideOrderDigitalCodesRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ProvideOrderDigitalCodesRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderDigitalItemDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderDigitalItemDTO;


/// <summary>
/// Запрос на передачу ключей цифровых товаров.
/// </summary>
class  ProvideOrderDigitalCodesRequest
    : public ModelBase
{
public:
    ProvideOrderDigitalCodesRequest();
    virtual ~ProvideOrderDigitalCodesRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ProvideOrderDigitalCodesRequest members

    /// <summary>
    /// Список проданных ключей.  Если в заказе есть несколько **одинаковых** товаров (например, несколько ключей к одной и той же подписке), передайте каждый в виде отдельного элемента массива. &#x60;id&#x60; у этих элементов должен быть один и тот же. 
    /// </summary>
    std::vector<std::shared_ptr<OrderDigitalItemDTO>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<OrderDigitalItemDTO>>& value);


protected:
    std::vector<std::shared_ptr<OrderDigitalItemDTO>> m_Items;
    bool m_ItemsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ProvideOrderDigitalCodesRequest_H_ */
