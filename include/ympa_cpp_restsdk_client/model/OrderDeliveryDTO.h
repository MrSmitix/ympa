/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryDTO.h
 *
 * Информация о доставке.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderVatType.h"
#include "ympa_cpp_restsdk_client/model/OrderShipmentDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderTrackDTO.h"
#include "ympa_cpp_restsdk_client/model/RegionDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderDeliveryAddressDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderLiftType.h"
#include "ympa_cpp_restsdk_client/model/OrderDeliveryType.h"
#include "ympa_cpp_restsdk_client/model/OrderDeliveryEacType.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/OrderCourierDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrderDeliveryDatesDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderDeliveryDispatchType.h"
#include "ympa_cpp_restsdk_client/model/OrderDeliveryPartnerType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderCourierDTO;
class OrderDeliveryDatesDTO;
class RegionDTO;
class OrderDeliveryAddressDTO;
class OrderTrackDTO;
class OrderShipmentDTO;


/// <summary>
/// Информация о доставке.
/// </summary>
class  OrderDeliveryDTO
    : public ModelBase
{
public:
    OrderDeliveryDTO();
    virtual ~OrderDeliveryDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderDeliveryDTO members

    /// <summary>
    /// Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<OrderDeliveryType>& value);

    /// <summary>
    /// Наименование службы доставки.
    /// </summary>
    utility::string_t getServiceName() const;
    bool serviceNameIsSet() const;
    void unsetServiceName();

    void setServiceName(const utility::string_t& value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryPartnerType> getDeliveryPartnerType() const;
    bool deliveryPartnerTypeIsSet() const;
    void unsetDeliveryPartnerType();

    void setDeliveryPartnerType(const std::shared_ptr<OrderDeliveryPartnerType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderCourierDTO> getCourier() const;
    bool courierIsSet() const;
    void unsetCourier();

    void setCourier(const std::shared_ptr<OrderCourierDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryDatesDTO> getDates() const;
    bool datesIsSet() const;
    void unsetDates();

    void setDates(const std::shared_ptr<OrderDeliveryDatesDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RegionDTO> getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();

    void setRegion(const std::shared_ptr<RegionDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryAddressDTO> getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const std::shared_ptr<OrderDeliveryAddressDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderVatType> getVat() const;
    bool vatIsSet() const;
    void unsetVat();

    void setVat(const std::shared_ptr<OrderVatType>& value);

    /// <summary>
    /// Идентификатор службы доставки.
    /// </summary>
    int64_t getDeliveryServiceId() const;
    bool deliveryServiceIdIsSet() const;
    void unsetDeliveryServiceId();

    void setDeliveryServiceId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderLiftType> getLiftType() const;
    bool liftTypeIsSet() const;
    void unsetLiftType();

    void setLiftType(const std::shared_ptr<OrderLiftType>& value);

    /// <summary>
    /// Стоимость подъема на этаж.
    /// </summary>
    double getLiftPrice() const;
    bool liftPriceIsSet() const;
    void unsetLiftPrice();

    void setLiftPrice(double value);

    /// <summary>
    /// Идентификатор пункта самовывоза, присвоенный магазином.
    /// </summary>
    utility::string_t getOutletCode() const;
    bool outletCodeIsSet() const;
    void unsetOutletCode();

    void setOutletCode(const utility::string_t& value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::string_t getOutletStorageLimitDate() const;
    bool outletStorageLimitDateIsSet() const;
    void unsetOutletStorageLimitDate();

    void setOutletStorageLimitDate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryDispatchType> getDispatchType() const;
    bool dispatchTypeIsSet() const;
    void unsetDispatchType();

    void setDispatchType(const std::shared_ptr<OrderDeliveryDispatchType>& value);

    /// <summary>
    /// Информация для отслеживания перемещений посылки.
    /// </summary>
    std::vector<std::shared_ptr<OrderTrackDTO>>& getTracks();
    bool tracksIsSet() const;
    void unsetTracks();

    void setTracks(const std::vector<std::shared_ptr<OrderTrackDTO>>& value);

    /// <summary>
    /// Информация о посылках.
    /// </summary>
    std::vector<std::shared_ptr<OrderShipmentDTO>>& getShipments();
    bool shipmentsIsSet() const;
    void unsetShipments();

    void setShipments(const std::vector<std::shared_ptr<OrderShipmentDTO>>& value);

    /// <summary>
    /// Приблизительная ли дата доставки.
    /// </summary>
    bool isEstimated() const;
    bool estimatedIsSet() const;
    void unsetEstimated();

    void setEstimated(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryEacType> getEacType() const;
    bool eacTypeIsSet() const;
    void unsetEacType();

    void setEacType(const std::shared_ptr<OrderDeliveryEacType>& value);

    /// <summary>
    /// Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
    /// </summary>
    utility::string_t getEacCode() const;
    bool eacCodeIsSet() const;
    void unsetEacCode();

    void setEacCode(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<OrderDeliveryType> m_Type;
    bool m_TypeIsSet;
    utility::string_t m_ServiceName;
    bool m_ServiceNameIsSet;
    double m_Price;
    bool m_PriceIsSet;
    std::shared_ptr<OrderDeliveryPartnerType> m_DeliveryPartnerType;
    bool m_DeliveryPartnerTypeIsSet;
    std::shared_ptr<OrderCourierDTO> m_Courier;
    bool m_CourierIsSet;
    std::shared_ptr<OrderDeliveryDatesDTO> m_Dates;
    bool m_DatesIsSet;
    std::shared_ptr<RegionDTO> m_Region;
    bool m_RegionIsSet;
    std::shared_ptr<OrderDeliveryAddressDTO> m_Address;
    bool m_AddressIsSet;
    std::shared_ptr<OrderVatType> m_Vat;
    bool m_VatIsSet;
    int64_t m_DeliveryServiceId;
    bool m_DeliveryServiceIdIsSet;
    std::shared_ptr<OrderLiftType> m_LiftType;
    bool m_LiftTypeIsSet;
    double m_LiftPrice;
    bool m_LiftPriceIsSet;
    utility::string_t m_OutletCode;
    bool m_OutletCodeIsSet;
    utility::string_t m_OutletStorageLimitDate;
    bool m_OutletStorageLimitDateIsSet;
    std::shared_ptr<OrderDeliveryDispatchType> m_DispatchType;
    bool m_DispatchTypeIsSet;
    std::vector<std::shared_ptr<OrderTrackDTO>> m_Tracks;
    bool m_TracksIsSet;
    std::vector<std::shared_ptr<OrderShipmentDTO>> m_Shipments;
    bool m_ShipmentsIsSet;
    bool m_Estimated;
    bool m_EstimatedIsSet;
    std::shared_ptr<OrderDeliveryEacType> m_EacType;
    bool m_EacTypeIsSet;
    utility::string_t m_EacCode;
    bool m_EacCodeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryDTO_H_ */
