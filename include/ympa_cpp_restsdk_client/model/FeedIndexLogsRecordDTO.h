/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedIndexLogsRecordDTO.h
 *
 * Список отчетов по индексации прайс-листа.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_FeedIndexLogsRecordDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_FeedIndexLogsRecordDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/FeedIndexLogsIndexType.h"
#include "ympa_cpp_restsdk_client/model/FeedIndexLogsOffersDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/FeedIndexLogsErrorDTO.h"
#include "ympa_cpp_restsdk_client/model/FeedIndexLogsStatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class FeedIndexLogsErrorDTO;
class FeedIndexLogsOffersDTO;


/// <summary>
/// Список отчетов по индексации прайс-листа.
/// </summary>
class  FeedIndexLogsRecordDTO
    : public ModelBase
{
public:
    FeedIndexLogsRecordDTO();
    virtual ~FeedIndexLogsRecordDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FeedIndexLogsRecordDTO members

    /// <summary>
    /// Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    utility::datetime getDownloadTime() const;
    bool downloadTimeIsSet() const;
    void unsetDownloadTime();

    void setDownloadTime(const utility::datetime& value);

    /// <summary>
    /// Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    utility::datetime getFileTime() const;
    bool fileTimeIsSet() const;
    void unsetFileTime();

    void setFileTime(const utility::datetime& value);

    /// <summary>
    /// Идентификатор индексации.
    /// </summary>
    int64_t getGenerationId() const;
    bool generationIdIsSet() const;
    void unsetGenerationId();

    void setGenerationId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsIndexType> getIndexType() const;
    bool indexTypeIsSet() const;
    void unsetIndexType();

    void setIndexType(const std::shared_ptr<FeedIndexLogsIndexType>& value);

    /// <summary>
    /// Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    utility::datetime getPublishedTime() const;
    bool publishedTimeIsSet() const;
    void unsetPublishedTime();

    void setPublishedTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<FeedIndexLogsStatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsErrorDTO> getError() const;
    bool errorIsSet() const;
    void unsetError();

    void setError(const std::shared_ptr<FeedIndexLogsErrorDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedIndexLogsOffersDTO> getOffers() const;
    bool offersIsSet() const;
    void unsetOffers();

    void setOffers(const std::shared_ptr<FeedIndexLogsOffersDTO>& value);


protected:
    utility::datetime m_DownloadTime;
    bool m_DownloadTimeIsSet;
    utility::datetime m_FileTime;
    bool m_FileTimeIsSet;
    int64_t m_GenerationId;
    bool m_GenerationIdIsSet;
    std::shared_ptr<FeedIndexLogsIndexType> m_IndexType;
    bool m_IndexTypeIsSet;
    utility::datetime m_PublishedTime;
    bool m_PublishedTimeIsSet;
    std::shared_ptr<FeedIndexLogsStatusType> m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<FeedIndexLogsErrorDTO> m_Error;
    bool m_ErrorIsSet;
    std::shared_ptr<FeedIndexLogsOffersDTO> m_Offers;
    bool m_OffersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_FeedIndexLogsRecordDTO_H_ */
