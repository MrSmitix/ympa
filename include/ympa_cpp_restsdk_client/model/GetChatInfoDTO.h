/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetChatInfoDTO.h
 *
 * Информация о чатах.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetChatInfoDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetChatInfoDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/ChatType.h"
#include "ympa_cpp_restsdk_client/model/ChatStatusType.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация о чатах.
/// </summary>
class  GetChatInfoDTO
    : public ModelBase
{
public:
    GetChatInfoDTO();
    virtual ~GetChatInfoDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetChatInfoDTO members

    /// <summary>
    /// Идентификатор чата.
    /// </summary>
    int64_t getChatId() const;
    bool chatIdIsSet() const;
    void unsetChatId();

    void setChatId(int64_t value);

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getOrderId() const;
    bool orderIdIsSet() const;
    void unsetOrderId();

    void setOrderId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ChatType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<ChatType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ChatStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<ChatStatusType>& value);

    /// <summary>
    /// Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Дата и время последнего сообщения в чате.
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);


protected:
    int64_t m_ChatId;
    bool m_ChatIdIsSet;
    int64_t m_OrderId;
    bool m_OrderIdIsSet;
    std::shared_ptr<ChatType> m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<ChatStatusType> m_Status;
    bool m_StatusIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetChatInfoDTO_H_ */
