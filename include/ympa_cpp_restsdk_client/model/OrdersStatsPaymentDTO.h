/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrdersStatsPaymentDTO.h
 *
 * Информация о денежных переводах по заказу.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsPaymentDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsPaymentDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrdersStatsPaymentType.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrdersStatsPaymentSourceType.h"
#include "ympa_cpp_restsdk_client/model/OrdersStatsPaymentOrderDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrdersStatsPaymentOrderDTO;


/// <summary>
/// Информация о денежных переводах по заказу.
/// </summary>
class  OrdersStatsPaymentDTO
    : public ModelBase
{
public:
    OrdersStatsPaymentDTO();
    virtual ~OrdersStatsPaymentDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrdersStatsPaymentDTO members

    /// <summary>
    /// Идентификатор денежного перевода.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
    /// </summary>
    utility::datetime getDate() const;
    bool dateIsSet() const;
    void unsetdate();

    void setDate(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsPaymentType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<OrdersStatsPaymentType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsPaymentSourceType> getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(const std::shared_ptr<OrdersStatsPaymentSourceType>& value);

    /// <summary>
    /// Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
    /// </summary>
    double getTotal() const;
    bool totalIsSet() const;
    void unsetTotal();

    void setTotal(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrdersStatsPaymentOrderDTO> getPaymentOrder() const;
    bool paymentOrderIsSet() const;
    void unsetPaymentOrder();

    void setPaymentOrder(const std::shared_ptr<OrdersStatsPaymentOrderDTO>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::datetime m_date;
    bool m_dateIsSet;
    std::shared_ptr<OrdersStatsPaymentType> m_Type;
    bool m_TypeIsSet;
    std::shared_ptr<OrdersStatsPaymentSourceType> m_Source;
    bool m_SourceIsSet;
    double m_Total;
    bool m_TotalIsSet;
    std::shared_ptr<OrdersStatsPaymentOrderDTO> m_PaymentOrder;
    bool m_PaymentOrderIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrdersStatsPaymentDTO_H_ */
