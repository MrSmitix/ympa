/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdatePromoOffersResultDTO.h
 *
 * Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UpdatePromoOffersResultDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UpdatePromoOffersResultDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/WarningPromoOfferUpdateDTO.h"
#include "ympa_cpp_restsdk_client/model/RejectedPromoOfferUpdateDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class RejectedPromoOfferUpdateDTO;
class WarningPromoOfferUpdateDTO;


/// <summary>
/// Ошибки и предупреждения, которые появились при добавлении товаров в акцию.
/// </summary>
class  UpdatePromoOffersResultDTO
    : public ModelBase
{
public:
    UpdatePromoOffersResultDTO();
    virtual ~UpdatePromoOffersResultDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdatePromoOffersResultDTO members

    /// <summary>
    /// Изменения, которые были отклонены.  Возвращается, только если есть отклоненные изменения. 
    /// </summary>
    std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>>& getRejectedOffers();
    bool rejectedOffersIsSet() const;
    void unsetRejectedOffers();

    void setRejectedOffers(const std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>>& value);

    /// <summary>
    /// Изменения, по которым есть предупреждения. Они информируют о возможных проблемах. Информация о товарах обновится.  Возвращается, только если есть предупреждения. 
    /// </summary>
    std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>>& getWarningOffers();
    bool warningOffersIsSet() const;
    void unsetWarningOffers();

    void setWarningOffers(const std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>>& value);


protected:
    std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>> m_RejectedOffers;
    bool m_RejectedOffersIsSet;
    std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>> m_WarningOffers;
    bool m_WarningOffersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UpdatePromoOffersResultDTO_H_ */
