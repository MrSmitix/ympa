/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EnrichedModelDTO.h
 *
 * Модель товара.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_EnrichedModelDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_EnrichedModelDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/ModelOfferDTO.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/ModelPriceDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ModelPriceDTO;
class ModelOfferDTO;


/// <summary>
/// Модель товара.
/// </summary>
class  EnrichedModelDTO
    : public ModelBase
{
public:
    EnrichedModelDTO();
    virtual ~EnrichedModelDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EnrichedModelDTO members

    /// <summary>
    /// Идентификатор модели товара.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Название модели товара.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ModelPriceDTO> getPrices() const;
    bool pricesIsSet() const;
    void unsetPrices();

    void setPrices(const std::shared_ptr<ModelPriceDTO>& value);

    /// <summary>
    /// Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
    /// </summary>
    std::vector<std::shared_ptr<ModelOfferDTO>>& getOffers();
    bool offersIsSet() const;
    void unsetOffers();

    void setOffers(const std::vector<std::shared_ptr<ModelOfferDTO>>& value);

    /// <summary>
    /// Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
    /// </summary>
    int32_t getOfflineOffers() const;
    bool offlineOffersIsSet() const;
    void unsetOfflineOffers();

    void setOfflineOffers(int32_t value);

    /// <summary>
    /// Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
    /// </summary>
    int32_t getOnlineOffers() const;
    bool onlineOffersIsSet() const;
    void unsetOnlineOffers();

    void setOnlineOffers(int32_t value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<ModelPriceDTO> m_Prices;
    bool m_PricesIsSet;
    std::vector<std::shared_ptr<ModelOfferDTO>> m_Offers;
    bool m_OffersIsSet;
    int32_t m_OfflineOffers;
    bool m_OfflineOffersIsSet;
    int32_t m_OnlineOffers;
    bool m_OnlineOffersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_EnrichedModelDTO_H_ */
