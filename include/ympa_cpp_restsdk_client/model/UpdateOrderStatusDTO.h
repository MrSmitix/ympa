/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOrderStatusDTO.h
 *
 * Список заказов.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateOrderStatusDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateOrderStatusDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderSubstatusType.h"
#include "ympa_cpp_restsdk_client/model/OrderUpdateStatusType.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrderStatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Список заказов.
/// </summary>
class  UpdateOrderStatusDTO
    : public ModelBase
{
public:
    UpdateOrderStatusDTO();
    virtual ~UpdateOrderStatusDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateOrderStatusDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<OrderStatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderSubstatusType> getSubstatus() const;
    bool substatusIsSet() const;
    void unsetSubstatus();

    void setSubstatus(const std::shared_ptr<OrderSubstatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderUpdateStatusType> getUpdateStatus() const;
    bool updateStatusIsSet() const;
    void unsetUpdateStatus();

    void setUpdateStatus(const std::shared_ptr<OrderUpdateStatusType>& value);

    /// <summary>
    /// Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;. 
    /// </summary>
    utility::string_t getErrorDetails() const;
    bool errorDetailsIsSet() const;
    void unsetErrorDetails();

    void setErrorDetails(const utility::string_t& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<OrderStatusType> m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<OrderSubstatusType> m_Substatus;
    bool m_SubstatusIsSet;
    std::shared_ptr<OrderUpdateStatusType> m_UpdateStatus;
    bool m_UpdateStatusIsSet;
    utility::string_t m_ErrorDetails;
    bool m_ErrorDetailsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateOrderStatusDTO_H_ */
