/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CalculateTariffsParametersDTO.h
 *
 * Параметры для расчета стоимости услуг.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CalculateTariffsParametersDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CalculateTariffsParametersDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/PaymentFrequencyType.h"
#include "ympa_cpp_restsdk_client/model/SellingProgramType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Параметры для расчета стоимости услуг.
/// </summary>
class  CalculateTariffsParametersDTO
    : public ModelBase
{
public:
    CalculateTariffsParametersDTO();
    virtual ~CalculateTariffsParametersDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CalculateTariffsParametersDTO members

    /// <summary>
    /// Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр &#x60;campaignId&#x60;, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке. 
    /// </summary>
    int64_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaignId();

    void setCampaignId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SellingProgramType> getSellingProgram() const;
    bool sellingProgramIsSet() const;
    void unsetSellingProgram();

    void setSellingProgram(const std::shared_ptr<SellingProgramType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PaymentFrequencyType> getFrequency() const;
    bool frequencyIsSet() const;
    void unsetFrequency();

    void setFrequency(const std::shared_ptr<PaymentFrequencyType>& value);


protected:
    int64_t m_CampaignId;
    bool m_CampaignIdIsSet;
    std::shared_ptr<SellingProgramType> m_SellingProgram;
    bool m_SellingProgramIsSet;
    std::shared_ptr<PaymentFrequencyType> m_Frequency;
    bool m_FrequencyIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CalculateTariffsParametersDTO_H_ */
