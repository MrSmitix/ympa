/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RefundStatusType.h
 *
 * Cтатус возврата денег:  * &#x60;STARTED_BY_USER&#x60; — создан клиентом из личного кабинета.  * &#x60;REFUND_IN_PROGRESS&#x60; — ждет решение о возврате денег.  * &#x60;REFUNDED&#x60; — по возврату проведены все возвратные денежные транзакции.  * &#x60;FAILED&#x60; — невозможно провести возврат покупателю.  * &#x60;WAITING_FOR_DECISION&#x60; — ожидает решения.  * &#x60;DECISION_MADE&#x60; — по возврату принято решение.  * &#x60;REFUNDED_WITH_BONUSES&#x60; — возврат осуществлен баллами Плюса или промокодом.  * &#x60;REFUNDED_BY_SHOP&#x60; — магазин сделал самостоятельно возврат денег.  * &#x60;COMPLETE_WITHOUT_REFUND&#x60; — возврат денег не требуется.  * &#x60;CANCELLED&#x60; — возврат отменен. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RefundStatusType_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RefundStatusType_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


class  RefundStatusType
    : public ModelBase
{
public:
    RefundStatusType();
    virtual ~RefundStatusType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eRefundStatusType
    {
        RefundStatusType_STARTED_BY_USER,
        RefundStatusType_REFUND_IN_PROGRESS,
        RefundStatusType_REFUNDED,
        RefundStatusType_FAILED,
        RefundStatusType_WAITING_FOR_DECISION,
        RefundStatusType_DECISION_MADE,
        RefundStatusType_REFUNDED_WITH_BONUSES,
        RefundStatusType_REFUNDED_BY_SHOP,
        RefundStatusType_CANCELLED,
        RefundStatusType_COMPLETE_WITHOUT_REFUND,
        RefundStatusType_UNKNOWN,
    };

    eRefundStatusType getValue() const;
    void setValue(eRefundStatusType const value);

    protected:
        eRefundStatusType m_value;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RefundStatusType_H_ */
