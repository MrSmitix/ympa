/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetOrdersStatsRequest.h
 *
 * Запрос информации по заказам.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetOrdersStatsRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetOrdersStatsRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderStatsStatusType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Запрос информации по заказам.
/// </summary>
class  GetOrdersStatsRequest
    : public ModelBase
{
public:
    GetOrdersStatsRequest();
    virtual ~GetOrdersStatsRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetOrdersStatsRequest members

    /// <summary>
    /// Начальная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;. 
    /// </summary>
    utility::datetime getDateFrom() const;
    bool dateFromIsSet() const;
    void unsetDateFrom();

    void setDateFrom(const utility::datetime& value);

    /// <summary>
    /// Конечная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;. 
    /// </summary>
    utility::datetime getDateTo() const;
    bool dateToIsSet() const;
    void unsetDateTo();

    void setDateTo(const utility::datetime& value);

    /// <summary>
    /// Начальная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;. 
    /// </summary>
    utility::datetime getUpdateFrom() const;
    bool updateFromIsSet() const;
    void unsetUpdateFrom();

    void setUpdateFrom(const utility::datetime& value);

    /// <summary>
    /// Конечная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;. 
    /// </summary>
    utility::datetime getUpdateTo() const;
    bool updateToIsSet() const;
    void unsetUpdateTo();

    void setUpdateTo(const utility::datetime& value);

    /// <summary>
    /// Список идентификаторов заказов.
    /// </summary>
    std::vector<int64_t>& getOrders();
    bool ordersIsSet() const;
    void unsetOrders();

    void setOrders(std::vector<int64_t> value);

    /// <summary>
    /// Список статусов заказов.
    /// </summary>
    std::vector<std::shared_ptr<OrderStatsStatusType>>& getStatuses();
    bool statusesIsSet() const;
    void unsetStatuses();

    void setStatuses(const std::vector<std::shared_ptr<OrderStatsStatusType>>& value);

    /// <summary>
    /// Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
    /// </summary>
    bool isHasCis() const;
    bool hasCisIsSet() const;
    void unsetHasCis();

    void setHasCis(bool value);


protected:
    utility::datetime m_DateFrom;
    bool m_DateFromIsSet;
    utility::datetime m_DateTo;
    bool m_DateToIsSet;
    utility::datetime m_UpdateFrom;
    bool m_UpdateFromIsSet;
    utility::datetime m_UpdateTo;
    bool m_UpdateToIsSet;
    std::vector<int64_t> m_Orders;
    bool m_OrdersIsSet;
    std::vector<std::shared_ptr<OrderStatsStatusType>> m_Statuses;
    bool m_StatusesIsSet;
    bool m_HasCis;
    bool m_HasCisIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetOrdersStatsRequest_H_ */
