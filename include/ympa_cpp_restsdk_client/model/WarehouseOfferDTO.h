/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WarehouseOfferDTO.h
 *
 * Информация об остатках товара.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_WarehouseOfferDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_WarehouseOfferDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/WarehouseStockDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/TurnoverDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class TurnoverDTO;
class WarehouseStockDTO;


/// <summary>
/// Информация об остатках товара.
/// </summary>
class  WarehouseOfferDTO
    : public ModelBase
{
public:
    WarehouseOfferDTO();
    virtual ~WarehouseOfferDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WarehouseOfferDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getOfferId() const;
    bool offerIdIsSet() const;
    void unsetOfferId();

    void setOfferId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TurnoverDTO> getTurnoverSummary() const;
    bool turnoverSummaryIsSet() const;
    void unsetTurnoverSummary();

    void setTurnoverSummary(const std::shared_ptr<TurnoverDTO>& value);

    /// <summary>
    /// Информация об остатках.
    /// </summary>
    std::vector<std::shared_ptr<WarehouseStockDTO>>& getStocks();
    bool stocksIsSet() const;
    void unsetStocks();

    void setStocks(const std::vector<std::shared_ptr<WarehouseStockDTO>>& value);

    /// <summary>
    /// Дата и время последнего обновления информации об остатках.  Формат даты и времени: ISO 8601 со смещением относительно UTC. Например, &#x60;2023-11-21T00:42:42+03:00&#x60;. 
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);


protected:
    utility::string_t m_OfferId;
    bool m_OfferIdIsSet;
    std::shared_ptr<TurnoverDTO> m_TurnoverSummary;
    bool m_TurnoverSummaryIsSet;
    std::vector<std::shared_ptr<WarehouseStockDTO>> m_Stocks;
    bool m_StocksIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_WarehouseOfferDTO_H_ */
