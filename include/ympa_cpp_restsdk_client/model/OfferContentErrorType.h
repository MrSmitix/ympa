/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferContentErrorType.h
 *
 * Типы ошибок:  * &#x60;OFFER_NOT_FOUND&#x60; — такого товара нет в каталоге. * &#x60;UNKNOWN_CATEGORY&#x60; — указана неизвестная категория. * &#x60;CATEGORY_MISMATCH&#x60; — указана категория, которая не совпадает с категорией товара. * &#x60;UNKNOWN_PARAMETER&#x60; — передана характеристика, которой нет среди характеристик категории. * &#x60;UNEXPECTED_BOOLEAN_VALUE&#x60; — вместо boolean-значения передано что-то другое. * &#x60;NUMBER_FORMAT&#x60; — передана строка, не обозначающая число, вместо числа. * &#x60;VALUE_BLANK&#x60; — передано пустое значение. * &#x60;INVALID_UNIT_ID&#x60; — передана единица измерения, недопустимая для характеристики. * &#x60;INVALID_GROUP_ID_LENGTH&#x60; — в названии превышено допустимое значение символов — 255. * &#x60;INVALID_GROUP_ID_CHARACTERS&#x60; — переданы [недопустимые символы](*ascii-code). 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OfferContentErrorType_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OfferContentErrorType_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


class  OfferContentErrorType
    : public ModelBase
{
public:
    OfferContentErrorType();
    virtual ~OfferContentErrorType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eOfferContentErrorType
    {
        OfferContentErrorType_OFFER_NOT_FOUND,
        OfferContentErrorType_UNKNOWN_CATEGORY,
        OfferContentErrorType_CATEGORY_MISMATCH,
        OfferContentErrorType_UNKNOWN_PARAMETER,
        OfferContentErrorType_UNEXPECTED_BOOLEAN_VALUE,
        OfferContentErrorType_NUMBER_FORMAT,
        OfferContentErrorType_VALUE_BLANK,
        OfferContentErrorType_INVALID_UNIT_ID,
        OfferContentErrorType_INVALID_GROUP_ID_LENGTH,
        OfferContentErrorType_INVALID_GROUP_ID_CHARACTERS,
    };

    eOfferContentErrorType getValue() const;
    void setValue(eOfferContentErrorType const value);

    protected:
        eOfferContentErrorType m_value;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OfferContentErrorType_H_ */
