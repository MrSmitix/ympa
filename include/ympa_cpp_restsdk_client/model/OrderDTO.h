/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDTO.h
 *
 * Заказ.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderPaymentMethodType.h"
#include "ympa_cpp_restsdk_client/model/OrderSubstatusType.h"
#include "ympa_cpp_restsdk_client/model/OrderTaxSystemType.h"
#include "ympa_cpp_restsdk_client/model/OrderItemDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderPaymentType.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OrderBuyerDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderDeliveryDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderSubsidyDTO.h"
#include "ympa_cpp_restsdk_client/model/OrderStatusType.h"
#include "ympa_cpp_restsdk_client/model/CurrencyType.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderItemDTO;
class OrderSubsidyDTO;
class OrderDeliveryDTO;
class OrderBuyerDTO;


/// <summary>
/// Заказ.
/// </summary>
class  OrderDTO
    : public ModelBase
{
public:
    OrderDTO();
    virtual ~OrderDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderDTO members

    /// <summary>
    /// Идентификатор заказа.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderStatusType> getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const std::shared_ptr<OrderStatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderSubstatusType> getSubstatus() const;
    bool substatusIsSet() const;
    void unsetSubstatus();

    void setSubstatus(const std::shared_ptr<OrderSubstatusType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCreationDate() const;
    bool creationDateIsSet() const;
    void unsetCreationDate();

    void setCreationDate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CurrencyType> getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const std::shared_ptr<CurrencyType>& value);

    /// <summary>
    /// Платеж покупателя. 
    /// </summary>
    double getItemsTotal() const;
    bool itemsTotalIsSet() const;
    void unsetItemsTotal();

    void setItemsTotal(double value);

    /// <summary>
    /// Стоимость доставки. 
    /// </summary>
    double getDeliveryTotal() const;
    bool deliveryTotalIsSet() const;
    void unsetDeliveryTotal();

    void setDeliveryTotal(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
    /// </summary>
    double getBuyerItemsTotal() const;
    bool buyerItemsTotalIsSet() const;
    void unsetBuyerItemsTotal();

    void setBuyerItemsTotal(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
    /// </summary>
    double getBuyerTotal() const;
    bool buyerTotalIsSet() const;
    void unsetBuyerTotal();

    void setBuyerTotal(double value);

    /// <summary>
    /// Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
    /// </summary>
    double getBuyerItemsTotalBeforeDiscount() const;
    bool buyerItemsTotalBeforeDiscountIsSet() const;
    void unsetBuyerItemsTotalBeforeDiscount();

    void setBuyerItemsTotalBeforeDiscount(double value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). 
    /// </summary>
    double getBuyerTotalBeforeDiscount() const;
    bool buyerTotalBeforeDiscountIsSet() const;
    void unsetBuyerTotalBeforeDiscount();

    void setBuyerTotalBeforeDiscount(double value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderPaymentType> getPaymentType() const;
    bool paymentTypeIsSet() const;
    void unsetPaymentType();

    void setPaymentType(const std::shared_ptr<OrderPaymentType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderPaymentMethodType> getPaymentMethod() const;
    bool paymentMethodIsSet() const;
    void unsetPaymentMethod();

    void setPaymentMethod(const std::shared_ptr<OrderPaymentMethodType>& value);

    /// <summary>
    /// Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    /// </summary>
    bool isFake() const;
    bool fakeIsSet() const;
    void unsetFake();

    void setFake(bool value);

    /// <summary>
    /// Список товаров в заказе.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemDTO>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<OrderItemDTO>>& value);

    /// <summary>
    /// Список субсидий по типам.
    /// </summary>
    std::vector<std::shared_ptr<OrderSubsidyDTO>>& getSubsidies();
    bool subsidiesIsSet() const;
    void unsetSubsidies();

    void setSubsidies(const std::vector<std::shared_ptr<OrderSubsidyDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderDeliveryDTO> getDelivery() const;
    bool deliveryIsSet() const;
    void unsetDelivery();

    void setDelivery(const std::shared_ptr<OrderDeliveryDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderBuyerDTO> getBuyer() const;
    bool buyerIsSet() const;
    void unsetBuyer();

    void setBuyer(const std::shared_ptr<OrderBuyerDTO>& value);

    /// <summary>
    /// Комментарий к заказу.
    /// </summary>
    utility::string_t getNotes() const;
    bool notesIsSet() const;
    void unsetNotes();

    void setNotes(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderTaxSystemType> getTaxSystem() const;
    bool taxSystemIsSet() const;
    void unsetTaxSystem();

    void setTaxSystem(const std::shared_ptr<OrderTaxSystemType>& value);

    /// <summary>
    /// **Только для модели DBS**  Запрошена ли отмена. 
    /// </summary>
    bool isCancelRequested() const;
    bool cancelRequestedIsSet() const;
    void unsetCancelRequested();

    void setCancelRequested(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExpiryDate() const;
    bool expiryDateIsSet() const;
    void unsetExpiryDate();

    void setExpiryDate(const utility::string_t& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<OrderStatusType> m_Status;
    bool m_StatusIsSet;
    std::shared_ptr<OrderSubstatusType> m_Substatus;
    bool m_SubstatusIsSet;
    utility::string_t m_CreationDate;
    bool m_CreationDateIsSet;
    utility::string_t m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    std::shared_ptr<CurrencyType> m_Currency;
    bool m_CurrencyIsSet;
    double m_ItemsTotal;
    bool m_ItemsTotalIsSet;
    double m_DeliveryTotal;
    bool m_DeliveryTotalIsSet;
    double m_BuyerItemsTotal;
    bool m_BuyerItemsTotalIsSet;
    double m_BuyerTotal;
    bool m_BuyerTotalIsSet;
    double m_BuyerItemsTotalBeforeDiscount;
    bool m_BuyerItemsTotalBeforeDiscountIsSet;
    double m_BuyerTotalBeforeDiscount;
    bool m_BuyerTotalBeforeDiscountIsSet;
    std::shared_ptr<OrderPaymentType> m_PaymentType;
    bool m_PaymentTypeIsSet;
    std::shared_ptr<OrderPaymentMethodType> m_PaymentMethod;
    bool m_PaymentMethodIsSet;
    bool m_Fake;
    bool m_FakeIsSet;
    std::vector<std::shared_ptr<OrderItemDTO>> m_Items;
    bool m_ItemsIsSet;
    std::vector<std::shared_ptr<OrderSubsidyDTO>> m_Subsidies;
    bool m_SubsidiesIsSet;
    std::shared_ptr<OrderDeliveryDTO> m_Delivery;
    bool m_DeliveryIsSet;
    std::shared_ptr<OrderBuyerDTO> m_Buyer;
    bool m_BuyerIsSet;
    utility::string_t m_Notes;
    bool m_NotesIsSet;
    std::shared_ptr<OrderTaxSystemType> m_TaxSystem;
    bool m_TaxSystemIsSet;
    bool m_CancelRequested;
    bool m_CancelRequestedIsSet;
    utility::string_t m_ExpiryDate;
    bool m_ExpiryDateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDTO_H_ */
