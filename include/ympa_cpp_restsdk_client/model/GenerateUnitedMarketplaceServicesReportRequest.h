/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateUnitedMarketplaceServicesReportRequest.h
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateUnitedMarketplaceServicesReportRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateUnitedMarketplaceServicesReportRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/PlacementType.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры. 
/// </summary>
class  GenerateUnitedMarketplaceServicesReportRequest
    : public ModelBase
{
public:
    GenerateUnitedMarketplaceServicesReportRequest();
    virtual ~GenerateUnitedMarketplaceServicesReportRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GenerateUnitedMarketplaceServicesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.
    /// </summary>
    int64_t getBusinessId() const;
    bool businessIdIsSet() const;
    void unsetBusinessId();

    void setBusinessId(int64_t value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно. 
    /// </summary>
    utility::datetime getDateTimeFrom() const;
    bool dateTimeFromIsSet() const;
    void unsetDateTimeFrom();

    void setDateTimeFrom(const utility::datetime& value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год. 
    /// </summary>
    utility::datetime getDateTimeTo() const;
    bool dateTimeToIsSet() const;
    void unsetDateTimeTo();

    void setDateTimeTo(const utility::datetime& value);

    /// <summary>
    /// Начало периода, включительно.
    /// </summary>
    utility::datetime getDateFrom() const;
    bool dateFromIsSet() const;
    void unsetDateFrom();

    void setDateFrom(const utility::datetime& value);

    /// <summary>
    /// Конец периода, включительно. Максимальный период — 1 год.
    /// </summary>
    utility::datetime getDateTo() const;
    bool dateToIsSet() const;
    void unsetDateTo();

    void setDateTo(const utility::datetime& value);

    /// <summary>
    /// Начальный год формирования акта.
    /// </summary>
    int32_t getYearFrom() const;
    bool yearFromIsSet() const;
    void unsetYearFrom();

    void setYearFrom(int32_t value);

    /// <summary>
    /// Начальный номер месяца формирования акта.
    /// </summary>
    int32_t getMonthFrom() const;
    bool monthFromIsSet() const;
    void unsetMonthFrom();

    void setMonthFrom(int32_t value);

    /// <summary>
    /// Конечный год формирования акта.
    /// </summary>
    int32_t getYearTo() const;
    bool yearToIsSet() const;
    void unsetYearTo();

    void setYearTo(int32_t value);

    /// <summary>
    /// Конечный номер месяца формирования акта.
    /// </summary>
    int32_t getMonthTo() const;
    bool monthToIsSet() const;
    void unsetMonthTo();

    void setMonthTo(int32_t value);

    /// <summary>
    /// Список моделей, которые нужны в отчете. 
    /// </summary>
    std::vector<std::shared_ptr<PlacementType>>& getPlacementPrograms();
    bool placementProgramsIsSet() const;
    void unsetPlacementPrograms();

    void setPlacementPrograms(const std::vector<std::shared_ptr<PlacementType>>& value);

    /// <summary>
    /// Список ИНН, которые нужны в отчете.
    /// </summary>
    std::vector<utility::string_t>& getInns();
    bool innsIsSet() const;
    void unsetInns();

    void setInns(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Список магазинов, которые нужны в отчете.
    /// </summary>
    std::vector<int64_t>& getCampaignIds();
    bool campaignIdsIsSet() const;
    void unsetCampaignIds();

    void setCampaignIds(std::vector<int64_t> value);


protected:
    int64_t m_BusinessId;
    bool m_BusinessIdIsSet;
    utility::datetime m_DateTimeFrom;
    bool m_DateTimeFromIsSet;
    utility::datetime m_DateTimeTo;
    bool m_DateTimeToIsSet;
    utility::datetime m_DateFrom;
    bool m_DateFromIsSet;
    utility::datetime m_DateTo;
    bool m_DateToIsSet;
    int32_t m_YearFrom;
    bool m_YearFromIsSet;
    int32_t m_MonthFrom;
    bool m_MonthFromIsSet;
    int32_t m_YearTo;
    bool m_YearToIsSet;
    int32_t m_MonthTo;
    bool m_MonthToIsSet;
    std::vector<std::shared_ptr<PlacementType>> m_PlacementPrograms;
    bool m_PlacementProgramsIsSet;
    std::vector<utility::string_t> m_Inns;
    bool m_InnsIsSet;
    std::vector<int64_t> m_CampaignIds;
    bool m_CampaignIdsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateUnitedMarketplaceServicesReportRequest_H_ */
