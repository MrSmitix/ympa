/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GoodsFeedbackDTO.h
 *
 * Отзыв о товаре.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GoodsFeedbackStatisticsDTO.h"
#include "ympa_cpp_restsdk_client/model/GoodsFeedbackDescriptionDTO.h"
#include "ympa_cpp_restsdk_client/model/GoodsFeedbackIdentifiersDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/GoodsFeedbackMediaDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GoodsFeedbackIdentifiersDTO;
class GoodsFeedbackDescriptionDTO;
class GoodsFeedbackMediaDTO;
class GoodsFeedbackStatisticsDTO;


/// <summary>
/// Отзыв о товаре.
/// </summary>
class  GoodsFeedbackDTO
    : public ModelBase
{
public:
    GoodsFeedbackDTO();
    virtual ~GoodsFeedbackDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GoodsFeedbackDTO members

    /// <summary>
    /// Идентификатор отзыва. 
    /// </summary>
    int64_t getFeedbackId() const;
    bool feedbackIdIsSet() const;
    void unsetFeedbackId();

    void setFeedbackId(int64_t value);

    /// <summary>
    /// Дата и время создания отзыва.
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Нужен ли ответ на отзыв.
    /// </summary>
    bool isNeedReaction() const;
    bool needReactionIsSet() const;
    void unsetNeedReaction();

    void setNeedReaction(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackIdentifiersDTO> getIdentifiers() const;
    bool identifiersIsSet() const;
    void unsetIdentifiers();

    void setIdentifiers(const std::shared_ptr<GoodsFeedbackIdentifiersDTO>& value);

    /// <summary>
    /// Имя автора отзыва.
    /// </summary>
    utility::string_t getAuthor() const;
    bool authorIsSet() const;
    void unsetAuthor();

    void setAuthor(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackDescriptionDTO> getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const std::shared_ptr<GoodsFeedbackDescriptionDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackMediaDTO> getMedia() const;
    bool mediaIsSet() const;
    void unsetMedia();

    void setMedia(const std::shared_ptr<GoodsFeedbackMediaDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GoodsFeedbackStatisticsDTO> getStatistics() const;
    bool statisticsIsSet() const;
    void unsetStatistics();

    void setStatistics(const std::shared_ptr<GoodsFeedbackStatisticsDTO>& value);


protected:
    int64_t m_FeedbackId;
    bool m_FeedbackIdIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    bool m_NeedReaction;
    bool m_NeedReactionIsSet;
    std::shared_ptr<GoodsFeedbackIdentifiersDTO> m_Identifiers;
    bool m_IdentifiersIsSet;
    utility::string_t m_Author;
    bool m_AuthorIsSet;
    std::shared_ptr<GoodsFeedbackDescriptionDTO> m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<GoodsFeedbackMediaDTO> m_Media;
    bool m_MediaIsSet;
    std::shared_ptr<GoodsFeedbackStatisticsDTO> m_Statistics;
    bool m_StatisticsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GoodsFeedbackDTO_H_ */
