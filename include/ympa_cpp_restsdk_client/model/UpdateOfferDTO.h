/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateOfferDTO.h
 *
 * Параметры товара.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateOfferDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateOfferDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/BasePriceDTO.h"
#include "ympa_cpp_restsdk_client/model/OfferParamDTO.h"
#include "ympa_cpp_restsdk_client/model/OfferType.h"
#include "ympa_cpp_restsdk_client/model/OfferWeightDimensionsDTO.h"
#include "ympa_cpp_restsdk_client/model/ParameterValueDTO.h"
#include "ympa_cpp_restsdk_client/model/UpdatePriceWithDiscountDTO.h"
#include "ympa_cpp_restsdk_client/model/OfferConditionDTO.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "ympa_cpp_restsdk_client/model/OfferManualDTO.h"
#include "ympa_cpp_restsdk_client/model/AgeDTO.h"
#include "ympa_cpp_restsdk_client/model/TimePeriodDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OfferManualDTO;
class OfferWeightDimensionsDTO;
class TimePeriodDTO;
class OfferConditionDTO;
class AgeDTO;
class OfferParamDTO;
class ParameterValueDTO;
class UpdatePriceWithDiscountDTO;
class BasePriceDTO;


/// <summary>
/// Параметры товара.
/// </summary>
class  UpdateOfferDTO
    : public ModelBase
{
public:
    UpdateOfferDTO();
    virtual ~UpdateOfferDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateOfferDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getOfferId() const;
    bool offerIdIsSet() const;
    void unsetOfferId();

    void setOfferId(const utility::string_t& value);

    /// <summary>
    /// Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    /// </summary>
    int64_t getMarketCategoryId() const;
    bool marketCategoryIdIsSet() const;
    void unsetMarketCategoryId();

    void setMarketCategoryId(int64_t value);

    /// <summary>
    /// Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
    /// </summary>
    std::vector<utility::string_t>& getPictures();
    bool picturesIsSet() const;
    void unsetPictures();

    void setPictures(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
    /// </summary>
    std::vector<utility::string_t>& getVideos();
    bool videosIsSet() const;
    void unsetVideos();

    void setVideos(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся. 
    /// </summary>
    std::vector<std::shared_ptr<OfferManualDTO>>& getManuals();
    bool manualsIsSet() const;
    void unsetManuals();

    void setManuals(const std::vector<std::shared_ptr<OfferManualDTO>>& value);

    /// <summary>
    /// Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    /// </summary>
    utility::string_t getVendor() const;
    bool vendorIsSet() const;
    void unsetVendor();

    void setVendor(const utility::string_t& value);

    /// <summary>
    /// Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
    /// </summary>
    std::vector<utility::string_t>& getBarcodes();
    bool barcodesIsSet() const;
    void unsetBarcodes();

    void setBarcodes(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
    /// </summary>
    std::vector<utility::string_t>& getManufacturerCountries();
    bool manufacturerCountriesIsSet() const;
    void unsetManufacturerCountries();

    void setManufacturerCountries(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfferWeightDimensionsDTO> getWeightDimensions() const;
    bool weightDimensionsIsSet() const;
    void unsetWeightDimensions();

    void setWeightDimensions(const std::shared_ptr<OfferWeightDimensionsDTO>& value);

    /// <summary>
    /// Артикул товара от производителя.
    /// </summary>
    utility::string_t getVendorCode() const;
    bool vendorCodeIsSet() const;
    void unsetVendorCode();

    void setVendorCode(const utility::string_t& value);

    /// <summary>
    /// Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
    /// </summary>
    std::vector<utility::string_t>& getTags();
    bool tagsIsSet() const;
    void unsetTags();

    void setTags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimePeriodDTO> getShelfLife() const;
    bool shelfLifeIsSet() const;
    void unsetShelfLife();

    void setShelfLife(const std::shared_ptr<TimePeriodDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimePeriodDTO> getLifeTime() const;
    bool lifeTimeIsSet() const;
    void unsetLifeTime();

    void setLifeTime(const std::shared_ptr<TimePeriodDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TimePeriodDTO> getGuaranteePeriod() const;
    bool guaranteePeriodIsSet() const;
    void unsetGuaranteePeriod();

    void setGuaranteePeriod(const std::shared_ptr<TimePeriodDTO>& value);

    /// <summary>
    /// Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
    /// </summary>
    utility::string_t getCustomsCommodityCode() const;
    bool customsCommodityCodeIsSet() const;
    void unsetCustomsCommodityCode();

    void setCustomsCommodityCode(const utility::string_t& value);

    /// <summary>
    /// Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
    /// </summary>
    std::vector<utility::string_t>& getCertificates();
    bool certificatesIsSet() const;
    void unsetCertificates();

    void setCertificates(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
    /// </summary>
    int32_t getBoxCount() const;
    bool boxCountIsSet() const;
    void unsetBoxCount();

    void setBoxCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfferConditionDTO> getCondition() const;
    bool conditionIsSet() const;
    void unsetCondition();

    void setCondition(const std::shared_ptr<OfferConditionDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfferType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<OfferType>& value);

    /// <summary>
    /// Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
    /// </summary>
    bool isDownloadable() const;
    bool downloadableIsSet() const;
    void unsetDownloadable();

    void setDownloadable(bool value);

    /// <summary>
    /// Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
    /// </summary>
    bool isAdult() const;
    bool adultIsSet() const;
    void unsetAdult();

    void setAdult(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AgeDTO> getAge() const;
    bool ageIsSet() const;
    void unsetAge();

    void setAge(const std::shared_ptr<AgeDTO>& value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
    /// </summary>
    std::vector<std::shared_ptr<OfferParamDTO>>& getParams();
    bool paramsIsSet() const;
    void unsetParams();

    void setParams(const std::vector<std::shared_ptr<OfferParamDTO>>& value);

    /// <summary>
    /// Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300. 
    /// </summary>
    std::vector<std::shared_ptr<ParameterValueDTO>>& getParameterValues();
    bool parameterValuesIsSet() const;
    void unsetParameterValues();

    void setParameterValues(const std::vector<std::shared_ptr<ParameterValueDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UpdatePriceWithDiscountDTO> getBasicPrice() const;
    bool basicPriceIsSet() const;
    void unsetBasicPrice();

    void setBasicPrice(const std::shared_ptr<UpdatePriceWithDiscountDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BasePriceDTO> getPurchasePrice() const;
    bool purchasePriceIsSet() const;
    void unsetPurchasePrice();

    void setPurchasePrice(const std::shared_ptr<BasePriceDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BasePriceDTO> getAdditionalExpenses() const;
    bool additionalExpensesIsSet() const;
    void unsetAdditionalExpenses();

    void setAdditionalExpenses(const std::shared_ptr<BasePriceDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<BasePriceDTO> getCofinancePrice() const;
    bool cofinancePriceIsSet() const;
    void unsetCofinancePrice();

    void setCofinancePrice(const std::shared_ptr<BasePriceDTO>& value);


protected:
    utility::string_t m_OfferId;
    bool m_OfferIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    int64_t m_MarketCategoryId;
    bool m_MarketCategoryIdIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    std::vector<utility::string_t> m_Pictures;
    bool m_PicturesIsSet;
    std::vector<utility::string_t> m_Videos;
    bool m_VideosIsSet;
    std::vector<std::shared_ptr<OfferManualDTO>> m_Manuals;
    bool m_ManualsIsSet;
    utility::string_t m_Vendor;
    bool m_VendorIsSet;
    std::vector<utility::string_t> m_Barcodes;
    bool m_BarcodesIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::vector<utility::string_t> m_ManufacturerCountries;
    bool m_ManufacturerCountriesIsSet;
    std::shared_ptr<OfferWeightDimensionsDTO> m_WeightDimensions;
    bool m_WeightDimensionsIsSet;
    utility::string_t m_VendorCode;
    bool m_VendorCodeIsSet;
    std::vector<utility::string_t> m_Tags;
    bool m_TagsIsSet;
    std::shared_ptr<TimePeriodDTO> m_ShelfLife;
    bool m_ShelfLifeIsSet;
    std::shared_ptr<TimePeriodDTO> m_LifeTime;
    bool m_LifeTimeIsSet;
    std::shared_ptr<TimePeriodDTO> m_GuaranteePeriod;
    bool m_GuaranteePeriodIsSet;
    utility::string_t m_CustomsCommodityCode;
    bool m_CustomsCommodityCodeIsSet;
    std::vector<utility::string_t> m_Certificates;
    bool m_CertificatesIsSet;
    int32_t m_BoxCount;
    bool m_BoxCountIsSet;
    std::shared_ptr<OfferConditionDTO> m_Condition;
    bool m_ConditionIsSet;
    std::shared_ptr<OfferType> m_Type;
    bool m_TypeIsSet;
    bool m_Downloadable;
    bool m_DownloadableIsSet;
    bool m_Adult;
    bool m_AdultIsSet;
    std::shared_ptr<AgeDTO> m_Age;
    bool m_AgeIsSet;
    std::vector<std::shared_ptr<OfferParamDTO>> m_Params;
    bool m_ParamsIsSet;
    std::vector<std::shared_ptr<ParameterValueDTO>> m_ParameterValues;
    bool m_ParameterValuesIsSet;
    std::shared_ptr<UpdatePriceWithDiscountDTO> m_BasicPrice;
    bool m_BasicPriceIsSet;
    std::shared_ptr<BasePriceDTO> m_PurchasePrice;
    bool m_PurchasePriceIsSet;
    std::shared_ptr<BasePriceDTO> m_AdditionalExpenses;
    bool m_AdditionalExpensesIsSet;
    std::shared_ptr<BasePriceDTO> m_CofinancePrice;
    bool m_CofinancePriceIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UpdateOfferDTO_H_ */
