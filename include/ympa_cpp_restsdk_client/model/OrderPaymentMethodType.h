/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderPaymentMethodType.h
 *
 * Способ оплаты заказа:  * Значения, если выбрана оплата при оформлении заказа (&#x60;\&quot;paymentType\&quot;: \&quot;PREPAID\&quot;&#x60;):    * &#x60;YANDEX&#x60; — банковской картой.    * &#x60;APPLE_PAY&#x60; — Apple Pay.    * &#x60;GOOGLE_PAY&#x60; — Google Pay.    * &#x60;CREDIT&#x60; — в кредит.    * &#x60;TINKOFF_CREDIT&#x60; — в кредит в Тинькофф Банке.    * &#x60;TINKOFF_INSTALLMENTS&#x60; — рассрочка в Тинькофф Банке.    * &#x60;EXTERNAL_CERTIFICATE&#x60; — подарочным сертификатом (например, из приложения «Сбербанк Онлайн»).    * &#x60;SBP&#x60; — через систему быстрых платежей.    * &#x60;B2B_ACCOUNT_PREPAYMENT&#x60; — заказ оплачивает организация.   * Значения, если выбрана оплата при получении заказа (&#x60;\&quot;paymentType\&quot;: \&quot;POSTPAID\&quot;&#x60;):    * &#x60;CARD_ON_DELIVERY&#x60; — банковской картой.    * &#x60;BOUND_CARD_ON_DELIVERY&#x60; — привязанной картой при получении.    * &#x60;CASH_ON_DELIVERY&#x60; — наличными.    * &#x60;B2B_ACCOUNT_POSTPAYMENT&#x60; — заказ оплачивает организация после доставки.  * &#x60;UNKNOWN&#x60; — неизвестный тип.  Значение по умолчанию: &#x60;CASH_ON_DELIVERY&#x60;. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderPaymentMethodType_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderPaymentMethodType_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


class  OrderPaymentMethodType
    : public ModelBase
{
public:
    OrderPaymentMethodType();
    virtual ~OrderPaymentMethodType();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eOrderPaymentMethodType
    {
        OrderPaymentMethodType_CASH_ON_DELIVERY,
        OrderPaymentMethodType_CARD_ON_DELIVERY,
        OrderPaymentMethodType_BOUND_CARD_ON_DELIVERY,
        OrderPaymentMethodType_YANDEX,
        OrderPaymentMethodType_APPLE_PAY,
        OrderPaymentMethodType_EXTERNAL_CERTIFICATE,
        OrderPaymentMethodType_CREDIT,
        OrderPaymentMethodType_GOOGLE_PAY,
        OrderPaymentMethodType_TINKOFF_CREDIT,
        OrderPaymentMethodType_SBP,
        OrderPaymentMethodType_TINKOFF_INSTALLMENTS,
        OrderPaymentMethodType_B2B_ACCOUNT_PREPAYMENT,
        OrderPaymentMethodType_B2B_ACCOUNT_POSTPAYMENT,
        OrderPaymentMethodType_UNKNOWN,
    };

    eOrderPaymentMethodType getValue() const;
    void setValue(eOrderPaymentMethodType const value);

    protected:
        eOrderPaymentMethodType m_value;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderPaymentMethodType_H_ */
