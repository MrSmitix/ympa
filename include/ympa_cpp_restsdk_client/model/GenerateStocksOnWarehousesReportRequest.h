/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateStocksOnWarehousesReportRequest.h
 *
 * Данные, необходимые для генерации отчета. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateStocksOnWarehousesReportRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateStocksOnWarehousesReportRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Данные, необходимые для генерации отчета. 
/// </summary>
class  GenerateStocksOnWarehousesReportRequest
    : public ModelBase
{
public:
    GenerateStocksOnWarehousesReportRequest();
    virtual ~GenerateStocksOnWarehousesReportRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GenerateStocksOnWarehousesReportRequest members

    /// <summary>
    /// Идентификатор магазина.
    /// </summary>
    int64_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaignId();

    void setCampaignId(int64_t value);

    /// <summary>
    /// Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
    /// </summary>
    std::vector<int64_t>& getWarehouseIds();
    bool warehouseIdsIsSet() const;
    void unsetWarehouseIds();

    void setWarehouseIds(std::vector<int64_t> value);

    /// <summary>
    /// Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
    /// </summary>
    utility::datetime getReportDate() const;
    bool reportDateIsSet() const;
    void unsetReportDate();

    void setReportDate(const utility::datetime& value);

    /// <summary>
    /// Фильтр по категориям на Маркете (кроме модели FBY).
    /// </summary>
    std::vector<int64_t>& getCategoryIds();
    bool categoryIdsIsSet() const;
    void unsetCategoryIds();

    void setCategoryIds(std::vector<int64_t> value);

    /// <summary>
    /// Фильтр по наличию остатков (кроме модели FBY).
    /// </summary>
    bool isHasStocks() const;
    bool hasStocksIsSet() const;
    void unsetHasStocks();

    void setHasStocks(bool value);


protected:
    int64_t m_CampaignId;
    bool m_CampaignIdIsSet;
    std::vector<int64_t> m_WarehouseIds;
    bool m_WarehouseIdsIsSet;
    utility::datetime m_ReportDate;
    bool m_ReportDateIsSet;
    std::vector<int64_t> m_CategoryIds;
    bool m_CategoryIdsIsSet;
    bool m_HasStocks;
    bool m_HasStocksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GenerateStocksOnWarehousesReportRequest_H_ */
