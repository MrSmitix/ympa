/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetGoodsFeedbackRequest.h
 *
 * Фильтр запроса отзывов в кабинете. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetGoodsFeedbackRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetGoodsFeedbackRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/FeedbackReactionStatusType.h"
#include <cpprest/details/basic_types.h>
#include <set>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Фильтр запроса отзывов в кабинете. 
/// </summary>
class  GetGoodsFeedbackRequest
    : public ModelBase
{
public:
    GetGoodsFeedbackRequest();
    virtual ~GetGoodsFeedbackRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetGoodsFeedbackRequest members

    /// <summary>
    /// Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. 
    /// </summary>
    utility::datetime getDateTimeFrom() const;
    bool dateTimeFromIsSet() const;
    void unsetDateTimeFrom();

    void setDateTimeFrom(const utility::datetime& value);

    /// <summary>
    /// Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
    /// </summary>
    utility::datetime getDateTimeTo() const;
    bool dateTimeToIsSet() const;
    void unsetDateTimeTo();

    void setDateTimeTo(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedbackReactionStatusType> getReactionStatus() const;
    bool reactionStatusIsSet() const;
    void unsetReactionStatus();

    void setReactionStatus(const std::shared_ptr<FeedbackReactionStatusType>& value);

    /// <summary>
    /// Оценка товара.
    /// </summary>
    std::set<int32_t>& getRatingValues();
    bool ratingValuesIsSet() const;
    void unsetRatingValues();

    void setRatingValues(std::set<int32_t> value);

    /// <summary>
    /// Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
    /// </summary>
    std::set<int64_t>& getModelIds();
    bool modelIdsIsSet() const;
    void unsetModelIds();

    void setModelIds(std::set<int64_t> value);

    /// <summary>
    /// Фильтр отзывов за баллы Плюса.
    /// </summary>
    bool isPaid() const;
    bool paidIsSet() const;
    void unsetPaid();

    void setPaid(bool value);


protected:
    utility::datetime m_DateTimeFrom;
    bool m_DateTimeFromIsSet;
    utility::datetime m_DateTimeTo;
    bool m_DateTimeToIsSet;
    std::shared_ptr<FeedbackReactionStatusType> m_ReactionStatus;
    bool m_ReactionStatusIsSet;
    std::set<int32_t> m_RatingValues;
    bool m_RatingValuesIsSet;
    std::set<int64_t> m_ModelIds;
    bool m_ModelIdsIsSet;
    bool m_Paid;
    bool m_PaidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetGoodsFeedbackRequest_H_ */
