/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GeneratePricesReportRequest.h
 *
 * Данные, необходимые для генерации отчета.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GeneratePricesReportRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GeneratePricesReportRequest_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Данные, необходимые для генерации отчета.
/// </summary>
class  GeneratePricesReportRequest
    : public ModelBase
{
public:
    GeneratePricesReportRequest();
    virtual ~GeneratePricesReportRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GeneratePricesReportRequest members

    /// <summary>
    /// Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;. 
    /// </summary>
    int64_t getBusinessId() const;
    bool businessIdIsSet() const;
    void unsetBusinessId();

    void setBusinessId(int64_t value);

    /// <summary>
    /// Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно. 
    /// </summary>
    int64_t getCampaignId() const;
    bool campaignIdIsSet() const;
    void unsetCampaignId();

    void setCampaignId(int64_t value);

    /// <summary>
    /// Фильтр по категориям на Маркете.
    /// </summary>
    std::vector<int64_t>& getCategoryIds();
    bool categoryIdsIsSet() const;
    void unsetCategoryIds();

    void setCategoryIds(std::vector<int64_t> value);

    /// <summary>
    /// Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::datetime getCreationDateFrom() const;
    bool creationDateFromIsSet() const;
    void unsetCreationDateFrom();

    void setCreationDateFrom(const utility::datetime& value);

    /// <summary>
    /// Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::datetime getCreationDateTo() const;
    bool creationDateToIsSet() const;
    void unsetCreationDateTo();

    void setCreationDateTo(const utility::datetime& value);


protected:
    int64_t m_BusinessId;
    bool m_BusinessIdIsSet;
    int64_t m_CampaignId;
    bool m_CampaignIdIsSet;
    std::vector<int64_t> m_CategoryIds;
    bool m_CategoryIdsIsSet;
    utility::datetime m_CreationDateFrom;
    bool m_CreationDateFromIsSet;
    utility::datetime m_CreationDateTo;
    bool m_CreationDateToIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GeneratePricesReportRequest_H_ */
