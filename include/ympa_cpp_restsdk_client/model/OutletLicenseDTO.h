/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletLicenseDTO.h
 *
 * Информация о лицензии.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OutletLicenseDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OutletLicenseDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/LicenseType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Информация о лицензии.
/// </summary>
class  OutletLicenseDTO
    : public ModelBase
{
public:
    OutletLicenseDTO();
    virtual ~OutletLicenseDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OutletLicenseDTO members

    /// <summary>
    /// Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;. 
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Идентификатор точки продаж, для которой действительна лицензия.
    /// </summary>
    int64_t getOutletId() const;
    bool outletIdIsSet() const;
    void unsetOutletId();

    void setOutletId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LicenseType> getLicenseType() const;
    bool licenseTypeIsSet() const;
    void unsetLicenseType();

    void setLicenseType(const std::shared_ptr<LicenseType>& value);

    /// <summary>
    /// Номер лицензии.
    /// </summary>
    utility::string_t getNumber() const;
    bool numberIsSet() const;
    void unsetnumber();

    void setNumber(const utility::string_t& value);

    /// <summary>
    /// Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;. 
    /// </summary>
    utility::datetime getDateOfIssue() const;
    bool dateOfIssueIsSet() const;
    void unsetDateOfIssue();

    void setDateOfIssue(const utility::datetime& value);

    /// <summary>
    /// Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;. 
    /// </summary>
    utility::datetime getDateOfExpiry() const;
    bool dateOfExpiryIsSet() const;
    void unsetDateOfExpiry();

    void setDateOfExpiry(const utility::datetime& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    int64_t m_OutletId;
    bool m_OutletIdIsSet;
    std::shared_ptr<LicenseType> m_LicenseType;
    bool m_LicenseTypeIsSet;
    utility::string_t m_number;
    bool m_numberIsSet;
    utility::datetime m_DateOfIssue;
    bool m_DateOfIssueIsSet;
    utility::datetime m_DateOfExpiry;
    bool m_DateOfExpiryIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OutletLicenseDTO_H_ */
