/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BriefOrderItemDTO.h
 *
 * Информация о маркированном товаре.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BriefOrderItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BriefOrderItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/OrderVatType.h"
#include "ympa_cpp_restsdk_client/model/OrderItemInstanceDTO.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class OrderItemInstanceDTO;


/// <summary>
/// Информация о маркированном товаре.
/// </summary>
class  BriefOrderItemDTO
    : public ModelBase
{
public:
    BriefOrderItemDTO();
    virtual ~BriefOrderItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BriefOrderItemDTO members

    /// <summary>
    /// Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OrderVatType> getVat() const;
    bool vatIsSet() const;
    void unsetVat();

    void setVat(const std::shared_ptr<OrderVatType>& value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
    /// </summary>
    double getPrice() const;
    bool priceIsSet() const;
    void unsetPrice();

    void setPrice(double value);

    /// <summary>
    /// Название товара.
    /// </summary>
    utility::string_t getOfferName() const;
    bool offerNameIsSet() const;
    void unsetOfferName();

    void setOfferName(const utility::string_t& value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getOfferId() const;
    bool offerIdIsSet() const;
    void unsetOfferId();

    void setOfferId(const utility::string_t& value);

    /// <summary>
    /// Переданные вами коды маркировки.
    /// </summary>
    std::vector<std::shared_ptr<OrderItemInstanceDTO>>& getInstances();
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(const std::vector<std::shared_ptr<OrderItemInstanceDTO>>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<OrderVatType> m_Vat;
    bool m_VatIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    double m_Price;
    bool m_PriceIsSet;
    utility::string_t m_OfferName;
    bool m_OfferNameIsSet;
    utility::string_t m_OfferId;
    bool m_OfferIdIsSet;
    std::vector<std::shared_ptr<OrderItemInstanceDTO>> m_Instances;
    bool m_InstancesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BriefOrderItemDTO_H_ */
