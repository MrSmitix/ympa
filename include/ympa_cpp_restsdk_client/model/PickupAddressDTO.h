/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PickupAddressDTO.h
 *
 * Адрес доставки.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PickupAddressDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PickupAddressDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Адрес доставки.
/// </summary>
class  PickupAddressDTO
    : public ModelBase
{
public:
    PickupAddressDTO();
    virtual ~PickupAddressDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PickupAddressDTO members

    /// <summary>
    /// Страна.
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// Город.
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// Улица.
    /// </summary>
    utility::string_t getStreet() const;
    bool streetIsSet() const;
    void unsetStreet();

    void setStreet(const utility::string_t& value);

    /// <summary>
    /// Номер дома.
    /// </summary>
    utility::string_t getHouse() const;
    bool houseIsSet() const;
    void unsetHouse();

    void setHouse(const utility::string_t& value);

    /// <summary>
    /// Почтовый индекс.
    /// </summary>
    utility::string_t getPostcode() const;
    bool postcodeIsSet() const;
    void unsetPostcode();

    void setPostcode(const utility::string_t& value);


protected:
    utility::string_t m_Country;
    bool m_CountryIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Street;
    bool m_StreetIsSet;
    utility::string_t m_House;
    bool m_HouseIsSet;
    utility::string_t m_Postcode;
    bool m_PostcodeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PickupAddressDTO_H_ */
