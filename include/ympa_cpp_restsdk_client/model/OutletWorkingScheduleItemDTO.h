/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletWorkingScheduleItemDTO.h
 *
 * Расписание работы точки продаж.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OutletWorkingScheduleItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OutletWorkingScheduleItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/DayOfWeekType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Расписание работы точки продаж.
/// </summary>
class  OutletWorkingScheduleItemDTO
    : public ModelBase
{
public:
    OutletWorkingScheduleItemDTO();
    virtual ~OutletWorkingScheduleItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OutletWorkingScheduleItemDTO members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DayOfWeekType> getStartDay() const;
    bool startDayIsSet() const;
    void unsetStartDay();

    void setStartDay(const std::shared_ptr<DayOfWeekType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DayOfWeekType> getEndDay() const;
    bool endDayIsSet() const;
    void unsetEndDay();

    void setEndDay(const std::shared_ptr<DayOfWeekType>& value);

    /// <summary>
    /// Точка продаж работает c указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
    /// </summary>
    utility::string_t getStartTime() const;
    bool startTimeIsSet() const;
    void unsetStartTime();

    void setStartTime(const utility::string_t& value);

    /// <summary>
    /// Точка продаж работает до указанного часа.  Формат: &#x60;ЧЧ:ММ&#x60;. 
    /// </summary>
    utility::string_t getEndTime() const;
    bool endTimeIsSet() const;
    void unsetEndTime();

    void setEndTime(const utility::string_t& value);


protected:
    std::shared_ptr<DayOfWeekType> m_StartDay;
    bool m_StartDayIsSet;
    std::shared_ptr<DayOfWeekType> m_EndDay;
    bool m_EndDayIsSet;
    utility::string_t m_StartTime;
    bool m_StartTimeIsSet;
    utility::string_t m_EndTime;
    bool m_EndTimeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OutletWorkingScheduleItemDTO_H_ */
