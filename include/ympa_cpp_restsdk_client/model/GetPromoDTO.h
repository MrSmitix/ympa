/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GetPromoDTO.h
 *
 * Информация об акции.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GetPromoDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GetPromoDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GetPromoBestsellerInfoDTO.h"
#include "ympa_cpp_restsdk_client/model/GetPromoMechanicsInfoDTO.h"
#include "ympa_cpp_restsdk_client/model/GetPromoConstraintsDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/ChannelType.h"
#include "ympa_cpp_restsdk_client/model/PromoPeriodDTO.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/GetPromoAssortmentInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PromoPeriodDTO;
class GetPromoAssortmentInfoDTO;
class GetPromoMechanicsInfoDTO;
class GetPromoBestsellerInfoDTO;
class GetPromoConstraintsDTO;


/// <summary>
/// Информация об акции.
/// </summary>
class  GetPromoDTO
    : public ModelBase
{
public:
    GetPromoDTO();
    virtual ~GetPromoDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GetPromoDTO members

    /// <summary>
    /// Идентификатор акции.
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// Название акции.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PromoPeriodDTO> getPeriod() const;
    bool periodIsSet() const;
    void unsetPeriod();

    void setPeriod(const std::shared_ptr<PromoPeriodDTO>& value);

    /// <summary>
    /// Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
    /// </summary>
    bool isParticipating() const;
    bool participatingIsSet() const;
    void unsetParticipating();

    void setParticipating(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoAssortmentInfoDTO> getAssortmentInfo() const;
    bool assortmentInfoIsSet() const;
    void unsetAssortmentInfo();

    void setAssortmentInfo(const std::shared_ptr<GetPromoAssortmentInfoDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoMechanicsInfoDTO> getMechanicsInfo() const;
    bool mechanicsInfoIsSet() const;
    void unsetMechanicsInfo();

    void setMechanicsInfo(const std::shared_ptr<GetPromoMechanicsInfoDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoBestsellerInfoDTO> getBestsellerInfo() const;
    bool bestsellerInfoIsSet() const;
    void unsetBestsellerInfo();

    void setBestsellerInfo(const std::shared_ptr<GetPromoBestsellerInfoDTO>& value);

    /// <summary>
    /// Список каналов продвижения товаров.
    /// </summary>
    std::vector<std::shared_ptr<ChannelType>>& getChannels();
    bool channelsIsSet() const;
    void unsetChannels();

    void setChannels(const std::vector<std::shared_ptr<ChannelType>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetPromoConstraintsDTO> getConstraints() const;
    bool constraintsIsSet() const;
    void unsetConstraints();

    void setConstraints(const std::shared_ptr<GetPromoConstraintsDTO>& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<PromoPeriodDTO> m_Period;
    bool m_PeriodIsSet;
    bool m_Participating;
    bool m_ParticipatingIsSet;
    std::shared_ptr<GetPromoAssortmentInfoDTO> m_AssortmentInfo;
    bool m_AssortmentInfoIsSet;
    std::shared_ptr<GetPromoMechanicsInfoDTO> m_MechanicsInfo;
    bool m_MechanicsInfoIsSet;
    std::shared_ptr<GetPromoBestsellerInfoDTO> m_BestsellerInfo;
    bool m_BestsellerInfoIsSet;
    std::vector<std::shared_ptr<ChannelType>> m_Channels;
    bool m_ChannelsIsSet;
    std::shared_ptr<GetPromoConstraintsDTO> m_Constraints;
    bool m_ConstraintsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GetPromoDTO_H_ */
