/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryAddressDTO.h
 *
 * Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryAddressDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryAddressDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GpsDTO.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GpsDTO;


/// <summary>
/// Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
/// </summary>
class  OrderDeliveryAddressDTO
    : public ModelBase
{
public:
    OrderDeliveryAddressDTO();
    virtual ~OrderDeliveryAddressDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderDeliveryAddressDTO members

    /// <summary>
    /// Страна.  Обязательный параметр. 
    /// </summary>
    utility::string_t getCountry() const;
    bool countryIsSet() const;
    void unsetCountry();

    void setCountry(const utility::string_t& value);

    /// <summary>
    /// Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). 
    /// </summary>
    utility::string_t getPostcode() const;
    bool postcodeIsSet() const;
    void unsetPostcode();

    void setPostcode(const utility::string_t& value);

    /// <summary>
    /// Город или населенный пункт.  Обязательный параметр. 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// Район.
    /// </summary>
    utility::string_t getDistrict() const;
    bool districtIsSet() const;
    void unsetDistrict();

    void setDistrict(const utility::string_t& value);

    /// <summary>
    /// Станция метро.
    /// </summary>
    utility::string_t getSubway() const;
    bool subwayIsSet() const;
    void unsetSubway();

    void setSubway(const utility::string_t& value);

    /// <summary>
    /// Улица.  Обязательный параметр. 
    /// </summary>
    utility::string_t getStreet() const;
    bool streetIsSet() const;
    void unsetStreet();

    void setStreet(const utility::string_t& value);

    /// <summary>
    /// Дом или владение.  Обязательный параметр. 
    /// </summary>
    utility::string_t getHouse() const;
    bool houseIsSet() const;
    void unsetHouse();

    void setHouse(const utility::string_t& value);

    /// <summary>
    /// Корпус или строение.
    /// </summary>
    utility::string_t getBlock() const;
    bool blockIsSet() const;
    void unsetBlock();

    void setBlock(const utility::string_t& value);

    /// <summary>
    /// Подъезд.
    /// </summary>
    utility::string_t getEntrance() const;
    bool entranceIsSet() const;
    void unsetEntrance();

    void setEntrance(const utility::string_t& value);

    /// <summary>
    /// Код домофона.
    /// </summary>
    utility::string_t getEntryphone() const;
    bool entryphoneIsSet() const;
    void unsetEntryphone();

    void setEntryphone(const utility::string_t& value);

    /// <summary>
    /// Этаж.
    /// </summary>
    utility::string_t getFloor() const;
    bool floorIsSet() const;
    void unsetFloor();

    void setFloor(const utility::string_t& value);

    /// <summary>
    /// Квартира или офис.
    /// </summary>
    utility::string_t getApartment() const;
    bool apartmentIsSet() const;
    void unsetApartment();

    void setApartment(const utility::string_t& value);

    /// <summary>
    /// Телефон получателя заказа.  Обязательный параметр. 
    /// </summary>
    utility::string_t getPhone() const;
    bool phoneIsSet() const;
    void unsetPhone();

    void setPhone(const utility::string_t& value);

    /// <summary>
    /// Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
    /// </summary>
    utility::string_t getRecipient() const;
    bool recipientIsSet() const;
    void unsetRecipient();

    void setRecipient(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GpsDTO> getGps() const;
    bool gpsIsSet() const;
    void unsetGps();

    void setGps(const std::shared_ptr<GpsDTO>& value);


protected:
    utility::string_t m_Country;
    bool m_CountryIsSet;
    utility::string_t m_Postcode;
    bool m_PostcodeIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_District;
    bool m_DistrictIsSet;
    utility::string_t m_Subway;
    bool m_SubwayIsSet;
    utility::string_t m_Street;
    bool m_StreetIsSet;
    utility::string_t m_House;
    bool m_HouseIsSet;
    utility::string_t m_Block;
    bool m_BlockIsSet;
    utility::string_t m_Entrance;
    bool m_EntranceIsSet;
    utility::string_t m_Entryphone;
    bool m_EntryphoneIsSet;
    utility::string_t m_Floor;
    bool m_FloorIsSet;
    utility::string_t m_Apartment;
    bool m_ApartmentIsSet;
    utility::string_t m_Phone;
    bool m_PhoneIsSet;
    utility::string_t m_Recipient;
    bool m_RecipientIsSet;
    std::shared_ptr<GpsDTO> m_Gps;
    bool m_GpsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryAddressDTO_H_ */
