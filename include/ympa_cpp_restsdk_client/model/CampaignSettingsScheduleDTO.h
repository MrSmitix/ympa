/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignSettingsScheduleDTO.h
 *
 * Расписание работы службы доставки в своем регионе.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CampaignSettingsScheduleDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CampaignSettingsScheduleDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/CampaignSettingsTimePeriodDTO.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CampaignSettingsTimePeriodDTO;


/// <summary>
/// Расписание работы службы доставки в своем регионе.
/// </summary>
class  CampaignSettingsScheduleDTO
    : public ModelBase
{
public:
    CampaignSettingsScheduleDTO();
    virtual ~CampaignSettingsScheduleDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CampaignSettingsScheduleDTO members

    /// <summary>
    /// Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. 
    /// </summary>
    bool isAvailableOnHolidays() const;
    bool availableOnHolidaysIsSet() const;
    void unsetAvailableOnHolidays();

    void setAvailableOnHolidays(bool value);

    /// <summary>
    /// Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getCustomHolidays();
    bool customHolidaysIsSet() const;
    void unsetCustomHolidays();

    void setCustomHolidays(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getCustomWorkingDays();
    bool customWorkingDaysIsSet() const;
    void unsetCustomWorkingDays();

    void setCustomWorkingDays(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CampaignSettingsTimePeriodDTO> getPeriod() const;
    bool periodIsSet() const;
    void unsetPeriod();

    void setPeriod(const std::shared_ptr<CampaignSettingsTimePeriodDTO>& value);

    /// <summary>
    /// Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getTotalHolidays();
    bool totalHolidaysIsSet() const;
    void unsetTotalHolidays();

    void setTotalHolidays(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// Список выходных дней недели и государственных праздников.
    /// </summary>
    std::vector<int32_t>& getWeeklyHolidays();
    bool weeklyHolidaysIsSet() const;
    void unsetWeeklyHolidays();

    void setWeeklyHolidays(std::vector<int32_t> value);


protected:
    bool m_AvailableOnHolidays;
    bool m_AvailableOnHolidaysIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_CustomHolidays;
    bool m_CustomHolidaysIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_CustomWorkingDays;
    bool m_CustomWorkingDaysIsSet;
    std::shared_ptr<CampaignSettingsTimePeriodDTO> m_Period;
    bool m_PeriodIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_TotalHolidays;
    bool m_TotalHolidaysIsSet;
    std::vector<int32_t> m_WeeklyHolidays;
    bool m_WeeklyHolidaysIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CampaignSettingsScheduleDTO_H_ */
