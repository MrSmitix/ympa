/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WarehouseAddressDTO.h
 *
 * Адрес склада.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_WarehouseAddressDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_WarehouseAddressDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GpsDTO.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GpsDTO;


/// <summary>
/// Адрес склада.
/// </summary>
class  WarehouseAddressDTO
    : public ModelBase
{
public:
    WarehouseAddressDTO();
    virtual ~WarehouseAddressDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WarehouseAddressDTO members

    /// <summary>
    /// Город.
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// Улица.
    /// </summary>
    utility::string_t getStreet() const;
    bool streetIsSet() const;
    void unsetStreet();

    void setStreet(const utility::string_t& value);

    /// <summary>
    /// Номер дома.
    /// </summary>
    utility::string_t getNumber() const;
    bool numberIsSet() const;
    void unsetnumber();

    void setNumber(const utility::string_t& value);

    /// <summary>
    /// Номер строения.
    /// </summary>
    utility::string_t getBuilding() const;
    bool buildingIsSet() const;
    void unsetBuilding();

    void setBuilding(const utility::string_t& value);

    /// <summary>
    /// Номер корпуса.
    /// </summary>
    utility::string_t getBlock() const;
    bool blockIsSet() const;
    void unsetBlock();

    void setBlock(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GpsDTO> getGps() const;
    bool gpsIsSet() const;
    void unsetGps();

    void setGps(const std::shared_ptr<GpsDTO>& value);


protected:
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Street;
    bool m_StreetIsSet;
    utility::string_t m_number;
    bool m_numberIsSet;
    utility::string_t m_Building;
    bool m_BuildingIsSet;
    utility::string_t m_Block;
    bool m_BlockIsSet;
    std::shared_ptr<GpsDTO> m_Gps;
    bool m_GpsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_WarehouseAddressDTO_H_ */
