/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FeedDTO.h
 *
 * Информация о прайс-листе.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_FeedDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_FeedDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/FeedDownloadDTO.h"
#include "ympa_cpp_restsdk_client/model/FeedPublicationDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/FeedContentDTO.h"
#include "ympa_cpp_restsdk_client/model/FeedPlacementDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class FeedContentDTO;
class FeedDownloadDTO;
class FeedPlacementDTO;
class FeedPublicationDTO;


/// <summary>
/// Информация о прайс-листе.
/// </summary>
class  FeedDTO
    : public ModelBase
{
public:
    FeedDTO();
    virtual ~FeedDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// FeedDTO members

    /// <summary>
    /// Идентификатор прайс-листа.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    /// </summary>
    utility::string_t getLogin() const;
    bool loginIsSet() const;
    void unsetLogin();

    void setLogin(const utility::string_t& value);

    /// <summary>
    /// Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета. 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему. 
    /// </summary>
    utility::string_t getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();

    void setPassword(const utility::string_t& value);

    /// <summary>
    /// Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета. 
    /// </summary>
    utility::datetime getUploadDate() const;
    bool uploadDateIsSet() const;
    void unsetUploadDate();

    void setUploadDate(const utility::datetime& value);

    /// <summary>
    /// URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина. 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedContentDTO> getContent() const;
    bool contentIsSet() const;
    void unsetContent();

    void setContent(const std::shared_ptr<FeedContentDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedDownloadDTO> getDownload() const;
    bool downloadIsSet() const;
    void unsetDownload();

    void setDownload(const std::shared_ptr<FeedDownloadDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedPlacementDTO> getPlacement() const;
    bool placementIsSet() const;
    void unsetPlacement();

    void setPlacement(const std::shared_ptr<FeedPlacementDTO>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FeedPublicationDTO> getPublication() const;
    bool publicationIsSet() const;
    void unsetPublication();

    void setPublication(const std::shared_ptr<FeedPublicationDTO>& value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Login;
    bool m_LoginIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Password;
    bool m_PasswordIsSet;
    utility::datetime m_UploadDate;
    bool m_UploadDateIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    std::shared_ptr<FeedContentDTO> m_Content;
    bool m_ContentIsSet;
    std::shared_ptr<FeedDownloadDTO> m_Download;
    bool m_DownloadIsSet;
    std::shared_ptr<FeedPlacementDTO> m_Placement;
    bool m_PlacementIsSet;
    std::shared_ptr<FeedPublicationDTO> m_Publication;
    bool m_PublicationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_FeedDTO_H_ */
