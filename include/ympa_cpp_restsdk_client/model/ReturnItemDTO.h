/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnItemDTO.h
 *
 * Список товаров в возврате.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnItemDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnItemDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/TrackDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/ReturnDecisionDTO.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/ReturnInstanceDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ReturnDecisionDTO;
class ReturnInstanceDTO;
class TrackDTO;


/// <summary>
/// Список товаров в возврате.
/// </summary>
class  ReturnItemDTO
    : public ModelBase
{
public:
    ReturnItemDTO();
    virtual ~ReturnItemDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ReturnItemDTO members

    /// <summary>
    /// SKU на Маркете.
    /// </summary>
    int64_t getMarketSku() const;
    bool marketSkuIsSet() const;
    void unsetMarketSku();

    void setMarketSku(int64_t value);

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getShopSku() const;
    bool shopSkuIsSet() const;
    void unsetShopSku();

    void setShopSku(const utility::string_t& value);

    /// <summary>
    /// Количество единиц товара.
    /// </summary>
    int64_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int64_t value);

    /// <summary>
    /// Список решений по возврату.
    /// </summary>
    std::vector<std::shared_ptr<ReturnDecisionDTO>>& getDecisions();
    bool decisionsIsSet() const;
    void unsetDecisions();

    void setDecisions(const std::vector<std::shared_ptr<ReturnDecisionDTO>>& value);

    /// <summary>
    /// Список логистических позиций возврата.
    /// </summary>
    std::vector<std::shared_ptr<ReturnInstanceDTO>>& getInstances();
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(const std::vector<std::shared_ptr<ReturnInstanceDTO>>& value);

    /// <summary>
    /// Список трек-кодов для почтовых отправлений.
    /// </summary>
    std::vector<std::shared_ptr<TrackDTO>>& getTracks();
    bool tracksIsSet() const;
    void unsetTracks();

    void setTracks(const std::vector<std::shared_ptr<TrackDTO>>& value);


protected:
    int64_t m_MarketSku;
    bool m_MarketSkuIsSet;
    utility::string_t m_ShopSku;
    bool m_ShopSkuIsSet;
    int64_t m_Count;
    bool m_CountIsSet;
    std::vector<std::shared_ptr<ReturnDecisionDTO>> m_Decisions;
    bool m_DecisionsIsSet;
    std::vector<std::shared_ptr<ReturnInstanceDTO>> m_Instances;
    bool m_InstancesIsSet;
    std::vector<std::shared_ptr<TrackDTO>> m_Tracks;
    bool m_TracksIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ReturnItemDTO_H_ */
