/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OfferCardDTO.h
 *
 * Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OfferCardDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OfferCardDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/GetMappingDTO.h"
#include "ympa_cpp_restsdk_client/model/ParameterValueDTO.h"
#include "ympa_cpp_restsdk_client/model/OfferCardRecommendationDTO.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/OfferErrorDTO.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/OfferCardStatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GetMappingDTO;
class ParameterValueDTO;
class OfferCardRecommendationDTO;
class OfferErrorDTO;


/// <summary>
/// Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут. 
/// </summary>
class  OfferCardDTO
    : public ModelBase
{
public:
    OfferCardDTO();
    virtual ~OfferCardDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OfferCardDTO members

    /// <summary>
    /// Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    /// </summary>
    utility::string_t getOfferId() const;
    bool offerIdIsSet() const;
    void unsetOfferId();

    void setOfferId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GetMappingDTO> getMapping() const;
    bool mappingIsSet() const;
    void unsetMapping();

    void setMapping(const std::shared_ptr<GetMappingDTO>& value);

    /// <summary>
    /// Список характеристик с их значениями. 
    /// </summary>
    std::vector<std::shared_ptr<ParameterValueDTO>>& getParameterValues();
    bool parameterValuesIsSet() const;
    void unsetParameterValues();

    void setParameterValues(const std::vector<std::shared_ptr<ParameterValueDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<OfferCardStatusType> getCardStatus() const;
    bool cardStatusIsSet() const;
    void unsetCardStatus();

    void setCardStatus(const std::shared_ptr<OfferCardStatusType>& value);

    /// <summary>
    /// Процент заполненности карточки.
    /// </summary>
    int32_t getContentRating() const;
    bool contentRatingIsSet() const;
    void unsetContentRating();

    void setContentRating(int32_t value);

    /// <summary>
    /// Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку. 
    /// </summary>
    std::vector<std::shared_ptr<OfferCardRecommendationDTO>>& getRecommendations();
    bool recommendationsIsSet() const;
    void unsetRecommendations();

    void setRecommendations(const std::vector<std::shared_ptr<OfferCardRecommendationDTO>>& value);

    /// <summary>
    /// Ошибки в контенте, препятствующие размещению товара на витрине.
    /// </summary>
    std::vector<std::shared_ptr<OfferErrorDTO>>& getErrors();
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::vector<std::shared_ptr<OfferErrorDTO>>& value);

    /// <summary>
    /// Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
    /// </summary>
    std::vector<std::shared_ptr<OfferErrorDTO>>& getWarnings();
    bool warningsIsSet() const;
    void unsetWarnings();

    void setWarnings(const std::vector<std::shared_ptr<OfferErrorDTO>>& value);


protected:
    utility::string_t m_OfferId;
    bool m_OfferIdIsSet;
    std::shared_ptr<GetMappingDTO> m_Mapping;
    bool m_MappingIsSet;
    std::vector<std::shared_ptr<ParameterValueDTO>> m_ParameterValues;
    bool m_ParameterValuesIsSet;
    std::shared_ptr<OfferCardStatusType> m_CardStatus;
    bool m_CardStatusIsSet;
    int32_t m_ContentRating;
    bool m_ContentRatingIsSet;
    std::vector<std::shared_ptr<OfferCardRecommendationDTO>> m_Recommendations;
    bool m_RecommendationsIsSet;
    std::vector<std::shared_ptr<OfferErrorDTO>> m_Errors;
    bool m_ErrorsIsSet;
    std::vector<std::shared_ptr<OfferErrorDTO>> m_Warnings;
    bool m_WarningsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OfferCardDTO_H_ */
