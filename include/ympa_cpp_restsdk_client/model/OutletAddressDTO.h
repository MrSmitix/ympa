/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OutletAddressDTO.h
 *
 * Адрес точки продаж. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OutletAddressDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OutletAddressDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Адрес точки продаж. 
/// </summary>
class  OutletAddressDTO
    : public ModelBase
{
public:
    OutletAddressDTO();
    virtual ~OutletAddressDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OutletAddressDTO members

    /// <summary>
    /// Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    /// </summary>
    int64_t getRegionId() const;
    bool regionIdIsSet() const;
    void unsetRegionId();

    void setRegionId(int64_t value);

    /// <summary>
    /// Улица.
    /// </summary>
    utility::string_t getStreet() const;
    bool streetIsSet() const;
    void unsetStreet();

    void setStreet(const utility::string_t& value);

    /// <summary>
    /// Номер дома.
    /// </summary>
    utility::string_t getNumber() const;
    bool numberIsSet() const;
    void unsetnumber();

    void setNumber(const utility::string_t& value);

    /// <summary>
    /// Номер строения.
    /// </summary>
    utility::string_t getBuilding() const;
    bool buildingIsSet() const;
    void unsetBuilding();

    void setBuilding(const utility::string_t& value);

    /// <summary>
    /// Номер владения.
    /// </summary>
    utility::string_t getEstate() const;
    bool estateIsSet() const;
    void unsetEstate();

    void setEstate(const utility::string_t& value);

    /// <summary>
    /// Номер корпуса.
    /// </summary>
    utility::string_t getBlock() const;
    bool blockIsSet() const;
    void unsetBlock();

    void setBlock(const utility::string_t& value);

    /// <summary>
    /// Дополнительная информация.
    /// </summary>
    utility::string_t getAdditional() const;
    bool additionalIsSet() const;
    void unsetAdditional();

    void setAdditional(const utility::string_t& value);

    /// <summary>
    /// Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    /// </summary>
    int32_t getKm() const;
    bool kmIsSet() const;
    void unsetKm();

    void setKm(int32_t value);

    /// <summary>
    /// {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);


protected:
    int64_t m_RegionId;
    bool m_RegionIdIsSet;
    utility::string_t m_Street;
    bool m_StreetIsSet;
    utility::string_t m_number;
    bool m_numberIsSet;
    utility::string_t m_Building;
    bool m_BuildingIsSet;
    utility::string_t m_Estate;
    bool m_EstateIsSet;
    utility::string_t m_Block;
    bool m_BlockIsSet;
    utility::string_t m_Additional;
    bool m_AdditionalIsSet;
    int32_t m_Km;
    bool m_KmIsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OutletAddressDTO_H_ */
