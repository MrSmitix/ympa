/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LogisticPickupPointDTO.h
 *
 * Описание пункта вывоза для возврата.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_LogisticPickupPointDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_LogisticPickupPointDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/LogisticPointType.h"
#include <cpprest/details/basic_types.h>
#include "ympa_cpp_restsdk_client/model/PickupAddressDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PickupAddressDTO;


/// <summary>
/// Описание пункта вывоза для возврата.
/// </summary>
class  LogisticPickupPointDTO
    : public ModelBase
{
public:
    LogisticPickupPointDTO();
    virtual ~LogisticPickupPointDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LogisticPickupPointDTO members

    /// <summary>
    /// Идентификатор пункта вывоза.
    /// </summary>
    int64_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int64_t value);

    /// <summary>
    /// Название пункта вывоза.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PickupAddressDTO> getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const std::shared_ptr<PickupAddressDTO>& value);

    /// <summary>
    /// Дополнительные инструкции к вывозу.
    /// </summary>
    utility::string_t getInstruction() const;
    bool instructionIsSet() const;
    void unsetInstruction();

    void setInstruction(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LogisticPointType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<LogisticPointType>& value);

    /// <summary>
    /// Идентификатор логистического партнера, к которому относится логистическая точка.
    /// </summary>
    int64_t getLogisticPartnerId() const;
    bool logisticPartnerIdIsSet() const;
    void unsetLogisticPartnerId();

    void setLogisticPartnerId(int64_t value);


protected:
    int64_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<PickupAddressDTO> m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Instruction;
    bool m_InstructionIsSet;
    std::shared_ptr<LogisticPointType> m_Type;
    bool m_TypeIsSet;
    int64_t m_LogisticPartnerId;
    bool m_LogisticPartnerIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_LogisticPickupPointDTO_H_ */
