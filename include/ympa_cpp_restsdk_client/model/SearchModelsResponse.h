/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchModelsResponse.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SearchModelsResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SearchModelsResponse_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include "ympa_cpp_restsdk_client/model/FlippingPagerDTO.h"
#include "ympa_cpp_restsdk_client/model/CurrencyType.h"
#include <vector>
#include "ympa_cpp_restsdk_client/model/ModelDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ModelDTO;
class FlippingPagerDTO;


/// <summary>
/// 
/// </summary>
class  SearchModelsResponse
    : public ModelBase
{
public:
    SearchModelsResponse();
    virtual ~SearchModelsResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SearchModelsResponse members

    /// <summary>
    /// Список моделей товаров.
    /// </summary>
    std::vector<std::shared_ptr<ModelDTO>>& getModels();
    bool modelsIsSet() const;
    void unsetModels();

    void setModels(const std::vector<std::shared_ptr<ModelDTO>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CurrencyType> getCurrency() const;
    bool currencyIsSet() const;
    void unsetCurrency();

    void setCurrency(const std::shared_ptr<CurrencyType>& value);

    /// <summary>
    /// Идентификатор региона, для которого выводится информация о предложениях модели (доставляемых в этот регион).  Информацию о регионе по идентификатору можно получить с помощью запроса [GET regions/{regionId}](../../reference/regions/searchRegionsById.md). 
    /// </summary>
    int64_t getRegionId() const;
    bool regionIdIsSet() const;
    void unsetRegionId();

    void setRegionId(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FlippingPagerDTO> getPager() const;
    bool pagerIsSet() const;
    void unsetPager();

    void setPager(const std::shared_ptr<FlippingPagerDTO>& value);


protected:
    std::vector<std::shared_ptr<ModelDTO>> m_Models;
    bool m_ModelsIsSet;
    std::shared_ptr<CurrencyType> m_Currency;
    bool m_CurrencyIsSet;
    int64_t m_RegionId;
    bool m_RegionIdIsSet;
    std::shared_ptr<FlippingPagerDTO> m_Pager;
    bool m_PagerIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SearchModelsResponse_H_ */
