/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OrderDeliveryDatesDTO.h
 *
 * Диапазон дат доставки.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryDatesDTO_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryDatesDTO_H_


#include "ympa_cpp_restsdk_client/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Диапазон дат доставки.
/// </summary>
class  OrderDeliveryDatesDTO
    : public ModelBase
{
public:
    OrderDeliveryDatesDTO();
    virtual ~OrderDeliveryDatesDTO();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OrderDeliveryDatesDTO members

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::string_t getFromDate() const;
    bool fromDateIsSet() const;
    void unsetFromDate();

    void setFromDate(const utility::string_t& value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::string_t getToDate() const;
    bool toDateIsSet() const;
    void unsetToDate();

    void setToDate(const utility::string_t& value);

    /// <summary>
    /// Начало интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Минимальное значение: &#x60;00:00&#x60;. 
    /// </summary>
    utility::string_t getFromTime() const;
    bool fromTimeIsSet() const;
    void unsetFromTime();

    void setFromTime(const utility::string_t& value);

    /// <summary>
    /// Конец интервала времени доставки.  Передается только совместно с параметром &#x60;type&#x3D;DELIVERY&#x60;.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;. В качестве минут всегда должно быть указано &#x60;00&#x60; (исключение — &#x60;23:59&#x60;).  Максимальное значение: &#x60;23:59&#x60;. 
    /// </summary>
    utility::string_t getToTime() const;
    bool toTimeIsSet() const;
    void unsetToTime();

    void setToTime(const utility::string_t& value);

    /// <summary>
    /// Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
    /// </summary>
    utility::string_t getRealDeliveryDate() const;
    bool realDeliveryDateIsSet() const;
    void unsetRealDeliveryDate();

    void setRealDeliveryDate(const utility::string_t& value);


protected:
    utility::string_t m_FromDate;
    bool m_FromDateIsSet;
    utility::string_t m_ToDate;
    bool m_ToDateIsSet;
    utility::string_t m_FromTime;
    bool m_FromTimeIsSet;
    utility::string_t m_ToTime;
    bool m_ToTimeIsSet;
    utility::string_t m_RealDeliveryDate;
    bool m_RealDeliveryDateIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_OrderDeliveryDatesDTO_H_ */
