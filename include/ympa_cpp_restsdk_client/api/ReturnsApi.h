/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReturnsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ReturnsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ReturnsApi_H_



#include "ympa_cpp_restsdk_client/ApiClient.h"

#include "ympa_cpp_restsdk_client/model/ApiClientDataErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiForbiddenErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiLimitErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiNotFoundErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiServerErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiUnauthorizedErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/EmptyApiResponse.h"
#include "ympa_cpp_restsdk_client/model/GetReturnResponse.h"
#include "ympa_cpp_restsdk_client/model/GetReturnsResponse.h"
#include "ympa_cpp_restsdk_client/HttpContent.h"
#include "ympa_cpp_restsdk_client/model/RefundStatusType.h"
#include "ympa_cpp_restsdk_client/model/ReturnType.h"
#include "ympa_cpp_restsdk_client/model/SetReturnDecisionRequest.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ReturnsApi 
{
public:

    explicit ReturnsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ReturnsApi();

    /// <summary>
    /// Информация о невыкупе или возврате
    /// </summary>
    /// <remarks>
    /// Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    pplx::task<std::shared_ptr<GetReturnResponse>> getReturn(
        int64_t campaignId,
        int64_t orderId,
        int64_t returnId
    ) const;
    /// <summary>
    /// Получение заявления на возврат
    /// </summary>
    /// <remarks>
    /// Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    pplx::task<std::shared_ptr<HttpContent>> getReturnApplication(
        int64_t campaignId,
        int64_t orderId,
        int64_t returnId
    ) const;
    /// <summary>
    /// Получение фотографии возврата
    /// </summary>
    /// <remarks>
    /// Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    /// <param name="itemId">Идентификатор товара в возврате.</param>
    /// <param name="imageHash">Хеш ссылки изображения для загрузки.</param>
    pplx::task<std::shared_ptr<HttpContent>> getReturnPhoto(
        int64_t campaignId,
        int64_t orderId,
        int64_t returnId,
        int64_t itemId,
        utility::string_t imageHash
    ) const;
    /// <summary>
    /// Список невыкупов и возвратов
    /// </summary>
    /// <remarks>
    /// Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    /// <param name="orderIds">Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.  (optional, default to std::vector&lt;int64_t&gt;())</param>
    /// <param name="statuses">Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую.  (optional, default to std::vector&lt;std::shared_ptr&lt;RefundStatusType&gt;&gt;())</param>
    /// <param name="type">Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы.  (optional, default to new ReturnType())</param>
    /// <param name="fromDate">Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional, default to utility::datetime())</param>
    /// <param name="toDate">Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional, default to utility::datetime())</param>
    /// <param name="fromDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional, default to utility::datetime())</param>
    /// <param name="toDate2">{% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<GetReturnsResponse>> getReturns(
        int64_t campaignId,
        boost::optional<utility::string_t> pageToken,
        boost::optional<int32_t> limit,
        boost::optional<std::vector<int64_t>> orderIds,
        boost::optional<std::vector<std::shared_ptr<RefundStatusType>>> statuses,
        boost::optional<std::shared_ptr<ReturnType>> type,
        boost::optional<utility::datetime> fromDate,
        boost::optional<utility::datetime> toDate,
        boost::optional<utility::datetime> fromDate2,
        boost::optional<utility::datetime> toDate2
    ) const;
    /// <summary>
    /// Принятие или изменение решения по возврату
    /// </summary>
    /// <remarks>
    /// Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    /// <param name="setReturnDecisionRequest"></param>
    pplx::task<std::shared_ptr<EmptyApiResponse>> setReturnDecision(
        int64_t campaignId,
        int64_t orderId,
        int64_t returnId,
        std::shared_ptr<SetReturnDecisionRequest> setReturnDecisionRequest
    ) const;
    /// <summary>
    /// Подтверждение решения по возврату
    /// </summary>
    /// <remarks>
    /// Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="orderId">Идентификатор заказа.</param>
    /// <param name="returnId">Идентификатор возврата.</param>
    pplx::task<std::shared_ptr<EmptyApiResponse>> submitReturnDecision(
        int64_t campaignId,
        int64_t orderId,
        int64_t returnId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ReturnsApi_H_ */

