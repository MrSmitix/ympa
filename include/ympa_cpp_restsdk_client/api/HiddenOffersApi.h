/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HiddenOffersApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_HiddenOffersApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_HiddenOffersApi_H_



#include "ympa_cpp_restsdk_client/ApiClient.h"

#include "ympa_cpp_restsdk_client/model/AddHiddenOffersRequest.h"
#include "ympa_cpp_restsdk_client/model/ApiClientDataErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiForbiddenErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiLimitErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiLockedErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiNotFoundErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiServerErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiUnauthorizedErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/DeleteHiddenOffersRequest.h"
#include "ympa_cpp_restsdk_client/model/EmptyApiResponse.h"
#include "ympa_cpp_restsdk_client/model/GetHiddenOffersResponse.h"
#include <vector>
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  HiddenOffersApi 
{
public:

    explicit HiddenOffersApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~HiddenOffersApi();

    /// <summary>
    /// Скрытие товаров и настройки скрытия
    /// </summary>
    /// <remarks>
    /// Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="addHiddenOffersRequest">Запрос на скрытие оферов.</param>
    pplx::task<std::shared_ptr<EmptyApiResponse>> addHiddenOffers(
        int64_t campaignId,
        std::shared_ptr<AddHiddenOffersRequest> addHiddenOffersRequest
    ) const;
    /// <summary>
    /// Возобновление показа товаров
    /// </summary>
    /// <remarks>
    /// Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="deleteHiddenOffersRequest">Запрос на возобновление показа оферов.</param>
    pplx::task<std::shared_ptr<EmptyApiResponse>> deleteHiddenOffers(
        int64_t campaignId,
        std::shared_ptr<DeleteHiddenOffersRequest> deleteHiddenOffersRequest
    ) const;
    /// <summary>
    /// Информация о скрытых вами товарах
    /// </summary>
    /// <remarks>
    /// Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="offerId">Идентификатор скрытого предложения.  (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    /// <param name="offset">Позиция в списке, начиная с которой возвращаются результаты ответа.  Используется вместе с параметром &#x60;limit&#x60;.  Если задан &#x60;offset&#x60;, параметры &#x60;page_number&#x60; и &#x60;page_size&#x60; игнорируются.  &#x60;offset&#x60; игнорируется, если задан &#x60;page_token&#x60;.  (optional, default to 0)</param>
    /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 0)</param>
    /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetHiddenOffersResponse>> getHiddenOffers(
        int64_t campaignId,
        boost::optional<std::vector<std::shared_ptr<utility::string_t>>> offerId,
        boost::optional<utility::string_t> pageToken,
        boost::optional<int32_t> limit,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> page,
        boost::optional<int32_t> pageSize
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_HiddenOffersApi_H_ */

