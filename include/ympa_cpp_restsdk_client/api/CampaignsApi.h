/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CampaignsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_CampaignsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_CampaignsApi_H_



#include "ympa_cpp_restsdk_client/ApiClient.h"

#include "ympa_cpp_restsdk_client/model/ApiClientDataErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiForbiddenErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiLimitErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiNotFoundErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiServerErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiUnauthorizedErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/GetCampaignLoginsResponse.h"
#include "ympa_cpp_restsdk_client/model/GetCampaignRegionResponse.h"
#include "ympa_cpp_restsdk_client/model/GetCampaignResponse.h"
#include "ympa_cpp_restsdk_client/model/GetCampaignSettingsResponse.h"
#include "ympa_cpp_restsdk_client/model/GetCampaignsResponse.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CampaignsApi 
{
public:

    explicit CampaignsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CampaignsApi();

    /// <summary>
    /// Информация о магазине
    /// </summary>
    /// <remarks>
    /// Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    pplx::task<std::shared_ptr<GetCampaignResponse>> getCampaign(
        int64_t campaignId
    ) const;
    /// <summary>
    /// Логины, связанные с магазином
    /// </summary>
    /// <remarks>
    /// Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    pplx::task<std::shared_ptr<GetCampaignLoginsResponse>> getCampaignLogins(
        int64_t campaignId
    ) const;
    /// <summary>
    /// Регион магазина
    /// </summary>
    /// <remarks>
    /// {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    pplx::task<std::shared_ptr<GetCampaignRegionResponse>> getCampaignRegion(
        int64_t campaignId
    ) const;
    /// <summary>
    /// Настройки магазина
    /// </summary>
    /// <remarks>
    /// Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="campaignId">Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    pplx::task<std::shared_ptr<GetCampaignSettingsResponse>> getCampaignSettings(
        int64_t campaignId
    ) const;
    /// <summary>
    /// Список магазинов пользователя
    /// </summary>
    /// <remarks>
    /// Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 0)</param>
    /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetCampaignsResponse>> getCampaigns(
        boost::optional<int32_t> page,
        boost::optional<int32_t> pageSize
    ) const;
    /// <summary>
    /// Магазины, доступные логину
    /// </summary>
    /// <remarks>
    /// Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="login">Логин пользователя.</param>
    /// <param name="page">Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 0)</param>
    /// <param name="pageSize">Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetCampaignsResponse>> getCampaignsByLogin(
        utility::string_t login,
        boost::optional<int32_t> page,
        boost::optional<int32_t> pageSize
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_CampaignsApi_H_ */

