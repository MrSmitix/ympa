/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ReportsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ReportsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ReportsApi_H_



#include "ympa_cpp_restsdk_client/ApiClient.h"

#include "ympa_cpp_restsdk_client/model/ApiClientDataErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiForbiddenErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiLimitErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiNotFoundErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiServerErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiUnauthorizedErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/GenerateBoostConsolidatedRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateCompetitorsPositionReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateGoodsFeedbackRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateGoodsMovementReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateGoodsRealizationReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateGoodsTurnoverRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateMassOrderLabelsRequest.h"
#include "ympa_cpp_restsdk_client/model/GeneratePricesReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateReportResponse.h"
#include "ympa_cpp_restsdk_client/model/GenerateShelfsStatisticsRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateShipmentListDocumentReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateShowsSalesReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateStocksOnWarehousesReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateUnitedMarketplaceServicesReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateUnitedNettingReportRequest.h"
#include "ympa_cpp_restsdk_client/model/GenerateUnitedOrdersRequest.h"
#include "ympa_cpp_restsdk_client/model/GetReportInfoResponse.h"
#include "ympa_cpp_restsdk_client/model/PageFormatType.h"
#include "ympa_cpp_restsdk_client/model/ReportFormatType.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ReportsApi 
{
public:

    explicit ReportsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ReportsApi();

    /// <summary>
    /// Отчет по бусту продаж
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateBoostConsolidatedRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateBoostConsolidatedReport(
        std::shared_ptr<GenerateBoostConsolidatedRequest> generateBoostConsolidatedRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет «Конкурентная позиция»
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateCompetitorsPositionReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateCompetitorsPositionReport(
        std::shared_ptr<GenerateCompetitorsPositionReportRequest> generateCompetitorsPositionReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по отзывам о товарах
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsFeedbackRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateGoodsFeedbackReport(
        std::shared_ptr<GenerateGoodsFeedbackRequest> generateGoodsFeedbackRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по движению товаров
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsMovementReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateGoodsMovementReport(
        std::shared_ptr<GenerateGoodsMovementReportRequest> generateGoodsMovementReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по реализации
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsRealizationReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateGoodsRealizationReport(
        std::shared_ptr<GenerateGoodsRealizationReportRequest> generateGoodsRealizationReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по оборачиваемости
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateGoodsTurnoverRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateGoodsTurnoverReport(
        std::shared_ptr<GenerateGoodsTurnoverRequest> generateGoodsTurnoverRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Готовые ярлыки‑наклейки на все коробки в нескольких заказах
    /// </summary>
    /// <remarks>
    /// Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateMassOrderLabelsRequest"></param>
    /// <param name="format">Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7. (optional, default to new PageFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateMassOrderLabelsReport(
        std::shared_ptr<GenerateMassOrderLabelsRequest> generateMassOrderLabelsRequest,
        boost::optional<std::shared_ptr<PageFormatType>> format
    ) const;
    /// <summary>
    /// Отчет «Цены на рынке»
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generatePricesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generatePricesReport(
        std::shared_ptr<GeneratePricesReportRequest> generatePricesReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по полкам
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateShelfsStatisticsRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateShelfsStatisticsReport(
        std::shared_ptr<GenerateShelfsStatisticsRequest> generateShelfsStatisticsRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Получение листа сборки
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateShipmentListDocumentReportRequest"></param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateShipmentListDocumentReport(
        std::shared_ptr<GenerateShipmentListDocumentReportRequest> generateShipmentListDocumentReportRequest
    ) const;
    /// <summary>
    /// Отчет «Аналитика продаж»
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateShowsSalesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateShowsSalesReport(
        std::shared_ptr<GenerateShowsSalesReportRequest> generateShowsSalesReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по остаткам на складах
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateStocksOnWarehousesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateStocksOnWarehousesReport(
        std::shared_ptr<GenerateStocksOnWarehousesReportRequest> generateStocksOnWarehousesReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по стоимости услуг
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateUnitedMarketplaceServicesReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateUnitedMarketplaceServicesReport(
        std::shared_ptr<GenerateUnitedMarketplaceServicesReportRequest> generateUnitedMarketplaceServicesReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по платежам
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateUnitedNettingReportRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateUnitedNettingReport(
        std::shared_ptr<GenerateUnitedNettingReportRequest> generateUnitedNettingReportRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Отчет по заказам
    /// </summary>
    /// <remarks>
    /// Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    /// </remarks>
    /// <param name="generateUnitedOrdersRequest"></param>
    /// <param name="format">Формат отчета. (optional, default to new ReportFormatType())</param>
    pplx::task<std::shared_ptr<GenerateReportResponse>> generateUnitedOrdersReport(
        std::shared_ptr<GenerateUnitedOrdersRequest> generateUnitedOrdersRequest,
        boost::optional<std::shared_ptr<ReportFormatType>> format
    ) const;
    /// <summary>
    /// Получение заданного отчета
    /// </summary>
    /// <remarks>
    /// Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    /// </remarks>
    /// <param name="reportId">Идентификатор отчета, который вы получили после запуска генерации. </param>
    pplx::task<std::shared_ptr<GetReportInfoResponse>> getReportInfo(
        utility::string_t reportId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ReportsApi_H_ */

