/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChatsApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_ChatsApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_ChatsApi_H_



#include "ympa_cpp_restsdk_client/ApiClient.h"

#include "ympa_cpp_restsdk_client/model/ApiClientDataErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiForbiddenErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiLimitErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiNotFoundErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiServerErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/ApiUnauthorizedErrorResponse.h"
#include "ympa_cpp_restsdk_client/model/CreateChatRequest.h"
#include "ympa_cpp_restsdk_client/model/CreateChatResponse.h"
#include "ympa_cpp_restsdk_client/model/EmptyApiResponse.h"
#include "ympa_cpp_restsdk_client/model/GetChatHistoryRequest.h"
#include "ympa_cpp_restsdk_client/model/GetChatHistoryResponse.h"
#include "ympa_cpp_restsdk_client/model/GetChatsRequest.h"
#include "ympa_cpp_restsdk_client/model/GetChatsResponse.h"
#include "ympa_cpp_restsdk_client/HttpContent.h"
#include "ympa_cpp_restsdk_client/model/SendMessageToChatRequest.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  ChatsApi 
{
public:

    explicit ChatsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ChatsApi();

    /// <summary>
    /// Создание нового чата с покупателем
    /// </summary>
    /// <remarks>
    /// Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="createChatRequest">description</param>
    pplx::task<std::shared_ptr<CreateChatResponse>> createChat(
        int64_t businessId,
        std::shared_ptr<CreateChatRequest> createChatRequest
    ) const;
    /// <summary>
    /// Получение истории сообщений в чате
    /// </summary>
    /// <remarks>
    /// Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="chatId">Идентификатор чата.</param>
    /// <param name="getChatHistoryRequest">description</param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetChatHistoryResponse>> getChatHistory(
        int64_t businessId,
        int64_t chatId,
        std::shared_ptr<GetChatHistoryRequest> getChatHistoryRequest,
        boost::optional<utility::string_t> pageToken,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Получение доступных чатов
    /// </summary>
    /// <remarks>
    /// Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="getChatsRequest">description</param>
    /// <param name="pageToken">Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="limit">Количество значений на одной странице.  (optional, default to 0)</param>
    pplx::task<std::shared_ptr<GetChatsResponse>> getChats(
        int64_t businessId,
        std::shared_ptr<GetChatsRequest> getChatsRequest,
        boost::optional<utility::string_t> pageToken,
        boost::optional<int32_t> limit
    ) const;
    /// <summary>
    /// Отправка файла в чат
    /// </summary>
    /// <remarks>
    /// Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="chatId">Идентификатор чата.</param>
    /// <param name="file">Содержимое файла. Максимальный размер файла — 5 Мбайт.</param>
    pplx::task<std::shared_ptr<EmptyApiResponse>> sendFileToChat(
        int64_t businessId,
        int64_t chatId,
        std::shared_ptr<HttpContent> file
    ) const;
    /// <summary>
    /// Отправка сообщения в чат
    /// </summary>
    /// <remarks>
    /// Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    /// </remarks>
    /// <param name="businessId">Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) </param>
    /// <param name="chatId">Идентификатор чата.</param>
    /// <param name="sendMessageToChatRequest">description</param>
    pplx::task<std::shared_ptr<EmptyApiResponse>> sendMessageToChat(
        int64_t businessId,
        int64_t chatId,
        std::shared_ptr<SendMessageToChatRequest> sendMessageToChatRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_ChatsApi_H_ */

