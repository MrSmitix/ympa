/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  VerifyOrderEacRequest,
  SetOrderDeliveryDateRequest,
  UpdateOrderStorageLimitRequest,
  GetOrderBuyerInfoResponse,
  SetOrderDeliveryTrackCodeRequest,
  EmptyApiResponse,
  VerifyOrderEacResponse,
} from './models';

/**
 * getOrderBuyerInfo - parameters interface
 */
export interface IGetOrderBuyerInfoParams {
  campaignId: number;
  orderId: number;
}

/**
 * setOrderDeliveryDate - parameters interface
 */
export interface ISetOrderDeliveryDateParams {
  campaignId: number;
  orderId: number;
  setOrderDeliveryDateRequest: SetOrderDeliveryDateRequest;
}

/**
 * setOrderDeliveryTrackCode - parameters interface
 */
export interface ISetOrderDeliveryTrackCodeParams {
  campaignId: number;
  orderId: number;
  setOrderDeliveryTrackCodeRequest: SetOrderDeliveryTrackCodeRequest;
}

/**
 * updateOrderStorageLimit - parameters interface
 */
export interface IUpdateOrderStorageLimitParams {
  campaignId: number;
  orderId: number;
  updateOrderStorageLimitRequest: UpdateOrderStorageLimitRequest;
}

/**
 * verifyOrderEac - parameters interface
 */
export interface IVerifyOrderEacParams {
  campaignId: number;
  orderId: number;
  verifyOrderEacRequest: VerifyOrderEacRequest;
}

/**
 * OrderDeliveryApi - API class
 */
@autoinject()
export class OrderDeliveryApi extends Api {

  /**
   * Creates a new OrderDeliveryApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Информация о покупателе — физическом лице
   * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.orderId Идентификатор заказа.
   */
  async getOrderBuyerInfo(params: IGetOrderBuyerInfoParams): Promise<GetOrderBuyerInfoResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getOrderBuyerInfo', params, 'campaignId');
    this.ensureParamIsSet('getOrderBuyerInfo', params, 'orderId');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/orders/{orderId}/buyer`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'orderId'}}`, encodeURIComponent(`${params['orderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Изменение даты доставки заказа
   * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.orderId Идентификатор заказа.
   * @param params.setOrderDeliveryDateRequest 
   */
  async setOrderDeliveryDate(params: ISetOrderDeliveryDateParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('setOrderDeliveryDate', params, 'campaignId');
    this.ensureParamIsSet('setOrderDeliveryDate', params, 'orderId');
    this.ensureParamIsSet('setOrderDeliveryDate', params, 'setOrderDeliveryDateRequest');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/date`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'orderId'}}`, encodeURIComponent(`${params['orderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['setOrderDeliveryDateRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Передача трек‑номера посылки
   * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.orderId Идентификатор заказа.
   * @param params.setOrderDeliveryTrackCodeRequest 
   */
  async setOrderDeliveryTrackCode(params: ISetOrderDeliveryTrackCodeParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('setOrderDeliveryTrackCode', params, 'campaignId');
    this.ensureParamIsSet('setOrderDeliveryTrackCode', params, 'orderId');
    this.ensureParamIsSet('setOrderDeliveryTrackCode', params, 'setOrderDeliveryTrackCodeRequest');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/track`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'orderId'}}`, encodeURIComponent(`${params['orderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['setOrderDeliveryTrackCodeRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Продление срока хранения заказа
   * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.orderId Идентификатор заказа.
   * @param params.updateOrderStorageLimitRequest 
   */
  async updateOrderStorageLimit(params: IUpdateOrderStorageLimitParams): Promise<EmptyApiResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateOrderStorageLimit', params, 'campaignId');
    this.ensureParamIsSet('updateOrderStorageLimit', params, 'orderId');
    this.ensureParamIsSet('updateOrderStorageLimit', params, 'updateOrderStorageLimitRequest');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'orderId'}}`, encodeURIComponent(`${params['orderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updateOrderStorageLimitRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Передача кода подтверждения
   * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param params.campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.orderId Идентификатор заказа.
   * @param params.verifyOrderEacRequest 
   */
  async verifyOrderEac(params: IVerifyOrderEacParams): Promise<VerifyOrderEacResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('verifyOrderEac', params, 'campaignId');
    this.ensureParamIsSet('verifyOrderEac', params, 'orderId');
    this.ensureParamIsSet('verifyOrderEac', params, 'verifyOrderEacRequest');

    // Create URL to call
    const url = `${this.basePath}/campaigns/{campaignId}/orders/{orderId}/verifyEac`
      .replace(`{${'campaignId'}}`, encodeURIComponent(`${params['campaignId']}`))
      .replace(`{${'orderId'}}`, encodeURIComponent(`${params['orderId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['verifyOrderEacRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

