# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ympa_python_client.models.feedback_reaction_status_type import FeedbackReactionStatusType
from typing import Optional, Set
from typing_extensions import Self

class GetGoodsFeedbackRequest(BaseModel):
    """
    Фильтр запроса отзывов в кабинете. 
    """ # noqa: E501
    date_time_from: Optional[datetime] = Field(default=None, description="Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. ", alias="dateTimeFrom")
    date_time_to: Optional[datetime] = Field(default=None, description="Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. ", alias="dateTimeTo")
    reaction_status: Optional[FeedbackReactionStatusType] = Field(default=None, alias="reactionStatus")
    rating_values: Optional[Annotated[List[StrictInt], Field(max_length=5)]] = Field(default=None, description="Оценка товара.", alias="ratingValues")
    model_ids: Optional[Annotated[List[StrictInt], Field(max_length=20)]] = Field(default=None, description="Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). ", alias="modelIds")
    paid: Optional[StrictBool] = Field(default=None, description="Фильтр отзывов за баллы Плюса.")
    __properties: ClassVar[List[str]] = ["dateTimeFrom", "dateTimeTo", "reactionStatus", "ratingValues", "modelIds", "paid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetGoodsFeedbackRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if rating_values (nullable) is None
        # and model_fields_set contains the field
        if self.rating_values is None and "rating_values" in self.model_fields_set:
            _dict['ratingValues'] = None

        # set to None if model_ids (nullable) is None
        # and model_fields_set contains the field
        if self.model_ids is None and "model_ids" in self.model_fields_set:
            _dict['modelIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetGoodsFeedbackRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateTimeFrom": obj.get("dateTimeFrom"),
            "dateTimeTo": obj.get("dateTimeTo"),
            "reactionStatus": obj.get("reactionStatus"),
            "ratingValues": obj.get("ratingValues"),
            "modelIds": obj.get("modelIds"),
            "paid": obj.get("paid")
        })
        return _obj


