# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ympa_python_client.models.goods_feedback_description_dto import GoodsFeedbackDescriptionDTO
from ympa_python_client.models.goods_feedback_identifiers_dto import GoodsFeedbackIdentifiersDTO
from ympa_python_client.models.goods_feedback_media_dto import GoodsFeedbackMediaDTO
from ympa_python_client.models.goods_feedback_statistics_dto import GoodsFeedbackStatisticsDTO
from typing import Optional, Set
from typing_extensions import Self

class GoodsFeedbackDTO(BaseModel):
    """
    Отзыв о товаре.
    """ # noqa: E501
    feedback_id: StrictInt = Field(description="Идентификатор отзыва. ", alias="feedbackId")
    created_at: datetime = Field(description="Дата и время создания отзыва.", alias="createdAt")
    need_reaction: StrictBool = Field(description="Нужен ли ответ на отзыв.", alias="needReaction")
    identifiers: GoodsFeedbackIdentifiersDTO
    author: Optional[StrictStr] = Field(default=None, description="Имя автора отзыва.")
    description: Optional[GoodsFeedbackDescriptionDTO] = None
    media: Optional[GoodsFeedbackMediaDTO] = None
    statistics: GoodsFeedbackStatisticsDTO
    __properties: ClassVar[List[str]] = ["feedbackId", "createdAt", "needReaction", "identifiers", "author", "description", "media", "statistics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoodsFeedbackDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identifiers
        if self.identifiers:
            _dict['identifiers'] = self.identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of media
        if self.media:
            _dict['media'] = self.media.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoodsFeedbackDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "feedbackId": obj.get("feedbackId"),
            "createdAt": obj.get("createdAt"),
            "needReaction": obj.get("needReaction"),
            "identifiers": GoodsFeedbackIdentifiersDTO.from_dict(obj["identifiers"]) if obj.get("identifiers") is not None else None,
            "author": obj.get("author"),
            "description": GoodsFeedbackDescriptionDTO.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "media": GoodsFeedbackMediaDTO.from_dict(obj["media"]) if obj.get("media") is not None else None,
            "statistics": GoodsFeedbackStatisticsDTO.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None
        })
        return _obj


