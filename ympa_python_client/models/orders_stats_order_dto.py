# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ympa_python_client.models.order_stats_status_type import OrderStatsStatusType
from ympa_python_client.models.orders_stats_commission_dto import OrdersStatsCommissionDTO
from ympa_python_client.models.orders_stats_delivery_region_dto import OrdersStatsDeliveryRegionDTO
from ympa_python_client.models.orders_stats_item_dto import OrdersStatsItemDTO
from ympa_python_client.models.orders_stats_order_payment_type import OrdersStatsOrderPaymentType
from ympa_python_client.models.orders_stats_payment_dto import OrdersStatsPaymentDTO
from typing import Optional, Set
from typing_extensions import Self

class OrdersStatsOrderDTO(BaseModel):
    """
    Информация о заказе.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор заказа.")
    creation_date: Optional[date] = Field(default=None, description="Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. ", alias="creationDate")
    status_update_date: Optional[datetime] = Field(default=None, description="Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). ", alias="statusUpdateDate")
    status: Optional[OrderStatsStatusType] = None
    partner_order_id: Optional[StrictStr] = Field(default=None, description="Идентификатор заказа в информационной системе магазина.", alias="partnerOrderId")
    payment_type: Optional[OrdersStatsOrderPaymentType] = Field(default=None, alias="paymentType")
    fake: Optional[StrictBool] = Field(default=None, description="Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. ")
    delivery_region: Optional[OrdersStatsDeliveryRegionDTO] = Field(default=None, alias="deliveryRegion")
    items: List[OrdersStatsItemDTO] = Field(description="Список товаров в заказе после возможных изменений.")
    initial_items: Optional[List[OrdersStatsItemDTO]] = Field(default=None, description="Список товаров в заказе до изменений.", alias="initialItems")
    payments: List[OrdersStatsPaymentDTO] = Field(description="Информация о денежных переводах по заказу.")
    commissions: List[OrdersStatsCommissionDTO] = Field(description="Информация о комиссиях за заказ.")
    __properties: ClassVar[List[str]] = ["id", "creationDate", "statusUpdateDate", "status", "partnerOrderId", "paymentType", "fake", "deliveryRegion", "items", "initialItems", "payments", "commissions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrdersStatsOrderDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_region
        if self.delivery_region:
            _dict['deliveryRegion'] = self.delivery_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in initial_items (list)
        _items = []
        if self.initial_items:
            for _item_initial_items in self.initial_items:
                if _item_initial_items:
                    _items.append(_item_initial_items.to_dict())
            _dict['initialItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item_payments in self.payments:
                if _item_payments:
                    _items.append(_item_payments.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in commissions (list)
        _items = []
        if self.commissions:
            for _item_commissions in self.commissions:
                if _item_commissions:
                    _items.append(_item_commissions.to_dict())
            _dict['commissions'] = _items
        # set to None if initial_items (nullable) is None
        # and model_fields_set contains the field
        if self.initial_items is None and "initial_items" in self.model_fields_set:
            _dict['initialItems'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrdersStatsOrderDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "creationDate": obj.get("creationDate"),
            "statusUpdateDate": obj.get("statusUpdateDate"),
            "status": obj.get("status"),
            "partnerOrderId": obj.get("partnerOrderId"),
            "paymentType": obj.get("paymentType"),
            "fake": obj.get("fake"),
            "deliveryRegion": OrdersStatsDeliveryRegionDTO.from_dict(obj["deliveryRegion"]) if obj.get("deliveryRegion") is not None else None,
            "items": [OrdersStatsItemDTO.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "initialItems": [OrdersStatsItemDTO.from_dict(_item) for _item in obj["initialItems"]] if obj.get("initialItems") is not None else None,
            "payments": [OrdersStatsPaymentDTO.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "commissions": [OrdersStatsCommissionDTO.from_dict(_item) for _item in obj["commissions"]] if obj.get("commissions") is not None else None
        })
        return _obj


