# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from ympa_python_client.models.logistic_pickup_point_dto import LogisticPickupPointDTO
from ympa_python_client.models.recipient_type import RecipientType
from ympa_python_client.models.refund_status_type import RefundStatusType
from ympa_python_client.models.return_item_dto import ReturnItemDTO
from ympa_python_client.models.return_shipment_status_type import ReturnShipmentStatusType
from ympa_python_client.models.return_type import ReturnType
from typing import Optional, Set
from typing_extensions import Self

class ReturnDTO(BaseModel):
    """
    Возврат заказа.
    """ # noqa: E501
    id: Optional[StrictInt] = Field(default=None, description="Идентификатор возврата.")
    order_id: Optional[StrictInt] = Field(default=None, description="Номер заказа.", alias="orderId")
    creation_date: Optional[datetime] = Field(default=None, description="Дата создания возврата клиентом.", alias="creationDate")
    update_date: Optional[datetime] = Field(default=None, description="Дата обновления возврата.", alias="updateDate")
    refund_status: Optional[RefundStatusType] = Field(default=None, alias="refundStatus")
    logistic_pickup_point: Optional[LogisticPickupPointDTO] = Field(default=None, alias="logisticPickupPoint")
    shipment_recipient_type: Optional[RecipientType] = Field(default=None, alias="shipmentRecipientType")
    shipment_status: Optional[ReturnShipmentStatusType] = Field(default=None, alias="shipmentStatus")
    refund_amount: Optional[StrictInt] = Field(default=None, description="Сумма возврата.", alias="refundAmount")
    items: List[ReturnItemDTO] = Field(description="Список товаров в возврате.")
    return_type: Optional[ReturnType] = Field(default=None, alias="returnType")
    fast_return: Optional[StrictBool] = Field(default=None, description="Используется ли опция **Быстрый возврат денег за дешевый брак**. ", alias="fastReturn")
    __properties: ClassVar[List[str]] = ["id", "orderId", "creationDate", "updateDate", "refundStatus", "logisticPickupPoint", "shipmentRecipientType", "shipmentStatus", "refundAmount", "items", "returnType", "fastReturn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of logistic_pickup_point
        if self.logistic_pickup_point:
            _dict['logisticPickupPoint'] = self.logistic_pickup_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "orderId": obj.get("orderId"),
            "creationDate": obj.get("creationDate"),
            "updateDate": obj.get("updateDate"),
            "refundStatus": obj.get("refundStatus"),
            "logisticPickupPoint": LogisticPickupPointDTO.from_dict(obj["logisticPickupPoint"]) if obj.get("logisticPickupPoint") is not None else None,
            "shipmentRecipientType": obj.get("shipmentRecipientType"),
            "shipmentStatus": obj.get("shipmentStatus"),
            "refundAmount": obj.get("refundAmount"),
            "items": [ReturnItemDTO.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "returnType": obj.get("returnType"),
            "fastReturn": obj.get("fastReturn")
        })
        return _obj


