# coding: utf-8

"""
    Партнерский API Маркета

    API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 

    The version of the OpenAPI document: LATEST
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GenerateStocksOnWarehousesReportRequest(BaseModel):
    """
    Данные, необходимые для генерации отчета. 
    """ # noqa: E501
    campaign_id: StrictInt = Field(description="Идентификатор магазина.", alias="campaignId")
    warehouse_ids: Optional[List[StrictInt]] = Field(default=None, description="Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).", alias="warehouseIds")
    report_date: Optional[date] = Field(default=None, description="Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.", alias="reportDate")
    category_ids: Optional[List[StrictInt]] = Field(default=None, description="Фильтр по категориям на Маркете (кроме модели FBY).", alias="categoryIds")
    has_stocks: Optional[StrictBool] = Field(default=None, description="Фильтр по наличию остатков (кроме модели FBY).", alias="hasStocks")
    __properties: ClassVar[List[str]] = ["campaignId", "warehouseIds", "reportDate", "categoryIds", "hasStocks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateStocksOnWarehousesReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if warehouse_ids (nullable) is None
        # and model_fields_set contains the field
        if self.warehouse_ids is None and "warehouse_ids" in self.model_fields_set:
            _dict['warehouseIds'] = None

        # set to None if category_ids (nullable) is None
        # and model_fields_set contains the field
        if self.category_ids is None and "category_ids" in self.model_fields_set:
            _dict['categoryIds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateStocksOnWarehousesReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaignId": obj.get("campaignId"),
            "warehouseIds": obj.get("warehouseIds"),
            "reportDate": obj.get("reportDate"),
            "categoryIds": obj.get("categoryIds"),
            "hasStocks": obj.get("hasStocks")
        })
        return _obj


