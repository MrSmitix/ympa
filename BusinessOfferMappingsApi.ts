/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  UpdateOfferMappingsRequest,
  GetSuggestedOfferMappingsResponse,
  GetOfferMappingsRequest,
  GetOfferMappingsResponse,
  AddOffersToArchiveResponse,
  DeleteOffersRequest,
  DeleteOffersFromArchiveResponse,
  DeleteOffersFromArchiveRequest,
  DeleteOffersResponse,
  UpdateOfferMappingsResponse,
  AddOffersToArchiveRequest,
  GetSuggestedOfferMappingsRequest,
} from './models';

/**
 * addOffersToArchive - parameters interface
 */
export interface IAddOffersToArchiveParams {
  businessId: number;
  addOffersToArchiveRequest: AddOffersToArchiveRequest;
}

/**
 * deleteOffers - parameters interface
 */
export interface IDeleteOffersParams {
  businessId: number;
  deleteOffersRequest: DeleteOffersRequest;
}

/**
 * deleteOffersFromArchive - parameters interface
 */
export interface IDeleteOffersFromArchiveParams {
  businessId: number;
  deleteOffersFromArchiveRequest: DeleteOffersFromArchiveRequest;
}

/**
 * getOfferMappings - parameters interface
 */
export interface IGetOfferMappingsParams {
  businessId: number;
  pageToken?: string;
  limit?: number;
  getOfferMappingsRequest?: GetOfferMappingsRequest;
}

/**
 * getSuggestedOfferMappings - parameters interface
 */
export interface IGetSuggestedOfferMappingsParams {
  businessId: number;
  getSuggestedOfferMappingsRequest?: GetSuggestedOfferMappingsRequest;
}

/**
 * updateOfferMappings - parameters interface
 */
export interface IUpdateOfferMappingsParams {
  businessId: number;
  updateOfferMappingsRequest: UpdateOfferMappingsRequest;
}

/**
 * BusinessOfferMappingsApi - API class
 */
@autoinject()
export class BusinessOfferMappingsApi extends Api {

  /**
   * Creates a new BusinessOfferMappingsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Добавление товаров в архив
   * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.addOffersToArchiveRequest 
   */
  async addOffersToArchive(params: IAddOffersToArchiveParams): Promise<AddOffersToArchiveResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('addOffersToArchive', params, 'businessId');
    this.ensureParamIsSet('addOffersToArchive', params, 'addOffersToArchiveRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/offer-mappings/archive`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['addOffersToArchiveRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Удаление товаров из каталога
   * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.deleteOffersRequest 
   */
  async deleteOffers(params: IDeleteOffersParams): Promise<DeleteOffersResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteOffers', params, 'businessId');
    this.ensureParamIsSet('deleteOffers', params, 'deleteOffersRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/offer-mappings/delete`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['deleteOffersRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Удаление товаров из архива
   * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.deleteOffersFromArchiveRequest 
   */
  async deleteOffersFromArchive(params: IDeleteOffersFromArchiveParams): Promise<DeleteOffersFromArchiveResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('deleteOffersFromArchive', params, 'businessId');
    this.ensureParamIsSet('deleteOffersFromArchive', params, 'deleteOffersFromArchiveRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/offer-mappings/unarchive`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['deleteOffersFromArchiveRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Информация о товарах в каталоге
   * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
   * @param params.limit Количество значений на одной странице. 
   * @param params.getOfferMappingsRequest 
   */
  async getOfferMappings(params: IGetOfferMappingsParams): Promise<GetOfferMappingsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getOfferMappings', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/offer-mappings`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'page_token': params['pageToken'],
        'limit': params['limit'],
      })
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getOfferMappingsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Просмотр карточек на Маркете, которые подходят вашим товарам
   * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.getSuggestedOfferMappingsRequest 
   */
  async getSuggestedOfferMappings(params: IGetSuggestedOfferMappingsParams): Promise<GetSuggestedOfferMappingsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('getSuggestedOfferMappings', params, 'businessId');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/offer-mappings/suggestions`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['getSuggestedOfferMappingsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Добавление товаров в каталог и изменение информации о них
   * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
   * @param params.businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param params.updateOfferMappingsRequest 
   */
  async updateOfferMappings(params: IUpdateOfferMappingsParams): Promise<UpdateOfferMappingsResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('updateOfferMappings', params, 'businessId');
    this.ensureParamIsSet('updateOfferMappings', params, 'updateOfferMappingsRequest');

    // Create URL to call
    const url = `${this.basePath}/businesses/{businessId}/offer-mappings/update`
      .replace(`{${'businessId'}}`, encodeURIComponent(`${params['businessId']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['updateOfferMappingsRequest'] || {}))

      // Authentication 'OAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

