<?php
/**
 * GetWarehouseStocksRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetWarehouseStocksRequest model.
 *
 * Фильтры для запроса остатков.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetWarehouseStocksRequest  implements \JsonSerializable
{
        /**
     * **Только для модели FBY**  Возвращать ли информацию по оборачиваемости.  Значение по умолчанию — &#x60;false&#x60;. Если информация нужна, передайте значение &#x60;true&#x60;.
     *
     * @var bool|null
     * @SerializedName("withTurnover")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $withTurnover = false;

    /**
     * Фильтр по нахождению в архиве.  Передайте &#x60;true&#x60;, чтобы получить информацию об остатках товаров, которые находятся в архиве. Если фильтр не заполнен или передано &#x60;false&#x60;, в ответе возвращается информация о товарах, которые не находятся в архиве.
     *
     * @var bool|null
     * @SerializedName("archived")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $archived;

    /**
     * Фильтр по вашим SKU товаров.  Возвращается информация об остатках всех переданных SKU, включая товары в архиве.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60; * &#x60;archived&#x60;  {% endnote %}   
     *
     * @var string[]|null
     * @SerializedName("offerIds")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 500
     * )
     */
    public ?array $offerIds;

    /**
     * Constructor
     *
     * @param bool|null $withTurnover
     * @param bool|null $archived
     * @param string[]|null $offerIds
     */
    public function __construct(?bool $withTurnover, ?bool $archived, ?array $offerIds)
    {
        $this->withTurnover = $withTurnover;
        $this->archived = $archived;
        $this->offerIds = $offerIds;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['withTurnover'] ?? null, 
            $data['archived'] ?? null, 
            $data['offerIds'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'withTurnover' => $this->withTurnover, 
            'archived' => $this->archived, 
            'offerIds' => $this->offerIds, 
        ];
    }
}


