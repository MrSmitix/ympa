<?php
/**
 * BaseCampaignOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BaseCampaignOfferDTO model.
 *
 * Информация о новой цене на товар.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class BaseCampaignOfferDTO 
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $offerId = null;

    /**
     * @var QuantumDTO|null
     * @SerializedName("quantum")
     * @Type("OpenAPI\Server\Model\QuantumDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\QuantumDTO")]
    protected ?QuantumDTO $quantum = null;

    /**
     * Есть ли товар в продаже.
     *
     * @var bool|null
     * @SerializedName("available")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $available = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->offerId = array_key_exists('offerId', $data) ? $data['offerId'] : $this->offerId;
            $this->quantum = array_key_exists('quantum', $data) ? $data['quantum'] : $this->quantum;
            $this->available = array_key_exists('available', $data) ? $data['available'] : $this->available;
        }
    }

    /**
     * Gets offerId.
     *
     * @return string|null
     */
    public function getOfferId(): ?string
    {
        return $this->offerId;
    }

    /**
    * Sets offerId.
    *
    * @param string|null $offerId  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setOfferId(?string $offerId): self
    {
        $this->offerId = $offerId;

        return $this;
    }




    /**
     * Gets quantum.
     *
     * @return QuantumDTO|null
     */
    public function getQuantum(): ?QuantumDTO
    {
        return $this->quantum;
    }

    /**
    * Sets quantum.
    *
    * @param QuantumDTO|null $quantum
    *
    * @return $this
    */
    public function setQuantum(?QuantumDTO $quantum = null): self
    {
        $this->quantum = $quantum;

        return $this;
    }




    /**
     * Gets available.
     *
     * @return bool|null
     */
    public function isAvailable(): ?bool
    {
        return $this->available;
    }

    /**
    * Sets available.
    *
    * @param bool|null $available  Есть ли товар в продаже.
    *
    * @return $this
    */
    public function setAvailable(?bool $available = null): self
    {
        $this->available = $available;

        return $this;
    }



}


