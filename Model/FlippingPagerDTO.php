<?php
/**
 * FlippingPagerDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FlippingPagerDTO model.
 *
 * Модель для пагинации.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FlippingPagerDTO 
{
        /**
     * Сколько всего найдено элементов.
     *
     * @var int|null
     * @SerializedName("total")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $total = null;

    /**
     * Начальный номер найденного элемента на странице.
     *
     * @var int|null
     * @SerializedName("from")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $from = null;

    /**
     * Конечный номер найденного элемента на странице.
     *
     * @var int|null
     * @SerializedName("to")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $to = null;

    /**
     * Текущая страница.
     *
     * @var int|null
     * @SerializedName("currentPage")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $currentPage = null;

    /**
     * Общее количество страниц.
     *
     * @var int|null
     * @SerializedName("pagesCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $pagesCount = null;

    /**
     * Размер страницы.
     *
     * @var int|null
     * @SerializedName("pageSize")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $pageSize = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->total = array_key_exists('total', $data) ? $data['total'] : $this->total;
            $this->from = array_key_exists('from', $data) ? $data['from'] : $this->from;
            $this->to = array_key_exists('to', $data) ? $data['to'] : $this->to;
            $this->currentPage = array_key_exists('currentPage', $data) ? $data['currentPage'] : $this->currentPage;
            $this->pagesCount = array_key_exists('pagesCount', $data) ? $data['pagesCount'] : $this->pagesCount;
            $this->pageSize = array_key_exists('pageSize', $data) ? $data['pageSize'] : $this->pageSize;
        }
    }

    /**
     * Gets total.
     *
     * @return int|null
     */
    public function getTotal(): ?int
    {
        return $this->total;
    }

    /**
    * Sets total.
    *
    * @param int|null $total  Сколько всего найдено элементов.
    *
    * @return $this
    */
    public function setTotal(?int $total = null): self
    {
        $this->total = $total;

        return $this;
    }




    /**
     * Gets from.
     *
     * @return int|null
     */
    public function getFrom(): ?int
    {
        return $this->from;
    }

    /**
    * Sets from.
    *
    * @param int|null $from  Начальный номер найденного элемента на странице.
    *
    * @return $this
    */
    public function setFrom(?int $from = null): self
    {
        $this->from = $from;

        return $this;
    }




    /**
     * Gets to.
     *
     * @return int|null
     */
    public function getTo(): ?int
    {
        return $this->to;
    }

    /**
    * Sets to.
    *
    * @param int|null $to  Конечный номер найденного элемента на странице.
    *
    * @return $this
    */
    public function setTo(?int $to = null): self
    {
        $this->to = $to;

        return $this;
    }




    /**
     * Gets currentPage.
     *
     * @return int|null
     */
    public function getCurrentPage(): ?int
    {
        return $this->currentPage;
    }

    /**
    * Sets currentPage.
    *
    * @param int|null $currentPage  Текущая страница.
    *
    * @return $this
    */
    public function setCurrentPage(?int $currentPage = null): self
    {
        $this->currentPage = $currentPage;

        return $this;
    }




    /**
     * Gets pagesCount.
     *
     * @return int|null
     */
    public function getPagesCount(): ?int
    {
        return $this->pagesCount;
    }

    /**
    * Sets pagesCount.
    *
    * @param int|null $pagesCount  Общее количество страниц.
    *
    * @return $this
    */
    public function setPagesCount(?int $pagesCount = null): self
    {
        $this->pagesCount = $pagesCount;

        return $this;
    }




    /**
     * Gets pageSize.
     *
     * @return int|null
     */
    public function getPageSize(): ?int
    {
        return $this->pageSize;
    }

    /**
    * Sets pageSize.
    *
    * @param int|null $pageSize  Размер страницы.
    *
    * @return $this
    */
    public function setPageSize(?int $pageSize = null): self
    {
        $this->pageSize = $pageSize;

        return $this;
    }



}


