<?php
/**
 * FlippingPagerDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the FlippingPagerDTO model.
 *
 * Модель для пагинации.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class FlippingPagerDTO  implements \JsonSerializable
{
        /**
     * Сколько всего найдено элементов.
     *
     * @var int|null
     * @SerializedName("total")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $total;

    /**
     * Начальный номер найденного элемента на странице.
     *
     * @var int|null
     * @SerializedName("from")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $from;

    /**
     * Конечный номер найденного элемента на странице.
     *
     * @var int|null
     * @SerializedName("to")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $to;

    /**
     * Текущая страница.
     *
     * @var int|null
     * @SerializedName("currentPage")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $currentPage;

    /**
     * Общее количество страниц.
     *
     * @var int|null
     * @SerializedName("pagesCount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $pagesCount;

    /**
     * Размер страницы.
     *
     * @var int|null
     * @SerializedName("pageSize")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $pageSize;

    /**
     * Constructor
     *
     * @param int|null $total
     * @param int|null $from
     * @param int|null $to
     * @param int|null $currentPage
     * @param int|null $pagesCount
     * @param int|null $pageSize
     */
    public function __construct(?int $total, ?int $from, ?int $to, ?int $currentPage, ?int $pagesCount, ?int $pageSize)
    {
        $this->total = $total;
        $this->from = $from;
        $this->to = $to;
        $this->currentPage = $currentPage;
        $this->pagesCount = $pagesCount;
        $this->pageSize = $pageSize;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['total'] ?? null, 
            $data['from'] ?? null, 
            $data['to'] ?? null, 
            $data['currentPage'] ?? null, 
            $data['pagesCount'] ?? null, 
            $data['pageSize'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'total' => $this->total, 
            'from' => $this->from, 
            'to' => $this->to, 
            'currentPage' => $this->currentPage, 
            'pagesCount' => $this->pagesCount, 
            'pageSize' => $this->pageSize, 
        ];
    }
}


