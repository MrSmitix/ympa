<?php
/**
 * OrderItemModificationDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderItemModificationDTO model.
 *
 * Список товаров в заказе.  Если магазин не передал информацию о товаре во входных данных, он будет удален из заказа.  Обязательный параметр.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderItemModificationDTO  implements \JsonSerializable
{
        /**
     * Идентификатор товара в рамках заказа.  Получить идентификатор можно с помощью ресурсов [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md) или [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  Обязательный параметр.
     *
     * @var int
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $id;

    /**
     * Новое количество товара.
     *
     * @var int
     * @SerializedName("count")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     */
    public int $count;

    /**
     * Информация о маркировке единиц товара.  Передавайте в запросе все единицы товара, который подлежит маркировке.  Обязательный параметр, если в заказе есть товары, подлежащие маркировке [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     *
     * @var BriefOrderItemInstanceDTO[]|null
     * @SerializedName("instances")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\BriefOrderItemInstanceDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\BriefOrderItemInstanceDTO>")
     */
    public ?array $instances;

    /**
     * Constructor
     *
     * @param int $id
     * @param int $count
     * @param BriefOrderItemInstanceDTO[]|null $instances
     */
    public function __construct(int $id, int $count, ?array $instances)
    {
        $this->id = $id;
        $this->count = $count;
        $this->instances = $instances;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['count'] ?? null, 
            isset($data['instances']) ? array_map(fn($item) => BriefOrderItemInstanceDTO::fromArray($item), $data['instances']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'count' => $this->count, 
            'instances' => $this->instances, 
        ];
    }
}


