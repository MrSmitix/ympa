<?php
/**
 * GetOfferRecommendationsRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetOfferRecommendationsRequest model.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetOfferRecommendationsRequest  implements \JsonSerializable
{
        /**
     * Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
     *
     * @var string[]|null
     * @SerializedName("offerIds")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $offerIds;

    /**
     * @var FieldStateType|null
     * @SerializedName("cofinancePriceFilter")
        * @Accessor(getter="getSerializedCofinancePriceFilter")
        * @Type("string")
     */
    public ?FieldStateType $cofinancePriceFilter;

    /**
     * @var FieldStateType|null
     * @SerializedName("recommendedCofinancePriceFilter")
        * @Accessor(getter="getSerializedRecommendedCofinancePriceFilter")
        * @Type("string")
     */
    public ?FieldStateType $recommendedCofinancePriceFilter;

    /**
     * @var PriceCompetitivenessType|null
     * @SerializedName("competitivenessFilter")
        * @Accessor(getter="getSerializedCompetitivenessFilter")
        * @Type("string")
     */
    public ?PriceCompetitivenessType $competitivenessFilter;

    /**
     * Constructor
     *
     * @param string[]|null $offerIds
     * @param FieldStateType|null $cofinancePriceFilter
     * @param FieldStateType|null $recommendedCofinancePriceFilter
     * @param PriceCompetitivenessType|null $competitivenessFilter
     */
    public function __construct(?array $offerIds, ?FieldStateType $cofinancePriceFilter, ?FieldStateType $recommendedCofinancePriceFilter, ?PriceCompetitivenessType $competitivenessFilter)
    {
        $this->offerIds = $offerIds;
        $this->cofinancePriceFilter = $cofinancePriceFilter;
        $this->recommendedCofinancePriceFilter = $recommendedCofinancePriceFilter;
        $this->competitivenessFilter = $competitivenessFilter;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerIds'] ?? null, 
            isset($data['cofinancePriceFilter']) ? FieldStateType::tryFrom($data['cofinancePriceFilter']) : null, 
            isset($data['recommendedCofinancePriceFilter']) ? FieldStateType::tryFrom($data['recommendedCofinancePriceFilter']) : null, 
            isset($data['competitivenessFilter']) ? PriceCompetitivenessType::tryFrom($data['competitivenessFilter']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerIds' => $this->offerIds, 
            'cofinancePriceFilter' => $this->cofinancePriceFilter, 
            'recommendedCofinancePriceFilter' => $this->recommendedCofinancePriceFilter, 
            'competitivenessFilter' => $this->competitivenessFilter, 
        ];
    }
}


