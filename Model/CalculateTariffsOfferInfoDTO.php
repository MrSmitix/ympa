<?php
/**
 * CalculateTariffsOfferInfoDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the CalculateTariffsOfferInfoDTO model.
 *
 * Стоимость услуг.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class CalculateTariffsOfferInfoDTO  implements \JsonSerializable
{
        /**
     * @var CalculateTariffsOfferDTO
     * @SerializedName("offer")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\CalculateTariffsOfferDTO")
     * @Type("\OpenAPIServer\Model\CalculateTariffsOfferDTO")
     */
    public CalculateTariffsOfferDTO $offer;

    /**
     * Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).
     *
     * @var CalculatedTariffDTO[]
     * @SerializedName("tariffs")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\CalculatedTariffDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\CalculatedTariffDTO>")
     */
    public array $tariffs;

    /**
     * Constructor
     *
     * @param CalculateTariffsOfferDTO $offer
     * @param CalculatedTariffDTO[] $tariffs
     */
    public function __construct(CalculateTariffsOfferDTO $offer, array $tariffs)
    {
        $this->offer = $offer;
        $this->tariffs = $tariffs;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            isset($data['offer']) ? CalculateTariffsOfferDTO::fromArray($data['offer']) : null, 
            isset($data['tariffs']) ? array_map(fn($item) => CalculatedTariffDTO::fromArray($item), $data['tariffs']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offer' => $this->offer, 
            'tariffs' => $this->tariffs, 
        ];
    }
}


