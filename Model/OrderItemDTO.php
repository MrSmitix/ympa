<?php
/**
 * OrderItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderItemDTO model.
 *
 * Список товаров в заказе.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderItemDTO  implements \JsonSerializable
{
        /**
     * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $offerId;

    /**
     * Название товара.
     *
     * @var string|null
     * @SerializedName("offerName")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $offerName;

    /**
     * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;).
     *
     * @var float|null
     * @SerializedName("price")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $price;

    /**
     * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.
     *
     * @var float|null
     * @SerializedName("buyerPrice")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $buyerPrice;

    /**
     * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам.
     *
     * @var float|null
     * @SerializedName("buyerPriceBeforeDiscount")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $buyerPriceBeforeDiscount;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.
     *
     * @var float|null
     * @SerializedName("priceBeforeDiscount")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $priceBeforeDiscount;

    /**
     * Количество единиц товара.
     *
     * @var int|null
     * @SerializedName("count")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $count;

    /**
     * @var OrderVatType|null
     * @SerializedName("vat")
        * @Accessor(getter="getSerializedVat")
        * @Type("string")
     */
    public ?OrderVatType $vat;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $shopSku;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.
     *
     * @var float|null
     * @SerializedName("subsidy")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $subsidy;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.
     *
     * @var string|null
     * @SerializedName("partnerWarehouseId")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $partnerWarehouseId;

    /**
     * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
     *
     * @var OrderItemPromoDTO[]|null
     * @SerializedName("promos")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemPromoDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderItemPromoDTO>")
     */
    public ?array $promos;

    /**
     * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует.
     *
     * @var OrderItemInstanceDTO[]|null
     * @SerializedName("instances")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemInstanceDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderItemInstanceDTO>")
     */
    public ?array $instances;

    /**
     * Информация об удалении товара из заказа.
     *
     * @var OrderItemDetailDTO[]|null
     * @SerializedName("details")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemDetailDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderItemDetailDTO>")
     */
    public ?array $details;

    /**
     * Список субсидий по типам.
     *
     * @var OrderItemSubsidyDTO[]|null
     * @SerializedName("subsidies")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemSubsidyDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderItemSubsidyDTO>")
     */
    public ?array $subsidies;

    /**
     * Список необходимых маркировок товара.
     *
     * @var OrderItemInstanceType[]|null
     * @SerializedName("requiredInstanceTypes")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemInstanceType")
     * })
     * @Accessor(getter="getSerializedRequiredInstanceTypes")
     * @Type("array<string>")
     */
    public ?array $requiredInstanceTypes;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param string|null $offerId
     * @param string|null $offerName
     * @param float|null $price
     * @param float|null $buyerPrice
     * @param float|null $buyerPriceBeforeDiscount
     * @param float|null $priceBeforeDiscount
     * @param int|null $count
     * @param OrderVatType|null $vat
     * @param string|null $shopSku
     * @param float|null $subsidy
     * @param string|null $partnerWarehouseId
     * @param OrderItemPromoDTO[]|null $promos
     * @param OrderItemInstanceDTO[]|null $instances
     * @param OrderItemDetailDTO[]|null $details
     * @param OrderItemSubsidyDTO[]|null $subsidies
     * @param OrderItemInstanceType[]|null $requiredInstanceTypes
     */
    public function __construct(?int $id, ?string $offerId, ?string $offerName, ?float $price, ?float $buyerPrice, ?float $buyerPriceBeforeDiscount, ?float $priceBeforeDiscount, ?int $count, ?OrderVatType $vat, ?string $shopSku, ?float $subsidy, ?string $partnerWarehouseId, ?array $promos, ?array $instances, ?array $details, ?array $subsidies, ?array $requiredInstanceTypes)
    {
        $this->id = $id;
        $this->offerId = $offerId;
        $this->offerName = $offerName;
        $this->price = $price;
        $this->buyerPrice = $buyerPrice;
        $this->buyerPriceBeforeDiscount = $buyerPriceBeforeDiscount;
        $this->priceBeforeDiscount = $priceBeforeDiscount;
        $this->count = $count;
        $this->vat = $vat;
        $this->shopSku = $shopSku;
        $this->subsidy = $subsidy;
        $this->partnerWarehouseId = $partnerWarehouseId;
        $this->promos = $promos;
        $this->instances = $instances;
        $this->details = $details;
        $this->subsidies = $subsidies;
        $this->requiredInstanceTypes = $requiredInstanceTypes;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['offerId'] ?? null, 
            $data['offerName'] ?? null, 
            $data['price'] ?? null, 
            $data['buyerPrice'] ?? null, 
            $data['buyerPriceBeforeDiscount'] ?? null, 
            $data['priceBeforeDiscount'] ?? null, 
            $data['count'] ?? null, 
            isset($data['vat']) ? OrderVatType::tryFrom($data['vat']) : null, 
            $data['shopSku'] ?? null, 
            $data['subsidy'] ?? null, 
            $data['partnerWarehouseId'] ?? null, 
            isset($data['promos']) ? array_map(fn($item) => OrderItemPromoDTO::fromArray($item), $data['promos']) : null, 
            isset($data['instances']) ? array_map(fn($item) => OrderItemInstanceDTO::fromArray($item), $data['instances']) : null, 
            isset($data['details']) ? array_map(fn($item) => OrderItemDetailDTO::fromArray($item), $data['details']) : null, 
            isset($data['subsidies']) ? array_map(fn($item) => OrderItemSubsidyDTO::fromArray($item), $data['subsidies']) : null, 
            isset($data['requiredInstanceTypes']) ? array_map(fn($item) => OrderItemInstanceType::tryFrom($item), $data['requiredInstanceTypes']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'offerId' => $this->offerId, 
            'offerName' => $this->offerName, 
            'price' => $this->price, 
            'buyerPrice' => $this->buyerPrice, 
            'buyerPriceBeforeDiscount' => $this->buyerPriceBeforeDiscount, 
            'priceBeforeDiscount' => $this->priceBeforeDiscount, 
            'count' => $this->count, 
            'vat' => $this->vat, 
            'shopSku' => $this->shopSku, 
            'subsidy' => $this->subsidy, 
            'partnerWarehouseId' => $this->partnerWarehouseId, 
            'promos' => $this->promos, 
            'instances' => $this->instances, 
            'details' => $this->details, 
            'subsidies' => $this->subsidies, 
            'requiredInstanceTypes' => $this->requiredInstanceTypes, 
        ];
    }
}


