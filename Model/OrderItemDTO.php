<?php
/**
 * OrderItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrderItemDTO model.
 *
 * Список товаров в заказе.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrderItemDTO 
{
        /**
     * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $offerId = null;

    /**
     * Название товара.
     *
     * @var string|null
     * @SerializedName("offerName")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $offerName = null;

    /**
     * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;).
     *
     * @var float|null
     * @SerializedName("price")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $price = null;

    /**
     * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.
     *
     * @var float|null
     * @SerializedName("buyerPrice")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $buyerPrice = null;

    /**
     * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам.
     *
     * @var float|null
     * @SerializedName("buyerPriceBeforeDiscount")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $buyerPriceBeforeDiscount = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.
     *
     * @var float|null
     * @SerializedName("priceBeforeDiscount")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $priceBeforeDiscount = null;

    /**
     * Количество единиц товара.
     *
     * @var int|null
     * @SerializedName("count")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $count = null;

    /**
     * @var OrderVatType|null
     * @SerializedName("vat")
    * @Accessor(getter="getSerializedVat", setter="setDeserializedVat")
    * @Type("string")
    */
    protected ?OrderVatType $vat = null;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $shopSku = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.
     *
     * @var float|null
     * @SerializedName("subsidy")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $subsidy = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.
     *
     * @var string|null
     * @SerializedName("partnerWarehouseId")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $partnerWarehouseId = null;

    /**
     * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
     *
     * @var OrderItemPromoDTO[]|null
     * @SerializedName("promos")
     * @Type("array<OpenAPI\Server\Model\OrderItemPromoDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderItemPromoDTO"),
    ])]
    protected ?array $promos = null;

    /**
     * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует.
     *
     * @var OrderItemInstanceDTO[]|null
     * @SerializedName("instances")
     * @Type("array<OpenAPI\Server\Model\OrderItemInstanceDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderItemInstanceDTO"),
    ])]
    protected ?array $instances = null;

    /**
     * Информация об удалении товара из заказа.
     *
     * @var OrderItemDetailDTO[]|null
     * @SerializedName("details")
     * @Type("array<OpenAPI\Server\Model\OrderItemDetailDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderItemDetailDTO"),
    ])]
    protected ?array $details = null;

    /**
     * Список субсидий по типам.
     *
     * @var OrderItemSubsidyDTO[]|null
     * @SerializedName("subsidies")
     * @Type("array<OpenAPI\Server\Model\OrderItemSubsidyDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderItemSubsidyDTO"),
    ])]
    protected ?array $subsidies = null;

    /**
     * Список необходимых маркировок товара.
     *
     * @var OrderItemInstanceType[]|null
     * @SerializedName("requiredInstanceTypes")
     * @Accessor(getter="getSerializedRequiredInstanceTypes", setter="setDeserializedRequiredInstanceTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderItemInstanceType"),
    ])]
    protected ?array $requiredInstanceTypes = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->offerId = array_key_exists('offerId', $data) ? $data['offerId'] : $this->offerId;
            $this->offerName = array_key_exists('offerName', $data) ? $data['offerName'] : $this->offerName;
            $this->price = array_key_exists('price', $data) ? $data['price'] : $this->price;
            $this->buyerPrice = array_key_exists('buyerPrice', $data) ? $data['buyerPrice'] : $this->buyerPrice;
            $this->buyerPriceBeforeDiscount = array_key_exists('buyerPriceBeforeDiscount', $data) ? $data['buyerPriceBeforeDiscount'] : $this->buyerPriceBeforeDiscount;
            $this->priceBeforeDiscount = array_key_exists('priceBeforeDiscount', $data) ? $data['priceBeforeDiscount'] : $this->priceBeforeDiscount;
            $this->count = array_key_exists('count', $data) ? $data['count'] : $this->count;
            $this->vat = array_key_exists('vat', $data) ? $data['vat'] : $this->vat;
            $this->shopSku = array_key_exists('shopSku', $data) ? $data['shopSku'] : $this->shopSku;
            $this->subsidy = array_key_exists('subsidy', $data) ? $data['subsidy'] : $this->subsidy;
            $this->partnerWarehouseId = array_key_exists('partnerWarehouseId', $data) ? $data['partnerWarehouseId'] : $this->partnerWarehouseId;
            $this->promos = array_key_exists('promos', $data) ? $data['promos'] : $this->promos;
            $this->instances = array_key_exists('instances', $data) ? $data['instances'] : $this->instances;
            $this->details = array_key_exists('details', $data) ? $data['details'] : $this->details;
            $this->subsidies = array_key_exists('subsidies', $data) ? $data['subsidies'] : $this->subsidies;
            $this->requiredInstanceTypes = array_key_exists('requiredInstanceTypes', $data) ? $data['requiredInstanceTypes'] : $this->requiredInstanceTypes;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets offerId.
     *
     * @return string|null
     */
    public function getOfferId(): ?string
    {
        return $this->offerId;
    }

    /**
    * Sets offerId.
    *
    * @param string|null $offerId  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setOfferId(?string $offerId = null): self
    {
        $this->offerId = $offerId;

        return $this;
    }




    /**
     * Gets offerName.
     *
     * @return string|null
     */
    public function getOfferName(): ?string
    {
        return $this->offerName;
    }

    /**
    * Sets offerName.
    *
    * @param string|null $offerName  Название товара.
    *
    * @return $this
    */
    public function setOfferName(?string $offerName = null): self
    {
        $this->offerName = $offerName;

        return $this;
    }




    /**
     * Gets price.
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->price;
    }

    /**
    * Sets price.
    *
    * @param float|null $price  Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`).
    *
    * @return $this
    */
    public function setPrice(?float $price = null): self
    {
        $this->price = $price;

        return $this;
    }




    /**
     * Gets buyerPrice.
     *
     * @return float|null
     */
    public function getBuyerPrice(): ?float
    {
        return $this->buyerPrice;
    }

    /**
    * Sets buyerPrice.
    *
    * @param float|null $buyerPrice  Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам.
    *
    * @return $this
    */
    public function setBuyerPrice(?float $buyerPrice = null): self
    {
        $this->buyerPrice = $buyerPrice;

        return $this;
    }




    /**
     * Gets buyerPriceBeforeDiscount.
     *
     * @return float|null
     */
    public function getBuyerPriceBeforeDiscount(): ?float
    {
        return $this->buyerPriceBeforeDiscount;
    }

    /**
    * Sets buyerPriceBeforeDiscount.
    *
    * @param float|null $buyerPriceBeforeDiscount  Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам.
    *
    * @return $this
    */
    public function setBuyerPriceBeforeDiscount(?float $buyerPriceBeforeDiscount = null): self
    {
        $this->buyerPriceBeforeDiscount = $buyerPriceBeforeDiscount;

        return $this;
    }




    /**
     * Gets priceBeforeDiscount.
     *
     * @return float|null
     */
    public function getPriceBeforeDiscount(): ?float
    {
        return $this->priceBeforeDiscount;
    }

    /**
    * Sets priceBeforeDiscount.
    *
    * @param float|null $priceBeforeDiscount  {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок.
    *
    * @return $this
    */
    public function setPriceBeforeDiscount(?float $priceBeforeDiscount = null): self
    {
        $this->priceBeforeDiscount = $priceBeforeDiscount;

        return $this;
    }




    /**
     * Gets count.
     *
     * @return int|null
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
    * Sets count.
    *
    * @param int|null $count  Количество единиц товара.
    *
    * @return $this
    */
    public function setCount(?int $count = null): self
    {
        $this->count = $count;

        return $this;
    }




    /**
     * Gets vat.
     *
     * @return OrderVatType|null
     */
    public function getVat(): ?OrderVatType
    {
        return $this->vat;
    }

    /**
    * Sets vat.
    *
    * @param OrderVatType|null $vat
    *
    * @return $this
    */
    public function setVat(?OrderVatType $vat = null): self
    {
        $this->vat = $vat;

        return $this;
    }

    /**
    * Gets vat for serialization.
    *
    * @return string|null
    */
    public function getSerializedVat(): string|null
    {
        return $this->vat?->value ? (string) $this->vat->value : null;
    }

    /**
    * Sets vat.
    *
    * @param string|OrderVatType|null $vat
    *
    * @return $this
    */
    public function setDeserializedVat(string|OrderVatType|null $vat = null): self
    {
        if (is_string($vat)) {
            $vat = OrderVatType::tryFrom($vat);
        }

        $this->vat = $vat;

        return $this;
    }



    /**
     * Gets shopSku.
     *
     * @return string|null
     */
    public function getShopSku(): ?string
    {
        return $this->shopSku;
    }

    /**
    * Sets shopSku.
    *
    * @param string|null $shopSku  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setShopSku(?string $shopSku = null): self
    {
        $this->shopSku = $shopSku;

        return $this;
    }




    /**
     * Gets subsidy.
     *
     * @return float|null
     */
    public function getSubsidy(): ?float
    {
        return $this->subsidy;
    }

    /**
    * Sets subsidy.
    *
    * @param float|null $subsidy  {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа.
    *
    * @return $this
    */
    public function setSubsidy(?float $subsidy = null): self
    {
        $this->subsidy = $subsidy;

        return $this;
    }




    /**
     * Gets partnerWarehouseId.
     *
     * @return string|null
     */
    public function getPartnerWarehouseId(): ?string
    {
        return $this->partnerWarehouseId;
    }

    /**
    * Sets partnerWarehouseId.
    *
    * @param string|null $partnerWarehouseId  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ.
    *
    * @return $this
    */
    public function setPartnerWarehouseId(?string $partnerWarehouseId = null): self
    {
        $this->partnerWarehouseId = $partnerWarehouseId;

        return $this;
    }




    /**
     * Gets promos.
     *
     * @return OrderItemPromoDTO[]|null
     */
    public function getPromos(): ?array
    {
        return $this->promos;
    }

    /**
    * Sets promos.
    *
    * @param OrderItemPromoDTO[]|null $promos  Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    *
    * @return $this
    */
    public function setPromos(?array $promos = null): self
    {
        $this->promos = $promos;

        return $this;
    }




    /**
     * Gets instances.
     *
     * @return OrderItemInstanceDTO[]|null
     */
    public function getInstances(): ?array
    {
        return $this->instances;
    }

    /**
    * Sets instances.
    *
    * @param OrderItemInstanceDTO[]|null $instances  Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует.
    *
    * @return $this
    */
    public function setInstances(?array $instances = null): self
    {
        $this->instances = $instances;

        return $this;
    }




    /**
     * Gets details.
     *
     * @return OrderItemDetailDTO[]|null
     */
    public function getDetails(): ?array
    {
        return $this->details;
    }

    /**
    * Sets details.
    *
    * @param OrderItemDetailDTO[]|null $details  Информация об удалении товара из заказа.
    *
    * @return $this
    */
    public function setDetails(?array $details = null): self
    {
        $this->details = $details;

        return $this;
    }




    /**
     * Gets subsidies.
     *
     * @return OrderItemSubsidyDTO[]|null
     */
    public function getSubsidies(): ?array
    {
        return $this->subsidies;
    }

    /**
    * Sets subsidies.
    *
    * @param OrderItemSubsidyDTO[]|null $subsidies  Список субсидий по типам.
    *
    * @return $this
    */
    public function setSubsidies(?array $subsidies = null): self
    {
        $this->subsidies = $subsidies;

        return $this;
    }




    /**
     * Gets requiredInstanceTypes.
     *
     * @return OrderItemInstanceType[]|null
     */
    public function getRequiredInstanceTypes(): ?array
    {
        return $this->requiredInstanceTypes;
    }

    /**
    * Sets requiredInstanceTypes.
    *
    * @param OrderItemInstanceType[]|null $requiredInstanceTypes  Список необходимых маркировок товара.
    *
    * @return $this
    */
    public function setRequiredInstanceTypes(?array $requiredInstanceTypes = null): self
    {
        $this->requiredInstanceTypes = $requiredInstanceTypes;

        return $this;
    }


    /**
    * Gets requiredInstanceTypes for serialization.
    *
    * @return array
    */
    public function getSerializedRequiredInstanceTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->requiredInstanceTypes ?? []
        );
    }

    /**
    * Sets requiredInstanceTypes.
    *
    * @param ?array $requiredInstanceTypes
    *
    * @return $this
    */
    public function setDeserializedRequiredInstanceTypes(?array $requiredInstanceTypes = []): self
    {
        $this->requiredInstanceTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = OrderItemInstanceType::tryFrom($value);
                }

                return $value;
            },
            $requiredInstanceTypes ?? []
        );

        return $this;
    }

}


