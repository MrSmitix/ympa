<?php
/**
 * UpdateOfferContentResultDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the UpdateOfferContentResultDTO model.
 *
 * Ошибки и предупреждения, которые появились из-за переданных характеристик.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class UpdateOfferContentResultDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("offerId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $offerId;

    /**
     * Ошибки — информация в каталоге не обновится.
     *
     * @var OfferContentErrorDTO[]|null
     * @SerializedName("errors")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferContentErrorDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferContentErrorDTO>")
     */
    public ?array $errors;

    /**
     * Предупреждения — информация в каталоге обновится.
     *
     * @var OfferContentErrorDTO[]|null
     * @SerializedName("warnings")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferContentErrorDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferContentErrorDTO>")
     */
    public ?array $warnings;

    /**
     * Constructor
     *
     * @param string $offerId
     * @param OfferContentErrorDTO[]|null $errors
     * @param OfferContentErrorDTO[]|null $warnings
     */
    public function __construct(string $offerId, ?array $errors, ?array $warnings)
    {
        $this->offerId = $offerId;
        $this->errors = $errors;
        $this->warnings = $warnings;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            isset($data['errors']) ? array_map(fn($item) => OfferContentErrorDTO::fromArray($item), $data['errors']) : null, 
            isset($data['warnings']) ? array_map(fn($item) => OfferContentErrorDTO::fromArray($item), $data['warnings']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'errors' => $this->errors, 
            'warnings' => $this->warnings, 
        ];
    }
}


