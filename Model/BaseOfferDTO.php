<?php
/**
 * BaseOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the BaseOfferDTO model.
 *
 * Основные параметры товара.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class BaseOfferDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("offerId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $offerId;

    /**
     * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    public ?string $name;

    /**
     * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     *
     * @var int|null
     * @SerializedName("marketCategoryId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $marketCategoryId;

    /**
     * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.
     *
     * @var string|null
     * @SerializedName("category")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $category;

    /**
     * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)
     *
     * @var string[]|null
     * @SerializedName("pictures")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $pictures;

    /**
     * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)
     *
     * @var string[]|null
     * @SerializedName("videos")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 6
     * )
     */
    public ?array $videos;

    /**
     * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся.
     *
     * @var OfferManualDTO[]|null
     * @SerializedName("manuals")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferManualDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferManualDTO>")
     * @Assert\Count(
     *   max = 6
     * )
     */
    public ?array $manuals;

    /**
     * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     *
     * @var string|null
     * @SerializedName("vendor")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $vendor;

    /**
     * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
     *
     * @var string[]|null
     * @SerializedName("barcodes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $barcodes;

    /**
     * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 6000
     * )
     */
    public ?string $description;

    /**
     * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).
     *
     * @var string[]|null
     * @SerializedName("manufacturerCountries")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $manufacturerCountries;

    /**
     * @var OfferWeightDimensionsDTO|null
     * @SerializedName("weightDimensions")
     * @Assert\Type("\OpenAPIServer\Model\OfferWeightDimensionsDTO")
     * @Type("\OpenAPIServer\Model\OfferWeightDimensionsDTO")
     */
    public ?OfferWeightDimensionsDTO $weightDimensions;

    /**
     * Артикул товара от производителя.
     *
     * @var string|null
     * @SerializedName("vendorCode")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $vendorCode;

    /**
     * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов.
     *
     * @var string[]|null
     * @SerializedName("tags")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $tags;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("shelfLife")
     * @Assert\Type("\OpenAPIServer\Model\TimePeriodDTO")
     * @Type("\OpenAPIServer\Model\TimePeriodDTO")
     */
    public ?TimePeriodDTO $shelfLife;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("lifeTime")
     * @Assert\Type("\OpenAPIServer\Model\TimePeriodDTO")
     * @Type("\OpenAPIServer\Model\TimePeriodDTO")
     */
    public ?TimePeriodDTO $lifeTime;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("guaranteePeriod")
     * @Assert\Type("\OpenAPIServer\Model\TimePeriodDTO")
     * @Type("\OpenAPIServer\Model\TimePeriodDTO")
     */
    public ?TimePeriodDTO $guaranteePeriod;

    /**
     * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.
     *
     * @var string|null
     * @SerializedName("customsCommodityCode")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $customsCommodityCode;

    /**
     * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).
     *
     * @var string[]|null
     * @SerializedName("certificates")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $certificates;

    /**
     * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.
     *
     * @var int|null
     * @SerializedName("boxCount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $boxCount;

    /**
     * @var OfferConditionDTO|null
     * @SerializedName("condition")
     * @Assert\Type("\OpenAPIServer\Model\OfferConditionDTO")
     * @Type("\OpenAPIServer\Model\OfferConditionDTO")
     */
    public ?OfferConditionDTO $condition;

    /**
     * @var OfferType|null
     * @SerializedName("type")
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public ?OfferType $type;

    /**
     * Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)
     *
     * @var bool|null
     * @SerializedName("downloadable")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $downloadable;

    /**
     * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.
     *
     * @var bool|null
     * @SerializedName("adult")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $adult;

    /**
     * @var AgeDTO|null
     * @SerializedName("age")
     * @Assert\Type("\OpenAPIServer\Model\AgeDTO")
     * @Type("\OpenAPIServer\Model\AgeDTO")
     */
    public ?AgeDTO $age;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.
     *
     * @var OfferParamDTO[]|null
     * @SerializedName("params")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferParamDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferParamDTO>")
     */
    public ?array $params;

    /**
     * Constructor
     *
     * @param string $offerId
     * @param string|null $name
     * @param int|null $marketCategoryId
     * @param string|null $category
     * @param string[]|null $pictures
     * @param string[]|null $videos
     * @param OfferManualDTO[]|null $manuals
     * @param string|null $vendor
     * @param string[]|null $barcodes
     * @param string|null $description
     * @param string[]|null $manufacturerCountries
     * @param OfferWeightDimensionsDTO|null $weightDimensions
     * @param string|null $vendorCode
     * @param string[]|null $tags
     * @param TimePeriodDTO|null $shelfLife
     * @param TimePeriodDTO|null $lifeTime
     * @param TimePeriodDTO|null $guaranteePeriod
     * @param string|null $customsCommodityCode
     * @param string[]|null $certificates
     * @param int|null $boxCount
     * @param OfferConditionDTO|null $condition
     * @param OfferType|null $type
     * @param bool|null $downloadable
     * @param bool|null $adult
     * @param AgeDTO|null $age
     * @param OfferParamDTO[]|null $params
     */
    public function __construct(string $offerId, ?string $name, ?int $marketCategoryId, ?string $category, ?array $pictures, ?array $videos, ?array $manuals, ?string $vendor, ?array $barcodes, ?string $description, ?array $manufacturerCountries, ?OfferWeightDimensionsDTO $weightDimensions, ?string $vendorCode, ?array $tags, ?TimePeriodDTO $shelfLife, ?TimePeriodDTO $lifeTime, ?TimePeriodDTO $guaranteePeriod, ?string $customsCommodityCode, ?array $certificates, ?int $boxCount, ?OfferConditionDTO $condition, ?OfferType $type, ?bool $downloadable, ?bool $adult, ?AgeDTO $age, ?array $params)
    {
        $this->offerId = $offerId;
        $this->name = $name;
        $this->marketCategoryId = $marketCategoryId;
        $this->category = $category;
        $this->pictures = $pictures;
        $this->videos = $videos;
        $this->manuals = $manuals;
        $this->vendor = $vendor;
        $this->barcodes = $barcodes;
        $this->description = $description;
        $this->manufacturerCountries = $manufacturerCountries;
        $this->weightDimensions = $weightDimensions;
        $this->vendorCode = $vendorCode;
        $this->tags = $tags;
        $this->shelfLife = $shelfLife;
        $this->lifeTime = $lifeTime;
        $this->guaranteePeriod = $guaranteePeriod;
        $this->customsCommodityCode = $customsCommodityCode;
        $this->certificates = $certificates;
        $this->boxCount = $boxCount;
        $this->condition = $condition;
        $this->type = $type;
        $this->downloadable = $downloadable;
        $this->adult = $adult;
        $this->age = $age;
        $this->params = $params;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            $data['name'] ?? null, 
            $data['marketCategoryId'] ?? null, 
            $data['category'] ?? null, 
            $data['pictures'] ?? null, 
            $data['videos'] ?? null, 
            isset($data['manuals']) ? array_map(fn($item) => OfferManualDTO::fromArray($item), $data['manuals']) : null, 
            $data['vendor'] ?? null, 
            $data['barcodes'] ?? null, 
            $data['description'] ?? null, 
            $data['manufacturerCountries'] ?? null, 
            isset($data['weightDimensions']) ? OfferWeightDimensionsDTO::fromArray($data['weightDimensions']) : null, 
            $data['vendorCode'] ?? null, 
            $data['tags'] ?? null, 
            isset($data['shelfLife']) ? TimePeriodDTO::fromArray($data['shelfLife']) : null, 
            isset($data['lifeTime']) ? TimePeriodDTO::fromArray($data['lifeTime']) : null, 
            isset($data['guaranteePeriod']) ? TimePeriodDTO::fromArray($data['guaranteePeriod']) : null, 
            $data['customsCommodityCode'] ?? null, 
            $data['certificates'] ?? null, 
            $data['boxCount'] ?? null, 
            isset($data['condition']) ? OfferConditionDTO::fromArray($data['condition']) : null, 
            isset($data['type']) ? OfferType::tryFrom($data['type']) : null, 
            $data['downloadable'] ?? null, 
            $data['adult'] ?? null, 
            isset($data['age']) ? AgeDTO::fromArray($data['age']) : null, 
            isset($data['params']) ? array_map(fn($item) => OfferParamDTO::fromArray($item), $data['params']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'name' => $this->name, 
            'marketCategoryId' => $this->marketCategoryId, 
            'category' => $this->category, 
            'pictures' => $this->pictures, 
            'videos' => $this->videos, 
            'manuals' => $this->manuals, 
            'vendor' => $this->vendor, 
            'barcodes' => $this->barcodes, 
            'description' => $this->description, 
            'manufacturerCountries' => $this->manufacturerCountries, 
            'weightDimensions' => $this->weightDimensions, 
            'vendorCode' => $this->vendorCode, 
            'tags' => $this->tags, 
            'shelfLife' => $this->shelfLife, 
            'lifeTime' => $this->lifeTime, 
            'guaranteePeriod' => $this->guaranteePeriod, 
            'customsCommodityCode' => $this->customsCommodityCode, 
            'certificates' => $this->certificates, 
            'boxCount' => $this->boxCount, 
            'condition' => $this->condition, 
            'type' => $this->type, 
            'downloadable' => $this->downloadable, 
            'adult' => $this->adult, 
            'age' => $this->age, 
            'params' => $this->params, 
        ];
    }
}


