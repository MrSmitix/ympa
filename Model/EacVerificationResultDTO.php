<?php
/**
 * EacVerificationResultDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EacVerificationResultDTO model.
 *
 * Результат выполнения запроса.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class EacVerificationResultDTO 
{
        /**
     * @var EacVerificationStatusType|null
     * @SerializedName("verificationResult")
    * @Accessor(getter="getSerializedVerificationResult", setter="setDeserializedVerificationResult")
    * @Type("string")
    */
    protected ?EacVerificationStatusType $verificationResult = null;

    /**
     * Количество оставшихся попыток проверки кода.  Возвращается, если магазин отправил некорректный код.  Когда все попытки будут исчерпаны, код обновится.
     *
     * @var int|null
     * @SerializedName("attemptsLeft")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $attemptsLeft = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->verificationResult = array_key_exists('verificationResult', $data) ? $data['verificationResult'] : $this->verificationResult;
            $this->attemptsLeft = array_key_exists('attemptsLeft', $data) ? $data['attemptsLeft'] : $this->attemptsLeft;
        }
    }

    /**
     * Gets verificationResult.
     *
     * @return EacVerificationStatusType|null
     */
    public function getVerificationResult(): ?EacVerificationStatusType
    {
        return $this->verificationResult;
    }

    /**
    * Sets verificationResult.
    *
    * @param EacVerificationStatusType|null $verificationResult
    *
    * @return $this
    */
    public function setVerificationResult(?EacVerificationStatusType $verificationResult = null): self
    {
        $this->verificationResult = $verificationResult;

        return $this;
    }

    /**
    * Gets verificationResult for serialization.
    *
    * @return string|null
    */
    public function getSerializedVerificationResult(): string|null
    {
        return $this->verificationResult?->value ? (string) $this->verificationResult->value : null;
    }

    /**
    * Sets verificationResult.
    *
    * @param string|EacVerificationStatusType|null $verificationResult
    *
    * @return $this
    */
    public function setDeserializedVerificationResult(string|EacVerificationStatusType|null $verificationResult = null): self
    {
        if (is_string($verificationResult)) {
            $verificationResult = EacVerificationStatusType::tryFrom($verificationResult);
        }

        $this->verificationResult = $verificationResult;

        return $this;
    }



    /**
     * Gets attemptsLeft.
     *
     * @return int|null
     */
    public function getAttemptsLeft(): ?int
    {
        return $this->attemptsLeft;
    }

    /**
    * Sets attemptsLeft.
    *
    * @param int|null $attemptsLeft  Количество оставшихся попыток проверки кода.  Возвращается, если магазин отправил некорректный код.  Когда все попытки будут исчерпаны, код обновится.
    *
    * @return $this
    */
    public function setAttemptsLeft(?int $attemptsLeft = null): self
    {
        $this->attemptsLeft = $attemptsLeft;

        return $this;
    }



}


