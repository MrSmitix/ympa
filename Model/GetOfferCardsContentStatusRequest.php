<?php
/**
 * GetOfferCardsContentStatusRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetOfferCardsContentStatusRequest model.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetOfferCardsContentStatusRequest  implements \JsonSerializable
{
        /**
     * Идентификаторы товаров, информация о которых нужна. &lt;br&gt;&lt;br&gt; ⚠️ Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
     *
     * @var string[]|null
     * @SerializedName("offerIds")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 200
     * )
     */
    public ?array $offerIds;

    /**
     * Фильтр по статусам карточек.  [Что такое карточка товара](https://yandex.ru/support/marketplace/assortment/content/index.html)
     *
     * @var OfferCardStatusType[]|null
     * @SerializedName("cardStatuses")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferCardStatusType")
     * })
     * @Accessor(getter="getSerializedCardStatuses")
     * @Type("array<string>")
     */
    public ?array $cardStatuses;

    /**
     * Фильтр по категориям на Маркете.
     *
     * @var int[]|null
     * @SerializedName("categoryIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     * @Assert\Count(
     *   max = 200
     * )
     */
    public ?array $categoryIds;

    /**
     * Constructor
     *
     * @param string[]|null $offerIds
     * @param OfferCardStatusType[]|null $cardStatuses
     * @param int[]|null $categoryIds
     */
    public function __construct(?array $offerIds, ?array $cardStatuses, ?array $categoryIds)
    {
        $this->offerIds = $offerIds;
        $this->cardStatuses = $cardStatuses;
        $this->categoryIds = $categoryIds;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerIds'] ?? null, 
            isset($data['cardStatuses']) ? array_map(fn($item) => OfferCardStatusType::tryFrom($item), $data['cardStatuses']) : null, 
            $data['categoryIds'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerIds' => $this->offerIds, 
            'cardStatuses' => $this->cardStatuses, 
            'categoryIds' => $this->categoryIds, 
        ];
    }
}


