<?php
/**
 * OfferPriceResponseDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OfferPriceResponseDTO model.
 *
 * Информация об установленной цене на товар.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OfferPriceResponseDTO  implements \JsonSerializable
{
        /**
     * Идентификатор предложения из прайс-листа.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $id;

    /**
     * @var PriceDTO|null
     * @SerializedName("price")
     * @Assert\Type("\OpenAPIServer\Model\PriceDTO")
     * @Type("\OpenAPIServer\Model\PriceDTO")
     */
    public ?PriceDTO $price;

    /**
     * SKU на Маркете.
     *
     * @var int|null
     * @SerializedName("marketSku")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $marketSku;

    /**
     * Дата и время последнего обновления цены на товар.
     *
     * @var \DateTime|null
     * @SerializedName("updatedAt")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $updatedAt;

    /**
     * Constructor
     *
     * @param string|null $id
     * @param PriceDTO|null $price
     * @param int|null $marketSku
     * @param \DateTime|null $updatedAt
     */
    public function __construct(?string $id, ?PriceDTO $price, ?int $marketSku, ?\DateTime $updatedAt)
    {
        $this->id = $id;
        $this->price = $price;
        $this->marketSku = $marketSku;
        $this->updatedAt = $updatedAt;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            isset($data['price']) ? PriceDTO::fromArray($data['price']) : null, 
            $data['marketSku'] ?? null, 
            isset($data['updatedAt']) ? new \DateTime($data['updatedAt']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'price' => $this->price, 
            'marketSku' => $this->marketSku, 
            'updatedAt' => $this->updatedAt?->format('c'), 
        ];
    }
}


