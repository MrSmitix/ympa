<?php
/**
 * FeedDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the FeedDTO model.
 *
 * Информация о прайс-листе.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class FeedDTO  implements \JsonSerializable
{
        /**
     * Идентификатор прайс-листа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Логин для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.
     *
     * @var string|null
     * @SerializedName("login")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $login;

    /**
     * Имя файла, содержащего прайс-лист. Параметр выводится при размещении прайс-листа на сервере Маркета.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $name;

    /**
     * Пароль для авторизации при скачивании прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина и в случае ограничения доступа к нему.
     *
     * @var string|null
     * @SerializedName("password")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $password;

    /**
     * Дата загрузки прайс-листа на Маркет.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.  Параметр выводится при размещении прайс-листа на сервере Маркета.
     *
     * @var \DateTime|null
     * @SerializedName("uploadDate")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $uploadDate;

    /**
     * URL прайс-листа. Параметр выводится при размещении прайс-листа на сайте магазина.
     *
     * @var string|null
     * @SerializedName("url")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $url;

    /**
     * @var FeedContentDTO|null
     * @SerializedName("content")
     * @Assert\Type("\OpenAPIServer\Model\FeedContentDTO")
     * @Type("\OpenAPIServer\Model\FeedContentDTO")
     */
    public ?FeedContentDTO $content;

    /**
     * @var FeedDownloadDTO|null
     * @SerializedName("download")
     * @Assert\Type("\OpenAPIServer\Model\FeedDownloadDTO")
     * @Type("\OpenAPIServer\Model\FeedDownloadDTO")
     */
    public ?FeedDownloadDTO $download;

    /**
     * @var FeedPlacementDTO|null
     * @SerializedName("placement")
     * @Assert\Type("\OpenAPIServer\Model\FeedPlacementDTO")
     * @Type("\OpenAPIServer\Model\FeedPlacementDTO")
     */
    public ?FeedPlacementDTO $placement;

    /**
     * @var FeedPublicationDTO|null
     * @SerializedName("publication")
     * @Assert\Type("\OpenAPIServer\Model\FeedPublicationDTO")
     * @Type("\OpenAPIServer\Model\FeedPublicationDTO")
     */
    public ?FeedPublicationDTO $publication;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param string|null $login
     * @param string|null $name
     * @param string|null $password
     * @param \DateTime|null $uploadDate
     * @param string|null $url
     * @param FeedContentDTO|null $content
     * @param FeedDownloadDTO|null $download
     * @param FeedPlacementDTO|null $placement
     * @param FeedPublicationDTO|null $publication
     */
    public function __construct(?int $id, ?string $login, ?string $name, ?string $password, ?\DateTime $uploadDate, ?string $url, ?FeedContentDTO $content, ?FeedDownloadDTO $download, ?FeedPlacementDTO $placement, ?FeedPublicationDTO $publication)
    {
        $this->id = $id;
        $this->login = $login;
        $this->name = $name;
        $this->password = $password;
        $this->uploadDate = $uploadDate;
        $this->url = $url;
        $this->content = $content;
        $this->download = $download;
        $this->placement = $placement;
        $this->publication = $publication;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['login'] ?? null, 
            $data['name'] ?? null, 
            $data['password'] ?? null, 
            isset($data['uploadDate']) ? new \DateTime($data['uploadDate']) : null, 
            $data['url'] ?? null, 
            isset($data['content']) ? FeedContentDTO::fromArray($data['content']) : null, 
            isset($data['download']) ? FeedDownloadDTO::fromArray($data['download']) : null, 
            isset($data['placement']) ? FeedPlacementDTO::fromArray($data['placement']) : null, 
            isset($data['publication']) ? FeedPublicationDTO::fromArray($data['publication']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'login' => $this->login, 
            'name' => $this->name, 
            'password' => $this->password, 
            'uploadDate' => $this->uploadDate?->format('c'), 
            'url' => $this->url, 
            'content' => $this->content, 
            'download' => $this->download, 
            'placement' => $this->placement, 
            'publication' => $this->publication, 
        ];
    }
}


