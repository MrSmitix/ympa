<?php
/**
 * UpdatePromoOffersRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the UpdatePromoOffersRequest model.
 *
 * Добавление товаров в акцию или обновление их параметров.  Чтобы добавить товары в акцию или обновить параметры каких-то товаров, передайте их в параметре &#x60;offers&#x60;.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class UpdatePromoOffersRequest 
{
        /**
     * Идентификатор акции.
     *
     * @var string|null
     * @SerializedName("promoId")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $promoId = null;

    /**
     * Товары, которые необходимо добавить в акцию или цены которых нужно изменить.
     *
     * @var UpdatePromoOfferDTO[]|null
     * @SerializedName("offers")
     * @Type("array<OpenAPI\Server\Model\UpdatePromoOfferDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\UpdatePromoOfferDTO"),
    ])]
    #[Assert\Count(max: 500)]
    #[Assert\Count(min: 1)]
    protected ?array $offers = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->promoId = array_key_exists('promoId', $data) ? $data['promoId'] : $this->promoId;
            $this->offers = array_key_exists('offers', $data) ? $data['offers'] : $this->offers;
        }
    }

    /**
     * Gets promoId.
     *
     * @return string|null
     */
    public function getPromoId(): ?string
    {
        return $this->promoId;
    }

    /**
    * Sets promoId.
    *
    * @param string|null $promoId  Идентификатор акции.
    *
    * @return $this
    */
    public function setPromoId(?string $promoId): self
    {
        $this->promoId = $promoId;

        return $this;
    }




    /**
     * Gets offers.
     *
     * @return UpdatePromoOfferDTO[]|null
     */
    public function getOffers(): ?array
    {
        return $this->offers;
    }

    /**
    * Sets offers.
    *
    * @param UpdatePromoOfferDTO[]|null $offers  Товары, которые необходимо добавить в акцию или цены которых нужно изменить.
    *
    * @return $this
    */
    public function setOffers(?array $offers): self
    {
        $this->offers = $offers;

        return $this;
    }



}


