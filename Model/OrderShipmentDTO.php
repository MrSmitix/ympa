<?php
/**
 * OrderShipmentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderShipmentDTO model.
 *
 * Список посылок.  В параметре может указываться несколько посылок.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderShipmentDTO  implements \JsonSerializable
{
        /**
     * Идентификатор посылки, присвоенный Маркетом.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.
     *
     * @var string|null
     * @SerializedName("shipmentDate")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $shipmentDate;

    /**
     * **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки.
     *
     * @var string|null
     * @SerializedName("shipmentTime")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $shipmentTime;

    /**
     * **Только для модели DBS**  Информация для отслеживания перемещений посылки.
     *
     * @var OrderTrackDTO[]|null
     * @SerializedName("tracks")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderTrackDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderTrackDTO>")
     */
    public ?array $tracks;

    /**
     * Список грузовых мест.
     *
     * @var OrderParcelBoxDTO[]|null
     * @SerializedName("boxes")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderParcelBoxDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderParcelBoxDTO>")
     */
    public ?array $boxes;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param string|null $shipmentDate
     * @param string|null $shipmentTime
     * @param OrderTrackDTO[]|null $tracks
     * @param OrderParcelBoxDTO[]|null $boxes
     */
    public function __construct(?int $id, ?string $shipmentDate, ?string $shipmentTime, ?array $tracks, ?array $boxes)
    {
        $this->id = $id;
        $this->shipmentDate = $shipmentDate;
        $this->shipmentTime = $shipmentTime;
        $this->tracks = $tracks;
        $this->boxes = $boxes;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['shipmentDate'] ?? null, 
            $data['shipmentTime'] ?? null, 
            isset($data['tracks']) ? array_map(fn($item) => OrderTrackDTO::fromArray($item), $data['tracks']) : null, 
            isset($data['boxes']) ? array_map(fn($item) => OrderParcelBoxDTO::fromArray($item), $data['boxes']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'shipmentDate' => $this->shipmentDate, 
            'shipmentTime' => $this->shipmentTime, 
            'tracks' => $this->tracks, 
            'boxes' => $this->boxes, 
        ];
    }
}


