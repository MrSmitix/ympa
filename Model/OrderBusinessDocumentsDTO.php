<?php
/**
 * OrderBusinessDocumentsDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderBusinessDocumentsDTO model.
 *
 * Информация о документах.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderBusinessDocumentsDTO  implements \JsonSerializable
{
        /**
     * @var DocumentDTO|null
     * @SerializedName("upd")
     * @Assert\Type("\OpenAPIServer\Model\DocumentDTO")
     * @Type("\OpenAPIServer\Model\DocumentDTO")
     */
    public ?DocumentDTO $upd;

    /**
     * @var DocumentDTO|null
     * @SerializedName("ukd")
     * @Assert\Type("\OpenAPIServer\Model\DocumentDTO")
     * @Type("\OpenAPIServer\Model\DocumentDTO")
     */
    public ?DocumentDTO $ukd;

    /**
     * @var DocumentDTO|null
     * @SerializedName("torgTwelve")
     * @Assert\Type("\OpenAPIServer\Model\DocumentDTO")
     * @Type("\OpenAPIServer\Model\DocumentDTO")
     */
    public ?DocumentDTO $torgTwelve;

    /**
     * @var DocumentDTO|null
     * @SerializedName("sf")
     * @Assert\Type("\OpenAPIServer\Model\DocumentDTO")
     * @Type("\OpenAPIServer\Model\DocumentDTO")
     */
    public ?DocumentDTO $sf;

    /**
     * @var DocumentDTO|null
     * @SerializedName("ksf")
     * @Assert\Type("\OpenAPIServer\Model\DocumentDTO")
     * @Type("\OpenAPIServer\Model\DocumentDTO")
     */
    public ?DocumentDTO $ksf;

    /**
     * Constructor
     *
     * @param DocumentDTO|null $upd
     * @param DocumentDTO|null $ukd
     * @param DocumentDTO|null $torgTwelve
     * @param DocumentDTO|null $sf
     * @param DocumentDTO|null $ksf
     */
    public function __construct(?DocumentDTO $upd, ?DocumentDTO $ukd, ?DocumentDTO $torgTwelve, ?DocumentDTO $sf, ?DocumentDTO $ksf)
    {
        $this->upd = $upd;
        $this->ukd = $ukd;
        $this->torgTwelve = $torgTwelve;
        $this->sf = $sf;
        $this->ksf = $ksf;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            isset($data['upd']) ? DocumentDTO::fromArray($data['upd']) : null, 
            isset($data['ukd']) ? DocumentDTO::fromArray($data['ukd']) : null, 
            isset($data['torgTwelve']) ? DocumentDTO::fromArray($data['torgTwelve']) : null, 
            isset($data['sf']) ? DocumentDTO::fromArray($data['sf']) : null, 
            isset($data['ksf']) ? DocumentDTO::fromArray($data['ksf']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'upd' => $this->upd, 
            'ukd' => $this->ukd, 
            'torgTwelve' => $this->torgTwelve, 
            'sf' => $this->sf, 
            'ksf' => $this->ksf, 
        ];
    }
}


