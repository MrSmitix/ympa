<?php
/**
 * CalculateTariffsOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the CalculateTariffsOfferDTO model.
 *
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class CalculateTariffsOfferDTO  implements \JsonSerializable
{
        /**
     * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     *
     * @var int
     * @SerializedName("categoryId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThan(0)
     */
    public int $categoryId;

    /**
     * Цена на товар в рублях.
     *
     * @var float
     * @SerializedName("price")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $price;

    /**
     * Длина товара в сантиметрах.
     *
     * @var float
     * @SerializedName("length")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $length;

    /**
     * Ширина товара в сантиметрах.
     *
     * @var float
     * @SerializedName("width")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $width;

    /**
     * Высота товара в сантиметрах.
     *
     * @var float
     * @SerializedName("height")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $height;

    /**
     * Вес товара в килограммах.
     *
     * @var float
     * @SerializedName("weight")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $weight;

    /**
     * Квант продажи — количество единиц товара в одном товарном предложении.
     *
     * @var int|null
     * @SerializedName("quantity")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(1)
     */
    public ?int $quantity = 1;

    /**
     * Constructor
     *
     * @param int $categoryId
     * @param float $price
     * @param float $length
     * @param float $width
     * @param float $height
     * @param float $weight
     * @param int|null $quantity
     */
    public function __construct(int $categoryId, float $price, float $length, float $width, float $height, float $weight, ?int $quantity)
    {
        $this->categoryId = $categoryId;
        $this->price = $price;
        $this->length = $length;
        $this->width = $width;
        $this->height = $height;
        $this->weight = $weight;
        $this->quantity = $quantity;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['categoryId'] ?? null, 
            $data['price'] ?? null, 
            $data['length'] ?? null, 
            $data['width'] ?? null, 
            $data['height'] ?? null, 
            $data['weight'] ?? null, 
            $data['quantity'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'categoryId' => $this->categoryId, 
            'price' => $this->price, 
            'length' => $this->length, 
            'width' => $this->width, 
            'height' => $this->height, 
            'weight' => $this->weight, 
            'quantity' => $this->quantity, 
        ];
    }
}


