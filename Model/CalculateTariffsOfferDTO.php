<?php
/**
 * CalculateTariffsOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CalculateTariffsOfferDTO model.
 *
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CalculateTariffsOfferDTO 
{
        /**
     * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     *
     * @var int|null
     * @SerializedName("categoryId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    #[Assert\GreaterThan(0)]
    protected ?int $categoryId = null;

    /**
     * Цена на товар в рублях.
     *
     * @var float|null
     * @SerializedName("price")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThan(0)]
    protected ?float $price = null;

    /**
     * Длина товара в сантиметрах.
     *
     * @var float|null
     * @SerializedName("length")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThan(0)]
    protected ?float $length = null;

    /**
     * Ширина товара в сантиметрах.
     *
     * @var float|null
     * @SerializedName("width")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThan(0)]
    protected ?float $width = null;

    /**
     * Высота товара в сантиметрах.
     *
     * @var float|null
     * @SerializedName("height")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThan(0)]
    protected ?float $height = null;

    /**
     * Вес товара в килограммах.
     *
     * @var float|null
     * @SerializedName("weight")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThan(0)]
    protected ?float $weight = null;

    /**
     * Квант продажи — количество единиц товара в одном товарном предложении.
     *
     * @var int|null
     * @SerializedName("quantity")
     * @Type("int")
    */
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(1)]
    protected ?int $quantity = 1;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->categoryId = array_key_exists('categoryId', $data) ? $data['categoryId'] : $this->categoryId;
            $this->price = array_key_exists('price', $data) ? $data['price'] : $this->price;
            $this->length = array_key_exists('length', $data) ? $data['length'] : $this->length;
            $this->width = array_key_exists('width', $data) ? $data['width'] : $this->width;
            $this->height = array_key_exists('height', $data) ? $data['height'] : $this->height;
            $this->weight = array_key_exists('weight', $data) ? $data['weight'] : $this->weight;
            $this->quantity = array_key_exists('quantity', $data) ? $data['quantity'] : $this->quantity;
        }
    }

    /**
     * Gets categoryId.
     *
     * @return int|null
     */
    public function getCategoryId(): ?int
    {
        return $this->categoryId;
    }

    /**
    * Sets categoryId.
    *
    * @param int|null $categoryId  Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
    *
    * @return $this
    */
    public function setCategoryId(?int $categoryId): self
    {
        $this->categoryId = $categoryId;

        return $this;
    }




    /**
     * Gets price.
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->price;
    }

    /**
    * Sets price.
    *
    * @param float|null $price  Цена на товар в рублях.
    *
    * @return $this
    */
    public function setPrice(?float $price): self
    {
        $this->price = $price;

        return $this;
    }




    /**
     * Gets length.
     *
     * @return float|null
     */
    public function getLength(): ?float
    {
        return $this->length;
    }

    /**
    * Sets length.
    *
    * @param float|null $length  Длина товара в сантиметрах.
    *
    * @return $this
    */
    public function setLength(?float $length): self
    {
        $this->length = $length;

        return $this;
    }




    /**
     * Gets width.
     *
     * @return float|null
     */
    public function getWidth(): ?float
    {
        return $this->width;
    }

    /**
    * Sets width.
    *
    * @param float|null $width  Ширина товара в сантиметрах.
    *
    * @return $this
    */
    public function setWidth(?float $width): self
    {
        $this->width = $width;

        return $this;
    }




    /**
     * Gets height.
     *
     * @return float|null
     */
    public function getHeight(): ?float
    {
        return $this->height;
    }

    /**
    * Sets height.
    *
    * @param float|null $height  Высота товара в сантиметрах.
    *
    * @return $this
    */
    public function setHeight(?float $height): self
    {
        $this->height = $height;

        return $this;
    }




    /**
     * Gets weight.
     *
     * @return float|null
     */
    public function getWeight(): ?float
    {
        return $this->weight;
    }

    /**
    * Sets weight.
    *
    * @param float|null $weight  Вес товара в килограммах.
    *
    * @return $this
    */
    public function setWeight(?float $weight): self
    {
        $this->weight = $weight;

        return $this;
    }




    /**
     * Gets quantity.
     *
     * @return int|null
     */
    public function getQuantity(): ?int
    {
        return $this->quantity;
    }

    /**
    * Sets quantity.
    *
    * @param int|null $quantity  Квант продажи — количество единиц товара в одном товарном предложении.
    *
    * @return $this
    */
    public function setQuantity(?int $quantity = null): self
    {
        $this->quantity = $quantity;

        return $this;
    }



}


