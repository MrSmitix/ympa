<?php
/**
 * FeedbackFactorDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the FeedbackFactorDTO model.
 *
 * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class FeedbackFactorDTO  implements \JsonSerializable
{
        /**
     * Идентификатор параметра.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Название параметра. Например, &#x60;Скорость обработки заказа&#x60;.
     *
     * @var string|null
     * @SerializedName("title")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $title;

    /**
     * Описание параметра. Например, &#x60;Как быстро с вами связались для подтверждения заказа?&#x60;.
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $description;

    /**
     * Оценка по параметру, указанная в отзыве: от &#x60;1&#x60; (низшая оценка) до &#x60;5&#x60; (высшая оценка).
     *
     * @var int|null
     * @SerializedName("value")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $value;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param string|null $title
     * @param string|null $description
     * @param int|null $value
     */
    public function __construct(?int $id, ?string $title, ?string $description, ?int $value)
    {
        $this->id = $id;
        $this->title = $title;
        $this->description = $description;
        $this->value = $value;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['title'] ?? null, 
            $data['description'] ?? null, 
            $data['value'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'title' => $this->title, 
            'description' => $this->description, 
            'value' => $this->value, 
        ];
    }
}


