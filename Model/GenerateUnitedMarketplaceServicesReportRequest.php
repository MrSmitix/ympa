<?php
/**
 * GenerateUnitedMarketplaceServicesReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GenerateUnitedMarketplaceServicesReportRequest model.
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GenerateUnitedMarketplaceServicesReportRequest 
{
        /**
     * Идентификатор бизнеса.
     *
     * @var int|null
     * @SerializedName("businessId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $businessId = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeFrom")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateTimeFrom = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeTo")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateTimeTo = null;

    /**
     * Начало периода, включительно.
     *
     * @var \DateTime|null
     * @SerializedName("dateFrom")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateFrom = null;

    /**
     * Конец периода, включительно. Максимальный период — 1 год.
     *
     * @var \DateTime|null
     * @SerializedName("dateTo")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateTo = null;

    /**
     * Начальный год формирования акта.
     *
     * @var int|null
     * @SerializedName("yearFrom")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $yearFrom = null;

    /**
     * Начальный номер месяца формирования акта.
     *
     * @var int|null
     * @SerializedName("monthFrom")
     * @Type("int")
    */
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(1)]
    #[Assert\LessThanOrEqual(12)]
    protected ?int $monthFrom = null;

    /**
     * Конечный год формирования акта.
     *
     * @var int|null
     * @SerializedName("yearTo")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $yearTo = null;

    /**
     * Конечный номер месяца формирования акта.
     *
     * @var int|null
     * @SerializedName("monthTo")
     * @Type("int")
    */
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(1)]
    #[Assert\LessThanOrEqual(12)]
    protected ?int $monthTo = null;

    /**
     * Список моделей, которые нужны в отчете.
     *
     * @var PlacementType[]|null
     * @SerializedName("placementPrograms")
     * @Accessor(getter="getSerializedPlacementPrograms", setter="setDeserializedPlacementPrograms")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\PlacementType"),
    ])]
    protected ?array $placementPrograms = null;

    /**
     * Список ИНН, которые нужны в отчете.
     *
     * @var string[]|null
     * @SerializedName("inns")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $inns = null;

    /**
     * Список магазинов, которые нужны в отчете.
     *
     * @var int[]|null
     * @SerializedName("campaignIds")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    protected ?array $campaignIds = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->businessId = array_key_exists('businessId', $data) ? $data['businessId'] : $this->businessId;
            $this->dateTimeFrom = array_key_exists('dateTimeFrom', $data) ? $data['dateTimeFrom'] : $this->dateTimeFrom;
            $this->dateTimeTo = array_key_exists('dateTimeTo', $data) ? $data['dateTimeTo'] : $this->dateTimeTo;
            $this->dateFrom = array_key_exists('dateFrom', $data) ? $data['dateFrom'] : $this->dateFrom;
            $this->dateTo = array_key_exists('dateTo', $data) ? $data['dateTo'] : $this->dateTo;
            $this->yearFrom = array_key_exists('yearFrom', $data) ? $data['yearFrom'] : $this->yearFrom;
            $this->monthFrom = array_key_exists('monthFrom', $data) ? $data['monthFrom'] : $this->monthFrom;
            $this->yearTo = array_key_exists('yearTo', $data) ? $data['yearTo'] : $this->yearTo;
            $this->monthTo = array_key_exists('monthTo', $data) ? $data['monthTo'] : $this->monthTo;
            $this->placementPrograms = array_key_exists('placementPrograms', $data) ? $data['placementPrograms'] : $this->placementPrograms;
            $this->inns = array_key_exists('inns', $data) ? $data['inns'] : $this->inns;
            $this->campaignIds = array_key_exists('campaignIds', $data) ? $data['campaignIds'] : $this->campaignIds;
        }
    }

    /**
     * Gets businessId.
     *
     * @return int|null
     */
    public function getBusinessId(): ?int
    {
        return $this->businessId;
    }

    /**
    * Sets businessId.
    *
    * @param int|null $businessId  Идентификатор бизнеса.
    *
    * @return $this
    */
    public function setBusinessId(?int $businessId): self
    {
        $this->businessId = $businessId;

        return $this;
    }




    /**
     * Gets dateTimeFrom.
     *
     * @return \DateTime|null
     */
    public function getDateTimeFrom(): ?\DateTime
    {
        return $this->dateTimeFrom;
    }

    /**
    * Sets dateTimeFrom.
    *
    * @param \DateTime|null $dateTimeFrom  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно.
    *
    * @return $this
    */
    public function setDateTimeFrom(?\DateTime $dateTimeFrom = null): self
    {
        $this->dateTimeFrom = $dateTimeFrom;

        return $this;
    }




    /**
     * Gets dateTimeTo.
     *
     * @return \DateTime|null
     */
    public function getDateTimeTo(): ?\DateTime
    {
        return $this->dateTimeTo;
    }

    /**
    * Sets dateTimeTo.
    *
    * @param \DateTime|null $dateTimeTo  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год.
    *
    * @return $this
    */
    public function setDateTimeTo(?\DateTime $dateTimeTo = null): self
    {
        $this->dateTimeTo = $dateTimeTo;

        return $this;
    }




    /**
     * Gets dateFrom.
     *
     * @return \DateTime|null
     */
    public function getDateFrom(): ?\DateTime
    {
        return $this->dateFrom;
    }

    /**
    * Sets dateFrom.
    *
    * @param \DateTime|null $dateFrom  Начало периода, включительно.
    *
    * @return $this
    */
    public function setDateFrom(?\DateTime $dateFrom = null): self
    {
        $this->dateFrom = $dateFrom;

        return $this;
    }




    /**
     * Gets dateTo.
     *
     * @return \DateTime|null
     */
    public function getDateTo(): ?\DateTime
    {
        return $this->dateTo;
    }

    /**
    * Sets dateTo.
    *
    * @param \DateTime|null $dateTo  Конец периода, включительно. Максимальный период — 1 год.
    *
    * @return $this
    */
    public function setDateTo(?\DateTime $dateTo = null): self
    {
        $this->dateTo = $dateTo;

        return $this;
    }




    /**
     * Gets yearFrom.
     *
     * @return int|null
     */
    public function getYearFrom(): ?int
    {
        return $this->yearFrom;
    }

    /**
    * Sets yearFrom.
    *
    * @param int|null $yearFrom  Начальный год формирования акта.
    *
    * @return $this
    */
    public function setYearFrom(?int $yearFrom = null): self
    {
        $this->yearFrom = $yearFrom;

        return $this;
    }




    /**
     * Gets monthFrom.
     *
     * @return int|null
     */
    public function getMonthFrom(): ?int
    {
        return $this->monthFrom;
    }

    /**
    * Sets monthFrom.
    *
    * @param int|null $monthFrom  Начальный номер месяца формирования акта.
    *
    * @return $this
    */
    public function setMonthFrom(?int $monthFrom = null): self
    {
        $this->monthFrom = $monthFrom;

        return $this;
    }




    /**
     * Gets yearTo.
     *
     * @return int|null
     */
    public function getYearTo(): ?int
    {
        return $this->yearTo;
    }

    /**
    * Sets yearTo.
    *
    * @param int|null $yearTo  Конечный год формирования акта.
    *
    * @return $this
    */
    public function setYearTo(?int $yearTo = null): self
    {
        $this->yearTo = $yearTo;

        return $this;
    }




    /**
     * Gets monthTo.
     *
     * @return int|null
     */
    public function getMonthTo(): ?int
    {
        return $this->monthTo;
    }

    /**
    * Sets monthTo.
    *
    * @param int|null $monthTo  Конечный номер месяца формирования акта.
    *
    * @return $this
    */
    public function setMonthTo(?int $monthTo = null): self
    {
        $this->monthTo = $monthTo;

        return $this;
    }




    /**
     * Gets placementPrograms.
     *
     * @return PlacementType[]|null
     */
    public function getPlacementPrograms(): ?array
    {
        return $this->placementPrograms;
    }

    /**
    * Sets placementPrograms.
    *
    * @param PlacementType[]|null $placementPrograms  Список моделей, которые нужны в отчете.
    *
    * @return $this
    */
    public function setPlacementPrograms(?array $placementPrograms = null): self
    {
        $this->placementPrograms = $placementPrograms;

        return $this;
    }


    /**
    * Gets placementPrograms for serialization.
    *
    * @return array
    */
    public function getSerializedPlacementPrograms(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->placementPrograms ?? []
        );
    }

    /**
    * Sets placementPrograms.
    *
    * @param ?array $placementPrograms
    *
    * @return $this
    */
    public function setDeserializedPlacementPrograms(?array $placementPrograms = []): self
    {
        $this->placementPrograms = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = PlacementType::tryFrom($value);
                }

                return $value;
            },
            $placementPrograms ?? []
        );

        return $this;
    }


    /**
     * Gets inns.
     *
     * @return string[]|null
     */
    public function getInns(): ?array
    {
        return $this->inns;
    }

    /**
    * Sets inns.
    *
    * @param string[]|null $inns  Список ИНН, которые нужны в отчете.
    *
    * @return $this
    */
    public function setInns(?array $inns = null): self
    {
        $this->inns = $inns;

        return $this;
    }




    /**
     * Gets campaignIds.
     *
     * @return int[]|null
     */
    public function getCampaignIds(): ?array
    {
        return $this->campaignIds;
    }

    /**
    * Sets campaignIds.
    *
    * @param int[]|null $campaignIds  Список магазинов, которые нужны в отчете.
    *
    * @return $this
    */
    public function setCampaignIds(?array $campaignIds = null): self
    {
        $this->campaignIds = $campaignIds;

        return $this;
    }



}


