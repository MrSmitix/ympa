<?php
/**
 * FeedbackGradesDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FeedbackGradesDTO model.
 *
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FeedbackGradesDTO 
{
        /**
     * Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
     *
     * @var float|null
     * @SerializedName("average")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $average = null;

    /**
     * Количество пользователей, считающих отзыв полезным.
     *
     * @var int|null
     * @SerializedName("agreeCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $agreeCount = null;

    /**
     * Количество пользователей, считающих отзыв бесполезным.
     *
     * @var int|null
     * @SerializedName("rejectCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $rejectCount = null;

    /**
     * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор.
     *
     * @var FeedbackFactorDTO[]|null
     * @SerializedName("factors")
     * @Type("array<OpenAPI\Server\Model\FeedbackFactorDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\FeedbackFactorDTO"),
    ])]
    protected ?array $factors = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->average = array_key_exists('average', $data) ? $data['average'] : $this->average;
            $this->agreeCount = array_key_exists('agreeCount', $data) ? $data['agreeCount'] : $this->agreeCount;
            $this->rejectCount = array_key_exists('rejectCount', $data) ? $data['rejectCount'] : $this->rejectCount;
            $this->factors = array_key_exists('factors', $data) ? $data['factors'] : $this->factors;
        }
    }

    /**
     * Gets average.
     *
     * @return float|null
     */
    public function getAverage(): ?float
    {
        return $this->average;
    }

    /**
    * Sets average.
    *
    * @param float|null $average  Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
    *
    * @return $this
    */
    public function setAverage(?float $average = null): self
    {
        $this->average = $average;

        return $this;
    }




    /**
     * Gets agreeCount.
     *
     * @return int|null
     */
    public function getAgreeCount(): ?int
    {
        return $this->agreeCount;
    }

    /**
    * Sets agreeCount.
    *
    * @param int|null $agreeCount  Количество пользователей, считающих отзыв полезным.
    *
    * @return $this
    */
    public function setAgreeCount(?int $agreeCount = null): self
    {
        $this->agreeCount = $agreeCount;

        return $this;
    }




    /**
     * Gets rejectCount.
     *
     * @return int|null
     */
    public function getRejectCount(): ?int
    {
        return $this->rejectCount;
    }

    /**
    * Sets rejectCount.
    *
    * @param int|null $rejectCount  Количество пользователей, считающих отзыв бесполезным.
    *
    * @return $this
    */
    public function setRejectCount(?int $rejectCount = null): self
    {
        $this->rejectCount = $rejectCount;

        return $this;
    }




    /**
     * Gets factors.
     *
     * @return FeedbackFactorDTO[]|null
     */
    public function getFactors(): ?array
    {
        return $this->factors;
    }

    /**
    * Sets factors.
    *
    * @param FeedbackFactorDTO[]|null $factors  Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор.
    *
    * @return $this
    */
    public function setFactors(?array $factors): self
    {
        $this->factors = $factors;

        return $this;
    }



}


