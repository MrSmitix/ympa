<?php
/**
 * GoodsFeedbackDescriptionDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GoodsFeedbackDescriptionDTO model.
 *
 * Текстовая часть отзыва.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GoodsFeedbackDescriptionDTO 
{
        /**
     * Описание плюсов товара в отзыве.
     *
     * @var string|null
     * @SerializedName("advantages")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $advantages = null;

    /**
     * Описание минусов товара в отзыве.
     *
     * @var string|null
     * @SerializedName("disadvantages")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $disadvantages = null;

    /**
     * Комментарий в отзыве.
     *
     * @var string|null
     * @SerializedName("comment")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $comment = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->advantages = array_key_exists('advantages', $data) ? $data['advantages'] : $this->advantages;
            $this->disadvantages = array_key_exists('disadvantages', $data) ? $data['disadvantages'] : $this->disadvantages;
            $this->comment = array_key_exists('comment', $data) ? $data['comment'] : $this->comment;
        }
    }

    /**
     * Gets advantages.
     *
     * @return string|null
     */
    public function getAdvantages(): ?string
    {
        return $this->advantages;
    }

    /**
    * Sets advantages.
    *
    * @param string|null $advantages  Описание плюсов товара в отзыве.
    *
    * @return $this
    */
    public function setAdvantages(?string $advantages = null): self
    {
        $this->advantages = $advantages;

        return $this;
    }




    /**
     * Gets disadvantages.
     *
     * @return string|null
     */
    public function getDisadvantages(): ?string
    {
        return $this->disadvantages;
    }

    /**
    * Sets disadvantages.
    *
    * @param string|null $disadvantages  Описание минусов товара в отзыве.
    *
    * @return $this
    */
    public function setDisadvantages(?string $disadvantages = null): self
    {
        $this->disadvantages = $disadvantages;

        return $this;
    }




    /**
     * Gets comment.
     *
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->comment;
    }

    /**
    * Sets comment.
    *
    * @param string|null $comment  Комментарий в отзыве.
    *
    * @return $this
    */
    public function setComment(?string $comment = null): self
    {
        $this->comment = $comment;

        return $this;
    }



}


