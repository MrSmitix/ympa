<?php
/**
 * UpdateOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the UpdateOfferDTO model.
 *
 * Параметры товара.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class UpdateOfferDTO 
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $offerId = null;

    /**
     * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $name = null;

    /**
     * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     *
     * @var int|null
     * @SerializedName("marketCategoryId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $marketCategoryId = null;

    /**
     * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.
     *
     * @var string|null
     * @SerializedName("category")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $category = null;

    /**
     * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)
     *
     * @var string[]|null
     * @SerializedName("pictures")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $pictures = null;

    /**
     * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)
     *
     * @var string[]|null
     * @SerializedName("videos")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(max: 6)]
    protected ?array $videos = null;

    /**
     * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся.
     *
     * @var OfferManualDTO[]|null
     * @SerializedName("manuals")
     * @Type("array<OpenAPI\Server\Model\OfferManualDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OfferManualDTO"),
    ])]
    #[Assert\Count(max: 6)]
    protected ?array $manuals = null;

    /**
     * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     *
     * @var string|null
     * @SerializedName("vendor")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $vendor = null;

    /**
     * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
     *
     * @var string[]|null
     * @SerializedName("barcodes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $barcodes = null;

    /**
     * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
     *
     * @var string|null
     * @SerializedName("description")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 6000)]
    protected ?string $description = null;

    /**
     * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).
     *
     * @var string[]|null
     * @SerializedName("manufacturerCountries")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $manufacturerCountries = null;

    /**
     * @var OfferWeightDimensionsDTO|null
     * @SerializedName("weightDimensions")
     * @Type("OpenAPI\Server\Model\OfferWeightDimensionsDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OfferWeightDimensionsDTO")]
    protected ?OfferWeightDimensionsDTO $weightDimensions = null;

    /**
     * Артикул товара от производителя.
     *
     * @var string|null
     * @SerializedName("vendorCode")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $vendorCode = null;

    /**
     * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов.
     *
     * @var string[]|null
     * @SerializedName("tags")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $tags = null;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("shelfLife")
     * @Type("OpenAPI\Server\Model\TimePeriodDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\TimePeriodDTO")]
    protected ?TimePeriodDTO $shelfLife = null;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("lifeTime")
     * @Type("OpenAPI\Server\Model\TimePeriodDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\TimePeriodDTO")]
    protected ?TimePeriodDTO $lifeTime = null;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("guaranteePeriod")
     * @Type("OpenAPI\Server\Model\TimePeriodDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\TimePeriodDTO")]
    protected ?TimePeriodDTO $guaranteePeriod = null;

    /**
     * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.
     *
     * @var string|null
     * @SerializedName("customsCommodityCode")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $customsCommodityCode = null;

    /**
     * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).
     *
     * @var string[]|null
     * @SerializedName("certificates")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $certificates = null;

    /**
     * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.
     *
     * @var int|null
     * @SerializedName("boxCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $boxCount = null;

    /**
     * @var OfferConditionDTO|null
     * @SerializedName("condition")
     * @Type("OpenAPI\Server\Model\OfferConditionDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OfferConditionDTO")]
    protected ?OfferConditionDTO $condition = null;

    /**
     * @var OfferType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    protected ?OfferType $type = null;

    /**
     * Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)
     *
     * @var bool|null
     * @SerializedName("downloadable")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $downloadable = null;

    /**
     * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.
     *
     * @var bool|null
     * @SerializedName("adult")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $adult = null;

    /**
     * @var AgeDTO|null
     * @SerializedName("age")
     * @Type("OpenAPI\Server\Model\AgeDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\AgeDTO")]
    protected ?AgeDTO $age = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.
     *
     * @var OfferParamDTO[]|null
     * @SerializedName("params")
     * @Type("array<OpenAPI\Server\Model\OfferParamDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OfferParamDTO"),
    ])]
    protected ?array $params = null;

    /**
     * Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300.
     *
     * @var ParameterValueDTO[]|null
     * @SerializedName("parameterValues")
     * @Type("array<OpenAPI\Server\Model\ParameterValueDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ParameterValueDTO"),
    ])]
    #[Assert\Count(max: 300)]
    protected ?array $parameterValues = null;

    /**
     * @var UpdatePriceWithDiscountDTO|null
     * @SerializedName("basicPrice")
     * @Type("OpenAPI\Server\Model\UpdatePriceWithDiscountDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\UpdatePriceWithDiscountDTO")]
    protected ?UpdatePriceWithDiscountDTO $basicPrice = null;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("purchasePrice")
     * @Type("OpenAPI\Server\Model\BasePriceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\BasePriceDTO")]
    protected ?BasePriceDTO $purchasePrice = null;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("additionalExpenses")
     * @Type("OpenAPI\Server\Model\BasePriceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\BasePriceDTO")]
    protected ?BasePriceDTO $additionalExpenses = null;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("cofinancePrice")
     * @Type("OpenAPI\Server\Model\BasePriceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\BasePriceDTO")]
    protected ?BasePriceDTO $cofinancePrice = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->offerId = array_key_exists('offerId', $data) ? $data['offerId'] : $this->offerId;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->marketCategoryId = array_key_exists('marketCategoryId', $data) ? $data['marketCategoryId'] : $this->marketCategoryId;
            $this->category = array_key_exists('category', $data) ? $data['category'] : $this->category;
            $this->pictures = array_key_exists('pictures', $data) ? $data['pictures'] : $this->pictures;
            $this->videos = array_key_exists('videos', $data) ? $data['videos'] : $this->videos;
            $this->manuals = array_key_exists('manuals', $data) ? $data['manuals'] : $this->manuals;
            $this->vendor = array_key_exists('vendor', $data) ? $data['vendor'] : $this->vendor;
            $this->barcodes = array_key_exists('barcodes', $data) ? $data['barcodes'] : $this->barcodes;
            $this->description = array_key_exists('description', $data) ? $data['description'] : $this->description;
            $this->manufacturerCountries = array_key_exists('manufacturerCountries', $data) ? $data['manufacturerCountries'] : $this->manufacturerCountries;
            $this->weightDimensions = array_key_exists('weightDimensions', $data) ? $data['weightDimensions'] : $this->weightDimensions;
            $this->vendorCode = array_key_exists('vendorCode', $data) ? $data['vendorCode'] : $this->vendorCode;
            $this->tags = array_key_exists('tags', $data) ? $data['tags'] : $this->tags;
            $this->shelfLife = array_key_exists('shelfLife', $data) ? $data['shelfLife'] : $this->shelfLife;
            $this->lifeTime = array_key_exists('lifeTime', $data) ? $data['lifeTime'] : $this->lifeTime;
            $this->guaranteePeriod = array_key_exists('guaranteePeriod', $data) ? $data['guaranteePeriod'] : $this->guaranteePeriod;
            $this->customsCommodityCode = array_key_exists('customsCommodityCode', $data) ? $data['customsCommodityCode'] : $this->customsCommodityCode;
            $this->certificates = array_key_exists('certificates', $data) ? $data['certificates'] : $this->certificates;
            $this->boxCount = array_key_exists('boxCount', $data) ? $data['boxCount'] : $this->boxCount;
            $this->condition = array_key_exists('condition', $data) ? $data['condition'] : $this->condition;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->downloadable = array_key_exists('downloadable', $data) ? $data['downloadable'] : $this->downloadable;
            $this->adult = array_key_exists('adult', $data) ? $data['adult'] : $this->adult;
            $this->age = array_key_exists('age', $data) ? $data['age'] : $this->age;
            $this->params = array_key_exists('params', $data) ? $data['params'] : $this->params;
            $this->parameterValues = array_key_exists('parameterValues', $data) ? $data['parameterValues'] : $this->parameterValues;
            $this->basicPrice = array_key_exists('basicPrice', $data) ? $data['basicPrice'] : $this->basicPrice;
            $this->purchasePrice = array_key_exists('purchasePrice', $data) ? $data['purchasePrice'] : $this->purchasePrice;
            $this->additionalExpenses = array_key_exists('additionalExpenses', $data) ? $data['additionalExpenses'] : $this->additionalExpenses;
            $this->cofinancePrice = array_key_exists('cofinancePrice', $data) ? $data['cofinancePrice'] : $this->cofinancePrice;
        }
    }

    /**
     * Gets offerId.
     *
     * @return string|null
     */
    public function getOfferId(): ?string
    {
        return $this->offerId;
    }

    /**
    * Sets offerId.
    *
    * @param string|null $offerId  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setOfferId(?string $offerId): self
    {
        $this->offerId = $offerId;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets marketCategoryId.
     *
     * @return int|null
     */
    public function getMarketCategoryId(): ?int
    {
        return $this->marketCategoryId;
    }

    /**
    * Sets marketCategoryId.
    *
    * @param int|null $marketCategoryId  Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md).
    *
    * @return $this
    */
    public function setMarketCategoryId(?int $marketCategoryId = null): self
    {
        $this->marketCategoryId = $marketCategoryId;

        return $this;
    }




    /**
     * Gets category.
     *
     * @return string|null
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
    * Sets category.
    *
    * @param string|null $category  Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.
    *
    * @return $this
    */
    public function setCategory(?string $category = null): self
    {
        $this->category = $category;

        return $this;
    }




    /**
     * Gets pictures.
     *
     * @return string[]|null
     */
    public function getPictures(): ?array
    {
        return $this->pictures;
    }

    /**
    * Sets pictures.
    *
    * @param string[]|null $pictures  Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html)
    *
    * @return $this
    */
    public function setPictures(?array $pictures = null): self
    {
        $this->pictures = $pictures;

        return $this;
    }




    /**
     * Gets videos.
     *
     * @return string[]|null
     */
    public function getVideos(): ?array
    {
        return $this->videos;
    }

    /**
    * Sets videos.
    *
    * @param string[]|null $videos  Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html)
    *
    * @return $this
    */
    public function setVideos(?array $videos = null): self
    {
        $this->videos = $videos;

        return $this;
    }




    /**
     * Gets manuals.
     *
     * @return OfferManualDTO[]|null
     */
    public function getManuals(): ?array
    {
        return $this->manuals;
    }

    /**
    * Sets manuals.
    *
    * @param OfferManualDTO[]|null $manuals  Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся.
    *
    * @return $this
    */
    public function setManuals(?array $manuals = null): self
    {
        $this->manuals = $manuals;

        return $this;
    }




    /**
     * Gets vendor.
     *
     * @return string|null
     */
    public function getVendor(): ?string
    {
        return $this->vendor;
    }

    /**
    * Sets vendor.
    *
    * @param string|null $vendor  Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    *
    * @return $this
    */
    public function setVendor(?string $vendor = null): self
    {
        $this->vendor = $vendor;

        return $this;
    }




    /**
     * Gets barcodes.
     *
     * @return string[]|null
     */
    public function getBarcodes(): ?array
    {
        return $this->barcodes;
    }

    /**
    * Sets barcodes.
    *
    * @param string[]|null $barcodes  Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
    *
    * @return $this
    */
    public function setBarcodes(?array $barcodes = null): self
    {
        $this->barcodes = $barcodes;

        return $this;
    }




    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
    * Sets description.
    *
    * @param string|null $description  Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
    *
    * @return $this
    */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }




    /**
     * Gets manufacturerCountries.
     *
     * @return string[]|null
     */
    public function getManufacturerCountries(): ?array
    {
        return $this->manufacturerCountries;
    }

    /**
    * Sets manufacturerCountries.
    *
    * @param string[]|null $manufacturerCountries  Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx).
    *
    * @return $this
    */
    public function setManufacturerCountries(?array $manufacturerCountries = null): self
    {
        $this->manufacturerCountries = $manufacturerCountries;

        return $this;
    }




    /**
     * Gets weightDimensions.
     *
     * @return OfferWeightDimensionsDTO|null
     */
    public function getWeightDimensions(): ?OfferWeightDimensionsDTO
    {
        return $this->weightDimensions;
    }

    /**
    * Sets weightDimensions.
    *
    * @param OfferWeightDimensionsDTO|null $weightDimensions
    *
    * @return $this
    */
    public function setWeightDimensions(?OfferWeightDimensionsDTO $weightDimensions = null): self
    {
        $this->weightDimensions = $weightDimensions;

        return $this;
    }




    /**
     * Gets vendorCode.
     *
     * @return string|null
     */
    public function getVendorCode(): ?string
    {
        return $this->vendorCode;
    }

    /**
    * Sets vendorCode.
    *
    * @param string|null $vendorCode  Артикул товара от производителя.
    *
    * @return $this
    */
    public function setVendorCode(?string $vendorCode = null): self
    {
        $this->vendorCode = $vendorCode;

        return $this;
    }




    /**
     * Gets tags.
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        return $this->tags;
    }

    /**
    * Sets tags.
    *
    * @param string[]|null $tags  Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов.
    *
    * @return $this
    */
    public function setTags(?array $tags = null): self
    {
        $this->tags = $tags;

        return $this;
    }




    /**
     * Gets shelfLife.
     *
     * @return TimePeriodDTO|null
     */
    public function getShelfLife(): ?TimePeriodDTO
    {
        return $this->shelfLife;
    }

    /**
    * Sets shelfLife.
    *
    * @param TimePeriodDTO|null $shelfLife
    *
    * @return $this
    */
    public function setShelfLife(?TimePeriodDTO $shelfLife = null): self
    {
        $this->shelfLife = $shelfLife;

        return $this;
    }




    /**
     * Gets lifeTime.
     *
     * @return TimePeriodDTO|null
     */
    public function getLifeTime(): ?TimePeriodDTO
    {
        return $this->lifeTime;
    }

    /**
    * Sets lifeTime.
    *
    * @param TimePeriodDTO|null $lifeTime
    *
    * @return $this
    */
    public function setLifeTime(?TimePeriodDTO $lifeTime = null): self
    {
        $this->lifeTime = $lifeTime;

        return $this;
    }




    /**
     * Gets guaranteePeriod.
     *
     * @return TimePeriodDTO|null
     */
    public function getGuaranteePeriod(): ?TimePeriodDTO
    {
        return $this->guaranteePeriod;
    }

    /**
    * Sets guaranteePeriod.
    *
    * @param TimePeriodDTO|null $guaranteePeriod
    *
    * @return $this
    */
    public function setGuaranteePeriod(?TimePeriodDTO $guaranteePeriod = null): self
    {
        $this->guaranteePeriod = $guaranteePeriod;

        return $this;
    }




    /**
     * Gets customsCommodityCode.
     *
     * @return string|null
     */
    public function getCustomsCommodityCode(): ?string
    {
        return $this->customsCommodityCode;
    }

    /**
    * Sets customsCommodityCode.
    *
    * @param string|null $customsCommodityCode  Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть.
    *
    * @return $this
    */
    public function setCustomsCommodityCode(?string $customsCommodityCode = null): self
    {
        $this->customsCommodityCode = $customsCommodityCode;

        return $this;
    }




    /**
     * Gets certificates.
     *
     * @return string[]|null
     */
    public function getCertificates(): ?array
    {
        return $this->certificates;
    }

    /**
    * Sets certificates.
    *
    * @param string[]|null $certificates  Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html).
    *
    * @return $this
    */
    public function setCertificates(?array $certificates = null): self
    {
        $this->certificates = $certificates;

        return $this;
    }




    /**
     * Gets boxCount.
     *
     * @return int|null
     */
    public function getBoxCount(): ?int
    {
        return $this->boxCount;
    }

    /**
    * Sets boxCount.
    *
    * @param int|null $boxCount  Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр.
    *
    * @return $this
    */
    public function setBoxCount(?int $boxCount = null): self
    {
        $this->boxCount = $boxCount;

        return $this;
    }




    /**
     * Gets condition.
     *
     * @return OfferConditionDTO|null
     */
    public function getCondition(): ?OfferConditionDTO
    {
        return $this->condition;
    }

    /**
    * Sets condition.
    *
    * @param OfferConditionDTO|null $condition
    *
    * @return $this
    */
    public function setCondition(?OfferConditionDTO $condition = null): self
    {
        $this->condition = $condition;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return OfferType|null
     */
    public function getType(): ?OfferType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param OfferType|null $type
    *
    * @return $this
    */
    public function setType(?OfferType $type = null): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|OfferType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|OfferType|null $type = null): self
    {
        if (is_string($type)) {
            $type = OfferType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets downloadable.
     *
     * @return bool|null
     */
    public function isDownloadable(): ?bool
    {
        return $this->downloadable;
    }

    /**
    * Sets downloadable.
    *
    * @param bool|null $downloadable  Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md)
    *
    * @return $this
    */
    public function setDownloadable(?bool $downloadable = null): self
    {
        $this->downloadable = $downloadable;

        return $this;
    }




    /**
     * Gets adult.
     *
     * @return bool|null
     */
    public function isAdult(): ?bool
    {
        return $this->adult;
    }

    /**
    * Sets adult.
    *
    * @param bool|null $adult  Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей.
    *
    * @return $this
    */
    public function setAdult(?bool $adult = null): self
    {
        $this->adult = $adult;

        return $this;
    }




    /**
     * Gets age.
     *
     * @return AgeDTO|null
     */
    public function getAge(): ?AgeDTO
    {
        return $this->age;
    }

    /**
    * Sets age.
    *
    * @param AgeDTO|null $age
    *
    * @return $this
    */
    public function setAge(?AgeDTO $age = null): self
    {
        $this->age = $age;

        return $this;
    }




    /**
     * Gets params.
     *
     * @return OfferParamDTO[]|null
     */
    public function getParams(): ?array
    {
        return $this->params;
    }

    /**
    * Sets params.
    *
    * @param OfferParamDTO[]|null $params  {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви.
    *
    * @return $this
    */
    public function setParams(?array $params = null): self
    {
        $this->params = $params;

        return $this;
    }




    /**
     * Gets parameterValues.
     *
     * @return ParameterValueDTO[]|null
     */
    public function getParameterValues(): ?array
    {
        return $this->parameterValues;
    }

    /**
    * Sets parameterValues.
    *
    * @param ParameterValueDTO[]|null $parameterValues  Список характеристик с их значениями.  С `parameterValues` обязательно передавайте `marketCategoryId` — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее `parameterId` с пустым `value`.  Максимальное количество характеристик — 300.
    *
    * @return $this
    */
    public function setParameterValues(?array $parameterValues = null): self
    {
        $this->parameterValues = $parameterValues;

        return $this;
    }




    /**
     * Gets basicPrice.
     *
     * @return UpdatePriceWithDiscountDTO|null
     */
    public function getBasicPrice(): ?UpdatePriceWithDiscountDTO
    {
        return $this->basicPrice;
    }

    /**
    * Sets basicPrice.
    *
    * @param UpdatePriceWithDiscountDTO|null $basicPrice
    *
    * @return $this
    */
    public function setBasicPrice(?UpdatePriceWithDiscountDTO $basicPrice = null): self
    {
        $this->basicPrice = $basicPrice;

        return $this;
    }




    /**
     * Gets purchasePrice.
     *
     * @return BasePriceDTO|null
     */
    public function getPurchasePrice(): ?BasePriceDTO
    {
        return $this->purchasePrice;
    }

    /**
    * Sets purchasePrice.
    *
    * @param BasePriceDTO|null $purchasePrice
    *
    * @return $this
    */
    public function setPurchasePrice(?BasePriceDTO $purchasePrice = null): self
    {
        $this->purchasePrice = $purchasePrice;

        return $this;
    }




    /**
     * Gets additionalExpenses.
     *
     * @return BasePriceDTO|null
     */
    public function getAdditionalExpenses(): ?BasePriceDTO
    {
        return $this->additionalExpenses;
    }

    /**
    * Sets additionalExpenses.
    *
    * @param BasePriceDTO|null $additionalExpenses
    *
    * @return $this
    */
    public function setAdditionalExpenses(?BasePriceDTO $additionalExpenses = null): self
    {
        $this->additionalExpenses = $additionalExpenses;

        return $this;
    }




    /**
     * Gets cofinancePrice.
     *
     * @return BasePriceDTO|null
     */
    public function getCofinancePrice(): ?BasePriceDTO
    {
        return $this->cofinancePrice;
    }

    /**
    * Sets cofinancePrice.
    *
    * @param BasePriceDTO|null $cofinancePrice
    *
    * @return $this
    */
    public function setCofinancePrice(?BasePriceDTO $cofinancePrice = null): self
    {
        $this->cofinancePrice = $cofinancePrice;

        return $this;
    }



}


