<?php
/**
 * UpdateMappingsOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the UpdateMappingsOfferDTO model.
 *
 * Информация о товарах в каталоге.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class UpdateMappingsOfferDTO  implements \JsonSerializable
{
        /**
     * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    public ?string $name;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $shopSku;

    /**
     * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.
     *
     * @var string|null
     * @SerializedName("category")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $category;

    /**
     * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     *
     * @var string|null
     * @SerializedName("vendor")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $vendor;

    /**
     * Артикул товара от производителя.
     *
     * @var string|null
     * @SerializedName("vendorCode")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $vendorCode;

    /**
     * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 6000
     * )
     */
    public ?string $description;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $id;

    /**
     * Идентификатор фида.
     *
     * @var int|null
     * @SerializedName("feedId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $feedId;

    /**
     * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
     *
     * @var string[]|null
     * @SerializedName("barcodes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $barcodes;

    /**
     * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.
     *
     * @var string[]|null
     * @SerializedName("urls")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $urls;

    /**
     * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;.
     *
     * @var string[]|null
     * @SerializedName("pictures")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $pictures;

    /**
     * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.
     *
     * @var string|null
     * @SerializedName("manufacturer")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $manufacturer;

    /**
     * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.
     *
     * @var string[]|null
     * @SerializedName("manufacturerCountries")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $manufacturerCountries;

    /**
     * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.
     *
     * @var int|null
     * @SerializedName("minShipment")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $minShipment;

    /**
     * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.
     *
     * @var int|null
     * @SerializedName("transportUnitSize")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $transportUnitSize;

    /**
     * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.
     *
     * @var int|null
     * @SerializedName("quantumOfSupply")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $quantumOfSupply;

    /**
     * Срок, за который продавец поставляет товары на склад, в днях.
     *
     * @var int|null
     * @SerializedName("deliveryDurationDays")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $deliveryDurationDays;

    /**
     * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.
     *
     * @var int|null
     * @SerializedName("boxCount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $boxCount;

    /**
     * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.
     *
     * @var string[]|null
     * @SerializedName("customsCommodityCodes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $customsCommodityCodes;

    /**
     * @var OfferWeightDimensionsDTO|null
     * @SerializedName("weightDimensions")
     * @Assert\Type("\OpenAPIServer\Model\OfferWeightDimensionsDTO")
     * @Type("\OpenAPIServer\Model\OfferWeightDimensionsDTO")
     */
    public ?OfferWeightDimensionsDTO $weightDimensions;

    /**
     * Дни недели, в которые продавец поставляет товары на склад.
     *
     * @var DayOfWeekType[]|null
     * @SerializedName("supplyScheduleDays")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\DayOfWeekType")
     * })
     * @Accessor(getter="getSerializedSupplyScheduleDays")
     * @Type("array<string>")
     */
    public ?array $supplyScheduleDays;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.
     *
     * @var int|null
     * @SerializedName("shelfLifeDays")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $shelfLifeDays;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.
     *
     * @var int|null
     * @SerializedName("lifeTimeDays")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $lifeTimeDays;

    /**
     * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.
     *
     * @var int|null
     * @SerializedName("guaranteePeriodDays")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $guaranteePeriodDays;

    /**
     * @var OfferProcessingStateDTO|null
     * @SerializedName("processingState")
     * @Assert\Type("\OpenAPIServer\Model\OfferProcessingStateDTO")
     * @Type("\OpenAPIServer\Model\OfferProcessingStateDTO")
     */
    public ?OfferProcessingStateDTO $processingState;

    /**
     * @var OfferAvailabilityStatusType|null
     * @SerializedName("availability")
        * @Accessor(getter="getSerializedAvailability")
        * @Type("string")
     */
    public ?OfferAvailabilityStatusType $availability;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("shelfLife")
     * @Assert\Type("\OpenAPIServer\Model\TimePeriodDTO")
     * @Type("\OpenAPIServer\Model\TimePeriodDTO")
     */
    public ?TimePeriodDTO $shelfLife;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("lifeTime")
     * @Assert\Type("\OpenAPIServer\Model\TimePeriodDTO")
     * @Type("\OpenAPIServer\Model\TimePeriodDTO")
     */
    public ?TimePeriodDTO $lifeTime;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("guaranteePeriod")
     * @Assert\Type("\OpenAPIServer\Model\TimePeriodDTO")
     * @Type("\OpenAPIServer\Model\TimePeriodDTO")
     */
    public ?TimePeriodDTO $guaranteePeriod;

    /**
     * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)
     *
     * @var string|null
     * @SerializedName("certificate")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $certificate;

    /**
     * Constructor
     *
     * @param string|null $name
     * @param string|null $shopSku
     * @param string|null $category
     * @param string|null $vendor
     * @param string|null $vendorCode
     * @param string|null $description
     * @param string|null $id
     * @param int|null $feedId
     * @param string[]|null $barcodes
     * @param string[]|null $urls
     * @param string[]|null $pictures
     * @param string|null $manufacturer
     * @param string[]|null $manufacturerCountries
     * @param int|null $minShipment
     * @param int|null $transportUnitSize
     * @param int|null $quantumOfSupply
     * @param int|null $deliveryDurationDays
     * @param int|null $boxCount
     * @param string[]|null $customsCommodityCodes
     * @param OfferWeightDimensionsDTO|null $weightDimensions
     * @param DayOfWeekType[]|null $supplyScheduleDays
     * @param int|null $shelfLifeDays
     * @param int|null $lifeTimeDays
     * @param int|null $guaranteePeriodDays
     * @param OfferProcessingStateDTO|null $processingState
     * @param OfferAvailabilityStatusType|null $availability
     * @param TimePeriodDTO|null $shelfLife
     * @param TimePeriodDTO|null $lifeTime
     * @param TimePeriodDTO|null $guaranteePeriod
     * @param string|null $certificate
     */
    public function __construct(?string $name, ?string $shopSku, ?string $category, ?string $vendor, ?string $vendorCode, ?string $description, ?string $id, ?int $feedId, ?array $barcodes, ?array $urls, ?array $pictures, ?string $manufacturer, ?array $manufacturerCountries, ?int $minShipment, ?int $transportUnitSize, ?int $quantumOfSupply, ?int $deliveryDurationDays, ?int $boxCount, ?array $customsCommodityCodes, ?OfferWeightDimensionsDTO $weightDimensions, ?array $supplyScheduleDays, ?int $shelfLifeDays, ?int $lifeTimeDays, ?int $guaranteePeriodDays, ?OfferProcessingStateDTO $processingState, ?OfferAvailabilityStatusType $availability, ?TimePeriodDTO $shelfLife, ?TimePeriodDTO $lifeTime, ?TimePeriodDTO $guaranteePeriod, ?string $certificate)
    {
        $this->name = $name;
        $this->shopSku = $shopSku;
        $this->category = $category;
        $this->vendor = $vendor;
        $this->vendorCode = $vendorCode;
        $this->description = $description;
        $this->id = $id;
        $this->feedId = $feedId;
        $this->barcodes = $barcodes;
        $this->urls = $urls;
        $this->pictures = $pictures;
        $this->manufacturer = $manufacturer;
        $this->manufacturerCountries = $manufacturerCountries;
        $this->minShipment = $minShipment;
        $this->transportUnitSize = $transportUnitSize;
        $this->quantumOfSupply = $quantumOfSupply;
        $this->deliveryDurationDays = $deliveryDurationDays;
        $this->boxCount = $boxCount;
        $this->customsCommodityCodes = $customsCommodityCodes;
        $this->weightDimensions = $weightDimensions;
        $this->supplyScheduleDays = $supplyScheduleDays;
        $this->shelfLifeDays = $shelfLifeDays;
        $this->lifeTimeDays = $lifeTimeDays;
        $this->guaranteePeriodDays = $guaranteePeriodDays;
        $this->processingState = $processingState;
        $this->availability = $availability;
        $this->shelfLife = $shelfLife;
        $this->lifeTime = $lifeTime;
        $this->guaranteePeriod = $guaranteePeriod;
        $this->certificate = $certificate;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['name'] ?? null, 
            $data['shopSku'] ?? null, 
            $data['category'] ?? null, 
            $data['vendor'] ?? null, 
            $data['vendorCode'] ?? null, 
            $data['description'] ?? null, 
            $data['id'] ?? null, 
            $data['feedId'] ?? null, 
            $data['barcodes'] ?? null, 
            $data['urls'] ?? null, 
            $data['pictures'] ?? null, 
            $data['manufacturer'] ?? null, 
            $data['manufacturerCountries'] ?? null, 
            $data['minShipment'] ?? null, 
            $data['transportUnitSize'] ?? null, 
            $data['quantumOfSupply'] ?? null, 
            $data['deliveryDurationDays'] ?? null, 
            $data['boxCount'] ?? null, 
            $data['customsCommodityCodes'] ?? null, 
            isset($data['weightDimensions']) ? OfferWeightDimensionsDTO::fromArray($data['weightDimensions']) : null, 
            isset($data['supplyScheduleDays']) ? array_map(fn($item) => DayOfWeekType::tryFrom($item), $data['supplyScheduleDays']) : null, 
            $data['shelfLifeDays'] ?? null, 
            $data['lifeTimeDays'] ?? null, 
            $data['guaranteePeriodDays'] ?? null, 
            isset($data['processingState']) ? OfferProcessingStateDTO::fromArray($data['processingState']) : null, 
            isset($data['availability']) ? OfferAvailabilityStatusType::tryFrom($data['availability']) : null, 
            isset($data['shelfLife']) ? TimePeriodDTO::fromArray($data['shelfLife']) : null, 
            isset($data['lifeTime']) ? TimePeriodDTO::fromArray($data['lifeTime']) : null, 
            isset($data['guaranteePeriod']) ? TimePeriodDTO::fromArray($data['guaranteePeriod']) : null, 
            $data['certificate'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'name' => $this->name, 
            'shopSku' => $this->shopSku, 
            'category' => $this->category, 
            'vendor' => $this->vendor, 
            'vendorCode' => $this->vendorCode, 
            'description' => $this->description, 
            'id' => $this->id, 
            'feedId' => $this->feedId, 
            'barcodes' => $this->barcodes, 
            'urls' => $this->urls, 
            'pictures' => $this->pictures, 
            'manufacturer' => $this->manufacturer, 
            'manufacturerCountries' => $this->manufacturerCountries, 
            'minShipment' => $this->minShipment, 
            'transportUnitSize' => $this->transportUnitSize, 
            'quantumOfSupply' => $this->quantumOfSupply, 
            'deliveryDurationDays' => $this->deliveryDurationDays, 
            'boxCount' => $this->boxCount, 
            'customsCommodityCodes' => $this->customsCommodityCodes, 
            'weightDimensions' => $this->weightDimensions, 
            'supplyScheduleDays' => $this->supplyScheduleDays, 
            'shelfLifeDays' => $this->shelfLifeDays, 
            'lifeTimeDays' => $this->lifeTimeDays, 
            'guaranteePeriodDays' => $this->guaranteePeriodDays, 
            'processingState' => $this->processingState, 
            'availability' => $this->availability, 
            'shelfLife' => $this->shelfLife, 
            'lifeTime' => $this->lifeTime, 
            'guaranteePeriod' => $this->guaranteePeriod, 
            'certificate' => $this->certificate, 
        ];
    }
}


