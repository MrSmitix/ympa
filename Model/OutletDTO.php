<?php
/**
 * OutletDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OutletDTO model.
 *
 * Информация о точке продаж.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OutletDTO 
{
        /**
     * Название точки продаж.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var OutletType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?OutletType $type = null;

    /**
     * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;.
     *
     * @var string|null
     * @SerializedName("coords")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $coords = null;

    /**
     * Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж.
     *
     * @var bool|null
     * @SerializedName("isMain")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $isMain = null;

    /**
     * Идентификатор точки продаж, присвоенный магазином.
     *
     * @var string|null
     * @SerializedName("shopOutletCode")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $shopOutletCode = null;

    /**
     * @var OutletVisibilityType|null
     * @SerializedName("visibility")
    * @Accessor(getter="getSerializedVisibility", setter="setDeserializedVisibility")
    * @Type("string")
    */
    protected ?OutletVisibilityType $visibility = null;

    /**
     * @var OutletAddressDTO|null
     * @SerializedName("address")
     * @Type("OpenAPI\Server\Model\OutletAddressDTO")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\OutletAddressDTO")]
    protected ?OutletAddressDTO $address = null;

    /**
     * Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;.
     *
     * @var string[]|null
     * @SerializedName("phones")
     * @Type("array<string>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    #[Assert\Count(min: 1)]
    protected ?array $phones = null;

    /**
     * @var OutletWorkingScheduleDTO|null
     * @SerializedName("workingSchedule")
     * @Type("OpenAPI\Server\Model\OutletWorkingScheduleDTO")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\OutletWorkingScheduleDTO")]
    protected ?OutletWorkingScheduleDTO $workingSchedule = null;

    /**
     * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;.
     *
     * @var OutletDeliveryRuleDTO[]|null
     * @SerializedName("deliveryRules")
     * @Type("array<OpenAPI\Server\Model\OutletDeliveryRuleDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OutletDeliveryRuleDTO"),
    ])]
    protected ?array $deliveryRules = null;

    /**
     * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
     *
     * @var int|null
     * @SerializedName("storagePeriod")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $storagePeriod = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->coords = array_key_exists('coords', $data) ? $data['coords'] : $this->coords;
            $this->isMain = array_key_exists('isMain', $data) ? $data['isMain'] : $this->isMain;
            $this->shopOutletCode = array_key_exists('shopOutletCode', $data) ? $data['shopOutletCode'] : $this->shopOutletCode;
            $this->visibility = array_key_exists('visibility', $data) ? $data['visibility'] : $this->visibility;
            $this->address = array_key_exists('address', $data) ? $data['address'] : $this->address;
            $this->phones = array_key_exists('phones', $data) ? $data['phones'] : $this->phones;
            $this->workingSchedule = array_key_exists('workingSchedule', $data) ? $data['workingSchedule'] : $this->workingSchedule;
            $this->deliveryRules = array_key_exists('deliveryRules', $data) ? $data['deliveryRules'] : $this->deliveryRules;
            $this->storagePeriod = array_key_exists('storagePeriod', $data) ? $data['storagePeriod'] : $this->storagePeriod;
        }
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Название точки продаж.
    *
    * @return $this
    */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return OutletType|null
     */
    public function getType(): ?OutletType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param OutletType|null $type
    *
    * @return $this
    */
    public function setType(?OutletType $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|OutletType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|OutletType|null $type): self
    {
        if (is_string($type)) {
            $type = OutletType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets coords.
     *
     * @return string|null
     */
    public function getCoords(): ?string
    {
        return $this->coords;
    }

    /**
    * Sets coords.
    *
    * @param string|null $coords  Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`.
    *
    * @return $this
    */
    public function setCoords(?string $coords = null): self
    {
        $this->coords = $coords;

        return $this;
    }




    /**
     * Gets isMain.
     *
     * @return bool|null
     */
    public function isIsMain(): ?bool
    {
        return $this->isMain;
    }

    /**
    * Sets isMain.
    *
    * @param bool|null $isMain  Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж.
    *
    * @return $this
    */
    public function setIsMain(?bool $isMain = null): self
    {
        $this->isMain = $isMain;

        return $this;
    }




    /**
     * Gets shopOutletCode.
     *
     * @return string|null
     */
    public function getShopOutletCode(): ?string
    {
        return $this->shopOutletCode;
    }

    /**
    * Sets shopOutletCode.
    *
    * @param string|null $shopOutletCode  Идентификатор точки продаж, присвоенный магазином.
    *
    * @return $this
    */
    public function setShopOutletCode(?string $shopOutletCode = null): self
    {
        $this->shopOutletCode = $shopOutletCode;

        return $this;
    }




    /**
     * Gets visibility.
     *
     * @return OutletVisibilityType|null
     */
    public function getVisibility(): ?OutletVisibilityType
    {
        return $this->visibility;
    }

    /**
    * Sets visibility.
    *
    * @param OutletVisibilityType|null $visibility
    *
    * @return $this
    */
    public function setVisibility(?OutletVisibilityType $visibility = null): self
    {
        $this->visibility = $visibility;

        return $this;
    }

    /**
    * Gets visibility for serialization.
    *
    * @return string|null
    */
    public function getSerializedVisibility(): string|null
    {
        return $this->visibility?->value ? (string) $this->visibility->value : null;
    }

    /**
    * Sets visibility.
    *
    * @param string|OutletVisibilityType|null $visibility
    *
    * @return $this
    */
    public function setDeserializedVisibility(string|OutletVisibilityType|null $visibility = null): self
    {
        if (is_string($visibility)) {
            $visibility = OutletVisibilityType::tryFrom($visibility);
        }

        $this->visibility = $visibility;

        return $this;
    }



    /**
     * Gets address.
     *
     * @return OutletAddressDTO|null
     */
    public function getAddress(): ?OutletAddressDTO
    {
        return $this->address;
    }

    /**
    * Sets address.
    *
    * @param OutletAddressDTO|null $address
    *
    * @return $this
    */
    public function setAddress(?OutletAddressDTO $address): self
    {
        $this->address = $address;

        return $this;
    }




    /**
     * Gets phones.
     *
     * @return string[]|null
     */
    public function getPhones(): ?array
    {
        return $this->phones;
    }

    /**
    * Sets phones.
    *
    * @param string[]|null $phones  Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`.
    *
    * @return $this
    */
    public function setPhones(?array $phones): self
    {
        $this->phones = $phones;

        return $this;
    }




    /**
     * Gets workingSchedule.
     *
     * @return OutletWorkingScheduleDTO|null
     */
    public function getWorkingSchedule(): ?OutletWorkingScheduleDTO
    {
        return $this->workingSchedule;
    }

    /**
    * Sets workingSchedule.
    *
    * @param OutletWorkingScheduleDTO|null $workingSchedule
    *
    * @return $this
    */
    public function setWorkingSchedule(?OutletWorkingScheduleDTO $workingSchedule): self
    {
        $this->workingSchedule = $workingSchedule;

        return $this;
    }




    /**
     * Gets deliveryRules.
     *
     * @return OutletDeliveryRuleDTO[]|null
     */
    public function getDeliveryRules(): ?array
    {
        return $this->deliveryRules;
    }

    /**
    * Sets deliveryRules.
    *
    * @param OutletDeliveryRuleDTO[]|null $deliveryRules  Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`.
    *
    * @return $this
    */
    public function setDeliveryRules(?array $deliveryRules = null): self
    {
        $this->deliveryRules = $deliveryRules;

        return $this;
    }




    /**
     * Gets storagePeriod.
     *
     * @return int|null
     */
    public function getStoragePeriod(): ?int
    {
        return $this->storagePeriod;
    }

    /**
    * Sets storagePeriod.
    *
    * @param int|null $storagePeriod  Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
    *
    * @return $this
    */
    public function setStoragePeriod(?int $storagePeriod = null): self
    {
        $this->storagePeriod = $storagePeriod;

        return $this;
    }



}


