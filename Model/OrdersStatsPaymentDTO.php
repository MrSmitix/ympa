<?php
/**
 * OrdersStatsPaymentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrdersStatsPaymentDTO model.
 *
 * Информация о денежных переводах по заказу.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrdersStatsPaymentDTO  implements \JsonSerializable
{
        /**
     * Идентификатор денежного перевода.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $id;

    /**
     * Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("date")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $date;

    /**
     * @var OrdersStatsPaymentType|null
     * @SerializedName("type")
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public ?OrdersStatsPaymentType $type;

    /**
     * @var OrdersStatsPaymentSourceType|null
     * @SerializedName("source")
        * @Accessor(getter="getSerializedSource")
        * @Type("string")
     */
    public ?OrdersStatsPaymentSourceType $source;

    /**
     * Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.
     *
     * @var float|null
     * @SerializedName("total")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $total;

    /**
     * @var OrdersStatsPaymentOrderDTO|null
     * @SerializedName("paymentOrder")
     * @Assert\Type("\OpenAPIServer\Model\OrdersStatsPaymentOrderDTO")
     * @Type("\OpenAPIServer\Model\OrdersStatsPaymentOrderDTO")
     */
    public ?OrdersStatsPaymentOrderDTO $paymentOrder;

    /**
     * Constructor
     *
     * @param string|null $id
     * @param \DateTime|null $date
     * @param OrdersStatsPaymentType|null $type
     * @param OrdersStatsPaymentSourceType|null $source
     * @param float|null $total
     * @param OrdersStatsPaymentOrderDTO|null $paymentOrder
     */
    public function __construct(?string $id, ?\DateTime $date, ?OrdersStatsPaymentType $type, ?OrdersStatsPaymentSourceType $source, ?float $total, ?OrdersStatsPaymentOrderDTO $paymentOrder)
    {
        $this->id = $id;
        $this->date = $date;
        $this->type = $type;
        $this->source = $source;
        $this->total = $total;
        $this->paymentOrder = $paymentOrder;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['date'] ?? null, 
            isset($data['type']) ? OrdersStatsPaymentType::tryFrom($data['type']) : null, 
            isset($data['source']) ? OrdersStatsPaymentSourceType::tryFrom($data['source']) : null, 
            $data['total'] ?? null, 
            isset($data['paymentOrder']) ? OrdersStatsPaymentOrderDTO::fromArray($data['paymentOrder']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'date' => $this->date, 
            'type' => $this->type, 
            'source' => $this->source, 
            'total' => $this->total, 
            'paymentOrder' => $this->paymentOrder, 
        ];
    }
}


