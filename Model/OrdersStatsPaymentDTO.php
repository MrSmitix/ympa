<?php
/**
 * OrdersStatsPaymentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrdersStatsPaymentDTO model.
 *
 * Информация о денежных переводах по заказу.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrdersStatsPaymentDTO 
{
        /**
     * Идентификатор денежного перевода.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $id = null;

    /**
     * Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("date")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $date = null;

    /**
     * @var OrdersStatsPaymentType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    protected ?OrdersStatsPaymentType $type = null;

    /**
     * @var OrdersStatsPaymentSourceType|null
     * @SerializedName("source")
    * @Accessor(getter="getSerializedSource", setter="setDeserializedSource")
    * @Type("string")
    */
    protected ?OrdersStatsPaymentSourceType $source = null;

    /**
     * Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.
     *
     * @var float|null
     * @SerializedName("total")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $total = null;

    /**
     * @var OrdersStatsPaymentOrderDTO|null
     * @SerializedName("paymentOrder")
     * @Type("OpenAPI\Server\Model\OrdersStatsPaymentOrderDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OrdersStatsPaymentOrderDTO")]
    protected ?OrdersStatsPaymentOrderDTO $paymentOrder = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->date = array_key_exists('date', $data) ? $data['date'] : $this->date;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->source = array_key_exists('source', $data) ? $data['source'] : $this->source;
            $this->total = array_key_exists('total', $data) ? $data['total'] : $this->total;
            $this->paymentOrder = array_key_exists('paymentOrder', $data) ? $data['paymentOrder'] : $this->paymentOrder;
        }
    }

    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  Идентификатор денежного перевода.
    *
    * @return $this
    */
    public function setId(?string $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets date.
     *
     * @return \DateTime|null
     */
    public function getDate(): ?\DateTime
    {
        return $this->date;
    }

    /**
    * Sets date.
    *
    * @param \DateTime|null $date  Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`.
    *
    * @return $this
    */
    public function setDate(?\DateTime $date = null): self
    {
        $this->date = $date;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return OrdersStatsPaymentType|null
     */
    public function getType(): ?OrdersStatsPaymentType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param OrdersStatsPaymentType|null $type
    *
    * @return $this
    */
    public function setType(?OrdersStatsPaymentType $type = null): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|OrdersStatsPaymentType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|OrdersStatsPaymentType|null $type = null): self
    {
        if (is_string($type)) {
            $type = OrdersStatsPaymentType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets source.
     *
     * @return OrdersStatsPaymentSourceType|null
     */
    public function getSource(): ?OrdersStatsPaymentSourceType
    {
        return $this->source;
    }

    /**
    * Sets source.
    *
    * @param OrdersStatsPaymentSourceType|null $source
    *
    * @return $this
    */
    public function setSource(?OrdersStatsPaymentSourceType $source = null): self
    {
        $this->source = $source;

        return $this;
    }

    /**
    * Gets source for serialization.
    *
    * @return string|null
    */
    public function getSerializedSource(): string|null
    {
        return $this->source?->value ? (string) $this->source->value : null;
    }

    /**
    * Sets source.
    *
    * @param string|OrdersStatsPaymentSourceType|null $source
    *
    * @return $this
    */
    public function setDeserializedSource(string|OrdersStatsPaymentSourceType|null $source = null): self
    {
        if (is_string($source)) {
            $source = OrdersStatsPaymentSourceType::tryFrom($source);
        }

        $this->source = $source;

        return $this;
    }



    /**
     * Gets total.
     *
     * @return float|null
     */
    public function getTotal(): ?float
    {
        return $this->total;
    }

    /**
    * Sets total.
    *
    * @param float|null $total  Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой.
    *
    * @return $this
    */
    public function setTotal(?float $total = null): self
    {
        $this->total = $total;

        return $this;
    }




    /**
     * Gets paymentOrder.
     *
     * @return OrdersStatsPaymentOrderDTO|null
     */
    public function getPaymentOrder(): ?OrdersStatsPaymentOrderDTO
    {
        return $this->paymentOrder;
    }

    /**
    * Sets paymentOrder.
    *
    * @param OrdersStatsPaymentOrderDTO|null $paymentOrder
    *
    * @return $this
    */
    public function setPaymentOrder(?OrdersStatsPaymentOrderDTO $paymentOrder = null): self
    {
        $this->paymentOrder = $paymentOrder;

        return $this;
    }



}


