<?php
/**
 * OrderDeliveryAddressDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderDeliveryAddressDTO model.
 *
 * Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи).
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderDeliveryAddressDTO  implements \JsonSerializable
{
        /**
     * Страна.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("country")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $country;

    /**
     * Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;).
     *
     * @var string|null
     * @SerializedName("postcode")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $postcode;

    /**
     * Город или населенный пункт.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("city")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $city;

    /**
     * Район.
     *
     * @var string|null
     * @SerializedName("district")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $district;

    /**
     * Станция метро.
     *
     * @var string|null
     * @SerializedName("subway")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $subway;

    /**
     * Улица.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("street")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $street;

    /**
     * Дом или владение.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("house")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $house;

    /**
     * Корпус или строение.
     *
     * @var string|null
     * @SerializedName("block")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $block;

    /**
     * Подъезд.
     *
     * @var string|null
     * @SerializedName("entrance")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $entrance;

    /**
     * Код домофона.
     *
     * @var string|null
     * @SerializedName("entryphone")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $entryphone;

    /**
     * Этаж.
     *
     * @var string|null
     * @SerializedName("floor")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $floor;

    /**
     * Квартира или офис.
     *
     * @var string|null
     * @SerializedName("apartment")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $apartment;

    /**
     * Телефон получателя заказа.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("phone")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $phone;

    /**
     * Фамилия, имя и отчество получателя заказа.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("recipient")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $recipient;

    /**
     * @var GpsDTO|null
     * @SerializedName("gps")
     * @Assert\Type("\OpenAPIServer\Model\GpsDTO")
     * @Type("\OpenAPIServer\Model\GpsDTO")
     */
    public ?GpsDTO $gps;

    /**
     * Constructor
     *
     * @param string|null $country
     * @param string|null $postcode
     * @param string|null $city
     * @param string|null $district
     * @param string|null $subway
     * @param string|null $street
     * @param string|null $house
     * @param string|null $block
     * @param string|null $entrance
     * @param string|null $entryphone
     * @param string|null $floor
     * @param string|null $apartment
     * @param string|null $phone
     * @param string|null $recipient
     * @param GpsDTO|null $gps
     */
    public function __construct(?string $country, ?string $postcode, ?string $city, ?string $district, ?string $subway, ?string $street, ?string $house, ?string $block, ?string $entrance, ?string $entryphone, ?string $floor, ?string $apartment, ?string $phone, ?string $recipient, ?GpsDTO $gps)
    {
        $this->country = $country;
        $this->postcode = $postcode;
        $this->city = $city;
        $this->district = $district;
        $this->subway = $subway;
        $this->street = $street;
        $this->house = $house;
        $this->block = $block;
        $this->entrance = $entrance;
        $this->entryphone = $entryphone;
        $this->floor = $floor;
        $this->apartment = $apartment;
        $this->phone = $phone;
        $this->recipient = $recipient;
        $this->gps = $gps;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['country'] ?? null, 
            $data['postcode'] ?? null, 
            $data['city'] ?? null, 
            $data['district'] ?? null, 
            $data['subway'] ?? null, 
            $data['street'] ?? null, 
            $data['house'] ?? null, 
            $data['block'] ?? null, 
            $data['entrance'] ?? null, 
            $data['entryphone'] ?? null, 
            $data['floor'] ?? null, 
            $data['apartment'] ?? null, 
            $data['phone'] ?? null, 
            $data['recipient'] ?? null, 
            isset($data['gps']) ? GpsDTO::fromArray($data['gps']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'country' => $this->country, 
            'postcode' => $this->postcode, 
            'city' => $this->city, 
            'district' => $this->district, 
            'subway' => $this->subway, 
            'street' => $this->street, 
            'house' => $this->house, 
            'block' => $this->block, 
            'entrance' => $this->entrance, 
            'entryphone' => $this->entryphone, 
            'floor' => $this->floor, 
            'apartment' => $this->apartment, 
            'phone' => $this->phone, 
            'recipient' => $this->recipient, 
            'gps' => $this->gps, 
        ];
    }
}


