<?php
/**
 * OrderDeliveryAddressDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrderDeliveryAddressDTO model.
 *
 * Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи).
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrderDeliveryAddressDTO 
{
        /**
     * Страна.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("country")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $country = null;

    /**
     * Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;).
     *
     * @var string|null
     * @SerializedName("postcode")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $postcode = null;

    /**
     * Город или населенный пункт.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("city")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $city = null;

    /**
     * Район.
     *
     * @var string|null
     * @SerializedName("district")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $district = null;

    /**
     * Станция метро.
     *
     * @var string|null
     * @SerializedName("subway")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $subway = null;

    /**
     * Улица.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("street")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $street = null;

    /**
     * Дом или владение.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("house")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $house = null;

    /**
     * Корпус или строение.
     *
     * @var string|null
     * @SerializedName("block")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $block = null;

    /**
     * Подъезд.
     *
     * @var string|null
     * @SerializedName("entrance")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $entrance = null;

    /**
     * Код домофона.
     *
     * @var string|null
     * @SerializedName("entryphone")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $entryphone = null;

    /**
     * Этаж.
     *
     * @var string|null
     * @SerializedName("floor")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $floor = null;

    /**
     * Квартира или офис.
     *
     * @var string|null
     * @SerializedName("apartment")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $apartment = null;

    /**
     * Телефон получателя заказа.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("phone")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $phone = null;

    /**
     * Фамилия, имя и отчество получателя заказа.  Обязательный параметр.
     *
     * @var string|null
     * @SerializedName("recipient")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $recipient = null;

    /**
     * @var GpsDTO|null
     * @SerializedName("gps")
     * @Type("OpenAPI\Server\Model\GpsDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\GpsDTO")]
    protected ?GpsDTO $gps = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
            $this->postcode = array_key_exists('postcode', $data) ? $data['postcode'] : $this->postcode;
            $this->city = array_key_exists('city', $data) ? $data['city'] : $this->city;
            $this->district = array_key_exists('district', $data) ? $data['district'] : $this->district;
            $this->subway = array_key_exists('subway', $data) ? $data['subway'] : $this->subway;
            $this->street = array_key_exists('street', $data) ? $data['street'] : $this->street;
            $this->house = array_key_exists('house', $data) ? $data['house'] : $this->house;
            $this->block = array_key_exists('block', $data) ? $data['block'] : $this->block;
            $this->entrance = array_key_exists('entrance', $data) ? $data['entrance'] : $this->entrance;
            $this->entryphone = array_key_exists('entryphone', $data) ? $data['entryphone'] : $this->entryphone;
            $this->floor = array_key_exists('floor', $data) ? $data['floor'] : $this->floor;
            $this->apartment = array_key_exists('apartment', $data) ? $data['apartment'] : $this->apartment;
            $this->phone = array_key_exists('phone', $data) ? $data['phone'] : $this->phone;
            $this->recipient = array_key_exists('recipient', $data) ? $data['recipient'] : $this->recipient;
            $this->gps = array_key_exists('gps', $data) ? $data['gps'] : $this->gps;
        }
    }

    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }

    /**
    * Sets country.
    *
    * @param string|null $country  Страна.  Обязательный параметр.
    *
    * @return $this
    */
    public function setCountry(?string $country = null): self
    {
        $this->country = $country;

        return $this;
    }




    /**
     * Gets postcode.
     *
     * @return string|null
     */
    public function getPostcode(): ?string
    {
        return $this->postcode;
    }

    /**
    * Sets postcode.
    *
    * @param string|null $postcode  Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`).
    *
    * @return $this
    */
    public function setPostcode(?string $postcode = null): self
    {
        $this->postcode = $postcode;

        return $this;
    }




    /**
     * Gets city.
     *
     * @return string|null
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
    * Sets city.
    *
    * @param string|null $city  Город или населенный пункт.  Обязательный параметр.
    *
    * @return $this
    */
    public function setCity(?string $city = null): self
    {
        $this->city = $city;

        return $this;
    }




    /**
     * Gets district.
     *
     * @return string|null
     */
    public function getDistrict(): ?string
    {
        return $this->district;
    }

    /**
    * Sets district.
    *
    * @param string|null $district  Район.
    *
    * @return $this
    */
    public function setDistrict(?string $district = null): self
    {
        $this->district = $district;

        return $this;
    }




    /**
     * Gets subway.
     *
     * @return string|null
     */
    public function getSubway(): ?string
    {
        return $this->subway;
    }

    /**
    * Sets subway.
    *
    * @param string|null $subway  Станция метро.
    *
    * @return $this
    */
    public function setSubway(?string $subway = null): self
    {
        $this->subway = $subway;

        return $this;
    }




    /**
     * Gets street.
     *
     * @return string|null
     */
    public function getStreet(): ?string
    {
        return $this->street;
    }

    /**
    * Sets street.
    *
    * @param string|null $street  Улица.  Обязательный параметр.
    *
    * @return $this
    */
    public function setStreet(?string $street = null): self
    {
        $this->street = $street;

        return $this;
    }




    /**
     * Gets house.
     *
     * @return string|null
     */
    public function getHouse(): ?string
    {
        return $this->house;
    }

    /**
    * Sets house.
    *
    * @param string|null $house  Дом или владение.  Обязательный параметр.
    *
    * @return $this
    */
    public function setHouse(?string $house = null): self
    {
        $this->house = $house;

        return $this;
    }




    /**
     * Gets block.
     *
     * @return string|null
     */
    public function getBlock(): ?string
    {
        return $this->block;
    }

    /**
    * Sets block.
    *
    * @param string|null $block  Корпус или строение.
    *
    * @return $this
    */
    public function setBlock(?string $block = null): self
    {
        $this->block = $block;

        return $this;
    }




    /**
     * Gets entrance.
     *
     * @return string|null
     */
    public function getEntrance(): ?string
    {
        return $this->entrance;
    }

    /**
    * Sets entrance.
    *
    * @param string|null $entrance  Подъезд.
    *
    * @return $this
    */
    public function setEntrance(?string $entrance = null): self
    {
        $this->entrance = $entrance;

        return $this;
    }




    /**
     * Gets entryphone.
     *
     * @return string|null
     */
    public function getEntryphone(): ?string
    {
        return $this->entryphone;
    }

    /**
    * Sets entryphone.
    *
    * @param string|null $entryphone  Код домофона.
    *
    * @return $this
    */
    public function setEntryphone(?string $entryphone = null): self
    {
        $this->entryphone = $entryphone;

        return $this;
    }




    /**
     * Gets floor.
     *
     * @return string|null
     */
    public function getFloor(): ?string
    {
        return $this->floor;
    }

    /**
    * Sets floor.
    *
    * @param string|null $floor  Этаж.
    *
    * @return $this
    */
    public function setFloor(?string $floor = null): self
    {
        $this->floor = $floor;

        return $this;
    }




    /**
     * Gets apartment.
     *
     * @return string|null
     */
    public function getApartment(): ?string
    {
        return $this->apartment;
    }

    /**
    * Sets apartment.
    *
    * @param string|null $apartment  Квартира или офис.
    *
    * @return $this
    */
    public function setApartment(?string $apartment = null): self
    {
        $this->apartment = $apartment;

        return $this;
    }




    /**
     * Gets phone.
     *
     * @return string|null
     */
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    /**
    * Sets phone.
    *
    * @param string|null $phone  Телефон получателя заказа.  Обязательный параметр.
    *
    * @return $this
    */
    public function setPhone(?string $phone = null): self
    {
        $this->phone = $phone;

        return $this;
    }




    /**
     * Gets recipient.
     *
     * @return string|null
     */
    public function getRecipient(): ?string
    {
        return $this->recipient;
    }

    /**
    * Sets recipient.
    *
    * @param string|null $recipient  Фамилия, имя и отчество получателя заказа.  Обязательный параметр.
    *
    * @return $this
    */
    public function setRecipient(?string $recipient = null): self
    {
        $this->recipient = $recipient;

        return $this;
    }




    /**
     * Gets gps.
     *
     * @return GpsDTO|null
     */
    public function getGps(): ?GpsDTO
    {
        return $this->gps;
    }

    /**
    * Sets gps.
    *
    * @param GpsDTO|null $gps
    *
    * @return $this
    */
    public function setGps(?GpsDTO $gps = null): self
    {
        $this->gps = $gps;

        return $this;
    }



}


