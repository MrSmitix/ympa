<?php
/**
 * OrderDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderDTO model.
 *
 * Заказ.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderDTO  implements \JsonSerializable
{
        /**
     * Идентификатор заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * @var OrderStatusType|null
     * @SerializedName("status")
        * @Accessor(getter="getSerializedStatus")
        * @Type("string")
     */
    public ?OrderStatusType $status;

    /**
     * @var OrderSubstatusType|null
     * @SerializedName("substatus")
        * @Accessor(getter="getSerializedSubstatus")
        * @Type("string")
     */
    public ?OrderSubstatusType $substatus;

    /**
     * @var string|null
     * @SerializedName("creationDate")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $creationDate;

    /**
     * @var string|null
     * @SerializedName("updatedAt")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $updatedAt;

    /**
     * @var CurrencyType|null
     * @SerializedName("currency")
        * @Accessor(getter="getSerializedCurrency")
        * @Type("string")
     */
    public ?CurrencyType $currency;

    /**
     * Платеж покупателя.
     *
     * @var float|null
     * @SerializedName("itemsTotal")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $itemsTotal;

    /**
     * Стоимость доставки.
     *
     * @var float|null
     * @SerializedName("deliveryTotal")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $deliveryTotal;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.
     *
     * @var float|null
     * @SerializedName("buyerItemsTotal")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $buyerItemsTotal;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.
     *
     * @var float|null
     * @SerializedName("buyerTotal")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $buyerTotal;

    /**
     * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.
     *
     * @var float|null
     * @SerializedName("buyerItemsTotalBeforeDiscount")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $buyerItemsTotalBeforeDiscount;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки).
     *
     * @var float|null
     * @SerializedName("buyerTotalBeforeDiscount")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $buyerTotalBeforeDiscount;

    /**
     * @var OrderPaymentType|null
     * @SerializedName("paymentType")
        * @Accessor(getter="getSerializedPaymentType")
        * @Type("string")
     */
    public ?OrderPaymentType $paymentType;

    /**
     * @var OrderPaymentMethodType|null
     * @SerializedName("paymentMethod")
        * @Accessor(getter="getSerializedPaymentMethod")
        * @Type("string")
     */
    public ?OrderPaymentMethodType $paymentMethod;

    /**
     * Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
     *
     * @var bool|null
     * @SerializedName("fake")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $fake;

    /**
     * Список товаров в заказе.
     *
     * @var OrderItemDTO[]
     * @SerializedName("items")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderItemDTO>")
     */
    public array $items;

    /**
     * Список субсидий по типам.
     *
     * @var OrderSubsidyDTO[]|null
     * @SerializedName("subsidies")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderSubsidyDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderSubsidyDTO>")
     */
    public ?array $subsidies;

    /**
     * @var OrderDeliveryDTO|null
     * @SerializedName("delivery")
     * @Assert\Type("\OpenAPIServer\Model\OrderDeliveryDTO")
     * @Type("\OpenAPIServer\Model\OrderDeliveryDTO")
     */
    public ?OrderDeliveryDTO $delivery;

    /**
     * @var OrderBuyerDTO|null
     * @SerializedName("buyer")
     * @Assert\Type("\OpenAPIServer\Model\OrderBuyerDTO")
     * @Type("\OpenAPIServer\Model\OrderBuyerDTO")
     */
    public ?OrderBuyerDTO $buyer;

    /**
     * Комментарий к заказу.
     *
     * @var string|null
     * @SerializedName("notes")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $notes;

    /**
     * @var OrderTaxSystemType|null
     * @SerializedName("taxSystem")
        * @Accessor(getter="getSerializedTaxSystem")
        * @Type("string")
     */
    public ?OrderTaxSystemType $taxSystem;

    /**
     * **Только для модели DBS**  Запрошена ли отмена.
     *
     * @var bool|null
     * @SerializedName("cancelRequested")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $cancelRequested;

    /**
     * @var string|null
     * @SerializedName("expiryDate")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $expiryDate;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param OrderStatusType|null $status
     * @param OrderSubstatusType|null $substatus
     * @param string|null $creationDate
     * @param string|null $updatedAt
     * @param CurrencyType|null $currency
     * @param float|null $itemsTotal
     * @param float|null $deliveryTotal
     * @param float|null $buyerItemsTotal
     * @param float|null $buyerTotal
     * @param float|null $buyerItemsTotalBeforeDiscount
     * @param float|null $buyerTotalBeforeDiscount
     * @param OrderPaymentType|null $paymentType
     * @param OrderPaymentMethodType|null $paymentMethod
     * @param bool|null $fake
     * @param OrderItemDTO[] $items
     * @param OrderSubsidyDTO[]|null $subsidies
     * @param OrderDeliveryDTO|null $delivery
     * @param OrderBuyerDTO|null $buyer
     * @param string|null $notes
     * @param OrderTaxSystemType|null $taxSystem
     * @param bool|null $cancelRequested
     * @param string|null $expiryDate
     */
    public function __construct(?int $id, ?OrderStatusType $status, ?OrderSubstatusType $substatus, ?string $creationDate, ?string $updatedAt, ?CurrencyType $currency, ?float $itemsTotal, ?float $deliveryTotal, ?float $buyerItemsTotal, ?float $buyerTotal, ?float $buyerItemsTotalBeforeDiscount, ?float $buyerTotalBeforeDiscount, ?OrderPaymentType $paymentType, ?OrderPaymentMethodType $paymentMethod, ?bool $fake, array $items, ?array $subsidies, ?OrderDeliveryDTO $delivery, ?OrderBuyerDTO $buyer, ?string $notes, ?OrderTaxSystemType $taxSystem, ?bool $cancelRequested, ?string $expiryDate)
    {
        $this->id = $id;
        $this->status = $status;
        $this->substatus = $substatus;
        $this->creationDate = $creationDate;
        $this->updatedAt = $updatedAt;
        $this->currency = $currency;
        $this->itemsTotal = $itemsTotal;
        $this->deliveryTotal = $deliveryTotal;
        $this->buyerItemsTotal = $buyerItemsTotal;
        $this->buyerTotal = $buyerTotal;
        $this->buyerItemsTotalBeforeDiscount = $buyerItemsTotalBeforeDiscount;
        $this->buyerTotalBeforeDiscount = $buyerTotalBeforeDiscount;
        $this->paymentType = $paymentType;
        $this->paymentMethod = $paymentMethod;
        $this->fake = $fake;
        $this->items = $items;
        $this->subsidies = $subsidies;
        $this->delivery = $delivery;
        $this->buyer = $buyer;
        $this->notes = $notes;
        $this->taxSystem = $taxSystem;
        $this->cancelRequested = $cancelRequested;
        $this->expiryDate = $expiryDate;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            isset($data['status']) ? OrderStatusType::tryFrom($data['status']) : null, 
            isset($data['substatus']) ? OrderSubstatusType::tryFrom($data['substatus']) : null, 
            $data['creationDate'] ?? null, 
            $data['updatedAt'] ?? null, 
            isset($data['currency']) ? CurrencyType::tryFrom($data['currency']) : null, 
            $data['itemsTotal'] ?? null, 
            $data['deliveryTotal'] ?? null, 
            $data['buyerItemsTotal'] ?? null, 
            $data['buyerTotal'] ?? null, 
            $data['buyerItemsTotalBeforeDiscount'] ?? null, 
            $data['buyerTotalBeforeDiscount'] ?? null, 
            isset($data['paymentType']) ? OrderPaymentType::tryFrom($data['paymentType']) : null, 
            isset($data['paymentMethod']) ? OrderPaymentMethodType::tryFrom($data['paymentMethod']) : null, 
            $data['fake'] ?? null, 
            isset($data['items']) ? array_map(fn($item) => OrderItemDTO::fromArray($item), $data['items']) : null, 
            isset($data['subsidies']) ? array_map(fn($item) => OrderSubsidyDTO::fromArray($item), $data['subsidies']) : null, 
            isset($data['delivery']) ? OrderDeliveryDTO::fromArray($data['delivery']) : null, 
            isset($data['buyer']) ? OrderBuyerDTO::fromArray($data['buyer']) : null, 
            $data['notes'] ?? null, 
            isset($data['taxSystem']) ? OrderTaxSystemType::tryFrom($data['taxSystem']) : null, 
            $data['cancelRequested'] ?? null, 
            $data['expiryDate'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'status' => $this->status, 
            'substatus' => $this->substatus, 
            'creationDate' => $this->creationDate, 
            'updatedAt' => $this->updatedAt, 
            'currency' => $this->currency, 
            'itemsTotal' => $this->itemsTotal, 
            'deliveryTotal' => $this->deliveryTotal, 
            'buyerItemsTotal' => $this->buyerItemsTotal, 
            'buyerTotal' => $this->buyerTotal, 
            'buyerItemsTotalBeforeDiscount' => $this->buyerItemsTotalBeforeDiscount, 
            'buyerTotalBeforeDiscount' => $this->buyerTotalBeforeDiscount, 
            'paymentType' => $this->paymentType, 
            'paymentMethod' => $this->paymentMethod, 
            'fake' => $this->fake, 
            'items' => $this->items, 
            'subsidies' => $this->subsidies, 
            'delivery' => $this->delivery, 
            'buyer' => $this->buyer, 
            'notes' => $this->notes, 
            'taxSystem' => $this->taxSystem, 
            'cancelRequested' => $this->cancelRequested, 
            'expiryDate' => $this->expiryDate, 
        ];
    }
}


