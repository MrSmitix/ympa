<?php
/**
 * OrderDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrderDTO model.
 *
 * Заказ.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrderDTO 
{
        /**
     * Идентификатор заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * @var OrderStatusType|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?OrderStatusType $status = null;

    /**
     * @var OrderSubstatusType|null
     * @SerializedName("substatus")
    * @Accessor(getter="getSerializedSubstatus", setter="setDeserializedSubstatus")
    * @Type("string")
    */
    protected ?OrderSubstatusType $substatus = null;

    /**
     * @var string|null
     * @SerializedName("creationDate")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $creationDate = null;

    /**
     * @var string|null
     * @SerializedName("updatedAt")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $updatedAt = null;

    /**
     * @var CurrencyType|null
     * @SerializedName("currency")
    * @Accessor(getter="getSerializedCurrency", setter="setDeserializedCurrency")
    * @Type("string")
    */
    protected ?CurrencyType $currency = null;

    /**
     * Платеж покупателя.
     *
     * @var float|null
     * @SerializedName("itemsTotal")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $itemsTotal = null;

    /**
     * Стоимость доставки.
     *
     * @var float|null
     * @SerializedName("deliveryTotal")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $deliveryTotal = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.
     *
     * @var float|null
     * @SerializedName("buyerItemsTotal")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $buyerItemsTotal = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.
     *
     * @var float|null
     * @SerializedName("buyerTotal")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $buyerTotal = null;

    /**
     * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.
     *
     * @var float|null
     * @SerializedName("buyerItemsTotalBeforeDiscount")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $buyerItemsTotalBeforeDiscount = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки).
     *
     * @var float|null
     * @SerializedName("buyerTotalBeforeDiscount")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $buyerTotalBeforeDiscount = null;

    /**
     * @var OrderPaymentType|null
     * @SerializedName("paymentType")
    * @Accessor(getter="getSerializedPaymentType", setter="setDeserializedPaymentType")
    * @Type("string")
    */
    protected ?OrderPaymentType $paymentType = null;

    /**
     * @var OrderPaymentMethodType|null
     * @SerializedName("paymentMethod")
    * @Accessor(getter="getSerializedPaymentMethod", setter="setDeserializedPaymentMethod")
    * @Type("string")
    */
    protected ?OrderPaymentMethodType $paymentMethod = null;

    /**
     * Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
     *
     * @var bool|null
     * @SerializedName("fake")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $fake = null;

    /**
     * Список товаров в заказе.
     *
     * @var OrderItemDTO[]|null
     * @SerializedName("items")
     * @Type("array<OpenAPI\Server\Model\OrderItemDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderItemDTO"),
    ])]
    protected ?array $items = null;

    /**
     * Список субсидий по типам.
     *
     * @var OrderSubsidyDTO[]|null
     * @SerializedName("subsidies")
     * @Type("array<OpenAPI\Server\Model\OrderSubsidyDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderSubsidyDTO"),
    ])]
    protected ?array $subsidies = null;

    /**
     * @var OrderDeliveryDTO|null
     * @SerializedName("delivery")
     * @Type("OpenAPI\Server\Model\OrderDeliveryDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OrderDeliveryDTO")]
    protected ?OrderDeliveryDTO $delivery = null;

    /**
     * @var OrderBuyerDTO|null
     * @SerializedName("buyer")
     * @Type("OpenAPI\Server\Model\OrderBuyerDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OrderBuyerDTO")]
    protected ?OrderBuyerDTO $buyer = null;

    /**
     * Комментарий к заказу.
     *
     * @var string|null
     * @SerializedName("notes")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $notes = null;

    /**
     * @var OrderTaxSystemType|null
     * @SerializedName("taxSystem")
    * @Accessor(getter="getSerializedTaxSystem", setter="setDeserializedTaxSystem")
    * @Type("string")
    */
    protected ?OrderTaxSystemType $taxSystem = null;

    /**
     * **Только для модели DBS**  Запрошена ли отмена.
     *
     * @var bool|null
     * @SerializedName("cancelRequested")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $cancelRequested = null;

    /**
     * @var string|null
     * @SerializedName("expiryDate")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $expiryDate = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->substatus = array_key_exists('substatus', $data) ? $data['substatus'] : $this->substatus;
            $this->creationDate = array_key_exists('creationDate', $data) ? $data['creationDate'] : $this->creationDate;
            $this->updatedAt = array_key_exists('updatedAt', $data) ? $data['updatedAt'] : $this->updatedAt;
            $this->currency = array_key_exists('currency', $data) ? $data['currency'] : $this->currency;
            $this->itemsTotal = array_key_exists('itemsTotal', $data) ? $data['itemsTotal'] : $this->itemsTotal;
            $this->deliveryTotal = array_key_exists('deliveryTotal', $data) ? $data['deliveryTotal'] : $this->deliveryTotal;
            $this->buyerItemsTotal = array_key_exists('buyerItemsTotal', $data) ? $data['buyerItemsTotal'] : $this->buyerItemsTotal;
            $this->buyerTotal = array_key_exists('buyerTotal', $data) ? $data['buyerTotal'] : $this->buyerTotal;
            $this->buyerItemsTotalBeforeDiscount = array_key_exists('buyerItemsTotalBeforeDiscount', $data) ? $data['buyerItemsTotalBeforeDiscount'] : $this->buyerItemsTotalBeforeDiscount;
            $this->buyerTotalBeforeDiscount = array_key_exists('buyerTotalBeforeDiscount', $data) ? $data['buyerTotalBeforeDiscount'] : $this->buyerTotalBeforeDiscount;
            $this->paymentType = array_key_exists('paymentType', $data) ? $data['paymentType'] : $this->paymentType;
            $this->paymentMethod = array_key_exists('paymentMethod', $data) ? $data['paymentMethod'] : $this->paymentMethod;
            $this->fake = array_key_exists('fake', $data) ? $data['fake'] : $this->fake;
            $this->items = array_key_exists('items', $data) ? $data['items'] : $this->items;
            $this->subsidies = array_key_exists('subsidies', $data) ? $data['subsidies'] : $this->subsidies;
            $this->delivery = array_key_exists('delivery', $data) ? $data['delivery'] : $this->delivery;
            $this->buyer = array_key_exists('buyer', $data) ? $data['buyer'] : $this->buyer;
            $this->notes = array_key_exists('notes', $data) ? $data['notes'] : $this->notes;
            $this->taxSystem = array_key_exists('taxSystem', $data) ? $data['taxSystem'] : $this->taxSystem;
            $this->cancelRequested = array_key_exists('cancelRequested', $data) ? $data['cancelRequested'] : $this->cancelRequested;
            $this->expiryDate = array_key_exists('expiryDate', $data) ? $data['expiryDate'] : $this->expiryDate;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор заказа.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets status.
     *
     * @return OrderStatusType|null
     */
    public function getStatus(): ?OrderStatusType
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param OrderStatusType|null $status
    *
    * @return $this
    */
    public function setStatus(?OrderStatusType $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return $this->status?->value ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|OrderStatusType|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|OrderStatusType|null $status = null): self
    {
        if (is_string($status)) {
            $status = OrderStatusType::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets substatus.
     *
     * @return OrderSubstatusType|null
     */
    public function getSubstatus(): ?OrderSubstatusType
    {
        return $this->substatus;
    }

    /**
    * Sets substatus.
    *
    * @param OrderSubstatusType|null $substatus
    *
    * @return $this
    */
    public function setSubstatus(?OrderSubstatusType $substatus = null): self
    {
        $this->substatus = $substatus;

        return $this;
    }

    /**
    * Gets substatus for serialization.
    *
    * @return string|null
    */
    public function getSerializedSubstatus(): string|null
    {
        return $this->substatus?->value ? (string) $this->substatus->value : null;
    }

    /**
    * Sets substatus.
    *
    * @param string|OrderSubstatusType|null $substatus
    *
    * @return $this
    */
    public function setDeserializedSubstatus(string|OrderSubstatusType|null $substatus = null): self
    {
        if (is_string($substatus)) {
            $substatus = OrderSubstatusType::tryFrom($substatus);
        }

        $this->substatus = $substatus;

        return $this;
    }



    /**
     * Gets creationDate.
     *
     * @return string|null
     */
    public function getCreationDate(): ?string
    {
        return $this->creationDate;
    }

    /**
    * Sets creationDate.
    *
    * @param string|null $creationDate
    *
    * @return $this
    */
    public function setCreationDate(?string $creationDate = null): self
    {
        $this->creationDate = $creationDate;

        return $this;
    }




    /**
     * Gets updatedAt.
     *
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    /**
    * Sets updatedAt.
    *
    * @param string|null $updatedAt
    *
    * @return $this
    */
    public function setUpdatedAt(?string $updatedAt = null): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }




    /**
     * Gets currency.
     *
     * @return CurrencyType|null
     */
    public function getCurrency(): ?CurrencyType
    {
        return $this->currency;
    }

    /**
    * Sets currency.
    *
    * @param CurrencyType|null $currency
    *
    * @return $this
    */
    public function setCurrency(?CurrencyType $currency = null): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
    * Gets currency for serialization.
    *
    * @return string|null
    */
    public function getSerializedCurrency(): string|null
    {
        return $this->currency?->value ? (string) $this->currency->value : null;
    }

    /**
    * Sets currency.
    *
    * @param string|CurrencyType|null $currency
    *
    * @return $this
    */
    public function setDeserializedCurrency(string|CurrencyType|null $currency = null): self
    {
        if (is_string($currency)) {
            $currency = CurrencyType::tryFrom($currency);
        }

        $this->currency = $currency;

        return $this;
    }



    /**
     * Gets itemsTotal.
     *
     * @return float|null
     */
    public function getItemsTotal(): ?float
    {
        return $this->itemsTotal;
    }

    /**
    * Sets itemsTotal.
    *
    * @param float|null $itemsTotal  Платеж покупателя.
    *
    * @return $this
    */
    public function setItemsTotal(?float $itemsTotal = null): self
    {
        $this->itemsTotal = $itemsTotal;

        return $this;
    }




    /**
     * Gets deliveryTotal.
     *
     * @return float|null
     */
    public function getDeliveryTotal(): ?float
    {
        return $this->deliveryTotal;
    }

    /**
    * Sets deliveryTotal.
    *
    * @param float|null $deliveryTotal  Стоимость доставки.
    *
    * @return $this
    */
    public function setDeliveryTotal(?float $deliveryTotal = null): self
    {
        $this->deliveryTotal = $deliveryTotal;

        return $this;
    }




    /**
     * Gets buyerItemsTotal.
     *
     * @return float|null
     */
    public function getBuyerItemsTotal(): ?float
    {
        return $this->buyerItemsTotal;
    }

    /**
    * Sets buyerItemsTotal.
    *
    * @param float|null $buyerItemsTotal  {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки.
    *
    * @return $this
    */
    public function setBuyerItemsTotal(?float $buyerItemsTotal = null): self
    {
        $this->buyerItemsTotal = $buyerItemsTotal;

        return $this;
    }




    /**
     * Gets buyerTotal.
     *
     * @return float|null
     */
    public function getBuyerTotal(): ?float
    {
        return $this->buyerTotal;
    }

    /**
    * Sets buyerTotal.
    *
    * @param float|null $buyerTotal  {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки.
    *
    * @return $this
    */
    public function setBuyerTotal(?float $buyerTotal = null): self
    {
        $this->buyerTotal = $buyerTotal;

        return $this;
    }




    /**
     * Gets buyerItemsTotalBeforeDiscount.
     *
     * @return float|null
     */
    public function getBuyerItemsTotalBeforeDiscount(): ?float
    {
        return $this->buyerItemsTotalBeforeDiscount;
    }

    /**
    * Sets buyerItemsTotalBeforeDiscount.
    *
    * @param float|null $buyerItemsTotalBeforeDiscount  Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам.
    *
    * @return $this
    */
    public function setBuyerItemsTotalBeforeDiscount(?float $buyerItemsTotalBeforeDiscount = null): self
    {
        $this->buyerItemsTotalBeforeDiscount = $buyerItemsTotalBeforeDiscount;

        return $this;
    }




    /**
     * Gets buyerTotalBeforeDiscount.
     *
     * @return float|null
     */
    public function getBuyerTotalBeforeDiscount(): ?float
    {
        return $this->buyerTotalBeforeDiscount;
    }

    /**
    * Sets buyerTotalBeforeDiscount.
    *
    * @param float|null $buyerTotalBeforeDiscount  {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки).
    *
    * @return $this
    */
    public function setBuyerTotalBeforeDiscount(?float $buyerTotalBeforeDiscount = null): self
    {
        $this->buyerTotalBeforeDiscount = $buyerTotalBeforeDiscount;

        return $this;
    }




    /**
     * Gets paymentType.
     *
     * @return OrderPaymentType|null
     */
    public function getPaymentType(): ?OrderPaymentType
    {
        return $this->paymentType;
    }

    /**
    * Sets paymentType.
    *
    * @param OrderPaymentType|null $paymentType
    *
    * @return $this
    */
    public function setPaymentType(?OrderPaymentType $paymentType = null): self
    {
        $this->paymentType = $paymentType;

        return $this;
    }

    /**
    * Gets paymentType for serialization.
    *
    * @return string|null
    */
    public function getSerializedPaymentType(): string|null
    {
        return $this->paymentType?->value ? (string) $this->paymentType->value : null;
    }

    /**
    * Sets paymentType.
    *
    * @param string|OrderPaymentType|null $paymentType
    *
    * @return $this
    */
    public function setDeserializedPaymentType(string|OrderPaymentType|null $paymentType = null): self
    {
        if (is_string($paymentType)) {
            $paymentType = OrderPaymentType::tryFrom($paymentType);
        }

        $this->paymentType = $paymentType;

        return $this;
    }



    /**
     * Gets paymentMethod.
     *
     * @return OrderPaymentMethodType|null
     */
    public function getPaymentMethod(): ?OrderPaymentMethodType
    {
        return $this->paymentMethod;
    }

    /**
    * Sets paymentMethod.
    *
    * @param OrderPaymentMethodType|null $paymentMethod
    *
    * @return $this
    */
    public function setPaymentMethod(?OrderPaymentMethodType $paymentMethod = null): self
    {
        $this->paymentMethod = $paymentMethod;

        return $this;
    }

    /**
    * Gets paymentMethod for serialization.
    *
    * @return string|null
    */
    public function getSerializedPaymentMethod(): string|null
    {
        return $this->paymentMethod?->value ? (string) $this->paymentMethod->value : null;
    }

    /**
    * Sets paymentMethod.
    *
    * @param string|OrderPaymentMethodType|null $paymentMethod
    *
    * @return $this
    */
    public function setDeserializedPaymentMethod(string|OrderPaymentMethodType|null $paymentMethod = null): self
    {
        if (is_string($paymentMethod)) {
            $paymentMethod = OrderPaymentMethodType::tryFrom($paymentMethod);
        }

        $this->paymentMethod = $paymentMethod;

        return $this;
    }



    /**
     * Gets fake.
     *
     * @return bool|null
     */
    public function isFake(): ?bool
    {
        return $this->fake;
    }

    /**
    * Sets fake.
    *
    * @param bool|null $fake  Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
    *
    * @return $this
    */
    public function setFake(?bool $fake = null): self
    {
        $this->fake = $fake;

        return $this;
    }




    /**
     * Gets items.
     *
     * @return OrderItemDTO[]|null
     */
    public function getItems(): ?array
    {
        return $this->items;
    }

    /**
    * Sets items.
    *
    * @param OrderItemDTO[]|null $items  Список товаров в заказе.
    *
    * @return $this
    */
    public function setItems(?array $items): self
    {
        $this->items = $items;

        return $this;
    }




    /**
     * Gets subsidies.
     *
     * @return OrderSubsidyDTO[]|null
     */
    public function getSubsidies(): ?array
    {
        return $this->subsidies;
    }

    /**
    * Sets subsidies.
    *
    * @param OrderSubsidyDTO[]|null $subsidies  Список субсидий по типам.
    *
    * @return $this
    */
    public function setSubsidies(?array $subsidies = null): self
    {
        $this->subsidies = $subsidies;

        return $this;
    }




    /**
     * Gets delivery.
     *
     * @return OrderDeliveryDTO|null
     */
    public function getDelivery(): ?OrderDeliveryDTO
    {
        return $this->delivery;
    }

    /**
    * Sets delivery.
    *
    * @param OrderDeliveryDTO|null $delivery
    *
    * @return $this
    */
    public function setDelivery(?OrderDeliveryDTO $delivery = null): self
    {
        $this->delivery = $delivery;

        return $this;
    }




    /**
     * Gets buyer.
     *
     * @return OrderBuyerDTO|null
     */
    public function getBuyer(): ?OrderBuyerDTO
    {
        return $this->buyer;
    }

    /**
    * Sets buyer.
    *
    * @param OrderBuyerDTO|null $buyer
    *
    * @return $this
    */
    public function setBuyer(?OrderBuyerDTO $buyer = null): self
    {
        $this->buyer = $buyer;

        return $this;
    }




    /**
     * Gets notes.
     *
     * @return string|null
     */
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    /**
    * Sets notes.
    *
    * @param string|null $notes  Комментарий к заказу.
    *
    * @return $this
    */
    public function setNotes(?string $notes = null): self
    {
        $this->notes = $notes;

        return $this;
    }




    /**
     * Gets taxSystem.
     *
     * @return OrderTaxSystemType|null
     */
    public function getTaxSystem(): ?OrderTaxSystemType
    {
        return $this->taxSystem;
    }

    /**
    * Sets taxSystem.
    *
    * @param OrderTaxSystemType|null $taxSystem
    *
    * @return $this
    */
    public function setTaxSystem(?OrderTaxSystemType $taxSystem = null): self
    {
        $this->taxSystem = $taxSystem;

        return $this;
    }

    /**
    * Gets taxSystem for serialization.
    *
    * @return string|null
    */
    public function getSerializedTaxSystem(): string|null
    {
        return $this->taxSystem?->value ? (string) $this->taxSystem->value : null;
    }

    /**
    * Sets taxSystem.
    *
    * @param string|OrderTaxSystemType|null $taxSystem
    *
    * @return $this
    */
    public function setDeserializedTaxSystem(string|OrderTaxSystemType|null $taxSystem = null): self
    {
        if (is_string($taxSystem)) {
            $taxSystem = OrderTaxSystemType::tryFrom($taxSystem);
        }

        $this->taxSystem = $taxSystem;

        return $this;
    }



    /**
     * Gets cancelRequested.
     *
     * @return bool|null
     */
    public function isCancelRequested(): ?bool
    {
        return $this->cancelRequested;
    }

    /**
    * Sets cancelRequested.
    *
    * @param bool|null $cancelRequested  **Только для модели DBS**  Запрошена ли отмена.
    *
    * @return $this
    */
    public function setCancelRequested(?bool $cancelRequested = null): self
    {
        $this->cancelRequested = $cancelRequested;

        return $this;
    }




    /**
     * Gets expiryDate.
     *
     * @return string|null
     */
    public function getExpiryDate(): ?string
    {
        return $this->expiryDate;
    }

    /**
    * Sets expiryDate.
    *
    * @param string|null $expiryDate
    *
    * @return $this
    */
    public function setExpiryDate(?string $expiryDate = null): self
    {
        $this->expiryDate = $expiryDate;

        return $this;
    }



}


