<?php
/**
 * GetPriceDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetPriceDTO model.
 *
 * Цена с указанием времени последнего обновления.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetPriceDTO  implements \JsonSerializable
{
        /**
     * Значение.
     *
     * @var float
     * @SerializedName("value")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $value;

    /**
     * @var CurrencyType
     * @SerializedName("currencyId")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedCurrencyId")
        * @Type("string")
     */
    public CurrencyType $currencyId;

    /**
     * Время последнего обновления.
     *
     * @var \DateTime
     * @SerializedName("updatedAt")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $updatedAt;

    /**
     * Constructor
     *
     * @param float $value
     * @param CurrencyType $currencyId
     * @param \DateTime $updatedAt
     */
    public function __construct(float $value, CurrencyType $currencyId, \DateTime $updatedAt)
    {
        $this->value = $value;
        $this->currencyId = $currencyId;
        $this->updatedAt = $updatedAt;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['value'] ?? null, 
            isset($data['currencyId']) ? CurrencyType::tryFrom($data['currencyId']) : null, 
            isset($data['updatedAt']) ? new \DateTime($data['updatedAt']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'value' => $this->value, 
            'currencyId' => $this->currencyId, 
            'updatedAt' => $this->updatedAt?->format('c'), 
        ];
    }
}


