<?php
/**
 * ReturnDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ReturnDTO model.
 *
 * Возврат заказа.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ReturnDTO  implements \JsonSerializable
{
        /**
     * Идентификатор возврата.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Номер заказа.
     *
     * @var int|null
     * @SerializedName("orderId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $orderId;

    /**
     * Дата создания возврата клиентом.
     *
     * @var \DateTime|null
     * @SerializedName("creationDate")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $creationDate;

    /**
     * Дата обновления возврата.
     *
     * @var \DateTime|null
     * @SerializedName("updateDate")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $updateDate;

    /**
     * @var RefundStatusType|null
     * @SerializedName("refundStatus")
        * @Accessor(getter="getSerializedRefundStatus")
        * @Type("string")
     */
    public ?RefundStatusType $refundStatus;

    /**
     * @var LogisticPickupPointDTO|null
     * @SerializedName("logisticPickupPoint")
     * @Assert\Type("\OpenAPIServer\Model\LogisticPickupPointDTO")
     * @Type("\OpenAPIServer\Model\LogisticPickupPointDTO")
     */
    public ?LogisticPickupPointDTO $logisticPickupPoint;

    /**
     * @var RecipientType|null
     * @SerializedName("shipmentRecipientType")
        * @Accessor(getter="getSerializedShipmentRecipientType")
        * @Type("string")
     */
    public ?RecipientType $shipmentRecipientType;

    /**
     * @var ReturnShipmentStatusType|null
     * @SerializedName("shipmentStatus")
        * @Accessor(getter="getSerializedShipmentStatus")
        * @Type("string")
     */
    public ?ReturnShipmentStatusType $shipmentStatus;

    /**
     * Сумма возврата.
     *
     * @var int|null
     * @SerializedName("refundAmount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $refundAmount;

    /**
     * Список товаров в возврате.
     *
     * @var ReturnItemDTO[]
     * @SerializedName("items")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ReturnItemDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ReturnItemDTO>")
     */
    public array $items;

    /**
     * @var ReturnType|null
     * @SerializedName("returnType")
        * @Accessor(getter="getSerializedReturnType")
        * @Type("string")
     */
    public ?ReturnType $returnType;

    /**
     * Используется ли опция **Быстрый возврат денег за дешевый брак**.
     *
     * @var bool|null
     * @SerializedName("fastReturn")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $fastReturn;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param int|null $orderId
     * @param \DateTime|null $creationDate
     * @param \DateTime|null $updateDate
     * @param RefundStatusType|null $refundStatus
     * @param LogisticPickupPointDTO|null $logisticPickupPoint
     * @param RecipientType|null $shipmentRecipientType
     * @param ReturnShipmentStatusType|null $shipmentStatus
     * @param int|null $refundAmount
     * @param ReturnItemDTO[] $items
     * @param ReturnType|null $returnType
     * @param bool|null $fastReturn
     */
    public function __construct(?int $id, ?int $orderId, ?\DateTime $creationDate, ?\DateTime $updateDate, ?RefundStatusType $refundStatus, ?LogisticPickupPointDTO $logisticPickupPoint, ?RecipientType $shipmentRecipientType, ?ReturnShipmentStatusType $shipmentStatus, ?int $refundAmount, array $items, ?ReturnType $returnType, ?bool $fastReturn)
    {
        $this->id = $id;
        $this->orderId = $orderId;
        $this->creationDate = $creationDate;
        $this->updateDate = $updateDate;
        $this->refundStatus = $refundStatus;
        $this->logisticPickupPoint = $logisticPickupPoint;
        $this->shipmentRecipientType = $shipmentRecipientType;
        $this->shipmentStatus = $shipmentStatus;
        $this->refundAmount = $refundAmount;
        $this->items = $items;
        $this->returnType = $returnType;
        $this->fastReturn = $fastReturn;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['orderId'] ?? null, 
            isset($data['creationDate']) ? new \DateTime($data['creationDate']) : null, 
            isset($data['updateDate']) ? new \DateTime($data['updateDate']) : null, 
            isset($data['refundStatus']) ? RefundStatusType::tryFrom($data['refundStatus']) : null, 
            isset($data['logisticPickupPoint']) ? LogisticPickupPointDTO::fromArray($data['logisticPickupPoint']) : null, 
            isset($data['shipmentRecipientType']) ? RecipientType::tryFrom($data['shipmentRecipientType']) : null, 
            isset($data['shipmentStatus']) ? ReturnShipmentStatusType::tryFrom($data['shipmentStatus']) : null, 
            $data['refundAmount'] ?? null, 
            isset($data['items']) ? array_map(fn($item) => ReturnItemDTO::fromArray($item), $data['items']) : null, 
            isset($data['returnType']) ? ReturnType::tryFrom($data['returnType']) : null, 
            $data['fastReturn'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'orderId' => $this->orderId, 
            'creationDate' => $this->creationDate?->format('c'), 
            'updateDate' => $this->updateDate?->format('c'), 
            'refundStatus' => $this->refundStatus, 
            'logisticPickupPoint' => $this->logisticPickupPoint, 
            'shipmentRecipientType' => $this->shipmentRecipientType, 
            'shipmentStatus' => $this->shipmentStatus, 
            'refundAmount' => $this->refundAmount, 
            'items' => $this->items, 
            'returnType' => $this->returnType, 
            'fastReturn' => $this->fastReturn, 
        ];
    }
}


