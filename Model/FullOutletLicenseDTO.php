<?php
/**
 * FullOutletLicenseDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FullOutletLicenseDTO model.
 *
 * Информация о лицензии.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FullOutletLicenseDTO 
{
        /**
     * Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Идентификатор точки продаж, для которой действительна лицензия.
     *
     * @var int|null
     * @SerializedName("outletId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $outletId = null;

    /**
     * @var LicenseType|null
     * @SerializedName("licenseType")
    * @Accessor(getter="getSerializedLicenseType", setter="setDeserializedLicenseType")
    * @Type("string")
    */
    protected ?LicenseType $licenseType = null;

    /**
     * Номер лицензии.
     *
     * @var string|null
     * @SerializedName("number")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $number = null;

    /**
     * Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("dateOfIssue")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateOfIssue = null;

    /**
     * Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("dateOfExpiry")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateOfExpiry = null;

    /**
     * @var LicenseCheckStatusType|null
     * @SerializedName("checkStatus")
    * @Accessor(getter="getSerializedCheckStatus", setter="setDeserializedCheckStatus")
    * @Type("string")
    */
    protected ?LicenseCheckStatusType $checkStatus = null;

    /**
     * Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр &#x60;checkStatus&#x60; имеет значение &#x60;FAIL&#x60;.
     *
     * @var string|null
     * @SerializedName("checkComment")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $checkComment = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->outletId = array_key_exists('outletId', $data) ? $data['outletId'] : $this->outletId;
            $this->licenseType = array_key_exists('licenseType', $data) ? $data['licenseType'] : $this->licenseType;
            $this->number = array_key_exists('number', $data) ? $data['number'] : $this->number;
            $this->dateOfIssue = array_key_exists('dateOfIssue', $data) ? $data['dateOfIssue'] : $this->dateOfIssue;
            $this->dateOfExpiry = array_key_exists('dateOfExpiry', $data) ? $data['dateOfExpiry'] : $this->dateOfExpiry;
            $this->checkStatus = array_key_exists('checkStatus', $data) ? $data['checkStatus'] : $this->checkStatus;
            $this->checkComment = array_key_exists('checkComment', $data) ? $data['checkComment'] : $this->checkComment;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре `number`.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets outletId.
     *
     * @return int|null
     */
    public function getOutletId(): ?int
    {
        return $this->outletId;
    }

    /**
    * Sets outletId.
    *
    * @param int|null $outletId  Идентификатор точки продаж, для которой действительна лицензия.
    *
    * @return $this
    */
    public function setOutletId(?int $outletId = null): self
    {
        $this->outletId = $outletId;

        return $this;
    }




    /**
     * Gets licenseType.
     *
     * @return LicenseType|null
     */
    public function getLicenseType(): ?LicenseType
    {
        return $this->licenseType;
    }

    /**
    * Sets licenseType.
    *
    * @param LicenseType|null $licenseType
    *
    * @return $this
    */
    public function setLicenseType(?LicenseType $licenseType = null): self
    {
        $this->licenseType = $licenseType;

        return $this;
    }

    /**
    * Gets licenseType for serialization.
    *
    * @return string|null
    */
    public function getSerializedLicenseType(): string|null
    {
        return $this->licenseType?->value ? (string) $this->licenseType->value : null;
    }

    /**
    * Sets licenseType.
    *
    * @param string|LicenseType|null $licenseType
    *
    * @return $this
    */
    public function setDeserializedLicenseType(string|LicenseType|null $licenseType = null): self
    {
        if (is_string($licenseType)) {
            $licenseType = LicenseType::tryFrom($licenseType);
        }

        $this->licenseType = $licenseType;

        return $this;
    }



    /**
     * Gets number.
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->number;
    }

    /**
    * Sets number.
    *
    * @param string|null $number  Номер лицензии.
    *
    * @return $this
    */
    public function setNumber(?string $number = null): self
    {
        $this->number = $number;

        return $this;
    }




    /**
     * Gets dateOfIssue.
     *
     * @return \DateTime|null
     */
    public function getDateOfIssue(): ?\DateTime
    {
        return $this->dateOfIssue;
    }

    /**
    * Sets dateOfIssue.
    *
    * @param \DateTime|null $dateOfIssue  Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение `2017-11-13T00:00:00+03:00`.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре `dateOfExpiry`.
    *
    * @return $this
    */
    public function setDateOfIssue(?\DateTime $dateOfIssue = null): self
    {
        $this->dateOfIssue = $dateOfIssue;

        return $this;
    }




    /**
     * Gets dateOfExpiry.
     *
     * @return \DateTime|null
     */
    public function getDateOfExpiry(): ?\DateTime
    {
        return $this->dateOfExpiry;
    }

    /**
    * Sets dateOfExpiry.
    *
    * @param \DateTime|null $dateOfExpiry  Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время `00:00:00` и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение `2022-11-20T00:00:00+03:00`.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре `dateOfIssue`.
    *
    * @return $this
    */
    public function setDateOfExpiry(?\DateTime $dateOfExpiry = null): self
    {
        $this->dateOfExpiry = $dateOfExpiry;

        return $this;
    }




    /**
     * Gets checkStatus.
     *
     * @return LicenseCheckStatusType|null
     */
    public function getCheckStatus(): ?LicenseCheckStatusType
    {
        return $this->checkStatus;
    }

    /**
    * Sets checkStatus.
    *
    * @param LicenseCheckStatusType|null $checkStatus
    *
    * @return $this
    */
    public function setCheckStatus(?LicenseCheckStatusType $checkStatus = null): self
    {
        $this->checkStatus = $checkStatus;

        return $this;
    }

    /**
    * Gets checkStatus for serialization.
    *
    * @return string|null
    */
    public function getSerializedCheckStatus(): string|null
    {
        return $this->checkStatus?->value ? (string) $this->checkStatus->value : null;
    }

    /**
    * Sets checkStatus.
    *
    * @param string|LicenseCheckStatusType|null $checkStatus
    *
    * @return $this
    */
    public function setDeserializedCheckStatus(string|LicenseCheckStatusType|null $checkStatus = null): self
    {
        if (is_string($checkStatus)) {
            $checkStatus = LicenseCheckStatusType::tryFrom($checkStatus);
        }

        $this->checkStatus = $checkStatus;

        return $this;
    }



    /**
     * Gets checkComment.
     *
     * @return string|null
     */
    public function getCheckComment(): ?string
    {
        return $this->checkComment;
    }

    /**
    * Sets checkComment.
    *
    * @param string|null $checkComment  Причина, по которой лицензия не прошла проверку.  Параметр возвращается, только если параметр `checkStatus` имеет значение `FAIL`.
    *
    * @return $this
    */
    public function setCheckComment(?string $checkComment = null): self
    {
        $this->checkComment = $checkComment;

        return $this;
    }



}


