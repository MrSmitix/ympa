<?php
/**
 * SetReturnDecisionRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the SetReturnDecisionRequest model.
 *
 * Решения по позиции в возврате.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class SetReturnDecisionRequest  implements \JsonSerializable
{
        /**
     * Идентификатор товара в возврате.
     *
     * @var int
     * @SerializedName("returnItemId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $returnItemId;

    /**
     * @var ReturnRequestDecisionType
     * @SerializedName("decisionType")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedDecisionType")
        * @Type("string")
     */
    public ReturnRequestDecisionType $decisionType;

    /**
     * Комментарий к решению. Укажите:  * для &#x60;REFUND_MONEY_INCLUDING_SHIPMENT&#x60;— стоимость обратной пересылки;  * для &#x60;REPAIR&#x60; — когда вы устраните недостатки товара;  * для &#x60;DECLINE_REFUND&#x60; — причину отказа;  * для &#x60;OTHER_DECISION&#x60; — какое решение вы предлагаете.
     *
     * @var string|null
     * @SerializedName("comment")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $comment;

    /**
     * Constructor
     *
     * @param int $returnItemId
     * @param ReturnRequestDecisionType $decisionType
     * @param string|null $comment
     */
    public function __construct(int $returnItemId, ReturnRequestDecisionType $decisionType, ?string $comment)
    {
        $this->returnItemId = $returnItemId;
        $this->decisionType = $decisionType;
        $this->comment = $comment;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['returnItemId'] ?? null, 
            isset($data['decisionType']) ? ReturnRequestDecisionType::tryFrom($data['decisionType']) : null, 
            $data['comment'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'returnItemId' => $this->returnItemId, 
            'decisionType' => $this->decisionType, 
            'comment' => $this->comment, 
        ];
    }
}


