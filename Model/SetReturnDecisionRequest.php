<?php
/**
 * SetReturnDecisionRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the SetReturnDecisionRequest model.
 *
 * Решения по позиции в возврате.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class SetReturnDecisionRequest 
{
        /**
     * Идентификатор товара в возврате.
     *
     * @var int|null
     * @SerializedName("returnItemId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $returnItemId = null;

    /**
     * @var ReturnRequestDecisionType|null
     * @SerializedName("decisionType")
    * @Accessor(getter="getSerializedDecisionType", setter="setDeserializedDecisionType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?ReturnRequestDecisionType $decisionType = null;

    /**
     * Комментарий к решению. Укажите:  * для &#x60;REFUND_MONEY_INCLUDING_SHIPMENT&#x60;— стоимость обратной пересылки;  * для &#x60;REPAIR&#x60; — когда вы устраните недостатки товара;  * для &#x60;DECLINE_REFUND&#x60; — причину отказа;  * для &#x60;OTHER_DECISION&#x60; — какое решение вы предлагаете.
     *
     * @var string|null
     * @SerializedName("comment")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $comment = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->returnItemId = array_key_exists('returnItemId', $data) ? $data['returnItemId'] : $this->returnItemId;
            $this->decisionType = array_key_exists('decisionType', $data) ? $data['decisionType'] : $this->decisionType;
            $this->comment = array_key_exists('comment', $data) ? $data['comment'] : $this->comment;
        }
    }

    /**
     * Gets returnItemId.
     *
     * @return int|null
     */
    public function getReturnItemId(): ?int
    {
        return $this->returnItemId;
    }

    /**
    * Sets returnItemId.
    *
    * @param int|null $returnItemId  Идентификатор товара в возврате.
    *
    * @return $this
    */
    public function setReturnItemId(?int $returnItemId): self
    {
        $this->returnItemId = $returnItemId;

        return $this;
    }




    /**
     * Gets decisionType.
     *
     * @return ReturnRequestDecisionType|null
     */
    public function getDecisionType(): ?ReturnRequestDecisionType
    {
        return $this->decisionType;
    }

    /**
    * Sets decisionType.
    *
    * @param ReturnRequestDecisionType|null $decisionType
    *
    * @return $this
    */
    public function setDecisionType(?ReturnRequestDecisionType $decisionType): self
    {
        $this->decisionType = $decisionType;

        return $this;
    }

    /**
    * Gets decisionType for serialization.
    *
    * @return string|null
    */
    public function getSerializedDecisionType(): string|null
    {
        return $this->decisionType?->value ? (string) $this->decisionType->value : null;
    }

    /**
    * Sets decisionType.
    *
    * @param string|ReturnRequestDecisionType|null $decisionType
    *
    * @return $this
    */
    public function setDeserializedDecisionType(string|ReturnRequestDecisionType|null $decisionType): self
    {
        if (is_string($decisionType)) {
            $decisionType = ReturnRequestDecisionType::tryFrom($decisionType);
        }

        $this->decisionType = $decisionType;

        return $this;
    }



    /**
     * Gets comment.
     *
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->comment;
    }

    /**
    * Sets comment.
    *
    * @param string|null $comment  Комментарий к решению. Укажите:  * для `REFUND_MONEY_INCLUDING_SHIPMENT`— стоимость обратной пересылки;  * для `REPAIR` — когда вы устраните недостатки товара;  * для `DECLINE_REFUND` — причину отказа;  * для `OTHER_DECISION` — какое решение вы предлагаете.
    *
    * @return $this
    */
    public function setComment(?string $comment = null): self
    {
        $this->comment = $comment;

        return $this;
    }



}


