<?php
/**
 * PriceCompetitivenessThresholdsDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the PriceCompetitivenessThresholdsDTO model.
 *
 * Максимальные значения цены, при которых она является привлекательной или умеренной.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class PriceCompetitivenessThresholdsDTO 
{
        /**
     * @var BasePriceDTO|null
     * @SerializedName("optimalPrice")
     * @Type("OpenAPI\Server\Model\BasePriceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\BasePriceDTO")]
    protected ?BasePriceDTO $optimalPrice = null;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("averagePrice")
     * @Type("OpenAPI\Server\Model\BasePriceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\BasePriceDTO")]
    protected ?BasePriceDTO $averagePrice = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->optimalPrice = array_key_exists('optimalPrice', $data) ? $data['optimalPrice'] : $this->optimalPrice;
            $this->averagePrice = array_key_exists('averagePrice', $data) ? $data['averagePrice'] : $this->averagePrice;
        }
    }

    /**
     * Gets optimalPrice.
     *
     * @return BasePriceDTO|null
     */
    public function getOptimalPrice(): ?BasePriceDTO
    {
        return $this->optimalPrice;
    }

    /**
    * Sets optimalPrice.
    *
    * @param BasePriceDTO|null $optimalPrice
    *
    * @return $this
    */
    public function setOptimalPrice(?BasePriceDTO $optimalPrice = null): self
    {
        $this->optimalPrice = $optimalPrice;

        return $this;
    }




    /**
     * Gets averagePrice.
     *
     * @return BasePriceDTO|null
     */
    public function getAveragePrice(): ?BasePriceDTO
    {
        return $this->averagePrice;
    }

    /**
    * Sets averagePrice.
    *
    * @param BasePriceDTO|null $averagePrice
    *
    * @return $this
    */
    public function setAveragePrice(?BasePriceDTO $averagePrice = null): self
    {
        $this->averagePrice = $averagePrice;

        return $this;
    }



}


