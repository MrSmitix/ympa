<?php
/**
 * GetCampaignOffersRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetCampaignOffersRequest model.
 *
 * Фильтрации товаров  В запросе можно указать либо фильтр offerIds, либо любые другие фильтры товаров. Совместное использование фильтра offerIds с другими фильтрациями приведет к ошибке.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetCampaignOffersRequest  implements \JsonSerializable
{
        /**
     * Идентификаторы товаров, информация о которых нужна.  {% note warning \&quot;Такой список возвращается только целиком\&quot; %}  Не используйте это поле одновременно с фильтрами по статусам карточек, категориям, брендам или тегам. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.  Если вы запрашиваете информацию по конкретным SKU, не заполняйте:  * &#x60;page_token&#x60; * &#x60;limit&#x60;  {% endnote %}   
     *
     * @var string[]|null
     * @SerializedName("offerIds")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     * @Assert\Count(
     *   max = 200
     * )
     */
    public ?array $offerIds;

    /**
     * Фильтр по статусам товаров.
     *
     * @var OfferCampaignStatusType[]|null
     * @SerializedName("statuses")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferCampaignStatusType")
     * })
     * @Accessor(getter="getSerializedStatuses")
     * @Type("array<string>")
     */
    public ?array $statuses;

    /**
     * Фильтр по категориям на Маркете.
     *
     * @var int[]|null
     * @SerializedName("categoryIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     */
    public ?array $categoryIds;

    /**
     * Фильтр по брендам.
     *
     * @var string[]|null
     * @SerializedName("vendorNames")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $vendorNames;

    /**
     * Фильтр по тегам.
     *
     * @var string[]|null
     * @SerializedName("tags")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $tags;

    /**
     * Constructor
     *
     * @param string[]|null $offerIds
     * @param OfferCampaignStatusType[]|null $statuses
     * @param int[]|null $categoryIds
     * @param string[]|null $vendorNames
     * @param string[]|null $tags
     */
    public function __construct(?array $offerIds, ?array $statuses, ?array $categoryIds, ?array $vendorNames, ?array $tags)
    {
        $this->offerIds = $offerIds;
        $this->statuses = $statuses;
        $this->categoryIds = $categoryIds;
        $this->vendorNames = $vendorNames;
        $this->tags = $tags;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerIds'] ?? null, 
            isset($data['statuses']) ? array_map(fn($item) => OfferCampaignStatusType::tryFrom($item), $data['statuses']) : null, 
            $data['categoryIds'] ?? null, 
            $data['vendorNames'] ?? null, 
            $data['tags'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerIds' => $this->offerIds, 
            'statuses' => $this->statuses, 
            'categoryIds' => $this->categoryIds, 
            'vendorNames' => $this->vendorNames, 
            'tags' => $this->tags, 
        ];
    }
}


