<?php
/**
 * GenerateStocksOnWarehousesReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GenerateStocksOnWarehousesReportRequest model.
 *
 * Данные, необходимые для генерации отчета.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GenerateStocksOnWarehousesReportRequest 
{
        /**
     * Идентификатор магазина.
     *
     * @var int|null
     * @SerializedName("campaignId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $campaignId = null;

    /**
     * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     *
     * @var int[]|null
     * @SerializedName("warehouseIds")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    protected ?array $warehouseIds = null;

    /**
     * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
     *
     * @var \DateTime|null
     * @SerializedName("reportDate")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $reportDate = null;

    /**
     * Фильтр по категориям на Маркете (кроме модели FBY).
     *
     * @var int[]|null
     * @SerializedName("categoryIds")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    protected ?array $categoryIds = null;

    /**
     * Фильтр по наличию остатков (кроме модели FBY).
     *
     * @var bool|null
     * @SerializedName("hasStocks")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $hasStocks = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->campaignId = array_key_exists('campaignId', $data) ? $data['campaignId'] : $this->campaignId;
            $this->warehouseIds = array_key_exists('warehouseIds', $data) ? $data['warehouseIds'] : $this->warehouseIds;
            $this->reportDate = array_key_exists('reportDate', $data) ? $data['reportDate'] : $this->reportDate;
            $this->categoryIds = array_key_exists('categoryIds', $data) ? $data['categoryIds'] : $this->categoryIds;
            $this->hasStocks = array_key_exists('hasStocks', $data) ? $data['hasStocks'] : $this->hasStocks;
        }
    }

    /**
     * Gets campaignId.
     *
     * @return int|null
     */
    public function getCampaignId(): ?int
    {
        return $this->campaignId;
    }

    /**
    * Sets campaignId.
    *
    * @param int|null $campaignId  Идентификатор магазина.
    *
    * @return $this
    */
    public function setCampaignId(?int $campaignId): self
    {
        $this->campaignId = $campaignId;

        return $this;
    }




    /**
     * Gets warehouseIds.
     *
     * @return int[]|null
     */
    public function getWarehouseIds(): ?array
    {
        return $this->warehouseIds;
    }

    /**
    * Sets warehouseIds.
    *
    * @param int[]|null $warehouseIds  Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
    *
    * @return $this
    */
    public function setWarehouseIds(?array $warehouseIds = null): self
    {
        $this->warehouseIds = $warehouseIds;

        return $this;
    }




    /**
     * Gets reportDate.
     *
     * @return \DateTime|null
     */
    public function getReportDate(): ?\DateTime
    {
        return $this->reportDate;
    }

    /**
    * Sets reportDate.
    *
    * @param \DateTime|null $reportDate  Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
    *
    * @return $this
    */
    public function setReportDate(?\DateTime $reportDate = null): self
    {
        $this->reportDate = $reportDate;

        return $this;
    }




    /**
     * Gets categoryIds.
     *
     * @return int[]|null
     */
    public function getCategoryIds(): ?array
    {
        return $this->categoryIds;
    }

    /**
    * Sets categoryIds.
    *
    * @param int[]|null $categoryIds  Фильтр по категориям на Маркете (кроме модели FBY).
    *
    * @return $this
    */
    public function setCategoryIds(?array $categoryIds = null): self
    {
        $this->categoryIds = $categoryIds;

        return $this;
    }




    /**
     * Gets hasStocks.
     *
     * @return bool|null
     */
    public function isHasStocks(): ?bool
    {
        return $this->hasStocks;
    }

    /**
    * Sets hasStocks.
    *
    * @param bool|null $hasStocks  Фильтр по наличию остатков (кроме модели FBY).
    *
    * @return $this
    */
    public function setHasStocks(?bool $hasStocks = null): self
    {
        $this->hasStocks = $hasStocks;

        return $this;
    }



}


