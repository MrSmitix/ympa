<?php
/**
 * GenerateStocksOnWarehousesReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GenerateStocksOnWarehousesReportRequest model.
 *
 * Данные, необходимые для генерации отчета.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GenerateStocksOnWarehousesReportRequest  implements \JsonSerializable
{
        /**
     * Идентификатор магазина.
     *
     * @var int
     * @SerializedName("campaignId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $campaignId;

    /**
     * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
     *
     * @var int[]|null
     * @SerializedName("warehouseIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     */
    public ?array $warehouseIds;

    /**
     * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
     *
     * @var \DateTime|null
     * @SerializedName("reportDate")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $reportDate;

    /**
     * Фильтр по категориям на Маркете (кроме модели FBY).
     *
     * @var int[]|null
     * @SerializedName("categoryIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     */
    public ?array $categoryIds;

    /**
     * Фильтр по наличию остатков (кроме модели FBY).
     *
     * @var bool|null
     * @SerializedName("hasStocks")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $hasStocks;

    /**
     * Constructor
     *
     * @param int $campaignId
     * @param int[]|null $warehouseIds
     * @param \DateTime|null $reportDate
     * @param int[]|null $categoryIds
     * @param bool|null $hasStocks
     */
    public function __construct(int $campaignId, ?array $warehouseIds, ?\DateTime $reportDate, ?array $categoryIds, ?bool $hasStocks)
    {
        $this->campaignId = $campaignId;
        $this->warehouseIds = $warehouseIds;
        $this->reportDate = $reportDate;
        $this->categoryIds = $categoryIds;
        $this->hasStocks = $hasStocks;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['campaignId'] ?? null, 
            $data['warehouseIds'] ?? null, 
            $data['reportDate'] ?? null, 
            $data['categoryIds'] ?? null, 
            $data['hasStocks'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'campaignId' => $this->campaignId, 
            'warehouseIds' => $this->warehouseIds, 
            'reportDate' => $this->reportDate, 
            'categoryIds' => $this->categoryIds, 
            'hasStocks' => $this->hasStocks, 
        ];
    }
}


