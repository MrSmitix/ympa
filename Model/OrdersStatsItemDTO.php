<?php
/**
 * OrdersStatsItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrdersStatsItemDTO model.
 *
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;).
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrdersStatsItemDTO 
{
        /**
     * Название товара.
     *
     * @var string|null
     * @SerializedName("offerName")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $offerName = null;

    /**
     * SKU на Маркете.
     *
     * @var int|null
     * @SerializedName("marketSku")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $marketSku = null;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $shopSku = null;

    /**
     * Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;.
     *
     * @var int|null
     * @SerializedName("count")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $count = null;

    /**
     * Цена или скидки на товар.
     *
     * @var OrdersStatsPriceDTO[]|null
     * @SerializedName("prices")
     * @Type("array<OpenAPI\Server\Model\OrdersStatsPriceDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrdersStatsPriceDTO"),
    ])]
    protected ?array $prices = null;

    /**
     * @var OrdersStatsWarehouseDTO|null
     * @SerializedName("warehouse")
     * @Type("OpenAPI\Server\Model\OrdersStatsWarehouseDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OrdersStatsWarehouseDTO")]
    protected ?OrdersStatsWarehouseDTO $warehouse = null;

    /**
     * Информация об удалении товара из заказа.
     *
     * @var OrdersStatsDetailsDTO[]|null
     * @SerializedName("details")
     * @Type("array<OpenAPI\Server\Model\OrdersStatsDetailsDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrdersStatsDetailsDTO"),
    ])]
    protected ?array $details = null;

    /**
     * Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     *
     * @var string[]|null
     * @SerializedName("cisList")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $cisList = null;

    /**
     * Первоначальное количество единиц товара.
     *
     * @var int|null
     * @SerializedName("initialCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $initialCount = null;

    /**
     * Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.
     *
     * @var int|null
     * @SerializedName("bidFee")
     * @Type("int")
    */
    #[Assert\Type("int")]
    #[Assert\GreaterThanOrEqual(0)]
    #[Assert\LessThanOrEqual(10000)]
    protected ?int $bidFee = null;

    /**
     * Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.
     *
     * @var float|null
     * @SerializedName("cofinanceThreshold")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $cofinanceThreshold = null;

    /**
     * Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.
     *
     * @var float|null
     * @SerializedName("cofinanceValue")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $cofinanceValue = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->offerName = array_key_exists('offerName', $data) ? $data['offerName'] : $this->offerName;
            $this->marketSku = array_key_exists('marketSku', $data) ? $data['marketSku'] : $this->marketSku;
            $this->shopSku = array_key_exists('shopSku', $data) ? $data['shopSku'] : $this->shopSku;
            $this->count = array_key_exists('count', $data) ? $data['count'] : $this->count;
            $this->prices = array_key_exists('prices', $data) ? $data['prices'] : $this->prices;
            $this->warehouse = array_key_exists('warehouse', $data) ? $data['warehouse'] : $this->warehouse;
            $this->details = array_key_exists('details', $data) ? $data['details'] : $this->details;
            $this->cisList = array_key_exists('cisList', $data) ? $data['cisList'] : $this->cisList;
            $this->initialCount = array_key_exists('initialCount', $data) ? $data['initialCount'] : $this->initialCount;
            $this->bidFee = array_key_exists('bidFee', $data) ? $data['bidFee'] : $this->bidFee;
            $this->cofinanceThreshold = array_key_exists('cofinanceThreshold', $data) ? $data['cofinanceThreshold'] : $this->cofinanceThreshold;
            $this->cofinanceValue = array_key_exists('cofinanceValue', $data) ? $data['cofinanceValue'] : $this->cofinanceValue;
        }
    }

    /**
     * Gets offerName.
     *
     * @return string|null
     */
    public function getOfferName(): ?string
    {
        return $this->offerName;
    }

    /**
    * Sets offerName.
    *
    * @param string|null $offerName  Название товара.
    *
    * @return $this
    */
    public function setOfferName(?string $offerName = null): self
    {
        $this->offerName = $offerName;

        return $this;
    }




    /**
     * Gets marketSku.
     *
     * @return int|null
     */
    public function getMarketSku(): ?int
    {
        return $this->marketSku;
    }

    /**
    * Sets marketSku.
    *
    * @param int|null $marketSku  SKU на Маркете.
    *
    * @return $this
    */
    public function setMarketSku(?int $marketSku = null): self
    {
        $this->marketSku = $marketSku;

        return $this;
    }




    /**
     * Gets shopSku.
     *
     * @return string|null
     */
    public function getShopSku(): ?string
    {
        return $this->shopSku;
    }

    /**
    * Sets shopSku.
    *
    * @param string|null $shopSku  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setShopSku(?string $shopSku = null): self
    {
        $this->shopSku = $shopSku;

        return $this;
    }




    /**
     * Gets count.
     *
     * @return int|null
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
    * Sets count.
    *
    * @param int|null $count  Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`.
    *
    * @return $this
    */
    public function setCount(?int $count = null): self
    {
        $this->count = $count;

        return $this;
    }




    /**
     * Gets prices.
     *
     * @return OrdersStatsPriceDTO[]|null
     */
    public function getPrices(): ?array
    {
        return $this->prices;
    }

    /**
    * Sets prices.
    *
    * @param OrdersStatsPriceDTO[]|null $prices  Цена или скидки на товар.
    *
    * @return $this
    */
    public function setPrices(?array $prices = null): self
    {
        $this->prices = $prices;

        return $this;
    }




    /**
     * Gets warehouse.
     *
     * @return OrdersStatsWarehouseDTO|null
     */
    public function getWarehouse(): ?OrdersStatsWarehouseDTO
    {
        return $this->warehouse;
    }

    /**
    * Sets warehouse.
    *
    * @param OrdersStatsWarehouseDTO|null $warehouse
    *
    * @return $this
    */
    public function setWarehouse(?OrdersStatsWarehouseDTO $warehouse = null): self
    {
        $this->warehouse = $warehouse;

        return $this;
    }




    /**
     * Gets details.
     *
     * @return OrdersStatsDetailsDTO[]|null
     */
    public function getDetails(): ?array
    {
        return $this->details;
    }

    /**
    * Sets details.
    *
    * @param OrdersStatsDetailsDTO[]|null $details  Информация об удалении товара из заказа.
    *
    * @return $this
    */
    public function setDetails(?array $details = null): self
    {
        $this->details = $details;

        return $this;
    }




    /**
     * Gets cisList.
     *
     * @return string[]|null
     */
    public function getCisList(): ?array
    {
        return $this->cisList;
    }

    /**
    * Sets cisList.
    *
    * @param string[]|null $cisList  Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    *
    * @return $this
    */
    public function setCisList(?array $cisList = null): self
    {
        $this->cisList = $cisList;

        return $this;
    }




    /**
     * Gets initialCount.
     *
     * @return int|null
     */
    public function getInitialCount(): ?int
    {
        return $this->initialCount;
    }

    /**
    * Sets initialCount.
    *
    * @param int|null $initialCount  Первоначальное количество единиц товара.
    *
    * @return $this
    */
    public function setInitialCount(?int $initialCount = null): self
    {
        $this->initialCount = $initialCount;

        return $this;
    }




    /**
     * Gets bidFee.
     *
     * @return int|null
     */
    public function getBidFee(): ?int
    {
        return $this->bidFee;
    }

    /**
    * Sets bidFee.
    *
    * @param int|null $bidFee  Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.
    *
    * @return $this
    */
    public function setBidFee(?int $bidFee = null): self
    {
        $this->bidFee = $bidFee;

        return $this;
    }




    /**
     * Gets cofinanceThreshold.
     *
     * @return float|null
     */
    public function getCofinanceThreshold(): ?float
    {
        return $this->cofinanceThreshold;
    }

    /**
    * Sets cofinanceThreshold.
    *
    * @param float|null $cofinanceThreshold  Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.
    *
    * @return $this
    */
    public function setCofinanceThreshold(?float $cofinanceThreshold = null): self
    {
        $this->cofinanceThreshold = $cofinanceThreshold;

        return $this;
    }




    /**
     * Gets cofinanceValue.
     *
     * @return float|null
     */
    public function getCofinanceValue(): ?float
    {
        return $this->cofinanceValue;
    }

    /**
    * Sets cofinanceValue.
    *
    * @param float|null $cofinanceValue  Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.
    *
    * @return $this
    */
    public function setCofinanceValue(?float $cofinanceValue = null): self
    {
        $this->cofinanceValue = $cofinanceValue;

        return $this;
    }



}


