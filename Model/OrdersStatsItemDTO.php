<?php
/**
 * OrdersStatsItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrdersStatsItemDTO model.
 *
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;).
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrdersStatsItemDTO  implements \JsonSerializable
{
        /**
     * Название товара.
     *
     * @var string|null
     * @SerializedName("offerName")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $offerName;

    /**
     * SKU на Маркете.
     *
     * @var int|null
     * @SerializedName("marketSku")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $marketSku;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $shopSku;

    /**
     * Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;.
     *
     * @var int|null
     * @SerializedName("count")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $count;

    /**
     * Цена или скидки на товар.
     *
     * @var OrdersStatsPriceDTO[]|null
     * @SerializedName("prices")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrdersStatsPriceDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrdersStatsPriceDTO>")
     */
    public ?array $prices;

    /**
     * @var OrdersStatsWarehouseDTO|null
     * @SerializedName("warehouse")
     * @Assert\Type("\OpenAPIServer\Model\OrdersStatsWarehouseDTO")
     * @Type("\OpenAPIServer\Model\OrdersStatsWarehouseDTO")
     */
    public ?OrdersStatsWarehouseDTO $warehouse;

    /**
     * Информация об удалении товара из заказа.
     *
     * @var OrdersStatsDetailsDTO[]|null
     * @SerializedName("details")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrdersStatsDetailsDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrdersStatsDetailsDTO>")
     */
    public ?array $details;

    /**
     * Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     *
     * @var string[]|null
     * @SerializedName("cisList")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $cisList;

    /**
     * Первоначальное количество единиц товара.
     *
     * @var int|null
     * @SerializedName("initialCount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $initialCount;

    /**
     * Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500.
     *
     * @var int|null
     * @SerializedName("bidFee")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(10000)
     */
    public ?int $bidFee;

    /**
     * Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой.
     *
     * @var float|null
     * @SerializedName("cofinanceThreshold")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $cofinanceThreshold;

    /**
     * Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой.
     *
     * @var float|null
     * @SerializedName("cofinanceValue")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $cofinanceValue;

    /**
     * Constructor
     *
     * @param string|null $offerName
     * @param int|null $marketSku
     * @param string|null $shopSku
     * @param int|null $count
     * @param OrdersStatsPriceDTO[]|null $prices
     * @param OrdersStatsWarehouseDTO|null $warehouse
     * @param OrdersStatsDetailsDTO[]|null $details
     * @param string[]|null $cisList
     * @param int|null $initialCount
     * @param int|null $bidFee
     * @param float|null $cofinanceThreshold
     * @param float|null $cofinanceValue
     */
    public function __construct(?string $offerName, ?int $marketSku, ?string $shopSku, ?int $count, ?array $prices, ?OrdersStatsWarehouseDTO $warehouse, ?array $details, ?array $cisList, ?int $initialCount, ?int $bidFee, ?float $cofinanceThreshold, ?float $cofinanceValue)
    {
        $this->offerName = $offerName;
        $this->marketSku = $marketSku;
        $this->shopSku = $shopSku;
        $this->count = $count;
        $this->prices = $prices;
        $this->warehouse = $warehouse;
        $this->details = $details;
        $this->cisList = $cisList;
        $this->initialCount = $initialCount;
        $this->bidFee = $bidFee;
        $this->cofinanceThreshold = $cofinanceThreshold;
        $this->cofinanceValue = $cofinanceValue;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerName'] ?? null, 
            $data['marketSku'] ?? null, 
            $data['shopSku'] ?? null, 
            $data['count'] ?? null, 
            isset($data['prices']) ? array_map(fn($item) => OrdersStatsPriceDTO::fromArray($item), $data['prices']) : null, 
            isset($data['warehouse']) ? OrdersStatsWarehouseDTO::fromArray($data['warehouse']) : null, 
            isset($data['details']) ? array_map(fn($item) => OrdersStatsDetailsDTO::fromArray($item), $data['details']) : null, 
            $data['cisList'] ?? null, 
            $data['initialCount'] ?? null, 
            $data['bidFee'] ?? null, 
            $data['cofinanceThreshold'] ?? null, 
            $data['cofinanceValue'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerName' => $this->offerName, 
            'marketSku' => $this->marketSku, 
            'shopSku' => $this->shopSku, 
            'count' => $this->count, 
            'prices' => $this->prices, 
            'warehouse' => $this->warehouse, 
            'details' => $this->details, 
            'cisList' => $this->cisList, 
            'initialCount' => $this->initialCount, 
            'bidFee' => $this->bidFee, 
            'cofinanceThreshold' => $this->cofinanceThreshold, 
            'cofinanceValue' => $this->cofinanceValue, 
        ];
    }
}


