<?php
/**
 * GoodsFeedbackDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GoodsFeedbackDTO model.
 *
 * Отзыв о товаре.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GoodsFeedbackDTO  implements \JsonSerializable
{
        /**
     * Идентификатор отзыва.
     *
     * @var int
     * @SerializedName("feedbackId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $feedbackId;

    /**
     * Дата и время создания отзыва.
     *
     * @var \DateTime
     * @SerializedName("createdAt")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $createdAt;

    /**
     * Нужен ли ответ на отзыв.
     *
     * @var bool
     * @SerializedName("needReaction")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $needReaction;

    /**
     * @var GoodsFeedbackIdentifiersDTO
     * @SerializedName("identifiers")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\GoodsFeedbackIdentifiersDTO")
     * @Type("\OpenAPIServer\Model\GoodsFeedbackIdentifiersDTO")
     */
    public GoodsFeedbackIdentifiersDTO $identifiers;

    /**
     * Имя автора отзыва.
     *
     * @var string|null
     * @SerializedName("author")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $author;

    /**
     * @var GoodsFeedbackDescriptionDTO|null
     * @SerializedName("description")
     * @Assert\Type("\OpenAPIServer\Model\GoodsFeedbackDescriptionDTO")
     * @Type("\OpenAPIServer\Model\GoodsFeedbackDescriptionDTO")
     */
    public ?GoodsFeedbackDescriptionDTO $description;

    /**
     * @var GoodsFeedbackMediaDTO|null
     * @SerializedName("media")
     * @Assert\Type("\OpenAPIServer\Model\GoodsFeedbackMediaDTO")
     * @Type("\OpenAPIServer\Model\GoodsFeedbackMediaDTO")
     */
    public ?GoodsFeedbackMediaDTO $media;

    /**
     * @var GoodsFeedbackStatisticsDTO
     * @SerializedName("statistics")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\GoodsFeedbackStatisticsDTO")
     * @Type("\OpenAPIServer\Model\GoodsFeedbackStatisticsDTO")
     */
    public GoodsFeedbackStatisticsDTO $statistics;

    /**
     * Constructor
     *
     * @param int $feedbackId
     * @param \DateTime $createdAt
     * @param bool $needReaction
     * @param GoodsFeedbackIdentifiersDTO $identifiers
     * @param string|null $author
     * @param GoodsFeedbackDescriptionDTO|null $description
     * @param GoodsFeedbackMediaDTO|null $media
     * @param GoodsFeedbackStatisticsDTO $statistics
     */
    public function __construct(int $feedbackId, \DateTime $createdAt, bool $needReaction, GoodsFeedbackIdentifiersDTO $identifiers, ?string $author, ?GoodsFeedbackDescriptionDTO $description, ?GoodsFeedbackMediaDTO $media, GoodsFeedbackStatisticsDTO $statistics)
    {
        $this->feedbackId = $feedbackId;
        $this->createdAt = $createdAt;
        $this->needReaction = $needReaction;
        $this->identifiers = $identifiers;
        $this->author = $author;
        $this->description = $description;
        $this->media = $media;
        $this->statistics = $statistics;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['feedbackId'] ?? null, 
            isset($data['createdAt']) ? new \DateTime($data['createdAt']) : null, 
            $data['needReaction'] ?? null, 
            isset($data['identifiers']) ? GoodsFeedbackIdentifiersDTO::fromArray($data['identifiers']) : null, 
            $data['author'] ?? null, 
            isset($data['description']) ? GoodsFeedbackDescriptionDTO::fromArray($data['description']) : null, 
            isset($data['media']) ? GoodsFeedbackMediaDTO::fromArray($data['media']) : null, 
            isset($data['statistics']) ? GoodsFeedbackStatisticsDTO::fromArray($data['statistics']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'feedbackId' => $this->feedbackId, 
            'createdAt' => $this->createdAt?->format('c'), 
            'needReaction' => $this->needReaction, 
            'identifiers' => $this->identifiers, 
            'author' => $this->author, 
            'description' => $this->description, 
            'media' => $this->media, 
            'statistics' => $this->statistics, 
        ];
    }
}


