<?php
/**
 * UpdateCampaignOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the UpdateCampaignOfferDTO model.
 *
 * Параметры размещения товара в магазине.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class UpdateCampaignOfferDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("offerId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $offerId;

    /**
     * @var QuantumDTO|null
     * @SerializedName("quantum")
     * @Assert\Type("\OpenAPIServer\Model\QuantumDTO")
     * @Type("\OpenAPIServer\Model\QuantumDTO")
     */
    public ?QuantumDTO $quantum;

    /**
     * Есть ли товар в продаже.
     *
     * @var bool|null
     * @SerializedName("available")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $available;

    /**
     * Ставка НДС, применяемая для товара. Задается цифрой:  * &#x60;2&#x60; — 10%. * &#x60;5&#x60; — 0%. * &#x60;6&#x60; — не облагается НДС. * &#x60;7&#x60; — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете продавца на Маркете.
     *
     * @var int|null
     * @SerializedName("vat")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $vat;

    /**
     * Constructor
     *
     * @param string $offerId
     * @param QuantumDTO|null $quantum
     * @param bool|null $available
     * @param int|null $vat
     */
    public function __construct(string $offerId, ?QuantumDTO $quantum, ?bool $available, ?int $vat)
    {
        $this->offerId = $offerId;
        $this->quantum = $quantum;
        $this->available = $available;
        $this->vat = $vat;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            isset($data['quantum']) ? QuantumDTO::fromArray($data['quantum']) : null, 
            $data['available'] ?? null, 
            $data['vat'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'quantum' => $this->quantum, 
            'available' => $this->available, 
            'vat' => $this->vat, 
        ];
    }
}


