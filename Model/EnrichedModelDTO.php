<?php
/**
 * EnrichedModelDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EnrichedModelDTO model.
 *
 * Модель товара.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class EnrichedModelDTO 
{
        /**
     * Идентификатор модели товара.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Название модели товара.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var ModelPriceDTO|null
     * @SerializedName("prices")
     * @Type("OpenAPI\Server\Model\ModelPriceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\ModelPriceDTO")]
    protected ?ModelPriceDTO $prices = null;

    /**
     * Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них.
     *
     * @var ModelOfferDTO[]|null
     * @SerializedName("offers")
     * @Type("array<OpenAPI\Server\Model\ModelOfferDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ModelOfferDTO"),
    ])]
    protected ?array $offers = null;

    /**
     * Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
     *
     * @var int|null
     * @SerializedName("offlineOffers")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $offlineOffers = null;

    /**
     * Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
     *
     * @var int|null
     * @SerializedName("onlineOffers")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $onlineOffers = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->prices = array_key_exists('prices', $data) ? $data['prices'] : $this->prices;
            $this->offers = array_key_exists('offers', $data) ? $data['offers'] : $this->offers;
            $this->offlineOffers = array_key_exists('offlineOffers', $data) ? $data['offlineOffers'] : $this->offlineOffers;
            $this->onlineOffers = array_key_exists('onlineOffers', $data) ? $data['onlineOffers'] : $this->onlineOffers;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор модели товара.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Название модели товара.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets prices.
     *
     * @return ModelPriceDTO|null
     */
    public function getPrices(): ?ModelPriceDTO
    {
        return $this->prices;
    }

    /**
    * Sets prices.
    *
    * @param ModelPriceDTO|null $prices
    *
    * @return $this
    */
    public function setPrices(?ModelPriceDTO $prices = null): self
    {
        $this->prices = $prices;

        return $this;
    }




    /**
     * Gets offers.
     *
     * @return ModelOfferDTO[]|null
     */
    public function getOffers(): ?array
    {
        return $this->offers;
    }

    /**
    * Sets offers.
    *
    * @param ModelOfferDTO[]|null $offers  Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них.
    *
    * @return $this
    */
    public function setOffers(?array $offers = null): self
    {
        $this->offers = $offers;

        return $this;
    }




    /**
     * Gets offlineOffers.
     *
     * @return int|null
     */
    public function getOfflineOffers(): ?int
    {
        return $this->offlineOffers;
    }

    /**
    * Sets offlineOffers.
    *
    * @param int|null $offlineOffers  Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
    *
    * @return $this
    */
    public function setOfflineOffers(?int $offlineOffers = null): self
    {
        $this->offlineOffers = $offlineOffers;

        return $this;
    }




    /**
     * Gets onlineOffers.
     *
     * @return int|null
     */
    public function getOnlineOffers(): ?int
    {
        return $this->onlineOffers;
    }

    /**
    * Sets onlineOffers.
    *
    * @param int|null $onlineOffers  Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
    *
    * @return $this
    */
    public function setOnlineOffers(?int $onlineOffers = null): self
    {
        $this->onlineOffers = $onlineOffers;

        return $this;
    }



}


