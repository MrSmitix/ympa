<?php
/**
 * OutletAddressDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OutletAddressDTO model.
 *
 * Адрес точки продаж.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OutletAddressDTO  implements \JsonSerializable
{
        /**
     * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}
     *
     * @var int
     * @SerializedName("regionId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $regionId;

    /**
     * Улица.
     *
     * @var string|null
     * @SerializedName("street")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 512
     * )
     */
    public ?string $street;

    /**
     * Номер дома.
     *
     * @var string|null
     * @SerializedName("number")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    public ?string $number;

    /**
     * Номер строения.
     *
     * @var string|null
     * @SerializedName("building")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 16
     * )
     */
    public ?string $building;

    /**
     * Номер владения.
     *
     * @var string|null
     * @SerializedName("estate")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 16
     * )
     */
    public ?string $estate;

    /**
     * Номер корпуса.
     *
     * @var string|null
     * @SerializedName("block")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 16
     * )
     */
    public ?string $block;

    /**
     * Дополнительная информация.
     *
     * @var string|null
     * @SerializedName("additional")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $additional;

    /**
     * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
     *
     * @var int|null
     * @SerializedName("km")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $km;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %}
     *
     * @var string|null
     * @SerializedName("city")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 200
     * )
     */
    public ?string $city;

    /**
     * Constructor
     *
     * @param int $regionId
     * @param string|null $street
     * @param string|null $number
     * @param string|null $building
     * @param string|null $estate
     * @param string|null $block
     * @param string|null $additional
     * @param int|null $km
     * @param string|null $city
     */
    public function __construct(int $regionId, ?string $street, ?string $number, ?string $building, ?string $estate, ?string $block, ?string $additional, ?int $km, ?string $city)
    {
        $this->regionId = $regionId;
        $this->street = $street;
        $this->number = $number;
        $this->building = $building;
        $this->estate = $estate;
        $this->block = $block;
        $this->additional = $additional;
        $this->km = $km;
        $this->city = $city;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['regionId'] ?? null, 
            $data['street'] ?? null, 
            $data['number'] ?? null, 
            $data['building'] ?? null, 
            $data['estate'] ?? null, 
            $data['block'] ?? null, 
            $data['additional'] ?? null, 
            $data['km'] ?? null, 
            $data['city'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'regionId' => $this->regionId, 
            'street' => $this->street, 
            'number' => $this->number, 
            'building' => $this->building, 
            'estate' => $this->estate, 
            'block' => $this->block, 
            'additional' => $this->additional, 
            'km' => $this->km, 
            'city' => $this->city, 
        ];
    }
}


