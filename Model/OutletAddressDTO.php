<?php
/**
 * OutletAddressDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OutletAddressDTO model.
 *
 * Адрес точки продаж.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OutletAddressDTO 
{
        /**
     * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}
     *
     * @var int|null
     * @SerializedName("regionId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $regionId = null;

    /**
     * Улица.
     *
     * @var string|null
     * @SerializedName("street")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 512)]
    protected ?string $street = null;

    /**
     * Номер дома.
     *
     * @var string|null
     * @SerializedName("number")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $number = null;

    /**
     * Номер строения.
     *
     * @var string|null
     * @SerializedName("building")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 16)]
    protected ?string $building = null;

    /**
     * Номер владения.
     *
     * @var string|null
     * @SerializedName("estate")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 16)]
    protected ?string $estate = null;

    /**
     * Номер корпуса.
     *
     * @var string|null
     * @SerializedName("block")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 16)]
    protected ?string $block = null;

    /**
     * Дополнительная информация.
     *
     * @var string|null
     * @SerializedName("additional")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $additional = null;

    /**
     * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
     *
     * @var int|null
     * @SerializedName("km")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $km = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %}
     *
     * @var string|null
     * @SerializedName("city")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 200)]
    protected ?string $city = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->regionId = array_key_exists('regionId', $data) ? $data['regionId'] : $this->regionId;
            $this->street = array_key_exists('street', $data) ? $data['street'] : $this->street;
            $this->number = array_key_exists('number', $data) ? $data['number'] : $this->number;
            $this->building = array_key_exists('building', $data) ? $data['building'] : $this->building;
            $this->estate = array_key_exists('estate', $data) ? $data['estate'] : $this->estate;
            $this->block = array_key_exists('block', $data) ? $data['block'] : $this->block;
            $this->additional = array_key_exists('additional', $data) ? $data['additional'] : $this->additional;
            $this->km = array_key_exists('km', $data) ? $data['km'] : $this->km;
            $this->city = array_key_exists('city', $data) ? $data['city'] : $this->city;
        }
    }

    /**
     * Gets regionId.
     *
     * @return int|null
     */
    public function getRegionId(): ?int
    {
        return $this->regionId;
    }

    /**
    * Sets regionId.
    *
    * @param int|null $regionId  Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %}
    *
    * @return $this
    */
    public function setRegionId(?int $regionId): self
    {
        $this->regionId = $regionId;

        return $this;
    }




    /**
     * Gets street.
     *
     * @return string|null
     */
    public function getStreet(): ?string
    {
        return $this->street;
    }

    /**
    * Sets street.
    *
    * @param string|null $street  Улица.
    *
    * @return $this
    */
    public function setStreet(?string $street = null): self
    {
        $this->street = $street;

        return $this;
    }




    /**
     * Gets number.
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->number;
    }

    /**
    * Sets number.
    *
    * @param string|null $number  Номер дома.
    *
    * @return $this
    */
    public function setNumber(?string $number = null): self
    {
        $this->number = $number;

        return $this;
    }




    /**
     * Gets building.
     *
     * @return string|null
     */
    public function getBuilding(): ?string
    {
        return $this->building;
    }

    /**
    * Sets building.
    *
    * @param string|null $building  Номер строения.
    *
    * @return $this
    */
    public function setBuilding(?string $building = null): self
    {
        $this->building = $building;

        return $this;
    }




    /**
     * Gets estate.
     *
     * @return string|null
     */
    public function getEstate(): ?string
    {
        return $this->estate;
    }

    /**
    * Sets estate.
    *
    * @param string|null $estate  Номер владения.
    *
    * @return $this
    */
    public function setEstate(?string $estate = null): self
    {
        $this->estate = $estate;

        return $this;
    }




    /**
     * Gets block.
     *
     * @return string|null
     */
    public function getBlock(): ?string
    {
        return $this->block;
    }

    /**
    * Sets block.
    *
    * @param string|null $block  Номер корпуса.
    *
    * @return $this
    */
    public function setBlock(?string $block = null): self
    {
        $this->block = $block;

        return $this;
    }




    /**
     * Gets additional.
     *
     * @return string|null
     */
    public function getAdditional(): ?string
    {
        return $this->additional;
    }

    /**
    * Sets additional.
    *
    * @param string|null $additional  Дополнительная информация.
    *
    * @return $this
    */
    public function setAdditional(?string $additional = null): self
    {
        $this->additional = $additional;

        return $this;
    }




    /**
     * Gets km.
     *
     * @return int|null
     */
    public function getKm(): ?int
    {
        return $this->km;
    }

    /**
    * Sets km.
    *
    * @param int|null $km  Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    *
    * @return $this
    */
    public function setKm(?int $km = null): self
    {
        $this->km = $km;

        return $this;
    }




    /**
     * Gets city.
     *
     * @return string|null
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
    * Sets city.
    *
    * @param string|null $city  {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %}
    *
    * @return $this
    */
    public function setCity(?string $city = null): self
    {
        $this->city = $city;

        return $this;
    }



}


