<?php
/**
 * OfferForRecommendationDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OfferForRecommendationDTO model.
 *
 * Информация о состоянии цены на товар.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OfferForRecommendationDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $offerId;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("price")
     * @Assert\Type("\OpenAPIServer\Model\BasePriceDTO")
     * @Type("\OpenAPIServer\Model\BasePriceDTO")
     */
    public ?BasePriceDTO $price;

    /**
     * @var GetPriceDTO|null
     * @SerializedName("cofinancePrice")
     * @Assert\Type("\OpenAPIServer\Model\GetPriceDTO")
     * @Type("\OpenAPIServer\Model\GetPriceDTO")
     */
    public ?GetPriceDTO $cofinancePrice;

    /**
     * @var PriceCompetitivenessType|null
     * @SerializedName("competitiveness")
        * @Accessor(getter="getSerializedCompetitiveness")
        * @Type("string")
     */
    public ?PriceCompetitivenessType $competitiveness;

    /**
     * Количество показов карточки товара за последние 7 дней.
     *
     * @var int|null
     * @SerializedName("shows")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $shows;

    /**
     * Constructor
     *
     * @param string|null $offerId
     * @param BasePriceDTO|null $price
     * @param GetPriceDTO|null $cofinancePrice
     * @param PriceCompetitivenessType|null $competitiveness
     * @param int|null $shows
     */
    public function __construct(?string $offerId, ?BasePriceDTO $price, ?GetPriceDTO $cofinancePrice, ?PriceCompetitivenessType $competitiveness, ?int $shows)
    {
        $this->offerId = $offerId;
        $this->price = $price;
        $this->cofinancePrice = $cofinancePrice;
        $this->competitiveness = $competitiveness;
        $this->shows = $shows;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            isset($data['price']) ? BasePriceDTO::fromArray($data['price']) : null, 
            isset($data['cofinancePrice']) ? GetPriceDTO::fromArray($data['cofinancePrice']) : null, 
            isset($data['competitiveness']) ? PriceCompetitivenessType::tryFrom($data['competitiveness']) : null, 
            $data['shows'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'price' => $this->price, 
            'cofinancePrice' => $this->cofinancePrice, 
            'competitiveness' => $this->competitiveness, 
            'shows' => $this->shows, 
        ];
    }
}


