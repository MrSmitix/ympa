<?php
/**
 * WarehouseDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the WarehouseDTO model.
 *
 * Информация о складе.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class WarehouseDTO  implements \JsonSerializable
{
        /**
     * Идентификатор склада.
     *
     * @var int
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $id;

    /**
     * Название склада.
     *
     * @var string
     * @SerializedName("name")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $name;

    /**
     * Идентификатор кампании в API и идентификатор магазина.
     *
     * @var int
     * @SerializedName("campaignId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $campaignId;

    /**
     * Возможна ли доставка по модели Экспресс.
     *
     * @var bool
     * @SerializedName("express")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $express;

    /**
     * @var WarehouseAddressDTO|null
     * @SerializedName("address")
     * @Assert\Type("\OpenAPIServer\Model\WarehouseAddressDTO")
     * @Type("\OpenAPIServer\Model\WarehouseAddressDTO")
     */
    public ?WarehouseAddressDTO $address;

    /**
     * Constructor
     *
     * @param int $id
     * @param string $name
     * @param int $campaignId
     * @param bool $express
     * @param WarehouseAddressDTO|null $address
     */
    public function __construct(int $id, string $name, int $campaignId, bool $express, ?WarehouseAddressDTO $address)
    {
        $this->id = $id;
        $this->name = $name;
        $this->campaignId = $campaignId;
        $this->express = $express;
        $this->address = $address;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['name'] ?? null, 
            $data['campaignId'] ?? null, 
            $data['express'] ?? null, 
            isset($data['address']) ? WarehouseAddressDTO::fromArray($data['address']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'name' => $this->name, 
            'campaignId' => $this->campaignId, 
            'express' => $this->express, 
            'address' => $this->address, 
        ];
    }
}


