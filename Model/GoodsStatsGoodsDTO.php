<?php
/**
 * GoodsStatsGoodsDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GoodsStatsGoodsDTO model.
 *
 * Информация о товаре.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GoodsStatsGoodsDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $shopSku;

    /**
     * SKU на Маркете.
     *
     * @var int|null
     * @SerializedName("marketSku")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $marketSku;

    /**
     * Название товара.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $name;

    /**
     * Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
     *
     * @var float|null
     * @SerializedName("price")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $price;

    /**
     * Идентификатор категории товара на Маркете.
     *
     * @var int|null
     * @SerializedName("categoryId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $categoryId;

    /**
     * Название категории товара на Маркете.
     *
     * @var string|null
     * @SerializedName("categoryName")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $categoryName;

    /**
     * @var GoodsStatsWeightDimensionsDTO|null
     * @SerializedName("weightDimensions")
     * @Assert\Type("\OpenAPIServer\Model\GoodsStatsWeightDimensionsDTO")
     * @Type("\OpenAPIServer\Model\GoodsStatsWeightDimensionsDTO")
     */
    public ?GoodsStatsWeightDimensionsDTO $weightDimensions;

    /**
     * Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе.
     *
     * @var GoodsStatsWarehouseDTO[]|null
     * @SerializedName("warehouses")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\GoodsStatsWarehouseDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\GoodsStatsWarehouseDTO>")
     */
    public ?array $warehouses;

    /**
     * Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги &#x60;SORTING&#x60; (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/).
     *
     * @var TariffDTO[]|null
     * @SerializedName("tariffs")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\TariffDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\TariffDTO>")
     */
    public ?array $tariffs;

    /**
     * Ссылки (URL) изображений товара в хорошем качестве.
     *
     * @var string[]|null
     * @SerializedName("pictures")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $pictures;

    /**
     * Constructor
     *
     * @param string|null $shopSku
     * @param int|null $marketSku
     * @param string|null $name
     * @param float|null $price
     * @param int|null $categoryId
     * @param string|null $categoryName
     * @param GoodsStatsWeightDimensionsDTO|null $weightDimensions
     * @param GoodsStatsWarehouseDTO[]|null $warehouses
     * @param TariffDTO[]|null $tariffs
     * @param string[]|null $pictures
     */
    public function __construct(?string $shopSku, ?int $marketSku, ?string $name, ?float $price, ?int $categoryId, ?string $categoryName, ?GoodsStatsWeightDimensionsDTO $weightDimensions, ?array $warehouses, ?array $tariffs, ?array $pictures)
    {
        $this->shopSku = $shopSku;
        $this->marketSku = $marketSku;
        $this->name = $name;
        $this->price = $price;
        $this->categoryId = $categoryId;
        $this->categoryName = $categoryName;
        $this->weightDimensions = $weightDimensions;
        $this->warehouses = $warehouses;
        $this->tariffs = $tariffs;
        $this->pictures = $pictures;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['shopSku'] ?? null, 
            $data['marketSku'] ?? null, 
            $data['name'] ?? null, 
            $data['price'] ?? null, 
            $data['categoryId'] ?? null, 
            $data['categoryName'] ?? null, 
            isset($data['weightDimensions']) ? GoodsStatsWeightDimensionsDTO::fromArray($data['weightDimensions']) : null, 
            isset($data['warehouses']) ? array_map(fn($item) => GoodsStatsWarehouseDTO::fromArray($item), $data['warehouses']) : null, 
            isset($data['tariffs']) ? array_map(fn($item) => TariffDTO::fromArray($item), $data['tariffs']) : null, 
            $data['pictures'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'shopSku' => $this->shopSku, 
            'marketSku' => $this->marketSku, 
            'name' => $this->name, 
            'price' => $this->price, 
            'categoryId' => $this->categoryId, 
            'categoryName' => $this->categoryName, 
            'weightDimensions' => $this->weightDimensions, 
            'warehouses' => $this->warehouses, 
            'tariffs' => $this->tariffs, 
            'pictures' => $this->pictures, 
        ];
    }
}


