<?php
/**
 * GetChatsRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GetChatsRequest model.
 *
 * Фильтры по чатам, которые нужно вернуть.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GetChatsRequest 
{
        /**
     * Фильтр по идентификаторам заказов на Маркете.
     *
     * @var int[]|null
     * @SerializedName("orderIds")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    #[Assert\Count(min: 1)]
    protected ?array $orderIds = null;

    /**
     * Фильтр по типам чатов.
     *
     * @var ChatType[]|null
     * @SerializedName("types")
     * @Accessor(getter="getSerializedTypes", setter="setDeserializedTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ChatType"),
    ])]
    #[Assert\Count(min: 1)]
    protected ?array $types = null;

    /**
     * Фильтр по статусам чатов.
     *
     * @var ChatStatusType[]|null
     * @SerializedName("statuses")
     * @Accessor(getter="getSerializedStatuses", setter="setDeserializedStatuses")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ChatStatusType"),
    ])]
    #[Assert\Count(min: 1)]
    protected ?array $statuses = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->orderIds = array_key_exists('orderIds', $data) ? $data['orderIds'] : $this->orderIds;
            $this->types = array_key_exists('types', $data) ? $data['types'] : $this->types;
            $this->statuses = array_key_exists('statuses', $data) ? $data['statuses'] : $this->statuses;
        }
    }

    /**
     * Gets orderIds.
     *
     * @return int[]|null
     */
    public function getOrderIds(): ?array
    {
        return $this->orderIds;
    }

    /**
    * Sets orderIds.
    *
    * @param int[]|null $orderIds  Фильтр по идентификаторам заказов на Маркете.
    *
    * @return $this
    */
    public function setOrderIds(?array $orderIds = null): self
    {
        $this->orderIds = $orderIds;

        return $this;
    }




    /**
     * Gets types.
     *
     * @return ChatType[]|null
     */
    public function getTypes(): ?array
    {
        return $this->types;
    }

    /**
    * Sets types.
    *
    * @param ChatType[]|null $types  Фильтр по типам чатов.
    *
    * @return $this
    */
    public function setTypes(?array $types = null): self
    {
        $this->types = $types;

        return $this;
    }


    /**
    * Gets types for serialization.
    *
    * @return array
    */
    public function getSerializedTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->types ?? []
        );
    }

    /**
    * Sets types.
    *
    * @param ?array $types
    *
    * @return $this
    */
    public function setDeserializedTypes(?array $types = []): self
    {
        $this->types = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ChatType::tryFrom($value);
                }

                return $value;
            },
            $types ?? []
        );

        return $this;
    }


    /**
     * Gets statuses.
     *
     * @return ChatStatusType[]|null
     */
    public function getStatuses(): ?array
    {
        return $this->statuses;
    }

    /**
    * Sets statuses.
    *
    * @param ChatStatusType[]|null $statuses  Фильтр по статусам чатов.
    *
    * @return $this
    */
    public function setStatuses(?array $statuses = null): self
    {
        $this->statuses = $statuses;

        return $this;
    }


    /**
    * Gets statuses for serialization.
    *
    * @return array
    */
    public function getSerializedStatuses(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->statuses ?? []
        );
    }

    /**
    * Sets statuses.
    *
    * @param ?array $statuses
    *
    * @return $this
    */
    public function setDeserializedStatuses(?array $statuses = []): self
    {
        $this->statuses = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = ChatStatusType::tryFrom($value);
                }

                return $value;
            },
            $statuses ?? []
        );

        return $this;
    }

}


