<?php
/**
 * GetChatsRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetChatsRequest model.
 *
 * Фильтры по чатам, которые нужно вернуть.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetChatsRequest  implements \JsonSerializable
{
        /**
     * Фильтр по идентификаторам заказов на Маркете.
     *
     * @var int[]|null
     * @SerializedName("orderIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     * @Assert\Count(
     *   min = 1
     * )
     */
    public ?array $orderIds;

    /**
     * Фильтр по типам чатов.
     *
     * @var ChatType[]|null
     * @SerializedName("types")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ChatType")
     * })
     * @Accessor(getter="getSerializedTypes")
     * @Type("array<string>")
     * @Assert\Count(
     *   min = 1
     * )
     */
    public ?array $types;

    /**
     * Фильтр по статусам чатов.
     *
     * @var ChatStatusType[]|null
     * @SerializedName("statuses")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ChatStatusType")
     * })
     * @Accessor(getter="getSerializedStatuses")
     * @Type("array<string>")
     * @Assert\Count(
     *   min = 1
     * )
     */
    public ?array $statuses;

    /**
     * Constructor
     *
     * @param int[]|null $orderIds
     * @param ChatType[]|null $types
     * @param ChatStatusType[]|null $statuses
     */
    public function __construct(?array $orderIds, ?array $types, ?array $statuses)
    {
        $this->orderIds = $orderIds;
        $this->types = $types;
        $this->statuses = $statuses;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['orderIds'] ?? null, 
            isset($data['types']) ? array_map(fn($item) => ChatType::tryFrom($item), $data['types']) : null, 
            isset($data['statuses']) ? array_map(fn($item) => ChatStatusType::tryFrom($item), $data['statuses']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'orderIds' => $this->orderIds, 
            'types' => $this->types, 
            'statuses' => $this->statuses, 
        ];
    }
}


