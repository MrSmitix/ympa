<?php
/**
 * GetGoodsFeedbackRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetGoodsFeedbackRequest model.
 *
 * Фильтр запроса отзывов в кабинете.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetGoodsFeedbackRequest  implements \JsonSerializable
{
        /**
     * Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeFrom")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $dateTimeFrom;

    /**
     * Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeTo")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $dateTimeTo;

    /**
     * @var FeedbackReactionStatusType|null
     * @SerializedName("reactionStatus")
        * @Accessor(getter="getSerializedReactionStatus")
        * @Type("string")
     */
    public ?FeedbackReactionStatusType $reactionStatus;

    /**
     * Оценка товара.
     *
     * @var int[]|null
     * @SerializedName("ratingValues")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     * @Assert\Count(
     *   max = 5
     * )
     */
    public ?array $ratingValues;

    /**
     * Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).
     *
     * @var int[]|null
     * @SerializedName("modelIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     * @Assert\Count(
     *   max = 20
     * )
     */
    public ?array $modelIds;

    /**
     * Фильтр отзывов за баллы Плюса.
     *
     * @var bool|null
     * @SerializedName("paid")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $paid;

    /**
     * Constructor
     *
     * @param \DateTime|null $dateTimeFrom
     * @param \DateTime|null $dateTimeTo
     * @param FeedbackReactionStatusType|null $reactionStatus
     * @param int[]|null $ratingValues
     * @param int[]|null $modelIds
     * @param bool|null $paid
     */
    public function __construct(?\DateTime $dateTimeFrom, ?\DateTime $dateTimeTo, ?FeedbackReactionStatusType $reactionStatus, ?array $ratingValues, ?array $modelIds, ?bool $paid)
    {
        $this->dateTimeFrom = $dateTimeFrom;
        $this->dateTimeTo = $dateTimeTo;
        $this->reactionStatus = $reactionStatus;
        $this->ratingValues = $ratingValues;
        $this->modelIds = $modelIds;
        $this->paid = $paid;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            isset($data['dateTimeFrom']) ? new \DateTime($data['dateTimeFrom']) : null, 
            isset($data['dateTimeTo']) ? new \DateTime($data['dateTimeTo']) : null, 
            isset($data['reactionStatus']) ? FeedbackReactionStatusType::tryFrom($data['reactionStatus']) : null, 
            $data['ratingValues'] ?? null, 
            $data['modelIds'] ?? null, 
            $data['paid'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'dateTimeFrom' => $this->dateTimeFrom?->format('c'), 
            'dateTimeTo' => $this->dateTimeTo?->format('c'), 
            'reactionStatus' => $this->reactionStatus, 
            'ratingValues' => $this->ratingValues, 
            'modelIds' => $this->modelIds, 
            'paid' => $this->paid, 
        ];
    }
}


