<?php
/**
 * GetGoodsFeedbackRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GetGoodsFeedbackRequest model.
 *
 * Фильтр запроса отзывов в кабинете.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GetGoodsFeedbackRequest 
{
        /**
     * Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeFrom")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateTimeFrom = null;

    /**
     * Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeTo")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateTimeTo = null;

    /**
     * @var FeedbackReactionStatusType|null
     * @SerializedName("reactionStatus")
    * @Accessor(getter="getSerializedReactionStatus", setter="setDeserializedReactionStatus")
    * @Type("string")
    */
    protected ?FeedbackReactionStatusType $reactionStatus = null;

    /**
     * Оценка товара.
     *
     * @var int[]|null
     * @SerializedName("ratingValues")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    #[Assert\Count(max: 5)]
    protected ?array $ratingValues = null;

    /**
     * Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).
     *
     * @var int[]|null
     * @SerializedName("modelIds")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    #[Assert\Count(max: 20)]
    protected ?array $modelIds = null;

    /**
     * Фильтр отзывов за баллы Плюса.
     *
     * @var bool|null
     * @SerializedName("paid")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $paid = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->dateTimeFrom = array_key_exists('dateTimeFrom', $data) ? $data['dateTimeFrom'] : $this->dateTimeFrom;
            $this->dateTimeTo = array_key_exists('dateTimeTo', $data) ? $data['dateTimeTo'] : $this->dateTimeTo;
            $this->reactionStatus = array_key_exists('reactionStatus', $data) ? $data['reactionStatus'] : $this->reactionStatus;
            $this->ratingValues = array_key_exists('ratingValues', $data) ? $data['ratingValues'] : $this->ratingValues;
            $this->modelIds = array_key_exists('modelIds', $data) ? $data['modelIds'] : $this->modelIds;
            $this->paid = array_key_exists('paid', $data) ? $data['paid'] : $this->paid;
        }
    }

    /**
     * Gets dateTimeFrom.
     *
     * @return \DateTime|null
     */
    public function getDateTimeFrom(): ?\DateTime
    {
        return $this->dateTimeFrom;
    }

    /**
    * Sets dateTimeFrom.
    *
    * @param \DateTime|null $dateTimeFrom  Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты.
    *
    * @return $this
    */
    public function setDateTimeFrom(?\DateTime $dateTimeFrom = null): self
    {
        $this->dateTimeFrom = $dateTimeFrom;

        return $this;
    }




    /**
     * Gets dateTimeTo.
     *
     * @return \DateTime|null
     */
    public function getDateTimeTo(): ?\DateTime
    {
        return $this->dateTimeTo;
    }

    /**
    * Sets dateTimeTo.
    *
    * @param \DateTime|null $dateTimeTo  Конец периода. Не включительно.  Если параметр не указан, используется текущая дата.
    *
    * @return $this
    */
    public function setDateTimeTo(?\DateTime $dateTimeTo = null): self
    {
        $this->dateTimeTo = $dateTimeTo;

        return $this;
    }




    /**
     * Gets reactionStatus.
     *
     * @return FeedbackReactionStatusType|null
     */
    public function getReactionStatus(): ?FeedbackReactionStatusType
    {
        return $this->reactionStatus;
    }

    /**
    * Sets reactionStatus.
    *
    * @param FeedbackReactionStatusType|null $reactionStatus
    *
    * @return $this
    */
    public function setReactionStatus(?FeedbackReactionStatusType $reactionStatus = null): self
    {
        $this->reactionStatus = $reactionStatus;

        return $this;
    }

    /**
    * Gets reactionStatus for serialization.
    *
    * @return string|null
    */
    public function getSerializedReactionStatus(): string|null
    {
        return $this->reactionStatus?->value ? (string) $this->reactionStatus->value : null;
    }

    /**
    * Sets reactionStatus.
    *
    * @param string|FeedbackReactionStatusType|null $reactionStatus
    *
    * @return $this
    */
    public function setDeserializedReactionStatus(string|FeedbackReactionStatusType|null $reactionStatus = null): self
    {
        if (is_string($reactionStatus)) {
            $reactionStatus = FeedbackReactionStatusType::tryFrom($reactionStatus);
        }

        $this->reactionStatus = $reactionStatus;

        return $this;
    }



    /**
     * Gets ratingValues.
     *
     * @return int[]|null
     */
    public function getRatingValues(): ?array
    {
        return $this->ratingValues;
    }

    /**
    * Sets ratingValues.
    *
    * @param int[]|null $ratingValues  Оценка товара.
    *
    * @return $this
    */
    public function setRatingValues(?array $ratingValues = null): self
    {
        $this->ratingValues = $ratingValues;

        return $this;
    }




    /**
     * Gets modelIds.
     *
     * @return int[]|null
     */
    public function getModelIds(): ?array
    {
        return $this->modelIds;
    }

    /**
    * Sets modelIds.
    *
    * @param int[]|null $modelIds  Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md).
    *
    * @return $this
    */
    public function setModelIds(?array $modelIds = null): self
    {
        $this->modelIds = $modelIds;

        return $this;
    }




    /**
     * Gets paid.
     *
     * @return bool|null
     */
    public function isPaid(): ?bool
    {
        return $this->paid;
    }

    /**
    * Sets paid.
    *
    * @param bool|null $paid  Фильтр отзывов за баллы Плюса.
    *
    * @return $this
    */
    public function setPaid(?bool $paid = null): self
    {
        $this->paid = $paid;

        return $this;
    }



}


