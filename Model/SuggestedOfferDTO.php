<?php
/**
 * SuggestedOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the SuggestedOfferDTO model.
 *
 * Информация о товаре.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class SuggestedOfferDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $offerId;

    /**
     * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    public ?string $name;

    /**
     * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.
     *
     * @var string|null
     * @SerializedName("category")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $category;

    /**
     * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     *
     * @var string|null
     * @SerializedName("vendor")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $vendor;

    /**
     * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
     *
     * @var string[]|null
     * @SerializedName("barcodes")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $barcodes;

    /**
     * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 6000
     * )
     */
    public ?string $description;

    /**
     * Артикул товара от производителя.
     *
     * @var string|null
     * @SerializedName("vendorCode")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $vendorCode;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("basicPrice")
     * @Assert\Type("\OpenAPIServer\Model\BasePriceDTO")
     * @Type("\OpenAPIServer\Model\BasePriceDTO")
     */
    public ?BasePriceDTO $basicPrice;

    /**
     * Constructor
     *
     * @param string|null $offerId
     * @param string|null $name
     * @param string|null $category
     * @param string|null $vendor
     * @param string[]|null $barcodes
     * @param string|null $description
     * @param string|null $vendorCode
     * @param BasePriceDTO|null $basicPrice
     */
    public function __construct(?string $offerId, ?string $name, ?string $category, ?string $vendor, ?array $barcodes, ?string $description, ?string $vendorCode, ?BasePriceDTO $basicPrice)
    {
        $this->offerId = $offerId;
        $this->name = $name;
        $this->category = $category;
        $this->vendor = $vendor;
        $this->barcodes = $barcodes;
        $this->description = $description;
        $this->vendorCode = $vendorCode;
        $this->basicPrice = $basicPrice;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            $data['name'] ?? null, 
            $data['category'] ?? null, 
            $data['vendor'] ?? null, 
            $data['barcodes'] ?? null, 
            $data['description'] ?? null, 
            $data['vendorCode'] ?? null, 
            isset($data['basicPrice']) ? BasePriceDTO::fromArray($data['basicPrice']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'name' => $this->name, 
            'category' => $this->category, 
            'vendor' => $this->vendor, 
            'barcodes' => $this->barcodes, 
            'description' => $this->description, 
            'vendorCode' => $this->vendorCode, 
            'basicPrice' => $this->basicPrice, 
        ];
    }
}


