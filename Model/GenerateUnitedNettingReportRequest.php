<?php
/**
 * GenerateUnitedNettingReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GenerateUnitedNettingReportRequest model.
 *
 * Данные, необходимые для генерации отчета: идентификатор магазина, период, за который нужен отчет, а также фильтры.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GenerateUnitedNettingReportRequest  implements \JsonSerializable
{
        /**
     * Идентификатор бизнеса.
     *
     * @var int
     * @SerializedName("businessId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $businessId;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Начало периода, включительно.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeFrom")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $dateTimeFrom;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Конец периода, включительно. Максимальный период — 1 год.
     *
     * @var \DateTime|null
     * @SerializedName("dateTimeTo")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $dateTimeTo;

    /**
     * Начало периода, включительно.
     *
     * @var \DateTime|null
     * @SerializedName("dateFrom")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $dateFrom;

    /**
     * Конец периода, включительно. Максимальный период — 1 год.
     *
     * @var \DateTime|null
     * @SerializedName("dateTo")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $dateTo;

    /**
     * Номер платежного поручения.
     *
     * @var int|null
     * @SerializedName("bankOrderId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $bankOrderId;

    /**
     * Дата платежного поручения.
     *
     * @var \DateTime|null
     * @SerializedName("bankOrderDateTime")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $bankOrderDateTime;

    /**
     * Список моделей, которые нужны в отчете.
     *
     * @var PlacementType[]|null
     * @SerializedName("placementPrograms")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\PlacementType")
     * })
     * @Accessor(getter="getSerializedPlacementPrograms")
     * @Type("array<string>")
     */
    public ?array $placementPrograms;

    /**
     * Список ИНН, которые нужны в отчете.
     *
     * @var string[]|null
     * @SerializedName("inns")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $inns;

    /**
     * Список магазинов, которые нужны в отчете.
     *
     * @var int[]|null
     * @SerializedName("campaignIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     */
    public ?array $campaignIds;

    /**
     * Constructor
     *
     * @param int $businessId
     * @param \DateTime|null $dateTimeFrom
     * @param \DateTime|null $dateTimeTo
     * @param \DateTime|null $dateFrom
     * @param \DateTime|null $dateTo
     * @param int|null $bankOrderId
     * @param \DateTime|null $bankOrderDateTime
     * @param PlacementType[]|null $placementPrograms
     * @param string[]|null $inns
     * @param int[]|null $campaignIds
     */
    public function __construct(int $businessId, ?\DateTime $dateTimeFrom, ?\DateTime $dateTimeTo, ?\DateTime $dateFrom, ?\DateTime $dateTo, ?int $bankOrderId, ?\DateTime $bankOrderDateTime, ?array $placementPrograms, ?array $inns, ?array $campaignIds)
    {
        $this->businessId = $businessId;
        $this->dateTimeFrom = $dateTimeFrom;
        $this->dateTimeTo = $dateTimeTo;
        $this->dateFrom = $dateFrom;
        $this->dateTo = $dateTo;
        $this->bankOrderId = $bankOrderId;
        $this->bankOrderDateTime = $bankOrderDateTime;
        $this->placementPrograms = $placementPrograms;
        $this->inns = $inns;
        $this->campaignIds = $campaignIds;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['businessId'] ?? null, 
            isset($data['dateTimeFrom']) ? new \DateTime($data['dateTimeFrom']) : null, 
            isset($data['dateTimeTo']) ? new \DateTime($data['dateTimeTo']) : null, 
            $data['dateFrom'] ?? null, 
            $data['dateTo'] ?? null, 
            $data['bankOrderId'] ?? null, 
            isset($data['bankOrderDateTime']) ? new \DateTime($data['bankOrderDateTime']) : null, 
            isset($data['placementPrograms']) ? array_map(fn($item) => PlacementType::tryFrom($item), $data['placementPrograms']) : null, 
            $data['inns'] ?? null, 
            $data['campaignIds'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'businessId' => $this->businessId, 
            'dateTimeFrom' => $this->dateTimeFrom?->format('c'), 
            'dateTimeTo' => $this->dateTimeTo?->format('c'), 
            'dateFrom' => $this->dateFrom, 
            'dateTo' => $this->dateTo, 
            'bankOrderId' => $this->bankOrderId, 
            'bankOrderDateTime' => $this->bankOrderDateTime?->format('c'), 
            'placementPrograms' => $this->placementPrograms, 
            'inns' => $this->inns, 
            'campaignIds' => $this->campaignIds, 
        ];
    }
}


