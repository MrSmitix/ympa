<?php
/**
 * OutletLicenseDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OutletLicenseDTO model.
 *
 * Информация о лицензии.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OutletLicenseDTO  implements \JsonSerializable
{
        /**
     * Идентификатор лицензии.  Параметр указывается, только если нужно изменить информацию о существующей лицензии. Ее идентификатор можно узнать с помощью запроса [GET campaigns/{campaignId}/outlets/licenses](../../reference/outlets/getOutletLicenses.md). При передаче информации о новой лицензии указывать идентификатор не нужно.  Идентификатор лицензии присваивается Маркетом. Не путайте его с номером, указанным на лицензии: он передается в параметре &#x60;number&#x60;.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Идентификатор точки продаж, для которой действительна лицензия.
     *
     * @var int|null
     * @SerializedName("outletId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $outletId;

    /**
     * @var LicenseType|null
     * @SerializedName("licenseType")
        * @Accessor(getter="getSerializedLicenseType")
        * @Type("string")
     */
    public ?LicenseType $licenseType;

    /**
     * Номер лицензии.
     *
     * @var string|null
     * @SerializedName("number")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $number;

    /**
     * Дата выдачи лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если лицензия для точки продаж в Москве выдана 13 ноября 2017 года, то параметр должен иметь значение &#x60;2017-11-13T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть позже даты окончания срока действия, указанной в параметре &#x60;dateOfExpiry&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("dateOfIssue")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $dateOfIssue;

    /**
     * Дата окончания действия лицензии.  Формат даты: ISO 8601 со смещением относительно UTC. Нужно передать дату, указанную на лицензии, время &#x60;00:00:00&#x60; и часовой пояс, соответствующий региону точки продаж. Например, если действие лицензии для точки продаж в Москве заканчивается 20 ноября 2022 года, то параметр должен иметь значение &#x60;2022-11-20T00:00:00+03:00&#x60;.  Обязательный параметр.  Не может быть раньше даты выдачи, указанной в параметре &#x60;dateOfIssue&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("dateOfExpiry")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $dateOfExpiry;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param int|null $outletId
     * @param LicenseType|null $licenseType
     * @param string|null $number
     * @param \DateTime|null $dateOfIssue
     * @param \DateTime|null $dateOfExpiry
     */
    public function __construct(?int $id, ?int $outletId, ?LicenseType $licenseType, ?string $number, ?\DateTime $dateOfIssue, ?\DateTime $dateOfExpiry)
    {
        $this->id = $id;
        $this->outletId = $outletId;
        $this->licenseType = $licenseType;
        $this->number = $number;
        $this->dateOfIssue = $dateOfIssue;
        $this->dateOfExpiry = $dateOfExpiry;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['outletId'] ?? null, 
            isset($data['licenseType']) ? LicenseType::tryFrom($data['licenseType']) : null, 
            $data['number'] ?? null, 
            isset($data['dateOfIssue']) ? new \DateTime($data['dateOfIssue']) : null, 
            isset($data['dateOfExpiry']) ? new \DateTime($data['dateOfExpiry']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'outletId' => $this->outletId, 
            'licenseType' => $this->licenseType, 
            'number' => $this->number, 
            'dateOfIssue' => $this->dateOfIssue?->format('c'), 
            'dateOfExpiry' => $this->dateOfExpiry?->format('c'), 
        ];
    }
}


