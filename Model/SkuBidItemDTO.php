<?php
/**
 * SkuBidItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the SkuBidItemDTO model.
 *
 * Список товаров и ставок на них.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class SkuBidItemDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("sku")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $sku;

    /**
     * Значение ставки.
     *
     * @var int
     * @SerializedName("bid")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(9999)
     */
    public int $bid;

    /**
     * Constructor
     *
     * @param string $sku
     * @param int $bid
     */
    public function __construct(string $sku, int $bid)
    {
        $this->sku = $sku;
        $this->bid = $bid;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['sku'] ?? null, 
            $data['bid'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'sku' => $this->sku, 
            'bid' => $this->bid, 
        ];
    }
}


