<?php
/**
 * UpdateOrderStatusDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the UpdateOrderStatusDTO model.
 *
 * Список заказов.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class UpdateOrderStatusDTO  implements \JsonSerializable
{
        /**
     * Идентификатор заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * @var OrderStatusType|null
     * @SerializedName("status")
        * @Accessor(getter="getSerializedStatus")
        * @Type("string")
     */
    public ?OrderStatusType $status;

    /**
     * @var OrderSubstatusType|null
     * @SerializedName("substatus")
        * @Accessor(getter="getSerializedSubstatus")
        * @Type("string")
     */
    public ?OrderSubstatusType $substatus;

    /**
     * @var OrderUpdateStatusType|null
     * @SerializedName("updateStatus")
        * @Accessor(getter="getSerializedUpdateStatus")
        * @Type("string")
     */
    public ?OrderUpdateStatusType $updateStatus;

    /**
     * Ошибка при изменении статуса заказа. Содержит описание ошибки и идентификатор заказа.  Возвращается, если параметр &#x60;updateStatus&#x60; принимает значение &#x60;ERROR&#x60;.
     *
     * @var string|null
     * @SerializedName("errorDetails")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $errorDetails;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param OrderStatusType|null $status
     * @param OrderSubstatusType|null $substatus
     * @param OrderUpdateStatusType|null $updateStatus
     * @param string|null $errorDetails
     */
    public function __construct(?int $id, ?OrderStatusType $status, ?OrderSubstatusType $substatus, ?OrderUpdateStatusType $updateStatus, ?string $errorDetails)
    {
        $this->id = $id;
        $this->status = $status;
        $this->substatus = $substatus;
        $this->updateStatus = $updateStatus;
        $this->errorDetails = $errorDetails;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            isset($data['status']) ? OrderStatusType::tryFrom($data['status']) : null, 
            isset($data['substatus']) ? OrderSubstatusType::tryFrom($data['substatus']) : null, 
            isset($data['updateStatus']) ? OrderUpdateStatusType::tryFrom($data['updateStatus']) : null, 
            $data['errorDetails'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'status' => $this->status, 
            'substatus' => $this->substatus, 
            'updateStatus' => $this->updateStatus, 
            'errorDetails' => $this->errorDetails, 
        ];
    }
}


