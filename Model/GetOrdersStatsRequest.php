<?php
/**
 * GetOrdersStatsRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GetOrdersStatsRequest model.
 *
 * Запрос информации по заказам.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GetOrdersStatsRequest 
{
        /**
     * Начальная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("dateFrom")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateFrom = null;

    /**
     * Конечная дата, когда заказ был сформирован.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;updateFrom&#x60; и &#x60;updateTo&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("dateTo")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $dateTo = null;

    /**
     * Начальная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("updateFrom")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $updateFrom = null;

    /**
     * Конечная дата периода, за который были изменения статуса заказа.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.  Нельзя использовать вместе с параметрами &#x60;dateFrom&#x60; и &#x60;dateTo&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("updateTo")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $updateTo = null;

    /**
     * Список идентификаторов заказов.
     *
     * @var int[]|null
     * @SerializedName("orders")
     * @Type("array<int>")
    */
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    protected ?array $orders = null;

    /**
     * Список статусов заказов.
     *
     * @var OrderStatsStatusType[]|null
     * @SerializedName("statuses")
     * @Accessor(getter="getSerializedStatuses", setter="setDeserializedStatuses")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrderStatsStatusType"),
    ])]
    protected ?array $statuses = null;

    /**
     * Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.
     *
     * @var bool|null
     * @SerializedName("hasCis")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $hasCis = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->dateFrom = array_key_exists('dateFrom', $data) ? $data['dateFrom'] : $this->dateFrom;
            $this->dateTo = array_key_exists('dateTo', $data) ? $data['dateTo'] : $this->dateTo;
            $this->updateFrom = array_key_exists('updateFrom', $data) ? $data['updateFrom'] : $this->updateFrom;
            $this->updateTo = array_key_exists('updateTo', $data) ? $data['updateTo'] : $this->updateTo;
            $this->orders = array_key_exists('orders', $data) ? $data['orders'] : $this->orders;
            $this->statuses = array_key_exists('statuses', $data) ? $data['statuses'] : $this->statuses;
            $this->hasCis = array_key_exists('hasCis', $data) ? $data['hasCis'] : $this->hasCis;
        }
    }

    /**
     * Gets dateFrom.
     *
     * @return \DateTime|null
     */
    public function getDateFrom(): ?\DateTime
    {
        return $this->dateFrom;
    }

    /**
    * Sets dateFrom.
    *
    * @param \DateTime|null $dateFrom  Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.
    *
    * @return $this
    */
    public function setDateFrom(?\DateTime $dateFrom = null): self
    {
        $this->dateFrom = $dateFrom;

        return $this;
    }




    /**
     * Gets dateTo.
     *
     * @return \DateTime|null
     */
    public function getDateTo(): ?\DateTime
    {
        return $this->dateTo;
    }

    /**
    * Sets dateTo.
    *
    * @param \DateTime|null $dateTo  Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`.
    *
    * @return $this
    */
    public function setDateTo(?\DateTime $dateTo = null): self
    {
        $this->dateTo = $dateTo;

        return $this;
    }




    /**
     * Gets updateFrom.
     *
     * @return \DateTime|null
     */
    public function getUpdateFrom(): ?\DateTime
    {
        return $this->updateFrom;
    }

    /**
    * Sets updateFrom.
    *
    * @param \DateTime|null $updateFrom  Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.
    *
    * @return $this
    */
    public function setUpdateFrom(?\DateTime $updateFrom = null): self
    {
        $this->updateFrom = $updateFrom;

        return $this;
    }




    /**
     * Gets updateTo.
     *
     * @return \DateTime|null
     */
    public function getUpdateTo(): ?\DateTime
    {
        return $this->updateTo;
    }

    /**
    * Sets updateTo.
    *
    * @param \DateTime|null $updateTo  Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`.
    *
    * @return $this
    */
    public function setUpdateTo(?\DateTime $updateTo = null): self
    {
        $this->updateTo = $updateTo;

        return $this;
    }




    /**
     * Gets orders.
     *
     * @return int[]|null
     */
    public function getOrders(): ?array
    {
        return $this->orders;
    }

    /**
    * Sets orders.
    *
    * @param int[]|null $orders  Список идентификаторов заказов.
    *
    * @return $this
    */
    public function setOrders(?array $orders = null): self
    {
        $this->orders = $orders;

        return $this;
    }




    /**
     * Gets statuses.
     *
     * @return OrderStatsStatusType[]|null
     */
    public function getStatuses(): ?array
    {
        return $this->statuses;
    }

    /**
    * Sets statuses.
    *
    * @param OrderStatsStatusType[]|null $statuses  Список статусов заказов.
    *
    * @return $this
    */
    public function setStatuses(?array $statuses = null): self
    {
        $this->statuses = $statuses;

        return $this;
    }


    /**
    * Gets statuses for serialization.
    *
    * @return array
    */
    public function getSerializedStatuses(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->statuses ?? []
        );
    }

    /**
    * Sets statuses.
    *
    * @param ?array $statuses
    *
    * @return $this
    */
    public function setDeserializedStatuses(?array $statuses = []): self
    {
        $this->statuses = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = OrderStatsStatusType::tryFrom($value);
                }

                return $value;
            },
            $statuses ?? []
        );

        return $this;
    }


    /**
     * Gets hasCis.
     *
     * @return bool|null
     */
    public function isHasCis(): ?bool
    {
        return $this->hasCis;
    }

    /**
    * Sets hasCis.
    *
    * @param bool|null $hasCis  Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям.
    *
    * @return $this
    */
    public function setHasCis(?bool $hasCis = null): self
    {
        $this->hasCis = $hasCis;

        return $this;
    }



}


