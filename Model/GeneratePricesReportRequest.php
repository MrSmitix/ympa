<?php
/**
 * GeneratePricesReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GeneratePricesReportRequest model.
 *
 * Данные, необходимые для генерации отчета.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GeneratePricesReportRequest  implements \JsonSerializable
{
        /**
     * Идентификатор бизнеса.  В большинстве случаев обязателен. Не указывается, если задан &#x60;campaignId&#x60;.
     *
     * @var int|null
     * @SerializedName("businessId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $businessId;

    /**
     * Идентификатор кампании.  Как правило, не используется. Передавайте только если в кабинете есть магазины с уникальными ценами и вы хотите получить отчет для них. В этом случае передавать &#x60;businessId&#x60; не нужно.
     *
     * @var int|null
     * @SerializedName("campaignId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $campaignId;

    /**
     * Фильтр по категориям на Маркете.
     *
     * @var int[]|null
     * @SerializedName("categoryIds")
     * @Assert\All({
     *   @Assert\Type("int")
     * })
     * @Type("array<int>")
     */
    public ?array $categoryIds;

    /**
     * Фильтр по времени появления предложения — начало периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("creationDateFrom")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $creationDateFrom;

    /**
     * Фильтр по времени появления предложения — окончание периода.  Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("creationDateTo")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $creationDateTo;

    /**
     * Constructor
     *
     * @param int|null $businessId
     * @param int|null $campaignId
     * @param int[]|null $categoryIds
     * @param \DateTime|null $creationDateFrom
     * @param \DateTime|null $creationDateTo
     */
    public function __construct(?int $businessId, ?int $campaignId, ?array $categoryIds, ?\DateTime $creationDateFrom, ?\DateTime $creationDateTo)
    {
        $this->businessId = $businessId;
        $this->campaignId = $campaignId;
        $this->categoryIds = $categoryIds;
        $this->creationDateFrom = $creationDateFrom;
        $this->creationDateTo = $creationDateTo;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['businessId'] ?? null, 
            $data['campaignId'] ?? null, 
            $data['categoryIds'] ?? null, 
            $data['creationDateFrom'] ?? null, 
            $data['creationDateTo'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'businessId' => $this->businessId, 
            'campaignId' => $this->campaignId, 
            'categoryIds' => $this->categoryIds, 
            'creationDateFrom' => $this->creationDateFrom, 
            'creationDateTo' => $this->creationDateTo, 
        ];
    }
}


