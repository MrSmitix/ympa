<?php
/**
 * CategoryParameterUnitDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CategoryParameterUnitDTO model.
 *
 * Единицы измерения характеристики товара.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CategoryParameterUnitDTO 
{
        /**
     * Единица измерения по умолчанию.
     *
     * @var int|null
     * @SerializedName("defaultUnitId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $defaultUnitId = null;

    /**
     * Допустимые единицы измерения.
     *
     * @var UnitDTO[]|null
     * @SerializedName("units")
     * @Type("array<OpenAPI\Server\Model\UnitDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\UnitDTO"),
    ])]
    protected ?array $units = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->defaultUnitId = array_key_exists('defaultUnitId', $data) ? $data['defaultUnitId'] : $this->defaultUnitId;
            $this->units = array_key_exists('units', $data) ? $data['units'] : $this->units;
        }
    }

    /**
     * Gets defaultUnitId.
     *
     * @return int|null
     */
    public function getDefaultUnitId(): ?int
    {
        return $this->defaultUnitId;
    }

    /**
    * Sets defaultUnitId.
    *
    * @param int|null $defaultUnitId  Единица измерения по умолчанию.
    *
    * @return $this
    */
    public function setDefaultUnitId(?int $defaultUnitId): self
    {
        $this->defaultUnitId = $defaultUnitId;

        return $this;
    }




    /**
     * Gets units.
     *
     * @return UnitDTO[]|null
     */
    public function getUnits(): ?array
    {
        return $this->units;
    }

    /**
    * Sets units.
    *
    * @param UnitDTO[]|null $units  Допустимые единицы измерения.
    *
    * @return $this
    */
    public function setUnits(?array $units): self
    {
        $this->units = $units;

        return $this;
    }



}


