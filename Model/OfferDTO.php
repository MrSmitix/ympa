<?php
/**
 * OfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OfferDTO model.
 *
 * Предложение.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OfferDTO  implements \JsonSerializable
{
        /**
     * Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.
     *
     * @var float|null
     * @SerializedName("price")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $price;

    /**
     * Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var int|null
     * @SerializedName("feedId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $feedId;

    /**
     * Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var string|null
     * @SerializedName("id")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $id;

    /**
     * Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var string|null
     * @SerializedName("shopCategoryId")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $shopCategoryId;

    /**
     * Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var int|null
     * @SerializedName("marketCategoryId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $marketCategoryId;

    /**
     * Цена предложения без скидки.
     *
     * @var float|null
     * @SerializedName("preDiscountPrice")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $preDiscountPrice;

    /**
     * Скидка на предложение в процентах.
     *
     * @var int|null
     * @SerializedName("discount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $discount;

    /**
     * Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API.
     *
     * @var bool|null
     * @SerializedName("cutPrice")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $cutPrice;

    /**
     * URL-адрес предложения на сайте магазина.
     *
     * @var string|null
     * @SerializedName("url")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $url;

    /**
     * Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %}
     *
     * @var int
     * @SerializedName("modelId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $modelId;

    /**
     * Наименование предложения.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $name;

    /**
     * @var CurrencyType|null
     * @SerializedName("currency")
        * @Accessor(getter="getSerializedCurrency")
        * @Type("string")
     */
    public ?CurrencyType $currency;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.
     *
     * @var float|null
     * @SerializedName("bid")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $bid;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.
     *
     * @var float|null
     * @SerializedName("cbid")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $cbid;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.
     *
     * @var float|null
     * @SerializedName("fee")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $fee;

    /**
     * Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.
     *
     * @var bool|null
     * @SerializedName("blocked")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $blocked;

    /**
     * Constructor
     *
     * @param float|null $price
     * @param int|null $feedId
     * @param string|null $id
     * @param string|null $shopCategoryId
     * @param int|null $marketCategoryId
     * @param float|null $preDiscountPrice
     * @param int|null $discount
     * @param bool|null $cutPrice
     * @param string|null $url
     * @param int $modelId
     * @param string|null $name
     * @param CurrencyType|null $currency
     * @param float|null $bid
     * @param float|null $cbid
     * @param float|null $fee
     * @param bool|null $blocked
     */
    public function __construct(?float $price, ?int $feedId, ?string $id, ?string $shopCategoryId, ?int $marketCategoryId, ?float $preDiscountPrice, ?int $discount, ?bool $cutPrice, ?string $url, int $modelId, ?string $name, ?CurrencyType $currency, ?float $bid, ?float $cbid, ?float $fee, ?bool $blocked)
    {
        $this->price = $price;
        $this->feedId = $feedId;
        $this->id = $id;
        $this->shopCategoryId = $shopCategoryId;
        $this->marketCategoryId = $marketCategoryId;
        $this->preDiscountPrice = $preDiscountPrice;
        $this->discount = $discount;
        $this->cutPrice = $cutPrice;
        $this->url = $url;
        $this->modelId = $modelId;
        $this->name = $name;
        $this->currency = $currency;
        $this->bid = $bid;
        $this->cbid = $cbid;
        $this->fee = $fee;
        $this->blocked = $blocked;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['price'] ?? null, 
            $data['feedId'] ?? null, 
            $data['id'] ?? null, 
            $data['shopCategoryId'] ?? null, 
            $data['marketCategoryId'] ?? null, 
            $data['preDiscountPrice'] ?? null, 
            $data['discount'] ?? null, 
            $data['cutPrice'] ?? null, 
            $data['url'] ?? null, 
            $data['modelId'] ?? null, 
            $data['name'] ?? null, 
            isset($data['currency']) ? CurrencyType::tryFrom($data['currency']) : null, 
            $data['bid'] ?? null, 
            $data['cbid'] ?? null, 
            $data['fee'] ?? null, 
            $data['blocked'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'price' => $this->price, 
            'feedId' => $this->feedId, 
            'id' => $this->id, 
            'shopCategoryId' => $this->shopCategoryId, 
            'marketCategoryId' => $this->marketCategoryId, 
            'preDiscountPrice' => $this->preDiscountPrice, 
            'discount' => $this->discount, 
            'cutPrice' => $this->cutPrice, 
            'url' => $this->url, 
            'modelId' => $this->modelId, 
            'name' => $this->name, 
            'currency' => $this->currency, 
            'bid' => $this->bid, 
            'cbid' => $this->cbid, 
            'fee' => $this->fee, 
            'blocked' => $this->blocked, 
        ];
    }
}


