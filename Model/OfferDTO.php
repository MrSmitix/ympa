<?php
/**
 * OfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OfferDTO model.
 *
 * Предложение.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OfferDTO 
{
        /**
     * Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.
     *
     * @var float|null
     * @SerializedName("price")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $price = null;

    /**
     * Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var int|null
     * @SerializedName("feedId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $feedId = null;

    /**
     * Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр &#x60;id&#x60; указывается только для первого из них, для остальных параметры &#x60;id&#x60; и &#x60;feedId&#x60; не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $id = null;

    /**
     * Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var string|null
     * @SerializedName("shopCategoryId")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $shopCategoryId = null;

    /**
     * Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.
     *
     * @var int|null
     * @SerializedName("marketCategoryId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $marketCategoryId = null;

    /**
     * Цена предложения без скидки.
     *
     * @var float|null
     * @SerializedName("preDiscountPrice")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $preDiscountPrice = null;

    /**
     * Скидка на предложение в процентах.
     *
     * @var int|null
     * @SerializedName("discount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $discount = null;

    /**
     * Является ли предложение уцененным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Параметр доступен начиная с версии 2.58 партнерского API.
     *
     * @var bool|null
     * @SerializedName("cutPrice")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $cutPrice = null;

    /**
     * URL-адрес предложения на сайте магазина.
     *
     * @var string|null
     * @SerializedName("url")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $url = null;

    /**
     * Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр &#x60;modelid&#x60; содержит значение &#x60;0&#x60;.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра &#x60;product&#x60;. Например: &#x60;https://market.yandex.ru/product/13584121&#x60;.  {% endnote %}
     *
     * @var int|null
     * @SerializedName("modelId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $modelId = null;

    /**
     * Наименование предложения.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var CurrencyType|null
     * @SerializedName("currency")
    * @Accessor(getter="getSerializedCurrency", setter="setDeserializedCurrency")
    * @Type("string")
    */
    protected ?CurrencyType $currency = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.
     *
     * @var float|null
     * @SerializedName("bid")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $bid = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.
     *
     * @var float|null
     * @SerializedName("cbid")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $cbid = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.
     *
     * @var float|null
     * @SerializedName("fee")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $fee = null;

    /**
     * Признак блокировки предложения. Возможные значения: * &#x60;false&#x60; — предложение активно, параметр не выводится. * &#x60;true&#x60; — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.
     *
     * @var bool|null
     * @SerializedName("blocked")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $blocked = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->price = array_key_exists('price', $data) ? $data['price'] : $this->price;
            $this->feedId = array_key_exists('feedId', $data) ? $data['feedId'] : $this->feedId;
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->shopCategoryId = array_key_exists('shopCategoryId', $data) ? $data['shopCategoryId'] : $this->shopCategoryId;
            $this->marketCategoryId = array_key_exists('marketCategoryId', $data) ? $data['marketCategoryId'] : $this->marketCategoryId;
            $this->preDiscountPrice = array_key_exists('preDiscountPrice', $data) ? $data['preDiscountPrice'] : $this->preDiscountPrice;
            $this->discount = array_key_exists('discount', $data) ? $data['discount'] : $this->discount;
            $this->cutPrice = array_key_exists('cutPrice', $data) ? $data['cutPrice'] : $this->cutPrice;
            $this->url = array_key_exists('url', $data) ? $data['url'] : $this->url;
            $this->modelId = array_key_exists('modelId', $data) ? $data['modelId'] : $this->modelId;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->currency = array_key_exists('currency', $data) ? $data['currency'] : $this->currency;
            $this->bid = array_key_exists('bid', $data) ? $data['bid'] : $this->bid;
            $this->cbid = array_key_exists('cbid', $data) ? $data['cbid'] : $this->cbid;
            $this->fee = array_key_exists('fee', $data) ? $data['fee'] : $this->fee;
            $this->blocked = array_key_exists('blocked', $data) ? $data['blocked'] : $this->blocked;
        }
    }

    /**
     * Gets price.
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->price;
    }

    /**
    * Sets price.
    *
    * @param float|null $price  Цена предложения.  До версии 2.0 партнерского API у параметра был тип String.
    *
    * @return $this
    */
    public function setPrice(?float $price = null): self
    {
        $this->price = $price;

        return $this;
    }




    /**
     * Gets feedId.
     *
     * @return int|null
     */
    public function getFeedId(): ?int
    {
        return $this->feedId;
    }

    /**
    * Sets feedId.
    *
    * @param int|null $feedId  Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API.
    *
    * @return $this
    */
    public function setFeedId(?int $feedId = null): self
    {
        $this->feedId = $feedId;

        return $this;
    }




    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API.
    *
    * @return $this
    */
    public function setId(?string $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets shopCategoryId.
     *
     * @return string|null
     */
    public function getShopCategoryId(): ?string
    {
        return $this->shopCategoryId;
    }

    /**
    * Sets shopCategoryId.
    *
    * @param string|null $shopCategoryId  Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API.
    *
    * @return $this
    */
    public function setShopCategoryId(?string $shopCategoryId = null): self
    {
        $this->shopCategoryId = $shopCategoryId;

        return $this;
    }




    /**
     * Gets marketCategoryId.
     *
     * @return int|null
     */
    public function getMarketCategoryId(): ?int
    {
        return $this->marketCategoryId;
    }

    /**
    * Sets marketCategoryId.
    *
    * @param int|null $marketCategoryId  Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API.
    *
    * @return $this
    */
    public function setMarketCategoryId(?int $marketCategoryId = null): self
    {
        $this->marketCategoryId = $marketCategoryId;

        return $this;
    }




    /**
     * Gets preDiscountPrice.
     *
     * @return float|null
     */
    public function getPreDiscountPrice(): ?float
    {
        return $this->preDiscountPrice;
    }

    /**
    * Sets preDiscountPrice.
    *
    * @param float|null $preDiscountPrice  Цена предложения без скидки.
    *
    * @return $this
    */
    public function setPreDiscountPrice(?float $preDiscountPrice = null): self
    {
        $this->preDiscountPrice = $preDiscountPrice;

        return $this;
    }




    /**
     * Gets discount.
     *
     * @return int|null
     */
    public function getDiscount(): ?int
    {
        return $this->discount;
    }

    /**
    * Sets discount.
    *
    * @param int|null $discount  Скидка на предложение в процентах.
    *
    * @return $this
    */
    public function setDiscount(?int $discount = null): self
    {
        $this->discount = $discount;

        return $this;
    }




    /**
     * Gets cutPrice.
     *
     * @return bool|null
     */
    public function isCutPrice(): ?bool
    {
        return $this->cutPrice;
    }

    /**
    * Sets cutPrice.
    *
    * @param bool|null $cutPrice  Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API.
    *
    * @return $this
    */
    public function setCutPrice(?bool $cutPrice = null): self
    {
        $this->cutPrice = $cutPrice;

        return $this;
    }




    /**
     * Gets url.
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }

    /**
    * Sets url.
    *
    * @param string|null $url  URL-адрес предложения на сайте магазина.
    *
    * @return $this
    */
    public function setUrl(?string $url = null): self
    {
        $this->url = $url;

        return $this;
    }




    /**
     * Gets modelId.
     *
     * @return int|null
     */
    public function getModelId(): ?int
    {
        return $this->modelId;
    }

    /**
    * Sets modelId.
    *
    * @param int|null $modelId  Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %}
    *
    * @return $this
    */
    public function setModelId(?int $modelId): self
    {
        $this->modelId = $modelId;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Наименование предложения.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets currency.
     *
     * @return CurrencyType|null
     */
    public function getCurrency(): ?CurrencyType
    {
        return $this->currency;
    }

    /**
    * Sets currency.
    *
    * @param CurrencyType|null $currency
    *
    * @return $this
    */
    public function setCurrency(?CurrencyType $currency = null): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
    * Gets currency for serialization.
    *
    * @return string|null
    */
    public function getSerializedCurrency(): string|null
    {
        return $this->currency?->value ? (string) $this->currency->value : null;
    }

    /**
    * Sets currency.
    *
    * @param string|CurrencyType|null $currency
    *
    * @return $this
    */
    public function setDeserializedCurrency(string|CurrencyType|null $currency = null): self
    {
        if (is_string($currency)) {
            $currency = CurrencyType::tryFrom($currency);
        }

        $this->currency = $currency;

        return $this;
    }



    /**
     * Gets bid.
     *
     * @return float|null
     */
    public function getBid(): ?float
    {
        return $this->bid;
    }

    /**
    * Sets bid.
    *
    * @param float|null $bid  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.
    *
    * @return $this
    */
    public function setBid(?float $bid = null): self
    {
        $this->bid = $bid;

        return $this;
    }




    /**
     * Gets cbid.
     *
     * @return float|null
     */
    public function getCbid(): ?float
    {
        return $this->cbid;
    }

    /**
    * Sets cbid.
    *
    * @param float|null $cbid  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик.
    *
    * @return $this
    */
    public function setCbid(?float $cbid = null): self
    {
        $this->cbid = $cbid;

        return $this;
    }




    /**
     * Gets fee.
     *
     * @return float|null
     */
    public function getFee(): ?float
    {
        return $this->fee;
    }

    /**
    * Sets fee.
    *
    * @param float|null $fee  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA.
    *
    * @return $this
    */
    public function setFee(?float $fee = null): self
    {
        $this->fee = $fee;

        return $this;
    }




    /**
     * Gets blocked.
     *
     * @return bool|null
     */
    public function isBlocked(): ?bool
    {
        return $this->blocked;
    }

    /**
    * Sets blocked.
    *
    * @param bool|null $blocked  Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина.
    *
    * @return $this
    */
    public function setBlocked(?bool $blocked = null): self
    {
        $this->blocked = $blocked;

        return $this;
    }



}


