<?php
/**
 * QualityRatingDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the QualityRatingDTO model.
 *
 * Информация об индексе качества.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class QualityRatingDTO  implements \JsonSerializable
{
        /**
     * Значение индекса качества.
     *
     * @var int
     * @SerializedName("rating")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     * @Assert\LessThanOrEqual(100)
     */
    public int $rating;

    /**
     * Дата вычисления.  Формат даты: &#x60;ГГГГ‑ММ‑ДД&#x60;.
     *
     * @var \DateTime
     * @SerializedName("calculationDate")
     * @Assert\NotNull()
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public \DateTime $calculationDate;

    /**
     * Составляющие индекса качества.
     *
     * @var QualityRatingComponentDTO[]
     * @SerializedName("components")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\QualityRatingComponentDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\QualityRatingComponentDTO>")
     */
    public array $components;

    /**
     * Constructor
     *
     * @param int $rating
     * @param \DateTime $calculationDate
     * @param QualityRatingComponentDTO[] $components
     */
    public function __construct(int $rating, \DateTime $calculationDate, array $components)
    {
        $this->rating = $rating;
        $this->calculationDate = $calculationDate;
        $this->components = $components;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['rating'] ?? null, 
            $data['calculationDate'] ?? null, 
            isset($data['components']) ? array_map(fn($item) => QualityRatingComponentDTO::fromArray($item), $data['components']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'rating' => $this->rating, 
            'calculationDate' => $this->calculationDate, 
            'components' => $this->components, 
        ];
    }
}


