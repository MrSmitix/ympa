<?php
/**
 * FeedbackCommentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the FeedbackCommentDTO model.
 *
 * Комментарий к отзыву на магазин.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class FeedbackCommentDTO  implements \JsonSerializable
{
        /**
     * Идентификатор ответа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Идентификатор родительского ответа.
     *
     * @var int|null
     * @SerializedName("parentId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $parentId;

    /**
     * Текст ответа.
     *
     * @var string|null
     * @SerializedName("body")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $body;

    /**
     * Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $createdAt;

    /**
     * Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("updatedAt")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $updatedAt;

    /**
     * @var FeedbackCommentAuthorDTO|null
     * @SerializedName("author")
     * @Assert\Type("\OpenAPIServer\Model\FeedbackCommentAuthorDTO")
     * @Type("\OpenAPIServer\Model\FeedbackCommentAuthorDTO")
     */
    public ?FeedbackCommentAuthorDTO $author;

    /**
     * Дочерние ответы.
     *
     * @var FeedbackCommentDTO[]|null
     * @SerializedName("children")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\FeedbackCommentDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\FeedbackCommentDTO>")
     */
    public ?array $children;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param int|null $parentId
     * @param string|null $body
     * @param \DateTime|null $createdAt
     * @param \DateTime|null $updatedAt
     * @param FeedbackCommentAuthorDTO|null $author
     * @param FeedbackCommentDTO[]|null $children
     */
    public function __construct(?int $id, ?int $parentId, ?string $body, ?\DateTime $createdAt, ?\DateTime $updatedAt, ?FeedbackCommentAuthorDTO $author, ?array $children)
    {
        $this->id = $id;
        $this->parentId = $parentId;
        $this->body = $body;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->author = $author;
        $this->children = $children;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['parentId'] ?? null, 
            $data['body'] ?? null, 
            isset($data['createdAt']) ? new \DateTime($data['createdAt']) : null, 
            isset($data['updatedAt']) ? new \DateTime($data['updatedAt']) : null, 
            isset($data['author']) ? FeedbackCommentAuthorDTO::fromArray($data['author']) : null, 
            isset($data['children']) ? array_map(fn($item) => FeedbackCommentDTO::fromArray($item), $data['children']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'parentId' => $this->parentId, 
            'body' => $this->body, 
            'createdAt' => $this->createdAt?->format('c'), 
            'updatedAt' => $this->updatedAt?->format('c'), 
            'author' => $this->author, 
            'children' => $this->children, 
        ];
    }
}


