<?php
/**
 * FeedbackCommentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FeedbackCommentDTO model.
 *
 * Комментарий к отзыву на магазин.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FeedbackCommentDTO 
{
        /**
     * Идентификатор ответа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Идентификатор родительского ответа.
     *
     * @var int|null
     * @SerializedName("parentId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $parentId = null;

    /**
     * Текст ответа.
     *
     * @var string|null
     * @SerializedName("body")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $body = null;

    /**
     * Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $createdAt = null;

    /**
     * Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("updatedAt")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $updatedAt = null;

    /**
     * @var FeedbackCommentAuthorDTO|null
     * @SerializedName("author")
     * @Type("OpenAPI\Server\Model\FeedbackCommentAuthorDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedbackCommentAuthorDTO")]
    protected ?FeedbackCommentAuthorDTO $author = null;

    /**
     * Дочерние ответы.
     *
     * @var FeedbackCommentDTO[]|null
     * @SerializedName("children")
     * @Type("array<OpenAPI\Server\Model\FeedbackCommentDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\FeedbackCommentDTO"),
    ])]
    protected ?array $children = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->parentId = array_key_exists('parentId', $data) ? $data['parentId'] : $this->parentId;
            $this->body = array_key_exists('body', $data) ? $data['body'] : $this->body;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->updatedAt = array_key_exists('updatedAt', $data) ? $data['updatedAt'] : $this->updatedAt;
            $this->author = array_key_exists('author', $data) ? $data['author'] : $this->author;
            $this->children = array_key_exists('children', $data) ? $data['children'] : $this->children;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор ответа.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets parentId.
     *
     * @return int|null
     */
    public function getParentId(): ?int
    {
        return $this->parentId;
    }

    /**
    * Sets parentId.
    *
    * @param int|null $parentId  Идентификатор родительского ответа.
    *
    * @return $this
    */
    public function setParentId(?int $parentId = null): self
    {
        $this->parentId = $parentId;

        return $this;
    }




    /**
     * Gets body.
     *
     * @return string|null
     */
    public function getBody(): ?string
    {
        return $this->body;
    }

    /**
    * Sets body.
    *
    * @param string|null $body  Текст ответа.
    *
    * @return $this
    */
    public function setBody(?string $body = null): self
    {
        $this->body = $body;

        return $this;
    }




    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
    * Sets createdAt.
    *
    * @param \DateTime|null $createdAt  Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
    *
    * @return $this
    */
    public function setCreatedAt(?\DateTime $createdAt = null): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }




    /**
     * Gets updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
    * Sets updatedAt.
    *
    * @param \DateTime|null $updatedAt  Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
    *
    * @return $this
    */
    public function setUpdatedAt(?\DateTime $updatedAt = null): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }




    /**
     * Gets author.
     *
     * @return FeedbackCommentAuthorDTO|null
     */
    public function getAuthor(): ?FeedbackCommentAuthorDTO
    {
        return $this->author;
    }

    /**
    * Sets author.
    *
    * @param FeedbackCommentAuthorDTO|null $author
    *
    * @return $this
    */
    public function setAuthor(?FeedbackCommentAuthorDTO $author = null): self
    {
        $this->author = $author;

        return $this;
    }




    /**
     * Gets children.
     *
     * @return FeedbackCommentDTO[]|null
     */
    public function getChildren(): ?array
    {
        return $this->children;
    }

    /**
    * Sets children.
    *
    * @param FeedbackCommentDTO[]|null $children  Дочерние ответы.
    *
    * @return $this
    */
    public function setChildren(?array $children = null): self
    {
        $this->children = $children;

        return $this;
    }



}


