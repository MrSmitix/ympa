<?php
/**
 * GetChatInfoDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetChatInfoDTO model.
 *
 * Информация о чатах.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetChatInfoDTO  implements \JsonSerializable
{
        /**
     * Идентификатор чата.
     *
     * @var int
     * @SerializedName("chatId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $chatId;

    /**
     * Идентификатор заказа.
     *
     * @var int
     * @SerializedName("orderId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $orderId;

    /**
     * @var ChatType
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public ChatType $type;

    /**
     * @var ChatStatusType
     * @SerializedName("status")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedStatus")
        * @Type("string")
     */
    public ChatStatusType $status;

    /**
     * Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime
     * @SerializedName("createdAt")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $createdAt;

    /**
     * Дата и время последнего сообщения в чате.
     *
     * @var \DateTime
     * @SerializedName("updatedAt")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $updatedAt;

    /**
     * Constructor
     *
     * @param int $chatId
     * @param int $orderId
     * @param ChatType $type
     * @param ChatStatusType $status
     * @param \DateTime $createdAt
     * @param \DateTime $updatedAt
     */
    public function __construct(int $chatId, int $orderId, ChatType $type, ChatStatusType $status, \DateTime $createdAt, \DateTime $updatedAt)
    {
        $this->chatId = $chatId;
        $this->orderId = $orderId;
        $this->type = $type;
        $this->status = $status;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['chatId'] ?? null, 
            $data['orderId'] ?? null, 
            isset($data['type']) ? ChatType::tryFrom($data['type']) : null, 
            isset($data['status']) ? ChatStatusType::tryFrom($data['status']) : null, 
            isset($data['createdAt']) ? new \DateTime($data['createdAt']) : null, 
            isset($data['updatedAt']) ? new \DateTime($data['updatedAt']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'chatId' => $this->chatId, 
            'orderId' => $this->orderId, 
            'type' => $this->type, 
            'status' => $this->status, 
            'createdAt' => $this->createdAt?->format('c'), 
            'updatedAt' => $this->updatedAt?->format('c'), 
        ];
    }
}


