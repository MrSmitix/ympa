<?php
/**
 * GetChatInfoDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the GetChatInfoDTO model.
 *
 * Информация о чатах.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class GetChatInfoDTO 
{
        /**
     * Идентификатор чата.
     *
     * @var int|null
     * @SerializedName("chatId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $chatId = null;

    /**
     * Идентификатор заказа.
     *
     * @var int|null
     * @SerializedName("orderId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $orderId = null;

    /**
     * @var ChatType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?ChatType $type = null;

    /**
     * @var ChatStatusType|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?ChatStatusType $status = null;

    /**
     * Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Type("DateTime")
    */
    #[Assert\NotNull]
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $createdAt = null;

    /**
     * Дата и время последнего сообщения в чате.
     *
     * @var \DateTime|null
     * @SerializedName("updatedAt")
     * @Type("DateTime")
    */
    #[Assert\NotNull]
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $updatedAt = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->chatId = array_key_exists('chatId', $data) ? $data['chatId'] : $this->chatId;
            $this->orderId = array_key_exists('orderId', $data) ? $data['orderId'] : $this->orderId;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->updatedAt = array_key_exists('updatedAt', $data) ? $data['updatedAt'] : $this->updatedAt;
        }
    }

    /**
     * Gets chatId.
     *
     * @return int|null
     */
    public function getChatId(): ?int
    {
        return $this->chatId;
    }

    /**
    * Sets chatId.
    *
    * @param int|null $chatId  Идентификатор чата.
    *
    * @return $this
    */
    public function setChatId(?int $chatId): self
    {
        $this->chatId = $chatId;

        return $this;
    }




    /**
     * Gets orderId.
     *
     * @return int|null
     */
    public function getOrderId(): ?int
    {
        return $this->orderId;
    }

    /**
    * Sets orderId.
    *
    * @param int|null $orderId  Идентификатор заказа.
    *
    * @return $this
    */
    public function setOrderId(?int $orderId): self
    {
        $this->orderId = $orderId;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return ChatType|null
     */
    public function getType(): ?ChatType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param ChatType|null $type
    *
    * @return $this
    */
    public function setType(?ChatType $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|ChatType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|ChatType|null $type): self
    {
        if (is_string($type)) {
            $type = ChatType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets status.
     *
     * @return ChatStatusType|null
     */
    public function getStatus(): ?ChatStatusType
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param ChatStatusType|null $status
    *
    * @return $this
    */
    public function setStatus(?ChatStatusType $status): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return $this->status?->value ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|ChatStatusType|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|ChatStatusType|null $status): self
    {
        if (is_string($status)) {
            $status = ChatStatusType::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
    * Sets createdAt.
    *
    * @param \DateTime|null $createdAt  Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
    *
    * @return $this
    */
    public function setCreatedAt(?\DateTime $createdAt): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }




    /**
     * Gets updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->updatedAt;
    }

    /**
    * Sets updatedAt.
    *
    * @param \DateTime|null $updatedAt  Дата и время последнего сообщения в чате.
    *
    * @return $this
    */
    public function setUpdatedAt(?\DateTime $updatedAt): self
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }



}


