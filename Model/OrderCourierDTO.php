<?php
/**
 * OrderCourierDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrderCourierDTO model.
 *
 * Информация о курьере.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrderCourierDTO 
{
        /**
     * Полное имя курьера.
     *
     * @var string|null
     * @SerializedName("fullName")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $fullName = null;

    /**
     * Номер телефона курьера.
     *
     * @var string|null
     * @SerializedName("phone")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $phone = null;

    /**
     * Добавочный номер телефона.
     *
     * @var string|null
     * @SerializedName("phoneExtension")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $phoneExtension = null;

    /**
     * Номер транспортного средства.
     *
     * @var string|null
     * @SerializedName("vehicleNumber")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $vehicleNumber = null;

    /**
     * Описание машины. Например, модель и цвет.
     *
     * @var string|null
     * @SerializedName("vehicleDescription")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $vehicleDescription = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->fullName = array_key_exists('fullName', $data) ? $data['fullName'] : $this->fullName;
            $this->phone = array_key_exists('phone', $data) ? $data['phone'] : $this->phone;
            $this->phoneExtension = array_key_exists('phoneExtension', $data) ? $data['phoneExtension'] : $this->phoneExtension;
            $this->vehicleNumber = array_key_exists('vehicleNumber', $data) ? $data['vehicleNumber'] : $this->vehicleNumber;
            $this->vehicleDescription = array_key_exists('vehicleDescription', $data) ? $data['vehicleDescription'] : $this->vehicleDescription;
        }
    }

    /**
     * Gets fullName.
     *
     * @return string|null
     */
    public function getFullName(): ?string
    {
        return $this->fullName;
    }

    /**
    * Sets fullName.
    *
    * @param string|null $fullName  Полное имя курьера.
    *
    * @return $this
    */
    public function setFullName(?string $fullName = null): self
    {
        $this->fullName = $fullName;

        return $this;
    }




    /**
     * Gets phone.
     *
     * @return string|null
     */
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    /**
    * Sets phone.
    *
    * @param string|null $phone  Номер телефона курьера.
    *
    * @return $this
    */
    public function setPhone(?string $phone = null): self
    {
        $this->phone = $phone;

        return $this;
    }




    /**
     * Gets phoneExtension.
     *
     * @return string|null
     */
    public function getPhoneExtension(): ?string
    {
        return $this->phoneExtension;
    }

    /**
    * Sets phoneExtension.
    *
    * @param string|null $phoneExtension  Добавочный номер телефона.
    *
    * @return $this
    */
    public function setPhoneExtension(?string $phoneExtension = null): self
    {
        $this->phoneExtension = $phoneExtension;

        return $this;
    }




    /**
     * Gets vehicleNumber.
     *
     * @return string|null
     */
    public function getVehicleNumber(): ?string
    {
        return $this->vehicleNumber;
    }

    /**
    * Sets vehicleNumber.
    *
    * @param string|null $vehicleNumber  Номер транспортного средства.
    *
    * @return $this
    */
    public function setVehicleNumber(?string $vehicleNumber = null): self
    {
        $this->vehicleNumber = $vehicleNumber;

        return $this;
    }




    /**
     * Gets vehicleDescription.
     *
     * @return string|null
     */
    public function getVehicleDescription(): ?string
    {
        return $this->vehicleDescription;
    }

    /**
    * Sets vehicleDescription.
    *
    * @param string|null $vehicleDescription  Описание машины. Например, модель и цвет.
    *
    * @return $this
    */
    public function setVehicleDescription(?string $vehicleDescription = null): self
    {
        $this->vehicleDescription = $vehicleDescription;

        return $this;
    }



}


