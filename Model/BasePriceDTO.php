<?php
/**
 * BasePriceDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BasePriceDTO model.
 *
 * Цена на товар.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class BasePriceDTO 
{
        /**
     * Значение.
     *
     * @var float|null
     * @SerializedName("value")
     * @Type("float")
    */
    #[Assert\NotNull]
    #[Assert\Type("float")]
    #[Assert\GreaterThan(0)]
    protected ?float $value = null;

    /**
     * @var CurrencyType|null
     * @SerializedName("currencyId")
    * @Accessor(getter="getSerializedCurrencyId", setter="setDeserializedCurrencyId")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?CurrencyType $currencyId = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->value = array_key_exists('value', $data) ? $data['value'] : $this->value;
            $this->currencyId = array_key_exists('currencyId', $data) ? $data['currencyId'] : $this->currencyId;
        }
    }

    /**
     * Gets value.
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->value;
    }

    /**
    * Sets value.
    *
    * @param float|null $value  Значение.
    *
    * @return $this
    */
    public function setValue(?float $value): self
    {
        $this->value = $value;

        return $this;
    }




    /**
     * Gets currencyId.
     *
     * @return CurrencyType|null
     */
    public function getCurrencyId(): ?CurrencyType
    {
        return $this->currencyId;
    }

    /**
    * Sets currencyId.
    *
    * @param CurrencyType|null $currencyId
    *
    * @return $this
    */
    public function setCurrencyId(?CurrencyType $currencyId): self
    {
        $this->currencyId = $currencyId;

        return $this;
    }

    /**
    * Gets currencyId for serialization.
    *
    * @return string|null
    */
    public function getSerializedCurrencyId(): string|null
    {
        return $this->currencyId?->value ? (string) $this->currencyId->value : null;
    }

    /**
    * Sets currencyId.
    *
    * @param string|CurrencyType|null $currencyId
    *
    * @return $this
    */
    public function setDeserializedCurrencyId(string|CurrencyType|null $currencyId): self
    {
        if (is_string($currencyId)) {
            $currencyId = CurrencyType::tryFrom($currencyId);
        }

        $this->currencyId = $currencyId;

        return $this;
    }


}


