<?php
/**
 * BaseShipmentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the BaseShipmentDTO model.
 *
 * Информация об отгрузке.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class BaseShipmentDTO 
{
        /**
     * Идентификатор отгрузки.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Начало планового интервала отгрузки.
     *
     * @var \DateTime|null
     * @SerializedName("planIntervalFrom")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $planIntervalFrom = null;

    /**
     * Конец планового интервала отгрузки.
     *
     * @var \DateTime|null
     * @SerializedName("planIntervalTo")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $planIntervalTo = null;

    /**
     * @var ShipmentType|null
     * @SerializedName("shipmentType")
    * @Accessor(getter="getSerializedShipmentType", setter="setDeserializedShipmentType")
    * @Type("string")
    */
    protected ?ShipmentType $shipmentType = null;

    /**
     * @var PartnerShipmentWarehouseDTO|null
     * @SerializedName("warehouse")
     * @Type("OpenAPI\Server\Model\PartnerShipmentWarehouseDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\PartnerShipmentWarehouseDTO")]
    protected ?PartnerShipmentWarehouseDTO $warehouse = null;

    /**
     * @var PartnerShipmentWarehouseDTO|null
     * @SerializedName("warehouseTo")
     * @Type("OpenAPI\Server\Model\PartnerShipmentWarehouseDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\PartnerShipmentWarehouseDTO")]
    protected ?PartnerShipmentWarehouseDTO $warehouseTo = null;

    /**
     * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
     *
     * @var string|null
     * @SerializedName("externalId")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $externalId = null;

    /**
     * @var DeliveryServiceDTO|null
     * @SerializedName("deliveryService")
     * @Type("OpenAPI\Server\Model\DeliveryServiceDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\DeliveryServiceDTO")]
    protected ?DeliveryServiceDTO $deliveryService = null;

    /**
     * @var PalletsCountDTO|null
     * @SerializedName("palletsCount")
     * @Type("OpenAPI\Server\Model\PalletsCountDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\PalletsCountDTO")]
    protected ?PalletsCountDTO $palletsCount = null;

    /**
     * Идентификаторы заказов в отгрузке.
     *
     * @var int[]|null
     * @SerializedName("orderIds")
     * @Type("array<int>")
    */
    #[Assert\NotNull]
    #[Assert\All([
        new Assert\Type("int"),
    ])]
    protected ?array $orderIds = null;

    /**
     * Количество заказов, которое Маркет запланировал к отгрузке.
     *
     * @var int|null
     * @SerializedName("draftCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $draftCount = null;

    /**
     * Количество заказов, которое Маркет подтвердил к отгрузке.
     *
     * @var int|null
     * @SerializedName("plannedCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $plannedCount = null;

    /**
     * Количество заказов, принятых в сортировочном центре или пункте приема.
     *
     * @var int|null
     * @SerializedName("factCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $factCount = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->planIntervalFrom = array_key_exists('planIntervalFrom', $data) ? $data['planIntervalFrom'] : $this->planIntervalFrom;
            $this->planIntervalTo = array_key_exists('planIntervalTo', $data) ? $data['planIntervalTo'] : $this->planIntervalTo;
            $this->shipmentType = array_key_exists('shipmentType', $data) ? $data['shipmentType'] : $this->shipmentType;
            $this->warehouse = array_key_exists('warehouse', $data) ? $data['warehouse'] : $this->warehouse;
            $this->warehouseTo = array_key_exists('warehouseTo', $data) ? $data['warehouseTo'] : $this->warehouseTo;
            $this->externalId = array_key_exists('externalId', $data) ? $data['externalId'] : $this->externalId;
            $this->deliveryService = array_key_exists('deliveryService', $data) ? $data['deliveryService'] : $this->deliveryService;
            $this->palletsCount = array_key_exists('palletsCount', $data) ? $data['palletsCount'] : $this->palletsCount;
            $this->orderIds = array_key_exists('orderIds', $data) ? $data['orderIds'] : $this->orderIds;
            $this->draftCount = array_key_exists('draftCount', $data) ? $data['draftCount'] : $this->draftCount;
            $this->plannedCount = array_key_exists('plannedCount', $data) ? $data['plannedCount'] : $this->plannedCount;
            $this->factCount = array_key_exists('factCount', $data) ? $data['factCount'] : $this->factCount;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор отгрузки.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets planIntervalFrom.
     *
     * @return \DateTime|null
     */
    public function getPlanIntervalFrom(): ?\DateTime
    {
        return $this->planIntervalFrom;
    }

    /**
    * Sets planIntervalFrom.
    *
    * @param \DateTime|null $planIntervalFrom  Начало планового интервала отгрузки.
    *
    * @return $this
    */
    public function setPlanIntervalFrom(?\DateTime $planIntervalFrom = null): self
    {
        $this->planIntervalFrom = $planIntervalFrom;

        return $this;
    }




    /**
     * Gets planIntervalTo.
     *
     * @return \DateTime|null
     */
    public function getPlanIntervalTo(): ?\DateTime
    {
        return $this->planIntervalTo;
    }

    /**
    * Sets planIntervalTo.
    *
    * @param \DateTime|null $planIntervalTo  Конец планового интервала отгрузки.
    *
    * @return $this
    */
    public function setPlanIntervalTo(?\DateTime $planIntervalTo = null): self
    {
        $this->planIntervalTo = $planIntervalTo;

        return $this;
    }




    /**
     * Gets shipmentType.
     *
     * @return ShipmentType|null
     */
    public function getShipmentType(): ?ShipmentType
    {
        return $this->shipmentType;
    }

    /**
    * Sets shipmentType.
    *
    * @param ShipmentType|null $shipmentType
    *
    * @return $this
    */
    public function setShipmentType(?ShipmentType $shipmentType = null): self
    {
        $this->shipmentType = $shipmentType;

        return $this;
    }

    /**
    * Gets shipmentType for serialization.
    *
    * @return string|null
    */
    public function getSerializedShipmentType(): string|null
    {
        return $this->shipmentType?->value ? (string) $this->shipmentType->value : null;
    }

    /**
    * Sets shipmentType.
    *
    * @param string|ShipmentType|null $shipmentType
    *
    * @return $this
    */
    public function setDeserializedShipmentType(string|ShipmentType|null $shipmentType = null): self
    {
        if (is_string($shipmentType)) {
            $shipmentType = ShipmentType::tryFrom($shipmentType);
        }

        $this->shipmentType = $shipmentType;

        return $this;
    }



    /**
     * Gets warehouse.
     *
     * @return PartnerShipmentWarehouseDTO|null
     */
    public function getWarehouse(): ?PartnerShipmentWarehouseDTO
    {
        return $this->warehouse;
    }

    /**
    * Sets warehouse.
    *
    * @param PartnerShipmentWarehouseDTO|null $warehouse
    *
    * @return $this
    */
    public function setWarehouse(?PartnerShipmentWarehouseDTO $warehouse = null): self
    {
        $this->warehouse = $warehouse;

        return $this;
    }




    /**
     * Gets warehouseTo.
     *
     * @return PartnerShipmentWarehouseDTO|null
     */
    public function getWarehouseTo(): ?PartnerShipmentWarehouseDTO
    {
        return $this->warehouseTo;
    }

    /**
    * Sets warehouseTo.
    *
    * @param PartnerShipmentWarehouseDTO|null $warehouseTo
    *
    * @return $this
    */
    public function setWarehouseTo(?PartnerShipmentWarehouseDTO $warehouseTo = null): self
    {
        $this->warehouseTo = $warehouseTo;

        return $this;
    }




    /**
     * Gets externalId.
     *
     * @return string|null
     */
    public function getExternalId(): ?string
    {
        return $this->externalId;
    }

    /**
    * Sets externalId.
    *
    * @param string|null $externalId  Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
    *
    * @return $this
    */
    public function setExternalId(?string $externalId = null): self
    {
        $this->externalId = $externalId;

        return $this;
    }




    /**
     * Gets deliveryService.
     *
     * @return DeliveryServiceDTO|null
     */
    public function getDeliveryService(): ?DeliveryServiceDTO
    {
        return $this->deliveryService;
    }

    /**
    * Sets deliveryService.
    *
    * @param DeliveryServiceDTO|null $deliveryService
    *
    * @return $this
    */
    public function setDeliveryService(?DeliveryServiceDTO $deliveryService = null): self
    {
        $this->deliveryService = $deliveryService;

        return $this;
    }




    /**
     * Gets palletsCount.
     *
     * @return PalletsCountDTO|null
     */
    public function getPalletsCount(): ?PalletsCountDTO
    {
        return $this->palletsCount;
    }

    /**
    * Sets palletsCount.
    *
    * @param PalletsCountDTO|null $palletsCount
    *
    * @return $this
    */
    public function setPalletsCount(?PalletsCountDTO $palletsCount = null): self
    {
        $this->palletsCount = $palletsCount;

        return $this;
    }




    /**
     * Gets orderIds.
     *
     * @return int[]|null
     */
    public function getOrderIds(): ?array
    {
        return $this->orderIds;
    }

    /**
    * Sets orderIds.
    *
    * @param int[]|null $orderIds  Идентификаторы заказов в отгрузке.
    *
    * @return $this
    */
    public function setOrderIds(?array $orderIds): self
    {
        $this->orderIds = $orderIds;

        return $this;
    }




    /**
     * Gets draftCount.
     *
     * @return int|null
     */
    public function getDraftCount(): ?int
    {
        return $this->draftCount;
    }

    /**
    * Sets draftCount.
    *
    * @param int|null $draftCount  Количество заказов, которое Маркет запланировал к отгрузке.
    *
    * @return $this
    */
    public function setDraftCount(?int $draftCount = null): self
    {
        $this->draftCount = $draftCount;

        return $this;
    }




    /**
     * Gets plannedCount.
     *
     * @return int|null
     */
    public function getPlannedCount(): ?int
    {
        return $this->plannedCount;
    }

    /**
    * Sets plannedCount.
    *
    * @param int|null $plannedCount  Количество заказов, которое Маркет подтвердил к отгрузке.
    *
    * @return $this
    */
    public function setPlannedCount(?int $plannedCount = null): self
    {
        $this->plannedCount = $plannedCount;

        return $this;
    }




    /**
     * Gets factCount.
     *
     * @return int|null
     */
    public function getFactCount(): ?int
    {
        return $this->factCount;
    }

    /**
    * Sets factCount.
    *
    * @param int|null $factCount  Количество заказов, принятых в сортировочном центре или пункте приема.
    *
    * @return $this
    */
    public function setFactCount(?int $factCount = null): self
    {
        $this->factCount = $factCount;

        return $this;
    }



}


