<?php
/**
 * ReturnInstanceDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ReturnInstanceDTO model.
 *
 * Логистическая информация по возврату.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ReturnInstanceDTO  implements \JsonSerializable
{
        /**
     * @var ReturnInstanceStockType|null
     * @SerializedName("stockType")
        * @Accessor(getter="getSerializedStockType")
        * @Type("string")
     */
    public ?ReturnInstanceStockType $stockType;

    /**
     * @var ReturnInstanceStatusType|null
     * @SerializedName("status")
        * @Accessor(getter="getSerializedStatus")
        * @Type("string")
     */
    public ?ReturnInstanceStatusType $status;

    /**
     * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     *
     * @var string|null
     * @SerializedName("cis")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $cis;

    /**
     * Международный идентификатор мобильного оборудования.
     *
     * @var string|null
     * @SerializedName("imei")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $imei;

    /**
     * Constructor
     *
     * @param ReturnInstanceStockType|null $stockType
     * @param ReturnInstanceStatusType|null $status
     * @param string|null $cis
     * @param string|null $imei
     */
    public function __construct(?ReturnInstanceStockType $stockType, ?ReturnInstanceStatusType $status, ?string $cis, ?string $imei)
    {
        $this->stockType = $stockType;
        $this->status = $status;
        $this->cis = $cis;
        $this->imei = $imei;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            isset($data['stockType']) ? ReturnInstanceStockType::tryFrom($data['stockType']) : null, 
            isset($data['status']) ? ReturnInstanceStatusType::tryFrom($data['status']) : null, 
            $data['cis'] ?? null, 
            $data['imei'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'stockType' => $this->stockType, 
            'status' => $this->status, 
            'cis' => $this->cis, 
            'imei' => $this->imei, 
        ];
    }
}


