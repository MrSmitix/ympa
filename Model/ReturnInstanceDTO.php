<?php
/**
 * ReturnInstanceDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ReturnInstanceDTO model.
 *
 * Логистическая информация по возврату.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ReturnInstanceDTO 
{
        /**
     * @var ReturnInstanceStockType|null
     * @SerializedName("stockType")
    * @Accessor(getter="getSerializedStockType", setter="setDeserializedStockType")
    * @Type("string")
    */
    protected ?ReturnInstanceStockType $stockType = null;

    /**
     * @var ReturnInstanceStatusType|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?ReturnInstanceStatusType $status = null;

    /**
     * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
     *
     * @var string|null
     * @SerializedName("cis")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $cis = null;

    /**
     * Международный идентификатор мобильного оборудования.
     *
     * @var string|null
     * @SerializedName("imei")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $imei = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->stockType = array_key_exists('stockType', $data) ? $data['stockType'] : $this->stockType;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->cis = array_key_exists('cis', $data) ? $data['cis'] : $this->cis;
            $this->imei = array_key_exists('imei', $data) ? $data['imei'] : $this->imei;
        }
    }

    /**
     * Gets stockType.
     *
     * @return ReturnInstanceStockType|null
     */
    public function getStockType(): ?ReturnInstanceStockType
    {
        return $this->stockType;
    }

    /**
    * Sets stockType.
    *
    * @param ReturnInstanceStockType|null $stockType
    *
    * @return $this
    */
    public function setStockType(?ReturnInstanceStockType $stockType = null): self
    {
        $this->stockType = $stockType;

        return $this;
    }

    /**
    * Gets stockType for serialization.
    *
    * @return string|null
    */
    public function getSerializedStockType(): string|null
    {
        return $this->stockType?->value ? (string) $this->stockType->value : null;
    }

    /**
    * Sets stockType.
    *
    * @param string|ReturnInstanceStockType|null $stockType
    *
    * @return $this
    */
    public function setDeserializedStockType(string|ReturnInstanceStockType|null $stockType = null): self
    {
        if (is_string($stockType)) {
            $stockType = ReturnInstanceStockType::tryFrom($stockType);
        }

        $this->stockType = $stockType;

        return $this;
    }



    /**
     * Gets status.
     *
     * @return ReturnInstanceStatusType|null
     */
    public function getStatus(): ?ReturnInstanceStatusType
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param ReturnInstanceStatusType|null $status
    *
    * @return $this
    */
    public function setStatus(?ReturnInstanceStatusType $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return $this->status?->value ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|ReturnInstanceStatusType|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|ReturnInstanceStatusType|null $status = null): self
    {
        if (is_string($status)) {
            $status = ReturnInstanceStatusType::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets cis.
     *
     * @return string|null
     */
    public function getCis(): ?string
    {
        return $this->cis;
    }

    /**
    * Sets cis.
    *
    * @param string|null $cis  Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    *
    * @return $this
    */
    public function setCis(?string $cis = null): self
    {
        $this->cis = $cis;

        return $this;
    }




    /**
     * Gets imei.
     *
     * @return string|null
     */
    public function getImei(): ?string
    {
        return $this->imei;
    }

    /**
    * Sets imei.
    *
    * @param string|null $imei  Международный идентификатор мобильного оборудования.
    *
    * @return $this
    */
    public function setImei(?string $imei = null): self
    {
        $this->imei = $imei;

        return $this;
    }



}


