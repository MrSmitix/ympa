<?php
/**
 * ReturnItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ReturnItemDTO model.
 *
 * Список товаров в возврате.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ReturnItemDTO  implements \JsonSerializable
{
        /**
     * SKU на Маркете.
     *
     * @var int|null
     * @SerializedName("marketSku")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $marketSku;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("shopSku")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $shopSku;

    /**
     * Количество единиц товара.
     *
     * @var int
     * @SerializedName("count")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $count;

    /**
     * Список решений по возврату.
     *
     * @var ReturnDecisionDTO[]|null
     * @SerializedName("decisions")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ReturnDecisionDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ReturnDecisionDTO>")
     */
    public ?array $decisions;

    /**
     * Список логистических позиций возврата.
     *
     * @var ReturnInstanceDTO[]|null
     * @SerializedName("instances")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ReturnInstanceDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ReturnInstanceDTO>")
     */
    public ?array $instances;

    /**
     * Список трек-кодов для почтовых отправлений.
     *
     * @var TrackDTO[]|null
     * @SerializedName("tracks")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\TrackDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\TrackDTO>")
     */
    public ?array $tracks;

    /**
     * Constructor
     *
     * @param int|null $marketSku
     * @param string $shopSku
     * @param int $count
     * @param ReturnDecisionDTO[]|null $decisions
     * @param ReturnInstanceDTO[]|null $instances
     * @param TrackDTO[]|null $tracks
     */
    public function __construct(?int $marketSku, string $shopSku, int $count, ?array $decisions, ?array $instances, ?array $tracks)
    {
        $this->marketSku = $marketSku;
        $this->shopSku = $shopSku;
        $this->count = $count;
        $this->decisions = $decisions;
        $this->instances = $instances;
        $this->tracks = $tracks;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['marketSku'] ?? null, 
            $data['shopSku'] ?? null, 
            $data['count'] ?? null, 
            isset($data['decisions']) ? array_map(fn($item) => ReturnDecisionDTO::fromArray($item), $data['decisions']) : null, 
            isset($data['instances']) ? array_map(fn($item) => ReturnInstanceDTO::fromArray($item), $data['instances']) : null, 
            isset($data['tracks']) ? array_map(fn($item) => TrackDTO::fromArray($item), $data['tracks']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'marketSku' => $this->marketSku, 
            'shopSku' => $this->shopSku, 
            'count' => $this->count, 
            'decisions' => $this->decisions, 
            'instances' => $this->instances, 
            'tracks' => $this->tracks, 
        ];
    }
}


