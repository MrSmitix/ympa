<?php
/**
 * ReturnItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ReturnItemDTO model.
 *
 * Список товаров в возврате.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ReturnItemDTO 
{
        /**
     * SKU на Маркете.
     *
     * @var int|null
     * @SerializedName("marketSku")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $marketSku = null;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $shopSku = null;

    /**
     * Количество единиц товара.
     *
     * @var int|null
     * @SerializedName("count")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $count = null;

    /**
     * Список решений по возврату.
     *
     * @var ReturnDecisionDTO[]|null
     * @SerializedName("decisions")
     * @Type("array<OpenAPI\Server\Model\ReturnDecisionDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ReturnDecisionDTO"),
    ])]
    protected ?array $decisions = null;

    /**
     * Список логистических позиций возврата.
     *
     * @var ReturnInstanceDTO[]|null
     * @SerializedName("instances")
     * @Type("array<OpenAPI\Server\Model\ReturnInstanceDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ReturnInstanceDTO"),
    ])]
    protected ?array $instances = null;

    /**
     * Список трек-кодов для почтовых отправлений.
     *
     * @var TrackDTO[]|null
     * @SerializedName("tracks")
     * @Type("array<OpenAPI\Server\Model\TrackDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\TrackDTO"),
    ])]
    protected ?array $tracks = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->marketSku = array_key_exists('marketSku', $data) ? $data['marketSku'] : $this->marketSku;
            $this->shopSku = array_key_exists('shopSku', $data) ? $data['shopSku'] : $this->shopSku;
            $this->count = array_key_exists('count', $data) ? $data['count'] : $this->count;
            $this->decisions = array_key_exists('decisions', $data) ? $data['decisions'] : $this->decisions;
            $this->instances = array_key_exists('instances', $data) ? $data['instances'] : $this->instances;
            $this->tracks = array_key_exists('tracks', $data) ? $data['tracks'] : $this->tracks;
        }
    }

    /**
     * Gets marketSku.
     *
     * @return int|null
     */
    public function getMarketSku(): ?int
    {
        return $this->marketSku;
    }

    /**
    * Sets marketSku.
    *
    * @param int|null $marketSku  SKU на Маркете.
    *
    * @return $this
    */
    public function setMarketSku(?int $marketSku = null): self
    {
        $this->marketSku = $marketSku;

        return $this;
    }




    /**
     * Gets shopSku.
     *
     * @return string|null
     */
    public function getShopSku(): ?string
    {
        return $this->shopSku;
    }

    /**
    * Sets shopSku.
    *
    * @param string|null $shopSku  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setShopSku(?string $shopSku): self
    {
        $this->shopSku = $shopSku;

        return $this;
    }




    /**
     * Gets count.
     *
     * @return int|null
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
    * Sets count.
    *
    * @param int|null $count  Количество единиц товара.
    *
    * @return $this
    */
    public function setCount(?int $count): self
    {
        $this->count = $count;

        return $this;
    }




    /**
     * Gets decisions.
     *
     * @return ReturnDecisionDTO[]|null
     */
    public function getDecisions(): ?array
    {
        return $this->decisions;
    }

    /**
    * Sets decisions.
    *
    * @param ReturnDecisionDTO[]|null $decisions  Список решений по возврату.
    *
    * @return $this
    */
    public function setDecisions(?array $decisions = null): self
    {
        $this->decisions = $decisions;

        return $this;
    }




    /**
     * Gets instances.
     *
     * @return ReturnInstanceDTO[]|null
     */
    public function getInstances(): ?array
    {
        return $this->instances;
    }

    /**
    * Sets instances.
    *
    * @param ReturnInstanceDTO[]|null $instances  Список логистических позиций возврата.
    *
    * @return $this
    */
    public function setInstances(?array $instances = null): self
    {
        $this->instances = $instances;

        return $this;
    }




    /**
     * Gets tracks.
     *
     * @return TrackDTO[]|null
     */
    public function getTracks(): ?array
    {
        return $this->tracks;
    }

    /**
    * Sets tracks.
    *
    * @param TrackDTO[]|null $tracks  Список трек-кодов для почтовых отправлений.
    *
    * @return $this
    */
    public function setTracks(?array $tracks = null): self
    {
        $this->tracks = $tracks;

        return $this;
    }



}


