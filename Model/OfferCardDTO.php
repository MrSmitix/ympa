<?php
/**
 * OfferCardDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OfferCardDTO model.
 *
 * Информация о состоянии карточки товара.  Если поле &#x60;mapping&#x60; отсутствует в ответе, Маркет еще не успел обработать информацию о товаре. Чтобы определить категорию такого товара, повторите запрос через несколько минут.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OfferCardDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("offerId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $offerId;

    /**
     * @var GetMappingDTO|null
     * @SerializedName("mapping")
     * @Assert\Type("\OpenAPIServer\Model\GetMappingDTO")
     * @Type("\OpenAPIServer\Model\GetMappingDTO")
     */
    public ?GetMappingDTO $mapping;

    /**
     * Список характеристик с их значениями.
     *
     * @var ParameterValueDTO[]|null
     * @SerializedName("parameterValues")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ParameterValueDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ParameterValueDTO>")
     */
    public ?array $parameterValues;

    /**
     * @var OfferCardStatusType|null
     * @SerializedName("cardStatus")
        * @Accessor(getter="getSerializedCardStatus")
        * @Type("string")
     */
    public ?OfferCardStatusType $cardStatus;

    /**
     * Процент заполненности карточки.
     *
     * @var int|null
     * @SerializedName("contentRating")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $contentRating;

    /**
     * Список рекомендаций к заполнению карточки.  Рекомендации Маркета помогают заполнять карточку так, чтобы покупателям было проще найти ваш товар и решиться на покупку.
     *
     * @var OfferCardRecommendationDTO[]|null
     * @SerializedName("recommendations")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferCardRecommendationDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferCardRecommendationDTO>")
     */
    public ?array $recommendations;

    /**
     * Ошибки в контенте, препятствующие размещению товара на витрине.
     *
     * @var OfferErrorDTO[]|null
     * @SerializedName("errors")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferErrorDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferErrorDTO>")
     */
    public ?array $errors;

    /**
     * Связанные с контентом предупреждения, не препятствующие размещению товара на витрине.
     *
     * @var OfferErrorDTO[]|null
     * @SerializedName("warnings")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferErrorDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferErrorDTO>")
     */
    public ?array $warnings;

    /**
     * Constructor
     *
     * @param string $offerId
     * @param GetMappingDTO|null $mapping
     * @param ParameterValueDTO[]|null $parameterValues
     * @param OfferCardStatusType|null $cardStatus
     * @param int|null $contentRating
     * @param OfferCardRecommendationDTO[]|null $recommendations
     * @param OfferErrorDTO[]|null $errors
     * @param OfferErrorDTO[]|null $warnings
     */
    public function __construct(string $offerId, ?GetMappingDTO $mapping, ?array $parameterValues, ?OfferCardStatusType $cardStatus, ?int $contentRating, ?array $recommendations, ?array $errors, ?array $warnings)
    {
        $this->offerId = $offerId;
        $this->mapping = $mapping;
        $this->parameterValues = $parameterValues;
        $this->cardStatus = $cardStatus;
        $this->contentRating = $contentRating;
        $this->recommendations = $recommendations;
        $this->errors = $errors;
        $this->warnings = $warnings;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            isset($data['mapping']) ? GetMappingDTO::fromArray($data['mapping']) : null, 
            isset($data['parameterValues']) ? array_map(fn($item) => ParameterValueDTO::fromArray($item), $data['parameterValues']) : null, 
            isset($data['cardStatus']) ? OfferCardStatusType::tryFrom($data['cardStatus']) : null, 
            $data['contentRating'] ?? null, 
            isset($data['recommendations']) ? array_map(fn($item) => OfferCardRecommendationDTO::fromArray($item), $data['recommendations']) : null, 
            isset($data['errors']) ? array_map(fn($item) => OfferErrorDTO::fromArray($item), $data['errors']) : null, 
            isset($data['warnings']) ? array_map(fn($item) => OfferErrorDTO::fromArray($item), $data['warnings']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'mapping' => $this->mapping, 
            'parameterValues' => $this->parameterValues, 
            'cardStatus' => $this->cardStatus, 
            'contentRating' => $this->contentRating, 
            'recommendations' => $this->recommendations, 
            'errors' => $this->errors, 
            'warnings' => $this->warnings, 
        ];
    }
}


