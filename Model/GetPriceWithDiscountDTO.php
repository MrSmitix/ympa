<?php
/**
 * GetPriceWithDiscountDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetPriceWithDiscountDTO model.
 *
 * Цена с указанием скидки и времени последнего обновления.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetPriceWithDiscountDTO  implements \JsonSerializable
{
        /**
     * Значение.
     *
     * @var float
     * @SerializedName("value")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public float $value;

    /**
     * @var CurrencyType
     * @SerializedName("currencyId")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedCurrencyId")
        * @Type("string")
     */
    public CurrencyType $currencyId;

    /**
     * Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар.
     *
     * @var float|null
     * @SerializedName("discountBase")
     * @Assert\Type("float")
     * @Type("float")
     * @Assert\GreaterThan(0)
     */
    public ?float $discountBase;

    /**
     * Время последнего обновления.
     *
     * @var \DateTime
     * @SerializedName("updatedAt")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $updatedAt;

    /**
     * Constructor
     *
     * @param float $value
     * @param CurrencyType $currencyId
     * @param float|null $discountBase
     * @param \DateTime $updatedAt
     */
    public function __construct(float $value, CurrencyType $currencyId, ?float $discountBase, \DateTime $updatedAt)
    {
        $this->value = $value;
        $this->currencyId = $currencyId;
        $this->discountBase = $discountBase;
        $this->updatedAt = $updatedAt;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['value'] ?? null, 
            isset($data['currencyId']) ? CurrencyType::tryFrom($data['currencyId']) : null, 
            $data['discountBase'] ?? null, 
            isset($data['updatedAt']) ? new \DateTime($data['updatedAt']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'value' => $this->value, 
            'currencyId' => $this->currencyId, 
            'discountBase' => $this->discountBase, 
            'updatedAt' => $this->updatedAt?->format('c'), 
        ];
    }
}


