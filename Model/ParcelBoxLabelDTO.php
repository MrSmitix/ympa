<?php
/**
 * ParcelBoxLabelDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ParcelBoxLabelDTO model.
 *
 * Информация о ярлыке для коробки.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ParcelBoxLabelDTO  implements \JsonSerializable
{
        /**
     * Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md).
     *
     * @var string
     * @SerializedName("url")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $url;

    /**
     * Юридическое название магазина.
     *
     * @var string
     * @SerializedName("supplierName")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $supplierName;

    /**
     * Юридическое название службы доставки.
     *
     * @var string
     * @SerializedName("deliveryServiceName")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $deliveryServiceName;

    /**
     * Идентификатор заказа в системе Маркета.
     *
     * @var int
     * @SerializedName("orderId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $orderId;

    /**
     * Идентификатор заказа в информационной системе магазина.  Совпадает с &#x60;orderId&#x60;, если Маркету неизвестен номер заказа в системе магазина.
     *
     * @var string
     * @SerializedName("orderNum")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $orderNum;

    /**
     * Фамилия и инициалы получателя заказа.
     *
     * @var string
     * @SerializedName("recipientName")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $recipientName;

    /**
     * Идентификатор коробки.
     *
     * @var int
     * @SerializedName("boxId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $boxId;

    /**
     * Идентификатор коробки в информационной системе магазина.  Возвращается в формате: &#x60;номер заказа на Маркете-номер коробки&#x60;. Например, &#x60;7206821‑1&#x60;, &#x60;7206821‑2&#x60; и т. д.
     *
     * @var string
     * @SerializedName("fulfilmentId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $fulfilmentId;

    /**
     * Номер коробки в заказе. Возвращается в формате: &#x60;номер места/общее количество мест&#x60;.
     *
     * @var string
     * @SerializedName("place")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $place;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: &#x60;weight кг&#x60;.
     *
     * @var string
     * @SerializedName("weight")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $weight;

    /**
     * Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
     *
     * @var string
     * @SerializedName("deliveryServiceId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $deliveryServiceId;

    /**
     * Адрес получателя.
     *
     * @var string|null
     * @SerializedName("deliveryAddress")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $deliveryAddress;

    /**
     * Дата отгрузки в формате &#x60;dd.MM.yyyy&#x60;.
     *
     * @var string|null
     * @SerializedName("shipmentDate")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $shipmentDate;

    /**
     * Constructor
     *
     * @param string $url
     * @param string $supplierName
     * @param string $deliveryServiceName
     * @param int $orderId
     * @param string $orderNum
     * @param string $recipientName
     * @param int $boxId
     * @param string $fulfilmentId
     * @param string $place
     * @param string $weight
     * @param string $deliveryServiceId
     * @param string|null $deliveryAddress
     * @param string|null $shipmentDate
     */
    public function __construct(string $url, string $supplierName, string $deliveryServiceName, int $orderId, string $orderNum, string $recipientName, int $boxId, string $fulfilmentId, string $place, string $weight, string $deliveryServiceId, ?string $deliveryAddress, ?string $shipmentDate)
    {
        $this->url = $url;
        $this->supplierName = $supplierName;
        $this->deliveryServiceName = $deliveryServiceName;
        $this->orderId = $orderId;
        $this->orderNum = $orderNum;
        $this->recipientName = $recipientName;
        $this->boxId = $boxId;
        $this->fulfilmentId = $fulfilmentId;
        $this->place = $place;
        $this->weight = $weight;
        $this->deliveryServiceId = $deliveryServiceId;
        $this->deliveryAddress = $deliveryAddress;
        $this->shipmentDate = $shipmentDate;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['url'] ?? null, 
            $data['supplierName'] ?? null, 
            $data['deliveryServiceName'] ?? null, 
            $data['orderId'] ?? null, 
            $data['orderNum'] ?? null, 
            $data['recipientName'] ?? null, 
            $data['boxId'] ?? null, 
            $data['fulfilmentId'] ?? null, 
            $data['place'] ?? null, 
            $data['weight'] ?? null, 
            $data['deliveryServiceId'] ?? null, 
            $data['deliveryAddress'] ?? null, 
            $data['shipmentDate'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'url' => $this->url, 
            'supplierName' => $this->supplierName, 
            'deliveryServiceName' => $this->deliveryServiceName, 
            'orderId' => $this->orderId, 
            'orderNum' => $this->orderNum, 
            'recipientName' => $this->recipientName, 
            'boxId' => $this->boxId, 
            'fulfilmentId' => $this->fulfilmentId, 
            'place' => $this->place, 
            'weight' => $this->weight, 
            'deliveryServiceId' => $this->deliveryServiceId, 
            'deliveryAddress' => $this->deliveryAddress, 
            'shipmentDate' => $this->shipmentDate, 
        ];
    }
}


