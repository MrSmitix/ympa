<?php
/**
 * GetCampaignOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetCampaignOfferDTO model.
 *
 * Параметры размещения товара в магазине.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetCampaignOfferDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("offerId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $offerId;

    /**
     * @var QuantumDTO|null
     * @SerializedName("quantum")
     * @Assert\Type("\OpenAPIServer\Model\QuantumDTO")
     * @Type("\OpenAPIServer\Model\QuantumDTO")
     */
    public ?QuantumDTO $quantum;

    /**
     * Есть ли товар в продаже.
     *
     * @var bool|null
     * @SerializedName("available")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $available;

    /**
     * @var GetPriceWithDiscountDTO|null
     * @SerializedName("basicPrice")
     * @Assert\Type("\OpenAPIServer\Model\GetPriceWithDiscountDTO")
     * @Type("\OpenAPIServer\Model\GetPriceWithDiscountDTO")
     */
    public ?GetPriceWithDiscountDTO $basicPrice;

    /**
     * @var GetPriceWithVatDTO|null
     * @SerializedName("campaignPrice")
     * @Assert\Type("\OpenAPIServer\Model\GetPriceWithVatDTO")
     * @Type("\OpenAPIServer\Model\GetPriceWithVatDTO")
     */
    public ?GetPriceWithVatDTO $campaignPrice;

    /**
     * @var OfferCampaignStatusType|null
     * @SerializedName("status")
        * @Accessor(getter="getSerializedStatus")
        * @Type("string")
     */
    public ?OfferCampaignStatusType $status;

    /**
     * Ошибки, препятствующие размещению товара на витрине.
     *
     * @var OfferErrorDTO[]|null
     * @SerializedName("errors")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferErrorDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferErrorDTO>")
     */
    public ?array $errors;

    /**
     * Предупреждения, не препятствующие размещению товара на витрине.
     *
     * @var OfferErrorDTO[]|null
     * @SerializedName("warnings")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferErrorDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OfferErrorDTO>")
     */
    public ?array $warnings;

    /**
     * Constructor
     *
     * @param string $offerId
     * @param QuantumDTO|null $quantum
     * @param bool|null $available
     * @param GetPriceWithDiscountDTO|null $basicPrice
     * @param GetPriceWithVatDTO|null $campaignPrice
     * @param OfferCampaignStatusType|null $status
     * @param OfferErrorDTO[]|null $errors
     * @param OfferErrorDTO[]|null $warnings
     */
    public function __construct(string $offerId, ?QuantumDTO $quantum, ?bool $available, ?GetPriceWithDiscountDTO $basicPrice, ?GetPriceWithVatDTO $campaignPrice, ?OfferCampaignStatusType $status, ?array $errors, ?array $warnings)
    {
        $this->offerId = $offerId;
        $this->quantum = $quantum;
        $this->available = $available;
        $this->basicPrice = $basicPrice;
        $this->campaignPrice = $campaignPrice;
        $this->status = $status;
        $this->errors = $errors;
        $this->warnings = $warnings;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            isset($data['quantum']) ? QuantumDTO::fromArray($data['quantum']) : null, 
            $data['available'] ?? null, 
            isset($data['basicPrice']) ? GetPriceWithDiscountDTO::fromArray($data['basicPrice']) : null, 
            isset($data['campaignPrice']) ? GetPriceWithVatDTO::fromArray($data['campaignPrice']) : null, 
            isset($data['status']) ? OfferCampaignStatusType::tryFrom($data['status']) : null, 
            isset($data['errors']) ? array_map(fn($item) => OfferErrorDTO::fromArray($item), $data['errors']) : null, 
            isset($data['warnings']) ? array_map(fn($item) => OfferErrorDTO::fromArray($item), $data['warnings']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'quantum' => $this->quantum, 
            'available' => $this->available, 
            'basicPrice' => $this->basicPrice, 
            'campaignPrice' => $this->campaignPrice, 
            'status' => $this->status, 
            'errors' => $this->errors, 
            'warnings' => $this->warnings, 
        ];
    }
}


