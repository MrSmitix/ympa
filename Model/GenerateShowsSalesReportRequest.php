<?php
/**
 * GenerateShowsSalesReportRequest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GenerateShowsSalesReportRequest model.
 *
 * Данные, необходимые для генерации отчета.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GenerateShowsSalesReportRequest  implements \JsonSerializable
{
        /**
     * Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу.
     *
     * @var int|null
     * @SerializedName("businessId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $businessId;

    /**
     * Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу.
     *
     * @var int|null
     * @SerializedName("campaignId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $campaignId;

    /**
     * Начало периода, включительно.
     *
     * @var \DateTime
     * @SerializedName("dateFrom")
     * @Assert\NotNull()
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public \DateTime $dateFrom;

    /**
     * Конец периода, включительно.
     *
     * @var \DateTime
     * @SerializedName("dateTo")
     * @Assert\NotNull()
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public \DateTime $dateTo;

    /**
     * @var ShowsSalesGroupingType
     * @SerializedName("grouping")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedGrouping")
        * @Type("string")
     */
    public ShowsSalesGroupingType $grouping;

    /**
     * Constructor
     *
     * @param int|null $businessId
     * @param int|null $campaignId
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     * @param ShowsSalesGroupingType $grouping
     */
    public function __construct(?int $businessId, ?int $campaignId, \DateTime $dateFrom, \DateTime $dateTo, ShowsSalesGroupingType $grouping)
    {
        $this->businessId = $businessId;
        $this->campaignId = $campaignId;
        $this->dateFrom = $dateFrom;
        $this->dateTo = $dateTo;
        $this->grouping = $grouping;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['businessId'] ?? null, 
            $data['campaignId'] ?? null, 
            $data['dateFrom'] ?? null, 
            $data['dateTo'] ?? null, 
            isset($data['grouping']) ? ShowsSalesGroupingType::tryFrom($data['grouping']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'businessId' => $this->businessId, 
            'campaignId' => $this->campaignId, 
            'dateFrom' => $this->dateFrom, 
            'dateTo' => $this->dateTo, 
            'grouping' => $this->grouping, 
        ];
    }
}


