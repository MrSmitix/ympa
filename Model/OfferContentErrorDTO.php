<?php
/**
 * OfferContentErrorDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OfferContentErrorDTO model.
 *
 * Текст ошибки.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OfferContentErrorDTO 
{
        /**
     * @var OfferContentErrorType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?OfferContentErrorType $type = null;

    /**
     * Идентификатор характеристики, с которой связана ошибка.
     *
     * @var int|null
     * @SerializedName("parameterId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $parameterId = null;

    /**
     * Текст ошибки.
     *
     * @var string|null
     * @SerializedName("message")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $message = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->parameterId = array_key_exists('parameterId', $data) ? $data['parameterId'] : $this->parameterId;
            $this->message = array_key_exists('message', $data) ? $data['message'] : $this->message;
        }
    }

    /**
     * Gets type.
     *
     * @return OfferContentErrorType|null
     */
    public function getType(): ?OfferContentErrorType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param OfferContentErrorType|null $type
    *
    * @return $this
    */
    public function setType(?OfferContentErrorType $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|OfferContentErrorType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|OfferContentErrorType|null $type): self
    {
        if (is_string($type)) {
            $type = OfferContentErrorType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets parameterId.
     *
     * @return int|null
     */
    public function getParameterId(): ?int
    {
        return $this->parameterId;
    }

    /**
    * Sets parameterId.
    *
    * @param int|null $parameterId  Идентификатор характеристики, с которой связана ошибка.
    *
    * @return $this
    */
    public function setParameterId(?int $parameterId = null): self
    {
        $this->parameterId = $parameterId;

        return $this;
    }




    /**
     * Gets message.
     *
     * @return string|null
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
    * Sets message.
    *
    * @param string|null $message  Текст ошибки.
    *
    * @return $this
    */
    public function setMessage(?string $message): self
    {
        $this->message = $message;

        return $this;
    }



}


