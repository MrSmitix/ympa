<?php
/**
 * CategoryParameterDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CategoryParameterDTO model.
 *
 * Характеристика товара.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CategoryParameterDTO 
{
        /**
     * Идентификатор характеристики.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Название характеристики.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var ParameterType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?ParameterType $type = null;

    /**
     * @var CategoryParameterUnitDTO|null
     * @SerializedName("unit")
     * @Type("OpenAPI\Server\Model\CategoryParameterUnitDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\CategoryParameterUnitDTO")]
    protected ?CategoryParameterUnitDTO $unit = null;

    /**
     * Описание характеристики.
     *
     * @var string|null
     * @SerializedName("description")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $description = null;

    /**
     * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
     *
     * @var OfferCardRecommendationType[]|null
     * @SerializedName("recommendationTypes")
     * @Accessor(getter="getSerializedRecommendationTypes", setter="setDeserializedRecommendationTypes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OfferCardRecommendationType"),
    ])]
    protected ?array $recommendationTypes = null;

    /**
     * Обязательность характеристики.
     *
     * @var bool|null
     * @SerializedName("required")
     * @Type("bool")
    */
    #[Assert\NotNull]
    #[Assert\Type("bool")]
    protected ?bool $required = null;

    /**
     * Используется ли характеристика в фильтре.
     *
     * @var bool|null
     * @SerializedName("filtering")
     * @Type("bool")
    */
    #[Assert\NotNull]
    #[Assert\Type("bool")]
    protected ?bool $filtering = null;

    /**
     * Является ли характеристика особенностью варианта.
     *
     * @var bool|null
     * @SerializedName("distinctive")
     * @Type("bool")
    */
    #[Assert\NotNull]
    #[Assert\Type("bool")]
    protected ?bool $distinctive = null;

    /**
     * Можно ли передать сразу несколько значений.
     *
     * @var bool|null
     * @SerializedName("multivalue")
     * @Type("bool")
    */
    #[Assert\NotNull]
    #[Assert\Type("bool")]
    protected ?bool $multivalue = null;

    /**
     * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var bool|null
     * @SerializedName("allowCustomValues")
     * @Type("bool")
    */
    #[Assert\NotNull]
    #[Assert\Type("bool")]
    protected ?bool $allowCustomValues = null;

    /**
     * Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var ParameterValueOptionDTO[]|null
     * @SerializedName("values")
     * @Type("array<OpenAPI\Server\Model\ParameterValueOptionDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ParameterValueOptionDTO"),
    ])]
    protected ?array $values = null;

    /**
     * @var ParameterValueConstraintsDTO|null
     * @SerializedName("constraints")
     * @Type("OpenAPI\Server\Model\ParameterValueConstraintsDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\ParameterValueConstraintsDTO")]
    protected ?ParameterValueConstraintsDTO $constraints = null;

    /**
     * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var ValueRestrictionDTO[]|null
     * @SerializedName("valueRestrictions")
     * @Type("array<OpenAPI\Server\Model\ValueRestrictionDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\ValueRestrictionDTO"),
    ])]
    protected ?array $valueRestrictions = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->unit = array_key_exists('unit', $data) ? $data['unit'] : $this->unit;
            $this->description = array_key_exists('description', $data) ? $data['description'] : $this->description;
            $this->recommendationTypes = array_key_exists('recommendationTypes', $data) ? $data['recommendationTypes'] : $this->recommendationTypes;
            $this->required = array_key_exists('required', $data) ? $data['required'] : $this->required;
            $this->filtering = array_key_exists('filtering', $data) ? $data['filtering'] : $this->filtering;
            $this->distinctive = array_key_exists('distinctive', $data) ? $data['distinctive'] : $this->distinctive;
            $this->multivalue = array_key_exists('multivalue', $data) ? $data['multivalue'] : $this->multivalue;
            $this->allowCustomValues = array_key_exists('allowCustomValues', $data) ? $data['allowCustomValues'] : $this->allowCustomValues;
            $this->values = array_key_exists('values', $data) ? $data['values'] : $this->values;
            $this->constraints = array_key_exists('constraints', $data) ? $data['constraints'] : $this->constraints;
            $this->valueRestrictions = array_key_exists('valueRestrictions', $data) ? $data['valueRestrictions'] : $this->valueRestrictions;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор характеристики.
    *
    * @return $this
    */
    public function setId(?int $id): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Название характеристики.
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return ParameterType|null
     */
    public function getType(): ?ParameterType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param ParameterType|null $type
    *
    * @return $this
    */
    public function setType(?ParameterType $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|ParameterType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|ParameterType|null $type): self
    {
        if (is_string($type)) {
            $type = ParameterType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets unit.
     *
     * @return CategoryParameterUnitDTO|null
     */
    public function getUnit(): ?CategoryParameterUnitDTO
    {
        return $this->unit;
    }

    /**
    * Sets unit.
    *
    * @param CategoryParameterUnitDTO|null $unit
    *
    * @return $this
    */
    public function setUnit(?CategoryParameterUnitDTO $unit = null): self
    {
        $this->unit = $unit;

        return $this;
    }




    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
    * Sets description.
    *
    * @param string|null $description  Описание характеристики.
    *
    * @return $this
    */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }




    /**
     * Gets recommendationTypes.
     *
     * @return OfferCardRecommendationType[]|null
     */
    public function getRecommendationTypes(): ?array
    {
        return $this->recommendationTypes;
    }

    /**
    * Sets recommendationTypes.
    *
    * @param OfferCardRecommendationType[]|null $recommendationTypes  Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
    *
    * @return $this
    */
    public function setRecommendationTypes(?array $recommendationTypes = null): self
    {
        $this->recommendationTypes = $recommendationTypes;

        return $this;
    }


    /**
    * Gets recommendationTypes for serialization.
    *
    * @return array
    */
    public function getSerializedRecommendationTypes(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->recommendationTypes ?? []
        );
    }

    /**
    * Sets recommendationTypes.
    *
    * @param ?array $recommendationTypes
    *
    * @return $this
    */
    public function setDeserializedRecommendationTypes(?array $recommendationTypes = []): self
    {
        $this->recommendationTypes = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = OfferCardRecommendationType::tryFrom($value);
                }

                return $value;
            },
            $recommendationTypes ?? []
        );

        return $this;
    }


    /**
     * Gets required.
     *
     * @return bool|null
     */
    public function isRequired(): ?bool
    {
        return $this->required;
    }

    /**
    * Sets required.
    *
    * @param bool|null $required  Обязательность характеристики.
    *
    * @return $this
    */
    public function setRequired(?bool $required): self
    {
        $this->required = $required;

        return $this;
    }




    /**
     * Gets filtering.
     *
     * @return bool|null
     */
    public function isFiltering(): ?bool
    {
        return $this->filtering;
    }

    /**
    * Sets filtering.
    *
    * @param bool|null $filtering  Используется ли характеристика в фильтре.
    *
    * @return $this
    */
    public function setFiltering(?bool $filtering): self
    {
        $this->filtering = $filtering;

        return $this;
    }




    /**
     * Gets distinctive.
     *
     * @return bool|null
     */
    public function isDistinctive(): ?bool
    {
        return $this->distinctive;
    }

    /**
    * Sets distinctive.
    *
    * @param bool|null $distinctive  Является ли характеристика особенностью варианта.
    *
    * @return $this
    */
    public function setDistinctive(?bool $distinctive): self
    {
        $this->distinctive = $distinctive;

        return $this;
    }




    /**
     * Gets multivalue.
     *
     * @return bool|null
     */
    public function isMultivalue(): ?bool
    {
        return $this->multivalue;
    }

    /**
    * Sets multivalue.
    *
    * @param bool|null $multivalue  Можно ли передать сразу несколько значений.
    *
    * @return $this
    */
    public function setMultivalue(?bool $multivalue): self
    {
        $this->multivalue = $multivalue;

        return $this;
    }




    /**
     * Gets allowCustomValues.
     *
     * @return bool|null
     */
    public function isAllowCustomValues(): ?bool
    {
        return $this->allowCustomValues;
    }

    /**
    * Sets allowCustomValues.
    *
    * @param bool|null $allowCustomValues  Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
    *
    * @return $this
    */
    public function setAllowCustomValues(?bool $allowCustomValues): self
    {
        $this->allowCustomValues = $allowCustomValues;

        return $this;
    }




    /**
     * Gets values.
     *
     * @return ParameterValueOptionDTO[]|null
     */
    public function getValues(): ?array
    {
        return $this->values;
    }

    /**
    * Sets values.
    *
    * @param ParameterValueOptionDTO[]|null $values  Список допустимых значений параметра. Только для характеристик типа `ENUM`.
    *
    * @return $this
    */
    public function setValues(?array $values = null): self
    {
        $this->values = $values;

        return $this;
    }




    /**
     * Gets constraints.
     *
     * @return ParameterValueConstraintsDTO|null
     */
    public function getConstraints(): ?ParameterValueConstraintsDTO
    {
        return $this->constraints;
    }

    /**
    * Sets constraints.
    *
    * @param ParameterValueConstraintsDTO|null $constraints
    *
    * @return $this
    */
    public function setConstraints(?ParameterValueConstraintsDTO $constraints = null): self
    {
        $this->constraints = $constraints;

        return $this;
    }




    /**
     * Gets valueRestrictions.
     *
     * @return ValueRestrictionDTO[]|null
     */
    public function getValueRestrictions(): ?array
    {
        return $this->valueRestrictions;
    }

    /**
    * Sets valueRestrictions.
    *
    * @param ValueRestrictionDTO[]|null $valueRestrictions  Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
    *
    * @return $this
    */
    public function setValueRestrictions(?array $valueRestrictions = null): self
    {
        $this->valueRestrictions = $valueRestrictions;

        return $this;
    }



}


