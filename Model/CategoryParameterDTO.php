<?php
/**
 * CategoryParameterDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the CategoryParameterDTO model.
 *
 * Характеристика товара.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class CategoryParameterDTO  implements \JsonSerializable
{
        /**
     * Идентификатор характеристики.
     *
     * @var int
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $id;

    /**
     * Название характеристики.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $name;

    /**
     * @var ParameterType
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public ParameterType $type;

    /**
     * @var CategoryParameterUnitDTO|null
     * @SerializedName("unit")
     * @Assert\Type("\OpenAPIServer\Model\CategoryParameterUnitDTO")
     * @Type("\OpenAPIServer\Model\CategoryParameterUnitDTO")
     */
    public ?CategoryParameterUnitDTO $unit;

    /**
     * Описание характеристики.
     *
     * @var string|null
     * @SerializedName("description")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $description;

    /**
     * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
     *
     * @var OfferCardRecommendationType[]|null
     * @SerializedName("recommendationTypes")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OfferCardRecommendationType")
     * })
     * @Accessor(getter="getSerializedRecommendationTypes")
     * @Type("array<string>")
     */
    public ?array $recommendationTypes;

    /**
     * Обязательность характеристики.
     *
     * @var bool
     * @SerializedName("required")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $required;

    /**
     * Используется ли характеристика в фильтре.
     *
     * @var bool
     * @SerializedName("filtering")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $filtering;

    /**
     * Является ли характеристика особенностью варианта.
     *
     * @var bool
     * @SerializedName("distinctive")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $distinctive;

    /**
     * Можно ли передать сразу несколько значений.
     *
     * @var bool
     * @SerializedName("multivalue")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $multivalue;

    /**
     * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var bool
     * @SerializedName("allowCustomValues")
     * @Assert\NotNull()
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public bool $allowCustomValues;

    /**
     * Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var ParameterValueOptionDTO[]|null
     * @SerializedName("values")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ParameterValueOptionDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ParameterValueOptionDTO>")
     */
    public ?array $values;

    /**
     * @var ParameterValueConstraintsDTO|null
     * @SerializedName("constraints")
     * @Assert\Type("\OpenAPIServer\Model\ParameterValueConstraintsDTO")
     * @Type("\OpenAPIServer\Model\ParameterValueConstraintsDTO")
     */
    public ?ParameterValueConstraintsDTO $constraints;

    /**
     * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var ValueRestrictionDTO[]|null
     * @SerializedName("valueRestrictions")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ValueRestrictionDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ValueRestrictionDTO>")
     */
    public ?array $valueRestrictions;

    /**
     * Constructor
     *
     * @param int $id
     * @param string|null $name
     * @param ParameterType $type
     * @param CategoryParameterUnitDTO|null $unit
     * @param string|null $description
     * @param OfferCardRecommendationType[]|null $recommendationTypes
     * @param bool $required
     * @param bool $filtering
     * @param bool $distinctive
     * @param bool $multivalue
     * @param bool $allowCustomValues
     * @param ParameterValueOptionDTO[]|null $values
     * @param ParameterValueConstraintsDTO|null $constraints
     * @param ValueRestrictionDTO[]|null $valueRestrictions
     */
    public function __construct(int $id, ?string $name, ParameterType $type, ?CategoryParameterUnitDTO $unit, ?string $description, ?array $recommendationTypes, bool $required, bool $filtering, bool $distinctive, bool $multivalue, bool $allowCustomValues, ?array $values, ?ParameterValueConstraintsDTO $constraints, ?array $valueRestrictions)
    {
        $this->id = $id;
        $this->name = $name;
        $this->type = $type;
        $this->unit = $unit;
        $this->description = $description;
        $this->recommendationTypes = $recommendationTypes;
        $this->required = $required;
        $this->filtering = $filtering;
        $this->distinctive = $distinctive;
        $this->multivalue = $multivalue;
        $this->allowCustomValues = $allowCustomValues;
        $this->values = $values;
        $this->constraints = $constraints;
        $this->valueRestrictions = $valueRestrictions;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['name'] ?? null, 
            isset($data['type']) ? ParameterType::tryFrom($data['type']) : null, 
            isset($data['unit']) ? CategoryParameterUnitDTO::fromArray($data['unit']) : null, 
            $data['description'] ?? null, 
            isset($data['recommendationTypes']) ? array_map(fn($item) => OfferCardRecommendationType::tryFrom($item), $data['recommendationTypes']) : null, 
            $data['required'] ?? null, 
            $data['filtering'] ?? null, 
            $data['distinctive'] ?? null, 
            $data['multivalue'] ?? null, 
            $data['allowCustomValues'] ?? null, 
            isset($data['values']) ? array_map(fn($item) => ParameterValueOptionDTO::fromArray($item), $data['values']) : null, 
            isset($data['constraints']) ? ParameterValueConstraintsDTO::fromArray($data['constraints']) : null, 
            isset($data['valueRestrictions']) ? array_map(fn($item) => ValueRestrictionDTO::fromArray($item), $data['valueRestrictions']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'name' => $this->name, 
            'type' => $this->type, 
            'unit' => $this->unit, 
            'description' => $this->description, 
            'recommendationTypes' => $this->recommendationTypes, 
            'required' => $this->required, 
            'filtering' => $this->filtering, 
            'distinctive' => $this->distinctive, 
            'multivalue' => $this->multivalue, 
            'allowCustomValues' => $this->allowCustomValues, 
            'values' => $this->values, 
            'constraints' => $this->constraints, 
            'valueRestrictions' => $this->valueRestrictions, 
        ];
    }
}


