<?php
/**
 * OrderDigitalItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderDigitalItemDTO model.
 *
 * Ключ цифрового товара.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderDigitalItemDTO  implements \JsonSerializable
{
        /**
     * Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;.
     *
     * @var int
     * @SerializedName("id")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $id;

    /**
     * Сам ключ.
     *
     * @var string
     * @SerializedName("code")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $code;

    /**
     * Инструкция по активации.
     *
     * @var string
     * @SerializedName("slip")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    public string $slip;

    /**
     * Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.
     *
     * @var \DateTime
     * @SerializedName("activate_till")
     * @Assert\NotNull()
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public \DateTime $activateTill;

    /**
     * Constructor
     *
     * @param int $id
     * @param string $code
     * @param string $slip
     * @param \DateTime $activateTill
     */
    public function __construct(int $id, string $code, string $slip, \DateTime $activateTill)
    {
        $this->id = $id;
        $this->code = $code;
        $this->slip = $slip;
        $this->activateTill = $activateTill;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['code'] ?? null, 
            $data['slip'] ?? null, 
            $data['activate_till'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'code' => $this->code, 
            'slip' => $this->slip, 
            'activate_till' => $this->activateTill, 
        ];
    }
}


