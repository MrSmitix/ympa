<?php
/**
 * ModelOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ModelOfferDTO model.
 *
 * Информация о предложении.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ModelOfferDTO  implements \JsonSerializable
{
        /**
     * Скидка на предложение в процентах.
     *
     * @var int|null
     * @SerializedName("discount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $discount;

    /**
     * Наименование предложения.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $name;

    /**
     * Позиция предложения в выдаче Маркета на карточке модели.
     *
     * @var int|null
     * @SerializedName("pos")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $pos;

    /**
     * Цена предложения без скидки магазина.
     *
     * @var float|null
     * @SerializedName("preDiscountPrice")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $preDiscountPrice;

    /**
     * Цена предложения без скидки, которую получает покупатель при оплате через Yandex Pay.
     *
     * @var float|null
     * @SerializedName("price")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $price;

    /**
     * Идентификатор региона предложения (регион, откуда доставляется товар).  Сначала показываются предложения, доставляемые из региона, указанного в запросе в параметре &#x60;regionId&#x60;. Предложения, доставляемые из других регионов, показываются после них.
     *
     * @var int|null
     * @SerializedName("regionId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $regionId;

    /**
     * Стоимость доставки товара в регион:  * &#x60;0&#x60; — доставка осуществляется бесплатно. * &#x60;-1&#x60; — магазин не осуществляет доставку этого товара (самовывоз).  Если стоимость доставки неизвестна, параметр не выводится.
     *
     * @var float|null
     * @SerializedName("shippingCost")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $shippingCost;

    /**
     * Название магазина (в том виде, в котором отображается на Маркете).
     *
     * @var string|null
     * @SerializedName("shopName")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $shopName;

    /**
     * Рейтинг магазина.  Возможные значения: * &#x60;-1&#x60; — у магазинов, недавно появившихся на Маркете, рейтинг появляется не сразу. До момента появления рейтинга для таких магазинов возвращается значение &#x60;-1&#x60;. * &#x60;1&#x60;. * &#x60;2&#x60;. * &#x60;3&#x60;. * &#x60;4&#x60;. * &#x60;5&#x60;.
     *
     * @var int|null
     * @SerializedName("shopRating")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $shopRating;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}
     *
     * @var int|null
     * @SerializedName("inStock")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $inStock;

    /**
     * Constructor
     *
     * @param int|null $discount
     * @param string|null $name
     * @param int|null $pos
     * @param float|null $preDiscountPrice
     * @param float|null $price
     * @param int|null $regionId
     * @param float|null $shippingCost
     * @param string|null $shopName
     * @param int|null $shopRating
     * @param int|null $inStock
     */
    public function __construct(?int $discount, ?string $name, ?int $pos, ?float $preDiscountPrice, ?float $price, ?int $regionId, ?float $shippingCost, ?string $shopName, ?int $shopRating, ?int $inStock)
    {
        $this->discount = $discount;
        $this->name = $name;
        $this->pos = $pos;
        $this->preDiscountPrice = $preDiscountPrice;
        $this->price = $price;
        $this->regionId = $regionId;
        $this->shippingCost = $shippingCost;
        $this->shopName = $shopName;
        $this->shopRating = $shopRating;
        $this->inStock = $inStock;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['discount'] ?? null, 
            $data['name'] ?? null, 
            $data['pos'] ?? null, 
            $data['preDiscountPrice'] ?? null, 
            $data['price'] ?? null, 
            $data['regionId'] ?? null, 
            $data['shippingCost'] ?? null, 
            $data['shopName'] ?? null, 
            $data['shopRating'] ?? null, 
            $data['inStock'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'discount' => $this->discount, 
            'name' => $this->name, 
            'pos' => $this->pos, 
            'preDiscountPrice' => $this->preDiscountPrice, 
            'price' => $this->price, 
            'regionId' => $this->regionId, 
            'shippingCost' => $this->shippingCost, 
            'shopName' => $this->shopName, 
            'shopRating' => $this->shopRating, 
            'inStock' => $this->inStock, 
        ];
    }
}


