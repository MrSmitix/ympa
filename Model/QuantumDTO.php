<?php
/**
 * QuantumDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the QuantumDTO model.
 *
 * Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр &#x60;quantum&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json {   \&quot;offers\&quot;: [     {       \&quot;offerId\&quot;: \&quot;08e35dc1-89a2-11e3-8055-0015e9b8c48d\&quot;,       \&quot;quantum\&quot;: {}     }   ] } &#x60;&#x60;&#x60;  {% endcut %}
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class QuantumDTO  implements \JsonSerializable
{
        /**
     * Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать.
     *
     * @var int|null
     * @SerializedName("minQuantity")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(1)
     */
    public ?int $minQuantity;

    /**
     * На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту.
     *
     * @var int|null
     * @SerializedName("stepQuantity")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(1)
     * @Assert\LessThanOrEqual(100)
     */
    public ?int $stepQuantity;

    /**
     * Constructor
     *
     * @param int|null $minQuantity
     * @param int|null $stepQuantity
     */
    public function __construct(?int $minQuantity, ?int $stepQuantity)
    {
        $this->minQuantity = $minQuantity;
        $this->stepQuantity = $stepQuantity;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['minQuantity'] ?? null, 
            $data['stepQuantity'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'minQuantity' => $this->minQuantity, 
            'stepQuantity' => $this->stepQuantity, 
        ];
    }
}


