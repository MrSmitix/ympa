<?php
/**
 * CampaignDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the CampaignDTO model.
 *
 * Информация о магазине.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class CampaignDTO  implements \JsonSerializable
{
        /**
     * URL магазина.
     *
     * @var string|null
     * @SerializedName("domain")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $domain;

    /**
     * Идентификатор кампании.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Идентификатор плательщика в Яндекс Балансе.
     *
     * @var int|null
     * @SerializedName("clientId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $clientId;

    /**
     * @var BusinessDTO|null
     * @SerializedName("business")
     * @Assert\Type("\OpenAPIServer\Model\BusinessDTO")
     * @Type("\OpenAPIServer\Model\BusinessDTO")
     */
    public ?BusinessDTO $business;

    /**
     * @var PlacementType|null
     * @SerializedName("placementType")
        * @Accessor(getter="getSerializedPlacementType")
        * @Type("string")
     */
    public ?PlacementType $placementType;

    /**
     * Constructor
     *
     * @param string|null $domain
     * @param int|null $id
     * @param int|null $clientId
     * @param BusinessDTO|null $business
     * @param PlacementType|null $placementType
     */
    public function __construct(?string $domain, ?int $id, ?int $clientId, ?BusinessDTO $business, ?PlacementType $placementType)
    {
        $this->domain = $domain;
        $this->id = $id;
        $this->clientId = $clientId;
        $this->business = $business;
        $this->placementType = $placementType;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['domain'] ?? null, 
            $data['id'] ?? null, 
            $data['clientId'] ?? null, 
            isset($data['business']) ? BusinessDTO::fromArray($data['business']) : null, 
            isset($data['placementType']) ? PlacementType::tryFrom($data['placementType']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'domain' => $this->domain, 
            'id' => $this->id, 
            'clientId' => $this->clientId, 
            'business' => $this->business, 
            'placementType' => $this->placementType, 
        ];
    }
}


