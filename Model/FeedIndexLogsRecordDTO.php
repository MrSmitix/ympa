<?php
/**
 * FeedIndexLogsRecordDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FeedIndexLogsRecordDTO model.
 *
 * Список отчетов по индексации прайс-листа.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FeedIndexLogsRecordDTO 
{
        /**
     * Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("downloadTime")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $downloadTime = null;

    /**
     * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("fileTime")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $fileTime = null;

    /**
     * Идентификатор индексации.
     *
     * @var int|null
     * @SerializedName("generationId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $generationId = null;

    /**
     * @var FeedIndexLogsIndexType|null
     * @SerializedName("indexType")
    * @Accessor(getter="getSerializedIndexType", setter="setDeserializedIndexType")
    * @Type("string")
    */
    protected ?FeedIndexLogsIndexType $indexType = null;

    /**
     * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("publishedTime")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $publishedTime = null;

    /**
     * @var FeedIndexLogsStatusType|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?FeedIndexLogsStatusType $status = null;

    /**
     * @var FeedIndexLogsErrorDTO|null
     * @SerializedName("error")
     * @Type("OpenAPI\Server\Model\FeedIndexLogsErrorDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedIndexLogsErrorDTO")]
    protected ?FeedIndexLogsErrorDTO $error = null;

    /**
     * @var FeedIndexLogsOffersDTO|null
     * @SerializedName("offers")
     * @Type("OpenAPI\Server\Model\FeedIndexLogsOffersDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedIndexLogsOffersDTO")]
    protected ?FeedIndexLogsOffersDTO $offers = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->downloadTime = array_key_exists('downloadTime', $data) ? $data['downloadTime'] : $this->downloadTime;
            $this->fileTime = array_key_exists('fileTime', $data) ? $data['fileTime'] : $this->fileTime;
            $this->generationId = array_key_exists('generationId', $data) ? $data['generationId'] : $this->generationId;
            $this->indexType = array_key_exists('indexType', $data) ? $data['indexType'] : $this->indexType;
            $this->publishedTime = array_key_exists('publishedTime', $data) ? $data['publishedTime'] : $this->publishedTime;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->error = array_key_exists('error', $data) ? $data['error'] : $this->error;
            $this->offers = array_key_exists('offers', $data) ? $data['offers'] : $this->offers;
        }
    }

    /**
     * Gets downloadTime.
     *
     * @return \DateTime|null
     */
    public function getDownloadTime(): ?\DateTime
    {
        return $this->downloadTime;
    }

    /**
    * Sets downloadTime.
    *
    * @param \DateTime|null $downloadTime  Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.
    *
    * @return $this
    */
    public function setDownloadTime(?\DateTime $downloadTime = null): self
    {
        $this->downloadTime = $downloadTime;

        return $this;
    }




    /**
     * Gets fileTime.
     *
     * @return \DateTime|null
     */
    public function getFileTime(): ?\DateTime
    {
        return $this->fileTime;
    }

    /**
    * Sets fileTime.
    *
    * @param \DateTime|null $fileTime  Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.
    *
    * @return $this
    */
    public function setFileTime(?\DateTime $fileTime = null): self
    {
        $this->fileTime = $fileTime;

        return $this;
    }




    /**
     * Gets generationId.
     *
     * @return int|null
     */
    public function getGenerationId(): ?int
    {
        return $this->generationId;
    }

    /**
    * Sets generationId.
    *
    * @param int|null $generationId  Идентификатор индексации.
    *
    * @return $this
    */
    public function setGenerationId(?int $generationId = null): self
    {
        $this->generationId = $generationId;

        return $this;
    }




    /**
     * Gets indexType.
     *
     * @return FeedIndexLogsIndexType|null
     */
    public function getIndexType(): ?FeedIndexLogsIndexType
    {
        return $this->indexType;
    }

    /**
    * Sets indexType.
    *
    * @param FeedIndexLogsIndexType|null $indexType
    *
    * @return $this
    */
    public function setIndexType(?FeedIndexLogsIndexType $indexType = null): self
    {
        $this->indexType = $indexType;

        return $this;
    }

    /**
    * Gets indexType for serialization.
    *
    * @return string|null
    */
    public function getSerializedIndexType(): string|null
    {
        return $this->indexType?->value ? (string) $this->indexType->value : null;
    }

    /**
    * Sets indexType.
    *
    * @param string|FeedIndexLogsIndexType|null $indexType
    *
    * @return $this
    */
    public function setDeserializedIndexType(string|FeedIndexLogsIndexType|null $indexType = null): self
    {
        if (is_string($indexType)) {
            $indexType = FeedIndexLogsIndexType::tryFrom($indexType);
        }

        $this->indexType = $indexType;

        return $this;
    }



    /**
     * Gets publishedTime.
     *
     * @return \DateTime|null
     */
    public function getPublishedTime(): ?\DateTime
    {
        return $this->publishedTime;
    }

    /**
    * Sets publishedTime.
    *
    * @param \DateTime|null $publishedTime  Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.
    *
    * @return $this
    */
    public function setPublishedTime(?\DateTime $publishedTime = null): self
    {
        $this->publishedTime = $publishedTime;

        return $this;
    }




    /**
     * Gets status.
     *
     * @return FeedIndexLogsStatusType|null
     */
    public function getStatus(): ?FeedIndexLogsStatusType
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param FeedIndexLogsStatusType|null $status
    *
    * @return $this
    */
    public function setStatus(?FeedIndexLogsStatusType $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return $this->status?->value ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|FeedIndexLogsStatusType|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|FeedIndexLogsStatusType|null $status = null): self
    {
        if (is_string($status)) {
            $status = FeedIndexLogsStatusType::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets error.
     *
     * @return FeedIndexLogsErrorDTO|null
     */
    public function getError(): ?FeedIndexLogsErrorDTO
    {
        return $this->error;
    }

    /**
    * Sets error.
    *
    * @param FeedIndexLogsErrorDTO|null $error
    *
    * @return $this
    */
    public function setError(?FeedIndexLogsErrorDTO $error = null): self
    {
        $this->error = $error;

        return $this;
    }




    /**
     * Gets offers.
     *
     * @return FeedIndexLogsOffersDTO|null
     */
    public function getOffers(): ?FeedIndexLogsOffersDTO
    {
        return $this->offers;
    }

    /**
    * Sets offers.
    *
    * @param FeedIndexLogsOffersDTO|null $offers
    *
    * @return $this
    */
    public function setOffers(?FeedIndexLogsOffersDTO $offers = null): self
    {
        $this->offers = $offers;

        return $this;
    }



}


