<?php
/**
 * FeedbackDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the FeedbackDTO model.
 *
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class FeedbackDTO 
{
        /**
     * Идентификатор отзыва.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $createdAt = null;

    /**
     * Комментарий автора отзыва.
     *
     * @var string|null
     * @SerializedName("text")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $text = null;

    /**
     * @var FeedbackStateType|null
     * @SerializedName("state")
    * @Accessor(getter="getSerializedState", setter="setDeserializedState")
    * @Type("string")
    */
    protected ?FeedbackStateType $state = null;

    /**
     * @var FeedbackAuthorDTO|null
     * @SerializedName("author")
     * @Type("OpenAPI\Server\Model\FeedbackAuthorDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedbackAuthorDTO")]
    protected ?FeedbackAuthorDTO $author = null;

    /**
     * Достоинства магазина, описанные в отзыве.
     *
     * @var string|null
     * @SerializedName("pro")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $pro = null;

    /**
     * Недостатки магазина, описанные в отзыве.
     *
     * @var string|null
     * @SerializedName("contra")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $contra = null;

    /**
     * Переписка автора отзыва с магазином.
     *
     * @var FeedbackCommentDTO[]|null
     * @SerializedName("comments")
     * @Type("array<OpenAPI\Server\Model\FeedbackCommentDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\FeedbackCommentDTO"),
    ])]
    protected ?array $comments = null;

    /**
     * @var FeedbackShopDTO|null
     * @SerializedName("shop")
     * @Type("OpenAPI\Server\Model\FeedbackShopDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedbackShopDTO")]
    protected ?FeedbackShopDTO $shop = null;

    /**
     * Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.
     *
     * @var bool|null
     * @SerializedName("resolved")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $resolved = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.
     *
     * @var bool|null
     * @SerializedName("verified")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $verified = null;

    /**
     * Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.
     *
     * @var bool|null
     * @SerializedName("recommend")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $recommend = null;

    /**
     * @var FeedbackGradesDTO|null
     * @SerializedName("grades")
     * @Type("OpenAPI\Server\Model\FeedbackGradesDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedbackGradesDTO")]
    protected ?FeedbackGradesDTO $grades = null;

    /**
     * @var FeedbackOrderDTO|null
     * @SerializedName("order")
     * @Type("OpenAPI\Server\Model\FeedbackOrderDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\FeedbackOrderDTO")]
    protected ?FeedbackOrderDTO $order = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->createdAt = array_key_exists('createdAt', $data) ? $data['createdAt'] : $this->createdAt;
            $this->text = array_key_exists('text', $data) ? $data['text'] : $this->text;
            $this->state = array_key_exists('state', $data) ? $data['state'] : $this->state;
            $this->author = array_key_exists('author', $data) ? $data['author'] : $this->author;
            $this->pro = array_key_exists('pro', $data) ? $data['pro'] : $this->pro;
            $this->contra = array_key_exists('contra', $data) ? $data['contra'] : $this->contra;
            $this->comments = array_key_exists('comments', $data) ? $data['comments'] : $this->comments;
            $this->shop = array_key_exists('shop', $data) ? $data['shop'] : $this->shop;
            $this->resolved = array_key_exists('resolved', $data) ? $data['resolved'] : $this->resolved;
            $this->verified = array_key_exists('verified', $data) ? $data['verified'] : $this->verified;
            $this->recommend = array_key_exists('recommend', $data) ? $data['recommend'] : $this->recommend;
            $this->grades = array_key_exists('grades', $data) ? $data['grades'] : $this->grades;
            $this->order = array_key_exists('order', $data) ? $data['order'] : $this->order;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор отзыва.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets createdAt.
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->createdAt;
    }

    /**
    * Sets createdAt.
    *
    * @param \DateTime|null $createdAt  Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`.
    *
    * @return $this
    */
    public function setCreatedAt(?\DateTime $createdAt = null): self
    {
        $this->createdAt = $createdAt;

        return $this;
    }




    /**
     * Gets text.
     *
     * @return string|null
     */
    public function getText(): ?string
    {
        return $this->text;
    }

    /**
    * Sets text.
    *
    * @param string|null $text  Комментарий автора отзыва.
    *
    * @return $this
    */
    public function setText(?string $text = null): self
    {
        $this->text = $text;

        return $this;
    }




    /**
     * Gets state.
     *
     * @return FeedbackStateType|null
     */
    public function getState(): ?FeedbackStateType
    {
        return $this->state;
    }

    /**
    * Sets state.
    *
    * @param FeedbackStateType|null $state
    *
    * @return $this
    */
    public function setState(?FeedbackStateType $state = null): self
    {
        $this->state = $state;

        return $this;
    }

    /**
    * Gets state for serialization.
    *
    * @return string|null
    */
    public function getSerializedState(): string|null
    {
        return $this->state?->value ? (string) $this->state->value : null;
    }

    /**
    * Sets state.
    *
    * @param string|FeedbackStateType|null $state
    *
    * @return $this
    */
    public function setDeserializedState(string|FeedbackStateType|null $state = null): self
    {
        if (is_string($state)) {
            $state = FeedbackStateType::tryFrom($state);
        }

        $this->state = $state;

        return $this;
    }



    /**
     * Gets author.
     *
     * @return FeedbackAuthorDTO|null
     */
    public function getAuthor(): ?FeedbackAuthorDTO
    {
        return $this->author;
    }

    /**
    * Sets author.
    *
    * @param FeedbackAuthorDTO|null $author
    *
    * @return $this
    */
    public function setAuthor(?FeedbackAuthorDTO $author = null): self
    {
        $this->author = $author;

        return $this;
    }




    /**
     * Gets pro.
     *
     * @return string|null
     */
    public function getPro(): ?string
    {
        return $this->pro;
    }

    /**
    * Sets pro.
    *
    * @param string|null $pro  Достоинства магазина, описанные в отзыве.
    *
    * @return $this
    */
    public function setPro(?string $pro = null): self
    {
        $this->pro = $pro;

        return $this;
    }




    /**
     * Gets contra.
     *
     * @return string|null
     */
    public function getContra(): ?string
    {
        return $this->contra;
    }

    /**
    * Sets contra.
    *
    * @param string|null $contra  Недостатки магазина, описанные в отзыве.
    *
    * @return $this
    */
    public function setContra(?string $contra = null): self
    {
        $this->contra = $contra;

        return $this;
    }




    /**
     * Gets comments.
     *
     * @return FeedbackCommentDTO[]|null
     */
    public function getComments(): ?array
    {
        return $this->comments;
    }

    /**
    * Sets comments.
    *
    * @param FeedbackCommentDTO[]|null $comments  Переписка автора отзыва с магазином.
    *
    * @return $this
    */
    public function setComments(?array $comments): self
    {
        $this->comments = $comments;

        return $this;
    }




    /**
     * Gets shop.
     *
     * @return FeedbackShopDTO|null
     */
    public function getShop(): ?FeedbackShopDTO
    {
        return $this->shop;
    }

    /**
    * Sets shop.
    *
    * @param FeedbackShopDTO|null $shop
    *
    * @return $this
    */
    public function setShop(?FeedbackShopDTO $shop = null): self
    {
        $this->shop = $shop;

        return $this;
    }




    /**
     * Gets resolved.
     *
     * @return bool|null
     */
    public function isResolved(): ?bool
    {
        return $this->resolved;
    }

    /**
    * Sets resolved.
    *
    * @param bool|null $resolved  Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.
    *
    * @return $this
    */
    public function setResolved(?bool $resolved = null): self
    {
        $this->resolved = $resolved;

        return $this;
    }




    /**
     * Gets verified.
     *
     * @return bool|null
     */
    public function isVerified(): ?bool
    {
        return $this->verified;
    }

    /**
    * Sets verified.
    *
    * @param bool|null $verified  {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет.
    *
    * @return $this
    */
    public function setVerified(?bool $verified = null): self
    {
        $this->verified = $verified;

        return $this;
    }




    /**
     * Gets recommend.
     *
     * @return bool|null
     */
    public function isRecommend(): ?bool
    {
        return $this->recommend;
    }

    /**
    * Sets recommend.
    *
    * @param bool|null $recommend  Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет.
    *
    * @return $this
    */
    public function setRecommend(?bool $recommend = null): self
    {
        $this->recommend = $recommend;

        return $this;
    }




    /**
     * Gets grades.
     *
     * @return FeedbackGradesDTO|null
     */
    public function getGrades(): ?FeedbackGradesDTO
    {
        return $this->grades;
    }

    /**
    * Sets grades.
    *
    * @param FeedbackGradesDTO|null $grades
    *
    * @return $this
    */
    public function setGrades(?FeedbackGradesDTO $grades = null): self
    {
        $this->grades = $grades;

        return $this;
    }




    /**
     * Gets order.
     *
     * @return FeedbackOrderDTO|null
     */
    public function getOrder(): ?FeedbackOrderDTO
    {
        return $this->order;
    }

    /**
    * Sets order.
    *
    * @param FeedbackOrderDTO|null $order
    *
    * @return $this
    */
    public function setOrder(?FeedbackOrderDTO $order = null): self
    {
        $this->order = $order;

        return $this;
    }



}


