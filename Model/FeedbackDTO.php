<?php
/**
 * FeedbackDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the FeedbackDTO model.
 *
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class FeedbackDTO  implements \JsonSerializable
{
        /**
     * Идентификатор отзыва.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("createdAt")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $createdAt;

    /**
     * Комментарий автора отзыва.
     *
     * @var string|null
     * @SerializedName("text")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $text;

    /**
     * @var FeedbackStateType|null
     * @SerializedName("state")
        * @Accessor(getter="getSerializedState")
        * @Type("string")
     */
    public ?FeedbackStateType $state;

    /**
     * @var FeedbackAuthorDTO|null
     * @SerializedName("author")
     * @Assert\Type("\OpenAPIServer\Model\FeedbackAuthorDTO")
     * @Type("\OpenAPIServer\Model\FeedbackAuthorDTO")
     */
    public ?FeedbackAuthorDTO $author;

    /**
     * Достоинства магазина, описанные в отзыве.
     *
     * @var string|null
     * @SerializedName("pro")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $pro;

    /**
     * Недостатки магазина, описанные в отзыве.
     *
     * @var string|null
     * @SerializedName("contra")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $contra;

    /**
     * Переписка автора отзыва с магазином.
     *
     * @var FeedbackCommentDTO[]
     * @SerializedName("comments")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\FeedbackCommentDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\FeedbackCommentDTO>")
     */
    public array $comments;

    /**
     * @var FeedbackShopDTO|null
     * @SerializedName("shop")
     * @Assert\Type("\OpenAPIServer\Model\FeedbackShopDTO")
     * @Type("\OpenAPIServer\Model\FeedbackShopDTO")
     */
    public ?FeedbackShopDTO $shop;

    /**
     * Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись.
     *
     * @var bool|null
     * @SerializedName("resolved")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $resolved;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.
     *
     * @var bool|null
     * @SerializedName("verified")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $verified;

    /**
     * Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.
     *
     * @var bool|null
     * @SerializedName("recommend")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $recommend;

    /**
     * @var FeedbackGradesDTO|null
     * @SerializedName("grades")
     * @Assert\Type("\OpenAPIServer\Model\FeedbackGradesDTO")
     * @Type("\OpenAPIServer\Model\FeedbackGradesDTO")
     */
    public ?FeedbackGradesDTO $grades;

    /**
     * @var FeedbackOrderDTO|null
     * @SerializedName("order")
     * @Assert\Type("\OpenAPIServer\Model\FeedbackOrderDTO")
     * @Type("\OpenAPIServer\Model\FeedbackOrderDTO")
     */
    public ?FeedbackOrderDTO $order;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param \DateTime|null $createdAt
     * @param string|null $text
     * @param FeedbackStateType|null $state
     * @param FeedbackAuthorDTO|null $author
     * @param string|null $pro
     * @param string|null $contra
     * @param FeedbackCommentDTO[] $comments
     * @param FeedbackShopDTO|null $shop
     * @param bool|null $resolved
     * @param bool|null $verified
     * @param bool|null $recommend
     * @param FeedbackGradesDTO|null $grades
     * @param FeedbackOrderDTO|null $order
     */
    public function __construct(?int $id, ?\DateTime $createdAt, ?string $text, ?FeedbackStateType $state, ?FeedbackAuthorDTO $author, ?string $pro, ?string $contra, array $comments, ?FeedbackShopDTO $shop, ?bool $resolved, ?bool $verified, ?bool $recommend, ?FeedbackGradesDTO $grades, ?FeedbackOrderDTO $order)
    {
        $this->id = $id;
        $this->createdAt = $createdAt;
        $this->text = $text;
        $this->state = $state;
        $this->author = $author;
        $this->pro = $pro;
        $this->contra = $contra;
        $this->comments = $comments;
        $this->shop = $shop;
        $this->resolved = $resolved;
        $this->verified = $verified;
        $this->recommend = $recommend;
        $this->grades = $grades;
        $this->order = $order;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            isset($data['createdAt']) ? new \DateTime($data['createdAt']) : null, 
            $data['text'] ?? null, 
            isset($data['state']) ? FeedbackStateType::tryFrom($data['state']) : null, 
            isset($data['author']) ? FeedbackAuthorDTO::fromArray($data['author']) : null, 
            $data['pro'] ?? null, 
            $data['contra'] ?? null, 
            isset($data['comments']) ? array_map(fn($item) => FeedbackCommentDTO::fromArray($item), $data['comments']) : null, 
            isset($data['shop']) ? FeedbackShopDTO::fromArray($data['shop']) : null, 
            $data['resolved'] ?? null, 
            $data['verified'] ?? null, 
            $data['recommend'] ?? null, 
            isset($data['grades']) ? FeedbackGradesDTO::fromArray($data['grades']) : null, 
            isset($data['order']) ? FeedbackOrderDTO::fromArray($data['order']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'createdAt' => $this->createdAt?->format('c'), 
            'text' => $this->text, 
            'state' => $this->state, 
            'author' => $this->author, 
            'pro' => $this->pro, 
            'contra' => $this->contra, 
            'comments' => $this->comments, 
            'shop' => $this->shop, 
            'resolved' => $this->resolved, 
            'verified' => $this->verified, 
            'recommend' => $this->recommend, 
            'grades' => $this->grades, 
            'order' => $this->order, 
        ];
    }
}


