<?php
/**
 * ReturnDecisionDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ReturnDecisionDTO model.
 *
 * Решения по возвратам.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ReturnDecisionDTO  implements \JsonSerializable
{
        /**
     * Идентификатор товара в возврате.
     *
     * @var int|null
     * @SerializedName("returnItemId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $returnItemId;

    /**
     * Количество единиц товара.
     *
     * @var int|null
     * @SerializedName("count")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $count;

    /**
     * Комментарий.
     *
     * @var string|null
     * @SerializedName("comment")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $comment;

    /**
     * @var ReturnDecisionReasonType|null
     * @SerializedName("reasonType")
        * @Accessor(getter="getSerializedReasonType")
        * @Type("string")
     */
    public ?ReturnDecisionReasonType $reasonType;

    /**
     * @var ReturnDecisionSubreasonType|null
     * @SerializedName("subreasonType")
        * @Accessor(getter="getSerializedSubreasonType")
        * @Type("string")
     */
    public ?ReturnDecisionSubreasonType $subreasonType;

    /**
     * @var ReturnDecisionType|null
     * @SerializedName("decisionType")
        * @Accessor(getter="getSerializedDecisionType")
        * @Type("string")
     */
    public ?ReturnDecisionType $decisionType;

    /**
     * Сумма возврата.
     *
     * @var int|null
     * @SerializedName("refundAmount")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $refundAmount;

    /**
     * Компенсация за обратную доставку.
     *
     * @var int|null
     * @SerializedName("partnerCompensation")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $partnerCompensation;

    /**
     * Список хеш-кодов фотографий товара от покупателя.
     *
     * @var string[]|null
     * @SerializedName("images")
     * @Assert\All({
     *   @Assert\Type("string")
     * })
     * @Type("array<string>")
     */
    public ?array $images;

    /**
     * Constructor
     *
     * @param int|null $returnItemId
     * @param int|null $count
     * @param string|null $comment
     * @param ReturnDecisionReasonType|null $reasonType
     * @param ReturnDecisionSubreasonType|null $subreasonType
     * @param ReturnDecisionType|null $decisionType
     * @param int|null $refundAmount
     * @param int|null $partnerCompensation
     * @param string[]|null $images
     */
    public function __construct(?int $returnItemId, ?int $count, ?string $comment, ?ReturnDecisionReasonType $reasonType, ?ReturnDecisionSubreasonType $subreasonType, ?ReturnDecisionType $decisionType, ?int $refundAmount, ?int $partnerCompensation, ?array $images)
    {
        $this->returnItemId = $returnItemId;
        $this->count = $count;
        $this->comment = $comment;
        $this->reasonType = $reasonType;
        $this->subreasonType = $subreasonType;
        $this->decisionType = $decisionType;
        $this->refundAmount = $refundAmount;
        $this->partnerCompensation = $partnerCompensation;
        $this->images = $images;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['returnItemId'] ?? null, 
            $data['count'] ?? null, 
            $data['comment'] ?? null, 
            isset($data['reasonType']) ? ReturnDecisionReasonType::tryFrom($data['reasonType']) : null, 
            isset($data['subreasonType']) ? ReturnDecisionSubreasonType::tryFrom($data['subreasonType']) : null, 
            isset($data['decisionType']) ? ReturnDecisionType::tryFrom($data['decisionType']) : null, 
            $data['refundAmount'] ?? null, 
            $data['partnerCompensation'] ?? null, 
            $data['images'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'returnItemId' => $this->returnItemId, 
            'count' => $this->count, 
            'comment' => $this->comment, 
            'reasonType' => $this->reasonType, 
            'subreasonType' => $this->subreasonType, 
            'decisionType' => $this->decisionType, 
            'refundAmount' => $this->refundAmount, 
            'partnerCompensation' => $this->partnerCompensation, 
            'images' => $this->images, 
        ];
    }
}


