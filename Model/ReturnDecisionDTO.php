<?php
/**
 * ReturnDecisionDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ReturnDecisionDTO model.
 *
 * Решения по возвратам.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ReturnDecisionDTO 
{
        /**
     * Идентификатор товара в возврате.
     *
     * @var int|null
     * @SerializedName("returnItemId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $returnItemId = null;

    /**
     * Количество единиц товара.
     *
     * @var int|null
     * @SerializedName("count")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $count = null;

    /**
     * Комментарий.
     *
     * @var string|null
     * @SerializedName("comment")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $comment = null;

    /**
     * @var ReturnDecisionReasonType|null
     * @SerializedName("reasonType")
    * @Accessor(getter="getSerializedReasonType", setter="setDeserializedReasonType")
    * @Type("string")
    */
    protected ?ReturnDecisionReasonType $reasonType = null;

    /**
     * @var ReturnDecisionSubreasonType|null
     * @SerializedName("subreasonType")
    * @Accessor(getter="getSerializedSubreasonType", setter="setDeserializedSubreasonType")
    * @Type("string")
    */
    protected ?ReturnDecisionSubreasonType $subreasonType = null;

    /**
     * @var ReturnDecisionType|null
     * @SerializedName("decisionType")
    * @Accessor(getter="getSerializedDecisionType", setter="setDeserializedDecisionType")
    * @Type("string")
    */
    protected ?ReturnDecisionType $decisionType = null;

    /**
     * Сумма возврата.
     *
     * @var int|null
     * @SerializedName("refundAmount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $refundAmount = null;

    /**
     * Компенсация за обратную доставку.
     *
     * @var int|null
     * @SerializedName("partnerCompensation")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $partnerCompensation = null;

    /**
     * Список хеш-кодов фотографий товара от покупателя.
     *
     * @var string[]|null
     * @SerializedName("images")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $images = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->returnItemId = array_key_exists('returnItemId', $data) ? $data['returnItemId'] : $this->returnItemId;
            $this->count = array_key_exists('count', $data) ? $data['count'] : $this->count;
            $this->comment = array_key_exists('comment', $data) ? $data['comment'] : $this->comment;
            $this->reasonType = array_key_exists('reasonType', $data) ? $data['reasonType'] : $this->reasonType;
            $this->subreasonType = array_key_exists('subreasonType', $data) ? $data['subreasonType'] : $this->subreasonType;
            $this->decisionType = array_key_exists('decisionType', $data) ? $data['decisionType'] : $this->decisionType;
            $this->refundAmount = array_key_exists('refundAmount', $data) ? $data['refundAmount'] : $this->refundAmount;
            $this->partnerCompensation = array_key_exists('partnerCompensation', $data) ? $data['partnerCompensation'] : $this->partnerCompensation;
            $this->images = array_key_exists('images', $data) ? $data['images'] : $this->images;
        }
    }

    /**
     * Gets returnItemId.
     *
     * @return int|null
     */
    public function getReturnItemId(): ?int
    {
        return $this->returnItemId;
    }

    /**
    * Sets returnItemId.
    *
    * @param int|null $returnItemId  Идентификатор товара в возврате.
    *
    * @return $this
    */
    public function setReturnItemId(?int $returnItemId = null): self
    {
        $this->returnItemId = $returnItemId;

        return $this;
    }




    /**
     * Gets count.
     *
     * @return int|null
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
    * Sets count.
    *
    * @param int|null $count  Количество единиц товара.
    *
    * @return $this
    */
    public function setCount(?int $count = null): self
    {
        $this->count = $count;

        return $this;
    }




    /**
     * Gets comment.
     *
     * @return string|null
     */
    public function getComment(): ?string
    {
        return $this->comment;
    }

    /**
    * Sets comment.
    *
    * @param string|null $comment  Комментарий.
    *
    * @return $this
    */
    public function setComment(?string $comment = null): self
    {
        $this->comment = $comment;

        return $this;
    }




    /**
     * Gets reasonType.
     *
     * @return ReturnDecisionReasonType|null
     */
    public function getReasonType(): ?ReturnDecisionReasonType
    {
        return $this->reasonType;
    }

    /**
    * Sets reasonType.
    *
    * @param ReturnDecisionReasonType|null $reasonType
    *
    * @return $this
    */
    public function setReasonType(?ReturnDecisionReasonType $reasonType = null): self
    {
        $this->reasonType = $reasonType;

        return $this;
    }

    /**
    * Gets reasonType for serialization.
    *
    * @return string|null
    */
    public function getSerializedReasonType(): string|null
    {
        return $this->reasonType?->value ? (string) $this->reasonType->value : null;
    }

    /**
    * Sets reasonType.
    *
    * @param string|ReturnDecisionReasonType|null $reasonType
    *
    * @return $this
    */
    public function setDeserializedReasonType(string|ReturnDecisionReasonType|null $reasonType = null): self
    {
        if (is_string($reasonType)) {
            $reasonType = ReturnDecisionReasonType::tryFrom($reasonType);
        }

        $this->reasonType = $reasonType;

        return $this;
    }



    /**
     * Gets subreasonType.
     *
     * @return ReturnDecisionSubreasonType|null
     */
    public function getSubreasonType(): ?ReturnDecisionSubreasonType
    {
        return $this->subreasonType;
    }

    /**
    * Sets subreasonType.
    *
    * @param ReturnDecisionSubreasonType|null $subreasonType
    *
    * @return $this
    */
    public function setSubreasonType(?ReturnDecisionSubreasonType $subreasonType = null): self
    {
        $this->subreasonType = $subreasonType;

        return $this;
    }

    /**
    * Gets subreasonType for serialization.
    *
    * @return string|null
    */
    public function getSerializedSubreasonType(): string|null
    {
        return $this->subreasonType?->value ? (string) $this->subreasonType->value : null;
    }

    /**
    * Sets subreasonType.
    *
    * @param string|ReturnDecisionSubreasonType|null $subreasonType
    *
    * @return $this
    */
    public function setDeserializedSubreasonType(string|ReturnDecisionSubreasonType|null $subreasonType = null): self
    {
        if (is_string($subreasonType)) {
            $subreasonType = ReturnDecisionSubreasonType::tryFrom($subreasonType);
        }

        $this->subreasonType = $subreasonType;

        return $this;
    }



    /**
     * Gets decisionType.
     *
     * @return ReturnDecisionType|null
     */
    public function getDecisionType(): ?ReturnDecisionType
    {
        return $this->decisionType;
    }

    /**
    * Sets decisionType.
    *
    * @param ReturnDecisionType|null $decisionType
    *
    * @return $this
    */
    public function setDecisionType(?ReturnDecisionType $decisionType = null): self
    {
        $this->decisionType = $decisionType;

        return $this;
    }

    /**
    * Gets decisionType for serialization.
    *
    * @return string|null
    */
    public function getSerializedDecisionType(): string|null
    {
        return $this->decisionType?->value ? (string) $this->decisionType->value : null;
    }

    /**
    * Sets decisionType.
    *
    * @param string|ReturnDecisionType|null $decisionType
    *
    * @return $this
    */
    public function setDeserializedDecisionType(string|ReturnDecisionType|null $decisionType = null): self
    {
        if (is_string($decisionType)) {
            $decisionType = ReturnDecisionType::tryFrom($decisionType);
        }

        $this->decisionType = $decisionType;

        return $this;
    }



    /**
     * Gets refundAmount.
     *
     * @return int|null
     */
    public function getRefundAmount(): ?int
    {
        return $this->refundAmount;
    }

    /**
    * Sets refundAmount.
    *
    * @param int|null $refundAmount  Сумма возврата.
    *
    * @return $this
    */
    public function setRefundAmount(?int $refundAmount = null): self
    {
        $this->refundAmount = $refundAmount;

        return $this;
    }




    /**
     * Gets partnerCompensation.
     *
     * @return int|null
     */
    public function getPartnerCompensation(): ?int
    {
        return $this->partnerCompensation;
    }

    /**
    * Sets partnerCompensation.
    *
    * @param int|null $partnerCompensation  Компенсация за обратную доставку.
    *
    * @return $this
    */
    public function setPartnerCompensation(?int $partnerCompensation = null): self
    {
        $this->partnerCompensation = $partnerCompensation;

        return $this;
    }




    /**
     * Gets images.
     *
     * @return string[]|null
     */
    public function getImages(): ?array
    {
        return $this->images;
    }

    /**
    * Sets images.
    *
    * @param string[]|null $images  Список хеш-кодов фотографий товара от покупателя.
    *
    * @return $this
    */
    public function setImages(?array $images = null): self
    {
        $this->images = $images;

        return $this;
    }



}


