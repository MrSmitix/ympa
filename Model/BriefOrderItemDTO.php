<?php
/**
 * BriefOrderItemDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the BriefOrderItemDTO model.
 *
 * Информация о маркированном товаре.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class BriefOrderItemDTO  implements \JsonSerializable
{
        /**
     * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * @var OrderVatType|null
     * @SerializedName("vat")
        * @Accessor(getter="getSerializedVat")
        * @Type("string")
     */
    public ?OrderVatType $vat;

    /**
     * Количество единиц товара.
     *
     * @var int|null
     * @SerializedName("count")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $count;

    /**
     * Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка.
     *
     * @var float|null
     * @SerializedName("price")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $price;

    /**
     * Название товара.
     *
     * @var string|null
     * @SerializedName("offerName")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $offerName;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $offerId;

    /**
     * Переданные вами коды маркировки.
     *
     * @var OrderItemInstanceDTO[]|null
     * @SerializedName("instances")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrderItemInstanceDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrderItemInstanceDTO>")
     */
    public ?array $instances;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param OrderVatType|null $vat
     * @param int|null $count
     * @param float|null $price
     * @param string|null $offerName
     * @param string|null $offerId
     * @param OrderItemInstanceDTO[]|null $instances
     */
    public function __construct(?int $id, ?OrderVatType $vat, ?int $count, ?float $price, ?string $offerName, ?string $offerId, ?array $instances)
    {
        $this->id = $id;
        $this->vat = $vat;
        $this->count = $count;
        $this->price = $price;
        $this->offerName = $offerName;
        $this->offerId = $offerId;
        $this->instances = $instances;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            isset($data['vat']) ? OrderVatType::tryFrom($data['vat']) : null, 
            $data['count'] ?? null, 
            $data['price'] ?? null, 
            $data['offerName'] ?? null, 
            $data['offerId'] ?? null, 
            isset($data['instances']) ? array_map(fn($item) => OrderItemInstanceDTO::fromArray($item), $data['instances']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'vat' => $this->vat, 
            'count' => $this->count, 
            'price' => $this->price, 
            'offerName' => $this->offerName, 
            'offerId' => $this->offerId, 
            'instances' => $this->instances, 
        ];
    }
}


