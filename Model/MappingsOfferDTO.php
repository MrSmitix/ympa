<?php
/**
 * MappingsOfferDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the MappingsOfferDTO model.
 *
 * Информация о товарах в каталоге.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class MappingsOfferDTO 
{
        /**
     * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $name = null;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("shopSku")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $shopSku = null;

    /**
     * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.
     *
     * @var string|null
     * @SerializedName("category")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $category = null;

    /**
     * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
     *
     * @var string|null
     * @SerializedName("vendor")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $vendor = null;

    /**
     * Артикул товара от производителя.
     *
     * @var string|null
     * @SerializedName("vendorCode")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $vendorCode = null;

    /**
     * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
     *
     * @var string|null
     * @SerializedName("description")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 6000)]
    protected ?string $description = null;

    /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("id")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 255)]
    #[Assert\Length(min: 1)]
    #[Assert\Regex("/^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$/")]
    protected ?string $id = null;

    /**
     * Идентификатор фида.
     *
     * @var int|null
     * @SerializedName("feedId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $feedId = null;

    /**
     * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
     *
     * @var string[]|null
     * @SerializedName("barcodes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $barcodes = null;

    /**
     * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.
     *
     * @var string[]|null
     * @SerializedName("urls")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $urls = null;

    /**
     * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр &#x60;picture&#x60;.
     *
     * @var string[]|null
     * @SerializedName("pictures")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $pictures = null;

    /**
     * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.
     *
     * @var string|null
     * @SerializedName("manufacturer")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $manufacturer = null;

    /**
     * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.
     *
     * @var string[]|null
     * @SerializedName("manufacturerCountries")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $manufacturerCountries = null;

    /**
     * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.
     *
     * @var int|null
     * @SerializedName("minShipment")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $minShipment = null;

    /**
     * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.
     *
     * @var int|null
     * @SerializedName("transportUnitSize")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $transportUnitSize = null;

    /**
     * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.
     *
     * @var int|null
     * @SerializedName("quantumOfSupply")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $quantumOfSupply = null;

    /**
     * Срок, за который продавец поставляет товары на склад, в днях.
     *
     * @var int|null
     * @SerializedName("deliveryDurationDays")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $deliveryDurationDays = null;

    /**
     * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.
     *
     * @var int|null
     * @SerializedName("boxCount")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $boxCount = null;

    /**
     * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.
     *
     * @var string[]|null
     * @SerializedName("customsCommodityCodes")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("string"),
    ])]
    protected ?array $customsCommodityCodes = null;

    /**
     * @var OfferWeightDimensionsDTO|null
     * @SerializedName("weightDimensions")
     * @Type("OpenAPI\Server\Model\OfferWeightDimensionsDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OfferWeightDimensionsDTO")]
    protected ?OfferWeightDimensionsDTO $weightDimensions = null;

    /**
     * Дни недели, в которые продавец поставляет товары на склад.
     *
     * @var DayOfWeekType[]|null
     * @SerializedName("supplyScheduleDays")
     * @Accessor(getter="getSerializedSupplyScheduleDays", setter="setDeserializedSupplyScheduleDays")
     * @Type("array<string>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\DayOfWeekType"),
    ])]
    protected ?array $supplyScheduleDays = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;shelfLife&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.
     *
     * @var int|null
     * @SerializedName("shelfLifeDays")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $shelfLifeDays = null;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;lifeTime&#x60;. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.
     *
     * @var int|null
     * @SerializedName("lifeTimeDays")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $lifeTimeDays = null;

    /**
     * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.
     *
     * @var int|null
     * @SerializedName("guaranteePeriodDays")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $guaranteePeriodDays = null;

    /**
     * @var OfferProcessingStateDTO|null
     * @SerializedName("processingState")
     * @Type("OpenAPI\Server\Model\OfferProcessingStateDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OfferProcessingStateDTO")]
    protected ?OfferProcessingStateDTO $processingState = null;

    /**
     * @var OfferAvailabilityStatusType|null
     * @SerializedName("availability")
    * @Accessor(getter="getSerializedAvailability", setter="setDeserializedAvailability")
    * @Type("string")
    */
    protected ?OfferAvailabilityStatusType $availability = null;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("shelfLife")
     * @Type("OpenAPI\Server\Model\TimePeriodDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\TimePeriodDTO")]
    protected ?TimePeriodDTO $shelfLife = null;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("lifeTime")
     * @Type("OpenAPI\Server\Model\TimePeriodDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\TimePeriodDTO")]
    protected ?TimePeriodDTO $lifeTime = null;

    /**
     * @var TimePeriodDTO|null
     * @SerializedName("guaranteePeriod")
     * @Type("OpenAPI\Server\Model\TimePeriodDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\TimePeriodDTO")]
    protected ?TimePeriodDTO $guaranteePeriod = null;

    /**
     * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)
     *
     * @var string|null
     * @SerializedName("certificate")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $certificate = null;

    /**
     * Цена на товар в рублях.
     *
     * @var float|null
     * @SerializedName("price")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $price = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->shopSku = array_key_exists('shopSku', $data) ? $data['shopSku'] : $this->shopSku;
            $this->category = array_key_exists('category', $data) ? $data['category'] : $this->category;
            $this->vendor = array_key_exists('vendor', $data) ? $data['vendor'] : $this->vendor;
            $this->vendorCode = array_key_exists('vendorCode', $data) ? $data['vendorCode'] : $this->vendorCode;
            $this->description = array_key_exists('description', $data) ? $data['description'] : $this->description;
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->feedId = array_key_exists('feedId', $data) ? $data['feedId'] : $this->feedId;
            $this->barcodes = array_key_exists('barcodes', $data) ? $data['barcodes'] : $this->barcodes;
            $this->urls = array_key_exists('urls', $data) ? $data['urls'] : $this->urls;
            $this->pictures = array_key_exists('pictures', $data) ? $data['pictures'] : $this->pictures;
            $this->manufacturer = array_key_exists('manufacturer', $data) ? $data['manufacturer'] : $this->manufacturer;
            $this->manufacturerCountries = array_key_exists('manufacturerCountries', $data) ? $data['manufacturerCountries'] : $this->manufacturerCountries;
            $this->minShipment = array_key_exists('minShipment', $data) ? $data['minShipment'] : $this->minShipment;
            $this->transportUnitSize = array_key_exists('transportUnitSize', $data) ? $data['transportUnitSize'] : $this->transportUnitSize;
            $this->quantumOfSupply = array_key_exists('quantumOfSupply', $data) ? $data['quantumOfSupply'] : $this->quantumOfSupply;
            $this->deliveryDurationDays = array_key_exists('deliveryDurationDays', $data) ? $data['deliveryDurationDays'] : $this->deliveryDurationDays;
            $this->boxCount = array_key_exists('boxCount', $data) ? $data['boxCount'] : $this->boxCount;
            $this->customsCommodityCodes = array_key_exists('customsCommodityCodes', $data) ? $data['customsCommodityCodes'] : $this->customsCommodityCodes;
            $this->weightDimensions = array_key_exists('weightDimensions', $data) ? $data['weightDimensions'] : $this->weightDimensions;
            $this->supplyScheduleDays = array_key_exists('supplyScheduleDays', $data) ? $data['supplyScheduleDays'] : $this->supplyScheduleDays;
            $this->shelfLifeDays = array_key_exists('shelfLifeDays', $data) ? $data['shelfLifeDays'] : $this->shelfLifeDays;
            $this->lifeTimeDays = array_key_exists('lifeTimeDays', $data) ? $data['lifeTimeDays'] : $this->lifeTimeDays;
            $this->guaranteePeriodDays = array_key_exists('guaranteePeriodDays', $data) ? $data['guaranteePeriodDays'] : $this->guaranteePeriodDays;
            $this->processingState = array_key_exists('processingState', $data) ? $data['processingState'] : $this->processingState;
            $this->availability = array_key_exists('availability', $data) ? $data['availability'] : $this->availability;
            $this->shelfLife = array_key_exists('shelfLife', $data) ? $data['shelfLife'] : $this->shelfLife;
            $this->lifeTime = array_key_exists('lifeTime', $data) ? $data['lifeTime'] : $this->lifeTime;
            $this->guaranteePeriod = array_key_exists('guaranteePeriod', $data) ? $data['guaranteePeriod'] : $this->guaranteePeriod;
            $this->certificate = array_key_exists('certificate', $data) ? $data['certificate'] : $this->certificate;
            $this->price = array_key_exists('price', $data) ? $data['price'] : $this->price;
        }
    }

    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html)
    *
    * @return $this
    */
    public function setName(?string $name = null): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets shopSku.
     *
     * @return string|null
     */
    public function getShopSku(): ?string
    {
        return $this->shopSku;
    }

    /**
    * Sets shopSku.
    *
    * @param string|null $shopSku  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setShopSku(?string $shopSku = null): self
    {
        $this->shopSku = $shopSku;

        return $this;
    }




    /**
     * Gets category.
     *
     * @return string|null
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
    * Sets category.
    *
    * @param string|null $category  Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.
    *
    * @return $this
    */
    public function setCategory(?string $category = null): self
    {
        $this->category = $category;

        return $this;
    }




    /**
     * Gets vendor.
     *
     * @return string|null
     */
    public function getVendor(): ?string
    {
        return $this->vendor;
    }

    /**
    * Sets vendor.
    *
    * @param string|null $vendor  Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    *
    * @return $this
    */
    public function setVendor(?string $vendor = null): self
    {
        $this->vendor = $vendor;

        return $this;
    }




    /**
     * Gets vendorCode.
     *
     * @return string|null
     */
    public function getVendorCode(): ?string
    {
        return $this->vendorCode;
    }

    /**
    * Sets vendorCode.
    *
    * @param string|null $vendorCode  Артикул товара от производителя.
    *
    * @return $this
    */
    public function setVendorCode(?string $vendorCode = null): self
    {
        $this->vendorCode = $vendorCode;

        return $this;
    }




    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
    * Sets description.
    *
    * @param string|null $description  Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html)
    *
    * @return $this
    */
    public function setDescription(?string $description = null): self
    {
        $this->description = $description;

        return $this;
    }




    /**
     * Gets id.
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param string|null $id  Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
    *
    * @return $this
    */
    public function setId(?string $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets feedId.
     *
     * @return int|null
     */
    public function getFeedId(): ?int
    {
        return $this->feedId;
    }

    /**
    * Sets feedId.
    *
    * @param int|null $feedId  Идентификатор фида.
    *
    * @return $this
    */
    public function setFeedId(?int $feedId = null): self
    {
        $this->feedId = $feedId;

        return $this;
    }




    /**
     * Gets barcodes.
     *
     * @return string[]|null
     */
    public function getBarcodes(): ?array
    {
        return $this->barcodes;
    }

    /**
    * Sets barcodes.
    *
    * @param string[]|null $barcodes  Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)
    *
    * @return $this
    */
    public function setBarcodes(?array $barcodes = null): self
    {
        $this->barcodes = $barcodes;

        return $this;
    }




    /**
     * Gets urls.
     *
     * @return string[]|null
     */
    public function getUrls(): ?array
    {
        return $this->urls;
    }

    /**
    * Sets urls.
    *
    * @param string[]|null $urls  URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url.
    *
    * @return $this
    */
    public function setUrls(?array $urls = null): self
    {
        $this->urls = $urls;

        return $this;
    }




    /**
     * Gets pictures.
     *
     * @return string[]|null
     */
    public function getPictures(): ?array
    {
        return $this->pictures;
    }

    /**
    * Sets pictures.
    *
    * @param string[]|null $pictures  Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`.
    *
    * @return $this
    */
    public function setPictures(?array $pictures = null): self
    {
        $this->pictures = $pictures;

        return $this;
    }




    /**
     * Gets manufacturer.
     *
     * @return string|null
     */
    public function getManufacturer(): ?string
    {
        return $this->manufacturer;
    }

    /**
    * Sets manufacturer.
    *
    * @param string|null $manufacturer  Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр.
    *
    * @return $this
    */
    public function setManufacturer(?string $manufacturer = null): self
    {
        $this->manufacturer = $manufacturer;

        return $this;
    }




    /**
     * Gets manufacturerCountries.
     *
     * @return string[]|null
     */
    public function getManufacturerCountries(): ?array
    {
        return $this->manufacturerCountries;
    }

    /**
    * Sets manufacturerCountries.
    *
    * @param string[]|null $manufacturerCountries  Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран.
    *
    * @return $this
    */
    public function setManufacturerCountries(?array $manufacturerCountries = null): self
    {
        $this->manufacturerCountries = $manufacturerCountries;

        return $this;
    }




    /**
     * Gets minShipment.
     *
     * @return int|null
     */
    public function getMinShipment(): ?int
    {
        return $this->minShipment;
    }

    /**
    * Sets minShipment.
    *
    * @param int|null $minShipment  Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60.
    *
    * @return $this
    */
    public function setMinShipment(?int $minShipment = null): self
    {
        $this->minShipment = $minShipment;

        return $this;
    }




    /**
     * Gets transportUnitSize.
     *
     * @return int|null
     */
    public function getTransportUnitSize(): ?int
    {
        return $this->transportUnitSize;
    }

    /**
    * Sets transportUnitSize.
    *
    * @param int|null $transportUnitSize  Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6.
    *
    * @return $this
    */
    public function setTransportUnitSize(?int $transportUnitSize = null): self
    {
        $this->transportUnitSize = $transportUnitSize;

        return $this;
    }




    /**
     * Gets quantumOfSupply.
     *
     * @return int|null
     */
    public function getQuantumOfSupply(): ?int
    {
        return $this->quantumOfSupply;
    }

    /**
    * Sets quantumOfSupply.
    *
    * @param int|null $quantumOfSupply  Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12.
    *
    * @return $this
    */
    public function setQuantumOfSupply(?int $quantumOfSupply = null): self
    {
        $this->quantumOfSupply = $quantumOfSupply;

        return $this;
    }




    /**
     * Gets deliveryDurationDays.
     *
     * @return int|null
     */
    public function getDeliveryDurationDays(): ?int
    {
        return $this->deliveryDurationDays;
    }

    /**
    * Sets deliveryDurationDays.
    *
    * @param int|null $deliveryDurationDays  Срок, за который продавец поставляет товары на склад, в днях.
    *
    * @return $this
    */
    public function setDeliveryDurationDays(?int $deliveryDurationDays = null): self
    {
        $this->deliveryDurationDays = $deliveryDurationDays;

        return $this;
    }




    /**
     * Gets boxCount.
     *
     * @return int|null
     */
    public function getBoxCount(): ?int
    {
        return $this->boxCount;
    }

    /**
    * Sets boxCount.
    *
    * @param int|null $boxCount  Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр.
    *
    * @return $this
    */
    public function setBoxCount(?int $boxCount = null): self
    {
        $this->boxCount = $boxCount;

        return $this;
    }




    /**
     * Gets customsCommodityCodes.
     *
     * @return string[]|null
     */
    public function getCustomsCommodityCodes(): ?array
    {
        return $this->customsCommodityCodes;
    }

    /**
    * Sets customsCommodityCodes.
    *
    * @param string[]|null $customsCommodityCodes  Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД.
    *
    * @return $this
    */
    public function setCustomsCommodityCodes(?array $customsCommodityCodes = null): self
    {
        $this->customsCommodityCodes = $customsCommodityCodes;

        return $this;
    }




    /**
     * Gets weightDimensions.
     *
     * @return OfferWeightDimensionsDTO|null
     */
    public function getWeightDimensions(): ?OfferWeightDimensionsDTO
    {
        return $this->weightDimensions;
    }

    /**
    * Sets weightDimensions.
    *
    * @param OfferWeightDimensionsDTO|null $weightDimensions
    *
    * @return $this
    */
    public function setWeightDimensions(?OfferWeightDimensionsDTO $weightDimensions = null): self
    {
        $this->weightDimensions = $weightDimensions;

        return $this;
    }




    /**
     * Gets supplyScheduleDays.
     *
     * @return DayOfWeekType[]|null
     */
    public function getSupplyScheduleDays(): ?array
    {
        return $this->supplyScheduleDays;
    }

    /**
    * Sets supplyScheduleDays.
    *
    * @param DayOfWeekType[]|null $supplyScheduleDays  Дни недели, в которые продавец поставляет товары на склад.
    *
    * @return $this
    */
    public function setSupplyScheduleDays(?array $supplyScheduleDays = null): self
    {
        $this->supplyScheduleDays = $supplyScheduleDays;

        return $this;
    }


    /**
    * Gets supplyScheduleDays for serialization.
    *
    * @return array
    */
    public function getSerializedSupplyScheduleDays(): array
    {
        return array_map(
            static fn ($value) => $value?->value ? (string) $value->value : null,
            $this->supplyScheduleDays ?? []
        );
    }

    /**
    * Sets supplyScheduleDays.
    *
    * @param ?array $supplyScheduleDays
    *
    * @return $this
    */
    public function setDeserializedSupplyScheduleDays(?array $supplyScheduleDays = []): self
    {
        $this->supplyScheduleDays = array_map(
            static function ($value) {
                if (is_string($value)) {
                    $value = DayOfWeekType::tryFrom($value);
                }

                return $value;
            },
            $supplyScheduleDays ?? []
        );

        return $this;
    }


    /**
     * Gets shelfLifeDays.
     *
     * @return int|null
     */
    public function getShelfLifeDays(): ?int
    {
        return $this->shelfLifeDays;
    }

    /**
    * Sets shelfLifeDays.
    *
    * @param int|null $shelfLifeDays  {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования.
    *
    * @return $this
    */
    public function setShelfLifeDays(?int $shelfLifeDays = null): self
    {
        $this->shelfLifeDays = $shelfLifeDays;

        return $this;
    }




    /**
     * Gets lifeTimeDays.
     *
     * @return int|null
     */
    public function getLifeTimeDays(): ?int
    {
        return $this->lifeTimeDays;
    }

    /**
    * Sets lifeTimeDays.
    *
    * @param int|null $lifeTimeDays  {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки.
    *
    * @return $this
    */
    public function setLifeTimeDays(?int $lifeTimeDays = null): self
    {
        $this->lifeTimeDays = $lifeTimeDays;

        return $this;
    }




    /**
     * Gets guaranteePeriodDays.
     *
     * @return int|null
     */
    public function getGuaranteePeriodDays(): ?int
    {
        return $this->guaranteePeriodDays;
    }

    /**
    * Sets guaranteePeriodDays.
    *
    * @param int|null $guaranteePeriodDays  Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара.
    *
    * @return $this
    */
    public function setGuaranteePeriodDays(?int $guaranteePeriodDays = null): self
    {
        $this->guaranteePeriodDays = $guaranteePeriodDays;

        return $this;
    }




    /**
     * Gets processingState.
     *
     * @return OfferProcessingStateDTO|null
     */
    public function getProcessingState(): ?OfferProcessingStateDTO
    {
        return $this->processingState;
    }

    /**
    * Sets processingState.
    *
    * @param OfferProcessingStateDTO|null $processingState
    *
    * @return $this
    */
    public function setProcessingState(?OfferProcessingStateDTO $processingState = null): self
    {
        $this->processingState = $processingState;

        return $this;
    }




    /**
     * Gets availability.
     *
     * @return OfferAvailabilityStatusType|null
     */
    public function getAvailability(): ?OfferAvailabilityStatusType
    {
        return $this->availability;
    }

    /**
    * Sets availability.
    *
    * @param OfferAvailabilityStatusType|null $availability
    *
    * @return $this
    */
    public function setAvailability(?OfferAvailabilityStatusType $availability = null): self
    {
        $this->availability = $availability;

        return $this;
    }

    /**
    * Gets availability for serialization.
    *
    * @return string|null
    */
    public function getSerializedAvailability(): string|null
    {
        return $this->availability?->value ? (string) $this->availability->value : null;
    }

    /**
    * Sets availability.
    *
    * @param string|OfferAvailabilityStatusType|null $availability
    *
    * @return $this
    */
    public function setDeserializedAvailability(string|OfferAvailabilityStatusType|null $availability = null): self
    {
        if (is_string($availability)) {
            $availability = OfferAvailabilityStatusType::tryFrom($availability);
        }

        $this->availability = $availability;

        return $this;
    }



    /**
     * Gets shelfLife.
     *
     * @return TimePeriodDTO|null
     */
    public function getShelfLife(): ?TimePeriodDTO
    {
        return $this->shelfLife;
    }

    /**
    * Sets shelfLife.
    *
    * @param TimePeriodDTO|null $shelfLife
    *
    * @return $this
    */
    public function setShelfLife(?TimePeriodDTO $shelfLife = null): self
    {
        $this->shelfLife = $shelfLife;

        return $this;
    }




    /**
     * Gets lifeTime.
     *
     * @return TimePeriodDTO|null
     */
    public function getLifeTime(): ?TimePeriodDTO
    {
        return $this->lifeTime;
    }

    /**
    * Sets lifeTime.
    *
    * @param TimePeriodDTO|null $lifeTime
    *
    * @return $this
    */
    public function setLifeTime(?TimePeriodDTO $lifeTime = null): self
    {
        $this->lifeTime = $lifeTime;

        return $this;
    }




    /**
     * Gets guaranteePeriod.
     *
     * @return TimePeriodDTO|null
     */
    public function getGuaranteePeriod(): ?TimePeriodDTO
    {
        return $this->guaranteePeriod;
    }

    /**
    * Sets guaranteePeriod.
    *
    * @param TimePeriodDTO|null $guaranteePeriod
    *
    * @return $this
    */
    public function setGuaranteePeriod(?TimePeriodDTO $guaranteePeriod = null): self
    {
        $this->guaranteePeriod = $guaranteePeriod;

        return $this;
    }




    /**
     * Gets certificate.
     *
     * @return string|null
     */
    public function getCertificate(): ?string
    {
        return $this->certificate;
    }

    /**
    * Sets certificate.
    *
    * @param string|null $certificate  Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html)
    *
    * @return $this
    */
    public function setCertificate(?string $certificate = null): self
    {
        $this->certificate = $certificate;

        return $this;
    }




    /**
     * Gets price.
     *
     * @return float|null
     */
    public function getPrice(): ?float
    {
        return $this->price;
    }

    /**
    * Sets price.
    *
    * @param float|null $price  Цена на товар в рублях.
    *
    * @return $this
    */
    public function setPrice(?float $price = null): self
    {
        $this->price = $price;

        return $this;
    }



}


