<?php
/**
 * OfferContentDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OfferContentDTO model.
 *
 * Товар с указанными характеристиками.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OfferContentDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string
     * @SerializedName("offerId")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public string $offerId;

    /**
     * Идентификатор категории на Маркете. Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).
     *
     * @var int
     * @SerializedName("categoryId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $categoryId;

    /**
     * Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300.
     *
     * @var ParameterValueDTO[]
     * @SerializedName("parameterValues")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ParameterValueDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ParameterValueDTO>")
     * @Assert\Count(
     *   max = 300
     * )
     * @Assert\Count(
     *   min = 1
     * )
     */
    public array $parameterValues;

    /**
     * Constructor
     *
     * @param string $offerId
     * @param int $categoryId
     * @param ParameterValueDTO[] $parameterValues
     */
    public function __construct(string $offerId, int $categoryId, array $parameterValues)
    {
        $this->offerId = $offerId;
        $this->categoryId = $categoryId;
        $this->parameterValues = $parameterValues;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            $data['categoryId'] ?? null, 
            isset($data['parameterValues']) ? array_map(fn($item) => ParameterValueDTO::fromArray($item), $data['parameterValues']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'categoryId' => $this->categoryId, 
            'parameterValues' => $this->parameterValues, 
        ];
    }
}


