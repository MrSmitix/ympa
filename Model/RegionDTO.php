<?php
/**
 * RegionDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the RegionDTO model.
 *
 * Регион доставки.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class RegionDTO 
{
        /**
     * Идентификатор региона.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Название региона.
     *
     * @var string|null
     * @SerializedName("name")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    protected ?string $name = null;

    /**
     * @var RegionType|null
     * @SerializedName("type")
    * @Accessor(getter="getSerializedType", setter="setDeserializedType")
    * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    protected ?RegionType $type = null;

    /**
     * @var RegionDTO|null
     * @SerializedName("parent")
     * @Type("OpenAPI\Server\Model\RegionDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\RegionDTO")]
    protected ?RegionDTO $parent = null;

    /**
     * Дочерние регионы.
     *
     * @var RegionDTO[]|null
     * @SerializedName("children")
     * @Type("array<OpenAPI\Server\Model\RegionDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\RegionDTO"),
    ])]
    protected ?array $children = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->name = array_key_exists('name', $data) ? $data['name'] : $this->name;
            $this->type = array_key_exists('type', $data) ? $data['type'] : $this->type;
            $this->parent = array_key_exists('parent', $data) ? $data['parent'] : $this->parent;
            $this->children = array_key_exists('children', $data) ? $data['children'] : $this->children;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор региона.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets name.
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
    * Sets name.
    *
    * @param string|null $name  Название региона.
    *
    * @return $this
    */
    public function setName(?string $name): self
    {
        $this->name = $name;

        return $this;
    }




    /**
     * Gets type.
     *
     * @return RegionType|null
     */
    public function getType(): ?RegionType
    {
        return $this->type;
    }

    /**
    * Sets type.
    *
    * @param RegionType|null $type
    *
    * @return $this
    */
    public function setType(?RegionType $type): self
    {
        $this->type = $type;

        return $this;
    }

    /**
    * Gets type for serialization.
    *
    * @return string|null
    */
    public function getSerializedType(): string|null
    {
        return $this->type?->value ? (string) $this->type->value : null;
    }

    /**
    * Sets type.
    *
    * @param string|RegionType|null $type
    *
    * @return $this
    */
    public function setDeserializedType(string|RegionType|null $type): self
    {
        if (is_string($type)) {
            $type = RegionType::tryFrom($type);
        }

        $this->type = $type;

        return $this;
    }



    /**
     * Gets parent.
     *
     * @return RegionDTO|null
     */
    public function getParent(): ?RegionDTO
    {
        return $this->parent;
    }

    /**
    * Sets parent.
    *
    * @param RegionDTO|null $parent
    *
    * @return $this
    */
    public function setParent(?RegionDTO $parent = null): self
    {
        $this->parent = $parent;

        return $this;
    }




    /**
     * Gets children.
     *
     * @return RegionDTO[]|null
     */
    public function getChildren(): ?array
    {
        return $this->children;
    }

    /**
    * Sets children.
    *
    * @param RegionDTO[]|null $children  Дочерние регионы.
    *
    * @return $this
    */
    public function setChildren(?array $children = null): self
    {
        $this->children = $children;

        return $this;
    }



}


