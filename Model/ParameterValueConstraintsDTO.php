<?php
/**
 * ParameterValueConstraintsDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ParameterValueConstraintsDTO model.
 *
 * Ограничения на значения характеристик.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ParameterValueConstraintsDTO 
{
        /**
     * Минимальное число.
     *
     * @var float|null
     * @SerializedName("minValue")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $minValue = null;

    /**
     * Максимальное число.
     *
     * @var float|null
     * @SerializedName("maxValue")
     * @Type("float")
    */
    #[Assert\Type("float")]
    protected ?float $maxValue = null;

    /**
     * Максимальная длина текста.
     *
     * @var int|null
     * @SerializedName("maxLength")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $maxLength = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->minValue = array_key_exists('minValue', $data) ? $data['minValue'] : $this->minValue;
            $this->maxValue = array_key_exists('maxValue', $data) ? $data['maxValue'] : $this->maxValue;
            $this->maxLength = array_key_exists('maxLength', $data) ? $data['maxLength'] : $this->maxLength;
        }
    }

    /**
     * Gets minValue.
     *
     * @return float|null
     */
    public function getMinValue(): ?float
    {
        return $this->minValue;
    }

    /**
    * Sets minValue.
    *
    * @param float|null $minValue  Минимальное число.
    *
    * @return $this
    */
    public function setMinValue(?float $minValue = null): self
    {
        $this->minValue = $minValue;

        return $this;
    }




    /**
     * Gets maxValue.
     *
     * @return float|null
     */
    public function getMaxValue(): ?float
    {
        return $this->maxValue;
    }

    /**
    * Sets maxValue.
    *
    * @param float|null $maxValue  Максимальное число.
    *
    * @return $this
    */
    public function setMaxValue(?float $maxValue = null): self
    {
        $this->maxValue = $maxValue;

        return $this;
    }




    /**
     * Gets maxLength.
     *
     * @return int|null
     */
    public function getMaxLength(): ?int
    {
        return $this->maxLength;
    }

    /**
    * Sets maxLength.
    *
    * @param int|null $maxLength  Максимальная длина текста.
    *
    * @return $this
    */
    public function setMaxLength(?int $maxLength = null): self
    {
        $this->maxLength = $maxLength;

        return $this;
    }



}


