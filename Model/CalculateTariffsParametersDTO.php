<?php
/**
 * CalculateTariffsParametersDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the CalculateTariffsParametersDTO model.
 *
 * Параметры для расчета стоимости услуг.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class CalculateTariffsParametersDTO  implements \JsonSerializable
{
        /**
     * Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр &#x60;campaignId&#x60;, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.
     *
     * @var int|null
     * @SerializedName("campaignId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $campaignId;

    /**
     * @var SellingProgramType|null
     * @SerializedName("sellingProgram")
        * @Accessor(getter="getSerializedSellingProgram")
        * @Type("string")
     */
    public ?SellingProgramType $sellingProgram;

    /**
     * @var PaymentFrequencyType|null
     * @SerializedName("frequency")
        * @Accessor(getter="getSerializedFrequency")
        * @Type("string")
     */
    public ?PaymentFrequencyType $frequency;

    /**
     * Constructor
     *
     * @param int|null $campaignId
     * @param SellingProgramType|null $sellingProgram
     * @param PaymentFrequencyType|null $frequency
     */
    public function __construct(?int $campaignId, ?SellingProgramType $sellingProgram, ?PaymentFrequencyType $frequency)
    {
        $this->campaignId = $campaignId;
        $this->sellingProgram = $sellingProgram;
        $this->frequency = $frequency;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['campaignId'] ?? null, 
            isset($data['sellingProgram']) ? SellingProgramType::tryFrom($data['sellingProgram']) : null, 
            isset($data['frequency']) ? PaymentFrequencyType::tryFrom($data['frequency']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'campaignId' => $this->campaignId, 
            'sellingProgram' => $this->sellingProgram, 
            'frequency' => $this->frequency, 
        ];
    }
}


