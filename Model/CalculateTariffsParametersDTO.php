<?php
/**
 * CalculateTariffsParametersDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CalculateTariffsParametersDTO model.
 *
 * Параметры для расчета стоимости услуг.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CalculateTariffsParametersDTO 
{
        /**
     * Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр &#x60;campaignId&#x60;, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.
     *
     * @var int|null
     * @SerializedName("campaignId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $campaignId = null;

    /**
     * @var SellingProgramType|null
     * @SerializedName("sellingProgram")
    * @Accessor(getter="getSerializedSellingProgram", setter="setDeserializedSellingProgram")
    * @Type("string")
    */
    protected ?SellingProgramType $sellingProgram = null;

    /**
     * @var PaymentFrequencyType|null
     * @SerializedName("frequency")
    * @Accessor(getter="getSerializedFrequency", setter="setDeserializedFrequency")
    * @Type("string")
    */
    protected ?PaymentFrequencyType $frequency = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->campaignId = array_key_exists('campaignId', $data) ? $data['campaignId'] : $this->campaignId;
            $this->sellingProgram = array_key_exists('sellingProgram', $data) ? $data['sellingProgram'] : $this->sellingProgram;
            $this->frequency = array_key_exists('frequency', $data) ? $data['frequency'] : $this->frequency;
        }
    }

    /**
     * Gets campaignId.
     *
     * @return int|null
     */
    public function getCampaignId(): ?int
    {
        return $this->campaignId;
    }

    /**
    * Sets campaignId.
    *
    * @param int|null $campaignId  Идентификатор кампании. У пользователя, который выполняет запрос, должен быть доступ к этой кампании.  Используйте параметр `campaignId`, если уже завершили подключение магазина на Маркете. Иначе вернется пустой список.  Обязательный параметр, если не указан параметр `sellingProgram`. Совместное использование параметров приведет к ошибке.
    *
    * @return $this
    */
    public function setCampaignId(?int $campaignId = null): self
    {
        $this->campaignId = $campaignId;

        return $this;
    }




    /**
     * Gets sellingProgram.
     *
     * @return SellingProgramType|null
     */
    public function getSellingProgram(): ?SellingProgramType
    {
        return $this->sellingProgram;
    }

    /**
    * Sets sellingProgram.
    *
    * @param SellingProgramType|null $sellingProgram
    *
    * @return $this
    */
    public function setSellingProgram(?SellingProgramType $sellingProgram = null): self
    {
        $this->sellingProgram = $sellingProgram;

        return $this;
    }

    /**
    * Gets sellingProgram for serialization.
    *
    * @return string|null
    */
    public function getSerializedSellingProgram(): string|null
    {
        return $this->sellingProgram?->value ? (string) $this->sellingProgram->value : null;
    }

    /**
    * Sets sellingProgram.
    *
    * @param string|SellingProgramType|null $sellingProgram
    *
    * @return $this
    */
    public function setDeserializedSellingProgram(string|SellingProgramType|null $sellingProgram = null): self
    {
        if (is_string($sellingProgram)) {
            $sellingProgram = SellingProgramType::tryFrom($sellingProgram);
        }

        $this->sellingProgram = $sellingProgram;

        return $this;
    }



    /**
     * Gets frequency.
     *
     * @return PaymentFrequencyType|null
     */
    public function getFrequency(): ?PaymentFrequencyType
    {
        return $this->frequency;
    }

    /**
    * Sets frequency.
    *
    * @param PaymentFrequencyType|null $frequency
    *
    * @return $this
    */
    public function setFrequency(?PaymentFrequencyType $frequency = null): self
    {
        $this->frequency = $frequency;

        return $this;
    }

    /**
    * Gets frequency for serialization.
    *
    * @return string|null
    */
    public function getSerializedFrequency(): string|null
    {
        return $this->frequency?->value ? (string) $this->frequency->value : null;
    }

    /**
    * Sets frequency.
    *
    * @param string|PaymentFrequencyType|null $frequency
    *
    * @return $this
    */
    public function setDeserializedFrequency(string|PaymentFrequencyType|null $frequency = null): self
    {
        if (is_string($frequency)) {
            $frequency = PaymentFrequencyType::tryFrom($frequency);
        }

        $this->frequency = $frequency;

        return $this;
    }


}


