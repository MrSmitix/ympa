<?php
/**
 * GetPromoAssortmentInfoDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the GetPromoAssortmentInfoDTO model.
 *
 * Информация о товарах в акции.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class GetPromoAssortmentInfoDTO  implements \JsonSerializable
{
        /**
     * Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index).
     *
     * @var int
     * @SerializedName("activeOffers")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $activeOffers;

    /**
     * Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций.
     *
     * @var int|null
     * @SerializedName("potentialOffers")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $potentialOffers;

    /**
     * Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций.
     *
     * @var bool|null
     * @SerializedName("processing")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $processing;

    /**
     * Constructor
     *
     * @param int $activeOffers
     * @param int|null $potentialOffers
     * @param bool|null $processing
     */
    public function __construct(int $activeOffers, ?int $potentialOffers, ?bool $processing)
    {
        $this->activeOffers = $activeOffers;
        $this->potentialOffers = $potentialOffers;
        $this->processing = $processing;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['activeOffers'] ?? null, 
            $data['potentialOffers'] ?? null, 
            $data['processing'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'activeOffers' => $this->activeOffers, 
            'potentialOffers' => $this->potentialOffers, 
            'processing' => $this->processing, 
        ];
    }
}


