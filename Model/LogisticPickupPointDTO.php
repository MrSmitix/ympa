<?php
/**
 * LogisticPickupPointDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the LogisticPickupPointDTO model.
 *
 * Описание пункта вывоза для возврата.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class LogisticPickupPointDTO  implements \JsonSerializable
{
        /**
     * Идентификатор пункта вывоза.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Название пункта вывоза.
     *
     * @var string|null
     * @SerializedName("name")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $name;

    /**
     * @var PickupAddressDTO|null
     * @SerializedName("address")
     * @Assert\Type("\OpenAPIServer\Model\PickupAddressDTO")
     * @Type("\OpenAPIServer\Model\PickupAddressDTO")
     */
    public ?PickupAddressDTO $address;

    /**
     * Дополнительные инструкции к вывозу.
     *
     * @var string|null
     * @SerializedName("instruction")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $instruction;

    /**
     * @var LogisticPointType|null
     * @SerializedName("type")
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public ?LogisticPointType $type;

    /**
     * Идентификатор логистического партнера, к которому относится логистическая точка.
     *
     * @var int|null
     * @SerializedName("logisticPartnerId")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $logisticPartnerId;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param string|null $name
     * @param PickupAddressDTO|null $address
     * @param string|null $instruction
     * @param LogisticPointType|null $type
     * @param int|null $logisticPartnerId
     */
    public function __construct(?int $id, ?string $name, ?PickupAddressDTO $address, ?string $instruction, ?LogisticPointType $type, ?int $logisticPartnerId)
    {
        $this->id = $id;
        $this->name = $name;
        $this->address = $address;
        $this->instruction = $instruction;
        $this->type = $type;
        $this->logisticPartnerId = $logisticPartnerId;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['name'] ?? null, 
            isset($data['address']) ? PickupAddressDTO::fromArray($data['address']) : null, 
            $data['instruction'] ?? null, 
            isset($data['type']) ? LogisticPointType::tryFrom($data['type']) : null, 
            $data['logisticPartnerId'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'name' => $this->name, 
            'address' => $this->address, 
            'instruction' => $this->instruction, 
            'type' => $this->type, 
            'logisticPartnerId' => $this->logisticPartnerId, 
        ];
    }
}


