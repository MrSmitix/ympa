<?php
/**
 * WarehouseAddressDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the WarehouseAddressDTO model.
 *
 * Адрес склада.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class WarehouseAddressDTO 
{
        /**
     * Город.
     *
     * @var string|null
     * @SerializedName("city")
     * @Type("string")
    */
    #[Assert\NotNull]
    #[Assert\Type("string")]
    #[Assert\Length(max: 200)]
    protected ?string $city = null;

    /**
     * Улица.
     *
     * @var string|null
     * @SerializedName("street")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 512)]
    protected ?string $street = null;

    /**
     * Номер дома.
     *
     * @var string|null
     * @SerializedName("number")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 256)]
    protected ?string $number = null;

    /**
     * Номер строения.
     *
     * @var string|null
     * @SerializedName("building")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 16)]
    protected ?string $building = null;

    /**
     * Номер корпуса.
     *
     * @var string|null
     * @SerializedName("block")
     * @Type("string")
    */
    #[Assert\Type("string")]
    #[Assert\Length(max: 16)]
    protected ?string $block = null;

    /**
     * @var GpsDTO|null
     * @SerializedName("gps")
     * @Type("OpenAPI\Server\Model\GpsDTO")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\Type("OpenAPI\Server\Model\GpsDTO")]
    protected ?GpsDTO $gps = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->city = array_key_exists('city', $data) ? $data['city'] : $this->city;
            $this->street = array_key_exists('street', $data) ? $data['street'] : $this->street;
            $this->number = array_key_exists('number', $data) ? $data['number'] : $this->number;
            $this->building = array_key_exists('building', $data) ? $data['building'] : $this->building;
            $this->block = array_key_exists('block', $data) ? $data['block'] : $this->block;
            $this->gps = array_key_exists('gps', $data) ? $data['gps'] : $this->gps;
        }
    }

    /**
     * Gets city.
     *
     * @return string|null
     */
    public function getCity(): ?string
    {
        return $this->city;
    }

    /**
    * Sets city.
    *
    * @param string|null $city  Город.
    *
    * @return $this
    */
    public function setCity(?string $city): self
    {
        $this->city = $city;

        return $this;
    }




    /**
     * Gets street.
     *
     * @return string|null
     */
    public function getStreet(): ?string
    {
        return $this->street;
    }

    /**
    * Sets street.
    *
    * @param string|null $street  Улица.
    *
    * @return $this
    */
    public function setStreet(?string $street = null): self
    {
        $this->street = $street;

        return $this;
    }




    /**
     * Gets number.
     *
     * @return string|null
     */
    public function getNumber(): ?string
    {
        return $this->number;
    }

    /**
    * Sets number.
    *
    * @param string|null $number  Номер дома.
    *
    * @return $this
    */
    public function setNumber(?string $number = null): self
    {
        $this->number = $number;

        return $this;
    }




    /**
     * Gets building.
     *
     * @return string|null
     */
    public function getBuilding(): ?string
    {
        return $this->building;
    }

    /**
    * Sets building.
    *
    * @param string|null $building  Номер строения.
    *
    * @return $this
    */
    public function setBuilding(?string $building = null): self
    {
        $this->building = $building;

        return $this;
    }




    /**
     * Gets block.
     *
     * @return string|null
     */
    public function getBlock(): ?string
    {
        return $this->block;
    }

    /**
    * Sets block.
    *
    * @param string|null $block  Номер корпуса.
    *
    * @return $this
    */
    public function setBlock(?string $block = null): self
    {
        $this->block = $block;

        return $this;
    }




    /**
     * Gets gps.
     *
     * @return GpsDTO|null
     */
    public function getGps(): ?GpsDTO
    {
        return $this->gps;
    }

    /**
    * Sets gps.
    *
    * @param GpsDTO|null $gps
    *
    * @return $this
    */
    public function setGps(?GpsDTO $gps): self
    {
        $this->gps = $gps;

        return $this;
    }



}


