<?php
/**
 * WarehouseAddressDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the WarehouseAddressDTO model.
 *
 * Адрес склада.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class WarehouseAddressDTO  implements \JsonSerializable
{
        /**
     * Город.
     *
     * @var string
     * @SerializedName("city")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 200
     * )
     */
    public string $city;

    /**
     * Улица.
     *
     * @var string|null
     * @SerializedName("street")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 512
     * )
     */
    public ?string $street;

    /**
     * Номер дома.
     *
     * @var string|null
     * @SerializedName("number")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 256
     * )
     */
    public ?string $number;

    /**
     * Номер строения.
     *
     * @var string|null
     * @SerializedName("building")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 16
     * )
     */
    public ?string $building;

    /**
     * Номер корпуса.
     *
     * @var string|null
     * @SerializedName("block")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 16
     * )
     */
    public ?string $block;

    /**
     * @var GpsDTO
     * @SerializedName("gps")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\Type("\OpenAPIServer\Model\GpsDTO")
     * @Type("\OpenAPIServer\Model\GpsDTO")
     */
    public GpsDTO $gps;

    /**
     * Constructor
     *
     * @param string $city
     * @param string|null $street
     * @param string|null $number
     * @param string|null $building
     * @param string|null $block
     * @param GpsDTO $gps
     */
    public function __construct(string $city, ?string $street, ?string $number, ?string $building, ?string $block, GpsDTO $gps)
    {
        $this->city = $city;
        $this->street = $street;
        $this->number = $number;
        $this->building = $building;
        $this->block = $block;
        $this->gps = $gps;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['city'] ?? null, 
            $data['street'] ?? null, 
            $data['number'] ?? null, 
            $data['building'] ?? null, 
            $data['block'] ?? null, 
            isset($data['gps']) ? GpsDTO::fromArray($data['gps']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'city' => $this->city, 
            'street' => $this->street, 
            'number' => $this->number, 
            'building' => $this->building, 
            'block' => $this->block, 
            'gps' => $this->gps, 
        ];
    }
}


