<?php
/**
 * OrderItemPromoDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrderItemPromoDTO model.
 *
 * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrderItemPromoDTO  implements \JsonSerializable
{
        /**
     * @var OrderPromoType
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public OrderPromoType $type;

    /**
     * Размер пользовательской скидки в валюте покупателя.
     *
     * @var float|null
     * @SerializedName("discount")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $discount;

    /**
     * Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа.
     *
     * @var float|null
     * @SerializedName("subsidy")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $subsidy;

    /**
     * Идентификатор акции поставщика.
     *
     * @var string|null
     * @SerializedName("shopPromoId")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $shopPromoId;

    /**
     * Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр &#x60;type&#x3D;MARKET_DEAL&#x60;.
     *
     * @var string|null
     * @SerializedName("marketPromoId")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $marketPromoId;

    /**
     * Constructor
     *
     * @param OrderPromoType $type
     * @param float|null $discount
     * @param float|null $subsidy
     * @param string|null $shopPromoId
     * @param string|null $marketPromoId
     */
    public function __construct(OrderPromoType $type, ?float $discount, ?float $subsidy, ?string $shopPromoId, ?string $marketPromoId)
    {
        $this->type = $type;
        $this->discount = $discount;
        $this->subsidy = $subsidy;
        $this->shopPromoId = $shopPromoId;
        $this->marketPromoId = $marketPromoId;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            isset($data['type']) ? OrderPromoType::tryFrom($data['type']) : null, 
            $data['discount'] ?? null, 
            $data['subsidy'] ?? null, 
            $data['shopPromoId'] ?? null, 
            $data['marketPromoId'] ?? null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'type' => $this->type, 
            'discount' => $this->discount, 
            'subsidy' => $this->subsidy, 
            'shopPromoId' => $this->shopPromoId, 
            'marketPromoId' => $this->marketPromoId, 
        ];
    }
}


