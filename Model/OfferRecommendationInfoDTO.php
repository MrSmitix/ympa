<?php
/**
 * OfferRecommendationInfoDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OfferRecommendationInfoDTO model.
 *
 * Рекомендации, касающиеся цены на товар.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OfferRecommendationInfoDTO  implements \JsonSerializable
{
        /**
     * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
     *
     * @var string|null
     * @SerializedName("offerId")
     * @Assert\Type("string")
     * @Type("string")
     * @Assert\Length(
     *   max = 255
     * )
     * @Assert\Length(
     *   min = 1
     * )
     * @Assert\Regex("//^[^\\x00-\\x08\\x0A-\\x1f\\x7f]{1,255}$//")
     */
    public ?string $offerId;

    /**
     * @var BasePriceDTO|null
     * @SerializedName("recommendedCofinancePrice")
     * @Assert\Type("\OpenAPIServer\Model\BasePriceDTO")
     * @Type("\OpenAPIServer\Model\BasePriceDTO")
     */
    public ?BasePriceDTO $recommendedCofinancePrice;

    /**
     * @var PriceCompetitivenessThresholdsDTO|null
     * @SerializedName("competitivenessThresholds")
     * @Assert\Type("\OpenAPIServer\Model\PriceCompetitivenessThresholdsDTO")
     * @Type("\OpenAPIServer\Model\PriceCompetitivenessThresholdsDTO")
     */
    public ?PriceCompetitivenessThresholdsDTO $competitivenessThresholds;

    /**
     * Constructor
     *
     * @param string|null $offerId
     * @param BasePriceDTO|null $recommendedCofinancePrice
     * @param PriceCompetitivenessThresholdsDTO|null $competitivenessThresholds
     */
    public function __construct(?string $offerId, ?BasePriceDTO $recommendedCofinancePrice, ?PriceCompetitivenessThresholdsDTO $competitivenessThresholds)
    {
        $this->offerId = $offerId;
        $this->recommendedCofinancePrice = $recommendedCofinancePrice;
        $this->competitivenessThresholds = $competitivenessThresholds;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['offerId'] ?? null, 
            isset($data['recommendedCofinancePrice']) ? BasePriceDTO::fromArray($data['recommendedCofinancePrice']) : null, 
            isset($data['competitivenessThresholds']) ? PriceCompetitivenessThresholdsDTO::fromArray($data['competitivenessThresholds']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'offerId' => $this->offerId, 
            'recommendedCofinancePrice' => $this->recommendedCofinancePrice, 
            'competitivenessThresholds' => $this->competitivenessThresholds, 
        ];
    }
}


