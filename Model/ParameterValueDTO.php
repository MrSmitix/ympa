<?php
/**
 * ParameterValueDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ParameterValueDTO model.
 *
 * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — &#x60;ENUM&#x60;. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле &#x60;multivalue&#x60; имеет значение &#x60;true&#x60;.  Для этого в &#x60;parameterValues&#x60; передавайте каждое значение отдельно — несколько объектов с параметрами &#x60;parameterId&#x60;, &#x60;valueId&#x60; и &#x60;value&#x60;. Параметр &#x60;parameterId&#x60; должен быть одинаковым.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ParameterValueDTO 
{
        /**
     * Идентификатор характеристики.
     *
     * @var int|null
     * @SerializedName("parameterId")
     * @Type("int")
    */
    #[Assert\NotNull]
    #[Assert\Type("int")]
    protected ?int $parameterId = null;

    /**
     * Идентификатор единицы измерения. Если вы не передали параметр &#x60;unitId&#x60;, используется единица измерения по умолчанию.
     *
     * @var int|null
     * @SerializedName("unitId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $unitId = null;

    /**
     * Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа &#x60;ENUM&#x60;.
     *
     * @var int|null
     * @SerializedName("valueId")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $valueId = null;

    /**
     * Значение.
     *
     * @var string|null
     * @SerializedName("value")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $value = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->parameterId = array_key_exists('parameterId', $data) ? $data['parameterId'] : $this->parameterId;
            $this->unitId = array_key_exists('unitId', $data) ? $data['unitId'] : $this->unitId;
            $this->valueId = array_key_exists('valueId', $data) ? $data['valueId'] : $this->valueId;
            $this->value = array_key_exists('value', $data) ? $data['value'] : $this->value;
        }
    }

    /**
     * Gets parameterId.
     *
     * @return int|null
     */
    public function getParameterId(): ?int
    {
        return $this->parameterId;
    }

    /**
    * Sets parameterId.
    *
    * @param int|null $parameterId  Идентификатор характеристики.
    *
    * @return $this
    */
    public function setParameterId(?int $parameterId): self
    {
        $this->parameterId = $parameterId;

        return $this;
    }




    /**
     * Gets unitId.
     *
     * @return int|null
     */
    public function getUnitId(): ?int
    {
        return $this->unitId;
    }

    /**
    * Sets unitId.
    *
    * @param int|null $unitId  Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.
    *
    * @return $this
    */
    public function setUnitId(?int $unitId = null): self
    {
        $this->unitId = $unitId;

        return $this;
    }




    /**
     * Gets valueId.
     *
     * @return int|null
     */
    public function getValueId(): ?int
    {
        return $this->valueId;
    }

    /**
    * Sets valueId.
    *
    * @param int|null $valueId  Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`.
    *
    * @return $this
    */
    public function setValueId(?int $valueId = null): self
    {
        $this->valueId = $valueId;

        return $this;
    }




    /**
     * Gets value.
     *
     * @return string|null
     */
    public function getValue(): ?string
    {
        return $this->value;
    }

    /**
    * Sets value.
    *
    * @param string|null $value  Значение.
    *
    * @return $this
    */
    public function setValue(?string $value = null): self
    {
        $this->value = $value;

        return $this;
    }



}


