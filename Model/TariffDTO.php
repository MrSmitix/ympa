<?php
/**
 * TariffDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the TariffDTO model.
 *
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class TariffDTO  implements \JsonSerializable
{
        /**
     * @var TariffType
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedType")
        * @Type("string")
     */
    public TariffType $type;

    /**
     * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах.
     *
     * @var float|null
     * @SerializedName("percent")
     * @Assert\Type("float")
     * @Type("float")
     */
    public ?float $percent;

    /**
     * Значение тарифа в рублях.
     *
     * @var float
     * @SerializedName("amount")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    public float $amount;

    /**
     * Параметры расчета тарифа.
     *
     * @var TariffParameterDTO[]
     * @SerializedName("parameters")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\TariffParameterDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\TariffParameterDTO>")
     */
    public array $parameters;

    /**
     * Constructor
     *
     * @param TariffType $type
     * @param float|null $percent
     * @param float $amount
     * @param TariffParameterDTO[] $parameters
     */
    public function __construct(TariffType $type, ?float $percent, float $amount, array $parameters)
    {
        $this->type = $type;
        $this->percent = $percent;
        $this->amount = $amount;
        $this->parameters = $parameters;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            isset($data['type']) ? TariffType::tryFrom($data['type']) : null, 
            $data['percent'] ?? null, 
            $data['amount'] ?? null, 
            isset($data['parameters']) ? array_map(fn($item) => TariffParameterDTO::fromArray($item), $data['parameters']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'type' => $this->type, 
            'percent' => $this->percent, 
            'amount' => $this->amount, 
            'parameters' => $this->parameters, 
        ];
    }
}


