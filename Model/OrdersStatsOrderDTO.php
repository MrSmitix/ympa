<?php
/**
 * OrdersStatsOrderDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the OrdersStatsOrderDTO model.
 *
 * Информация о заказе.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class OrdersStatsOrderDTO  implements \JsonSerializable
{
        /**
     * Идентификатор заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    public ?int $id;

    /**
     * Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("creationDate")
     * @Assert\Type("\Date")
     * @Type("DateTime<'Y-m-d'>")
     */
    public ?\DateTime $creationDate;

    /**
     * Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва).
     *
     * @var \DateTime|null
     * @SerializedName("statusUpdateDate")
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public ?\DateTime $statusUpdateDate;

    /**
     * @var OrderStatsStatusType|null
     * @SerializedName("status")
        * @Accessor(getter="getSerializedStatus")
        * @Type("string")
     */
    public ?OrderStatsStatusType $status;

    /**
     * Идентификатор заказа в информационной системе магазина.
     *
     * @var string|null
     * @SerializedName("partnerOrderId")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $partnerOrderId;

    /**
     * @var OrdersStatsOrderPaymentType|null
     * @SerializedName("paymentType")
        * @Accessor(getter="getSerializedPaymentType")
        * @Type("string")
     */
    public ?OrdersStatsOrderPaymentType $paymentType;

    /**
     * Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
     *
     * @var bool|null
     * @SerializedName("fake")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    public ?bool $fake;

    /**
     * @var OrdersStatsDeliveryRegionDTO|null
     * @SerializedName("deliveryRegion")
     * @Assert\Type("\OpenAPIServer\Model\OrdersStatsDeliveryRegionDTO")
     * @Type("\OpenAPIServer\Model\OrdersStatsDeliveryRegionDTO")
     */
    public ?OrdersStatsDeliveryRegionDTO $deliveryRegion;

    /**
     * Список товаров в заказе после возможных изменений.
     *
     * @var OrdersStatsItemDTO[]
     * @SerializedName("items")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrdersStatsItemDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrdersStatsItemDTO>")
     */
    public array $items;

    /**
     * Список товаров в заказе до изменений.
     *
     * @var OrdersStatsItemDTO[]|null
     * @SerializedName("initialItems")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrdersStatsItemDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrdersStatsItemDTO>")
     */
    public ?array $initialItems;

    /**
     * Информация о денежных переводах по заказу.
     *
     * @var OrdersStatsPaymentDTO[]
     * @SerializedName("payments")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrdersStatsPaymentDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrdersStatsPaymentDTO>")
     */
    public array $payments;

    /**
     * Информация о комиссиях за заказ.
     *
     * @var OrdersStatsCommissionDTO[]
     * @SerializedName("commissions")
     * @Assert\NotNull()
     * @Assert\Valid()
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\OrdersStatsCommissionDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\OrdersStatsCommissionDTO>")
     */
    public array $commissions;

    /**
     * Constructor
     *
     * @param int|null $id
     * @param \DateTime|null $creationDate
     * @param \DateTime|null $statusUpdateDate
     * @param OrderStatsStatusType|null $status
     * @param string|null $partnerOrderId
     * @param OrdersStatsOrderPaymentType|null $paymentType
     * @param bool|null $fake
     * @param OrdersStatsDeliveryRegionDTO|null $deliveryRegion
     * @param OrdersStatsItemDTO[] $items
     * @param OrdersStatsItemDTO[]|null $initialItems
     * @param OrdersStatsPaymentDTO[] $payments
     * @param OrdersStatsCommissionDTO[] $commissions
     */
    public function __construct(?int $id, ?\DateTime $creationDate, ?\DateTime $statusUpdateDate, ?OrderStatsStatusType $status, ?string $partnerOrderId, ?OrdersStatsOrderPaymentType $paymentType, ?bool $fake, ?OrdersStatsDeliveryRegionDTO $deliveryRegion, array $items, ?array $initialItems, array $payments, array $commissions)
    {
        $this->id = $id;
        $this->creationDate = $creationDate;
        $this->statusUpdateDate = $statusUpdateDate;
        $this->status = $status;
        $this->partnerOrderId = $partnerOrderId;
        $this->paymentType = $paymentType;
        $this->fake = $fake;
        $this->deliveryRegion = $deliveryRegion;
        $this->items = $items;
        $this->initialItems = $initialItems;
        $this->payments = $payments;
        $this->commissions = $commissions;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['id'] ?? null, 
            $data['creationDate'] ?? null, 
            isset($data['statusUpdateDate']) ? new \DateTime($data['statusUpdateDate']) : null, 
            isset($data['status']) ? OrderStatsStatusType::tryFrom($data['status']) : null, 
            $data['partnerOrderId'] ?? null, 
            isset($data['paymentType']) ? OrdersStatsOrderPaymentType::tryFrom($data['paymentType']) : null, 
            $data['fake'] ?? null, 
            isset($data['deliveryRegion']) ? OrdersStatsDeliveryRegionDTO::fromArray($data['deliveryRegion']) : null, 
            isset($data['items']) ? array_map(fn($item) => OrdersStatsItemDTO::fromArray($item), $data['items']) : null, 
            isset($data['initialItems']) ? array_map(fn($item) => OrdersStatsItemDTO::fromArray($item), $data['initialItems']) : null, 
            isset($data['payments']) ? array_map(fn($item) => OrdersStatsPaymentDTO::fromArray($item), $data['payments']) : null, 
            isset($data['commissions']) ? array_map(fn($item) => OrdersStatsCommissionDTO::fromArray($item), $data['commissions']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'id' => $this->id, 
            'creationDate' => $this->creationDate, 
            'statusUpdateDate' => $this->statusUpdateDate?->format('c'), 
            'status' => $this->status, 
            'partnerOrderId' => $this->partnerOrderId, 
            'paymentType' => $this->paymentType, 
            'fake' => $this->fake, 
            'deliveryRegion' => $this->deliveryRegion, 
            'items' => $this->items, 
            'initialItems' => $this->initialItems, 
            'payments' => $this->payments, 
            'commissions' => $this->commissions, 
        ];
    }
}


