<?php
/**
 * OrdersStatsOrderDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OrdersStatsOrderDTO model.
 *
 * Информация о заказе.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class OrdersStatsOrderDTO 
{
        /**
     * Идентификатор заказа.
     *
     * @var int|null
     * @SerializedName("id")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $id = null;

    /**
     * Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;.
     *
     * @var \DateTime|null
     * @SerializedName("creationDate")
     * @Type("DateTime<'Y-m-d'>")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $creationDate = null;

    /**
     * Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва).
     *
     * @var \DateTime|null
     * @SerializedName("statusUpdateDate")
     * @Type("DateTime")
    */
    #[Assert\Type("\DateTime")]
    protected ?\DateTime $statusUpdateDate = null;

    /**
     * @var OrderStatsStatusType|null
     * @SerializedName("status")
    * @Accessor(getter="getSerializedStatus", setter="setDeserializedStatus")
    * @Type("string")
    */
    protected ?OrderStatsStatusType $status = null;

    /**
     * Идентификатор заказа в информационной системе магазина.
     *
     * @var string|null
     * @SerializedName("partnerOrderId")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $partnerOrderId = null;

    /**
     * @var OrdersStatsOrderPaymentType|null
     * @SerializedName("paymentType")
    * @Accessor(getter="getSerializedPaymentType", setter="setDeserializedPaymentType")
    * @Type("string")
    */
    protected ?OrdersStatsOrderPaymentType $paymentType = null;

    /**
     * Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
     *
     * @var bool|null
     * @SerializedName("fake")
     * @Type("bool")
    */
    #[Assert\Type("bool")]
    protected ?bool $fake = null;

    /**
     * @var OrdersStatsDeliveryRegionDTO|null
     * @SerializedName("deliveryRegion")
     * @Type("OpenAPI\Server\Model\OrdersStatsDeliveryRegionDTO")
    */
    #[Assert\Type("OpenAPI\Server\Model\OrdersStatsDeliveryRegionDTO")]
    protected ?OrdersStatsDeliveryRegionDTO $deliveryRegion = null;

    /**
     * Список товаров в заказе после возможных изменений.
     *
     * @var OrdersStatsItemDTO[]|null
     * @SerializedName("items")
     * @Type("array<OpenAPI\Server\Model\OrdersStatsItemDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrdersStatsItemDTO"),
    ])]
    protected ?array $items = null;

    /**
     * Список товаров в заказе до изменений.
     *
     * @var OrdersStatsItemDTO[]|null
     * @SerializedName("initialItems")
     * @Type("array<OpenAPI\Server\Model\OrdersStatsItemDTO>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrdersStatsItemDTO"),
    ])]
    protected ?array $initialItems = null;

    /**
     * Информация о денежных переводах по заказу.
     *
     * @var OrdersStatsPaymentDTO[]|null
     * @SerializedName("payments")
     * @Type("array<OpenAPI\Server\Model\OrdersStatsPaymentDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrdersStatsPaymentDTO"),
    ])]
    protected ?array $payments = null;

    /**
     * Информация о комиссиях за заказ.
     *
     * @var OrdersStatsCommissionDTO[]|null
     * @SerializedName("commissions")
     * @Type("array<OpenAPI\Server\Model\OrdersStatsCommissionDTO>")
    */
    #[Assert\NotNull]
    #[Assert\Valid]
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\OrdersStatsCommissionDTO"),
    ])]
    protected ?array $commissions = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->creationDate = array_key_exists('creationDate', $data) ? $data['creationDate'] : $this->creationDate;
            $this->statusUpdateDate = array_key_exists('statusUpdateDate', $data) ? $data['statusUpdateDate'] : $this->statusUpdateDate;
            $this->status = array_key_exists('status', $data) ? $data['status'] : $this->status;
            $this->partnerOrderId = array_key_exists('partnerOrderId', $data) ? $data['partnerOrderId'] : $this->partnerOrderId;
            $this->paymentType = array_key_exists('paymentType', $data) ? $data['paymentType'] : $this->paymentType;
            $this->fake = array_key_exists('fake', $data) ? $data['fake'] : $this->fake;
            $this->deliveryRegion = array_key_exists('deliveryRegion', $data) ? $data['deliveryRegion'] : $this->deliveryRegion;
            $this->items = array_key_exists('items', $data) ? $data['items'] : $this->items;
            $this->initialItems = array_key_exists('initialItems', $data) ? $data['initialItems'] : $this->initialItems;
            $this->payments = array_key_exists('payments', $data) ? $data['payments'] : $this->payments;
            $this->commissions = array_key_exists('commissions', $data) ? $data['commissions'] : $this->commissions;
        }
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
    * Sets id.
    *
    * @param int|null $id  Идентификатор заказа.
    *
    * @return $this
    */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }




    /**
     * Gets creationDate.
     *
     * @return \DateTime|null
     */
    public function getCreationDate(): ?\DateTime
    {
        return $this->creationDate;
    }

    /**
    * Sets creationDate.
    *
    * @param \DateTime|null $creationDate  Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`.
    *
    * @return $this
    */
    public function setCreationDate(?\DateTime $creationDate = null): self
    {
        $this->creationDate = $creationDate;

        return $this;
    }




    /**
     * Gets statusUpdateDate.
     *
     * @return \DateTime|null
     */
    public function getStatusUpdateDate(): ?\DateTime
    {
        return $this->statusUpdateDate;
    }

    /**
    * Sets statusUpdateDate.
    *
    * @param \DateTime|null $statusUpdateDate  Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва).
    *
    * @return $this
    */
    public function setStatusUpdateDate(?\DateTime $statusUpdateDate = null): self
    {
        $this->statusUpdateDate = $statusUpdateDate;

        return $this;
    }




    /**
     * Gets status.
     *
     * @return OrderStatsStatusType|null
     */
    public function getStatus(): ?OrderStatsStatusType
    {
        return $this->status;
    }

    /**
    * Sets status.
    *
    * @param OrderStatsStatusType|null $status
    *
    * @return $this
    */
    public function setStatus(?OrderStatsStatusType $status = null): self
    {
        $this->status = $status;

        return $this;
    }

    /**
    * Gets status for serialization.
    *
    * @return string|null
    */
    public function getSerializedStatus(): string|null
    {
        return $this->status?->value ? (string) $this->status->value : null;
    }

    /**
    * Sets status.
    *
    * @param string|OrderStatsStatusType|null $status
    *
    * @return $this
    */
    public function setDeserializedStatus(string|OrderStatsStatusType|null $status = null): self
    {
        if (is_string($status)) {
            $status = OrderStatsStatusType::tryFrom($status);
        }

        $this->status = $status;

        return $this;
    }



    /**
     * Gets partnerOrderId.
     *
     * @return string|null
     */
    public function getPartnerOrderId(): ?string
    {
        return $this->partnerOrderId;
    }

    /**
    * Sets partnerOrderId.
    *
    * @param string|null $partnerOrderId  Идентификатор заказа в информационной системе магазина.
    *
    * @return $this
    */
    public function setPartnerOrderId(?string $partnerOrderId = null): self
    {
        $this->partnerOrderId = $partnerOrderId;

        return $this;
    }




    /**
     * Gets paymentType.
     *
     * @return OrdersStatsOrderPaymentType|null
     */
    public function getPaymentType(): ?OrdersStatsOrderPaymentType
    {
        return $this->paymentType;
    }

    /**
    * Sets paymentType.
    *
    * @param OrdersStatsOrderPaymentType|null $paymentType
    *
    * @return $this
    */
    public function setPaymentType(?OrdersStatsOrderPaymentType $paymentType = null): self
    {
        $this->paymentType = $paymentType;

        return $this;
    }

    /**
    * Gets paymentType for serialization.
    *
    * @return string|null
    */
    public function getSerializedPaymentType(): string|null
    {
        return $this->paymentType?->value ? (string) $this->paymentType->value : null;
    }

    /**
    * Sets paymentType.
    *
    * @param string|OrdersStatsOrderPaymentType|null $paymentType
    *
    * @return $this
    */
    public function setDeserializedPaymentType(string|OrdersStatsOrderPaymentType|null $paymentType = null): self
    {
        if (is_string($paymentType)) {
            $paymentType = OrdersStatsOrderPaymentType::tryFrom($paymentType);
        }

        $this->paymentType = $paymentType;

        return $this;
    }



    /**
     * Gets fake.
     *
     * @return bool|null
     */
    public function isFake(): ?bool
    {
        return $this->fake;
    }

    /**
    * Sets fake.
    *
    * @param bool|null $fake  Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета.
    *
    * @return $this
    */
    public function setFake(?bool $fake = null): self
    {
        $this->fake = $fake;

        return $this;
    }




    /**
     * Gets deliveryRegion.
     *
     * @return OrdersStatsDeliveryRegionDTO|null
     */
    public function getDeliveryRegion(): ?OrdersStatsDeliveryRegionDTO
    {
        return $this->deliveryRegion;
    }

    /**
    * Sets deliveryRegion.
    *
    * @param OrdersStatsDeliveryRegionDTO|null $deliveryRegion
    *
    * @return $this
    */
    public function setDeliveryRegion(?OrdersStatsDeliveryRegionDTO $deliveryRegion = null): self
    {
        $this->deliveryRegion = $deliveryRegion;

        return $this;
    }




    /**
     * Gets items.
     *
     * @return OrdersStatsItemDTO[]|null
     */
    public function getItems(): ?array
    {
        return $this->items;
    }

    /**
    * Sets items.
    *
    * @param OrdersStatsItemDTO[]|null $items  Список товаров в заказе после возможных изменений.
    *
    * @return $this
    */
    public function setItems(?array $items): self
    {
        $this->items = $items;

        return $this;
    }




    /**
     * Gets initialItems.
     *
     * @return OrdersStatsItemDTO[]|null
     */
    public function getInitialItems(): ?array
    {
        return $this->initialItems;
    }

    /**
    * Sets initialItems.
    *
    * @param OrdersStatsItemDTO[]|null $initialItems  Список товаров в заказе до изменений.
    *
    * @return $this
    */
    public function setInitialItems(?array $initialItems = null): self
    {
        $this->initialItems = $initialItems;

        return $this;
    }




    /**
     * Gets payments.
     *
     * @return OrdersStatsPaymentDTO[]|null
     */
    public function getPayments(): ?array
    {
        return $this->payments;
    }

    /**
    * Sets payments.
    *
    * @param OrdersStatsPaymentDTO[]|null $payments  Информация о денежных переводах по заказу.
    *
    * @return $this
    */
    public function setPayments(?array $payments): self
    {
        $this->payments = $payments;

        return $this;
    }




    /**
     * Gets commissions.
     *
     * @return OrdersStatsCommissionDTO[]|null
     */
    public function getCommissions(): ?array
    {
        return $this->commissions;
    }

    /**
    * Sets commissions.
    *
    * @param OrdersStatsCommissionDTO[]|null $commissions  Информация о комиссиях за заказ.
    *
    * @return $this
    */
    public function setCommissions(?array $commissions): self
    {
        $this->commissions = $commissions;

        return $this;
    }



}


