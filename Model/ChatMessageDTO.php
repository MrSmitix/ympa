<?php
/**
 * ChatMessageDTO
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPIServer\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Партнерский API Маркета
 *
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов.
 *
 * The version of the OpenAPI document: LATEST
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */


namespace OpenAPIServer\Model;

/**
 * Class representing the ChatMessageDTO model.
 *
 * Информация о сообщениях.
 *
 * @package OpenAPIServer\Model
 * @author  OpenAPI Generator team
 */

class ChatMessageDTO  implements \JsonSerializable
{
        /**
     * Идентификатор сообщения.
     *
     * @var int
     * @SerializedName("messageId")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    public int $messageId;

    /**
     * Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;.
     *
     * @var \DateTime
     * @SerializedName("createdAt")
     * @Assert\NotNull()
     * @Assert\Type("\DateTime"))
     * @Type("DateTime")
     */
    public \DateTime $createdAt;

    /**
     * @var ChatMessageSenderType
     * @SerializedName("sender")
     * @Assert\NotNull()
     * @Assert\Valid()
        * @Accessor(getter="getSerializedSender")
        * @Type("string")
     */
    public ChatMessageSenderType $sender;

    /**
     * Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;.
     *
     * @var string|null
     * @SerializedName("message")
     * @Assert\Type("string")
     * @Type("string")
     */
    public ?string $message;

    /**
     * Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;.
     *
     * @var ChatMessagePayloadDTO[]|null
     * @SerializedName("payload")
     * @Assert\All({
     *   @Assert\Type("\OpenAPIServer\Model\ChatMessagePayloadDTO")
     * })
     * @Type("array<\OpenAPIServer\Model\ChatMessagePayloadDTO>")
     */
    public ?array $payload;

    /**
     * Constructor
     *
     * @param int $messageId
     * @param \DateTime $createdAt
     * @param ChatMessageSenderType $sender
     * @param string|null $message
     * @param ChatMessagePayloadDTO[]|null $payload
     */
    public function __construct(int $messageId, \DateTime $createdAt, ChatMessageSenderType $sender, ?string $message, ?array $payload)
    {
        $this->messageId = $messageId;
        $this->createdAt = $createdAt;
        $this->sender = $sender;
        $this->message = $message;
        $this->payload = $payload;
    }

    public static function fromArray(array $data): self
    {
        return new self(
            $data['messageId'] ?? null, 
            isset($data['createdAt']) ? new \DateTime($data['createdAt']) : null, 
            isset($data['sender']) ? ChatMessageSenderType::tryFrom($data['sender']) : null, 
            $data['message'] ?? null, 
            isset($data['payload']) ? array_map(fn($item) => ChatMessagePayloadDTO::fromArray($item), $data['payload']) : null, 
        );
    }

    public function jsonSerialize(): mixed {
        return [
            'messageId' => $this->messageId, 
            'createdAt' => $this->createdAt?->format('c'), 
            'sender' => $this->sender, 
            'message' => $this->message, 
            'payload' => $this->payload, 
        ];
    }
}


