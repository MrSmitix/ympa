/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReturnDTO::ReturnDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_OrderId = 0L;
    m_OrderIdIsSet = false;
    m_CreationDate = utility::datetime();
    m_CreationDateIsSet = false;
    m_UpdateDate = utility::datetime();
    m_UpdateDateIsSet = false;
    m_RefundStatusIsSet = false;
    m_LogisticPickupPointIsSet = false;
    m_ShipmentRecipientTypeIsSet = false;
    m_ShipmentStatusIsSet = false;
    m_RefundAmount = 0L;
    m_RefundAmountIsSet = false;
    m_ItemsIsSet = false;
    m_ReturnTypeIsSet = false;
    m_FastReturn = false;
    m_FastReturnIsSet = false;
}

ReturnDTO::~ReturnDTO()
{
}

void ReturnDTO::validate()
{
    // TODO: implement validation
}

web::json::value ReturnDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("orderId"))] = ModelBase::toJson(m_OrderId);
    }
    if(m_CreationDateIsSet)
    {
        val[utility::conversions::to_string_t(U("creationDate"))] = ModelBase::toJson(m_CreationDate);
    }
    if(m_UpdateDateIsSet)
    {
        val[utility::conversions::to_string_t(U("updateDate"))] = ModelBase::toJson(m_UpdateDate);
    }
    if(m_RefundStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("refundStatus"))] = ModelBase::toJson(m_RefundStatus);
    }
    if(m_LogisticPickupPointIsSet)
    {
        val[utility::conversions::to_string_t(U("logisticPickupPoint"))] = ModelBase::toJson(m_LogisticPickupPoint);
    }
    if(m_ShipmentRecipientTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentRecipientType"))] = ModelBase::toJson(m_ShipmentRecipientType);
    }
    if(m_ShipmentStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentStatus"))] = ModelBase::toJson(m_ShipmentStatus);
    }
    if(m_RefundAmountIsSet)
    {
        val[utility::conversions::to_string_t(U("refundAmount"))] = ModelBase::toJson(m_RefundAmount);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }
    if(m_ReturnTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("returnType"))] = ModelBase::toJson(m_ReturnType);
    }
    if(m_FastReturnIsSet)
    {
        val[utility::conversions::to_string_t(U("fastReturn"))] = ModelBase::toJson(m_FastReturn);
    }

    return val;
}

bool ReturnDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creationDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creationDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationDate);
            setCreationDate(refVal_setCreationDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdateDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateDate);
            setUpdateDate(refVal_setUpdateDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("refundStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("refundStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RefundStatusType> refVal_setRefundStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRefundStatus);
            setRefundStatus(refVal_setRefundStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logisticPickupPoint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logisticPickupPoint")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LogisticPickupPointDTO> refVal_setLogisticPickupPoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogisticPickupPoint);
            setLogisticPickupPoint(refVal_setLogisticPickupPoint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentRecipientType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentRecipientType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RecipientType> refVal_setShipmentRecipientType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentRecipientType);
            setShipmentRecipientType(refVal_setShipmentRecipientType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnShipmentStatusType> refVal_setShipmentStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentStatus);
            setShipmentStatus(refVal_setShipmentStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("refundAmount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("refundAmount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRefundAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRefundAmount);
            setRefundAmount(refVal_setRefundAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReturnItemDTO>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("returnType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("returnType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnType> refVal_setReturnType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReturnType);
            setReturnType(refVal_setReturnType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fastReturn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fastReturn")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFastReturn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFastReturn);
            setFastReturn(refVal_setFastReturn);
        }
    }
    return ok;
}

void ReturnDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderId")), m_OrderId));
    }
    if(m_CreationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creationDate")), m_CreationDate));
    }
    if(m_UpdateDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateDate")), m_UpdateDate));
    }
    if(m_RefundStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("refundStatus")), m_RefundStatus));
    }
    if(m_LogisticPickupPointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logisticPickupPoint")), m_LogisticPickupPoint));
    }
    if(m_ShipmentRecipientTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentRecipientType")), m_ShipmentRecipientType));
    }
    if(m_ShipmentStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentStatus")), m_ShipmentStatus));
    }
    if(m_RefundAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("refundAmount")), m_RefundAmount));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
    if(m_ReturnTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("returnType")), m_ReturnType));
    }
    if(m_FastReturnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fastReturn")), m_FastReturn));
    }
}

bool ReturnDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderId"))))
    {
        int64_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderId"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creationDate"))))
    {
        utility::datetime refVal_setCreationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creationDate"))), refVal_setCreationDate );
        setCreationDate(refVal_setCreationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateDate"))))
    {
        utility::datetime refVal_setUpdateDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateDate"))), refVal_setUpdateDate );
        setUpdateDate(refVal_setUpdateDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("refundStatus"))))
    {
        std::shared_ptr<RefundStatusType> refVal_setRefundStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("refundStatus"))), refVal_setRefundStatus );
        setRefundStatus(refVal_setRefundStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logisticPickupPoint"))))
    {
        std::shared_ptr<LogisticPickupPointDTO> refVal_setLogisticPickupPoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logisticPickupPoint"))), refVal_setLogisticPickupPoint );
        setLogisticPickupPoint(refVal_setLogisticPickupPoint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentRecipientType"))))
    {
        std::shared_ptr<RecipientType> refVal_setShipmentRecipientType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentRecipientType"))), refVal_setShipmentRecipientType );
        setShipmentRecipientType(refVal_setShipmentRecipientType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentStatus"))))
    {
        std::shared_ptr<ReturnShipmentStatusType> refVal_setShipmentStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentStatus"))), refVal_setShipmentStatus );
        setShipmentStatus(refVal_setShipmentStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("refundAmount"))))
    {
        int64_t refVal_setRefundAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("refundAmount"))), refVal_setRefundAmount );
        setRefundAmount(refVal_setRefundAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<ReturnItemDTO>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("returnType"))))
    {
        std::shared_ptr<ReturnType> refVal_setReturnType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("returnType"))), refVal_setReturnType );
        setReturnType(refVal_setReturnType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fastReturn"))))
    {
        bool refVal_setFastReturn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fastReturn"))), refVal_setFastReturn );
        setFastReturn(refVal_setFastReturn);
    }
    return ok;
}

int64_t ReturnDTO::getId() const
{
    return m_Id;
}

void ReturnDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ReturnDTO::idIsSet() const
{
    return m_IdIsSet;
}

void ReturnDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t ReturnDTO::getOrderId() const
{
    return m_OrderId;
}

void ReturnDTO::setOrderId(int64_t value)
{
    m_OrderId = value;
    m_OrderIdIsSet = true;
}

bool ReturnDTO::orderIdIsSet() const
{
    return m_OrderIdIsSet;
}

void ReturnDTO::unsetOrderId()
{
    m_OrderIdIsSet = false;
}
utility::datetime ReturnDTO::getCreationDate() const
{
    return m_CreationDate;
}

void ReturnDTO::setCreationDate(const utility::datetime& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}

bool ReturnDTO::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}

void ReturnDTO::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
utility::datetime ReturnDTO::getUpdateDate() const
{
    return m_UpdateDate;
}

void ReturnDTO::setUpdateDate(const utility::datetime& value)
{
    m_UpdateDate = value;
    m_UpdateDateIsSet = true;
}

bool ReturnDTO::updateDateIsSet() const
{
    return m_UpdateDateIsSet;
}

void ReturnDTO::unsetUpdateDate()
{
    m_UpdateDateIsSet = false;
}
std::shared_ptr<RefundStatusType> ReturnDTO::getRefundStatus() const
{
    return m_RefundStatus;
}

void ReturnDTO::setRefundStatus(const std::shared_ptr<RefundStatusType>& value)
{
    m_RefundStatus = value;
    m_RefundStatusIsSet = true;
}

bool ReturnDTO::refundStatusIsSet() const
{
    return m_RefundStatusIsSet;
}

void ReturnDTO::unsetRefundStatus()
{
    m_RefundStatusIsSet = false;
}
std::shared_ptr<LogisticPickupPointDTO> ReturnDTO::getLogisticPickupPoint() const
{
    return m_LogisticPickupPoint;
}

void ReturnDTO::setLogisticPickupPoint(const std::shared_ptr<LogisticPickupPointDTO>& value)
{
    m_LogisticPickupPoint = value;
    m_LogisticPickupPointIsSet = true;
}

bool ReturnDTO::logisticPickupPointIsSet() const
{
    return m_LogisticPickupPointIsSet;
}

void ReturnDTO::unsetLogisticPickupPoint()
{
    m_LogisticPickupPointIsSet = false;
}
std::shared_ptr<RecipientType> ReturnDTO::getShipmentRecipientType() const
{
    return m_ShipmentRecipientType;
}

void ReturnDTO::setShipmentRecipientType(const std::shared_ptr<RecipientType>& value)
{
    m_ShipmentRecipientType = value;
    m_ShipmentRecipientTypeIsSet = true;
}

bool ReturnDTO::shipmentRecipientTypeIsSet() const
{
    return m_ShipmentRecipientTypeIsSet;
}

void ReturnDTO::unsetShipmentRecipientType()
{
    m_ShipmentRecipientTypeIsSet = false;
}
std::shared_ptr<ReturnShipmentStatusType> ReturnDTO::getShipmentStatus() const
{
    return m_ShipmentStatus;
}

void ReturnDTO::setShipmentStatus(const std::shared_ptr<ReturnShipmentStatusType>& value)
{
    m_ShipmentStatus = value;
    m_ShipmentStatusIsSet = true;
}

bool ReturnDTO::shipmentStatusIsSet() const
{
    return m_ShipmentStatusIsSet;
}

void ReturnDTO::unsetShipmentStatus()
{
    m_ShipmentStatusIsSet = false;
}
int64_t ReturnDTO::getRefundAmount() const
{
    return m_RefundAmount;
}

void ReturnDTO::setRefundAmount(int64_t value)
{
    m_RefundAmount = value;
    m_RefundAmountIsSet = true;
}

bool ReturnDTO::refundAmountIsSet() const
{
    return m_RefundAmountIsSet;
}

void ReturnDTO::unsetRefundAmount()
{
    m_RefundAmountIsSet = false;
}
std::vector<std::shared_ptr<ReturnItemDTO>>& ReturnDTO::getItems()
{
    return m_Items;
}

void ReturnDTO::setItems(const std::vector<std::shared_ptr<ReturnItemDTO>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool ReturnDTO::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void ReturnDTO::unsetItems()
{
    m_ItemsIsSet = false;
}
std::shared_ptr<ReturnType> ReturnDTO::getReturnType() const
{
    return m_ReturnType;
}

void ReturnDTO::setReturnType(const std::shared_ptr<ReturnType>& value)
{
    m_ReturnType = value;
    m_ReturnTypeIsSet = true;
}

bool ReturnDTO::returnTypeIsSet() const
{
    return m_ReturnTypeIsSet;
}

void ReturnDTO::unsetReturnType()
{
    m_ReturnTypeIsSet = false;
}
bool ReturnDTO::isFastReturn() const
{
    return m_FastReturn;
}

void ReturnDTO::setFastReturn(bool value)
{
    m_FastReturn = value;
    m_FastReturnIsSet = true;
}

bool ReturnDTO::fastReturnIsSet() const
{
    return m_FastReturnIsSet;
}

void ReturnDTO::unsetFastReturn()
{
    m_FastReturnIsSet = false;
}
}
}
}
}


