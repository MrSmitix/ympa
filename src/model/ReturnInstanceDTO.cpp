/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnInstanceDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReturnInstanceDTO::ReturnInstanceDTO()
{
    m_StockTypeIsSet = false;
    m_StatusIsSet = false;
    m_Cis = utility::conversions::to_string_t("");
    m_CisIsSet = false;
    m_Imei = utility::conversions::to_string_t("");
    m_ImeiIsSet = false;
}

ReturnInstanceDTO::~ReturnInstanceDTO()
{
}

void ReturnInstanceDTO::validate()
{
    // TODO: implement validation
}

web::json::value ReturnInstanceDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StockTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("stockType"))] = ModelBase::toJson(m_StockType);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_CisIsSet)
    {
        val[utility::conversions::to_string_t(U("cis"))] = ModelBase::toJson(m_Cis);
    }
    if(m_ImeiIsSet)
    {
        val[utility::conversions::to_string_t(U("imei"))] = ModelBase::toJson(m_Imei);
    }

    return val;
}

bool ReturnInstanceDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("stockType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stockType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnInstanceStockType> refVal_setStockType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStockType);
            setStockType(refVal_setStockType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnInstanceStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cis")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCis);
            setCis(refVal_setCis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imei"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imei")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImei;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImei);
            setImei(refVal_setImei);
        }
    }
    return ok;
}

void ReturnInstanceDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StockTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stockType")), m_StockType));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_CisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cis")), m_Cis));
    }
    if(m_ImeiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imei")), m_Imei));
    }
}

bool ReturnInstanceDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("stockType"))))
    {
        std::shared_ptr<ReturnInstanceStockType> refVal_setStockType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stockType"))), refVal_setStockType );
        setStockType(refVal_setStockType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<ReturnInstanceStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cis"))))
    {
        utility::string_t refVal_setCis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cis"))), refVal_setCis );
        setCis(refVal_setCis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imei"))))
    {
        utility::string_t refVal_setImei;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imei"))), refVal_setImei );
        setImei(refVal_setImei);
    }
    return ok;
}

std::shared_ptr<ReturnInstanceStockType> ReturnInstanceDTO::getStockType() const
{
    return m_StockType;
}

void ReturnInstanceDTO::setStockType(const std::shared_ptr<ReturnInstanceStockType>& value)
{
    m_StockType = value;
    m_StockTypeIsSet = true;
}

bool ReturnInstanceDTO::stockTypeIsSet() const
{
    return m_StockTypeIsSet;
}

void ReturnInstanceDTO::unsetStockType()
{
    m_StockTypeIsSet = false;
}
std::shared_ptr<ReturnInstanceStatusType> ReturnInstanceDTO::getStatus() const
{
    return m_Status;
}

void ReturnInstanceDTO::setStatus(const std::shared_ptr<ReturnInstanceStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ReturnInstanceDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void ReturnInstanceDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t ReturnInstanceDTO::getCis() const
{
    return m_Cis;
}

void ReturnInstanceDTO::setCis(const utility::string_t& value)
{
    m_Cis = value;
    m_CisIsSet = true;
}

bool ReturnInstanceDTO::cisIsSet() const
{
    return m_CisIsSet;
}

void ReturnInstanceDTO::unsetCis()
{
    m_CisIsSet = false;
}
utility::string_t ReturnInstanceDTO::getImei() const
{
    return m_Imei;
}

void ReturnInstanceDTO::setImei(const utility::string_t& value)
{
    m_Imei = value;
    m_ImeiIsSet = true;
}

bool ReturnInstanceDTO::imeiIsSet() const
{
    return m_ImeiIsSet;
}

void ReturnInstanceDTO::unsetImei()
{
    m_ImeiIsSet = false;
}
}
}
}
}


