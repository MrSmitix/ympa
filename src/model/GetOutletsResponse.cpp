/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetOutletsResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetOutletsResponse::GetOutletsResponse()
{
    m_OutletsIsSet = false;
    m_PagingIsSet = false;
    m_PagerIsSet = false;
}

GetOutletsResponse::~GetOutletsResponse()
{
}

void GetOutletsResponse::validate()
{
    // TODO: implement validation
}

web::json::value GetOutletsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OutletsIsSet)
    {
        val[utility::conversions::to_string_t(U("outlets"))] = ModelBase::toJson(m_Outlets);
    }
    if(m_PagingIsSet)
    {
        val[utility::conversions::to_string_t(U("paging"))] = ModelBase::toJson(m_Paging);
    }
    if(m_PagerIsSet)
    {
        val[utility::conversions::to_string_t(U("pager"))] = ModelBase::toJson(m_Pager);
    }

    return val;
}

bool GetOutletsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("outlets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outlets")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FullOutletDTO>> refVal_setOutlets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutlets);
            setOutlets(refVal_setOutlets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paging"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paging")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScrollingPagerDTO> refVal_setPaging;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaging);
            setPaging(refVal_setPaging);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pager"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pager")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FlippingPagerDTO> refVal_setPager;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPager);
            setPager(refVal_setPager);
        }
    }
    return ok;
}

void GetOutletsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OutletsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outlets")), m_Outlets));
    }
    if(m_PagingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paging")), m_Paging));
    }
    if(m_PagerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pager")), m_Pager));
    }
}

bool GetOutletsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("outlets"))))
    {
        std::vector<std::shared_ptr<FullOutletDTO>> refVal_setOutlets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outlets"))), refVal_setOutlets );
        setOutlets(refVal_setOutlets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paging"))))
    {
        std::shared_ptr<ScrollingPagerDTO> refVal_setPaging;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paging"))), refVal_setPaging );
        setPaging(refVal_setPaging);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pager"))))
    {
        std::shared_ptr<FlippingPagerDTO> refVal_setPager;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pager"))), refVal_setPager );
        setPager(refVal_setPager);
    }
    return ok;
}

std::vector<std::shared_ptr<FullOutletDTO>>& GetOutletsResponse::getOutlets()
{
    return m_Outlets;
}

void GetOutletsResponse::setOutlets(const std::vector<std::shared_ptr<FullOutletDTO>>& value)
{
    m_Outlets = value;
    m_OutletsIsSet = true;
}

bool GetOutletsResponse::outletsIsSet() const
{
    return m_OutletsIsSet;
}

void GetOutletsResponse::unsetOutlets()
{
    m_OutletsIsSet = false;
}
std::shared_ptr<ScrollingPagerDTO> GetOutletsResponse::getPaging() const
{
    return m_Paging;
}

void GetOutletsResponse::setPaging(const std::shared_ptr<ScrollingPagerDTO>& value)
{
    m_Paging = value;
    m_PagingIsSet = true;
}

bool GetOutletsResponse::pagingIsSet() const
{
    return m_PagingIsSet;
}

void GetOutletsResponse::unsetPaging()
{
    m_PagingIsSet = false;
}
std::shared_ptr<FlippingPagerDTO> GetOutletsResponse::getPager() const
{
    return m_Pager;
}

void GetOutletsResponse::setPager(const std::shared_ptr<FlippingPagerDTO>& value)
{
    m_Pager = value;
    m_PagerIsSet = true;
}

bool GetOutletsResponse::pagerIsSet() const
{
    return m_PagerIsSet;
}

void GetOutletsResponse::unsetPager()
{
    m_PagerIsSet = false;
}
}
}
}
}


