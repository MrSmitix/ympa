/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/EnrichedModelDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



EnrichedModelDTO::EnrichedModelDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PricesIsSet = false;
    m_OffersIsSet = false;
    m_OfflineOffers = 0;
    m_OfflineOffersIsSet = false;
    m_OnlineOffers = 0;
    m_OnlineOffersIsSet = false;
}

EnrichedModelDTO::~EnrichedModelDTO()
{
}

void EnrichedModelDTO::validate()
{
    // TODO: implement validation
}

web::json::value EnrichedModelDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PricesIsSet)
    {
        val[utility::conversions::to_string_t(U("prices"))] = ModelBase::toJson(m_Prices);
    }
    if(m_OffersIsSet)
    {
        val[utility::conversions::to_string_t(U("offers"))] = ModelBase::toJson(m_Offers);
    }
    if(m_OfflineOffersIsSet)
    {
        val[utility::conversions::to_string_t(U("offlineOffers"))] = ModelBase::toJson(m_OfflineOffers);
    }
    if(m_OnlineOffersIsSet)
    {
        val[utility::conversions::to_string_t(U("onlineOffers"))] = ModelBase::toJson(m_OnlineOffers);
    }

    return val;
}

bool EnrichedModelDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prices"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prices")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ModelPriceDTO> refVal_setPrices;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrices);
            setPrices(refVal_setPrices);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ModelOfferDTO>> refVal_setOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffers);
            setOffers(refVal_setOffers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offlineOffers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offlineOffers")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOfflineOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfflineOffers);
            setOfflineOffers(refVal_setOfflineOffers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("onlineOffers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("onlineOffers")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOnlineOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOnlineOffers);
            setOnlineOffers(refVal_setOnlineOffers);
        }
    }
    return ok;
}

void EnrichedModelDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PricesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prices")), m_Prices));
    }
    if(m_OffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offers")), m_Offers));
    }
    if(m_OfflineOffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offlineOffers")), m_OfflineOffers));
    }
    if(m_OnlineOffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("onlineOffers")), m_OnlineOffers));
    }
}

bool EnrichedModelDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prices"))))
    {
        std::shared_ptr<ModelPriceDTO> refVal_setPrices;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prices"))), refVal_setPrices );
        setPrices(refVal_setPrices);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offers"))))
    {
        std::vector<std::shared_ptr<ModelOfferDTO>> refVal_setOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offers"))), refVal_setOffers );
        setOffers(refVal_setOffers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offlineOffers"))))
    {
        int32_t refVal_setOfflineOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offlineOffers"))), refVal_setOfflineOffers );
        setOfflineOffers(refVal_setOfflineOffers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("onlineOffers"))))
    {
        int32_t refVal_setOnlineOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("onlineOffers"))), refVal_setOnlineOffers );
        setOnlineOffers(refVal_setOnlineOffers);
    }
    return ok;
}

int64_t EnrichedModelDTO::getId() const
{
    return m_Id;
}

void EnrichedModelDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EnrichedModelDTO::idIsSet() const
{
    return m_IdIsSet;
}

void EnrichedModelDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EnrichedModelDTO::getName() const
{
    return m_Name;
}

void EnrichedModelDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool EnrichedModelDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void EnrichedModelDTO::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<ModelPriceDTO> EnrichedModelDTO::getPrices() const
{
    return m_Prices;
}

void EnrichedModelDTO::setPrices(const std::shared_ptr<ModelPriceDTO>& value)
{
    m_Prices = value;
    m_PricesIsSet = true;
}

bool EnrichedModelDTO::pricesIsSet() const
{
    return m_PricesIsSet;
}

void EnrichedModelDTO::unsetPrices()
{
    m_PricesIsSet = false;
}
std::vector<std::shared_ptr<ModelOfferDTO>>& EnrichedModelDTO::getOffers()
{
    return m_Offers;
}

void EnrichedModelDTO::setOffers(const std::vector<std::shared_ptr<ModelOfferDTO>>& value)
{
    m_Offers = value;
    m_OffersIsSet = true;
}

bool EnrichedModelDTO::offersIsSet() const
{
    return m_OffersIsSet;
}

void EnrichedModelDTO::unsetOffers()
{
    m_OffersIsSet = false;
}
int32_t EnrichedModelDTO::getOfflineOffers() const
{
    return m_OfflineOffers;
}

void EnrichedModelDTO::setOfflineOffers(int32_t value)
{
    m_OfflineOffers = value;
    m_OfflineOffersIsSet = true;
}

bool EnrichedModelDTO::offlineOffersIsSet() const
{
    return m_OfflineOffersIsSet;
}

void EnrichedModelDTO::unsetOfflineOffers()
{
    m_OfflineOffersIsSet = false;
}
int32_t EnrichedModelDTO::getOnlineOffers() const
{
    return m_OnlineOffers;
}

void EnrichedModelDTO::setOnlineOffers(int32_t value)
{
    m_OnlineOffers = value;
    m_OnlineOffersIsSet = true;
}

bool EnrichedModelDTO::onlineOffersIsSet() const
{
    return m_OnlineOffersIsSet;
}

void EnrichedModelDTO::unsetOnlineOffers()
{
    m_OnlineOffersIsSet = false;
}
}
}
}
}


