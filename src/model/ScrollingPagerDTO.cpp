/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ScrollingPagerDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ScrollingPagerDTO::ScrollingPagerDTO()
{
    m_NextPageToken = utility::conversions::to_string_t("");
    m_NextPageTokenIsSet = false;
    m_PrevPageToken = utility::conversions::to_string_t("");
    m_PrevPageTokenIsSet = false;
}

ScrollingPagerDTO::~ScrollingPagerDTO()
{
}

void ScrollingPagerDTO::validate()
{
    // TODO: implement validation
}

web::json::value ScrollingPagerDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NextPageTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("nextPageToken"))] = ModelBase::toJson(m_NextPageToken);
    }
    if(m_PrevPageTokenIsSet)
    {
        val[utility::conversions::to_string_t(U("prevPageToken"))] = ModelBase::toJson(m_PrevPageToken);
    }

    return val;
}

bool ScrollingPagerDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("nextPageToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nextPageToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNextPageToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextPageToken);
            setNextPageToken(refVal_setNextPageToken);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prevPageToken"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prevPageToken")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrevPageToken;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrevPageToken);
            setPrevPageToken(refVal_setPrevPageToken);
        }
    }
    return ok;
}

void ScrollingPagerDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NextPageTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nextPageToken")), m_NextPageToken));
    }
    if(m_PrevPageTokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prevPageToken")), m_PrevPageToken));
    }
}

bool ScrollingPagerDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("nextPageToken"))))
    {
        utility::string_t refVal_setNextPageToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nextPageToken"))), refVal_setNextPageToken );
        setNextPageToken(refVal_setNextPageToken);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prevPageToken"))))
    {
        utility::string_t refVal_setPrevPageToken;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prevPageToken"))), refVal_setPrevPageToken );
        setPrevPageToken(refVal_setPrevPageToken);
    }
    return ok;
}

utility::string_t ScrollingPagerDTO::getNextPageToken() const
{
    return m_NextPageToken;
}

void ScrollingPagerDTO::setNextPageToken(const utility::string_t& value)
{
    m_NextPageToken = value;
    m_NextPageTokenIsSet = true;
}

bool ScrollingPagerDTO::nextPageTokenIsSet() const
{
    return m_NextPageTokenIsSet;
}

void ScrollingPagerDTO::unsetNextPageToken()
{
    m_NextPageTokenIsSet = false;
}
utility::string_t ScrollingPagerDTO::getPrevPageToken() const
{
    return m_PrevPageToken;
}

void ScrollingPagerDTO::setPrevPageToken(const utility::string_t& value)
{
    m_PrevPageToken = value;
    m_PrevPageTokenIsSet = true;
}

bool ScrollingPagerDTO::prevPageTokenIsSet() const
{
    return m_PrevPageTokenIsSet;
}

void ScrollingPagerDTO::unsetPrevPageToken()
{
    m_PrevPageTokenIsSet = false;
}
}
}
}
}


