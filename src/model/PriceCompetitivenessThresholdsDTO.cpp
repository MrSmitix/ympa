/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/PriceCompetitivenessThresholdsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PriceCompetitivenessThresholdsDTO::PriceCompetitivenessThresholdsDTO()
{
    m_OptimalPriceIsSet = false;
    m_AveragePriceIsSet = false;
}

PriceCompetitivenessThresholdsDTO::~PriceCompetitivenessThresholdsDTO()
{
}

void PriceCompetitivenessThresholdsDTO::validate()
{
    // TODO: implement validation
}

web::json::value PriceCompetitivenessThresholdsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OptimalPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("optimalPrice"))] = ModelBase::toJson(m_OptimalPrice);
    }
    if(m_AveragePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("averagePrice"))] = ModelBase::toJson(m_AveragePrice);
    }

    return val;
}

bool PriceCompetitivenessThresholdsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("optimalPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("optimalPrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setOptimalPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOptimalPrice);
            setOptimalPrice(refVal_setOptimalPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("averagePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("averagePrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setAveragePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAveragePrice);
            setAveragePrice(refVal_setAveragePrice);
        }
    }
    return ok;
}

void PriceCompetitivenessThresholdsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OptimalPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("optimalPrice")), m_OptimalPrice));
    }
    if(m_AveragePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("averagePrice")), m_AveragePrice));
    }
}

bool PriceCompetitivenessThresholdsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("optimalPrice"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setOptimalPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("optimalPrice"))), refVal_setOptimalPrice );
        setOptimalPrice(refVal_setOptimalPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("averagePrice"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setAveragePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("averagePrice"))), refVal_setAveragePrice );
        setAveragePrice(refVal_setAveragePrice);
    }
    return ok;
}

std::shared_ptr<BasePriceDTO> PriceCompetitivenessThresholdsDTO::getOptimalPrice() const
{
    return m_OptimalPrice;
}

void PriceCompetitivenessThresholdsDTO::setOptimalPrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_OptimalPrice = value;
    m_OptimalPriceIsSet = true;
}

bool PriceCompetitivenessThresholdsDTO::optimalPriceIsSet() const
{
    return m_OptimalPriceIsSet;
}

void PriceCompetitivenessThresholdsDTO::unsetOptimalPrice()
{
    m_OptimalPriceIsSet = false;
}
std::shared_ptr<BasePriceDTO> PriceCompetitivenessThresholdsDTO::getAveragePrice() const
{
    return m_AveragePrice;
}

void PriceCompetitivenessThresholdsDTO::setAveragePrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_AveragePrice = value;
    m_AveragePriceIsSet = true;
}

bool PriceCompetitivenessThresholdsDTO::averagePriceIsSet() const
{
    return m_AveragePriceIsSet;
}

void PriceCompetitivenessThresholdsDTO::unsetAveragePrice()
{
    m_AveragePriceIsSet = false;
}
}
}
}
}


