/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatMessagePayloadDTO from './ChatMessagePayloadDTO';
import ChatMessageSenderType from './ChatMessageSenderType';

/**
 * The ChatMessageDTO model module.
 * @module model/ChatMessageDTO
 * @version LATEST
 */
class ChatMessageDTO {
    /**
     * Constructs a new <code>ChatMessageDTO</code>.
     * Информация о сообщениях.
     * @alias module:model/ChatMessageDTO
     * @param messageId {Number} Идентификатор сообщения.
     * @param createdAt {Date} Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
     * @param sender {module:model/ChatMessageSenderType} 
     */
    constructor(messageId, createdAt, sender) { 
        
        ChatMessageDTO.initialize(this, messageId, createdAt, sender);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageId, createdAt, sender) { 
        obj['messageId'] = messageId;
        obj['createdAt'] = createdAt;
        obj['sender'] = sender;
    }

    /**
     * Constructs a <code>ChatMessageDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatMessageDTO} obj Optional instance to populate.
     * @return {module:model/ChatMessageDTO} The populated <code>ChatMessageDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChatMessageDTO();

            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('sender')) {
                obj['sender'] = ChatMessageSenderType.constructFromObject(data['sender']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], [ChatMessagePayloadDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChatMessageDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChatMessageDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChatMessageDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        if (data['payload']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payload'])) {
                throw new Error("Expected the field `payload` to be an array in the JSON data but got " + data['payload']);
            }
            // validate the optional field `payload` (array)
            for (const item of data['payload']) {
                ChatMessagePayloadDTO.validateJSON(item);
            };
        }

        return true;
    }


}

ChatMessageDTO.RequiredProperties = ["messageId", "createdAt", "sender"];

/**
 * Идентификатор сообщения.
 * @member {Number} messageId
 */
ChatMessageDTO.prototype['messageId'] = undefined;

/**
 * Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @member {Date} createdAt
 */
ChatMessageDTO.prototype['createdAt'] = undefined;

/**
 * @member {module:model/ChatMessageSenderType} sender
 */
ChatMessageDTO.prototype['sender'] = undefined;

/**
 * Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`. 
 * @member {String} message
 */
ChatMessageDTO.prototype['message'] = undefined;

/**
 * Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`. 
 * @member {Array.<module:model/ChatMessagePayloadDTO>} payload
 */
ChatMessageDTO.prototype['payload'] = undefined;






export default ChatMessageDTO;

