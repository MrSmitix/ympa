/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderBusinessDocumentsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderBusinessDocumentsDTO::OrderBusinessDocumentsDTO()
{
    m_UpdIsSet = false;
    m_UkdIsSet = false;
    m_TorgTwelveIsSet = false;
    m_SfIsSet = false;
    m_KsfIsSet = false;
}

OrderBusinessDocumentsDTO::~OrderBusinessDocumentsDTO()
{
}

void OrderBusinessDocumentsDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderBusinessDocumentsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UpdIsSet)
    {
        val[utility::conversions::to_string_t(U("upd"))] = ModelBase::toJson(m_Upd);
    }
    if(m_UkdIsSet)
    {
        val[utility::conversions::to_string_t(U("ukd"))] = ModelBase::toJson(m_Ukd);
    }
    if(m_TorgTwelveIsSet)
    {
        val[utility::conversions::to_string_t(U("torgTwelve"))] = ModelBase::toJson(m_TorgTwelve);
    }
    if(m_SfIsSet)
    {
        val[utility::conversions::to_string_t(U("sf"))] = ModelBase::toJson(m_Sf);
    }
    if(m_KsfIsSet)
    {
        val[utility::conversions::to_string_t(U("ksf"))] = ModelBase::toJson(m_Ksf);
    }

    return val;
}

bool OrderBusinessDocumentsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("upd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("upd")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentDTO> refVal_setUpd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpd);
            setUpd(refVal_setUpd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ukd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ukd")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentDTO> refVal_setUkd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUkd);
            setUkd(refVal_setUkd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("torgTwelve"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("torgTwelve")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentDTO> refVal_setTorgTwelve;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTorgTwelve);
            setTorgTwelve(refVal_setTorgTwelve);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sf"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sf")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentDTO> refVal_setSf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSf);
            setSf(refVal_setSf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ksf"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ksf")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DocumentDTO> refVal_setKsf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKsf);
            setKsf(refVal_setKsf);
        }
    }
    return ok;
}

void OrderBusinessDocumentsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UpdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("upd")), m_Upd));
    }
    if(m_UkdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ukd")), m_Ukd));
    }
    if(m_TorgTwelveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("torgTwelve")), m_TorgTwelve));
    }
    if(m_SfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sf")), m_Sf));
    }
    if(m_KsfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ksf")), m_Ksf));
    }
}

bool OrderBusinessDocumentsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("upd"))))
    {
        std::shared_ptr<DocumentDTO> refVal_setUpd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("upd"))), refVal_setUpd );
        setUpd(refVal_setUpd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ukd"))))
    {
        std::shared_ptr<DocumentDTO> refVal_setUkd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ukd"))), refVal_setUkd );
        setUkd(refVal_setUkd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("torgTwelve"))))
    {
        std::shared_ptr<DocumentDTO> refVal_setTorgTwelve;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("torgTwelve"))), refVal_setTorgTwelve );
        setTorgTwelve(refVal_setTorgTwelve);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sf"))))
    {
        std::shared_ptr<DocumentDTO> refVal_setSf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sf"))), refVal_setSf );
        setSf(refVal_setSf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ksf"))))
    {
        std::shared_ptr<DocumentDTO> refVal_setKsf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ksf"))), refVal_setKsf );
        setKsf(refVal_setKsf);
    }
    return ok;
}

std::shared_ptr<DocumentDTO> OrderBusinessDocumentsDTO::getUpd() const
{
    return m_Upd;
}

void OrderBusinessDocumentsDTO::setUpd(const std::shared_ptr<DocumentDTO>& value)
{
    m_Upd = value;
    m_UpdIsSet = true;
}

bool OrderBusinessDocumentsDTO::updIsSet() const
{
    return m_UpdIsSet;
}

void OrderBusinessDocumentsDTO::unsetUpd()
{
    m_UpdIsSet = false;
}
std::shared_ptr<DocumentDTO> OrderBusinessDocumentsDTO::getUkd() const
{
    return m_Ukd;
}

void OrderBusinessDocumentsDTO::setUkd(const std::shared_ptr<DocumentDTO>& value)
{
    m_Ukd = value;
    m_UkdIsSet = true;
}

bool OrderBusinessDocumentsDTO::ukdIsSet() const
{
    return m_UkdIsSet;
}

void OrderBusinessDocumentsDTO::unsetUkd()
{
    m_UkdIsSet = false;
}
std::shared_ptr<DocumentDTO> OrderBusinessDocumentsDTO::getTorgTwelve() const
{
    return m_TorgTwelve;
}

void OrderBusinessDocumentsDTO::setTorgTwelve(const std::shared_ptr<DocumentDTO>& value)
{
    m_TorgTwelve = value;
    m_TorgTwelveIsSet = true;
}

bool OrderBusinessDocumentsDTO::torgTwelveIsSet() const
{
    return m_TorgTwelveIsSet;
}

void OrderBusinessDocumentsDTO::unsetTorgTwelve()
{
    m_TorgTwelveIsSet = false;
}
std::shared_ptr<DocumentDTO> OrderBusinessDocumentsDTO::getSf() const
{
    return m_Sf;
}

void OrderBusinessDocumentsDTO::setSf(const std::shared_ptr<DocumentDTO>& value)
{
    m_Sf = value;
    m_SfIsSet = true;
}

bool OrderBusinessDocumentsDTO::sfIsSet() const
{
    return m_SfIsSet;
}

void OrderBusinessDocumentsDTO::unsetSf()
{
    m_SfIsSet = false;
}
std::shared_ptr<DocumentDTO> OrderBusinessDocumentsDTO::getKsf() const
{
    return m_Ksf;
}

void OrderBusinessDocumentsDTO::setKsf(const std::shared_ptr<DocumentDTO>& value)
{
    m_Ksf = value;
    m_KsfIsSet = true;
}

bool OrderBusinessDocumentsDTO::ksfIsSet() const
{
    return m_KsfIsSet;
}

void OrderBusinessDocumentsDTO::unsetKsf()
{
    m_KsfIsSet = false;
}
}
}
}
}


