/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/PromoOfferDiscountParamsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PromoOfferDiscountParamsDTO::PromoOfferDiscountParamsDTO()
{
    m_Price = 0L;
    m_PriceIsSet = false;
    m_PromoPrice = 0L;
    m_PromoPriceIsSet = false;
    m_MaxPromoPrice = 0L;
    m_MaxPromoPriceIsSet = false;
}

PromoOfferDiscountParamsDTO::~PromoOfferDiscountParamsDTO()
{
}

void PromoOfferDiscountParamsDTO::validate()
{
    // TODO: implement validation
}

web::json::value PromoOfferDiscountParamsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_PromoPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("promoPrice"))] = ModelBase::toJson(m_PromoPrice);
    }
    if(m_MaxPromoPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("maxPromoPrice"))] = ModelBase::toJson(m_MaxPromoPrice);
    }

    return val;
}

bool PromoOfferDiscountParamsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("promoPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("promoPrice")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPromoPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromoPrice);
            setPromoPrice(refVal_setPromoPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxPromoPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxPromoPrice")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMaxPromoPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxPromoPrice);
            setMaxPromoPrice(refVal_setMaxPromoPrice);
        }
    }
    return ok;
}

void PromoOfferDiscountParamsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_PromoPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("promoPrice")), m_PromoPrice));
    }
    if(m_MaxPromoPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxPromoPrice")), m_MaxPromoPrice));
    }
}

bool PromoOfferDiscountParamsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        int64_t refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("promoPrice"))))
    {
        int64_t refVal_setPromoPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("promoPrice"))), refVal_setPromoPrice );
        setPromoPrice(refVal_setPromoPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxPromoPrice"))))
    {
        int64_t refVal_setMaxPromoPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxPromoPrice"))), refVal_setMaxPromoPrice );
        setMaxPromoPrice(refVal_setMaxPromoPrice);
    }
    return ok;
}

int64_t PromoOfferDiscountParamsDTO::getPrice() const
{
    return m_Price;
}

void PromoOfferDiscountParamsDTO::setPrice(int64_t value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool PromoOfferDiscountParamsDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void PromoOfferDiscountParamsDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t PromoOfferDiscountParamsDTO::getPromoPrice() const
{
    return m_PromoPrice;
}

void PromoOfferDiscountParamsDTO::setPromoPrice(int64_t value)
{
    m_PromoPrice = value;
    m_PromoPriceIsSet = true;
}

bool PromoOfferDiscountParamsDTO::promoPriceIsSet() const
{
    return m_PromoPriceIsSet;
}

void PromoOfferDiscountParamsDTO::unsetPromoPrice()
{
    m_PromoPriceIsSet = false;
}
int64_t PromoOfferDiscountParamsDTO::getMaxPromoPrice() const
{
    return m_MaxPromoPrice;
}

void PromoOfferDiscountParamsDTO::setMaxPromoPrice(int64_t value)
{
    m_MaxPromoPrice = value;
    m_MaxPromoPriceIsSet = true;
}

bool PromoOfferDiscountParamsDTO::maxPromoPriceIsSet() const
{
    return m_MaxPromoPriceIsSet;
}

void PromoOfferDiscountParamsDTO::unsetMaxPromoPrice()
{
    m_MaxPromoPriceIsSet = false;
}
}
}
}
}


