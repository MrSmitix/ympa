/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetPromoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetPromoDTO::GetPromoDTO()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PeriodIsSet = false;
    m_Participating = false;
    m_ParticipatingIsSet = false;
    m_AssortmentInfoIsSet = false;
    m_MechanicsInfoIsSet = false;
    m_BestsellerInfoIsSet = false;
    m_ChannelsIsSet = false;
    m_ConstraintsIsSet = false;
}

GetPromoDTO::~GetPromoDTO()
{
}

void GetPromoDTO::validate()
{
    // TODO: implement validation
}

web::json::value GetPromoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PeriodIsSet)
    {
        val[utility::conversions::to_string_t(U("period"))] = ModelBase::toJson(m_Period);
    }
    if(m_ParticipatingIsSet)
    {
        val[utility::conversions::to_string_t(U("participating"))] = ModelBase::toJson(m_Participating);
    }
    if(m_AssortmentInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("assortmentInfo"))] = ModelBase::toJson(m_AssortmentInfo);
    }
    if(m_MechanicsInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("mechanicsInfo"))] = ModelBase::toJson(m_MechanicsInfo);
    }
    if(m_BestsellerInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("bestsellerInfo"))] = ModelBase::toJson(m_BestsellerInfo);
    }
    if(m_ChannelsIsSet)
    {
        val[utility::conversions::to_string_t(U("channels"))] = ModelBase::toJson(m_Channels);
    }
    if(m_ConstraintsIsSet)
    {
        val[utility::conversions::to_string_t(U("constraints"))] = ModelBase::toJson(m_Constraints);
    }

    return val;
}

bool GetPromoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("period")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PromoPeriodDTO> refVal_setPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriod);
            setPeriod(refVal_setPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("participating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("participating")));
        if(!fieldValue.is_null())
        {
            bool refVal_setParticipating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParticipating);
            setParticipating(refVal_setParticipating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("assortmentInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assortmentInfo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPromoAssortmentInfoDTO> refVal_setAssortmentInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssortmentInfo);
            setAssortmentInfo(refVal_setAssortmentInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mechanicsInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mechanicsInfo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPromoMechanicsInfoDTO> refVal_setMechanicsInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMechanicsInfo);
            setMechanicsInfo(refVal_setMechanicsInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bestsellerInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bestsellerInfo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPromoBestsellerInfoDTO> refVal_setBestsellerInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBestsellerInfo);
            setBestsellerInfo(refVal_setBestsellerInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("channels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("channels")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ChannelType>> refVal_setChannels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChannels);
            setChannels(refVal_setChannels);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constraints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constraints")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPromoConstraintsDTO> refVal_setConstraints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstraints);
            setConstraints(refVal_setConstraints);
        }
    }
    return ok;
}

void GetPromoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("period")), m_Period));
    }
    if(m_ParticipatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("participating")), m_Participating));
    }
    if(m_AssortmentInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assortmentInfo")), m_AssortmentInfo));
    }
    if(m_MechanicsInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mechanicsInfo")), m_MechanicsInfo));
    }
    if(m_BestsellerInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bestsellerInfo")), m_BestsellerInfo));
    }
    if(m_ChannelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("channels")), m_Channels));
    }
    if(m_ConstraintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constraints")), m_Constraints));
    }
}

bool GetPromoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("period"))))
    {
        std::shared_ptr<PromoPeriodDTO> refVal_setPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("period"))), refVal_setPeriod );
        setPeriod(refVal_setPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("participating"))))
    {
        bool refVal_setParticipating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("participating"))), refVal_setParticipating );
        setParticipating(refVal_setParticipating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("assortmentInfo"))))
    {
        std::shared_ptr<GetPromoAssortmentInfoDTO> refVal_setAssortmentInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assortmentInfo"))), refVal_setAssortmentInfo );
        setAssortmentInfo(refVal_setAssortmentInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mechanicsInfo"))))
    {
        std::shared_ptr<GetPromoMechanicsInfoDTO> refVal_setMechanicsInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mechanicsInfo"))), refVal_setMechanicsInfo );
        setMechanicsInfo(refVal_setMechanicsInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bestsellerInfo"))))
    {
        std::shared_ptr<GetPromoBestsellerInfoDTO> refVal_setBestsellerInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bestsellerInfo"))), refVal_setBestsellerInfo );
        setBestsellerInfo(refVal_setBestsellerInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("channels"))))
    {
        std::vector<std::shared_ptr<ChannelType>> refVal_setChannels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("channels"))), refVal_setChannels );
        setChannels(refVal_setChannels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constraints"))))
    {
        std::shared_ptr<GetPromoConstraintsDTO> refVal_setConstraints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constraints"))), refVal_setConstraints );
        setConstraints(refVal_setConstraints);
    }
    return ok;
}

utility::string_t GetPromoDTO::getId() const
{
    return m_Id;
}

void GetPromoDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GetPromoDTO::idIsSet() const
{
    return m_IdIsSet;
}

void GetPromoDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t GetPromoDTO::getName() const
{
    return m_Name;
}

void GetPromoDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GetPromoDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void GetPromoDTO::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<PromoPeriodDTO> GetPromoDTO::getPeriod() const
{
    return m_Period;
}

void GetPromoDTO::setPeriod(const std::shared_ptr<PromoPeriodDTO>& value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}

bool GetPromoDTO::periodIsSet() const
{
    return m_PeriodIsSet;
}

void GetPromoDTO::unsetPeriod()
{
    m_PeriodIsSet = false;
}
bool GetPromoDTO::isParticipating() const
{
    return m_Participating;
}

void GetPromoDTO::setParticipating(bool value)
{
    m_Participating = value;
    m_ParticipatingIsSet = true;
}

bool GetPromoDTO::participatingIsSet() const
{
    return m_ParticipatingIsSet;
}

void GetPromoDTO::unsetParticipating()
{
    m_ParticipatingIsSet = false;
}
std::shared_ptr<GetPromoAssortmentInfoDTO> GetPromoDTO::getAssortmentInfo() const
{
    return m_AssortmentInfo;
}

void GetPromoDTO::setAssortmentInfo(const std::shared_ptr<GetPromoAssortmentInfoDTO>& value)
{
    m_AssortmentInfo = value;
    m_AssortmentInfoIsSet = true;
}

bool GetPromoDTO::assortmentInfoIsSet() const
{
    return m_AssortmentInfoIsSet;
}

void GetPromoDTO::unsetAssortmentInfo()
{
    m_AssortmentInfoIsSet = false;
}
std::shared_ptr<GetPromoMechanicsInfoDTO> GetPromoDTO::getMechanicsInfo() const
{
    return m_MechanicsInfo;
}

void GetPromoDTO::setMechanicsInfo(const std::shared_ptr<GetPromoMechanicsInfoDTO>& value)
{
    m_MechanicsInfo = value;
    m_MechanicsInfoIsSet = true;
}

bool GetPromoDTO::mechanicsInfoIsSet() const
{
    return m_MechanicsInfoIsSet;
}

void GetPromoDTO::unsetMechanicsInfo()
{
    m_MechanicsInfoIsSet = false;
}
std::shared_ptr<GetPromoBestsellerInfoDTO> GetPromoDTO::getBestsellerInfo() const
{
    return m_BestsellerInfo;
}

void GetPromoDTO::setBestsellerInfo(const std::shared_ptr<GetPromoBestsellerInfoDTO>& value)
{
    m_BestsellerInfo = value;
    m_BestsellerInfoIsSet = true;
}

bool GetPromoDTO::bestsellerInfoIsSet() const
{
    return m_BestsellerInfoIsSet;
}

void GetPromoDTO::unsetBestsellerInfo()
{
    m_BestsellerInfoIsSet = false;
}
std::vector<std::shared_ptr<ChannelType>>& GetPromoDTO::getChannels()
{
    return m_Channels;
}

void GetPromoDTO::setChannels(const std::vector<std::shared_ptr<ChannelType>>& value)
{
    m_Channels = value;
    m_ChannelsIsSet = true;
}

bool GetPromoDTO::channelsIsSet() const
{
    return m_ChannelsIsSet;
}

void GetPromoDTO::unsetChannels()
{
    m_ChannelsIsSet = false;
}
std::shared_ptr<GetPromoConstraintsDTO> GetPromoDTO::getConstraints() const
{
    return m_Constraints;
}

void GetPromoDTO::setConstraints(const std::shared_ptr<GetPromoConstraintsDTO>& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}

bool GetPromoDTO::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}

void GetPromoDTO::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
}
}
}
}


