/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderItemInstanceDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderItemInstanceDTO::OrderItemInstanceDTO()
{
    m_Cis = utility::conversions::to_string_t("");
    m_CisIsSet = false;
    m_CisFull = utility::conversions::to_string_t("");
    m_CisFullIsSet = false;
    m_Uin = utility::conversions::to_string_t("");
    m_UinIsSet = false;
    m_Rnpt = utility::conversions::to_string_t("");
    m_RnptIsSet = false;
    m_Gtd = utility::conversions::to_string_t("");
    m_GtdIsSet = false;
}

OrderItemInstanceDTO::~OrderItemInstanceDTO()
{
}

void OrderItemInstanceDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderItemInstanceDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CisIsSet)
    {
        val[utility::conversions::to_string_t(U("cis"))] = ModelBase::toJson(m_Cis);
    }
    if(m_CisFullIsSet)
    {
        val[utility::conversions::to_string_t(U("cisFull"))] = ModelBase::toJson(m_CisFull);
    }
    if(m_UinIsSet)
    {
        val[utility::conversions::to_string_t(U("uin"))] = ModelBase::toJson(m_Uin);
    }
    if(m_RnptIsSet)
    {
        val[utility::conversions::to_string_t(U("rnpt"))] = ModelBase::toJson(m_Rnpt);
    }
    if(m_GtdIsSet)
    {
        val[utility::conversions::to_string_t(U("gtd"))] = ModelBase::toJson(m_Gtd);
    }

    return val;
}

bool OrderItemInstanceDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cis")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCis);
            setCis(refVal_setCis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cisFull"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cisFull")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCisFull;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCisFull);
            setCisFull(refVal_setCisFull);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUin);
            setUin(refVal_setUin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rnpt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rnpt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRnpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRnpt);
            setRnpt(refVal_setRnpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gtd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gtd")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGtd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGtd);
            setGtd(refVal_setGtd);
        }
    }
    return ok;
}

void OrderItemInstanceDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cis")), m_Cis));
    }
    if(m_CisFullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cisFull")), m_CisFull));
    }
    if(m_UinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uin")), m_Uin));
    }
    if(m_RnptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rnpt")), m_Rnpt));
    }
    if(m_GtdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gtd")), m_Gtd));
    }
}

bool OrderItemInstanceDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cis"))))
    {
        utility::string_t refVal_setCis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cis"))), refVal_setCis );
        setCis(refVal_setCis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cisFull"))))
    {
        utility::string_t refVal_setCisFull;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cisFull"))), refVal_setCisFull );
        setCisFull(refVal_setCisFull);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uin"))))
    {
        utility::string_t refVal_setUin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uin"))), refVal_setUin );
        setUin(refVal_setUin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rnpt"))))
    {
        utility::string_t refVal_setRnpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rnpt"))), refVal_setRnpt );
        setRnpt(refVal_setRnpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gtd"))))
    {
        utility::string_t refVal_setGtd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gtd"))), refVal_setGtd );
        setGtd(refVal_setGtd);
    }
    return ok;
}

utility::string_t OrderItemInstanceDTO::getCis() const
{
    return m_Cis;
}

void OrderItemInstanceDTO::setCis(const utility::string_t& value)
{
    m_Cis = value;
    m_CisIsSet = true;
}

bool OrderItemInstanceDTO::cisIsSet() const
{
    return m_CisIsSet;
}

void OrderItemInstanceDTO::unsetCis()
{
    m_CisIsSet = false;
}
utility::string_t OrderItemInstanceDTO::getCisFull() const
{
    return m_CisFull;
}

void OrderItemInstanceDTO::setCisFull(const utility::string_t& value)
{
    m_CisFull = value;
    m_CisFullIsSet = true;
}

bool OrderItemInstanceDTO::cisFullIsSet() const
{
    return m_CisFullIsSet;
}

void OrderItemInstanceDTO::unsetCisFull()
{
    m_CisFullIsSet = false;
}
utility::string_t OrderItemInstanceDTO::getUin() const
{
    return m_Uin;
}

void OrderItemInstanceDTO::setUin(const utility::string_t& value)
{
    m_Uin = value;
    m_UinIsSet = true;
}

bool OrderItemInstanceDTO::uinIsSet() const
{
    return m_UinIsSet;
}

void OrderItemInstanceDTO::unsetUin()
{
    m_UinIsSet = false;
}
utility::string_t OrderItemInstanceDTO::getRnpt() const
{
    return m_Rnpt;
}

void OrderItemInstanceDTO::setRnpt(const utility::string_t& value)
{
    m_Rnpt = value;
    m_RnptIsSet = true;
}

bool OrderItemInstanceDTO::rnptIsSet() const
{
    return m_RnptIsSet;
}

void OrderItemInstanceDTO::unsetRnpt()
{
    m_RnptIsSet = false;
}
utility::string_t OrderItemInstanceDTO::getGtd() const
{
    return m_Gtd;
}

void OrderItemInstanceDTO::setGtd(const utility::string_t& value)
{
    m_Gtd = value;
    m_GtdIsSet = true;
}

bool OrderItemInstanceDTO::gtdIsSet() const
{
    return m_GtdIsSet;
}

void OrderItemInstanceDTO::unsetGtd()
{
    m_GtdIsSet = false;
}
}
}
}
}


