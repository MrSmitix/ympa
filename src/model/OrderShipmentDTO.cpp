/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderShipmentDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderShipmentDTO::OrderShipmentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_ShipmentDate = utility::conversions::to_string_t("");
    m_ShipmentDateIsSet = false;
    m_ShipmentTime = utility::conversions::to_string_t("");
    m_ShipmentTimeIsSet = false;
    m_TracksIsSet = false;
    m_BoxesIsSet = false;
}

OrderShipmentDTO::~OrderShipmentDTO()
{
}

void OrderShipmentDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderShipmentDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ShipmentDateIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentDate"))] = ModelBase::toJson(m_ShipmentDate);
    }
    if(m_ShipmentTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentTime"))] = ModelBase::toJson(m_ShipmentTime);
    }
    if(m_TracksIsSet)
    {
        val[utility::conversions::to_string_t(U("tracks"))] = ModelBase::toJson(m_Tracks);
    }
    if(m_BoxesIsSet)
    {
        val[utility::conversions::to_string_t(U("boxes"))] = ModelBase::toJson(m_Boxes);
    }

    return val;
}

bool OrderShipmentDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipmentDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentDate);
            setShipmentDate(refVal_setShipmentDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentTime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipmentTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentTime);
            setShipmentTime(refVal_setShipmentTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderTrackDTO>> refVal_setTracks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTracks);
            setTracks(refVal_setTracks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boxes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boxes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderParcelBoxDTO>> refVal_setBoxes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoxes);
            setBoxes(refVal_setBoxes);
        }
    }
    return ok;
}

void OrderShipmentDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ShipmentDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentDate")), m_ShipmentDate));
    }
    if(m_ShipmentTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentTime")), m_ShipmentTime));
    }
    if(m_TracksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracks")), m_Tracks));
    }
    if(m_BoxesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boxes")), m_Boxes));
    }
}

bool OrderShipmentDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentDate"))))
    {
        utility::string_t refVal_setShipmentDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentDate"))), refVal_setShipmentDate );
        setShipmentDate(refVal_setShipmentDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentTime"))))
    {
        utility::string_t refVal_setShipmentTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentTime"))), refVal_setShipmentTime );
        setShipmentTime(refVal_setShipmentTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracks"))))
    {
        std::vector<std::shared_ptr<OrderTrackDTO>> refVal_setTracks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracks"))), refVal_setTracks );
        setTracks(refVal_setTracks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boxes"))))
    {
        std::vector<std::shared_ptr<OrderParcelBoxDTO>> refVal_setBoxes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boxes"))), refVal_setBoxes );
        setBoxes(refVal_setBoxes);
    }
    return ok;
}

int64_t OrderShipmentDTO::getId() const
{
    return m_Id;
}

void OrderShipmentDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrderShipmentDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrderShipmentDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrderShipmentDTO::getShipmentDate() const
{
    return m_ShipmentDate;
}

void OrderShipmentDTO::setShipmentDate(const utility::string_t& value)
{
    m_ShipmentDate = value;
    m_ShipmentDateIsSet = true;
}

bool OrderShipmentDTO::shipmentDateIsSet() const
{
    return m_ShipmentDateIsSet;
}

void OrderShipmentDTO::unsetShipmentDate()
{
    m_ShipmentDateIsSet = false;
}
utility::string_t OrderShipmentDTO::getShipmentTime() const
{
    return m_ShipmentTime;
}

void OrderShipmentDTO::setShipmentTime(const utility::string_t& value)
{
    m_ShipmentTime = value;
    m_ShipmentTimeIsSet = true;
}

bool OrderShipmentDTO::shipmentTimeIsSet() const
{
    return m_ShipmentTimeIsSet;
}

void OrderShipmentDTO::unsetShipmentTime()
{
    m_ShipmentTimeIsSet = false;
}
std::vector<std::shared_ptr<OrderTrackDTO>>& OrderShipmentDTO::getTracks()
{
    return m_Tracks;
}

void OrderShipmentDTO::setTracks(const std::vector<std::shared_ptr<OrderTrackDTO>>& value)
{
    m_Tracks = value;
    m_TracksIsSet = true;
}

bool OrderShipmentDTO::tracksIsSet() const
{
    return m_TracksIsSet;
}

void OrderShipmentDTO::unsetTracks()
{
    m_TracksIsSet = false;
}
std::vector<std::shared_ptr<OrderParcelBoxDTO>>& OrderShipmentDTO::getBoxes()
{
    return m_Boxes;
}

void OrderShipmentDTO::setBoxes(const std::vector<std::shared_ptr<OrderParcelBoxDTO>>& value)
{
    m_Boxes = value;
    m_BoxesIsSet = true;
}

bool OrderShipmentDTO::boxesIsSet() const
{
    return m_BoxesIsSet;
}

void OrderShipmentDTO::unsetBoxes()
{
    m_BoxesIsSet = false;
}
}
}
}
}


