/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferRecommendationInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferRecommendationInfoDTO::OfferRecommendationInfoDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_RecommendedCofinancePriceIsSet = false;
    m_CompetitivenessThresholdsIsSet = false;
}

OfferRecommendationInfoDTO::~OfferRecommendationInfoDTO()
{
}

void OfferRecommendationInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferRecommendationInfoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_RecommendedCofinancePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("recommendedCofinancePrice"))] = ModelBase::toJson(m_RecommendedCofinancePrice);
    }
    if(m_CompetitivenessThresholdsIsSet)
    {
        val[utility::conversions::to_string_t(U("competitivenessThresholds"))] = ModelBase::toJson(m_CompetitivenessThresholds);
    }

    return val;
}

bool OfferRecommendationInfoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recommendedCofinancePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recommendedCofinancePrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setRecommendedCofinancePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecommendedCofinancePrice);
            setRecommendedCofinancePrice(refVal_setRecommendedCofinancePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("competitivenessThresholds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("competitivenessThresholds")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PriceCompetitivenessThresholdsDTO> refVal_setCompetitivenessThresholds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompetitivenessThresholds);
            setCompetitivenessThresholds(refVal_setCompetitivenessThresholds);
        }
    }
    return ok;
}

void OfferRecommendationInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_RecommendedCofinancePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recommendedCofinancePrice")), m_RecommendedCofinancePrice));
    }
    if(m_CompetitivenessThresholdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("competitivenessThresholds")), m_CompetitivenessThresholds));
    }
}

bool OfferRecommendationInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recommendedCofinancePrice"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setRecommendedCofinancePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recommendedCofinancePrice"))), refVal_setRecommendedCofinancePrice );
        setRecommendedCofinancePrice(refVal_setRecommendedCofinancePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("competitivenessThresholds"))))
    {
        std::shared_ptr<PriceCompetitivenessThresholdsDTO> refVal_setCompetitivenessThresholds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("competitivenessThresholds"))), refVal_setCompetitivenessThresholds );
        setCompetitivenessThresholds(refVal_setCompetitivenessThresholds);
    }
    return ok;
}

utility::string_t OfferRecommendationInfoDTO::getOfferId() const
{
    return m_OfferId;
}

void OfferRecommendationInfoDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool OfferRecommendationInfoDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void OfferRecommendationInfoDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::shared_ptr<BasePriceDTO> OfferRecommendationInfoDTO::getRecommendedCofinancePrice() const
{
    return m_RecommendedCofinancePrice;
}

void OfferRecommendationInfoDTO::setRecommendedCofinancePrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_RecommendedCofinancePrice = value;
    m_RecommendedCofinancePriceIsSet = true;
}

bool OfferRecommendationInfoDTO::recommendedCofinancePriceIsSet() const
{
    return m_RecommendedCofinancePriceIsSet;
}

void OfferRecommendationInfoDTO::unsetRecommendedCofinancePrice()
{
    m_RecommendedCofinancePriceIsSet = false;
}
std::shared_ptr<PriceCompetitivenessThresholdsDTO> OfferRecommendationInfoDTO::getCompetitivenessThresholds() const
{
    return m_CompetitivenessThresholds;
}

void OfferRecommendationInfoDTO::setCompetitivenessThresholds(const std::shared_ptr<PriceCompetitivenessThresholdsDTO>& value)
{
    m_CompetitivenessThresholds = value;
    m_CompetitivenessThresholdsIsSet = true;
}

bool OfferRecommendationInfoDTO::competitivenessThresholdsIsSet() const
{
    return m_CompetitivenessThresholdsIsSet;
}

void OfferRecommendationInfoDTO::unsetCompetitivenessThresholds()
{
    m_CompetitivenessThresholdsIsSet = false;
}
}
}
}
}


