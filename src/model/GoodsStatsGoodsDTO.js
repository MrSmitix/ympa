/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoodsStatsWarehouseDTO from './GoodsStatsWarehouseDTO';
import GoodsStatsWeightDimensionsDTO from './GoodsStatsWeightDimensionsDTO';
import TariffDTO from './TariffDTO';

/**
 * The GoodsStatsGoodsDTO model module.
 * @module model/GoodsStatsGoodsDTO
 * @version LATEST
 */
class GoodsStatsGoodsDTO {
    /**
     * Constructs a new <code>GoodsStatsGoodsDTO</code>.
     * Информация о товаре.
     * @alias module:model/GoodsStatsGoodsDTO
     */
    constructor() { 
        
        GoodsStatsGoodsDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoodsStatsGoodsDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoodsStatsGoodsDTO} obj Optional instance to populate.
     * @return {module:model/GoodsStatsGoodsDTO} The populated <code>GoodsStatsGoodsDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoodsStatsGoodsDTO();

            if (data.hasOwnProperty('shopSku')) {
                obj['shopSku'] = ApiClient.convertToType(data['shopSku'], 'String');
            }
            if (data.hasOwnProperty('marketSku')) {
                obj['marketSku'] = ApiClient.convertToType(data['marketSku'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('categoryId')) {
                obj['categoryId'] = ApiClient.convertToType(data['categoryId'], 'Number');
            }
            if (data.hasOwnProperty('categoryName')) {
                obj['categoryName'] = ApiClient.convertToType(data['categoryName'], 'String');
            }
            if (data.hasOwnProperty('weightDimensions')) {
                obj['weightDimensions'] = GoodsStatsWeightDimensionsDTO.constructFromObject(data['weightDimensions']);
            }
            if (data.hasOwnProperty('warehouses')) {
                obj['warehouses'] = ApiClient.convertToType(data['warehouses'], [GoodsStatsWarehouseDTO]);
            }
            if (data.hasOwnProperty('tariffs')) {
                obj['tariffs'] = ApiClient.convertToType(data['tariffs'], [TariffDTO]);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoodsStatsGoodsDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoodsStatsGoodsDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['shopSku'] && !(typeof data['shopSku'] === 'string' || data['shopSku'] instanceof String)) {
            throw new Error("Expected the field `shopSku` to be a primitive type in the JSON string but got " + data['shopSku']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['categoryName'] && !(typeof data['categoryName'] === 'string' || data['categoryName'] instanceof String)) {
            throw new Error("Expected the field `categoryName` to be a primitive type in the JSON string but got " + data['categoryName']);
        }
        // validate the optional field `weightDimensions`
        if (data['weightDimensions']) { // data not null
          GoodsStatsWeightDimensionsDTO.validateJSON(data['weightDimensions']);
        }
        if (data['warehouses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warehouses'])) {
                throw new Error("Expected the field `warehouses` to be an array in the JSON data but got " + data['warehouses']);
            }
            // validate the optional field `warehouses` (array)
            for (const item of data['warehouses']) {
                GoodsStatsWarehouseDTO.validateJSON(item);
            };
        }
        if (data['tariffs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tariffs'])) {
                throw new Error("Expected the field `tariffs` to be an array in the JSON data but got " + data['tariffs']);
            }
            // validate the optional field `tariffs` (array)
            for (const item of data['tariffs']) {
                TariffDTO.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pictures'])) {
            throw new Error("Expected the field `pictures` to be an array in the JSON data but got " + data['pictures']);
        }

        return true;
    }


}



/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} shopSku
 */
GoodsStatsGoodsDTO.prototype['shopSku'] = undefined;

/**
 * SKU на Маркете.
 * @member {Number} marketSku
 */
GoodsStatsGoodsDTO.prototype['marketSku'] = undefined;

/**
 * Название товара.
 * @member {String} name
 */
GoodsStatsGoodsDTO.prototype['name'] = undefined;

/**
 * Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
 * @member {Number} price
 */
GoodsStatsGoodsDTO.prototype['price'] = undefined;

/**
 * Идентификатор категории товара на Маркете.
 * @member {Number} categoryId
 */
GoodsStatsGoodsDTO.prototype['categoryId'] = undefined;

/**
 * Название категории товара на Маркете.
 * @member {String} categoryName
 */
GoodsStatsGoodsDTO.prototype['categoryName'] = undefined;

/**
 * @member {module:model/GoodsStatsWeightDimensionsDTO} weightDimensions
 */
GoodsStatsGoodsDTO.prototype['weightDimensions'] = undefined;

/**
 * Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
 * @member {Array.<module:model/GoodsStatsWarehouseDTO>} warehouses
 */
GoodsStatsGoodsDTO.prototype['warehouses'] = undefined;

/**
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
 * @member {Array.<module:model/TariffDTO>} tariffs
 */
GoodsStatsGoodsDTO.prototype['tariffs'] = undefined;

/**
 * Ссылки (URL) изображений товара в хорошем качестве.
 * @member {Array.<String>} pictures
 */
GoodsStatsGoodsDTO.prototype['pictures'] = undefined;






export default GoodsStatsGoodsDTO;

