/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateGoodsRealizationReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateGoodsRealizationReportRequest::GenerateGoodsRealizationReportRequest()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_Year = 0;
    m_YearIsSet = false;
    m_Month = 0;
    m_MonthIsSet = false;
}

GenerateGoodsRealizationReportRequest::~GenerateGoodsRealizationReportRequest()
{
}

void GenerateGoodsRealizationReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value GenerateGoodsRealizationReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_YearIsSet)
    {
        val[utility::conversions::to_string_t(U("year"))] = ModelBase::toJson(m_Year);
    }
    if(m_MonthIsSet)
    {
        val[utility::conversions::to_string_t(U("month"))] = ModelBase::toJson(m_Month);
    }

    return val;
}

bool GenerateGoodsRealizationReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("year"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("year")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setYear;
            ok &= ModelBase::fromJson(fieldValue, refVal_setYear);
            setYear(refVal_setYear);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("month"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("month")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMonth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMonth);
            setMonth(refVal_setMonth);
        }
    }
    return ok;
}

void GenerateGoodsRealizationReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_YearIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("year")), m_Year));
    }
    if(m_MonthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("month")), m_Month));
    }
}

bool GenerateGoodsRealizationReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("year"))))
    {
        int32_t refVal_setYear;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("year"))), refVal_setYear );
        setYear(refVal_setYear);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("month"))))
    {
        int32_t refVal_setMonth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("month"))), refVal_setMonth );
        setMonth(refVal_setMonth);
    }
    return ok;
}

int64_t GenerateGoodsRealizationReportRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GenerateGoodsRealizationReportRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool GenerateGoodsRealizationReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void GenerateGoodsRealizationReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
int32_t GenerateGoodsRealizationReportRequest::getYear() const
{
    return m_Year;
}

void GenerateGoodsRealizationReportRequest::setYear(int32_t value)
{
    m_Year = value;
    m_YearIsSet = true;
}

bool GenerateGoodsRealizationReportRequest::yearIsSet() const
{
    return m_YearIsSet;
}

void GenerateGoodsRealizationReportRequest::unsetYear()
{
    m_YearIsSet = false;
}
int32_t GenerateGoodsRealizationReportRequest::getMonth() const
{
    return m_Month;
}

void GenerateGoodsRealizationReportRequest::setMonth(int32_t value)
{
    m_Month = value;
    m_MonthIsSet = true;
}

bool GenerateGoodsRealizationReportRequest::monthIsSet() const
{
    return m_MonthIsSet;
}

void GenerateGoodsRealizationReportRequest::unsetMonth()
{
    m_MonthIsSet = false;
}
}
}
}
}


