/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderItemPromoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderItemPromoDTO::OrderItemPromoDTO()
{
    m_TypeIsSet = false;
    m_Discount = 0.0;
    m_DiscountIsSet = false;
    m_Subsidy = 0.0;
    m_SubsidyIsSet = false;
    m_ShopPromoId = utility::conversions::to_string_t("");
    m_ShopPromoIdIsSet = false;
    m_MarketPromoId = utility::conversions::to_string_t("");
    m_MarketPromoIdIsSet = false;
}

OrderItemPromoDTO::~OrderItemPromoDTO()
{
}

void OrderItemPromoDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderItemPromoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_DiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("discount"))] = ModelBase::toJson(m_Discount);
    }
    if(m_SubsidyIsSet)
    {
        val[utility::conversions::to_string_t(U("subsidy"))] = ModelBase::toJson(m_Subsidy);
    }
    if(m_ShopPromoIdIsSet)
    {
        val[utility::conversions::to_string_t(U("shopPromoId"))] = ModelBase::toJson(m_ShopPromoId);
    }
    if(m_MarketPromoIdIsSet)
    {
        val[utility::conversions::to_string_t(U("marketPromoId"))] = ModelBase::toJson(m_MarketPromoId);
    }

    return val;
}

bool OrderItemPromoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderPromoType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discount")));
        if(!fieldValue.is_null())
        {
            double refVal_setDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscount);
            setDiscount(refVal_setDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subsidy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subsidy")));
        if(!fieldValue.is_null())
        {
            double refVal_setSubsidy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubsidy);
            setSubsidy(refVal_setSubsidy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopPromoId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopPromoId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopPromoId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopPromoId);
            setShopPromoId(refVal_setShopPromoId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marketPromoId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marketPromoId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMarketPromoId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketPromoId);
            setMarketPromoId(refVal_setMarketPromoId);
        }
    }
    return ok;
}

void OrderItemPromoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_DiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discount")), m_Discount));
    }
    if(m_SubsidyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subsidy")), m_Subsidy));
    }
    if(m_ShopPromoIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopPromoId")), m_ShopPromoId));
    }
    if(m_MarketPromoIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marketPromoId")), m_MarketPromoId));
    }
}

bool OrderItemPromoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OrderPromoType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discount"))))
    {
        double refVal_setDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discount"))), refVal_setDiscount );
        setDiscount(refVal_setDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subsidy"))))
    {
        double refVal_setSubsidy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subsidy"))), refVal_setSubsidy );
        setSubsidy(refVal_setSubsidy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopPromoId"))))
    {
        utility::string_t refVal_setShopPromoId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopPromoId"))), refVal_setShopPromoId );
        setShopPromoId(refVal_setShopPromoId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marketPromoId"))))
    {
        utility::string_t refVal_setMarketPromoId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marketPromoId"))), refVal_setMarketPromoId );
        setMarketPromoId(refVal_setMarketPromoId);
    }
    return ok;
}

std::shared_ptr<OrderPromoType> OrderItemPromoDTO::getType() const
{
    return m_Type;
}

void OrderItemPromoDTO::setType(const std::shared_ptr<OrderPromoType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OrderItemPromoDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrderItemPromoDTO::unsetType()
{
    m_TypeIsSet = false;
}
double OrderItemPromoDTO::getDiscount() const
{
    return m_Discount;
}

void OrderItemPromoDTO::setDiscount(double value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}

bool OrderItemPromoDTO::discountIsSet() const
{
    return m_DiscountIsSet;
}

void OrderItemPromoDTO::unsetDiscount()
{
    m_DiscountIsSet = false;
}
double OrderItemPromoDTO::getSubsidy() const
{
    return m_Subsidy;
}

void OrderItemPromoDTO::setSubsidy(double value)
{
    m_Subsidy = value;
    m_SubsidyIsSet = true;
}

bool OrderItemPromoDTO::subsidyIsSet() const
{
    return m_SubsidyIsSet;
}

void OrderItemPromoDTO::unsetSubsidy()
{
    m_SubsidyIsSet = false;
}
utility::string_t OrderItemPromoDTO::getShopPromoId() const
{
    return m_ShopPromoId;
}

void OrderItemPromoDTO::setShopPromoId(const utility::string_t& value)
{
    m_ShopPromoId = value;
    m_ShopPromoIdIsSet = true;
}

bool OrderItemPromoDTO::shopPromoIdIsSet() const
{
    return m_ShopPromoIdIsSet;
}

void OrderItemPromoDTO::unsetShopPromoId()
{
    m_ShopPromoIdIsSet = false;
}
utility::string_t OrderItemPromoDTO::getMarketPromoId() const
{
    return m_MarketPromoId;
}

void OrderItemPromoDTO::setMarketPromoId(const utility::string_t& value)
{
    m_MarketPromoId = value;
    m_MarketPromoIdIsSet = true;
}

bool OrderItemPromoDTO::marketPromoIdIsSet() const
{
    return m_MarketPromoIdIsSet;
}

void OrderItemPromoDTO::unsetMarketPromoId()
{
    m_MarketPromoIdIsSet = false;
}
}
}
}
}


