/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetCampaignOffersRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetCampaignOffersRequest::GetCampaignOffersRequest()
{
    m_OfferIdsIsSet = false;
    m_StatusesIsSet = false;
    m_CategoryIdsIsSet = false;
    m_VendorNamesIsSet = false;
    m_TagsIsSet = false;
}

GetCampaignOffersRequest::~GetCampaignOffersRequest()
{
}

void GetCampaignOffersRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetCampaignOffersRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("offerIds"))] = ModelBase::toJson(m_OfferIds);
    }
    if(m_StatusesIsSet)
    {
        val[utility::conversions::to_string_t(U("statuses"))] = ModelBase::toJson(m_Statuses);
    }
    if(m_CategoryIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryIds"))] = ModelBase::toJson(m_CategoryIds);
    }
    if(m_VendorNamesIsSet)
    {
        val[utility::conversions::to_string_t(U("vendorNames"))] = ModelBase::toJson(m_VendorNames);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }

    return val;
}

bool GetCampaignOffersRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerIds")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferIds);
            setOfferIds(refVal_setOfferIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferCampaignStatusType>> refVal_setStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatuses);
            setStatuses(refVal_setStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setCategoryIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryIds);
            setCategoryIds(refVal_setCategoryIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendorNames"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendorNames")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setVendorNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendorNames);
            setVendorNames(refVal_setVendorNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    return ok;
}

void GetCampaignOffersRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerIds")), m_OfferIds));
    }
    if(m_StatusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statuses")), m_Statuses));
    }
    if(m_CategoryIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryIds")), m_CategoryIds));
    }
    if(m_VendorNamesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendorNames")), m_VendorNames));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
}

bool GetCampaignOffersRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerIds"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerIds"))), refVal_setOfferIds );
        setOfferIds(refVal_setOfferIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statuses"))))
    {
        std::vector<std::shared_ptr<OfferCampaignStatusType>> refVal_setStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statuses"))), refVal_setStatuses );
        setStatuses(refVal_setStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryIds"))))
    {
        std::vector<int32_t> refVal_setCategoryIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryIds"))), refVal_setCategoryIds );
        setCategoryIds(refVal_setCategoryIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendorNames"))))
    {
        std::vector<utility::string_t> refVal_setVendorNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendorNames"))), refVal_setVendorNames );
        setVendorNames(refVal_setVendorNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    return ok;
}

std::vector<std::shared_ptr<utility::string_t>>& GetCampaignOffersRequest::getOfferIds()
{
    return m_OfferIds;
}

void GetCampaignOffersRequest::setOfferIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}

bool GetCampaignOffersRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}

void GetCampaignOffersRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}
std::vector<std::shared_ptr<OfferCampaignStatusType>>& GetCampaignOffersRequest::getStatuses()
{
    return m_Statuses;
}

void GetCampaignOffersRequest::setStatuses(const std::vector<std::shared_ptr<OfferCampaignStatusType>>& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}

bool GetCampaignOffersRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}

void GetCampaignOffersRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}
std::vector<int32_t>& GetCampaignOffersRequest::getCategoryIds()
{
    return m_CategoryIds;
}

void GetCampaignOffersRequest::setCategoryIds(std::vector<int32_t> value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}

bool GetCampaignOffersRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}

void GetCampaignOffersRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}
std::vector<utility::string_t>& GetCampaignOffersRequest::getVendorNames()
{
    return m_VendorNames;
}

void GetCampaignOffersRequest::setVendorNames(const std::vector<utility::string_t>& value)
{
    m_VendorNames = value;
    m_VendorNamesIsSet = true;
}

bool GetCampaignOffersRequest::vendorNamesIsSet() const
{
    return m_VendorNamesIsSet;
}

void GetCampaignOffersRequest::unsetVendorNames()
{
    m_VendorNamesIsSet = false;
}
std::vector<utility::string_t>& GetCampaignOffersRequest::getTags()
{
    return m_Tags;
}

void GetCampaignOffersRequest::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool GetCampaignOffersRequest::tagsIsSet() const
{
    return m_TagsIsSet;
}

void GetCampaignOffersRequest::unsetTags()
{
    m_TagsIsSet = false;
}
}
}
}
}


