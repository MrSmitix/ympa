/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/BidRecommendationItemDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BidRecommendationItemDTO::BidRecommendationItemDTO()
{
    m_Bid = 0;
    m_BidIsSet = false;
    m_ShowPercent = 0L;
    m_ShowPercentIsSet = false;
}

BidRecommendationItemDTO::~BidRecommendationItemDTO()
{
}

void BidRecommendationItemDTO::validate()
{
    // TODO: implement validation
}

web::json::value BidRecommendationItemDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BidIsSet)
    {
        val[utility::conversions::to_string_t(U("bid"))] = ModelBase::toJson(m_Bid);
    }
    if(m_ShowPercentIsSet)
    {
        val[utility::conversions::to_string_t(U("showPercent"))] = ModelBase::toJson(m_ShowPercent);
    }

    return val;
}

bool BidRecommendationItemDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("bid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBid);
            setBid(refVal_setBid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("showPercent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("showPercent")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setShowPercent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShowPercent);
            setShowPercent(refVal_setShowPercent);
        }
    }
    return ok;
}

void BidRecommendationItemDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid")), m_Bid));
    }
    if(m_ShowPercentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("showPercent")), m_ShowPercent));
    }
}

bool BidRecommendationItemDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("bid"))))
    {
        int32_t refVal_setBid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid"))), refVal_setBid );
        setBid(refVal_setBid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("showPercent"))))
    {
        int64_t refVal_setShowPercent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("showPercent"))), refVal_setShowPercent );
        setShowPercent(refVal_setShowPercent);
    }
    return ok;
}

int32_t BidRecommendationItemDTO::getBid() const
{
    return m_Bid;
}

void BidRecommendationItemDTO::setBid(int32_t value)
{
    m_Bid = value;
    m_BidIsSet = true;
}

bool BidRecommendationItemDTO::bidIsSet() const
{
    return m_BidIsSet;
}

void BidRecommendationItemDTO::unsetBid()
{
    m_BidIsSet = false;
}
int64_t BidRecommendationItemDTO::getShowPercent() const
{
    return m_ShowPercent;
}

void BidRecommendationItemDTO::setShowPercent(int64_t value)
{
    m_ShowPercent = value;
    m_ShowPercentIsSet = true;
}

bool BidRecommendationItemDTO::showPercentIsSet() const
{
    return m_ShowPercentIsSet;
}

void BidRecommendationItemDTO::unsetShowPercent()
{
    m_ShowPercentIsSet = false;
}
}
}
}
}


