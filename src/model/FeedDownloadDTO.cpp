/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedDownloadDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedDownloadDTO::FeedDownloadDTO()
{
    m_StatusIsSet = false;
    m_ErrorIsSet = false;
}

FeedDownloadDTO::~FeedDownloadDTO()
{
}

void FeedDownloadDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedDownloadDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }

    return val;
}

bool FeedDownloadDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedDownloadErrorDTO> refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    return ok;
}

void FeedDownloadDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
}

bool FeedDownloadDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<FeedStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        std::shared_ptr<FeedDownloadErrorDTO> refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    return ok;
}

std::shared_ptr<FeedStatusType> FeedDownloadDTO::getStatus() const
{
    return m_Status;
}

void FeedDownloadDTO::setStatus(const std::shared_ptr<FeedStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool FeedDownloadDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void FeedDownloadDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<FeedDownloadErrorDTO> FeedDownloadDTO::getError() const
{
    return m_Error;
}

void FeedDownloadDTO::setError(const std::shared_ptr<FeedDownloadErrorDTO>& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool FeedDownloadDTO::errorIsSet() const
{
    return m_ErrorIsSet;
}

void FeedDownloadDTO::unsetError()
{
    m_ErrorIsSet = false;
}
}
}
}
}


