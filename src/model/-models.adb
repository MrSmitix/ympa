--  Партнерский API Маркета
--  API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
--
--  The version of the OpenAPI document: LATEST
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.8.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;


   function To_AddOffersToArchiveErrorType_Type (Value : in String) return .Models.AddOffersToArchiveErrorType_Type is
   begin
      if Value = "OFFER_HAS_STOCKS" then
         return OFFER_HAS_STOCKS;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_AddOffersToArchiveErrorType_Type;

   function To_String (Value : in .Models.AddOffersToArchiveErrorType_Type) return String is
   begin
      case Value is
         when OFFER_HAS_STOCKS =>
            return "OFFER_HAS_STOCKS";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AddOffersToArchiveErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddOffersToArchiveErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AddOffersToArchiveErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AddOffersToArchiveErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AddOffersToArchiveErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AddOffersToArchiveErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AddOffersToArchiveRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddOffersToArchiveRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AddOffersToArchiveRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AddOffersToArchiveRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AddOffersToArchiveRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AffectedOrderQualityRatingComponentType_Type (Value : in String) return .Models.AffectedOrderQualityRatingComponentType_Type is
   begin
      if Value = "DBS_CANCELLATION_RATE" then
         return DBS_CANCELLATION_RATE;
      end if;
      if Value = "DBS_LATE_DELIVERY_RATE" then
         return DBS_LATE_DELIVERY_RATE;
      end if;
      if Value = "FBS_CANCELLATION_RATE" then
         return FBS_CANCELLATION_RATE;
      end if;
      if Value = "FBS_LATE_SHIP_RATE" then
         return FBS_LATE_SHIP_RATE;
      end if;
      raise Constraint_Error;
   end To_AffectedOrderQualityRatingComponentType_Type;

   function To_String (Value : in .Models.AffectedOrderQualityRatingComponentType_Type) return String is
   begin
      case Value is
         when DBS_CANCELLATION_RATE =>
            return "DBS_CANCELLATION_RATE";

         when DBS_LATE_DELIVERY_RATE =>
            return "DBS_LATE_DELIVERY_RATE";

         when FBS_CANCELLATION_RATE =>
            return "FBS_CANCELLATION_RATE";

         when FBS_LATE_SHIP_RATE =>
            return "FBS_LATE_SHIP_RATE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AffectedOrderQualityRatingComponentType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AffectedOrderQualityRatingComponentType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AffectedOrderQualityRatingComponentType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AffectedOrderQualityRatingComponentType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AffectedOrderQualityRatingComponentType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AffectedOrderQualityRatingComponentType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_AgeUnitType_Type (Value : in String) return .Models.AgeUnitType_Type is
   begin
      if Value = "YEAR" then
         return YEAR;
      end if;
      if Value = "MONTH" then
         return MONTH;
      end if;
      raise Constraint_Error;
   end To_AgeUnitType_Type;

   function To_String (Value : in .Models.AgeUnitType_Type) return String is
   begin
      case Value is
         when YEAR =>
            return "YEAR";

         when MONTH =>
            return "MONTH";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AgeUnitType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AgeUnitType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AgeUnitType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_AgeUnitType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AgeUnitType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AgeUnitType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("code", Value.Code);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ApiResponseStatusType_Type (Value : in String) return .Models.ApiResponseStatusType_Type is
   begin
      if Value = "OK" then
         return OK;
      end if;
      if Value = "ERROR" then
         return ERROR;
      end if;
      raise Constraint_Error;
   end To_ApiResponseStatusType_Type;

   function To_String (Value : in .Models.ApiResponseStatusType_Type) return String is
   begin
      case Value is
         when OK =>
            return "OK";

         when ERROR =>
            return "ERROR";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiResponseStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiResponseStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiResponseStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ApiResponseStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiResponseStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiResponseStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BidRecommendationItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("bid", Value.Bid);
      Into.Write_Long_Entity ("showPercent", Value.Show_Percent);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BidRecommendationItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BidRecommendationItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
      Swagger.Streams.Deserialize (Object, "showPercent", Value.Show_Percent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BidRecommendationItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BidRecommendationItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Bid_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Bid_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Bid_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Bid_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Bid_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BriefOrderItemInstanceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cis.Is_Null then
         Into.Write_Entity ("cis", Value.Cis);
      end if;
      if not Value.Uin.Is_Null then
         Into.Write_Entity ("uin", Value.Uin);
      end if;
      if not Value.Rnpt.Is_Null then
         Into.Write_Entity ("rnpt", Value.Rnpt);
      end if;
      if not Value.Gtd.Is_Null then
         Into.Write_Entity ("gtd", Value.Gtd);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BriefOrderItemInstanceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BriefOrderItemInstanceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cis", Value.Cis);
      Swagger.Streams.Deserialize (Object, "uin", Value.Uin);
      Swagger.Streams.Deserialize (Object, "rnpt", Value.Rnpt);
      Swagger.Streams.Deserialize (Object, "gtd", Value.Gtd);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BriefOrderItemInstanceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BriefOrderItemInstanceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculateTariffsOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("categoryId", Value.Category_Id);
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "weight", Value.Weight);
      if not Value.Quantity.Is_Null then
         Into.Write_Entity ("quantity", Value.Quantity);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculateTariffsOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculateTariffsOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "quantity", Value.Quantity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculateTariffsOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculateTariffsOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CalculatedTariffType_Type (Value : in String) return .Models.CalculatedTariffType_Type is
   begin
      if Value = "AGENCY_COMMISSION" then
         return AGENCY_COMMISSION;
      end if;
      if Value = "PAYMENT_TRANSFER" then
         return PAYMENT_TRANSFER;
      end if;
      if Value = "FEE" then
         return FEE;
      end if;
      if Value = "DELIVERY_TO_CUSTOMER" then
         return DELIVERY_TO_CUSTOMER;
      end if;
      if Value = "CROSSREGIONAL_DELIVERY" then
         return CROSSREGIONAL_DELIVERY;
      end if;
      if Value = "EXPRESS_DELIVERY" then
         return EXPRESS_DELIVERY;
      end if;
      if Value = "SORTING" then
         return SORTING;
      end if;
      if Value = "MIDDLE_MILE" then
         return MIDDLE_MILE;
      end if;
      raise Constraint_Error;
   end To_CalculatedTariffType_Type;

   function To_String (Value : in .Models.CalculatedTariffType_Type) return String is
   begin
      case Value is
         when AGENCY_COMMISSION =>
            return "AGENCY_COMMISSION";

         when PAYMENT_TRANSFER =>
            return "PAYMENT_TRANSFER";

         when FEE =>
            return "FEE";

         when DELIVERY_TO_CUSTOMER =>
            return "DELIVERY_TO_CUSTOMER";

         when CROSSREGIONAL_DELIVERY =>
            return "CROSSREGIONAL_DELIVERY";

         when EXPRESS_DELIVERY =>
            return "EXPRESS_DELIVERY";

         when SORTING =>
            return "SORTING";

         when MIDDLE_MILE =>
            return "MIDDLE_MILE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculatedTariffType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculatedTariffType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculatedTariffType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CalculatedTariffType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculatedTariffType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculatedTariffType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CampaignSettingsScheduleSourceType_Type (Value : in String) return .Models.CampaignSettingsScheduleSourceType_Type is
   begin
      if Value = "WEB" then
         return WEB;
      end if;
      if Value = "YML" then
         return YML;
      end if;
      raise Constraint_Error;
   end To_CampaignSettingsScheduleSourceType_Type;

   function To_String (Value : in .Models.CampaignSettingsScheduleSourceType_Type) return String is
   begin
      case Value is
         when WEB =>
            return "WEB";

         when YML =>
            return "YML";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSettingsScheduleSourceType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSettingsScheduleSourceType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSettingsScheduleSourceType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CampaignSettingsScheduleSourceType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSettingsScheduleSourceType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSettingsScheduleSourceType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSettingsTimePeriodDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.From_Date.Is_Null then
         Into.Write_Entity ("fromDate", Value.From_Date);
      end if;
      if not Value.To_Date.Is_Null then
         Into.Write_Entity ("toDate", Value.To_Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSettingsTimePeriodDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSettingsTimePeriodDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "fromDate", Value.From_Date);
      Swagger.Streams.Deserialize (Object, "toDate", Value.To_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSettingsTimePeriodDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSettingsTimePeriodDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CategoryErrorType_Type (Value : in String) return .Models.CategoryErrorType_Type is
   begin
      if Value = "UNKNOWN_CATEGORY" then
         return UNKNOWN_CATEGORY;
      end if;
      if Value = "CATEGORY_IS_NOT_LEAF" then
         return CATEGORY_IS_NOT_LEAF;
      end if;
      raise Constraint_Error;
   end To_CategoryErrorType_Type;

   function To_String (Value : in .Models.CategoryErrorType_Type) return String is
   begin
      case Value is
         when UNKNOWN_CATEGORY =>
            return "UNKNOWN_CATEGORY";

         when CATEGORY_IS_NOT_LEAF =>
            return "CATEGORY_IS_NOT_LEAF";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CategoryErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryId_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChannelType_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChannelType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChannelType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChannelType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChannelType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChatMessagePayloadDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("url", Value.Url);
      Into.Write_Entity ("size", Value.Size);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChatMessagePayloadDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChatMessagePayloadDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChatMessagePayloadDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChatMessagePayloadDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ChatMessageSenderType_Type (Value : in String) return .Models.ChatMessageSenderType_Type is
   begin
      if Value = "PARTNER" then
         return PARTNER;
      end if;
      if Value = "CUSTOMER" then
         return CUSTOMER;
      end if;
      if Value = "MARKET" then
         return MARKET;
      end if;
      if Value = "SUPPORT" then
         return SUPPORT;
      end if;
      raise Constraint_Error;
   end To_ChatMessageSenderType_Type;

   function To_String (Value : in .Models.ChatMessageSenderType_Type) return String is
   begin
      case Value is
         when PARTNER =>
            return "PARTNER";

         when CUSTOMER =>
            return "CUSTOMER";

         when MARKET =>
            return "MARKET";

         when SUPPORT =>
            return "SUPPORT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChatMessageSenderType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChatMessageSenderType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChatMessageSenderType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ChatMessageSenderType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChatMessageSenderType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChatMessageSenderType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ChatStatusType_Type (Value : in String) return .Models.ChatStatusType_Type is
   begin
      if Value = "NEW" then
         return NEW;
      end if;
      if Value = "WAITING_FOR_CUSTOMER" then
         return WAITING_FOR_CUSTOMER;
      end if;
      if Value = "WAITING_FOR_PARTNER" then
         return WAITING_FOR_PARTNER;
      end if;
      if Value = "WAITING_FOR_ARBITER" then
         return WAITING_FOR_ARBITER;
      end if;
      if Value = "WAITING_FOR_MARKET" then
         return WAITING_FOR_MARKET;
      end if;
      if Value = "FINISHED" then
         return FINISHED;
      end if;
      raise Constraint_Error;
   end To_ChatStatusType_Type;

   function To_String (Value : in .Models.ChatStatusType_Type) return String is
   begin
      case Value is
         when NEW =>
            return "NEW";

         when WAITING_FOR_CUSTOMER =>
            return "WAITING_FOR_CUSTOMER";

         when WAITING_FOR_PARTNER =>
            return "WAITING_FOR_PARTNER";

         when WAITING_FOR_ARBITER =>
            return "WAITING_FOR_ARBITER";

         when WAITING_FOR_MARKET =>
            return "WAITING_FOR_MARKET";

         when FINISHED =>
            return "FINISHED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChatStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChatStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChatStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ChatStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChatStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChatStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ChatType_Type (Value : in String) return .Models.ChatType_Type is
   begin
      if Value = "CHAT" then
         return CHAT;
      end if;
      if Value = "ARBITRAGE" then
         return ARBITRAGE;
      end if;
      raise Constraint_Error;
   end To_ChatType_Type;

   function To_String (Value : in .Models.ChatType_Type) return String is
   begin
      case Value is
         when CHAT =>
            return "CHAT";

         when ARBITRAGE =>
            return "ARBITRAGE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChatType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChatType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChatType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ChatType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChatType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChatType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Cis_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Cis_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Cis_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Cis_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Cis_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConfirmPricesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConfirmPricesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConfirmPricesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConfirmPricesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConfirmPricesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ConfirmShipmentRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.External_Shipment_Id.Is_Null then
         Into.Write_Entity ("externalShipmentId", Value.External_Shipment_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ConfirmShipmentRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ConfirmShipmentRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "externalShipmentId", Value.External_Shipment_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ConfirmShipmentRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ConfirmShipmentRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateChatRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateChatRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateChatRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateChatRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateChatRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateChatResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("chatId", Value.Chat_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateChatResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateChatResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "chatId", Value.Chat_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateChatResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateChatResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_CurrencyType_Type (Value : in String) return .Models.CurrencyType_Type is
   begin
      if Value = "RUR" then
         return RUR;
      end if;
      if Value = "USD" then
         return USD;
      end if;
      if Value = "EUR" then
         return EUR;
      end if;
      if Value = "UAH" then
         return UAH;
      end if;
      if Value = "AUD" then
         return AUD;
      end if;
      if Value = "GBP" then
         return GBP;
      end if;
      if Value = "BYR" then
         return BYR;
      end if;
      if Value = "BYN" then
         return BYN;
      end if;
      if Value = "DKK" then
         return DKK;
      end if;
      if Value = "ISK" then
         return ISK;
      end if;
      if Value = "KZT" then
         return KZT;
      end if;
      if Value = "CAD" then
         return CAD;
      end if;
      if Value = "CNY" then
         return CNY;
      end if;
      if Value = "NOK" then
         return NOK;
      end if;
      if Value = "XDR" then
         return XDR;
      end if;
      if Value = "SGD" then
         return SGD;
      end if;
      if Value = "TRY" then
         return TRY;
      end if;
      if Value = "SEK" then
         return SEK;
      end if;
      if Value = "CHF" then
         return CHF;
      end if;
      if Value = "JPY" then
         return JPY;
      end if;
      if Value = "AZN" then
         return AZN;
      end if;
      if Value = "ALL" then
         return ALL;
      end if;
      if Value = "DZD" then
         return DZD;
      end if;
      if Value = "AOA" then
         return AOA;
      end if;
      if Value = "ARS" then
         return ARS;
      end if;
      if Value = "AMD" then
         return AMD;
      end if;
      if Value = "AFN" then
         return AFN;
      end if;
      if Value = "BHD" then
         return BHD;
      end if;
      if Value = "BGN" then
         return BGN;
      end if;
      if Value = "BOB" then
         return BOB;
      end if;
      if Value = "BWP" then
         return BWP;
      end if;
      if Value = "BND" then
         return BND;
      end if;
      if Value = "BRL" then
         return BRL;
      end if;
      if Value = "BIF" then
         return BIF;
      end if;
      if Value = "HUF" then
         return HUF;
      end if;
      if Value = "VEF" then
         return VEF;
      end if;
      if Value = "KPW" then
         return KPW;
      end if;
      if Value = "VND" then
         return VND;
      end if;
      if Value = "GMD" then
         return GMD;
      end if;
      if Value = "GHS" then
         return GHS;
      end if;
      if Value = "GNF" then
         return GNF;
      end if;
      if Value = "HKD" then
         return HKD;
      end if;
      if Value = "GEL" then
         return GEL;
      end if;
      if Value = "AED" then
         return AED;
      end if;
      if Value = "EGP" then
         return EGP;
      end if;
      if Value = "ZMK" then
         return ZMK;
      end if;
      if Value = "ILS" then
         return ILS;
      end if;
      if Value = "INR" then
         return INR;
      end if;
      if Value = "IDR" then
         return IDR;
      end if;
      if Value = "JOD" then
         return JOD;
      end if;
      if Value = "IQD" then
         return IQD;
      end if;
      if Value = "IRR" then
         return IRR;
      end if;
      if Value = "YER" then
         return YER;
      end if;
      if Value = "QAR" then
         return QAR;
      end if;
      if Value = "KES" then
         return KES;
      end if;
      if Value = "KGS" then
         return KGS;
      end if;
      if Value = "COP" then
         return COP;
      end if;
      if Value = "CDF" then
         return CDF;
      end if;
      if Value = "CRC" then
         return CRC;
      end if;
      if Value = "KWD" then
         return KWD;
      end if;
      if Value = "CUP" then
         return CUP;
      end if;
      if Value = "LAK" then
         return LAK;
      end if;
      if Value = "LVL" then
         return LVL;
      end if;
      if Value = "SLL" then
         return SLL;
      end if;
      if Value = "LBP" then
         return LBP;
      end if;
      if Value = "LYD" then
         return LYD;
      end if;
      if Value = "SZL" then
         return SZL;
      end if;
      if Value = "LTL" then
         return LTL;
      end if;
      if Value = "MUR" then
         return MUR;
      end if;
      if Value = "MRO" then
         return MRO;
      end if;
      if Value = "MKD" then
         return MKD;
      end if;
      if Value = "MWK" then
         return MWK;
      end if;
      if Value = "MGA" then
         return MGA;
      end if;
      if Value = "MYR" then
         return MYR;
      end if;
      if Value = "MAD" then
         return MAD;
      end if;
      if Value = "MXN" then
         return MXN;
      end if;
      if Value = "MZN" then
         return MZN;
      end if;
      if Value = "MDL" then
         return MDL;
      end if;
      if Value = "MNT" then
         return MNT;
      end if;
      if Value = "NPR" then
         return NPR;
      end if;
      if Value = "NGN" then
         return NGN;
      end if;
      if Value = "NIO" then
         return NIO;
      end if;
      if Value = "NZD" then
         return NZD;
      end if;
      if Value = "OMR" then
         return OMR;
      end if;
      if Value = "PKR" then
         return PKR;
      end if;
      if Value = "PYG" then
         return PYG;
      end if;
      if Value = "PEN" then
         return PEN;
      end if;
      if Value = "PLN" then
         return PLN;
      end if;
      if Value = "KHR" then
         return KHR;
      end if;
      if Value = "SAR" then
         return SAR;
      end if;
      if Value = "RON" then
         return RON;
      end if;
      if Value = "SCR" then
         return SCR;
      end if;
      if Value = "SYP" then
         return SYP;
      end if;
      if Value = "SKK" then
         return SKK;
      end if;
      if Value = "SOS" then
         return SOS;
      end if;
      if Value = "SDG" then
         return SDG;
      end if;
      if Value = "SRD" then
         return SRD;
      end if;
      if Value = "TJS" then
         return TJS;
      end if;
      if Value = "THB" then
         return THB;
      end if;
      if Value = "TWD" then
         return TWD;
      end if;
      if Value = "BDT" then
         return BDT;
      end if;
      if Value = "TZS" then
         return TZS;
      end if;
      if Value = "TND" then
         return TND;
      end if;
      if Value = "TMM" then
         return TMM;
      end if;
      if Value = "UGX" then
         return UGX;
      end if;
      if Value = "UZS" then
         return UZS;
      end if;
      if Value = "UYU" then
         return UYU;
      end if;
      if Value = "PHP" then
         return PHP;
      end if;
      if Value = "DJF" then
         return DJF;
      end if;
      if Value = "XAF" then
         return XAF;
      end if;
      if Value = "XOF" then
         return XOF;
      end if;
      if Value = "HRK" then
         return HRK;
      end if;
      if Value = "CZK" then
         return CZK;
      end if;
      if Value = "CLP" then
         return CLP;
      end if;
      if Value = "LKR" then
         return LKR;
      end if;
      if Value = "EEK" then
         return EEK;
      end if;
      if Value = "ETB" then
         return ETB;
      end if;
      if Value = "RSD" then
         return RSD;
      end if;
      if Value = "ZAR" then
         return ZAR;
      end if;
      if Value = "KRW" then
         return KRW;
      end if;
      if Value = "NAD" then
         return NAD;
      end if;
      if Value = "TL" then
         return TL;
      end if;
      if Value = "UE" then
         return UE;
      end if;
      raise Constraint_Error;
   end To_CurrencyType_Type;

   function To_String (Value : in .Models.CurrencyType_Type) return String is
   begin
      case Value is
         when RUR =>
            return "RUR";

         when USD =>
            return "USD";

         when EUR =>
            return "EUR";

         when UAH =>
            return "UAH";

         when AUD =>
            return "AUD";

         when GBP =>
            return "GBP";

         when BYR =>
            return "BYR";

         when BYN =>
            return "BYN";

         when DKK =>
            return "DKK";

         when ISK =>
            return "ISK";

         when KZT =>
            return "KZT";

         when CAD =>
            return "CAD";

         when CNY =>
            return "CNY";

         when NOK =>
            return "NOK";

         when XDR =>
            return "XDR";

         when SGD =>
            return "SGD";

         when TRY =>
            return "TRY";

         when SEK =>
            return "SEK";

         when CHF =>
            return "CHF";

         when JPY =>
            return "JPY";

         when AZN =>
            return "AZN";

         when ALL =>
            return "ALL";

         when DZD =>
            return "DZD";

         when AOA =>
            return "AOA";

         when ARS =>
            return "ARS";

         when AMD =>
            return "AMD";

         when AFN =>
            return "AFN";

         when BHD =>
            return "BHD";

         when BGN =>
            return "BGN";

         when BOB =>
            return "BOB";

         when BWP =>
            return "BWP";

         when BND =>
            return "BND";

         when BRL =>
            return "BRL";

         when BIF =>
            return "BIF";

         when HUF =>
            return "HUF";

         when VEF =>
            return "VEF";

         when KPW =>
            return "KPW";

         when VND =>
            return "VND";

         when GMD =>
            return "GMD";

         when GHS =>
            return "GHS";

         when GNF =>
            return "GNF";

         when HKD =>
            return "HKD";

         when GEL =>
            return "GEL";

         when AED =>
            return "AED";

         when EGP =>
            return "EGP";

         when ZMK =>
            return "ZMK";

         when ILS =>
            return "ILS";

         when INR =>
            return "INR";

         when IDR =>
            return "IDR";

         when JOD =>
            return "JOD";

         when IQD =>
            return "IQD";

         when IRR =>
            return "IRR";

         when YER =>
            return "YER";

         when QAR =>
            return "QAR";

         when KES =>
            return "KES";

         when KGS =>
            return "KGS";

         when COP =>
            return "COP";

         when CDF =>
            return "CDF";

         when CRC =>
            return "CRC";

         when KWD =>
            return "KWD";

         when CUP =>
            return "CUP";

         when LAK =>
            return "LAK";

         when LVL =>
            return "LVL";

         when SLL =>
            return "SLL";

         when LBP =>
            return "LBP";

         when LYD =>
            return "LYD";

         when SZL =>
            return "SZL";

         when LTL =>
            return "LTL";

         when MUR =>
            return "MUR";

         when MRO =>
            return "MRO";

         when MKD =>
            return "MKD";

         when MWK =>
            return "MWK";

         when MGA =>
            return "MGA";

         when MYR =>
            return "MYR";

         when MAD =>
            return "MAD";

         when MXN =>
            return "MXN";

         when MZN =>
            return "MZN";

         when MDL =>
            return "MDL";

         when MNT =>
            return "MNT";

         when NPR =>
            return "NPR";

         when NGN =>
            return "NGN";

         when NIO =>
            return "NIO";

         when NZD =>
            return "NZD";

         when OMR =>
            return "OMR";

         when PKR =>
            return "PKR";

         when PYG =>
            return "PYG";

         when PEN =>
            return "PEN";

         when PLN =>
            return "PLN";

         when KHR =>
            return "KHR";

         when SAR =>
            return "SAR";

         when RON =>
            return "RON";

         when SCR =>
            return "SCR";

         when SYP =>
            return "SYP";

         when SKK =>
            return "SKK";

         when SOS =>
            return "SOS";

         when SDG =>
            return "SDG";

         when SRD =>
            return "SRD";

         when TJS =>
            return "TJS";

         when THB =>
            return "THB";

         when TWD =>
            return "TWD";

         when BDT =>
            return "BDT";

         when TZS =>
            return "TZS";

         when TND =>
            return "TND";

         when TMM =>
            return "TMM";

         when UGX =>
            return "UGX";

         when UZS =>
            return "UZS";

         when UYU =>
            return "UYU";

         when PHP =>
            return "PHP";

         when DJF =>
            return "DJF";

         when XAF =>
            return "XAF";

         when XOF =>
            return "XOF";

         when HRK =>
            return "HRK";

         when CZK =>
            return "CZK";

         when CLP =>
            return "CLP";

         when LKR =>
            return "LKR";

         when EEK =>
            return "EEK";

         when ETB =>
            return "ETB";

         when RSD =>
            return "RSD";

         when ZAR =>
            return "ZAR";

         when KRW =>
            return "KRW";

         when NAD =>
            return "NAD";

         when TL =>
            return "TL";

         when UE =>
            return "UE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CurrencyType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CurrencyType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CurrencyType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_CurrencyType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CurrencyType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CurrencyType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DateDdMmYyyyHhMmSs_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DateDdMmYyyyHhMmSs_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DateDdMmYyyyHhMmSs_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DateDdMmYyyyHhMmSs_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DateDdMmYyyyHhMmSs_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DateDdMmYyyy_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DateDdMmYyyy_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DateDdMmYyyy_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DateDdMmYyyy_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DateDdMmYyyy_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_DayOfWeekType_Type (Value : in String) return .Models.DayOfWeekType_Type is
   begin
      if Value = "MONDAY" then
         return MONDAY;
      end if;
      if Value = "TUESDAY" then
         return TUESDAY;
      end if;
      if Value = "WEDNESDAY" then
         return WEDNESDAY;
      end if;
      if Value = "THURSDAY" then
         return THURSDAY;
      end if;
      if Value = "FRIDAY" then
         return FRIDAY;
      end if;
      if Value = "SATURDAY" then
         return SATURDAY;
      end if;
      if Value = "SUNDAY" then
         return SUNDAY;
      end if;
      raise Constraint_Error;
   end To_DayOfWeekType_Type;

   function To_String (Value : in .Models.DayOfWeekType_Type) return String is
   begin
      case Value is
         when MONDAY =>
            return "MONDAY";

         when TUESDAY =>
            return "TUESDAY";

         when WEDNESDAY =>
            return "WEDNESDAY";

         when THURSDAY =>
            return "THURSDAY";

         when FRIDAY =>
            return "FRIDAY";

         when SATURDAY =>
            return "SATURDAY";

         when SUNDAY =>
            return "SUNDAY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DayOfWeekType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DayOfWeekType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DayOfWeekType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_DayOfWeekType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DayOfWeekType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DayOfWeekType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteCampaignOffersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "notDeletedOfferIds", Value.Not_Deleted_Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteCampaignOffersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteCampaignOffersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "notDeletedOfferIds", Value.Not_Deleted_Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteCampaignOffersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteCampaignOffersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteCampaignOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteCampaignOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteCampaignOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteCampaignOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteCampaignOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteGoodsFeedbackCommentRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteGoodsFeedbackCommentRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteGoodsFeedbackCommentRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteGoodsFeedbackCommentRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteGoodsFeedbackCommentRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteOffersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "notDeletedOfferIds", Value.Not_Deleted_Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteOffersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteOffersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "notDeletedOfferIds", Value.Not_Deleted_Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteOffersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteOffersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteOffersFromArchiveDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "notUnarchivedOfferIds", Value.Not_Unarchived_Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteOffersFromArchiveDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteOffersFromArchiveDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "notUnarchivedOfferIds", Value.Not_Unarchived_Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteOffersFromArchiveDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteOffersFromArchiveDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteOffersFromArchiveRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteOffersFromArchiveRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteOffersFromArchiveRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteOffersFromArchiveRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteOffersFromArchiveRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePromoOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("promoId", Value.Promo_Id);
      if not Value.Delete_All_Offers.Is_Null then
         Into.Write_Entity ("deleteAllOffers", Value.Delete_All_Offers);
      end if;
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePromoOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePromoOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "promoId", Value.Promo_Id);
      Swagger.Streams.Deserialize (Object, "deleteAllOffers", Value.Delete_All_Offers);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePromoOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePromoOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeliveryServiceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeliveryServiceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeliveryServiceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeliveryServiceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeliveryServiceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeliveryServiceInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeliveryServiceInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeliveryServiceInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeliveryServiceInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeliveryServiceInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_EacVerificationStatusType_Type (Value : in String) return .Models.EacVerificationStatusType_Type is
   begin
      if Value = "ACCEPTED" then
         return ACCEPTED;
      end if;
      if Value = "REJECTED" then
         return REJECTED;
      end if;
      if Value = "NEED_UPDATE" then
         return NEED_UPDATE;
      end if;
      raise Constraint_Error;
   end To_EacVerificationStatusType_Type;

   function To_String (Value : in .Models.EacVerificationStatusType_Type) return String is
   begin
      case Value is
         when ACCEPTED =>
            return "ACCEPTED";

         when REJECTED =>
            return "REJECTED";

         when NEED_UPDATE =>
            return "NEED_UPDATE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EacVerificationStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EacVerificationStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EacVerificationStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_EacVerificationStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EacVerificationStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EacVerificationStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedContentErrorType_Type (Value : in String) return .Models.FeedContentErrorType_Type is
   begin
      if Value = "PARSE_ERROR" then
         return PARSE_ERROR;
      end if;
      if Value = "PARSE_XML_ERROR" then
         return PARSE_XML_ERROR;
      end if;
      if Value = "TOO_MANY_REJECTED_OFFERS" then
         return TOO_MANY_REJECTED_OFFERS;
      end if;
      raise Constraint_Error;
   end To_FeedContentErrorType_Type;

   function To_String (Value : in .Models.FeedContentErrorType_Type) return String is
   begin
      case Value is
         when PARSE_ERROR =>
            return "PARSE_ERROR";

         when PARSE_XML_ERROR =>
            return "PARSE_XML_ERROR";

         when TOO_MANY_REJECTED_OFFERS =>
            return "TOO_MANY_REJECTED_OFFERS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedContentErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedContentErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedContentErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedContentErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedContentErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedContentErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedDownloadErrorType_Type (Value : in String) return .Models.FeedDownloadErrorType_Type is
   begin
      if Value = "DOWNLOAD_ERROR" then
         return ERROR;
      end if;
      if Value = "DOWNLOAD_HTTP_ERROR" then
         return HTTP_ERROR;
      end if;
      raise Constraint_Error;
   end To_FeedDownloadErrorType_Type;

   function To_String (Value : in .Models.FeedDownloadErrorType_Type) return String is
   begin
      case Value is
         when ERROR =>
            return "DOWNLOAD_ERROR";

         when HTTP_ERROR =>
            return "DOWNLOAD_HTTP_ERROR";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedDownloadErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedDownloadErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedDownloadErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedDownloadErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedDownloadErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedDownloadErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedIndexLogsErrorType_Type (Value : in String) return .Models.FeedIndexLogsErrorType_Type is
   begin
      if Value = "DOWNLOAD_ERROR" then
         return DOWNLOAD_ERROR;
      end if;
      if Value = "DOWNLOAD_HTTP_ERROR" then
         return DOWNLOAD_HTTP_ERROR;
      end if;
      if Value = "PARSE_ERROR" then
         return PARSE_ERROR;
      end if;
      if Value = "PARSE_XML_ERROR" then
         return PARSE_XML_ERROR;
      end if;
      if Value = "TOO_MANY_REJECTED_OFFERS" then
         return TOO_MANY_REJECTED_OFFERS;
      end if;
      if Value = "NOT_INDEXED" then
         return NOT_INDEXED;
      end if;
      raise Constraint_Error;
   end To_FeedIndexLogsErrorType_Type;

   function To_String (Value : in .Models.FeedIndexLogsErrorType_Type) return String is
   begin
      case Value is
         when DOWNLOAD_ERROR =>
            return "DOWNLOAD_ERROR";

         when DOWNLOAD_HTTP_ERROR =>
            return "DOWNLOAD_HTTP_ERROR";

         when PARSE_ERROR =>
            return "PARSE_ERROR";

         when PARSE_XML_ERROR =>
            return "PARSE_XML_ERROR";

         when TOO_MANY_REJECTED_OFFERS =>
            return "TOO_MANY_REJECTED_OFFERS";

         when NOT_INDEXED =>
            return "NOT_INDEXED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedIndexLogsErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsFeedDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsFeedDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsFeedDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsFeedDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsFeedDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedIndexLogsIndexType_Type (Value : in String) return .Models.FeedIndexLogsIndexType_Type is
   begin
      if Value = "DIFF" then
         return DIFF;
      end if;
      if Value = "FAST_PRICE" then
         return FAST_PRICE;
      end if;
      if Value = "FULL" then
         return FULL;
      end if;
      raise Constraint_Error;
   end To_FeedIndexLogsIndexType_Type;

   function To_String (Value : in .Models.FeedIndexLogsIndexType_Type) return String is
   begin
      case Value is
         when DIFF =>
            return "DIFF";

         when FAST_PRICE =>
            return "FAST_PRICE";

         when FULL =>
            return "FULL";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsIndexType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsIndexType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsIndexType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedIndexLogsIndexType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsIndexType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsIndexType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsOffersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Rejected_Count.Is_Null then
         Into.Write_Entity ("rejectedCount", Value.Rejected_Count);
      end if;
      if not Value.Total_Count.Is_Null then
         Into.Write_Entity ("totalCount", Value.Total_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsOffersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsOffersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "rejectedCount", Value.Rejected_Count);
      Swagger.Streams.Deserialize (Object, "totalCount", Value.Total_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsOffersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsOffersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedIndexLogsStatusType_Type (Value : in String) return .Models.FeedIndexLogsStatusType_Type is
   begin
      if Value = "ERROR" then
         return ERROR;
      end if;
      if Value = "OK" then
         return OK;
      end if;
      if Value = "WARNING" then
         return WARNING;
      end if;
      raise Constraint_Error;
   end To_FeedIndexLogsStatusType_Type;

   function To_String (Value : in .Models.FeedIndexLogsStatusType_Type) return String is
   begin
      case Value is
         when ERROR =>
            return "ERROR";

         when OK =>
            return "OK";

         when WARNING =>
            return "WARNING";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedIndexLogsStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedParameterDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "values", Value.Values);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedParameterDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedParameterDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "values", Value.Values);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedParameterDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedParameterDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedParameterName_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedParameterName_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedParameterName_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedParameterName_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedParameterName_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedPublicationFullDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.File_Time.Is_Null then
         Into.Write_Entity ("fileTime", Value.File_Time);
      end if;
      if not Value.Published_Time.Is_Null then
         Into.Write_Entity ("publishedTime", Value.Published_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedPublicationFullDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedPublicationFullDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "fileTime", Value.File_Time);
      Swagger.Streams.Deserialize (Object, "publishedTime", Value.Published_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedPublicationFullDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedPublicationFullDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedPublicationPriceAndStockUpdateDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.File_Time.Is_Null then
         Into.Write_Entity ("fileTime", Value.File_Time);
      end if;
      if not Value.Published_Time.Is_Null then
         Into.Write_Entity ("publishedTime", Value.Published_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedPublicationPriceAndStockUpdateDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedPublicationPriceAndStockUpdateDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "fileTime", Value.File_Time);
      Swagger.Streams.Deserialize (Object, "publishedTime", Value.Published_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedPublicationPriceAndStockUpdateDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedPublicationPriceAndStockUpdateDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedStatusType_Type (Value : in String) return .Models.FeedStatusType_Type is
   begin
      if Value = "ERROR" then
         return ERROR;
      end if;
      if Value = "NA" then
         return NA;
      end if;
      if Value = "OK" then
         return OK;
      end if;
      raise Constraint_Error;
   end To_FeedStatusType_Type;

   function To_String (Value : in .Models.FeedStatusType_Type) return String is
   begin
      case Value is
         when ERROR =>
            return "ERROR";

         when NA =>
            return "NA";

         when OK =>
            return "OK";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedbackCommentAuthorType_Type (Value : in String) return .Models.FeedbackCommentAuthorType_Type is
   begin
      if Value = "USER" then
         return USER;
      end if;
      if Value = "SHOP" then
         return SHOP;
      end if;
      raise Constraint_Error;
   end To_FeedbackCommentAuthorType_Type;

   function To_String (Value : in .Models.FeedbackCommentAuthorType_Type) return String is
   begin
      case Value is
         when USER =>
            return "USER";

         when SHOP =>
            return "SHOP";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackCommentAuthorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackCommentAuthorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackCommentAuthorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedbackCommentAuthorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackCommentAuthorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackCommentAuthorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedbackDeliveryType_Type (Value : in String) return .Models.FeedbackDeliveryType_Type is
   begin
      if Value = "DELIVERY" then
         return DELIVERY;
      end if;
      if Value = "PICKUP" then
         return PICKUP;
      end if;
      if Value = "INSTORE" then
         return INSTORE;
      end if;
      raise Constraint_Error;
   end To_FeedbackDeliveryType_Type;

   function To_String (Value : in .Models.FeedbackDeliveryType_Type) return String is
   begin
      case Value is
         when DELIVERY =>
            return "DELIVERY";

         when PICKUP =>
            return "PICKUP";

         when INSTORE =>
            return "INSTORE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackDeliveryType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackDeliveryType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackDeliveryType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedbackDeliveryType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackDeliveryType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackDeliveryType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackFactorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackFactorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackFactorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackFactorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackFactorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedbackReactionStatusType_Type (Value : in String) return .Models.FeedbackReactionStatusType_Type is
   begin
      if Value = "ALL" then
         return ALL;
      end if;
      if Value = "NEED_REACTION" then
         return NEED_REACTION;
      end if;
      raise Constraint_Error;
   end To_FeedbackReactionStatusType_Type;

   function To_String (Value : in .Models.FeedbackReactionStatusType_Type) return String is
   begin
      case Value is
         when ALL =>
            return "ALL";

         when NEED_REACTION =>
            return "NEED_REACTION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackReactionStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackReactionStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackReactionStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedbackReactionStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackReactionStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackReactionStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackShopDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackShopDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackShopDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackShopDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackShopDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FeedbackStateType_Type (Value : in String) return .Models.FeedbackStateType_Type is
   begin
      if Value = "LAST" then
         return LAST;
      end if;
      if Value = "PREVIOUS" then
         return PREVIOUS;
      end if;
      if Value = "DELETED" then
         return DELETED;
      end if;
      raise Constraint_Error;
   end To_FeedbackStateType_Type;

   function To_String (Value : in .Models.FeedbackStateType_Type) return String is
   begin
      case Value is
         when LAST =>
            return "LAST";

         when PREVIOUS =>
            return "PREVIOUS";

         when DELETED =>
            return "DELETED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackStateType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackStateType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackStateType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FeedbackStateType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackStateType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackStateType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_FieldStateType_Type (Value : in String) return .Models.FieldStateType_Type is
   begin
      if Value = "SPECIFIED" then
         return SPECIFIED;
      end if;
      if Value = "EMPTY" then
         return EMPTY;
      end if;
      raise Constraint_Error;
   end To_FieldStateType_Type;

   function To_String (Value : in .Models.FieldStateType_Type) return String is
   begin
      case Value is
         when SPECIFIED =>
            return "SPECIFIED";

         when EMPTY =>
            return "EMPTY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FieldStateType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FieldStateType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FieldStateType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_FieldStateType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FieldStateType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FieldStateType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FlippingPagerDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Total.Is_Null then
         Into.Write_Entity ("total", Value.Total);
      end if;
      if not Value.From.Is_Null then
         Into.Write_Entity ("from", Value.From);
      end if;
      if not Value.To.Is_Null then
         Into.Write_Entity ("to", Value.To);
      end if;
      if not Value.Current_Page.Is_Null then
         Into.Write_Entity ("currentPage", Value.Current_Page);
      end if;
      if not Value.Pages_Count.Is_Null then
         Into.Write_Entity ("pagesCount", Value.Pages_Count);
      end if;
      if not Value.Page_Size.Is_Null then
         Into.Write_Entity ("pageSize", Value.Page_Size);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FlippingPagerDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FlippingPagerDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Swagger.Streams.Deserialize (Object, "from", Value.From);
      Swagger.Streams.Deserialize (Object, "to", Value.To);
      Swagger.Streams.Deserialize (Object, "currentPage", Value.Current_Page);
      Swagger.Streams.Deserialize (Object, "pagesCount", Value.Pages_Count);
      Swagger.Streams.Deserialize (Object, "pageSize", Value.Page_Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FlippingPagerDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FlippingPagerDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ForwardScrollingPagerDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Next_Page_Token.Is_Null then
         Into.Write_Entity ("nextPageToken", Value.Next_Page_Token);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ForwardScrollingPagerDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ForwardScrollingPagerDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "nextPageToken", Value.Next_Page_Token);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ForwardScrollingPagerDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ForwardScrollingPagerDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateBoostConsolidatedRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateBoostConsolidatedRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateBoostConsolidatedRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateBoostConsolidatedRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateBoostConsolidatedRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateCompetitorsPositionReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      Into.Write_Long_Entity ("categoryId", Value.Category_Id);
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateCompetitorsPositionReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateCompetitorsPositionReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateCompetitorsPositionReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateCompetitorsPositionReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateGoodsFeedbackRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateGoodsFeedbackRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateGoodsFeedbackRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateGoodsFeedbackRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateGoodsFeedbackRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateGoodsMovementReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateGoodsMovementReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateGoodsMovementReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateGoodsMovementReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateGoodsMovementReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateGoodsRealizationReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Into.Write_Entity ("year", Value.Year);
      Into.Write_Entity ("month", Value.Month);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateGoodsRealizationReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateGoodsRealizationReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "year", Value.Year);
      Swagger.Streams.Deserialize (Object, "month", Value.Month);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateGoodsRealizationReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateGoodsRealizationReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateGoodsTurnoverRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateGoodsTurnoverRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateGoodsTurnoverRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateGoodsTurnoverRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateGoodsTurnoverRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateMassOrderLabelsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      Serialize (Into, "orderIds", Value.Order_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateMassOrderLabelsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateMassOrderLabelsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateMassOrderLabelsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateMassOrderLabelsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GeneratePricesReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Business_Id.Is_Null then
         Into.Write_Entity ("businessId", Value.Business_Id);
      end if;
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaignId", Value.Campaign_Id);
      end if;
      Serialize (Into, "categoryIds", Value.Category_Ids);
      if not Value.Creation_Date_From.Is_Null then
         Into.Write_Entity ("creationDateFrom", Value.Creation_Date_From);
      end if;
      if not Value.Creation_Date_To.Is_Null then
         Into.Write_Entity ("creationDateTo", Value.Creation_Date_To);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GeneratePricesReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GeneratePricesReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "categoryIds", Value.Category_Ids);
      Swagger.Streams.Deserialize (Object, "creationDateFrom", Value.Creation_Date_From);
      Swagger.Streams.Deserialize (Object, "creationDateTo", Value.Creation_Date_To);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GeneratePricesReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GeneratePricesReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateReportDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("reportId", Value.Report_Id);
      Into.Write_Long_Entity ("estimatedGenerationTime", Value.Estimated_Generation_Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateReportDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateReportDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "reportId", Value.Report_Id);
      Swagger.Streams.Deserialize (Object, "estimatedGenerationTime", Value.Estimated_Generation_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateReportDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateReportDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateShipmentListDocumentReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      if not Value.Shipment_Id.Is_Null then
         Into.Write_Entity ("shipmentId", Value.Shipment_Id);
      end if;
      Serialize (Into, "orderIds", Value.Order_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateShipmentListDocumentReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateShipmentListDocumentReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "shipmentId", Value.Shipment_Id);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateShipmentListDocumentReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateShipmentListDocumentReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateStocksOnWarehousesReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Serialize (Into, "warehouseIds", Value.Warehouse_Ids);
      if not Value.Report_Date.Is_Null then
         Into.Write_Entity ("reportDate", Value.Report_Date);
      end if;
      Serialize (Into, "categoryIds", Value.Category_Ids);
      if not Value.Has_Stocks.Is_Null then
         Into.Write_Entity ("hasStocks", Value.Has_Stocks);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateStocksOnWarehousesReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateStocksOnWarehousesReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "warehouseIds", Value.Warehouse_Ids);
      Swagger.Streams.Deserialize (Object, "reportDate", Value.Report_Date);
      Swagger.Streams.Deserialize (Object, "categoryIds", Value.Category_Ids);
      Swagger.Streams.Deserialize (Object, "hasStocks", Value.Has_Stocks);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateStocksOnWarehousesReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateStocksOnWarehousesReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateUnitedOrdersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      Serialize (Into, "campaignIds", Value.Campaign_Ids);
      if not Value.Promo_Id.Is_Null then
         Into.Write_Entity ("promoId", Value.Promo_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateUnitedOrdersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateUnitedOrdersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Swagger.Streams.Deserialize (Object, "campaignIds", Value.Campaign_Ids);
      Swagger.Streams.Deserialize (Object, "promoId", Value.Promo_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateUnitedOrdersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateUnitedOrdersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBidsInfoRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "skus", Value.Skus);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBidsInfoRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBidsInfoRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "skus", Value.Skus);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBidsInfoRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBidsInfoRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBidsRecommendationsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "skus", Value.Skus);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBidsRecommendationsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBidsRecommendationsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "skus", Value.Skus);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBidsRecommendationsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBidsRecommendationsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignLoginsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "logins", Value.Logins);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignLoginsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignLoginsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "logins", Value.Logins);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignLoginsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignLoginsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCategoriesMaxSaleQuantumRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "marketCategoryIds", Value.Market_Category_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCategoriesMaxSaleQuantumRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCategoriesMaxSaleQuantumRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketCategoryIds", Value.Market_Category_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCategoriesMaxSaleQuantumRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCategoriesMaxSaleQuantumRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetChatHistoryRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Message_Id_From.Is_Null then
         Into.Write_Entity ("messageIdFrom", Value.Message_Id_From);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetChatHistoryRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetChatHistoryRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "messageIdFrom", Value.Message_Id_From);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetChatHistoryRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetChatHistoryRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetGoodsFeedbackCommentsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("feedbackId", Value.Feedback_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetGoodsFeedbackCommentsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetGoodsFeedbackCommentsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "feedbackId", Value.Feedback_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetGoodsFeedbackCommentsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetGoodsFeedbackCommentsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetGoodsStatsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "shopSkus", Value.Shop_Skus);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetGoodsStatsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetGoodsStatsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shopSkus", Value.Shop_Skus);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetGoodsStatsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetGoodsStatsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetMappingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Market_Sku_Name.Is_Null then
         Into.Write_Entity ("marketSkuName", Value.Market_Sku_Name);
      end if;
      if not Value.Market_Model_Id.Is_Null then
         Into.Write_Entity ("marketModelId", Value.Market_Model_Id);
      end if;
      if not Value.Market_Model_Name.Is_Null then
         Into.Write_Entity ("marketModelName", Value.Market_Model_Name);
      end if;
      if not Value.Market_Category_Id.Is_Null then
         Into.Write_Entity ("marketCategoryId", Value.Market_Category_Id);
      end if;
      if not Value.Market_Category_Name.Is_Null then
         Into.Write_Entity ("marketCategoryName", Value.Market_Category_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetMappingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetMappingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "marketSkuName", Value.Market_Sku_Name);
      Swagger.Streams.Deserialize (Object, "marketModelId", Value.Market_Model_Id);
      Swagger.Streams.Deserialize (Object, "marketModelName", Value.Market_Model_Name);
      Swagger.Streams.Deserialize (Object, "marketCategoryId", Value.Market_Category_Id);
      Swagger.Streams.Deserialize (Object, "marketCategoryName", Value.Market_Category_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetMappingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetMappingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetModelsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "models", Value.Models);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetModelsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetModelsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "models", Value.Models);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetModelsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetModelsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPricesByOfferIdsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPricesByOfferIdsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPricesByOfferIdsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPricesByOfferIdsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPricesByOfferIdsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoAssortmentInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("activeOffers", Value.Active_Offers);
      if not Value.Potential_Offers.Is_Null then
         Into.Write_Entity ("potentialOffers", Value.Potential_Offers);
      end if;
      if not Value.Processing.Is_Null then
         Into.Write_Entity ("processing", Value.Processing);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoAssortmentInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoAssortmentInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "activeOffers", Value.Active_Offers);
      Swagger.Streams.Deserialize (Object, "potentialOffers", Value.Potential_Offers);
      Swagger.Streams.Deserialize (Object, "processing", Value.Processing);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoAssortmentInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoAssortmentInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoBestsellerInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("bestseller", Value.Bestseller);
      if not Value.Entry_Deadline.Is_Null then
         Into.Write_Entity ("entryDeadline", Value.Entry_Deadline);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoBestsellerInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoBestsellerInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "bestseller", Value.Bestseller);
      Swagger.Streams.Deserialize (Object, "entryDeadline", Value.Entry_Deadline);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoBestsellerInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoBestsellerInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoConstraintsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "warehouseIds", Value.Warehouse_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoConstraintsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoConstraintsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "warehouseIds", Value.Warehouse_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoConstraintsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoConstraintsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoPromocodeInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("promocode", Value.Promocode);
      Into.Write_Entity ("discount", Value.Discount);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoPromocodeInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoPromocodeInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "promocode", Value.Promocode);
      Swagger.Streams.Deserialize (Object, "discount", Value.Discount);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoPromocodeInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoPromocodeInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetQualityRatingRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Date_From.Is_Null then
         Into.Write_Entity ("dateFrom", Value.Date_From);
      end if;
      if not Value.Date_To.Is_Null then
         Into.Write_Entity ("dateTo", Value.Date_To);
      end if;
      Serialize (Into, "campaignIds", Value.Campaign_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetQualityRatingRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetQualityRatingRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Swagger.Streams.Deserialize (Object, "campaignIds", Value.Campaign_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetQualityRatingRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetQualityRatingRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetWarehouseStocksRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.With_Turnover.Is_Null then
         Into.Write_Entity ("withTurnover", Value.With_Turnover);
      end if;
      if not Value.Archived.Is_Null then
         Into.Write_Entity ("archived", Value.Archived);
      end if;
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetWarehouseStocksRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetWarehouseStocksRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "withTurnover", Value.With_Turnover);
      Swagger.Streams.Deserialize (Object, "archived", Value.Archived);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetWarehouseStocksRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetWarehouseStocksRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_GoodsFeedbackCommentAuthorType_Type (Value : in String) return .Models.GoodsFeedbackCommentAuthorType_Type is
   begin
      if Value = "USER" then
         return USER;
      end if;
      if Value = "BUSINESS" then
         return BUSINESS;
      end if;
      raise Constraint_Error;
   end To_GoodsFeedbackCommentAuthorType_Type;

   function To_String (Value : in .Models.GoodsFeedbackCommentAuthorType_Type) return String is
   begin
      case Value is
         when USER =>
            return "USER";

         when BUSINESS =>
            return "BUSINESS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentAuthorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentAuthorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentAuthorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_GoodsFeedbackCommentAuthorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentAuthorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentAuthorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentId_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_GoodsFeedbackCommentStatusType_Type (Value : in String) return .Models.GoodsFeedbackCommentStatusType_Type is
   begin
      if Value = "PUBLISHED" then
         return PUBLISHED;
      end if;
      if Value = "UNMODERATED" then
         return UNMODERATED;
      end if;
      if Value = "BANNED" then
         return BANNED;
      end if;
      if Value = "DELETED" then
         return DELETED;
      end if;
      raise Constraint_Error;
   end To_GoodsFeedbackCommentStatusType_Type;

   function To_String (Value : in .Models.GoodsFeedbackCommentStatusType_Type) return String is
   begin
      case Value is
         when PUBLISHED =>
            return "PUBLISHED";

         when UNMODERATED =>
            return "UNMODERATED";

         when BANNED =>
            return "BANNED";

         when DELETED =>
            return "DELETED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_GoodsFeedbackCommentStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentText_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentText_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentText_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentText_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentText_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackDescriptionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Advantages.Is_Null then
         Into.Write_Entity ("advantages", Value.Advantages);
      end if;
      if not Value.Disadvantages.Is_Null then
         Into.Write_Entity ("disadvantages", Value.Disadvantages);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackDescriptionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackDescriptionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "advantages", Value.Advantages);
      Swagger.Streams.Deserialize (Object, "disadvantages", Value.Disadvantages);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackDescriptionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackDescriptionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackId_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackIdentifiersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Into.Write_Long_Entity ("modelId", Value.Model_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackIdentifiersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackIdentifiersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "modelId", Value.Model_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackIdentifiersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackIdentifiersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackMediaDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "photos", Value.Photos);
      Serialize (Into, "videos", Value.Videos);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackMediaDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackMediaDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "photos", Value.Photos);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackMediaDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackMediaDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackStatisticsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("rating", Value.Rating);
      Into.Write_Long_Entity ("commentsCount", Value.Comments_Count);
      if not Value.Recommended.Is_Null then
         Into.Write_Entity ("recommended", Value.Recommended);
      end if;
      if not Value.Paid_Amount.Is_Null then
         Into.Write_Entity ("paidAmount", Value.Paid_Amount);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackStatisticsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackStatisticsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "rating", Value.Rating);
      Swagger.Streams.Deserialize (Object, "commentsCount", Value.Comments_Count);
      Swagger.Streams.Deserialize (Object, "recommended", Value.Recommended);
      Swagger.Streams.Deserialize (Object, "paidAmount", Value.Paid_Amount);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackStatisticsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackStatisticsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsStatsWeightDimensionsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "weight", Value.Weight);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsStatsWeightDimensionsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsStatsWeightDimensionsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsStatsWeightDimensionsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsStatsWeightDimensionsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GpsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "latitude", Value.Latitude);
      Serialize (Into, "longitude", Value.Longitude);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GpsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GpsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "latitude", Value.Latitude);
      Swagger.Streams.Deserialize (Object, "longitude", Value.Longitude);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GpsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GpsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HiddenOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HiddenOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HiddenOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HiddenOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HiddenOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LanguageType_Type (Value : in String) return .Models.LanguageType_Type is
   begin
      if Value = "RU" then
         return RU;
      end if;
      if Value = "EN" then
         return EN;
      end if;
      raise Constraint_Error;
   end To_LanguageType_Type;

   function To_String (Value : in .Models.LanguageType_Type) return String is
   begin
      case Value is
         when RU =>
            return "RU";

         when EN =>
            return "EN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LanguageType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LanguageType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LanguageType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LanguageType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LanguageType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LanguageType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LicenseCheckStatusType_Type (Value : in String) return .Models.LicenseCheckStatusType_Type is
   begin
      if Value = "NEW" then
         return NEW;
      end if;
      if Value = "SUCCESS" then
         return SUCCESS;
      end if;
      if Value = "FAIL" then
         return FAIL;
      end if;
      if Value = "REVOKE" then
         return REVOKE;
      end if;
      if Value = "DONT_WANT" then
         return DONT_WANT;
      end if;
      if Value = "FAIL_MANUAL" then
         return FAIL_MANUAL;
      end if;
      raise Constraint_Error;
   end To_LicenseCheckStatusType_Type;

   function To_String (Value : in .Models.LicenseCheckStatusType_Type) return String is
   begin
      case Value is
         when NEW =>
            return "NEW";

         when SUCCESS =>
            return "SUCCESS";

         when FAIL =>
            return "FAIL";

         when REVOKE =>
            return "REVOKE";

         when DONT_WANT =>
            return "DONT_WANT";

         when FAIL_MANUAL =>
            return "FAIL_MANUAL";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LicenseCheckStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LicenseCheckStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LicenseCheckStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LicenseCheckStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LicenseCheckStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LicenseCheckStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LicenseType_Type (Value : in String) return .Models.LicenseType_Type is
   begin
      if Value = "ALCOHOL" then
         return ALCOHOL;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_LicenseType_Type;

   function To_String (Value : in .Models.LicenseType_Type) return String is
   begin
      case Value is
         when ALCOHOL =>
            return "ALCOHOL";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LicenseType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LicenseType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LicenseType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LicenseType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LicenseType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LicenseType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_LogisticPointType_Type (Value : in String) return .Models.LogisticPointType_Type is
   begin
      if Value = "WAREHOUSE" then
         return WAREHOUSE;
      end if;
      if Value = "PICKUP_POINT" then
         return PICKUP_POINT;
      end if;
      if Value = "PICKUP_TERMINAL" then
         return PICKUP_TERMINAL;
      end if;
      if Value = "PICKUP_POST_OFFICE" then
         return PICKUP_POST_OFFICE;
      end if;
      if Value = "PICKUP_MIXED" then
         return PICKUP_MIXED;
      end if;
      if Value = "PICKUP_RETAIL" then
         return PICKUP_RETAIL;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_LogisticPointType_Type;

   function To_String (Value : in .Models.LogisticPointType_Type) return String is
   begin
      case Value is
         when WAREHOUSE =>
            return "WAREHOUSE";

         when PICKUP_POINT =>
            return "PICKUP_POINT";

         when PICKUP_TERMINAL =>
            return "PICKUP_TERMINAL";

         when PICKUP_POST_OFFICE =>
            return "PICKUP_POST_OFFICE";

         when PICKUP_MIXED =>
            return "PICKUP_MIXED";

         when PICKUP_RETAIL =>
            return "PICKUP_RETAIL";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LogisticPointType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LogisticPointType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LogisticPointType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_LogisticPointType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LogisticPointType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LogisticPointType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MarketSku_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MarketSku_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MarketSku_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MarketSku_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MarketSku_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MaxSaleQuantumDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Max_Sale_Quantum.Is_Null then
         Into.Write_Entity ("maxSaleQuantum", Value.Max_Sale_Quantum);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MaxSaleQuantumDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MaxSaleQuantumDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "maxSaleQuantum", Value.Max_Sale_Quantum);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MaxSaleQuantumDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MaxSaleQuantumDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_MechanicsType_Type (Value : in String) return .Models.MechanicsType_Type is
   begin
      if Value = "DIRECT_DISCOUNT" then
         return DIRECT_DISCOUNT;
      end if;
      if Value = "BLUE_FLASH" then
         return BLUE_FLASH;
      end if;
      if Value = "MARKET_PROMOCODE" then
         return MARKET_PROMOCODE;
      end if;
      raise Constraint_Error;
   end To_MechanicsType_Type;

   function To_String (Value : in .Models.MechanicsType_Type) return String is
   begin
      case Value is
         when DIRECT_DISCOUNT =>
            return "DIRECT_DISCOUNT";

         when BLUE_FLASH =>
            return "BLUE_FLASH";

         when MARKET_PROMOCODE =>
            return "MARKET_PROMOCODE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MechanicsType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MechanicsType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MechanicsType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_MechanicsType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MechanicsType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MechanicsType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Discount.Is_Null then
         Into.Write_Entity ("discount", Value.Discount);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Pos.Is_Null then
         Into.Write_Entity ("pos", Value.Pos);
      end if;
      Serialize (Into, "preDiscountPrice", Value.Pre_Discount_Price);
      Serialize (Into, "price", Value.Price);
      if not Value.Region_Id.Is_Null then
         Into.Write_Entity ("regionId", Value.Region_Id);
      end if;
      Serialize (Into, "shippingCost", Value.Shipping_Cost);
      if not Value.Shop_Name.Is_Null then
         Into.Write_Entity ("shopName", Value.Shop_Name);
      end if;
      if not Value.Shop_Rating.Is_Null then
         Into.Write_Entity ("shopRating", Value.Shop_Rating);
      end if;
      if not Value.In_Stock.Is_Null then
         Into.Write_Entity ("inStock", Value.In_Stock);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "discount", Value.Discount);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "pos", Value.Pos);
      Swagger.Streams.Deserialize (Object, "preDiscountPrice", Value.Pre_Discount_Price);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "regionId", Value.Region_Id);
      Swagger.Streams.Deserialize (Object, "shippingCost", Value.Shipping_Cost);
      Swagger.Streams.Deserialize (Object, "shopName", Value.Shop_Name);
      Swagger.Streams.Deserialize (Object, "shopRating", Value.Shop_Rating);
      Swagger.Streams.Deserialize (Object, "inStock", Value.In_Stock);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelPriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "avg", Value.Avg);
      Serialize (Into, "max", Value.Max);
      Serialize (Into, "min", Value.Min);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelPriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelPriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "avg", Value.Avg);
      Swagger.Streams.Deserialize (Object, "max", Value.Max);
      Swagger.Streams.Deserialize (Object, "min", Value.Min);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelPriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelPriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferAvailabilityStatusType_Type (Value : in String) return .Models.OfferAvailabilityStatusType_Type is
   begin
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      if Value = "INACTIVE" then
         return INACTIVE;
      end if;
      if Value = "DELISTED" then
         return DELISTED;
      end if;
      raise Constraint_Error;
   end To_OfferAvailabilityStatusType_Type;

   function To_String (Value : in .Models.OfferAvailabilityStatusType_Type) return String is
   begin
      case Value is
         when ACTIVE =>
            return "ACTIVE";

         when INACTIVE =>
            return "INACTIVE";

         when DELISTED =>
            return "DELISTED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferAvailabilityStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferAvailabilityStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferAvailabilityStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferAvailabilityStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferAvailabilityStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferAvailabilityStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferCampaignStatusType_Type (Value : in String) return .Models.OfferCampaignStatusType_Type is
   begin
      if Value = "PUBLISHED" then
         return PUBLISHED;
      end if;
      if Value = "CHECKING" then
         return CHECKING;
      end if;
      if Value = "DISABLED_BY_PARTNER" then
         return DISABLED_BY_PARTNER;
      end if;
      if Value = "DISABLED_AUTOMATICALLY" then
         return DISABLED_AUTOMATICALLY;
      end if;
      if Value = "REJECTED_BY_MARKET" then
         return REJECTED_BY_MARKET;
      end if;
      if Value = "CREATING_CARD" then
         return CREATING_CARD;
      end if;
      if Value = "NO_CARD" then
         return NO_CARD;
      end if;
      if Value = "NO_STOCKS" then
         return NO_STOCKS;
      end if;
      if Value = "ARCHIVED" then
         return ARCHIVED;
      end if;
      raise Constraint_Error;
   end To_OfferCampaignStatusType_Type;

   function To_String (Value : in .Models.OfferCampaignStatusType_Type) return String is
   begin
      case Value is
         when PUBLISHED =>
            return "PUBLISHED";

         when CHECKING =>
            return "CHECKING";

         when DISABLED_BY_PARTNER =>
            return "DISABLED_BY_PARTNER";

         when DISABLED_AUTOMATICALLY =>
            return "DISABLED_AUTOMATICALLY";

         when REJECTED_BY_MARKET =>
            return "REJECTED_BY_MARKET";

         when CREATING_CARD =>
            return "CREATING_CARD";

         when NO_CARD =>
            return "NO_CARD";

         when NO_STOCKS =>
            return "NO_STOCKS";

         when ARCHIVED =>
            return "ARCHIVED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCampaignStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCampaignStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCampaignStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferCampaignStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCampaignStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCampaignStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferCardRecommendationType_Type (Value : in String) return .Models.OfferCardRecommendationType_Type is
   begin
      if Value = "HAS_VIDEO" then
         return HAS_VIDEO;
      end if;
      if Value = "RECOGNIZED_VENDOR" then
         return RECOGNIZED_VENDOR;
      end if;
      if Value = "MAIN" then
         return MAIN;
      end if;
      if Value = "ADDITIONAL" then
         return ADDITIONAL;
      end if;
      if Value = "DISTINCTIVE" then
         return DISTINCTIVE;
      end if;
      if Value = "FILTERABLE" then
         return FILTERABLE;
      end if;
      if Value = "PICTURE_COUNT" then
         return PICTURE_COUNT;
      end if;
      if Value = "HAS_DESCRIPTION" then
         return HAS_DESCRIPTION;
      end if;
      if Value = "HAS_BARCODE" then
         return HAS_BARCODE;
      end if;
      if Value = "FIRST_PICTURE_SIZE" then
         return FIRST_PICTURE_SIZE;
      end if;
      if Value = "TITLE_LENGTH" then
         return TITLE_LENGTH;
      end if;
      if Value = "DESCRIPTION_LENGTH" then
         return DESCRIPTION_LENGTH;
      end if;
      if Value = "AVERAGE_PICTURE_SIZE" then
         return AVERAGE_PICTURE_SIZE;
      end if;
      if Value = "FIRST_VIDEO_SIZE" then
         return FIRST_VIDEO_SIZE;
      end if;
      if Value = "FIRST_VIDEO_LENGTH" then
         return FIRST_VIDEO_LENGTH;
      end if;
      if Value = "AVERAGE_VIDEO_SIZE" then
         return AVERAGE_VIDEO_SIZE;
      end if;
      if Value = "VIDEO_COUNT" then
         return VIDEO_COUNT;
      end if;
      raise Constraint_Error;
   end To_OfferCardRecommendationType_Type;

   function To_String (Value : in .Models.OfferCardRecommendationType_Type) return String is
   begin
      case Value is
         when HAS_VIDEO =>
            return "HAS_VIDEO";

         when RECOGNIZED_VENDOR =>
            return "RECOGNIZED_VENDOR";

         when MAIN =>
            return "MAIN";

         when ADDITIONAL =>
            return "ADDITIONAL";

         when DISTINCTIVE =>
            return "DISTINCTIVE";

         when FILTERABLE =>
            return "FILTERABLE";

         when PICTURE_COUNT =>
            return "PICTURE_COUNT";

         when HAS_DESCRIPTION =>
            return "HAS_DESCRIPTION";

         when HAS_BARCODE =>
            return "HAS_BARCODE";

         when FIRST_PICTURE_SIZE =>
            return "FIRST_PICTURE_SIZE";

         when TITLE_LENGTH =>
            return "TITLE_LENGTH";

         when DESCRIPTION_LENGTH =>
            return "DESCRIPTION_LENGTH";

         when AVERAGE_PICTURE_SIZE =>
            return "AVERAGE_PICTURE_SIZE";

         when FIRST_VIDEO_SIZE =>
            return "FIRST_VIDEO_SIZE";

         when FIRST_VIDEO_LENGTH =>
            return "FIRST_VIDEO_LENGTH";

         when AVERAGE_VIDEO_SIZE =>
            return "AVERAGE_VIDEO_SIZE";

         when VIDEO_COUNT =>
            return "VIDEO_COUNT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCardRecommendationType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCardRecommendationType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCardRecommendationType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferCardRecommendationType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCardRecommendationType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCardRecommendationType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferCardStatusType_Type (Value : in String) return .Models.OfferCardStatusType_Type is
   begin
      if Value = "HAS_CARD_CAN_NOT_UPDATE" then
         return HAS_CARD_CAN_NOT_UPDATE;
      end if;
      if Value = "HAS_CARD_CAN_UPDATE" then
         return HAS_CARD_CAN_UPDATE;
      end if;
      if Value = "HAS_CARD_CAN_UPDATE_ERRORS" then
         return HAS_CARD_CAN_UPDATE_ERRORS;
      end if;
      if Value = "HAS_CARD_CAN_UPDATE_PROCESSING" then
         return HAS_CARD_CAN_UPDATE_PROCESSING;
      end if;
      if Value = "NO_CARD_NEED_CONTENT" then
         return NO_CARD_NEED_CONTENT;
      end if;
      if Value = "NO_CARD_MARKET_WILL_CREATE" then
         return NO_CARD_MARKET_WILL_CREATE;
      end if;
      if Value = "NO_CARD_ERRORS" then
         return NO_CARD_ERRORS;
      end if;
      if Value = "NO_CARD_PROCESSING" then
         return NO_CARD_PROCESSING;
      end if;
      if Value = "NO_CARD_ADD_TO_CAMPAIGN" then
         return NO_CARD_ADD_TO_CAMPAIGN;
      end if;
      raise Constraint_Error;
   end To_OfferCardStatusType_Type;

   function To_String (Value : in .Models.OfferCardStatusType_Type) return String is
   begin
      case Value is
         when HAS_CARD_CAN_NOT_UPDATE =>
            return "HAS_CARD_CAN_NOT_UPDATE";

         when HAS_CARD_CAN_UPDATE =>
            return "HAS_CARD_CAN_UPDATE";

         when HAS_CARD_CAN_UPDATE_ERRORS =>
            return "HAS_CARD_CAN_UPDATE_ERRORS";

         when HAS_CARD_CAN_UPDATE_PROCESSING =>
            return "HAS_CARD_CAN_UPDATE_PROCESSING";

         when NO_CARD_NEED_CONTENT =>
            return "NO_CARD_NEED_CONTENT";

         when NO_CARD_MARKET_WILL_CREATE =>
            return "NO_CARD_MARKET_WILL_CREATE";

         when NO_CARD_ERRORS =>
            return "NO_CARD_ERRORS";

         when NO_CARD_PROCESSING =>
            return "NO_CARD_PROCESSING";

         when NO_CARD_ADD_TO_CAMPAIGN =>
            return "NO_CARD_ADD_TO_CAMPAIGN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCardStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCardStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCardStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferCardStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCardStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCardStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCategory_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCategory_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCategory_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCategory_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCategory_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferConditionQualityType_Type (Value : in String) return .Models.OfferConditionQualityType_Type is
   begin
      if Value = "PERFECT" then
         return PERFECT;
      end if;
      if Value = "EXCELLENT" then
         return EXCELLENT;
      end if;
      if Value = "GOOD" then
         return GOOD;
      end if;
      if Value = "NOT_SPECIFIED" then
         return NOT_SPECIFIED;
      end if;
      raise Constraint_Error;
   end To_OfferConditionQualityType_Type;

   function To_String (Value : in .Models.OfferConditionQualityType_Type) return String is
   begin
      case Value is
         when PERFECT =>
            return "PERFECT";

         when EXCELLENT =>
            return "EXCELLENT";

         when GOOD =>
            return "GOOD";

         when NOT_SPECIFIED =>
            return "NOT_SPECIFIED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferConditionQualityType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferConditionQualityType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferConditionQualityType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferConditionQualityType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferConditionQualityType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferConditionQualityType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferConditionType_Type (Value : in String) return .Models.OfferConditionType_Type is
   begin
      if Value = "PREOWNED" then
         return PREOWNED;
      end if;
      if Value = "SHOWCASESAMPLE" then
         return SHOWCASESAMPLE;
      end if;
      if Value = "REFURBISHED" then
         return REFURBISHED;
      end if;
      if Value = "REDUCTION" then
         return REDUCTION;
      end if;
      if Value = "RENOVATED" then
         return RENOVATED;
      end if;
      if Value = "NOT_SPECIFIED" then
         return NOT_SPECIFIED;
      end if;
      raise Constraint_Error;
   end To_OfferConditionType_Type;

   function To_String (Value : in .Models.OfferConditionType_Type) return String is
   begin
      case Value is
         when PREOWNED =>
            return "PREOWNED";

         when SHOWCASESAMPLE =>
            return "SHOWCASESAMPLE";

         when REFURBISHED =>
            return "REFURBISHED";

         when REDUCTION =>
            return "REDUCTION";

         when RENOVATED =>
            return "RENOVATED";

         when NOT_SPECIFIED =>
            return "NOT_SPECIFIED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferConditionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferConditionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferConditionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferConditionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferConditionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferConditionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferContentErrorType_Type (Value : in String) return .Models.OfferContentErrorType_Type is
   begin
      if Value = "OFFER_NOT_FOUND" then
         return OFFER_NOT_FOUND;
      end if;
      if Value = "UNKNOWN_CATEGORY" then
         return UNKNOWN_CATEGORY;
      end if;
      if Value = "CATEGORY_MISMATCH" then
         return CATEGORY_MISMATCH;
      end if;
      if Value = "UNKNOWN_PARAMETER" then
         return UNKNOWN_PARAMETER;
      end if;
      if Value = "UNEXPECTED_BOOLEAN_VALUE" then
         return UNEXPECTED_BOOLEAN_VALUE;
      end if;
      if Value = "NUMBER_FORMAT" then
         return NUMBER_FORMAT;
      end if;
      if Value = "VALUE_BLANK" then
         return VALUE_BLANK;
      end if;
      if Value = "INVALID_UNIT_ID" then
         return INVALID_UNIT_ID;
      end if;
      if Value = "INVALID_GROUP_ID_LENGTH" then
         return INVALID_GROUP_ID_LENGTH;
      end if;
      if Value = "INVALID_GROUP_ID_CHARACTERS" then
         return INVALID_GROUP_ID_CHARACTERS;
      end if;
      raise Constraint_Error;
   end To_OfferContentErrorType_Type;

   function To_String (Value : in .Models.OfferContentErrorType_Type) return String is
   begin
      case Value is
         when OFFER_NOT_FOUND =>
            return "OFFER_NOT_FOUND";

         when UNKNOWN_CATEGORY =>
            return "UNKNOWN_CATEGORY";

         when CATEGORY_MISMATCH =>
            return "CATEGORY_MISMATCH";

         when UNKNOWN_PARAMETER =>
            return "UNKNOWN_PARAMETER";

         when UNEXPECTED_BOOLEAN_VALUE =>
            return "UNEXPECTED_BOOLEAN_VALUE";

         when NUMBER_FORMAT =>
            return "NUMBER_FORMAT";

         when VALUE_BLANK =>
            return "VALUE_BLANK";

         when INVALID_UNIT_ID =>
            return "INVALID_UNIT_ID";

         when INVALID_GROUP_ID_LENGTH =>
            return "INVALID_GROUP_ID_LENGTH";

         when INVALID_GROUP_ID_CHARACTERS =>
            return "INVALID_GROUP_ID_CHARACTERS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferContentErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferContentErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferContentErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferContentErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferContentErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferContentErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferDescription_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferDescription_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferDescription_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferDescription_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferDescription_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferManualDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("url", Value.Url);
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferManualDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferManualDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferManualDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferManualDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Model_Id.Is_Null then
         Into.Write_Entity ("modelId", Value.Model_Id);
      end if;
      if not Value.Category_Id.Is_Null then
         Into.Write_Entity ("categoryId", Value.Category_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "modelId", Value.Model_Id);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferMappingErrorType_Type (Value : in String) return .Models.OfferMappingErrorType_Type is
   begin
      if Value = "UNKNOWN_CATEGORY" then
         return UNKNOWN_CATEGORY;
      end if;
      if Value = "CATEGORY_MISMATCH" then
         return CATEGORY_MISMATCH;
      end if;
      if Value = "EMPTY_MARKET_CATEGORY" then
         return EMPTY_MARKET_CATEGORY;
      end if;
      if Value = "UNKNOWN_PARAMETER" then
         return UNKNOWN_PARAMETER;
      end if;
      if Value = "UNEXPECTED_BOOLEAN_VALUE" then
         return UNEXPECTED_BOOLEAN_VALUE;
      end if;
      if Value = "NUMBER_FORMAT" then
         return NUMBER_FORMAT;
      end if;
      if Value = "VALUE_BLANK" then
         return VALUE_BLANK;
      end if;
      if Value = "INVALID_UNIT_ID" then
         return INVALID_UNIT_ID;
      end if;
      if Value = "INVALID_GROUP_ID_LENGTH" then
         return INVALID_GROUP_ID_LENGTH;
      end if;
      if Value = "INVALID_GROUP_ID_CHARACTERS" then
         return INVALID_GROUP_ID_CHARACTERS;
      end if;
      if Value = "INVALID_PICKER_URL" then
         return INVALID_PICKER_URL;
      end if;
      raise Constraint_Error;
   end To_OfferMappingErrorType_Type;

   function To_String (Value : in .Models.OfferMappingErrorType_Type) return String is
   begin
      case Value is
         when UNKNOWN_CATEGORY =>
            return "UNKNOWN_CATEGORY";

         when CATEGORY_MISMATCH =>
            return "CATEGORY_MISMATCH";

         when EMPTY_MARKET_CATEGORY =>
            return "EMPTY_MARKET_CATEGORY";

         when UNKNOWN_PARAMETER =>
            return "UNKNOWN_PARAMETER";

         when UNEXPECTED_BOOLEAN_VALUE =>
            return "UNEXPECTED_BOOLEAN_VALUE";

         when NUMBER_FORMAT =>
            return "NUMBER_FORMAT";

         when VALUE_BLANK =>
            return "VALUE_BLANK";

         when INVALID_UNIT_ID =>
            return "INVALID_UNIT_ID";

         when INVALID_GROUP_ID_LENGTH =>
            return "INVALID_GROUP_ID_LENGTH";

         when INVALID_GROUP_ID_CHARACTERS =>
            return "INVALID_GROUP_ID_CHARACTERS";

         when INVALID_PICKER_URL =>
            return "INVALID_PICKER_URL";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingErrorType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingErrorType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingErrorType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferMappingErrorType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingErrorType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingErrorType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferMappingKindType_Type (Value : in String) return .Models.OfferMappingKindType_Type is
   begin
      if Value = "ACTIVE" then
         return ACTIVE;
      end if;
      if Value = "ALL" then
         return ALL;
      end if;
      raise Constraint_Error;
   end To_OfferMappingKindType_Type;

   function To_String (Value : in .Models.OfferMappingKindType_Type) return String is
   begin
      case Value is
         when ACTIVE =>
            return "ACTIVE";

         when ALL =>
            return "ALL";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingKindType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingKindType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingKindType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferMappingKindType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingKindType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingKindType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferName_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferName_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferName_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferName_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferName_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferParamDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferParamDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferParamDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferParamDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferParamDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferProcessingNoteType_Type (Value : in String) return .Models.OfferProcessingNoteType_Type is
   begin
      if Value = "ASSORTMENT" then
         return ASSORTMENT;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      if Value = "CONFLICTING_INFORMATION" then
         return CONFLICTING_INFORMATION;
      end if;
      if Value = "OTHER" then
         return OTHER;
      end if;
      if Value = "DEPARTMENT_FROZEN" then
         return DEPARTMENT_FROZEN;
      end if;
      if Value = "INCORRECT_INFORMATION" then
         return INCORRECT_INFORMATION;
      end if;
      if Value = "LEGAL_CONFLICT" then
         return LEGAL_CONFLICT;
      end if;
      if Value = "NEED_CLASSIFICATION_INFORMATION" then
         return NEED_CLASSIFICATION_INFORMATION;
      end if;
      if Value = "NEED_INFORMATION" then
         return NEED_INFORMATION;
      end if;
      if Value = "NEED_PICTURES" then
         return NEED_PICTURES;
      end if;
      if Value = "NEED_VENDOR" then
         return NEED_VENDOR;
      end if;
      if Value = "NO_CATEGORY" then
         return NO_CATEGORY;
      end if;
      if Value = "NO_KNOWLEDGE" then
         return NO_KNOWLEDGE;
      end if;
      if Value = "NO_PARAMETERS_IN_SHOP_TITLE" then
         return NO_PARAMETERS_IN_SHOP_TITLE;
      end if;
      if Value = "NO_SIZE_MEASURE" then
         return NO_SIZE_MEASURE;
      end if;
      if Value = "SAMPLE_LINE" then
         return SAMPLE_LINE;
      end if;
      raise Constraint_Error;
   end To_OfferProcessingNoteType_Type;

   function To_String (Value : in .Models.OfferProcessingNoteType_Type) return String is
   begin
      case Value is
         when ASSORTMENT =>
            return "ASSORTMENT";

         when CANCELLED =>
            return "CANCELLED";

         when CONFLICTING_INFORMATION =>
            return "CONFLICTING_INFORMATION";

         when OTHER =>
            return "OTHER";

         when DEPARTMENT_FROZEN =>
            return "DEPARTMENT_FROZEN";

         when INCORRECT_INFORMATION =>
            return "INCORRECT_INFORMATION";

         when LEGAL_CONFLICT =>
            return "LEGAL_CONFLICT";

         when NEED_CLASSIFICATION_INFORMATION =>
            return "NEED_CLASSIFICATION_INFORMATION";

         when NEED_INFORMATION =>
            return "NEED_INFORMATION";

         when NEED_PICTURES =>
            return "NEED_PICTURES";

         when NEED_VENDOR =>
            return "NEED_VENDOR";

         when NO_CATEGORY =>
            return "NO_CATEGORY";

         when NO_KNOWLEDGE =>
            return "NO_KNOWLEDGE";

         when NO_PARAMETERS_IN_SHOP_TITLE =>
            return "NO_PARAMETERS_IN_SHOP_TITLE";

         when NO_SIZE_MEASURE =>
            return "NO_SIZE_MEASURE";

         when SAMPLE_LINE =>
            return "SAMPLE_LINE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferProcessingNoteType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferProcessingNoteType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferProcessingNoteType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferProcessingNoteType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferProcessingNoteType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferProcessingNoteType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferProcessingStatusType_Type (Value : in String) return .Models.OfferProcessingStatusType_Type is
   begin
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      if Value = "READY" then
         return READY;
      end if;
      if Value = "IN_WORK" then
         return IN_WORK;
      end if;
      if Value = "NEED_INFO" then
         return NEED_INFO;
      end if;
      if Value = "NEED_MAPPING" then
         return NEED_MAPPING;
      end if;
      if Value = "NEED_CONTENT" then
         return NEED_CONTENT;
      end if;
      if Value = "CONTENT_PROCESSING" then
         return CONTENT_PROCESSING;
      end if;
      if Value = "SUSPENDED" then
         return SUSPENDED;
      end if;
      if Value = "REJECTED" then
         return REJECTED;
      end if;
      if Value = "REVIEW" then
         return REVIEW;
      end if;
      if Value = "CREATE_ERROR" then
         return CREATE_ERROR;
      end if;
      if Value = "UPDATE_ERROR" then
         return UPDATE_ERROR;
      end if;
      raise Constraint_Error;
   end To_OfferProcessingStatusType_Type;

   function To_String (Value : in .Models.OfferProcessingStatusType_Type) return String is
   begin
      case Value is
         when UNKNOWN =>
            return "UNKNOWN";

         when READY =>
            return "READY";

         when IN_WORK =>
            return "IN_WORK";

         when NEED_INFO =>
            return "NEED_INFO";

         when NEED_MAPPING =>
            return "NEED_MAPPING";

         when NEED_CONTENT =>
            return "NEED_CONTENT";

         when CONTENT_PROCESSING =>
            return "CONTENT_PROCESSING";

         when SUSPENDED =>
            return "SUSPENDED";

         when REJECTED =>
            return "REJECTED";

         when REVIEW =>
            return "REVIEW";

         when CREATE_ERROR =>
            return "CREATE_ERROR";

         when UPDATE_ERROR =>
            return "UPDATE_ERROR";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferProcessingStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferProcessingStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferProcessingStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferProcessingStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferProcessingStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferProcessingStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferSellingProgramStatusType_Type (Value : in String) return .Models.OfferSellingProgramStatusType_Type is
   begin
      if Value = "FINE" then
         return FINE;
      end if;
      if Value = "REJECT" then
         return REJECT;
      end if;
      raise Constraint_Error;
   end To_OfferSellingProgramStatusType_Type;

   function To_String (Value : in .Models.OfferSellingProgramStatusType_Type) return String is
   begin
      case Value is
         when FINE =>
            return "FINE";

         when REJECT =>
            return "REJECT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferSellingProgramStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferSellingProgramStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferSellingProgramStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferSellingProgramStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferSellingProgramStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferSellingProgramStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OfferType_Type (Value : in String) return .Models.OfferType_Type is
   begin
      if Value = "DEFAULT" then
         return DEFAULT;
      end if;
      if Value = "MEDICINE" then
         return MEDICINE;
      end if;
      if Value = "BOOK" then
         return BOOK;
      end if;
      if Value = "AUDIOBOOK" then
         return AUDIOBOOK;
      end if;
      if Value = "ARTIST_TITLE" then
         return ARTIST_TITLE;
      end if;
      if Value = "ON_DEMAND" then
         return ON_DEMAND;
      end if;
      raise Constraint_Error;
   end To_OfferType_Type;

   function To_String (Value : in .Models.OfferType_Type) return String is
   begin
      case Value is
         when DEFAULT =>
            return "DEFAULT";

         when MEDICINE =>
            return "MEDICINE";

         when BOOK =>
            return "BOOK";

         when AUDIOBOOK =>
            return "AUDIOBOOK";

         when ARTIST_TITLE =>
            return "ARTIST_TITLE";

         when ON_DEMAND =>
            return "ON_DEMAND";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OfferType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferVendorCode_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferVendorCode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferVendorCode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferVendorCode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferVendorCode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferVendor_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferVendor_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferVendor_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferVendor_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferVendor_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferWeightDimensionsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "length", Value.Length);
      Serialize (Into, "width", Value.Width);
      Serialize (Into, "height", Value.Height);
      Serialize (Into, "weight", Value.Weight);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferWeightDimensionsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferWeightDimensionsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "length", Value.Length);
      Swagger.Streams.Deserialize (Object, "width", Value.Width);
      Swagger.Streams.Deserialize (Object, "height", Value.Height);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferWeightDimensionsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferWeightDimensionsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OptionValuesLimitedDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("limitingOptionValueId", Value.Limiting_Option_Value_Id);
      Serialize (Into, "optionValueIds", Value.Option_Value_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OptionValuesLimitedDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OptionValuesLimitedDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "limitingOptionValueId", Value.Limiting_Option_Value_Id);
      Swagger.Streams.Deserialize (Object, "optionValueIds", Value.Option_Value_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OptionValuesLimitedDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OptionValuesLimitedDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBoxLayoutPartialCountDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("current", Value.Current);
      Into.Write_Entity ("total", Value.Total);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBoxLayoutPartialCountDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBoxLayoutPartialCountDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "current", Value.Current);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBoxLayoutPartialCountDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBoxLayoutPartialCountDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBusinessBuyerDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Inn.Is_Null then
         Into.Write_Entity ("inn", Value.Inn);
      end if;
      if not Value.Kpp.Is_Null then
         Into.Write_Entity ("kpp", Value.Kpp);
      end if;
      if not Value.Organization_Name.Is_Null then
         Into.Write_Entity ("organizationName", Value.Organization_Name);
      end if;
      if not Value.Organization_Jur_Address.Is_Null then
         Into.Write_Entity ("organizationJurAddress", Value.Organization_Jur_Address);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBusinessBuyerDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBusinessBuyerDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "inn", Value.Inn);
      Swagger.Streams.Deserialize (Object, "kpp", Value.Kpp);
      Swagger.Streams.Deserialize (Object, "organizationName", Value.Organization_Name);
      Swagger.Streams.Deserialize (Object, "organizationJurAddress", Value.Organization_Jur_Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBusinessBuyerDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBusinessBuyerDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderBuyerType_Type (Value : in String) return .Models.OrderBuyerType_Type is
   begin
      if Value = "PERSON" then
         return PERSON;
      end if;
      if Value = "BUSINESS" then
         return BUSINESS;
      end if;
      raise Constraint_Error;
   end To_OrderBuyerType_Type;

   function To_String (Value : in .Models.OrderBuyerType_Type) return String is
   begin
      case Value is
         when PERSON =>
            return "PERSON";

         when BUSINESS =>
            return "BUSINESS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBuyerType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBuyerType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBuyerType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderBuyerType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBuyerType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBuyerType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderCancellationReasonType_Type (Value : in String) return .Models.OrderCancellationReasonType_Type is
   begin
      if Value = "ORDER_DELIVERED" then
         return DELIVERED;
      end if;
      if Value = "ORDER_IN_DELIVERY" then
         return IN_DELIVERY;
      end if;
      raise Constraint_Error;
   end To_OrderCancellationReasonType_Type;

   function To_String (Value : in .Models.OrderCancellationReasonType_Type) return String is
   begin
      case Value is
         when DELIVERED =>
            return "ORDER_DELIVERED";

         when IN_DELIVERY =>
            return "ORDER_IN_DELIVERY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderCancellationReasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderCancellationReasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderCancellationReasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderCancellationReasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderCancellationReasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderCancellationReasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderCourierDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.Phone_Extension.Is_Null then
         Into.Write_Entity ("phoneExtension", Value.Phone_Extension);
      end if;
      if not Value.Vehicle_Number.Is_Null then
         Into.Write_Entity ("vehicleNumber", Value.Vehicle_Number);
      end if;
      if not Value.Vehicle_Description.Is_Null then
         Into.Write_Entity ("vehicleDescription", Value.Vehicle_Description);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderCourierDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderCourierDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "phoneExtension", Value.Phone_Extension);
      Swagger.Streams.Deserialize (Object, "vehicleNumber", Value.Vehicle_Number);
      Swagger.Streams.Deserialize (Object, "vehicleDescription", Value.Vehicle_Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderCourierDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderCourierDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryDateDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("toDate", Value.To_Date);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryDateDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryDateDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "toDate", Value.To_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryDateDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryDateDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderDeliveryDateReasonType_Type (Value : in String) return .Models.OrderDeliveryDateReasonType_Type is
   begin
      if Value = "USER_MOVED_DELIVERY_DATES" then
         return USER_MOVED_DELIVERY_DATES;
      end if;
      if Value = "PARTNER_MOVED_DELIVERY_DATES" then
         return PARTNER_MOVED_DELIVERY_DATES;
      end if;
      raise Constraint_Error;
   end To_OrderDeliveryDateReasonType_Type;

   function To_String (Value : in .Models.OrderDeliveryDateReasonType_Type) return String is
   begin
      case Value is
         when USER_MOVED_DELIVERY_DATES =>
            return "USER_MOVED_DELIVERY_DATES";

         when PARTNER_MOVED_DELIVERY_DATES =>
            return "PARTNER_MOVED_DELIVERY_DATES";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryDateReasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryDateReasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryDateReasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderDeliveryDateReasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryDateReasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryDateReasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryDatesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.From_Date.Is_Null then
         Into.Write_Entity ("fromDate", Value.From_Date);
      end if;
      if not Value.To_Date.Is_Null then
         Into.Write_Entity ("toDate", Value.To_Date);
      end if;
      if not Value.From_Time.Is_Null then
         Into.Write_Entity ("fromTime", Value.From_Time);
      end if;
      if not Value.To_Time.Is_Null then
         Into.Write_Entity ("toTime", Value.To_Time);
      end if;
      if not Value.Real_Delivery_Date.Is_Null then
         Into.Write_Entity ("realDeliveryDate", Value.Real_Delivery_Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryDatesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryDatesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "fromDate", Value.From_Date);
      Swagger.Streams.Deserialize (Object, "toDate", Value.To_Date);
      Swagger.Streams.Deserialize (Object, "fromTime", Value.From_Time);
      Swagger.Streams.Deserialize (Object, "toTime", Value.To_Time);
      Swagger.Streams.Deserialize (Object, "realDeliveryDate", Value.Real_Delivery_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryDatesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryDatesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderDeliveryDispatchType_Type (Value : in String) return .Models.OrderDeliveryDispatchType_Type is
   begin
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      if Value = "BUYER" then
         return BUYER;
      end if;
      if Value = "MARKET_PARTNER_OUTLET" then
         return MARKET_PARTNER_OUTLET;
      end if;
      if Value = "MARKET_BRANDED_OUTLET" then
         return MARKET_BRANDED_OUTLET;
      end if;
      if Value = "SHOP_OUTLET" then
         return SHOP_OUTLET;
      end if;
      if Value = "DROPOFF" then
         return DROPOFF;
      end if;
      raise Constraint_Error;
   end To_OrderDeliveryDispatchType_Type;

   function To_String (Value : in .Models.OrderDeliveryDispatchType_Type) return String is
   begin
      case Value is
         when UNKNOWN =>
            return "UNKNOWN";

         when BUYER =>
            return "BUYER";

         when MARKET_PARTNER_OUTLET =>
            return "MARKET_PARTNER_OUTLET";

         when MARKET_BRANDED_OUTLET =>
            return "MARKET_BRANDED_OUTLET";

         when SHOP_OUTLET =>
            return "SHOP_OUTLET";

         when DROPOFF =>
            return "DROPOFF";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryDispatchType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryDispatchType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryDispatchType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderDeliveryDispatchType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryDispatchType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryDispatchType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderDeliveryEacType_Type (Value : in String) return .Models.OrderDeliveryEacType_Type is
   begin
      if Value = "MERCHANT_TO_COURIER" then
         return MERCHANT_TO_COURIER;
      end if;
      if Value = "COURIER_TO_MERCHANT" then
         return COURIER_TO_MERCHANT;
      end if;
      if Value = "CHECKING_BY_MERCHANT" then
         return CHECKING_BY_MERCHANT;
      end if;
      raise Constraint_Error;
   end To_OrderDeliveryEacType_Type;

   function To_String (Value : in .Models.OrderDeliveryEacType_Type) return String is
   begin
      case Value is
         when MERCHANT_TO_COURIER =>
            return "MERCHANT_TO_COURIER";

         when COURIER_TO_MERCHANT =>
            return "COURIER_TO_MERCHANT";

         when CHECKING_BY_MERCHANT =>
            return "CHECKING_BY_MERCHANT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryEacType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryEacType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryEacType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderDeliveryEacType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryEacType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryEacType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderDeliveryPartnerType_Type (Value : in String) return .Models.OrderDeliveryPartnerType_Type is
   begin
      if Value = "SHOP" then
         return SHOP;
      end if;
      if Value = "YANDEX_MARKET" then
         return YANDEX_MARKET;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderDeliveryPartnerType_Type;

   function To_String (Value : in .Models.OrderDeliveryPartnerType_Type) return String is
   begin
      case Value is
         when SHOP =>
            return "SHOP";

         when YANDEX_MARKET =>
            return "YANDEX_MARKET";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryPartnerType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryPartnerType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryPartnerType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderDeliveryPartnerType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryPartnerType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryPartnerType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderDeliveryType_Type (Value : in String) return .Models.OrderDeliveryType_Type is
   begin
      if Value = "DELIVERY" then
         return DELIVERY;
      end if;
      if Value = "PICKUP" then
         return PICKUP;
      end if;
      if Value = "POST" then
         return POST;
      end if;
      if Value = "DIGITAL" then
         return DIGITAL;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderDeliveryType_Type;

   function To_String (Value : in .Models.OrderDeliveryType_Type) return String is
   begin
      case Value is
         when DELIVERY =>
            return "DELIVERY";

         when PICKUP =>
            return "PICKUP";

         when POST =>
            return "POST";

         when DIGITAL =>
            return "DIGITAL";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderDeliveryType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDigitalItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("code", Value.Code);
      Into.Write_Entity ("slip", Value.Slip);
      Into.Write_Entity ("activate_till", Value.Activate_Till);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDigitalItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDigitalItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "slip", Value.Slip);
      Swagger.Streams.Deserialize (Object, "activate_till", Value.Activate_Till);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDigitalItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDigitalItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderDocumentStatusType_Type (Value : in String) return .Models.OrderDocumentStatusType_Type is
   begin
      if Value = "READY" then
         return READY;
      end if;
      if Value = "NOT_READY" then
         return NOT_READY;
      end if;
      raise Constraint_Error;
   end To_OrderDocumentStatusType_Type;

   function To_String (Value : in .Models.OrderDocumentStatusType_Type) return String is
   begin
      case Value is
         when READY =>
            return "READY";

         when NOT_READY =>
            return "NOT_READY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDocumentStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDocumentStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDocumentStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderDocumentStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDocumentStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDocumentStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemInstanceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Cis.Is_Null then
         Into.Write_Entity ("cis", Value.Cis);
      end if;
      if not Value.Cis_Full.Is_Null then
         Into.Write_Entity ("cisFull", Value.Cis_Full);
      end if;
      if not Value.Uin.Is_Null then
         Into.Write_Entity ("uin", Value.Uin);
      end if;
      if not Value.Rnpt.Is_Null then
         Into.Write_Entity ("rnpt", Value.Rnpt);
      end if;
      if not Value.Gtd.Is_Null then
         Into.Write_Entity ("gtd", Value.Gtd);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemInstanceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemInstanceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "cis", Value.Cis);
      Swagger.Streams.Deserialize (Object, "cisFull", Value.Cis_Full);
      Swagger.Streams.Deserialize (Object, "uin", Value.Uin);
      Swagger.Streams.Deserialize (Object, "rnpt", Value.Rnpt);
      Swagger.Streams.Deserialize (Object, "gtd", Value.Gtd);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemInstanceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemInstanceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderItemInstanceType_Type (Value : in String) return .Models.OrderItemInstanceType_Type is
   begin
      if Value = "CIS" then
         return CIS;
      end if;
      if Value = "UIN" then
         return UIN;
      end if;
      if Value = "RNPT" then
         return RNPT;
      end if;
      if Value = "GTD" then
         return GTD;
      end if;
      raise Constraint_Error;
   end To_OrderItemInstanceType_Type;

   function To_String (Value : in .Models.OrderItemInstanceType_Type) return String is
   begin
      case Value is
         when CIS =>
            return "CIS";

         when UIN =>
            return "UIN";

         when RNPT =>
            return "RNPT";

         when GTD =>
            return "GTD";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemInstanceType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemInstanceType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemInstanceType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderItemInstanceType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemInstanceType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemInstanceType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderItemStatusType_Type (Value : in String) return .Models.OrderItemStatusType_Type is
   begin
      if Value = "REJECTED" then
         return REJECTED;
      end if;
      if Value = "RETURNED" then
         return RETURNED;
      end if;
      raise Constraint_Error;
   end To_OrderItemStatusType_Type;

   function To_String (Value : in .Models.OrderItemStatusType_Type) return String is
   begin
      case Value is
         when REJECTED =>
            return "REJECTED";

         when RETURNED =>
            return "RETURNED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderItemStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderItemSubsidyType_Type (Value : in String) return .Models.OrderItemSubsidyType_Type is
   begin
      if Value = "YANDEX_CASHBACK" then
         return YANDEX_CASHBACK;
      end if;
      if Value = "SUBSIDY" then
         return SUBSIDY;
      end if;
      raise Constraint_Error;
   end To_OrderItemSubsidyType_Type;

   function To_String (Value : in .Models.OrderItemSubsidyType_Type) return String is
   begin
      case Value is
         when YANDEX_CASHBACK =>
            return "YANDEX_CASHBACK";

         when SUBSIDY =>
            return "SUBSIDY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemSubsidyType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemSubsidyType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemSubsidyType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderItemSubsidyType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemSubsidyType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemSubsidyType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderItemsModificationRequestReasonType_Type (Value : in String) return .Models.OrderItemsModificationRequestReasonType_Type is
   begin
      if Value = "PARTNER_REQUESTED_REMOVE" then
         return PARTNER_REQUESTED_REMOVE;
      end if;
      if Value = "USER_REQUESTED_REMOVE" then
         return USER_REQUESTED_REMOVE;
      end if;
      raise Constraint_Error;
   end To_OrderItemsModificationRequestReasonType_Type;

   function To_String (Value : in .Models.OrderItemsModificationRequestReasonType_Type) return String is
   begin
      case Value is
         when PARTNER_REQUESTED_REMOVE =>
            return "PARTNER_REQUESTED_REMOVE";

         when USER_REQUESTED_REMOVE =>
            return "USER_REQUESTED_REMOVE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemsModificationRequestReasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemsModificationRequestReasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemsModificationRequestReasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderItemsModificationRequestReasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemsModificationRequestReasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemsModificationRequestReasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderLiftType_Type (Value : in String) return .Models.OrderLiftType_Type is
   begin
      if Value = "NOT_NEEDED" then
         return NOT_NEEDED;
      end if;
      if Value = "MANUAL" then
         return MANUAL;
      end if;
      if Value = "ELEVATOR" then
         return ELEVATOR;
      end if;
      if Value = "CARGO_ELEVATOR" then
         return CARGO_ELEVATOR;
      end if;
      if Value = "FREE" then
         return FREE;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderLiftType_Type;

   function To_String (Value : in .Models.OrderLiftType_Type) return String is
   begin
      case Value is
         when NOT_NEEDED =>
            return "NOT_NEEDED";

         when MANUAL =>
            return "MANUAL";

         when ELEVATOR =>
            return "ELEVATOR";

         when CARGO_ELEVATOR =>
            return "CARGO_ELEVATOR";

         when FREE =>
            return "FREE";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLiftType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLiftType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLiftType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderLiftType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLiftType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLiftType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderParcelBoxDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Fulfilment_Id.Is_Null then
         Into.Write_Entity ("fulfilmentId", Value.Fulfilment_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderParcelBoxDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderParcelBoxDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "fulfilmentId", Value.Fulfilment_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderParcelBoxDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderParcelBoxDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderPaymentMethodType_Type (Value : in String) return .Models.OrderPaymentMethodType_Type is
   begin
      if Value = "CASH_ON_DELIVERY" then
         return CASH_ON_DELIVERY;
      end if;
      if Value = "CARD_ON_DELIVERY" then
         return CARD_ON_DELIVERY;
      end if;
      if Value = "BOUND_CARD_ON_DELIVERY" then
         return BOUND_CARD_ON_DELIVERY;
      end if;
      if Value = "YANDEX" then
         return YANDEX;
      end if;
      if Value = "APPLE_PAY" then
         return APPLE_PAY;
      end if;
      if Value = "EXTERNAL_CERTIFICATE" then
         return EXTERNAL_CERTIFICATE;
      end if;
      if Value = "CREDIT" then
         return CREDIT;
      end if;
      if Value = "GOOGLE_PAY" then
         return GOOGLE_PAY;
      end if;
      if Value = "TINKOFF_CREDIT" then
         return TINKOFF_CREDIT;
      end if;
      if Value = "SBP" then
         return SBP;
      end if;
      if Value = "TINKOFF_INSTALLMENTS" then
         return TINKOFF_INSTALLMENTS;
      end if;
      if Value = "B2B_ACCOUNT_PREPAYMENT" then
         return B2B_ACCOUNT_PREPAYMENT;
      end if;
      if Value = "B2B_ACCOUNT_POSTPAYMENT" then
         return B2B_ACCOUNT_POSTPAYMENT;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderPaymentMethodType_Type;

   function To_String (Value : in .Models.OrderPaymentMethodType_Type) return String is
   begin
      case Value is
         when CASH_ON_DELIVERY =>
            return "CASH_ON_DELIVERY";

         when CARD_ON_DELIVERY =>
            return "CARD_ON_DELIVERY";

         when BOUND_CARD_ON_DELIVERY =>
            return "BOUND_CARD_ON_DELIVERY";

         when YANDEX =>
            return "YANDEX";

         when APPLE_PAY =>
            return "APPLE_PAY";

         when EXTERNAL_CERTIFICATE =>
            return "EXTERNAL_CERTIFICATE";

         when CREDIT =>
            return "CREDIT";

         when GOOGLE_PAY =>
            return "GOOGLE_PAY";

         when TINKOFF_CREDIT =>
            return "TINKOFF_CREDIT";

         when SBP =>
            return "SBP";

         when TINKOFF_INSTALLMENTS =>
            return "TINKOFF_INSTALLMENTS";

         when B2B_ACCOUNT_PREPAYMENT =>
            return "B2B_ACCOUNT_PREPAYMENT";

         when B2B_ACCOUNT_POSTPAYMENT =>
            return "B2B_ACCOUNT_POSTPAYMENT";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPaymentMethodType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPaymentMethodType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPaymentMethodType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderPaymentMethodType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPaymentMethodType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPaymentMethodType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderPaymentType_Type (Value : in String) return .Models.OrderPaymentType_Type is
   begin
      if Value = "PREPAID" then
         return PREPAID;
      end if;
      if Value = "POSTPAID" then
         return POSTPAID;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderPaymentType_Type;

   function To_String (Value : in .Models.OrderPaymentType_Type) return String is
   begin
      case Value is
         when PREPAID =>
            return "PREPAID";

         when POSTPAID =>
            return "POSTPAID";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPaymentType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPaymentType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPaymentType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderPaymentType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPaymentType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPaymentType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderPromoType_Type (Value : in String) return .Models.OrderPromoType_Type is
   begin
      if Value = "DIRECT_DISCOUNT" then
         return DIRECT_DISCOUNT;
      end if;
      if Value = "BLUE_SET" then
         return BLUE_SET;
      end if;
      if Value = "BLUE_FLASH" then
         return BLUE_FLASH;
      end if;
      if Value = "GENERIC_BUNDLE" then
         return GENERIC_BUNDLE;
      end if;
      if Value = "MARKET_COUPON" then
         return MARKET_COUPON;
      end if;
      if Value = "MARKET_PROMOCODE" then
         return MARKET_PROMOCODE;
      end if;
      if Value = "MARKET_DEAL" then
         return MARKET_DEAL;
      end if;
      if Value = "MARKET_BLUE" then
         return MARKET_BLUE;
      end if;
      if Value = "MARKET_PRIME" then
         return MARKET_PRIME;
      end if;
      if Value = "YANDEX_PLUS" then
         return YANDEX_PLUS;
      end if;
      if Value = "BERU_PLUS" then
         return BERU_PLUS;
      end if;
      if Value = "MARKET_COIN" then
         return MARKET_COIN;
      end if;
      if Value = "YANDEX_EMPLOYEE" then
         return YANDEX_EMPLOYEE;
      end if;
      if Value = "LIMITED_FREE_DELIVERY_PROMO" then
         return LIMITED_FREE_DELIVERY_PROMO;
      end if;
      if Value = "FREE_DELIVERY_THRESHOLD" then
         return FREE_DELIVERY_THRESHOLD;
      end if;
      if Value = "MULTICART_DISCOUNT" then
         return MULTICART_DISCOUNT;
      end if;
      if Value = "PRICE_DROP_AS_YOU_SHOP" then
         return PRICE_DROP_AS_YOU_SHOP;
      end if;
      if Value = "FREE_DELIVERY_FOR_LDI" then
         return FREE_DELIVERY_FOR_LDI;
      end if;
      if Value = "FREE_DELIVERY_FOR_LSC" then
         return FREE_DELIVERY_FOR_LSC;
      end if;
      if Value = "SECRET_SALE" then
         return SECRET_SALE;
      end if;
      if Value = "FREE_PICKUP" then
         return FREE_PICKUP;
      end if;
      if Value = "CHEAPEST_AS_GIFT" then
         return CHEAPEST_AS_GIFT;
      end if;
      if Value = "CASHBACK" then
         return CASHBACK;
      end if;
      if Value = "SUPPLIER_MULTICART_DISCOUNT" then
         return SUPPLIER_MULTICART_DISCOUNT;
      end if;
      if Value = "SPREAD_DISCOUNT_COUNT" then
         return SPREAD_DISCOUNT_COUNT;
      end if;
      if Value = "SPREAD_DISCOUNT_RECEIPT" then
         return SPREAD_DISCOUNT_RECEIPT;
      end if;
      if Value = "ANNOUNCEMENT_PROMO" then
         return ANNOUNCEMENT_PROMO;
      end if;
      if Value = "DISCOUNT_BY_PAYMENT_TYPE" then
         return DISCOUNT_BY_PAYMENT_TYPE;
      end if;
      if Value = "PERCENT_DISCOUNT" then
         return PERCENT_DISCOUNT;
      end if;
      if Value = "DCO_EXTRA_DISCOUNT" then
         return DCO_EXTRA_DISCOUNT;
      end if;
      if Value = "EMPTY_PROMO" then
         return EMPTY_PROMO;
      end if;
      if Value = "BLOCKING_PROMO" then
         return BLOCKING_PROMO;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderPromoType_Type;

   function To_String (Value : in .Models.OrderPromoType_Type) return String is
   begin
      case Value is
         when DIRECT_DISCOUNT =>
            return "DIRECT_DISCOUNT";

         when BLUE_SET =>
            return "BLUE_SET";

         when BLUE_FLASH =>
            return "BLUE_FLASH";

         when GENERIC_BUNDLE =>
            return "GENERIC_BUNDLE";

         when MARKET_COUPON =>
            return "MARKET_COUPON";

         when MARKET_PROMOCODE =>
            return "MARKET_PROMOCODE";

         when MARKET_DEAL =>
            return "MARKET_DEAL";

         when MARKET_BLUE =>
            return "MARKET_BLUE";

         when MARKET_PRIME =>
            return "MARKET_PRIME";

         when YANDEX_PLUS =>
            return "YANDEX_PLUS";

         when BERU_PLUS =>
            return "BERU_PLUS";

         when MARKET_COIN =>
            return "MARKET_COIN";

         when YANDEX_EMPLOYEE =>
            return "YANDEX_EMPLOYEE";

         when LIMITED_FREE_DELIVERY_PROMO =>
            return "LIMITED_FREE_DELIVERY_PROMO";

         when FREE_DELIVERY_THRESHOLD =>
            return "FREE_DELIVERY_THRESHOLD";

         when MULTICART_DISCOUNT =>
            return "MULTICART_DISCOUNT";

         when PRICE_DROP_AS_YOU_SHOP =>
            return "PRICE_DROP_AS_YOU_SHOP";

         when FREE_DELIVERY_FOR_LDI =>
            return "FREE_DELIVERY_FOR_LDI";

         when FREE_DELIVERY_FOR_LSC =>
            return "FREE_DELIVERY_FOR_LSC";

         when SECRET_SALE =>
            return "SECRET_SALE";

         when FREE_PICKUP =>
            return "FREE_PICKUP";

         when CHEAPEST_AS_GIFT =>
            return "CHEAPEST_AS_GIFT";

         when CASHBACK =>
            return "CASHBACK";

         when SUPPLIER_MULTICART_DISCOUNT =>
            return "SUPPLIER_MULTICART_DISCOUNT";

         when SPREAD_DISCOUNT_COUNT =>
            return "SPREAD_DISCOUNT_COUNT";

         when SPREAD_DISCOUNT_RECEIPT =>
            return "SPREAD_DISCOUNT_RECEIPT";

         when ANNOUNCEMENT_PROMO =>
            return "ANNOUNCEMENT_PROMO";

         when DISCOUNT_BY_PAYMENT_TYPE =>
            return "DISCOUNT_BY_PAYMENT_TYPE";

         when PERCENT_DISCOUNT =>
            return "PERCENT_DISCOUNT";

         when DCO_EXTRA_DISCOUNT =>
            return "DCO_EXTRA_DISCOUNT";

         when EMPTY_PROMO =>
            return "EMPTY_PROMO";

         when BLOCKING_PROMO =>
            return "BLOCKING_PROMO";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderPromoType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderPromoType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderPromoType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderPromoType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderPromoType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderPromoType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderStatsStatusType_Type (Value : in String) return .Models.OrderStatsStatusType_Type is
   begin
      if Value = "CANCELLED_BEFORE_PROCESSING" then
         return CANCELLED_BEFORE_PROCESSING;
      end if;
      if Value = "CANCELLED_IN_DELIVERY" then
         return CANCELLED_IN_DELIVERY;
      end if;
      if Value = "CANCELLED_IN_PROCESSING" then
         return CANCELLED_IN_PROCESSING;
      end if;
      if Value = "DELIVERY" then
         return DELIVERY;
      end if;
      if Value = "DELIVERED" then
         return DELIVERED;
      end if;
      if Value = "PARTIALLY_DELIVERED" then
         return PARTIALLY_DELIVERED;
      end if;
      if Value = "PARTIALLY_RETURNED" then
         return PARTIALLY_RETURNED;
      end if;
      if Value = "PENDING" then
         return PENDING;
      end if;
      if Value = "PICKUP" then
         return PICKUP;
      end if;
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      if Value = "RESERVED" then
         return RESERVED;
      end if;
      if Value = "RETURNED" then
         return RETURNED;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      if Value = "UNPAID" then
         return UNPAID;
      end if;
      if Value = "LOST" then
         return LOST;
      end if;
      raise Constraint_Error;
   end To_OrderStatsStatusType_Type;

   function To_String (Value : in .Models.OrderStatsStatusType_Type) return String is
   begin
      case Value is
         when CANCELLED_BEFORE_PROCESSING =>
            return "CANCELLED_BEFORE_PROCESSING";

         when CANCELLED_IN_DELIVERY =>
            return "CANCELLED_IN_DELIVERY";

         when CANCELLED_IN_PROCESSING =>
            return "CANCELLED_IN_PROCESSING";

         when DELIVERY =>
            return "DELIVERY";

         when DELIVERED =>
            return "DELIVERED";

         when PARTIALLY_DELIVERED =>
            return "PARTIALLY_DELIVERED";

         when PARTIALLY_RETURNED =>
            return "PARTIALLY_RETURNED";

         when PENDING =>
            return "PENDING";

         when PICKUP =>
            return "PICKUP";

         when PROCESSING =>
            return "PROCESSING";

         when RESERVED =>
            return "RESERVED";

         when RETURNED =>
            return "RETURNED";

         when UNKNOWN =>
            return "UNKNOWN";

         when UNPAID =>
            return "UNPAID";

         when LOST =>
            return "LOST";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatsStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatsStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatsStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderStatsStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatsStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatsStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusChangeDeliveryDatesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Real_Delivery_Date.Is_Null then
         Into.Write_Entity ("realDeliveryDate", Value.Real_Delivery_Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusChangeDeliveryDatesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusChangeDeliveryDatesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "realDeliveryDate", Value.Real_Delivery_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusChangeDeliveryDatesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusChangeDeliveryDatesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderStatusType_Type (Value : in String) return .Models.OrderStatusType_Type is
   begin
      if Value = "PLACING" then
         return PLACING;
      end if;
      if Value = "RESERVED" then
         return RESERVED;
      end if;
      if Value = "UNPAID" then
         return UNPAID;
      end if;
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      if Value = "DELIVERY" then
         return DELIVERY;
      end if;
      if Value = "PICKUP" then
         return PICKUP;
      end if;
      if Value = "DELIVERED" then
         return DELIVERED;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      if Value = "PENDING" then
         return PENDING;
      end if;
      if Value = "PARTIALLY_RETURNED" then
         return PARTIALLY_RETURNED;
      end if;
      if Value = "RETURNED" then
         return RETURNED;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderStatusType_Type;

   function To_String (Value : in .Models.OrderStatusType_Type) return String is
   begin
      case Value is
         when PLACING =>
            return "PLACING";

         when RESERVED =>
            return "RESERVED";

         when UNPAID =>
            return "UNPAID";

         when PROCESSING =>
            return "PROCESSING";

         when DELIVERY =>
            return "DELIVERY";

         when PICKUP =>
            return "PICKUP";

         when DELIVERED =>
            return "DELIVERED";

         when CANCELLED =>
            return "CANCELLED";

         when PENDING =>
            return "PENDING";

         when PARTIALLY_RETURNED =>
            return "PARTIALLY_RETURNED";

         when RETURNED =>
            return "RETURNED";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderSubsidyType_Type (Value : in String) return .Models.OrderSubsidyType_Type is
   begin
      if Value = "YANDEX_CASHBACK" then
         return YANDEX_CASHBACK;
      end if;
      if Value = "SUBSIDY" then
         return SUBSIDY;
      end if;
      if Value = "DELIVERY" then
         return DELIVERY;
      end if;
      raise Constraint_Error;
   end To_OrderSubsidyType_Type;

   function To_String (Value : in .Models.OrderSubsidyType_Type) return String is
   begin
      case Value is
         when YANDEX_CASHBACK =>
            return "YANDEX_CASHBACK";

         when SUBSIDY =>
            return "SUBSIDY";

         when DELIVERY =>
            return "DELIVERY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderSubsidyType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderSubsidyType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderSubsidyType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderSubsidyType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderSubsidyType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderSubsidyType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderSubstatusType_Type (Value : in String) return .Models.OrderSubstatusType_Type is
   begin
      if Value = "RESERVATION_EXPIRED" then
         return RESERVATION_EXPIRED;
      end if;
      if Value = "USER_NOT_PAID" then
         return USER_NOT_PAID;
      end if;
      if Value = "USER_UNREACHABLE" then
         return USER_UNREACHABLE;
      end if;
      if Value = "USER_CHANGED_MIND" then
         return USER_CHANGED_MIND;
      end if;
      if Value = "USER_REFUSED_DELIVERY" then
         return USER_REFUSED_DELIVERY;
      end if;
      if Value = "USER_REFUSED_PRODUCT" then
         return USER_REFUSED_PRODUCT;
      end if;
      if Value = "SHOP_FAILED" then
         return SHOP_FAILED;
      end if;
      if Value = "USER_REFUSED_QUALITY" then
         return USER_REFUSED_QUALITY;
      end if;
      if Value = "REPLACING_ORDER" then
         return REPLACING_ORDER;
      end if;
      if Value = "PROCESSING_EXPIRED" then
         return PROCESSING_EXPIRED;
      end if;
      if Value = "PENDING_EXPIRED" then
         return PENDING_EXPIRED;
      end if;
      if Value = "SHOP_PENDING_CANCELLED" then
         return SHOP_PENDING_CANCELLED;
      end if;
      if Value = "PENDING_CANCELLED" then
         return PENDING_CANCELLED;
      end if;
      if Value = "USER_FRAUD" then
         return USER_FRAUD;
      end if;
      if Value = "RESERVATION_FAILED" then
         return RESERVATION_FAILED;
      end if;
      if Value = "USER_PLACED_OTHER_ORDER" then
         return USER_PLACED_OTHER_ORDER;
      end if;
      if Value = "USER_BOUGHT_CHEAPER" then
         return USER_BOUGHT_CHEAPER;
      end if;
      if Value = "MISSING_ITEM" then
         return MISSING_ITEM;
      end if;
      if Value = "BROKEN_ITEM" then
         return BROKEN_ITEM;
      end if;
      if Value = "WRONG_ITEM" then
         return WRONG_ITEM;
      end if;
      if Value = "PICKUP_EXPIRED" then
         return PICKUP_EXPIRED;
      end if;
      if Value = "DELIVERY_PROBLEMS" then
         return DELIVERY_PROBLEMS;
      end if;
      if Value = "LATE_CONTACT" then
         return LATE_CONTACT;
      end if;
      if Value = "CUSTOM" then
         return CUSTOM;
      end if;
      if Value = "DELIVERY_SERVICE_FAILED" then
         return DELIVERY_SERVICE_FAILED;
      end if;
      if Value = "WAREHOUSE_FAILED_TO_SHIP" then
         return WAREHOUSE_FAILED_TO_SHIP;
      end if;
      if Value = "DELIVERY_SERIVCE_UNDELIVERED" then
         return DELIVERY_SERIVCE_UNDELIVERED;
      end if;
      if Value = "DELIVERY_SERVICE_UNDELIVERED" then
         return DELIVERY_SERVICE_UNDELIVERED;
      end if;
      if Value = "PREORDER" then
         return PREORDER;
      end if;
      if Value = "AWAIT_CONFIRMATION" then
         return AWAIT_CONFIRMATION;
      end if;
      if Value = "STARTED" then
         return STARTED;
      end if;
      if Value = "PACKAGING" then
         return PACKAGING;
      end if;
      if Value = "READY_TO_SHIP" then
         return READY_TO_SHIP;
      end if;
      if Value = "SHIPPED" then
         return SHIPPED;
      end if;
      if Value = "ASYNC_PROCESSING" then
         return ASYNC_PROCESSING;
      end if;
      if Value = "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA" then
         return USER_REFUSED_TO_PROVIDE_PERSONAL_DATA;
      end if;
      if Value = "WAITING_USER_INPUT" then
         return WAITING_USER_INPUT;
      end if;
      if Value = "WAITING_BANK_DECISION" then
         return WAITING_BANK_DECISION;
      end if;
      if Value = "BANK_REJECT_CREDIT_OFFER" then
         return BANK_REJECT_CREDIT_OFFER;
      end if;
      if Value = "CUSTOMER_REJECT_CREDIT_OFFER" then
         return CUSTOMER_REJECT_CREDIT_OFFER;
      end if;
      if Value = "CREDIT_OFFER_FAILED" then
         return CREDIT_OFFER_FAILED;
      end if;
      if Value = "AWAIT_DELIVERY_DATES_CONFIRMATION" then
         return AWAIT_DELIVERY_DATES_CONFIRMATION;
      end if;
      if Value = "SERVICE_FAULT" then
         return SERVICE_FAULT;
      end if;
      if Value = "DELIVERY_SERVICE_RECEIVED" then
         return DELIVERY_SERVICE_RECEIVED;
      end if;
      if Value = "USER_RECEIVED" then
         return USER_RECEIVED;
      end if;
      if Value = "WAITING_FOR_STOCKS" then
         return WAITING_FOR_STOCKS;
      end if;
      if Value = "AS_PART_OF_MULTI_ORDER" then
         return AS_PART_OF_MULTI_ORDER;
      end if;
      if Value = "READY_FOR_LAST_MILE" then
         return READY_FOR_LAST_MILE;
      end if;
      if Value = "LAST_MILE_STARTED" then
         return LAST_MILE_STARTED;
      end if;
      if Value = "ANTIFRAUD" then
         return ANTIFRAUD;
      end if;
      if Value = "DELIVERY_USER_NOT_RECEIVED" then
         return DELIVERY_USER_NOT_RECEIVED;
      end if;
      if Value = "DELIVERY_SERVICE_DELIVERED" then
         return DELIVERY_SERVICE_DELIVERED;
      end if;
      if Value = "DELIVERED_USER_NOT_RECEIVED" then
         return DELIVERED_USER_NOT_RECEIVED;
      end if;
      if Value = "USER_WANTED_ANOTHER_PAYMENT_METHOD" then
         return USER_WANTED_ANOTHER_PAYMENT_METHOD;
      end if;
      if Value = "USER_RECEIVED_TECHNICAL_ERROR" then
         return USER_RECEIVED_TECHNICAL_ERROR;
      end if;
      if Value = "USER_FORGOT_TO_USE_BONUS" then
         return USER_FORGOT_TO_USE_BONUS;
      end if;
      if Value = "RECEIVED_ON_DISTRIBUTION_CENTER" then
         return RECEIVED_ON_DISTRIBUTION_CENTER;
      end if;
      if Value = "DELIVERY_SERVICE_NOT_RECEIVED" then
         return DELIVERY_SERVICE_NOT_RECEIVED;
      end if;
      if Value = "DELIVERY_SERVICE_LOST" then
         return DELIVERY_SERVICE_LOST;
      end if;
      if Value = "SHIPPED_TO_WRONG_DELIVERY_SERVICE" then
         return SHIPPED_TO_WRONG_DELIVERY_SERVICE;
      end if;
      if Value = "DELIVERED_USER_RECEIVED" then
         return DELIVERED_USER_RECEIVED;
      end if;
      if Value = "WAITING_TINKOFF_DECISION" then
         return WAITING_TINKOFF_DECISION;
      end if;
      if Value = "COURIER_SEARCH" then
         return COURIER_SEARCH;
      end if;
      if Value = "COURIER_FOUND" then
         return COURIER_FOUND;
      end if;
      if Value = "COURIER_IN_TRANSIT_TO_SENDER" then
         return COURIER_IN_TRANSIT_TO_SENDER;
      end if;
      if Value = "COURIER_ARRIVED_TO_SENDER" then
         return COURIER_ARRIVED_TO_SENDER;
      end if;
      if Value = "COURIER_RECEIVED" then
         return COURIER_RECEIVED;
      end if;
      if Value = "COURIER_NOT_FOUND" then
         return COURIER_NOT_FOUND;
      end if;
      if Value = "COURIER_NOT_DELIVER_ORDER" then
         return COURIER_NOT_DELIVER_ORDER;
      end if;
      if Value = "COURIER_RETURNS_ORDER" then
         return COURIER_RETURNS_ORDER;
      end if;
      if Value = "COURIER_RETURNED_ORDER" then
         return COURIER_RETURNED_ORDER;
      end if;
      if Value = "WAITING_USER_DELIVERY_INPUT" then
         return WAITING_USER_DELIVERY_INPUT;
      end if;
      if Value = "PICKUP_SERVICE_RECEIVED" then
         return PICKUP_SERVICE_RECEIVED;
      end if;
      if Value = "PICKUP_USER_RECEIVED" then
         return PICKUP_USER_RECEIVED;
      end if;
      if Value = "CANCELLED_COURIER_NOT_FOUND" then
         return CANCELLED_COURIER_NOT_FOUND;
      end if;
      if Value = "COURIER_NOT_COME_FOR_ORDER" then
         return COURIER_NOT_COME_FOR_ORDER;
      end if;
      if Value = "DELIVERY_NOT_MANAGED_REGION" then
         return DELIVERY_NOT_MANAGED_REGION;
      end if;
      if Value = "INCOMPLETE_CONTACT_INFORMATION" then
         return INCOMPLETE_CONTACT_INFORMATION;
      end if;
      if Value = "INCOMPLETE_MULTI_ORDER" then
         return INCOMPLETE_MULTI_ORDER;
      end if;
      if Value = "INAPPROPRIATE_WEIGHT_SIZE" then
         return INAPPROPRIATE_WEIGHT_SIZE;
      end if;
      if Value = "TECHNICAL_ERROR" then
         return TECHNICAL_ERROR;
      end if;
      if Value = "SORTING_CENTER_LOST" then
         return SORTING_CENTER_LOST;
      end if;
      if Value = "COURIER_SEARCH_NOT_STARTED" then
         return COURIER_SEARCH_NOT_STARTED;
      end if;
      if Value = "LOST" then
         return LOST;
      end if;
      if Value = "AWAIT_PAYMENT" then
         return AWAIT_PAYMENT;
      end if;
      if Value = "AWAIT_LAVKA_RESERVATION" then
         return AWAIT_LAVKA_RESERVATION;
      end if;
      if Value = "USER_WANTS_TO_CHANGE_ADDRESS" then
         return USER_WANTS_TO_CHANGE_ADDRESS;
      end if;
      if Value = "FULL_NOT_RANSOM" then
         return FULL_NOT_RANSOM;
      end if;
      if Value = "PRESCRIPTION_MISMATCH" then
         return PRESCRIPTION_MISMATCH;
      end if;
      if Value = "DROPOFF_LOST" then
         return DROPOFF_LOST;
      end if;
      if Value = "DROPOFF_CLOSED" then
         return DROPOFF_CLOSED;
      end if;
      if Value = "DELIVERY_TO_STORE_STARTED" then
         return DELIVERY_TO_STORE_STARTED;
      end if;
      if Value = "USER_WANTS_TO_CHANGE_DELIVERY_DATE" then
         return USER_WANTS_TO_CHANGE_DELIVERY_DATE;
      end if;
      if Value = "WRONG_ITEM_DELIVERED" then
         return WRONG_ITEM_DELIVERED;
      end if;
      if Value = "DAMAGED_BOX" then
         return DAMAGED_BOX;
      end if;
      if Value = "AWAIT_DELIVERY_DATES" then
         return AWAIT_DELIVERY_DATES;
      end if;
      if Value = "LAST_MILE_COURIER_SEARCH" then
         return LAST_MILE_COURIER_SEARCH;
      end if;
      if Value = "PICKUP_POINT_CLOSED" then
         return PICKUP_POINT_CLOSED;
      end if;
      if Value = "LEGAL_INFO_CHANGED" then
         return LEGAL_INFO_CHANGED;
      end if;
      if Value = "USER_HAS_NO_TIME_TO_PICKUP_ORDER" then
         return USER_HAS_NO_TIME_TO_PICKUP_ORDER;
      end if;
      if Value = "DELIVERY_CUSTOMS_ARRIVED" then
         return DELIVERY_CUSTOMS_ARRIVED;
      end if;
      if Value = "DELIVERY_CUSTOMS_CLEARED" then
         return DELIVERY_CUSTOMS_CLEARED;
      end if;
      if Value = "FIRST_MILE_DELIVERY_SERVICE_RECEIVED" then
         return FIRST_MILE_DELIVERY_SERVICE_RECEIVED;
      end if;
      if Value = "AWAIT_AUTO_DELIVERY_DATES" then
         return AWAIT_AUTO_DELIVERY_DATES;
      end if;
      if Value = "AWAIT_USER_PERSONAL_DATA" then
         return AWAIT_USER_PERSONAL_DATA;
      end if;
      if Value = "NO_PERSONAL_DATA_EXPIRED" then
         return NO_PERSONAL_DATA_EXPIRED;
      end if;
      if Value = "CUSTOMS_PROBLEMS" then
         return CUSTOMS_PROBLEMS;
      end if;
      if Value = "AWAIT_CASHIER" then
         return AWAIT_CASHIER;
      end if;
      if Value = "WAITING_POSTPAID_BUDGET_RESERVATION" then
         return WAITING_POSTPAID_BUDGET_RESERVATION;
      end if;
      if Value = "AWAIT_SERVICEABLE_CONFIRMATION" then
         return AWAIT_SERVICEABLE_CONFIRMATION;
      end if;
      if Value = "POSTPAID_BUDGET_RESERVATION_FAILED" then
         return POSTPAID_BUDGET_RESERVATION_FAILED;
      end if;
      if Value = "AWAIT_CUSTOM_PRICE_CONFIRMATION" then
         return AWAIT_CUSTOM_PRICE_CONFIRMATION;
      end if;
      if Value = "READY_FOR_PICKUP" then
         return READY_FOR_PICKUP;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrderSubstatusType_Type;

   function To_String (Value : in .Models.OrderSubstatusType_Type) return String is
   begin
      case Value is
         when RESERVATION_EXPIRED =>
            return "RESERVATION_EXPIRED";

         when USER_NOT_PAID =>
            return "USER_NOT_PAID";

         when USER_UNREACHABLE =>
            return "USER_UNREACHABLE";

         when USER_CHANGED_MIND =>
            return "USER_CHANGED_MIND";

         when USER_REFUSED_DELIVERY =>
            return "USER_REFUSED_DELIVERY";

         when USER_REFUSED_PRODUCT =>
            return "USER_REFUSED_PRODUCT";

         when SHOP_FAILED =>
            return "SHOP_FAILED";

         when USER_REFUSED_QUALITY =>
            return "USER_REFUSED_QUALITY";

         when REPLACING_ORDER =>
            return "REPLACING_ORDER";

         when PROCESSING_EXPIRED =>
            return "PROCESSING_EXPIRED";

         when PENDING_EXPIRED =>
            return "PENDING_EXPIRED";

         when SHOP_PENDING_CANCELLED =>
            return "SHOP_PENDING_CANCELLED";

         when PENDING_CANCELLED =>
            return "PENDING_CANCELLED";

         when USER_FRAUD =>
            return "USER_FRAUD";

         when RESERVATION_FAILED =>
            return "RESERVATION_FAILED";

         when USER_PLACED_OTHER_ORDER =>
            return "USER_PLACED_OTHER_ORDER";

         when USER_BOUGHT_CHEAPER =>
            return "USER_BOUGHT_CHEAPER";

         when MISSING_ITEM =>
            return "MISSING_ITEM";

         when BROKEN_ITEM =>
            return "BROKEN_ITEM";

         when WRONG_ITEM =>
            return "WRONG_ITEM";

         when PICKUP_EXPIRED =>
            return "PICKUP_EXPIRED";

         when DELIVERY_PROBLEMS =>
            return "DELIVERY_PROBLEMS";

         when LATE_CONTACT =>
            return "LATE_CONTACT";

         when CUSTOM =>
            return "CUSTOM";

         when DELIVERY_SERVICE_FAILED =>
            return "DELIVERY_SERVICE_FAILED";

         when WAREHOUSE_FAILED_TO_SHIP =>
            return "WAREHOUSE_FAILED_TO_SHIP";

         when DELIVERY_SERIVCE_UNDELIVERED =>
            return "DELIVERY_SERIVCE_UNDELIVERED";

         when DELIVERY_SERVICE_UNDELIVERED =>
            return "DELIVERY_SERVICE_UNDELIVERED";

         when PREORDER =>
            return "PREORDER";

         when AWAIT_CONFIRMATION =>
            return "AWAIT_CONFIRMATION";

         when STARTED =>
            return "STARTED";

         when PACKAGING =>
            return "PACKAGING";

         when READY_TO_SHIP =>
            return "READY_TO_SHIP";

         when SHIPPED =>
            return "SHIPPED";

         when ASYNC_PROCESSING =>
            return "ASYNC_PROCESSING";

         when USER_REFUSED_TO_PROVIDE_PERSONAL_DATA =>
            return "USER_REFUSED_TO_PROVIDE_PERSONAL_DATA";

         when WAITING_USER_INPUT =>
            return "WAITING_USER_INPUT";

         when WAITING_BANK_DECISION =>
            return "WAITING_BANK_DECISION";

         when BANK_REJECT_CREDIT_OFFER =>
            return "BANK_REJECT_CREDIT_OFFER";

         when CUSTOMER_REJECT_CREDIT_OFFER =>
            return "CUSTOMER_REJECT_CREDIT_OFFER";

         when CREDIT_OFFER_FAILED =>
            return "CREDIT_OFFER_FAILED";

         when AWAIT_DELIVERY_DATES_CONFIRMATION =>
            return "AWAIT_DELIVERY_DATES_CONFIRMATION";

         when SERVICE_FAULT =>
            return "SERVICE_FAULT";

         when DELIVERY_SERVICE_RECEIVED =>
            return "DELIVERY_SERVICE_RECEIVED";

         when USER_RECEIVED =>
            return "USER_RECEIVED";

         when WAITING_FOR_STOCKS =>
            return "WAITING_FOR_STOCKS";

         when AS_PART_OF_MULTI_ORDER =>
            return "AS_PART_OF_MULTI_ORDER";

         when READY_FOR_LAST_MILE =>
            return "READY_FOR_LAST_MILE";

         when LAST_MILE_STARTED =>
            return "LAST_MILE_STARTED";

         when ANTIFRAUD =>
            return "ANTIFRAUD";

         when DELIVERY_USER_NOT_RECEIVED =>
            return "DELIVERY_USER_NOT_RECEIVED";

         when DELIVERY_SERVICE_DELIVERED =>
            return "DELIVERY_SERVICE_DELIVERED";

         when DELIVERED_USER_NOT_RECEIVED =>
            return "DELIVERED_USER_NOT_RECEIVED";

         when USER_WANTED_ANOTHER_PAYMENT_METHOD =>
            return "USER_WANTED_ANOTHER_PAYMENT_METHOD";

         when USER_RECEIVED_TECHNICAL_ERROR =>
            return "USER_RECEIVED_TECHNICAL_ERROR";

         when USER_FORGOT_TO_USE_BONUS =>
            return "USER_FORGOT_TO_USE_BONUS";

         when RECEIVED_ON_DISTRIBUTION_CENTER =>
            return "RECEIVED_ON_DISTRIBUTION_CENTER";

         when DELIVERY_SERVICE_NOT_RECEIVED =>
            return "DELIVERY_SERVICE_NOT_RECEIVED";

         when DELIVERY_SERVICE_LOST =>
            return "DELIVERY_SERVICE_LOST";

         when SHIPPED_TO_WRONG_DELIVERY_SERVICE =>
            return "SHIPPED_TO_WRONG_DELIVERY_SERVICE";

         when DELIVERED_USER_RECEIVED =>
            return "DELIVERED_USER_RECEIVED";

         when WAITING_TINKOFF_DECISION =>
            return "WAITING_TINKOFF_DECISION";

         when COURIER_SEARCH =>
            return "COURIER_SEARCH";

         when COURIER_FOUND =>
            return "COURIER_FOUND";

         when COURIER_IN_TRANSIT_TO_SENDER =>
            return "COURIER_IN_TRANSIT_TO_SENDER";

         when COURIER_ARRIVED_TO_SENDER =>
            return "COURIER_ARRIVED_TO_SENDER";

         when COURIER_RECEIVED =>
            return "COURIER_RECEIVED";

         when COURIER_NOT_FOUND =>
            return "COURIER_NOT_FOUND";

         when COURIER_NOT_DELIVER_ORDER =>
            return "COURIER_NOT_DELIVER_ORDER";

         when COURIER_RETURNS_ORDER =>
            return "COURIER_RETURNS_ORDER";

         when COURIER_RETURNED_ORDER =>
            return "COURIER_RETURNED_ORDER";

         when WAITING_USER_DELIVERY_INPUT =>
            return "WAITING_USER_DELIVERY_INPUT";

         when PICKUP_SERVICE_RECEIVED =>
            return "PICKUP_SERVICE_RECEIVED";

         when PICKUP_USER_RECEIVED =>
            return "PICKUP_USER_RECEIVED";

         when CANCELLED_COURIER_NOT_FOUND =>
            return "CANCELLED_COURIER_NOT_FOUND";

         when COURIER_NOT_COME_FOR_ORDER =>
            return "COURIER_NOT_COME_FOR_ORDER";

         when DELIVERY_NOT_MANAGED_REGION =>
            return "DELIVERY_NOT_MANAGED_REGION";

         when INCOMPLETE_CONTACT_INFORMATION =>
            return "INCOMPLETE_CONTACT_INFORMATION";

         when INCOMPLETE_MULTI_ORDER =>
            return "INCOMPLETE_MULTI_ORDER";

         when INAPPROPRIATE_WEIGHT_SIZE =>
            return "INAPPROPRIATE_WEIGHT_SIZE";

         when TECHNICAL_ERROR =>
            return "TECHNICAL_ERROR";

         when SORTING_CENTER_LOST =>
            return "SORTING_CENTER_LOST";

         when COURIER_SEARCH_NOT_STARTED =>
            return "COURIER_SEARCH_NOT_STARTED";

         when LOST =>
            return "LOST";

         when AWAIT_PAYMENT =>
            return "AWAIT_PAYMENT";

         when AWAIT_LAVKA_RESERVATION =>
            return "AWAIT_LAVKA_RESERVATION";

         when USER_WANTS_TO_CHANGE_ADDRESS =>
            return "USER_WANTS_TO_CHANGE_ADDRESS";

         when FULL_NOT_RANSOM =>
            return "FULL_NOT_RANSOM";

         when PRESCRIPTION_MISMATCH =>
            return "PRESCRIPTION_MISMATCH";

         when DROPOFF_LOST =>
            return "DROPOFF_LOST";

         when DROPOFF_CLOSED =>
            return "DROPOFF_CLOSED";

         when DELIVERY_TO_STORE_STARTED =>
            return "DELIVERY_TO_STORE_STARTED";

         when USER_WANTS_TO_CHANGE_DELIVERY_DATE =>
            return "USER_WANTS_TO_CHANGE_DELIVERY_DATE";

         when WRONG_ITEM_DELIVERED =>
            return "WRONG_ITEM_DELIVERED";

         when DAMAGED_BOX =>
            return "DAMAGED_BOX";

         when AWAIT_DELIVERY_DATES =>
            return "AWAIT_DELIVERY_DATES";

         when LAST_MILE_COURIER_SEARCH =>
            return "LAST_MILE_COURIER_SEARCH";

         when PICKUP_POINT_CLOSED =>
            return "PICKUP_POINT_CLOSED";

         when LEGAL_INFO_CHANGED =>
            return "LEGAL_INFO_CHANGED";

         when USER_HAS_NO_TIME_TO_PICKUP_ORDER =>
            return "USER_HAS_NO_TIME_TO_PICKUP_ORDER";

         when DELIVERY_CUSTOMS_ARRIVED =>
            return "DELIVERY_CUSTOMS_ARRIVED";

         when DELIVERY_CUSTOMS_CLEARED =>
            return "DELIVERY_CUSTOMS_CLEARED";

         when FIRST_MILE_DELIVERY_SERVICE_RECEIVED =>
            return "FIRST_MILE_DELIVERY_SERVICE_RECEIVED";

         when AWAIT_AUTO_DELIVERY_DATES =>
            return "AWAIT_AUTO_DELIVERY_DATES";

         when AWAIT_USER_PERSONAL_DATA =>
            return "AWAIT_USER_PERSONAL_DATA";

         when NO_PERSONAL_DATA_EXPIRED =>
            return "NO_PERSONAL_DATA_EXPIRED";

         when CUSTOMS_PROBLEMS =>
            return "CUSTOMS_PROBLEMS";

         when AWAIT_CASHIER =>
            return "AWAIT_CASHIER";

         when WAITING_POSTPAID_BUDGET_RESERVATION =>
            return "WAITING_POSTPAID_BUDGET_RESERVATION";

         when AWAIT_SERVICEABLE_CONFIRMATION =>
            return "AWAIT_SERVICEABLE_CONFIRMATION";

         when POSTPAID_BUDGET_RESERVATION_FAILED =>
            return "POSTPAID_BUDGET_RESERVATION_FAILED";

         when AWAIT_CUSTOM_PRICE_CONFIRMATION =>
            return "AWAIT_CUSTOM_PRICE_CONFIRMATION";

         when READY_FOR_PICKUP =>
            return "READY_FOR_PICKUP";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderSubstatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderSubstatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderSubstatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderSubstatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderSubstatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderSubstatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderTaxSystemType_Type (Value : in String) return .Models.OrderTaxSystemType_Type is
   begin
      if Value = "OSN" then
         return OSN;
      end if;
      if Value = "USN" then
         return USN;
      end if;
      if Value = "USN_MINUS_COST" then
         return USN_MINUS_COST;
      end if;
      if Value = "ENVD" then
         return ENVD;
      end if;
      if Value = "ECHN" then
         return ECHN;
      end if;
      if Value = "PSN" then
         return PSN;
      end if;
      if Value = "NPD" then
         return NPD;
      end if;
      if Value = "UNKNOWN_VALUE" then
         return UNKNOWN_VALUE;
      end if;
      raise Constraint_Error;
   end To_OrderTaxSystemType_Type;

   function To_String (Value : in .Models.OrderTaxSystemType_Type) return String is
   begin
      case Value is
         when OSN =>
            return "OSN";

         when USN =>
            return "USN";

         when USN_MINUS_COST =>
            return "USN_MINUS_COST";

         when ENVD =>
            return "ENVD";

         when ECHN =>
            return "ECHN";

         when PSN =>
            return "PSN";

         when NPD =>
            return "NPD";

         when UNKNOWN_VALUE =>
            return "UNKNOWN_VALUE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderTaxSystemType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderTaxSystemType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderTaxSystemType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderTaxSystemType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderTaxSystemType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderTaxSystemType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderTrackDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Track_Code.Is_Null then
         Into.Write_Entity ("trackCode", Value.Track_Code);
      end if;
      if not Value.Delivery_Service_Id.Is_Null then
         Into.Write_Entity ("deliveryServiceId", Value.Delivery_Service_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderTrackDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderTrackDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "trackCode", Value.Track_Code);
      Swagger.Streams.Deserialize (Object, "deliveryServiceId", Value.Delivery_Service_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderTrackDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderTrackDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderUpdateStatusType_Type (Value : in String) return .Models.OrderUpdateStatusType_Type is
   begin
      if Value = "OK" then
         return OK;
      end if;
      if Value = "ERROR" then
         return ERROR;
      end if;
      raise Constraint_Error;
   end To_OrderUpdateStatusType_Type;

   function To_String (Value : in .Models.OrderUpdateStatusType_Type) return String is
   begin
      case Value is
         when OK =>
            return "OK";

         when ERROR =>
            return "ERROR";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderUpdateStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderUpdateStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderUpdateStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderUpdateStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderUpdateStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderUpdateStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrderVatType_Type (Value : in String) return .Models.OrderVatType_Type is
   begin
      if Value = "NO_VAT" then
         return NO_VAT;
      end if;
      if Value = "VAT_0" then
         return VAT_0;
      end if;
      if Value = "VAT_10" then
         return VAT_10;
      end if;
      if Value = "VAT_10_110" then
         return VAT_10_110;
      end if;
      if Value = "VAT_20" then
         return VAT_20;
      end if;
      if Value = "VAT_20_120" then
         return VAT_20_120;
      end if;
      if Value = "VAT_18" then
         return VAT_18;
      end if;
      if Value = "VAT_18_118" then
         return VAT_18_118;
      end if;
      if Value = "UNKNOWN_VALUE" then
         return UNKNOWN_VALUE;
      end if;
      raise Constraint_Error;
   end To_OrderVatType_Type;

   function To_String (Value : in .Models.OrderVatType_Type) return String is
   begin
      case Value is
         when NO_VAT =>
            return "NO_VAT";

         when VAT_0 =>
            return "VAT_0";

         when VAT_10 =>
            return "VAT_10";

         when VAT_10_110 =>
            return "VAT_10_110";

         when VAT_20 =>
            return "VAT_20";

         when VAT_20_120 =>
            return "VAT_20_120";

         when VAT_18 =>
            return "VAT_18";

         when VAT_18_118 =>
            return "VAT_18_118";

         when UNKNOWN_VALUE =>
            return "UNKNOWN_VALUE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderVatType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderVatType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderVatType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrderVatType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderVatType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderVatType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersShipmentInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "orderIdsWithLabels", Value.Order_Ids_With_Labels);
      Serialize (Into, "orderIdsWithoutLabels", Value.Order_Ids_Without_Labels);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersShipmentInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersShipmentInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderIdsWithLabels", Value.Order_Ids_With_Labels);
      Swagger.Streams.Deserialize (Object, "orderIdsWithoutLabels", Value.Order_Ids_Without_Labels);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersShipmentInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersShipmentInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsCommissionType_Type (Value : in String) return .Models.OrdersStatsCommissionType_Type is
   begin
      if Value = "FEE" then
         return FEE;
      end if;
      if Value = "FULFILLMENT" then
         return FULFILLMENT;
      end if;
      if Value = "LOYALTY_PARTICIPATION_FEE" then
         return LOYALTY_PARTICIPATION_FEE;
      end if;
      if Value = "AUCTION_PROMOTION" then
         return AUCTION_PROMOTION;
      end if;
      if Value = "INSTALLMENT" then
         return INSTALLMENT;
      end if;
      if Value = "DELIVERY_TO_CUSTOMER" then
         return DELIVERY_TO_CUSTOMER;
      end if;
      if Value = "EXPRESS_DELIVERY_TO_CUSTOMER" then
         return EXPRESS_DELIVERY_TO_CUSTOMER;
      end if;
      if Value = "AGENCY" then
         return AGENCY;
      end if;
      if Value = "PAYMENT_TRANSFER" then
         return PAYMENT_TRANSFER;
      end if;
      if Value = "RETURNED_ORDERS_STORAGE" then
         return RETURNED_ORDERS_STORAGE;
      end if;
      if Value = "SORTING" then
         return SORTING;
      end if;
      if Value = "INTAKE_SORTING" then
         return INTAKE_SORTING;
      end if;
      if Value = "RETURN_PROCESSING" then
         return RETURN_PROCESSING;
      end if;
      if Value = "ILLIQUID_GOODS_SALE" then
         return ILLIQUID_GOODS_SALE;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsCommissionType_Type;

   function To_String (Value : in .Models.OrdersStatsCommissionType_Type) return String is
   begin
      case Value is
         when FEE =>
            return "FEE";

         when FULFILLMENT =>
            return "FULFILLMENT";

         when LOYALTY_PARTICIPATION_FEE =>
            return "LOYALTY_PARTICIPATION_FEE";

         when AUCTION_PROMOTION =>
            return "AUCTION_PROMOTION";

         when INSTALLMENT =>
            return "INSTALLMENT";

         when DELIVERY_TO_CUSTOMER =>
            return "DELIVERY_TO_CUSTOMER";

         when EXPRESS_DELIVERY_TO_CUSTOMER =>
            return "EXPRESS_DELIVERY_TO_CUSTOMER";

         when AGENCY =>
            return "AGENCY";

         when PAYMENT_TRANSFER =>
            return "PAYMENT_TRANSFER";

         when RETURNED_ORDERS_STORAGE =>
            return "RETURNED_ORDERS_STORAGE";

         when SORTING =>
            return "SORTING";

         when INTAKE_SORTING =>
            return "INTAKE_SORTING";

         when RETURN_PROCESSING =>
            return "RETURN_PROCESSING";

         when ILLIQUID_GOODS_SALE =>
            return "ILLIQUID_GOODS_SALE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsCommissionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsCommissionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsCommissionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsCommissionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsCommissionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsCommissionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsDeliveryRegionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsDeliveryRegionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsDeliveryRegionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsDeliveryRegionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsDeliveryRegionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsItemStatusType_Type (Value : in String) return .Models.OrdersStatsItemStatusType_Type is
   begin
      if Value = "REJECTED" then
         return REJECTED;
      end if;
      if Value = "RETURNED" then
         return RETURNED;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsItemStatusType_Type;

   function To_String (Value : in .Models.OrdersStatsItemStatusType_Type) return String is
   begin
      case Value is
         when REJECTED =>
            return "REJECTED";

         when RETURNED =>
            return "RETURNED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsItemStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsItemStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsItemStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsItemStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsItemStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsItemStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsOrderPaymentType_Type (Value : in String) return .Models.OrdersStatsOrderPaymentType_Type is
   begin
      if Value = "CREDIT" then
         return CREDIT;
      end if;
      if Value = "POSTPAID" then
         return POSTPAID;
      end if;
      if Value = "PREPAID" then
         return PREPAID;
      end if;
      if Value = "TINKOFF_CREDIT" then
         return TINKOFF_CREDIT;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsOrderPaymentType_Type;

   function To_String (Value : in .Models.OrdersStatsOrderPaymentType_Type) return String is
   begin
      case Value is
         when CREDIT =>
            return "CREDIT";

         when POSTPAID =>
            return "POSTPAID";

         when PREPAID =>
            return "PREPAID";

         when TINKOFF_CREDIT =>
            return "TINKOFF_CREDIT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsOrderPaymentType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsOrderPaymentType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsOrderPaymentType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsOrderPaymentType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsOrderPaymentType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsOrderPaymentType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsPaymentOrderDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsPaymentOrderDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsPaymentOrderDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsPaymentOrderDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsPaymentOrderDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsPaymentSourceType_Type (Value : in String) return .Models.OrdersStatsPaymentSourceType_Type is
   begin
      if Value = "BUYER" then
         return BUYER;
      end if;
      if Value = "CASHBACK" then
         return CASHBACK;
      end if;
      if Value = "MARKETPLACE" then
         return MARKETPLACE;
      end if;
      if Value = "SPLIT" then
         return SPLIT;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsPaymentSourceType_Type;

   function To_String (Value : in .Models.OrdersStatsPaymentSourceType_Type) return String is
   begin
      case Value is
         when BUYER =>
            return "BUYER";

         when CASHBACK =>
            return "CASHBACK";

         when MARKETPLACE =>
            return "MARKETPLACE";

         when SPLIT =>
            return "SPLIT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsPaymentSourceType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsPaymentSourceType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsPaymentSourceType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsPaymentSourceType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsPaymentSourceType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsPaymentSourceType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsPaymentType_Type (Value : in String) return .Models.OrdersStatsPaymentType_Type is
   begin
      if Value = "PAYMENT" then
         return PAYMENT;
      end if;
      if Value = "REFUND" then
         return REFUND;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsPaymentType_Type;

   function To_String (Value : in .Models.OrdersStatsPaymentType_Type) return String is
   begin
      case Value is
         when PAYMENT =>
            return "PAYMENT";

         when REFUND =>
            return "REFUND";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsPaymentType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsPaymentType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsPaymentType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsPaymentType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsPaymentType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsPaymentType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsPriceType_Type (Value : in String) return .Models.OrdersStatsPriceType_Type is
   begin
      if Value = "BUYER" then
         return BUYER;
      end if;
      if Value = "CASHBACK" then
         return CASHBACK;
      end if;
      if Value = "MARKETPLACE" then
         return MARKETPLACE;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsPriceType_Type;

   function To_String (Value : in .Models.OrdersStatsPriceType_Type) return String is
   begin
      case Value is
         when BUYER =>
            return "BUYER";

         when CASHBACK =>
            return "CASHBACK";

         when MARKETPLACE =>
            return "MARKETPLACE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsPriceType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsPriceType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsPriceType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsPriceType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsPriceType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsPriceType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OrdersStatsStockType_Type (Value : in String) return .Models.OrdersStatsStockType_Type is
   begin
      if Value = "FIT" then
         return FIT;
      end if;
      if Value = "FREEZE" then
         return FREEZE;
      end if;
      if Value = "AVAILABLE" then
         return AVAILABLE;
      end if;
      if Value = "QUARANTINE" then
         return QUARANTINE;
      end if;
      if Value = "UTILIZATION" then
         return UTILIZATION;
      end if;
      if Value = "DEFECT" then
         return DEFECT;
      end if;
      if Value = "EXPIRED" then
         return EXPIRED;
      end if;
      raise Constraint_Error;
   end To_OrdersStatsStockType_Type;

   function To_String (Value : in .Models.OrdersStatsStockType_Type) return String is
   begin
      case Value is
         when FIT =>
            return "FIT";

         when FREEZE =>
            return "FREEZE";

         when AVAILABLE =>
            return "AVAILABLE";

         when QUARANTINE =>
            return "QUARANTINE";

         when UTILIZATION =>
            return "UTILIZATION";

         when DEFECT =>
            return "DEFECT";

         when EXPIRED =>
            return "EXPIRED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsStockType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsStockType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsStockType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OrdersStatsStockType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsStockType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsStockType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsWarehouseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsWarehouseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsWarehouseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsWarehouseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsWarehouseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletAddressDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("regionId", Value.Region_Id);
      if not Value.Street.Is_Null then
         Into.Write_Entity ("street", Value.Street);
      end if;
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Building.Is_Null then
         Into.Write_Entity ("building", Value.Building);
      end if;
      if not Value.Estate.Is_Null then
         Into.Write_Entity ("estate", Value.Estate);
      end if;
      if not Value.Block.Is_Null then
         Into.Write_Entity ("block", Value.Block);
      end if;
      if not Value.Additional.Is_Null then
         Into.Write_Entity ("additional", Value.Additional);
      end if;
      if not Value.Km.Is_Null then
         Into.Write_Entity ("km", Value.Km);
      end if;
      if not Value.City.Is_Null then
         Into.Write_Entity ("city", Value.City);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletAddressDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletAddressDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "regionId", Value.Region_Id);
      Swagger.Streams.Deserialize (Object, "street", Value.Street);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "building", Value.Building);
      Swagger.Streams.Deserialize (Object, "estate", Value.Estate);
      Swagger.Streams.Deserialize (Object, "block", Value.Block);
      Swagger.Streams.Deserialize (Object, "additional", Value.Additional);
      Swagger.Streams.Deserialize (Object, "km", Value.Km);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletAddressDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletAddressDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletDeliveryRuleDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Min_Delivery_Days.Is_Null then
         Into.Write_Entity ("minDeliveryDays", Value.Min_Delivery_Days);
      end if;
      if not Value.Max_Delivery_Days.Is_Null then
         Into.Write_Entity ("maxDeliveryDays", Value.Max_Delivery_Days);
      end if;
      if not Value.Delivery_Service_Id.Is_Null then
         Into.Write_Entity ("deliveryServiceId", Value.Delivery_Service_Id);
      end if;
      if not Value.Order_Before.Is_Null then
         Into.Write_Entity ("orderBefore", Value.Order_Before);
      end if;
      Serialize (Into, "priceFreePickup", Value.Price_Free_Pickup);
      if not Value.Unspecified_Delivery_Interval.Is_Null then
         Into.Write_Entity ("unspecifiedDeliveryInterval", Value.Unspecified_Delivery_Interval);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletDeliveryRuleDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletDeliveryRuleDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "minDeliveryDays", Value.Min_Delivery_Days);
      Swagger.Streams.Deserialize (Object, "maxDeliveryDays", Value.Max_Delivery_Days);
      Swagger.Streams.Deserialize (Object, "deliveryServiceId", Value.Delivery_Service_Id);
      Swagger.Streams.Deserialize (Object, "orderBefore", Value.Order_Before);
      Swagger.Streams.Deserialize (Object, "priceFreePickup", Value.Price_Free_Pickup);
      Swagger.Streams.Deserialize (Object, "unspecifiedDeliveryInterval", Value.Unspecified_Delivery_Interval);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletDeliveryRuleDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletDeliveryRuleDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OutletStatusType_Type (Value : in String) return .Models.OutletStatusType_Type is
   begin
      if Value = "AT_MODERATION" then
         return AT_MODERATION;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      if Value = "MODERATED" then
         return MODERATED;
      end if;
      if Value = "NONMODERATED" then
         return NONMODERATED;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OutletStatusType_Type;

   function To_String (Value : in .Models.OutletStatusType_Type) return String is
   begin
      case Value is
         when AT_MODERATION =>
            return "AT_MODERATION";

         when FAILED =>
            return "FAILED";

         when MODERATED =>
            return "MODERATED";

         when NONMODERATED =>
            return "NONMODERATED";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OutletStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OutletType_Type (Value : in String) return .Models.OutletType_Type is
   begin
      if Value = "DEPOT" then
         return DEPOT;
      end if;
      if Value = "MIXED" then
         return MIXED;
      end if;
      if Value = "RETAIL" then
         return RETAIL;
      end if;
      if Value = "NOT_DEFINED" then
         return NOT_DEFINED;
      end if;
      raise Constraint_Error;
   end To_OutletType_Type;

   function To_String (Value : in .Models.OutletType_Type) return String is
   begin
      case Value is
         when DEPOT =>
            return "DEPOT";

         when MIXED =>
            return "MIXED";

         when RETAIL =>
            return "RETAIL";

         when NOT_DEFINED =>
            return "NOT_DEFINED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OutletType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_OutletVisibilityType_Type (Value : in String) return .Models.OutletVisibilityType_Type is
   begin
      if Value = "HIDDEN" then
         return HIDDEN;
      end if;
      if Value = "VISIBLE" then
         return VISIBLE;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_OutletVisibilityType_Type;

   function To_String (Value : in .Models.OutletVisibilityType_Type) return String is
   begin
      case Value is
         when HIDDEN =>
            return "HIDDEN";

         when VISIBLE =>
            return "VISIBLE";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletVisibilityType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletVisibilityType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletVisibilityType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_OutletVisibilityType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletVisibilityType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletVisibilityType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PageFormatType_Type (Value : in String) return .Models.PageFormatType_Type is
   begin
      if Value = "A7" then
         return A7;
      end if;
      if Value = "A4" then
         return A4;
      end if;
      raise Constraint_Error;
   end To_PageFormatType_Type;

   function To_String (Value : in .Models.PageFormatType_Type) return String is
   begin
      case Value is
         when A7 =>
            return "A7";

         when A4 =>
            return "A4";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PageFormatType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PageFormatType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PageFormatType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PageFormatType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PageFormatType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PageFormatType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PalletsCountDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Planned.Is_Null then
         Into.Write_Entity ("planned", Value.Planned);
      end if;
      if not Value.Fact.Is_Null then
         Into.Write_Entity ("fact", Value.Fact);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PalletsCountDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PalletsCountDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "planned", Value.Planned);
      Swagger.Streams.Deserialize (Object, "fact", Value.Fact);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PalletsCountDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PalletsCountDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ParameterType_Type (Value : in String) return .Models.ParameterType_Type is
   begin
      if Value = "TEXT" then
         return TEXT;
      end if;
      if Value = "ENUM" then
         return ENUM;
      end if;
      if Value = "BOOLEAN" then
         return BOOLEAN;
      end if;
      if Value = "NUMERIC" then
         return NUMERIC;
      end if;
      raise Constraint_Error;
   end To_ParameterType_Type;

   function To_String (Value : in .Models.ParameterType_Type) return String is
   begin
      case Value is
         when TEXT =>
            return "TEXT";

         when ENUM =>
            return "ENUM";

         when BOOLEAN =>
            return "BOOLEAN";

         when NUMERIC =>
            return "NUMERIC";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParameterType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParameterType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParameterType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ParameterType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParameterType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParameterType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParameterValueConstraintsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "minValue", Value.Min_Value);
      Serialize (Into, "maxValue", Value.Max_Value);
      if not Value.Max_Length.Is_Null then
         Into.Write_Entity ("maxLength", Value.Max_Length);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParameterValueConstraintsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParameterValueConstraintsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "minValue", Value.Min_Value);
      Swagger.Streams.Deserialize (Object, "maxValue", Value.Max_Value);
      Swagger.Streams.Deserialize (Object, "maxLength", Value.Max_Length);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParameterValueConstraintsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParameterValueConstraintsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParameterValueDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("parameterId", Value.Parameter_Id);
      if not Value.Unit_Id.Is_Null then
         Into.Write_Entity ("unitId", Value.Unit_Id);
      end if;
      if not Value.Value_Id.Is_Null then
         Into.Write_Entity ("valueId", Value.Value_Id);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParameterValueDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParameterValueDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "parameterId", Value.Parameter_Id);
      Swagger.Streams.Deserialize (Object, "unitId", Value.Unit_Id);
      Swagger.Streams.Deserialize (Object, "valueId", Value.Value_Id);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParameterValueDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParameterValueDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParameterValueOptionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("value", Value.Value);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParameterValueOptionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParameterValueOptionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParameterValueOptionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParameterValueOptionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParcelBoxDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Fulfilment_Id.Is_Null then
         Into.Write_Entity ("fulfilmentId", Value.Fulfilment_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParcelBoxDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParcelBoxDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "fulfilmentId", Value.Fulfilment_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParcelBoxDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParcelBoxDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParcelBoxLabelDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("url", Value.Url);
      Into.Write_Entity ("supplierName", Value.Supplier_Name);
      Into.Write_Entity ("deliveryServiceName", Value.Delivery_Service_Name);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Into.Write_Entity ("orderNum", Value.Order_Num);
      Into.Write_Entity ("recipientName", Value.Recipient_Name);
      Into.Write_Long_Entity ("boxId", Value.Box_Id);
      Into.Write_Entity ("fulfilmentId", Value.Fulfilment_Id);
      Into.Write_Entity ("place", Value.Place);
      Into.Write_Entity ("weight", Value.Weight);
      Into.Write_Entity ("deliveryServiceId", Value.Delivery_Service_Id);
      if not Value.Delivery_Address.Is_Null then
         Into.Write_Entity ("deliveryAddress", Value.Delivery_Address);
      end if;
      if not Value.Shipment_Date.Is_Null then
         Into.Write_Entity ("shipmentDate", Value.Shipment_Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParcelBoxLabelDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParcelBoxLabelDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "supplierName", Value.Supplier_Name);
      Swagger.Streams.Deserialize (Object, "deliveryServiceName", Value.Delivery_Service_Name);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "orderNum", Value.Order_Num);
      Swagger.Streams.Deserialize (Object, "recipientName", Value.Recipient_Name);
      Swagger.Streams.Deserialize (Object, "boxId", Value.Box_Id);
      Swagger.Streams.Deserialize (Object, "fulfilmentId", Value.Fulfilment_Id);
      Swagger.Streams.Deserialize (Object, "place", Value.Place);
      Swagger.Streams.Deserialize (Object, "weight", Value.Weight);
      Swagger.Streams.Deserialize (Object, "deliveryServiceId", Value.Delivery_Service_Id);
      Swagger.Streams.Deserialize (Object, "deliveryAddress", Value.Delivery_Address);
      Swagger.Streams.Deserialize (Object, "shipmentDate", Value.Shipment_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParcelBoxLabelDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParcelBoxLabelDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PartnerMarketCategoryId_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PartnerMarketCategoryId_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PartnerMarketCategoryId_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PartnerMarketCategoryId_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PartnerMarketCategoryId_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PartnerShipmentWarehouseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Address.Is_Null then
         Into.Write_Entity ("address", Value.Address);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PartnerShipmentWarehouseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PartnerShipmentWarehouseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PartnerShipmentWarehouseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PartnerShipmentWarehouseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PaymentFrequencyType_Type (Value : in String) return .Models.PaymentFrequencyType_Type is
   begin
      if Value = "DAILY" then
         return DAILY;
      end if;
      if Value = "WEEKLY" then
         return WEEKLY;
      end if;
      if Value = "BIWEEKLY" then
         return BIWEEKLY;
      end if;
      if Value = "MONTHLY" then
         return MONTHLY;
      end if;
      raise Constraint_Error;
   end To_PaymentFrequencyType_Type;

   function To_String (Value : in .Models.PaymentFrequencyType_Type) return String is
   begin
      case Value is
         when DAILY =>
            return "DAILY";

         when WEEKLY =>
            return "WEEKLY";

         when BIWEEKLY =>
            return "BIWEEKLY";

         when MONTHLY =>
            return "MONTHLY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PaymentFrequencyType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PaymentFrequencyType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PaymentFrequencyType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PaymentFrequencyType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PaymentFrequencyType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PaymentFrequencyType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PickupAddressDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.City.Is_Null then
         Into.Write_Entity ("city", Value.City);
      end if;
      if not Value.Street.Is_Null then
         Into.Write_Entity ("street", Value.Street);
      end if;
      if not Value.House.Is_Null then
         Into.Write_Entity ("house", Value.House);
      end if;
      if not Value.Postcode.Is_Null then
         Into.Write_Entity ("postcode", Value.Postcode);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PickupAddressDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PickupAddressDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "street", Value.Street);
      Swagger.Streams.Deserialize (Object, "house", Value.House);
      Swagger.Streams.Deserialize (Object, "postcode", Value.Postcode);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PickupAddressDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PickupAddressDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PlacementType_Type (Value : in String) return .Models.PlacementType_Type is
   begin
      if Value = "FBS" then
         return FBS;
      end if;
      if Value = "FBY" then
         return FBY;
      end if;
      if Value = "DBS" then
         return DBS;
      end if;
      raise Constraint_Error;
   end To_PlacementType_Type;

   function To_String (Value : in .Models.PlacementType_Type) return String is
   begin
      case Value is
         when FBS =>
            return "FBS";

         when FBY =>
            return "FBY";

         when DBS =>
            return "DBS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PlacementType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PlacementType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PlacementType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PlacementType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PlacementType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PlacementType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PriceCompetitivenessType_Type (Value : in String) return .Models.PriceCompetitivenessType_Type is
   begin
      if Value = "OPTIMAL" then
         return OPTIMAL;
      end if;
      if Value = "AVERAGE" then
         return AVERAGE;
      end if;
      if Value = "LOW" then
         return LOW;
      end if;
      raise Constraint_Error;
   end To_PriceCompetitivenessType_Type;

   function To_String (Value : in .Models.PriceCompetitivenessType_Type) return String is
   begin
      case Value is
         when OPTIMAL =>
            return "OPTIMAL";

         when AVERAGE =>
            return "AVERAGE";

         when LOW =>
            return "LOW";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceCompetitivenessType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceCompetitivenessType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceCompetitivenessType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PriceCompetitivenessType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceCompetitivenessType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceCompetitivenessType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PriceQuarantineVerdictParamNameType_Type (Value : in String) return .Models.PriceQuarantineVerdictParamNameType_Type is
   begin
      if Value = "CURRENT_PRICE" then
         return CURRENT_PRICE;
      end if;
      if Value = "LAST_VALID_PRICE" then
         return LAST_VALID_PRICE;
      end if;
      if Value = "MIN_PRICE" then
         return MIN_PRICE;
      end if;
      if Value = "CURRENCY" then
         return CURRENCY;
      end if;
      raise Constraint_Error;
   end To_PriceQuarantineVerdictParamNameType_Type;

   function To_String (Value : in .Models.PriceQuarantineVerdictParamNameType_Type) return String is
   begin
      case Value is
         when CURRENT_PRICE =>
            return "CURRENT_PRICE";

         when LAST_VALID_PRICE =>
            return "LAST_VALID_PRICE";

         when MIN_PRICE =>
            return "MIN_PRICE";

         when CURRENCY =>
            return "CURRENCY";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceQuarantineVerdictParamNameType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceQuarantineVerdictParamNameType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceQuarantineVerdictParamNameType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PriceQuarantineVerdictParamNameType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceQuarantineVerdictParamNameType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceQuarantineVerdictParamNameType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PriceQuarantineVerdictType_Type (Value : in String) return .Models.PriceQuarantineVerdictType_Type is
   begin
      if Value = "PRICE_CHANGE" then
         return PRICE_CHANGE;
      end if;
      if Value = "LOW_PRICE" then
         return LOW_PRICE;
      end if;
      if Value = "LOW_PRICE_PROMO" then
         return LOW_PRICE_PROMO;
      end if;
      raise Constraint_Error;
   end To_PriceQuarantineVerdictType_Type;

   function To_String (Value : in .Models.PriceQuarantineVerdictType_Type) return String is
   begin
      case Value is
         when PRICE_CHANGE =>
            return "PRICE_CHANGE";

         when LOW_PRICE =>
            return "LOW_PRICE";

         when LOW_PRICE_PROMO =>
            return "LOW_PRICE_PROMO";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceQuarantineVerdictType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceQuarantineVerdictType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceQuarantineVerdictType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PriceQuarantineVerdictType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceQuarantineVerdictType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceQuarantineVerdictType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceRecommendationItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceRecommendationItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceRecommendationItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceRecommendationItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceRecommendationItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PriceSuggestType_Type (Value : in String) return .Models.PriceSuggestType_Type is
   begin
      if Value = "BUYBOX" then
         return BUYBOX;
      end if;
      if Value = "DEFAULT_OFFER" then
         return DEFAULT_OFFER;
      end if;
      if Value = "MIN_PRICE_MARKET" then
         return MIN_PRICE_MARKET;
      end if;
      raise Constraint_Error;
   end To_PriceSuggestType_Type;

   function To_String (Value : in .Models.PriceSuggestType_Type) return String is
   begin
      case Value is
         when BUYBOX =>
            return "BUYBOX";

         when DEFAULT_OFFER =>
            return "DEFAULT_OFFER";

         when MIN_PRICE_MARKET =>
            return "MIN_PRICE_MARKET";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceSuggestType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceSuggestType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceSuggestType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PriceSuggestType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceSuggestType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceSuggestType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferAutoParticipatingDetailsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "campaignIds", Value.Campaign_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferAutoParticipatingDetailsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferAutoParticipatingDetailsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignIds", Value.Campaign_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferAutoParticipatingDetailsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferAutoParticipatingDetailsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferDiscountParamsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      if not Value.Promo_Price.Is_Null then
         Into.Write_Entity ("promoPrice", Value.Promo_Price);
      end if;
      Into.Write_Long_Entity ("maxPromoPrice", Value.Max_Promo_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferDiscountParamsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferDiscountParamsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "promoPrice", Value.Promo_Price);
      Swagger.Streams.Deserialize (Object, "maxPromoPrice", Value.Max_Promo_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferDiscountParamsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferDiscountParamsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PromoOfferParticipationStatusFilterType_Type (Value : in String) return .Models.PromoOfferParticipationStatusFilterType_Type is
   begin
      if Value = "MANUALLY_ADDED" then
         return MANUALLY_ADDED;
      end if;
      if Value = "NOT_MANUALLY_ADDED" then
         return NOT_MANUALLY_ADDED;
      end if;
      raise Constraint_Error;
   end To_PromoOfferParticipationStatusFilterType_Type;

   function To_String (Value : in .Models.PromoOfferParticipationStatusFilterType_Type) return String is
   begin
      case Value is
         when MANUALLY_ADDED =>
            return "MANUALLY_ADDED";

         when NOT_MANUALLY_ADDED =>
            return "NOT_MANUALLY_ADDED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferParticipationStatusFilterType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferParticipationStatusFilterType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferParticipationStatusFilterType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PromoOfferParticipationStatusFilterType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferParticipationStatusFilterType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferParticipationStatusFilterType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PromoOfferParticipationStatusType_Type (Value : in String) return .Models.PromoOfferParticipationStatusType_Type is
   begin
      if Value = "AUTO" then
         return AUTO;
      end if;
      if Value = "PARTIALLY_AUTO" then
         return PARTIALLY_AUTO;
      end if;
      if Value = "MANUAL" then
         return MANUAL;
      end if;
      if Value = "NOT_PARTICIPATING" then
         return NOT_PARTICIPATING;
      end if;
      raise Constraint_Error;
   end To_PromoOfferParticipationStatusType_Type;

   function To_String (Value : in .Models.PromoOfferParticipationStatusType_Type) return String is
   begin
      case Value is
         when AUTO =>
            return "AUTO";

         when PARTIALLY_AUTO =>
            return "PARTIALLY_AUTO";

         when MANUAL =>
            return "MANUAL";

         when NOT_PARTICIPATING =>
            return "NOT_PARTICIPATING";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferParticipationStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferParticipationStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferParticipationStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PromoOfferParticipationStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferParticipationStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferParticipationStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferPromocodeParamsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("maxPrice", Value.Max_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferPromocodeParamsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferPromocodeParamsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "maxPrice", Value.Max_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferPromocodeParamsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferPromocodeParamsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PromoOfferUpdateWarningCodeType_Type (Value : in String) return .Models.PromoOfferUpdateWarningCodeType_Type is
   begin
      if Value = "DEEP_DISCOUNT_OFFER" then
         return DEEP_DISCOUNT_OFFER;
      end if;
      if Value = "CATALOG_PRICE_IS_LOWER_THAN_PROMO" then
         return CATALOG_PRICE_IS_LOWER_THAN_PROMO;
      end if;
      if Value = "SHOP_PRICES_ARE_LOWER_THAN_PROMO" then
         return SHOP_PRICES_ARE_LOWER_THAN_PROMO;
      end if;
      if Value = "PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE" then
         return PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE;
      end if;
      if Value = "SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO" then
         return SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO;
      end if;
      raise Constraint_Error;
   end To_PromoOfferUpdateWarningCodeType_Type;

   function To_String (Value : in .Models.PromoOfferUpdateWarningCodeType_Type) return String is
   begin
      case Value is
         when DEEP_DISCOUNT_OFFER =>
            return "DEEP_DISCOUNT_OFFER";

         when CATALOG_PRICE_IS_LOWER_THAN_PROMO =>
            return "CATALOG_PRICE_IS_LOWER_THAN_PROMO";

         when SHOP_PRICES_ARE_LOWER_THAN_PROMO =>
            return "SHOP_PRICES_ARE_LOWER_THAN_PROMO";

         when PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE =>
            return "PROMOCODE_PRICE_MORE_THAN_MAX_FAIR_PRICE";

         when SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO =>
            return "SHOP_OFFER_NOT_ELIGIBLE_FOR_PROMO";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferUpdateWarningCodeType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferUpdateWarningCodeType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferUpdateWarningCodeType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PromoOfferUpdateWarningCodeType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferUpdateWarningCodeType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferUpdateWarningCodeType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_PromoParticipationType_Type (Value : in String) return .Models.PromoParticipationType_Type is
   begin
      if Value = "PARTICIPATING_NOW" then
         return PARTICIPATING_NOW;
      end if;
      if Value = "PARTICIPATED" then
         return PARTICIPATED;
      end if;
      raise Constraint_Error;
   end To_PromoParticipationType_Type;

   function To_String (Value : in .Models.PromoParticipationType_Type) return String is
   begin
      case Value is
         when PARTICIPATING_NOW =>
            return "PARTICIPATING_NOW";

         when PARTICIPATED =>
            return "PARTICIPATED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoParticipationType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoParticipationType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoParticipationType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_PromoParticipationType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoParticipationType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoParticipationType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoPeriodDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("dateTimeFrom", Value.Date_Time_From);
      Into.Write_Entity ("dateTimeTo", Value.Date_Time_To);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoPeriodDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoPeriodDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "dateTimeFrom", Value.Date_Time_From);
      Swagger.Streams.Deserialize (Object, "dateTimeTo", Value.Date_Time_To);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoPeriodDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoPeriodDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_QualityRatingComponentType_Type (Value : in String) return .Models.QualityRatingComponentType_Type is
   begin
      if Value = "DBS_CANCELLATION_RATE" then
         return DBS_CANCELLATION_RATE;
      end if;
      if Value = "DBS_LATE_DELIVERY_RATE" then
         return DBS_LATE_DELIVERY_RATE;
      end if;
      if Value = "FBS_CANCELLATION_RATE" then
         return FBS_CANCELLATION_RATE;
      end if;
      if Value = "FBS_LATE_SHIP_RATE" then
         return FBS_LATE_SHIP_RATE;
      end if;
      if Value = "FBY_LATE_DELIVERY_RATE" then
         return FBY_LATE_DELIVERY_RATE;
      end if;
      if Value = "FBY_CANCELLATION_RATE" then
         return FBY_CANCELLATION_RATE;
      end if;
      if Value = "FBY_DELIVERY_DIFF_RATE" then
         return FBY_DELIVERY_DIFF_RATE;
      end if;
      if Value = "FBY_LATE_EDITING_RATE" then
         return FBY_LATE_EDITING_RATE;
      end if;
      raise Constraint_Error;
   end To_QualityRatingComponentType_Type;

   function To_String (Value : in .Models.QualityRatingComponentType_Type) return String is
   begin
      case Value is
         when DBS_CANCELLATION_RATE =>
            return "DBS_CANCELLATION_RATE";

         when DBS_LATE_DELIVERY_RATE =>
            return "DBS_LATE_DELIVERY_RATE";

         when FBS_CANCELLATION_RATE =>
            return "FBS_CANCELLATION_RATE";

         when FBS_LATE_SHIP_RATE =>
            return "FBS_LATE_SHIP_RATE";

         when FBY_LATE_DELIVERY_RATE =>
            return "FBY_LATE_DELIVERY_RATE";

         when FBY_CANCELLATION_RATE =>
            return "FBY_CANCELLATION_RATE";

         when FBY_DELIVERY_DIFF_RATE =>
            return "FBY_DELIVERY_DIFF_RATE";

         when FBY_LATE_EDITING_RATE =>
            return "FBY_LATE_EDITING_RATE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QualityRatingComponentType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QualityRatingComponentType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QualityRatingComponentType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_QualityRatingComponentType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QualityRatingComponentType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QualityRatingComponentType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QuantumDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Min_Quantity.Is_Null then
         Into.Write_Entity ("minQuantity", Value.Min_Quantity);
      end if;
      if not Value.Step_Quantity.Is_Null then
         Into.Write_Entity ("stepQuantity", Value.Step_Quantity);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QuantumDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QuantumDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "minQuantity", Value.Min_Quantity);
      Swagger.Streams.Deserialize (Object, "stepQuantity", Value.Step_Quantity);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QuantumDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QuantumDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_RecipientType_Type (Value : in String) return .Models.RecipientType_Type is
   begin
      if Value = "SHOP" then
         return SHOP;
      end if;
      if Value = "DELIVERY_SERVICE" then
         return DELIVERY_SERVICE;
      end if;
      if Value = "POST" then
         return POST;
      end if;
      raise Constraint_Error;
   end To_RecipientType_Type;

   function To_String (Value : in .Models.RecipientType_Type) return String is
   begin
      case Value is
         when SHOP =>
            return "SHOP";

         when DELIVERY_SERVICE =>
            return "DELIVERY_SERVICE";

         when POST =>
            return "POST";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RecipientType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RecipientType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RecipientType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_RecipientType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RecipientType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RecipientType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_RefundStatusType_Type (Value : in String) return .Models.RefundStatusType_Type is
   begin
      if Value = "STARTED_BY_USER" then
         return STARTED_BY_USER;
      end if;
      if Value = "REFUND_IN_PROGRESS" then
         return REFUND_IN_PROGRESS;
      end if;
      if Value = "REFUNDED" then
         return REFUNDED;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      if Value = "WAITING_FOR_DECISION" then
         return WAITING_FOR_DECISION;
      end if;
      if Value = "DECISION_MADE" then
         return DECISION_MADE;
      end if;
      if Value = "REFUNDED_WITH_BONUSES" then
         return REFUNDED_WITH_BONUSES;
      end if;
      if Value = "REFUNDED_BY_SHOP" then
         return REFUNDED_BY_SHOP;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      if Value = "COMPLETE_WITHOUT_REFUND" then
         return COMPLETE_WITHOUT_REFUND;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_RefundStatusType_Type;

   function To_String (Value : in .Models.RefundStatusType_Type) return String is
   begin
      case Value is
         when STARTED_BY_USER =>
            return "STARTED_BY_USER";

         when REFUND_IN_PROGRESS =>
            return "REFUND_IN_PROGRESS";

         when REFUNDED =>
            return "REFUNDED";

         when FAILED =>
            return "FAILED";

         when WAITING_FOR_DECISION =>
            return "WAITING_FOR_DECISION";

         when DECISION_MADE =>
            return "DECISION_MADE";

         when REFUNDED_WITH_BONUSES =>
            return "REFUNDED_WITH_BONUSES";

         when REFUNDED_BY_SHOP =>
            return "REFUNDED_BY_SHOP";

         when CANCELLED =>
            return "CANCELLED";

         when COMPLETE_WITHOUT_REFUND =>
            return "COMPLETE_WITHOUT_REFUND";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RefundStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RefundStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RefundStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_RefundStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RefundStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RefundStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_RegionType_Type (Value : in String) return .Models.RegionType_Type is
   begin
      if Value = "OTHER" then
         return OTHER;
      end if;
      if Value = "CONTINENT" then
         return CONTINENT;
      end if;
      if Value = "REGION" then
         return REGION;
      end if;
      if Value = "COUNTRY" then
         return COUNTRY;
      end if;
      if Value = "COUNTRY_DISTRICT" then
         return COUNTRY_DISTRICT;
      end if;
      if Value = "REPUBLIC" then
         return REPUBLIC;
      end if;
      if Value = "CITY" then
         return CITY;
      end if;
      if Value = "VILLAGE" then
         return VILLAGE;
      end if;
      if Value = "CITY_DISTRICT" then
         return CITY_DISTRICT;
      end if;
      if Value = "SUBWAY_STATION" then
         return SUBWAY_STATION;
      end if;
      if Value = "REPUBLIC_AREA" then
         return REPUBLIC_AREA;
      end if;
      raise Constraint_Error;
   end To_RegionType_Type;

   function To_String (Value : in .Models.RegionType_Type) return String is
   begin
      case Value is
         when OTHER =>
            return "OTHER";

         when CONTINENT =>
            return "CONTINENT";

         when REGION =>
            return "REGION";

         when COUNTRY =>
            return "COUNTRY";

         when COUNTRY_DISTRICT =>
            return "COUNTRY_DISTRICT";

         when REPUBLIC =>
            return "REPUBLIC";

         when CITY =>
            return "CITY";

         when VILLAGE =>
            return "VILLAGE";

         when CITY_DISTRICT =>
            return "CITY_DISTRICT";

         when SUBWAY_STATION =>
            return "SUBWAY_STATION";

         when REPUBLIC_AREA =>
            return "REPUBLIC_AREA";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RegionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RegionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RegionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_RegionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RegionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RegionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_RejectedPromoOfferDeleteReasonType_Type (Value : in String) return .Models.RejectedPromoOfferDeleteReasonType_Type is
   begin
      if Value = "OFFER_DOES_NOT_EXIST" then
         return OFFER_DOES_NOT_EXIST;
      end if;
      raise Constraint_Error;
   end To_RejectedPromoOfferDeleteReasonType_Type;

   function To_String (Value : in .Models.RejectedPromoOfferDeleteReasonType_Type) return String is
   begin
      case Value is
         when OFFER_DOES_NOT_EXIST =>
            return "OFFER_DOES_NOT_EXIST";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RejectedPromoOfferDeleteReasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RejectedPromoOfferDeleteReasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RejectedPromoOfferDeleteReasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_RejectedPromoOfferDeleteReasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RejectedPromoOfferDeleteReasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RejectedPromoOfferDeleteReasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_RejectedPromoOfferUpdateReasonType_Type (Value : in String) return .Models.RejectedPromoOfferUpdateReasonType_Type is
   begin
      if Value = "OFFER_DOES_NOT_EXIST" then
         return OFFER_DOES_NOT_EXIST;
      end if;
      if Value = "OFFER_DUPLICATION" then
         return OFFER_DUPLICATION;
      end if;
      if Value = "OFFER_NOT_ELIGIBLE_FOR_PROMO" then
         return OFFER_NOT_ELIGIBLE_FOR_PROMO;
      end if;
      if Value = "OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED" then
         return OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED;
      end if;
      if Value = "DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED" then
         return DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED;
      end if;
      if Value = "EMPTY_OLD_PRICE" then
         return EMPTY_OLD_PRICE;
      end if;
      if Value = "EMPTY_PROMO_PRICE" then
         return EMPTY_PROMO_PRICE;
      end if;
      if Value = "MAX_PROMO_PRICE_EXCEEDED" then
         return MAX_PROMO_PRICE_EXCEEDED;
      end if;
      if Value = "PROMO_PRICE_BIGGER_THAN_MAX" then
         return PROMO_PRICE_BIGGER_THAN_MAX;
      end if;
      if Value = "PROMO_PRICE_SMALLER_THAN_MIN" then
         return PROMO_PRICE_SMALLER_THAN_MIN;
      end if;
      raise Constraint_Error;
   end To_RejectedPromoOfferUpdateReasonType_Type;

   function To_String (Value : in .Models.RejectedPromoOfferUpdateReasonType_Type) return String is
   begin
      case Value is
         when OFFER_DOES_NOT_EXIST =>
            return "OFFER_DOES_NOT_EXIST";

         when OFFER_DUPLICATION =>
            return "OFFER_DUPLICATION";

         when OFFER_NOT_ELIGIBLE_FOR_PROMO =>
            return "OFFER_NOT_ELIGIBLE_FOR_PROMO";

         when OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED =>
            return "OFFER_PROMOS_MAX_BYTE_SIZE_EXCEEDED";

         when DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED =>
            return "DEADLINE_FOR_FOCUS_PROMOS_EXCEEDED";

         when EMPTY_OLD_PRICE =>
            return "EMPTY_OLD_PRICE";

         when EMPTY_PROMO_PRICE =>
            return "EMPTY_PROMO_PRICE";

         when MAX_PROMO_PRICE_EXCEEDED =>
            return "MAX_PROMO_PRICE_EXCEEDED";

         when PROMO_PRICE_BIGGER_THAN_MAX =>
            return "PROMO_PRICE_BIGGER_THAN_MAX";

         when PROMO_PRICE_SMALLER_THAN_MIN =>
            return "PROMO_PRICE_SMALLER_THAN_MIN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RejectedPromoOfferUpdateReasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RejectedPromoOfferUpdateReasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RejectedPromoOfferUpdateReasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_RejectedPromoOfferUpdateReasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RejectedPromoOfferUpdateReasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RejectedPromoOfferUpdateReasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReportFormatType_Type (Value : in String) return .Models.ReportFormatType_Type is
   begin
      if Value = "FILE" then
         return FILE;
      end if;
      if Value = "CSV" then
         return CSV;
      end if;
      raise Constraint_Error;
   end To_ReportFormatType_Type;

   function To_String (Value : in .Models.ReportFormatType_Type) return String is
   begin
      case Value is
         when FILE =>
            return "FILE";

         when CSV =>
            return "CSV";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReportFormatType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReportFormatType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReportFormatType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReportFormatType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReportFormatType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReportFormatType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReportStatusType_Type (Value : in String) return .Models.ReportStatusType_Type is
   begin
      if Value = "PENDING" then
         return PENDING;
      end if;
      if Value = "PROCESSING" then
         return PROCESSING;
      end if;
      if Value = "FAILED" then
         return FAILED;
      end if;
      if Value = "DONE" then
         return DONE;
      end if;
      raise Constraint_Error;
   end To_ReportStatusType_Type;

   function To_String (Value : in .Models.ReportStatusType_Type) return String is
   begin
      case Value is
         when PENDING =>
            return "PENDING";

         when PROCESSING =>
            return "PROCESSING";

         when FAILED =>
            return "FAILED";

         when DONE =>
            return "DONE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReportStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReportStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReportStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReportStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReportStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReportStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReportSubStatusType_Type (Value : in String) return .Models.ReportSubStatusType_Type is
   begin
      if Value = "NO_DATA" then
         return NO_DATA;
      end if;
      if Value = "TOO_LARGE" then
         return TOO_LARGE;
      end if;
      if Value = "RESOURCE_NOT_FOUND" then
         return RESOURCE_NOT_FOUND;
      end if;
      raise Constraint_Error;
   end To_ReportSubStatusType_Type;

   function To_String (Value : in .Models.ReportSubStatusType_Type) return String is
   begin
      case Value is
         when NO_DATA =>
            return "NO_DATA";

         when TOO_LARGE =>
            return "TOO_LARGE";

         when RESOURCE_NOT_FOUND =>
            return "RESOURCE_NOT_FOUND";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReportSubStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReportSubStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReportSubStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReportSubStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReportSubStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReportSubStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnDecisionReasonType_Type (Value : in String) return .Models.ReturnDecisionReasonType_Type is
   begin
      if Value = "BAD_QUALITY" then
         return BAD_QUALITY;
      end if;
      if Value = "DOES_NOT_FIT" then
         return DOES_NOT_FIT;
      end if;
      if Value = "WRONG_ITEM" then
         return WRONG_ITEM;
      end if;
      if Value = "DAMAGE_DELIVERY" then
         return DAMAGE_DELIVERY;
      end if;
      if Value = "LOYALTY_FAIL" then
         return LOYALTY_FAIL;
      end if;
      if Value = "CONTENT_FAIL" then
         return CONTENT_FAIL;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_ReturnDecisionReasonType_Type;

   function To_String (Value : in .Models.ReturnDecisionReasonType_Type) return String is
   begin
      case Value is
         when BAD_QUALITY =>
            return "BAD_QUALITY";

         when DOES_NOT_FIT =>
            return "DOES_NOT_FIT";

         when WRONG_ITEM =>
            return "WRONG_ITEM";

         when DAMAGE_DELIVERY =>
            return "DAMAGE_DELIVERY";

         when LOYALTY_FAIL =>
            return "LOYALTY_FAIL";

         when CONTENT_FAIL =>
            return "CONTENT_FAIL";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnDecisionReasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnDecisionReasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnDecisionReasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnDecisionReasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnDecisionReasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnDecisionReasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnDecisionSubreasonType_Type (Value : in String) return .Models.ReturnDecisionSubreasonType_Type is
   begin
      if Value = "USER_DID_NOT_LIKE" then
         return USER_DID_NOT_LIKE;
      end if;
      if Value = "USER_CHANGED_MIND" then
         return USER_CHANGED_MIND;
      end if;
      if Value = "DELIVERED_TOO_LONG" then
         return DELIVERED_TOO_LONG;
      end if;
      if Value = "BAD_PACKAGE" then
         return BAD_PACKAGE;
      end if;
      if Value = "DAMAGED" then
         return DAMAGED;
      end if;
      if Value = "NOT_WORKING" then
         return NOT_WORKING;
      end if;
      if Value = "INCOMPLETENESS" then
         return INCOMPLETENESS;
      end if;
      if Value = "WRONG_ITEM" then
         return WRONG_ITEM;
      end if;
      if Value = "WRONG_COLOR" then
         return WRONG_COLOR;
      end if;
      if Value = "DID_NOT_MATCH_DESCRIPTION" then
         return DID_NOT_MATCH_DESCRIPTION;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_ReturnDecisionSubreasonType_Type;

   function To_String (Value : in .Models.ReturnDecisionSubreasonType_Type) return String is
   begin
      case Value is
         when USER_DID_NOT_LIKE =>
            return "USER_DID_NOT_LIKE";

         when USER_CHANGED_MIND =>
            return "USER_CHANGED_MIND";

         when DELIVERED_TOO_LONG =>
            return "DELIVERED_TOO_LONG";

         when BAD_PACKAGE =>
            return "BAD_PACKAGE";

         when DAMAGED =>
            return "DAMAGED";

         when NOT_WORKING =>
            return "NOT_WORKING";

         when INCOMPLETENESS =>
            return "INCOMPLETENESS";

         when WRONG_ITEM =>
            return "WRONG_ITEM";

         when WRONG_COLOR =>
            return "WRONG_COLOR";

         when DID_NOT_MATCH_DESCRIPTION =>
            return "DID_NOT_MATCH_DESCRIPTION";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnDecisionSubreasonType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnDecisionSubreasonType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnDecisionSubreasonType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnDecisionSubreasonType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnDecisionSubreasonType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnDecisionSubreasonType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnDecisionType_Type (Value : in String) return .Models.ReturnDecisionType_Type is
   begin
      if Value = "REFUND_MONEY" then
         return REFUND_MONEY;
      end if;
      if Value = "REFUND_MONEY_INCLUDING_SHIPMENT" then
         return REFUND_MONEY_INCLUDING_SHIPMENT;
      end if;
      if Value = "REPAIR" then
         return REPAIR;
      end if;
      if Value = "REPLACE" then
         return REPLACE;
      end if;
      if Value = "SEND_TO_EXAMINATION" then
         return SEND_TO_EXAMINATION;
      end if;
      if Value = "DECLINE_REFUND" then
         return DECLINE_REFUND;
      end if;
      if Value = "OTHER_DECISION" then
         return OTHER_DECISION;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_ReturnDecisionType_Type;

   function To_String (Value : in .Models.ReturnDecisionType_Type) return String is
   begin
      case Value is
         when REFUND_MONEY =>
            return "REFUND_MONEY";

         when REFUND_MONEY_INCLUDING_SHIPMENT =>
            return "REFUND_MONEY_INCLUDING_SHIPMENT";

         when REPAIR =>
            return "REPAIR";

         when REPLACE =>
            return "REPLACE";

         when SEND_TO_EXAMINATION =>
            return "SEND_TO_EXAMINATION";

         when DECLINE_REFUND =>
            return "DECLINE_REFUND";

         when OTHER_DECISION =>
            return "OTHER_DECISION";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnDecisionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnDecisionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnDecisionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnDecisionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnDecisionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnDecisionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnInstanceStatusType_Type (Value : in String) return .Models.ReturnInstanceStatusType_Type is
   begin
      if Value = "CREATED" then
         return CREATED;
      end if;
      if Value = "RECEIVED" then
         return RECEIVED;
      end if;
      if Value = "IN_TRANSIT" then
         return IN_TRANSIT;
      end if;
      if Value = "READY_FOR_PICKUP" then
         return READY_FOR_PICKUP;
      end if;
      if Value = "PICKED" then
         return PICKED;
      end if;
      if Value = "RECEIVED_ON_FULFILLMENT" then
         return RECEIVED_ON_FULFILLMENT;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      if Value = "LOST" then
         return LOST;
      end if;
      if Value = "UTILIZED" then
         return UTILIZED;
      end if;
      if Value = "PREPARED_FOR_UTILIZATION" then
         return PREPARED_FOR_UTILIZATION;
      end if;
      if Value = "EXPROPRIATED" then
         return EXPROPRIATED;
      end if;
      if Value = "NOT_IN_DEMAND" then
         return NOT_IN_DEMAND;
      end if;
      raise Constraint_Error;
   end To_ReturnInstanceStatusType_Type;

   function To_String (Value : in .Models.ReturnInstanceStatusType_Type) return String is
   begin
      case Value is
         when CREATED =>
            return "CREATED";

         when RECEIVED =>
            return "RECEIVED";

         when IN_TRANSIT =>
            return "IN_TRANSIT";

         when READY_FOR_PICKUP =>
            return "READY_FOR_PICKUP";

         when PICKED =>
            return "PICKED";

         when RECEIVED_ON_FULFILLMENT =>
            return "RECEIVED_ON_FULFILLMENT";

         when CANCELLED =>
            return "CANCELLED";

         when LOST =>
            return "LOST";

         when UTILIZED =>
            return "UTILIZED";

         when PREPARED_FOR_UTILIZATION =>
            return "PREPARED_FOR_UTILIZATION";

         when EXPROPRIATED =>
            return "EXPROPRIATED";

         when NOT_IN_DEMAND =>
            return "NOT_IN_DEMAND";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnInstanceStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnInstanceStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnInstanceStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnInstanceStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnInstanceStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnInstanceStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnInstanceStockType_Type (Value : in String) return .Models.ReturnInstanceStockType_Type is
   begin
      if Value = "FIT" then
         return FIT;
      end if;
      if Value = "DEFECT" then
         return DEFECT;
      end if;
      if Value = "ANOMALY" then
         return ANOMALY;
      end if;
      if Value = "SURPLUS" then
         return SURPLUS;
      end if;
      if Value = "EXPIRED" then
         return EXPIRED;
      end if;
      if Value = "MISGRADING" then
         return MISGRADING;
      end if;
      if Value = "UNDEFINED" then
         return UNDEFINED;
      end if;
      if Value = "INCORRECT_IMEI" then
         return INCORRECT_IMEI;
      end if;
      if Value = "INCORRECT_SERIAL_NUMBER" then
         return INCORRECT_SERIAL_NUMBER;
      end if;
      if Value = "INCORRECT_CIS" then
         return INCORRECT_CIS;
      end if;
      if Value = "PART_MISSING" then
         return PART_MISSING;
      end if;
      if Value = "NON_COMPLIENT" then
         return NON_COMPLIENT;
      end if;
      if Value = "NOT_ACCEPTABLE" then
         return NOT_ACCEPTABLE;
      end if;
      if Value = "SERVICE" then
         return SERVICE;
      end if;
      if Value = "MARKDOWN" then
         return MARKDOWN;
      end if;
      if Value = "DEMO" then
         return DEMO;
      end if;
      if Value = "REPAIR" then
         return REPAIR;
      end if;
      if Value = "FIRMWARE" then
         return FIRMWARE;
      end if;
      if Value = "UNKNOWN" then
         return UNKNOWN;
      end if;
      raise Constraint_Error;
   end To_ReturnInstanceStockType_Type;

   function To_String (Value : in .Models.ReturnInstanceStockType_Type) return String is
   begin
      case Value is
         when FIT =>
            return "FIT";

         when DEFECT =>
            return "DEFECT";

         when ANOMALY =>
            return "ANOMALY";

         when SURPLUS =>
            return "SURPLUS";

         when EXPIRED =>
            return "EXPIRED";

         when MISGRADING =>
            return "MISGRADING";

         when UNDEFINED =>
            return "UNDEFINED";

         when INCORRECT_IMEI =>
            return "INCORRECT_IMEI";

         when INCORRECT_SERIAL_NUMBER =>
            return "INCORRECT_SERIAL_NUMBER";

         when INCORRECT_CIS =>
            return "INCORRECT_CIS";

         when PART_MISSING =>
            return "PART_MISSING";

         when NON_COMPLIENT =>
            return "NON_COMPLIENT";

         when NOT_ACCEPTABLE =>
            return "NOT_ACCEPTABLE";

         when SERVICE =>
            return "SERVICE";

         when MARKDOWN =>
            return "MARKDOWN";

         when DEMO =>
            return "DEMO";

         when REPAIR =>
            return "REPAIR";

         when FIRMWARE =>
            return "FIRMWARE";

         when UNKNOWN =>
            return "UNKNOWN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnInstanceStockType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnInstanceStockType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnInstanceStockType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnInstanceStockType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnInstanceStockType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnInstanceStockType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnRequestDecisionType_Type (Value : in String) return .Models.ReturnRequestDecisionType_Type is
   begin
      if Value = "REFUND_MONEY" then
         return REFUND_MONEY;
      end if;
      if Value = "REFUND_MONEY_INCLUDING_SHIPMENT" then
         return REFUND_MONEY_INCLUDING_SHIPMENT;
      end if;
      if Value = "REPAIR" then
         return REPAIR;
      end if;
      if Value = "REPLACE" then
         return REPLACE;
      end if;
      if Value = "SEND_TO_EXAMINATION" then
         return SEND_TO_EXAMINATION;
      end if;
      if Value = "DECLINE_REFUND" then
         return DECLINE_REFUND;
      end if;
      if Value = "OTHER_DECISION" then
         return OTHER_DECISION;
      end if;
      raise Constraint_Error;
   end To_ReturnRequestDecisionType_Type;

   function To_String (Value : in .Models.ReturnRequestDecisionType_Type) return String is
   begin
      case Value is
         when REFUND_MONEY =>
            return "REFUND_MONEY";

         when REFUND_MONEY_INCLUDING_SHIPMENT =>
            return "REFUND_MONEY_INCLUDING_SHIPMENT";

         when REPAIR =>
            return "REPAIR";

         when REPLACE =>
            return "REPLACE";

         when SEND_TO_EXAMINATION =>
            return "SEND_TO_EXAMINATION";

         when DECLINE_REFUND =>
            return "DECLINE_REFUND";

         when OTHER_DECISION =>
            return "OTHER_DECISION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnRequestDecisionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnRequestDecisionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnRequestDecisionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnRequestDecisionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnRequestDecisionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnRequestDecisionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnShipmentStatusType_Type (Value : in String) return .Models.ReturnShipmentStatusType_Type is
   begin
      if Value = "CREATED" then
         return CREATED;
      end if;
      if Value = "RECEIVED" then
         return RECEIVED;
      end if;
      if Value = "IN_TRANSIT" then
         return IN_TRANSIT;
      end if;
      if Value = "READY_FOR_PICKUP" then
         return READY_FOR_PICKUP;
      end if;
      if Value = "PICKED" then
         return PICKED;
      end if;
      if Value = "LOST" then
         return LOST;
      end if;
      if Value = "EXPIRED" then
         return EXPIRED;
      end if;
      if Value = "CANCELLED" then
         return CANCELLED;
      end if;
      if Value = "FULFILMENT_RECEIVED" then
         return FULFILMENT_RECEIVED;
      end if;
      if Value = "PREPARED_FOR_UTILIZATION" then
         return PREPARED_FOR_UTILIZATION;
      end if;
      if Value = "NOT_IN_DEMAND" then
         return NOT_IN_DEMAND;
      end if;
      if Value = "UTILIZED" then
         return UTILIZED;
      end if;
      if Value = "READY_FOR_EXPROPRIATION" then
         return READY_FOR_EXPROPRIATION;
      end if;
      if Value = "RECEIVED_FOR_EXPROPRIATION" then
         return RECEIVED_FOR_EXPROPRIATION;
      end if;
      raise Constraint_Error;
   end To_ReturnShipmentStatusType_Type;

   function To_String (Value : in .Models.ReturnShipmentStatusType_Type) return String is
   begin
      case Value is
         when CREATED =>
            return "CREATED";

         when RECEIVED =>
            return "RECEIVED";

         when IN_TRANSIT =>
            return "IN_TRANSIT";

         when READY_FOR_PICKUP =>
            return "READY_FOR_PICKUP";

         when PICKED =>
            return "PICKED";

         when LOST =>
            return "LOST";

         when EXPIRED =>
            return "EXPIRED";

         when CANCELLED =>
            return "CANCELLED";

         when FULFILMENT_RECEIVED =>
            return "FULFILMENT_RECEIVED";

         when PREPARED_FOR_UTILIZATION =>
            return "PREPARED_FOR_UTILIZATION";

         when NOT_IN_DEMAND =>
            return "NOT_IN_DEMAND";

         when UTILIZED =>
            return "UTILIZED";

         when READY_FOR_EXPROPRIATION =>
            return "READY_FOR_EXPROPRIATION";

         when RECEIVED_FOR_EXPROPRIATION =>
            return "RECEIVED_FOR_EXPROPRIATION";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnShipmentStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnShipmentStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnShipmentStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnShipmentStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnShipmentStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnShipmentStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ReturnType_Type (Value : in String) return .Models.ReturnType_Type is
   begin
      if Value = "UNREDEEMED" then
         return UNREDEEMED;
      end if;
      if Value = "RETURN" then
         return RETURN;
      end if;
      raise Constraint_Error;
   end To_ReturnType_Type;

   function To_String (Value : in .Models.ReturnType_Type) return String is
   begin
      case Value is
         when UNREDEEMED =>
            return "UNREDEEMED";

         when RETURN =>
            return "RETURN";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ReturnType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ScrollingPagerDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Next_Page_Token.Is_Null then
         Into.Write_Entity ("nextPageToken", Value.Next_Page_Token);
      end if;
      if not Value.Prev_Page_Token.Is_Null then
         Into.Write_Entity ("prevPageToken", Value.Prev_Page_Token);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ScrollingPagerDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ScrollingPagerDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "nextPageToken", Value.Next_Page_Token);
      Swagger.Streams.Deserialize (Object, "prevPageToken", Value.Prev_Page_Token);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ScrollingPagerDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ScrollingPagerDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_SellingProgramType_Type (Value : in String) return .Models.SellingProgramType_Type is
   begin
      if Value = "FBY" then
         return FBY;
      end if;
      if Value = "FBS" then
         return FBS;
      end if;
      if Value = "DBS" then
         return DBS;
      end if;
      if Value = "EXPRESS" then
         return EXPRESS;
      end if;
      raise Constraint_Error;
   end To_SellingProgramType_Type;

   function To_String (Value : in .Models.SellingProgramType_Type) return String is
   begin
      case Value is
         when FBY =>
            return "FBY";

         when FBS =>
            return "FBS";

         when DBS =>
            return "DBS";

         when EXPRESS =>
            return "EXPRESS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SellingProgramType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SellingProgramType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SellingProgramType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_SellingProgramType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SellingProgramType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SellingProgramType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SendMessageToChatRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SendMessageToChatRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SendMessageToChatRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SendMessageToChatRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SendMessageToChatRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetOrderDeliveryTrackCodeRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("trackCode", Value.Track_Code);
      Into.Write_Long_Entity ("deliveryServiceId", Value.Delivery_Service_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetOrderDeliveryTrackCodeRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetOrderDeliveryTrackCodeRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "trackCode", Value.Track_Code);
      Swagger.Streams.Deserialize (Object, "deliveryServiceId", Value.Delivery_Service_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetOrderDeliveryTrackCodeRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetOrderDeliveryTrackCodeRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetShipmentPalletsCountRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("placesCount", Value.Places_Count);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetShipmentPalletsCountRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetShipmentPalletsCountRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "placesCount", Value.Places_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetShipmentPalletsCountRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetShipmentPalletsCountRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ShelfsStatisticsAttributionType_Type (Value : in String) return .Models.ShelfsStatisticsAttributionType_Type is
   begin
      if Value = "CLICKS" then
         return CLICKS;
      end if;
      if Value = "SHOWS" then
         return SHOWS;
      end if;
      raise Constraint_Error;
   end To_ShelfsStatisticsAttributionType_Type;

   function To_String (Value : in .Models.ShelfsStatisticsAttributionType_Type) return String is
   begin
      case Value is
         when CLICKS =>
            return "CLICKS";

         when SHOWS =>
            return "SHOWS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShelfsStatisticsAttributionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShelfsStatisticsAttributionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShelfsStatisticsAttributionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ShelfsStatisticsAttributionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShelfsStatisticsAttributionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShelfsStatisticsAttributionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ShipmentActionType_Type (Value : in String) return .Models.ShipmentActionType_Type is
   begin
      if Value = "CONFIRM" then
         return CONFIRM;
      end if;
      if Value = "DOWNLOAD_ACT" then
         return DOWNLOAD_ACT;
      end if;
      if Value = "DOWNLOAD_INBOUND_ACT" then
         return DOWNLOAD_INBOUND_ACT;
      end if;
      if Value = "DOWNLOAD_DISCREPANCY_ACT" then
         return DOWNLOAD_DISCREPANCY_ACT;
      end if;
      if Value = "CHANGE_PALLETS_COUNT" then
         return CHANGE_PALLETS_COUNT;
      end if;
      raise Constraint_Error;
   end To_ShipmentActionType_Type;

   function To_String (Value : in .Models.ShipmentActionType_Type) return String is
   begin
      case Value is
         when CONFIRM =>
            return "CONFIRM";

         when DOWNLOAD_ACT =>
            return "DOWNLOAD_ACT";

         when DOWNLOAD_INBOUND_ACT =>
            return "DOWNLOAD_INBOUND_ACT";

         when DOWNLOAD_DISCREPANCY_ACT =>
            return "DOWNLOAD_DISCREPANCY_ACT";

         when CHANGE_PALLETS_COUNT =>
            return "CHANGE_PALLETS_COUNT";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentActionType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentActionType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentActionType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ShipmentActionType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentActionType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentActionType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ShipmentPalletLabelPageFormatType_Type (Value : in String) return .Models.ShipmentPalletLabelPageFormatType_Type is
   begin
      if Value = "A4" then
         return A4;
      end if;
      if Value = "A8" then
         return A8;
      end if;
      raise Constraint_Error;
   end To_ShipmentPalletLabelPageFormatType_Type;

   function To_String (Value : in .Models.ShipmentPalletLabelPageFormatType_Type) return String is
   begin
      case Value is
         when A4 =>
            return "A4";

         when A8 =>
            return "A8";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentPalletLabelPageFormatType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentPalletLabelPageFormatType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentPalletLabelPageFormatType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ShipmentPalletLabelPageFormatType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentPalletLabelPageFormatType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentPalletLabelPageFormatType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ShipmentStatusType_Type (Value : in String) return .Models.ShipmentStatusType_Type is
   begin
      if Value = "OUTBOUND_CREATED" then
         return OUTBOUND_CREATED;
      end if;
      if Value = "OUTBOUND_READY_FOR_CONFIRMATION" then
         return OUTBOUND_READY_FOR_CONFIRMATION;
      end if;
      if Value = "OUTBOUND_CONFIRMED" then
         return OUTBOUND_CONFIRMED;
      end if;
      if Value = "OUTBOUND_SIGNED" then
         return OUTBOUND_SIGNED;
      end if;
      if Value = "FINISHED" then
         return FINISHED;
      end if;
      if Value = "ACCEPTED" then
         return ACCEPTED;
      end if;
      if Value = "ACCEPTED_WITH_DISCREPANCIES" then
         return ACCEPTED_WITH_DISCREPANCIES;
      end if;
      if Value = "ERROR" then
         return ERROR;
      end if;
      raise Constraint_Error;
   end To_ShipmentStatusType_Type;

   function To_String (Value : in .Models.ShipmentStatusType_Type) return String is
   begin
      case Value is
         when OUTBOUND_CREATED =>
            return "OUTBOUND_CREATED";

         when OUTBOUND_READY_FOR_CONFIRMATION =>
            return "OUTBOUND_READY_FOR_CONFIRMATION";

         when OUTBOUND_CONFIRMED =>
            return "OUTBOUND_CONFIRMED";

         when OUTBOUND_SIGNED =>
            return "OUTBOUND_SIGNED";

         when FINISHED =>
            return "FINISHED";

         when ACCEPTED =>
            return "ACCEPTED";

         when ACCEPTED_WITH_DISCREPANCIES =>
            return "ACCEPTED_WITH_DISCREPANCIES";

         when ERROR =>
            return "ERROR";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentStatusType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentStatusType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentStatusType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ShipmentStatusType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentStatusType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentStatusType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ShipmentType_Type (Value : in String) return .Models.ShipmentType_Type is
   begin
      if Value = "IMPORT" then
         return IMPORT;
      end if;
      if Value = "WITHDRAW" then
         return WITHDRAW;
      end if;
      raise Constraint_Error;
   end To_ShipmentType_Type;

   function To_String (Value : in .Models.ShipmentType_Type) return String is
   begin
      case Value is
         when IMPORT =>
            return "IMPORT";

         when WITHDRAW =>
            return "WITHDRAW";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ShipmentType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShopSku_Type) is
   begin
      Into.Start_Entity (Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShopSku_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShopSku_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShopSku_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShopSku_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_ShowsSalesGroupingType_Type (Value : in String) return .Models.ShowsSalesGroupingType_Type is
   begin
      if Value = "CATEGORIES" then
         return CATEGORIES;
      end if;
      if Value = "OFFERS" then
         return OFFERS;
      end if;
      raise Constraint_Error;
   end To_ShowsSalesGroupingType_Type;

   function To_String (Value : in .Models.ShowsSalesGroupingType_Type) return String is
   begin
      case Value is
         when CATEGORIES =>
            return "CATEGORIES";

         when OFFERS =>
            return "OFFERS";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShowsSalesGroupingType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShowsSalesGroupingType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShowsSalesGroupingType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_ShowsSalesGroupingType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShowsSalesGroupingType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShowsSalesGroupingType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SkipGoodsFeedbackReactionRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "feedbackIds", Value.Feedback_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SkipGoodsFeedbackReactionRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SkipGoodsFeedbackReactionRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "feedbackIds", Value.Feedback_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SkipGoodsFeedbackReactionRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SkipGoodsFeedbackReactionRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SkuBidItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("sku", Value.Sku);
      Into.Write_Entity ("bid", Value.Bid);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SkuBidItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SkuBidItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SkuBidItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SkuBidItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_SortOrderType_Type (Value : in String) return .Models.SortOrderType_Type is
   begin
      if Value = "ASC" then
         return ASC;
      end if;
      if Value = "DESC" then
         return DESC;
      end if;
      raise Constraint_Error;
   end To_SortOrderType_Type;

   function To_String (Value : in .Models.SortOrderType_Type) return String is
   begin
      case Value is
         when ASC =>
            return "ASC";

         when DESC =>
            return "DESC";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SortOrderType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SortOrderType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SortOrderType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_SortOrderType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SortOrderType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SortOrderType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SuggestOfferPriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuggestOfferPriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SuggestOfferPriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SuggestOfferPriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SuggestOfferPriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TariffParameterDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TariffParameterDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TariffParameterDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TariffParameterDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TariffParameterDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TariffType_Type (Value : in String) return .Models.TariffType_Type is
   begin
      if Value = "AGENCY_COMMISSION" then
         return AGENCY_COMMISSION;
      end if;
      if Value = "PAYMENT_TRANSFER" then
         return PAYMENT_TRANSFER;
      end if;
      if Value = "STORAGE" then
         return STORAGE;
      end if;
      if Value = "WITHDRAW" then
         return WITHDRAW;
      end if;
      if Value = "SURPLUS" then
         return SURPLUS;
      end if;
      if Value = "FEE" then
         return FEE;
      end if;
      if Value = "DELIVERY_TO_CUSTOMER" then
         return DELIVERY_TO_CUSTOMER;
      end if;
      if Value = "CROSSREGIONAL_DELIVERY" then
         return CROSSREGIONAL_DELIVERY;
      end if;
      if Value = "CROSSREGIONAL_DELIVERY_RETURN" then
         return CROSSREGIONAL_DELIVERY_RETURN;
      end if;
      if Value = "DISPOSAL" then
         return DISPOSAL;
      end if;
      if Value = "SORTING_CENTER_STORAGE" then
         return SORTING_CENTER_STORAGE;
      end if;
      if Value = "EXPRESS_DELIVERY" then
         return EXPRESS_DELIVERY;
      end if;
      if Value = "FF_XDOC_SUPPLY_BOX" then
         return FF_XDOC_SUPPLY_BOX;
      end if;
      if Value = "FF_XDOC_SUPPLY_PALLET" then
         return FF_XDOC_SUPPLY_PALLET;
      end if;
      if Value = "SORTING" then
         return SORTING;
      end if;
      if Value = "MIDDLE_MILE" then
         return MIDDLE_MILE;
      end if;
      if Value = "RETURN_PROCESSING" then
         return RETURN_PROCESSING;
      end if;
      if Value = "EXPRESS_CANCELLED_BY_PARTNER" then
         return EXPRESS_CANCELLED_BY_PARTNER;
      end if;
      if Value = "DELIVERY_TO_CUSTOMER_RETURN" then
         return DELIVERY_TO_CUSTOMER_RETURN;
      end if;
      if Value = "CROSSBORDER_DELIVERY" then
         return CROSSBORDER_DELIVERY;
      end if;
      if Value = "INTAKE_SORTING_BULKY_CARGO" then
         return INTAKE_SORTING_BULKY_CARGO;
      end if;
      if Value = "INTAKE_SORTING_SMALL_GOODS" then
         return INTAKE_SORTING_SMALL_GOODS;
      end if;
      if Value = "INTAKE_SORTING_DAILY" then
         return INTAKE_SORTING_DAILY;
      end if;
      if Value = "FF_STORAGE_BILLING" then
         return FF_STORAGE_BILLING;
      end if;
      if Value = "CANCELLED_ORDER_FEE_QI" then
         return CANCELLED_ORDER_FEE_QI;
      end if;
      if Value = "LATE_ORDER_EXECUTION_FEE_QI" then
         return LATE_ORDER_EXECUTION_FEE_QI;
      end if;
      raise Constraint_Error;
   end To_TariffType_Type;

   function To_String (Value : in .Models.TariffType_Type) return String is
   begin
      case Value is
         when AGENCY_COMMISSION =>
            return "AGENCY_COMMISSION";

         when PAYMENT_TRANSFER =>
            return "PAYMENT_TRANSFER";

         when STORAGE =>
            return "STORAGE";

         when WITHDRAW =>
            return "WITHDRAW";

         when SURPLUS =>
            return "SURPLUS";

         when FEE =>
            return "FEE";

         when DELIVERY_TO_CUSTOMER =>
            return "DELIVERY_TO_CUSTOMER";

         when CROSSREGIONAL_DELIVERY =>
            return "CROSSREGIONAL_DELIVERY";

         when CROSSREGIONAL_DELIVERY_RETURN =>
            return "CROSSREGIONAL_DELIVERY_RETURN";

         when DISPOSAL =>
            return "DISPOSAL";

         when SORTING_CENTER_STORAGE =>
            return "SORTING_CENTER_STORAGE";

         when EXPRESS_DELIVERY =>
            return "EXPRESS_DELIVERY";

         when FF_XDOC_SUPPLY_BOX =>
            return "FF_XDOC_SUPPLY_BOX";

         when FF_XDOC_SUPPLY_PALLET =>
            return "FF_XDOC_SUPPLY_PALLET";

         when SORTING =>
            return "SORTING";

         when MIDDLE_MILE =>
            return "MIDDLE_MILE";

         when RETURN_PROCESSING =>
            return "RETURN_PROCESSING";

         when EXPRESS_CANCELLED_BY_PARTNER =>
            return "EXPRESS_CANCELLED_BY_PARTNER";

         when DELIVERY_TO_CUSTOMER_RETURN =>
            return "DELIVERY_TO_CUSTOMER_RETURN";

         when CROSSBORDER_DELIVERY =>
            return "CROSSBORDER_DELIVERY";

         when INTAKE_SORTING_BULKY_CARGO =>
            return "INTAKE_SORTING_BULKY_CARGO";

         when INTAKE_SORTING_SMALL_GOODS =>
            return "INTAKE_SORTING_SMALL_GOODS";

         when INTAKE_SORTING_DAILY =>
            return "INTAKE_SORTING_DAILY";

         when FF_STORAGE_BILLING =>
            return "FF_STORAGE_BILLING";

         when CANCELLED_ORDER_FEE_QI =>
            return "CANCELLED_ORDER_FEE_QI";

         when LATE_ORDER_EXECUTION_FEE_QI =>
            return "LATE_ORDER_EXECUTION_FEE_QI";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TariffType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TariffType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TariffType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TariffType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TariffType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TariffType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TimeUnitType_Type (Value : in String) return .Models.TimeUnitType_Type is
   begin
      if Value = "HOUR" then
         return HOUR;
      end if;
      if Value = "DAY" then
         return DAY;
      end if;
      if Value = "WEEK" then
         return WEEK;
      end if;
      if Value = "MONTH" then
         return MONTH;
      end if;
      if Value = "YEAR" then
         return YEAR;
      end if;
      raise Constraint_Error;
   end To_TimeUnitType_Type;

   function To_String (Value : in .Models.TimeUnitType_Type) return String is
   begin
      case Value is
         when HOUR =>
            return "HOUR";

         when DAY =>
            return "DAY";

         when WEEK =>
            return "WEEK";

         when MONTH =>
            return "MONTH";

         when YEAR =>
            return "YEAR";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TimeUnitType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TimeUnitType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TimeUnitType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TimeUnitType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TimeUnitType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TimeUnitType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TrackDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Track_Code.Is_Null then
         Into.Write_Entity ("trackCode", Value.Track_Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TrackDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TrackDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "trackCode", Value.Track_Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TrackDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TrackDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TransferOrdersFromShipmentRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "orderIds", Value.Order_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TransferOrdersFromShipmentRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TransferOrdersFromShipmentRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TransferOrdersFromShipmentRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TransferOrdersFromShipmentRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_TurnoverType_Type (Value : in String) return .Models.TurnoverType_Type is
   begin
      if Value = "LOW" then
         return LOW;
      end if;
      if Value = "ALMOST_LOW" then
         return ALMOST_LOW;
      end if;
      if Value = "HIGH" then
         return HIGH;
      end if;
      if Value = "VERY_HIGH" then
         return VERY_HIGH;
      end if;
      if Value = "NO_SALES" then
         return NO_SALES;
      end if;
      if Value = "FREE_STORE" then
         return FREE_STORE;
      end if;
      raise Constraint_Error;
   end To_TurnoverType_Type;

   function To_String (Value : in .Models.TurnoverType_Type) return String is
   begin
      case Value is
         when LOW =>
            return "LOW";

         when ALMOST_LOW =>
            return "ALMOST_LOW";

         when HIGH =>
            return "HIGH";

         when VERY_HIGH =>
            return "VERY_HIGH";

         when NO_SALES =>
            return "NO_SALES";

         when FREE_STORE =>
            return "FREE_STORE";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TurnoverType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TurnoverType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TurnoverType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_TurnoverType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TurnoverType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TurnoverType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UnitDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Entity ("fullName", Value.Full_Name);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UnitDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UnitDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UnitDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UnitDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateGoodsFeedbackCommentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parentId", Value.Parent_Id);
      end if;
      Into.Write_Entity ("text", Value.Text);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateGoodsFeedbackCommentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateGoodsFeedbackCommentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "parentId", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "text", Value.Text);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateGoodsFeedbackCommentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateGoodsFeedbackCommentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMappingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMappingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMappingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMappingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMappingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStorageLimitRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("newDate", Value.New_Date);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStorageLimitRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStorageLimitRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "newDate", Value.New_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStorageLimitRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStorageLimitRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePromoOfferDiscountParamsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Price.Is_Null then
         Into.Write_Entity ("price", Value.Price);
      end if;
      if not Value.Promo_Price.Is_Null then
         Into.Write_Entity ("promoPrice", Value.Promo_Price);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePromoOfferDiscountParamsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePromoOfferDiscountParamsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "promoPrice", Value.Promo_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePromoOfferDiscountParamsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePromoOfferDiscountParamsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateStockItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("count", Value.Count);
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updatedAt", Value.Updated_At);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateStockItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateStockItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateStockItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateStockItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateTimeDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("updatedAt", Value.Updated_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateTimeDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateTimeDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateTimeDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateTimeDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.VerifyOrderEacRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in VerifyOrderEacRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.VerifyOrderEacRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out VerifyOrderEacRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.VerifyOrderEacRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


   function To_WarehouseStockType_Type (Value : in String) return .Models.WarehouseStockType_Type is
   begin
      if Value = "FIT" then
         return FIT;
      end if;
      if Value = "FREEZE" then
         return FREEZE;
      end if;
      if Value = "AVAILABLE" then
         return AVAILABLE;
      end if;
      if Value = "QUARANTINE" then
         return QUARANTINE;
      end if;
      if Value = "UTILIZATION" then
         return UTILIZATION;
      end if;
      if Value = "DEFECT" then
         return DEFECT;
      end if;
      if Value = "EXPIRED" then
         return EXPIRED;
      end if;
      raise Constraint_Error;
   end To_WarehouseStockType_Type;

   function To_String (Value : in .Models.WarehouseStockType_Type) return String is
   begin
      case Value is
         when FIT =>
            return "FIT";

         when FREEZE =>
            return "FREEZE";

         when AVAILABLE =>
            return "AVAILABLE";

         when QUARANTINE =>
            return "QUARANTINE";

         when UTILIZATION =>
            return "UTILIZATION";

         when DEFECT =>
            return "DEFECT";

         when EXPIRED =>
            return "EXPIRED";

      end case;
   end To_String;
   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseStockType_Type) is
   begin
      Into.Write_Entity (Name, To_String (Value));   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseStockType_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseStockType_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Value := To_WarehouseStockType_Type (Swagger.To_String (Object));
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseStockType_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseStockType_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AcceptOrderCancellationRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("accepted", Value.Accepted);
      Serialize (Into, "reason", Value.Reason);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AcceptOrderCancellationRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AcceptOrderCancellationRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "accepted", Value.Accepted);
      Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AcceptOrderCancellationRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AcceptOrderCancellationRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AddHiddenOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "hiddenOffers", Value.Hidden_Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddHiddenOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AddHiddenOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "hiddenOffers", Value.Hidden_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AddHiddenOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AddHiddenOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AddOffersToArchiveErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "error", Value.Error);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddOffersToArchiveErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AddOffersToArchiveErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "error", Value.Error);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AddOffersToArchiveErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AddOffersToArchiveErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AddOffersToArchiveDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "notArchivedOffers", Value.Not_Archived_Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddOffersToArchiveDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AddOffersToArchiveDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "notArchivedOffers", Value.Not_Archived_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AddOffersToArchiveDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AddOffersToArchiveDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AgeDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "ageUnit", Value.Age_Unit);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AgeDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AgeDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "ageUnit", Value.Age_Unit);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AgeDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AgeDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BaseCampaignOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "quantum", Value.Quantum);
      if not Value.Available.Is_Null then
         Into.Write_Entity ("available", Value.Available);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BaseCampaignOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BaseCampaignOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "quantum", Value.Quantum);
      Swagger.Streams.Deserialize (Object, "available", Value.Available);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BaseCampaignOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BaseCampaignOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BasePriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "currencyId", Value.Currency_Id);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BasePriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BasePriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "currencyId", Value.Currency_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BasePriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BasePriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BusinessSettingsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Only_Default_Price.Is_Null then
         Into.Write_Entity ("onlyDefaultPrice", Value.Only_Default_Price);
      end if;
      Serialize (Into, "currency", Value.Currency);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BusinessSettingsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BusinessSettingsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "onlyDefaultPrice", Value.Only_Default_Price);
      Deserialize (Object, "currency", Value.Currency);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BusinessSettingsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BusinessSettingsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSettingsLocalRegionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "deliveryOptionsSource", Value.Delivery_Options_Source);
      Serialize (Into, "delivery", Value.Delivery);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSettingsLocalRegionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSettingsLocalRegionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "deliveryOptionsSource", Value.Delivery_Options_Source);
      Deserialize (Object, "delivery", Value.Delivery);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSettingsLocalRegionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSettingsLocalRegionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSettingsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Country_Region.Is_Null then
         Into.Write_Entity ("countryRegion", Value.Country_Region);
      end if;
      if not Value.Shop_Name.Is_Null then
         Into.Write_Entity ("shopName", Value.Shop_Name);
      end if;
      if not Value.Show_In_Context.Is_Null then
         Into.Write_Entity ("showInContext", Value.Show_In_Context);
      end if;
      if not Value.Show_In_Premium.Is_Null then
         Into.Write_Entity ("showInPremium", Value.Show_In_Premium);
      end if;
      if not Value.Use_Open_Stat.Is_Null then
         Into.Write_Entity ("useOpenStat", Value.Use_Open_Stat);
      end if;
      Serialize (Into, "localRegion", Value.Local_Region);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSettingsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSettingsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "countryRegion", Value.Country_Region);
      Swagger.Streams.Deserialize (Object, "shopName", Value.Shop_Name);
      Swagger.Streams.Deserialize (Object, "showInContext", Value.Show_In_Context);
      Swagger.Streams.Deserialize (Object, "showInPremium", Value.Show_In_Premium);
      Swagger.Streams.Deserialize (Object, "useOpenStat", Value.Use_Open_Stat);
      Deserialize (Object, "localRegion", Value.Local_Region);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSettingsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSettingsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSettingsScheduleDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Available_On_Holidays.Is_Null then
         Into.Write_Entity ("availableOnHolidays", Value.Available_On_Holidays);
      end if;
      Serialize (Into, "customHolidays", Value.Custom_Holidays);
      Serialize (Into, "customWorkingDays", Value.Custom_Working_Days);
      Serialize (Into, "period", Value.Period);
      Serialize (Into, "totalHolidays", Value.Total_Holidays);
      Serialize (Into, "weeklyHolidays", Value.Weekly_Holidays);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSettingsScheduleDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSettingsScheduleDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "availableOnHolidays", Value.Available_On_Holidays);
      Swagger.Streams.Deserialize (Object, "customHolidays", Value.Custom_Holidays);
      Swagger.Streams.Deserialize (Object, "customWorkingDays", Value.Custom_Working_Days);
      Deserialize (Object, "period", Value.Period);
      Swagger.Streams.Deserialize (Object, "totalHolidays", Value.Total_Holidays);
      Swagger.Streams.Deserialize (Object, "weeklyHolidays", Value.Weekly_Holidays);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSettingsScheduleDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSettingsScheduleDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignSettingsDeliveryDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "schedule", Value.Schedule);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignSettingsDeliveryDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignSettingsDeliveryDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "schedule", Value.Schedule);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignSettingsDeliveryDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignSettingsDeliveryDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignQualityRatingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Serialize (Into, "ratings", Value.Ratings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignQualityRatingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignQualityRatingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Deserialize (Object, "ratings", Value.Ratings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignQualityRatingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignQualityRatingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignsQualityRatingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "campaignRatings", Value.Campaign_Ratings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignsQualityRatingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignsQualityRatingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "campaignRatings", Value.Campaign_Ratings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignsQualityRatingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignsQualityRatingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryParameterDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "unit", Value.Unit);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "recommendationTypes", Value.Recommendation_Types);
      Into.Write_Entity ("required", Value.Required);
      Into.Write_Entity ("filtering", Value.Filtering);
      Into.Write_Entity ("distinctive", Value.Distinctive);
      Into.Write_Entity ("multivalue", Value.Multivalue);
      Into.Write_Entity ("allowCustomValues", Value.Allow_Custom_Values);
      Serialize (Into, "values", Value.Values);
      Serialize (Into, "constraints", Value.Constraints);
      Serialize (Into, "valueRestrictions", Value.Value_Restrictions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryParameterDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryParameterDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "unit", Value.Unit);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "recommendationTypes", Value.Recommendation_Types);
      Swagger.Streams.Deserialize (Object, "required", Value.Required);
      Swagger.Streams.Deserialize (Object, "filtering", Value.Filtering);
      Swagger.Streams.Deserialize (Object, "distinctive", Value.Distinctive);
      Swagger.Streams.Deserialize (Object, "multivalue", Value.Multivalue);
      Swagger.Streams.Deserialize (Object, "allowCustomValues", Value.Allow_Custom_Values);
      Deserialize (Object, "values", Value.Values);
      Deserialize (Object, "constraints", Value.Constraints);
      Deserialize (Object, "valueRestrictions", Value.Value_Restrictions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryParameterDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryParameterDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryContentParametersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("categoryId", Value.Category_Id);
      Serialize (Into, "parameters", Value.Parameters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryContentParametersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryContentParametersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
      Deserialize (Object, "parameters", Value.Parameters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryContentParametersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryContentParametersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "children", Value.Children);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "children", Value.Children);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Category_Id.Is_Null then
         Into.Write_Entity ("categoryId", Value.Category_Id);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
      Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CategoryParameterUnitDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("defaultUnitId", Value.Default_Unit_Id);
      Serialize (Into, "units", Value.Units);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CategoryParameterUnitDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CategoryParameterUnitDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "defaultUnitId", Value.Default_Unit_Id);
      Deserialize (Object, "units", Value.Units);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CategoryParameterUnitDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CategoryParameterUnitDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteHiddenOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "hiddenOffers", Value.Hidden_Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteHiddenOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteHiddenOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "hiddenOffers", Value.Hidden_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteHiddenOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteHiddenOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RejectedPromoOfferDeleteDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "reason", Value.Reason);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RejectedPromoOfferDeleteDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RejectedPromoOfferDeleteDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RejectedPromoOfferDeleteDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RejectedPromoOfferDeleteDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePromoOffersResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "rejectedOffers", Value.Rejected_Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePromoOffersResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePromoOffersResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "rejectedOffers", Value.Rejected_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePromoOffersResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePromoOffersResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeliveryServicesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "deliveryService", Value.Delivery_Service);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeliveryServicesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeliveryServicesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "deliveryService", Value.Delivery_Service);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeliveryServicesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeliveryServicesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DocumentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DocumentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DocumentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DocumentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DocumentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EacVerificationResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "verificationResult", Value.Verification_Result);
      if not Value.Attempts_Left.Is_Null then
         Into.Write_Entity ("attemptsLeft", Value.Attempts_Left);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EacVerificationResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EacVerificationResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "verificationResult", Value.Verification_Result);
      Swagger.Streams.Deserialize (Object, "attemptsLeft", Value.Attempts_Left);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EacVerificationResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EacVerificationResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EmptyApiResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmptyApiResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EmptyApiResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EmptyApiResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EmptyApiResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EnrichedModelDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "prices", Value.Prices);
      Serialize (Into, "offers", Value.Offers);
      if not Value.Offline_Offers.Is_Null then
         Into.Write_Entity ("offlineOffers", Value.Offline_Offers);
      end if;
      if not Value.Online_Offers.Is_Null then
         Into.Write_Entity ("onlineOffers", Value.Online_Offers);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EnrichedModelDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EnrichedModelDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "prices", Value.Prices);
      Deserialize (Object, "offers", Value.Offers);
      Swagger.Streams.Deserialize (Object, "offlineOffers", Value.Offline_Offers);
      Swagger.Streams.Deserialize (Object, "onlineOffers", Value.Online_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EnrichedModelDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EnrichedModelDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EnrichedModelsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "models", Value.Models);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EnrichedModelsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EnrichedModelsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "models", Value.Models);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EnrichedModelsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EnrichedModelsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBoxLayoutItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      if not Value.Full_Count.Is_Null then
         Into.Write_Entity ("fullCount", Value.Full_Count);
      end if;
      Serialize (Into, "partialCount", Value.Partial_Count);
      Serialize (Into, "instances", Value.Instances);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBoxLayoutItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBoxLayoutItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "fullCount", Value.Full_Count);
      Deserialize (Object, "partialCount", Value.Partial_Count);
      Deserialize (Object, "instances", Value.Instances);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBoxLayoutItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBoxLayoutItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EnrichedOrderBoxLayoutDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      if not Value.Box_Id.Is_Null then
         Into.Write_Entity ("boxId", Value.Box_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EnrichedOrderBoxLayoutDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EnrichedOrderBoxLayoutDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "boxId", Value.Box_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EnrichedOrderBoxLayoutDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EnrichedOrderBoxLayoutDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedContentErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedContentErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedContentErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedContentErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedContentErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedDownloadErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Http_Status_Code.Is_Null then
         Into.Write_Entity ("httpStatusCode", Value.Http_Status_Code);
      end if;
      Serialize (Into, "type", Value.P_Type);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedDownloadErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedDownloadErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "httpStatusCode", Value.Http_Status_Code);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedDownloadErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedDownloadErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Http_Status_Code.Is_Null then
         Into.Write_Entity ("httpStatusCode", Value.Http_Status_Code);
      end if;
      Serialize (Into, "type", Value.P_Type);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "httpStatusCode", Value.Http_Status_Code);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedPlacementDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      if not Value.Total_Offers_Count.Is_Null then
         Into.Write_Entity ("totalOffersCount", Value.Total_Offers_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedPlacementDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedPlacementDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "totalOffersCount", Value.Total_Offers_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedPlacementDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedPlacementDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RegionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "parent", Value.Parent);
      Serialize (Into, "children", Value.Children);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RegionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RegionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "parent", Value.Parent);
      Deserialize (Object, "children", Value.Children);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RegionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RegionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackAuthorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "region", Value.Region);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackAuthorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackAuthorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "region", Value.Region);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackAuthorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackAuthorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackCommentAuthorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackCommentAuthorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackCommentAuthorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackCommentAuthorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackCommentAuthorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackGradesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "average", Value.Average);
      if not Value.Agree_Count.Is_Null then
         Into.Write_Entity ("agreeCount", Value.Agree_Count);
      end if;
      if not Value.Reject_Count.Is_Null then
         Into.Write_Entity ("rejectCount", Value.Reject_Count);
      end if;
      Serialize (Into, "factors", Value.Factors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackGradesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackGradesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "average", Value.Average);
      Swagger.Streams.Deserialize (Object, "agreeCount", Value.Agree_Count);
      Swagger.Streams.Deserialize (Object, "rejectCount", Value.Reject_Count);
      Deserialize (Object, "factors", Value.Factors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackGradesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackGradesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackOrderDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shop_Order_Id.Is_Null then
         Into.Write_Entity ("shopOrderId", Value.Shop_Order_Id);
      end if;
      Serialize (Into, "delivery", Value.Delivery);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackOrderDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackOrderDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shopOrderId", Value.Shop_Order_Id);
      Deserialize (Object, "delivery", Value.Delivery);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackOrderDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackOrderDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseAddressDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("city", Value.City);
      if not Value.Street.Is_Null then
         Into.Write_Entity ("street", Value.Street);
      end if;
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Building.Is_Null then
         Into.Write_Entity ("building", Value.Building);
      end if;
      if not Value.Block.Is_Null then
         Into.Write_Entity ("block", Value.Block);
      end if;
      Serialize (Into, "gps", Value.Gps);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseAddressDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseAddressDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "street", Value.Street);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "building", Value.Building);
      Swagger.Streams.Deserialize (Object, "block", Value.Block);
      Deserialize (Object, "gps", Value.Gps);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseAddressDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseAddressDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FulfillmentWarehouseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "address", Value.Address);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FulfillmentWarehouseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FulfillmentWarehouseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FulfillmentWarehouseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FulfillmentWarehouseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FulfillmentWarehousesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "warehouses", Value.Warehouses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FulfillmentWarehousesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FulfillmentWarehousesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "warehouses", Value.Warehouses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FulfillmentWarehousesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FulfillmentWarehousesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateShelfsStatisticsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      Serialize (Into, "attributionType", Value.Attribution_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateShelfsStatisticsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateShelfsStatisticsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Deserialize (Object, "attributionType", Value.Attribution_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateShelfsStatisticsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateShelfsStatisticsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateShowsSalesReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Business_Id.Is_Null then
         Into.Write_Entity ("businessId", Value.Business_Id);
      end if;
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaignId", Value.Campaign_Id);
      end if;
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      Serialize (Into, "grouping", Value.Grouping);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateShowsSalesReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateShowsSalesReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Deserialize (Object, "grouping", Value.Grouping);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateShowsSalesReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateShowsSalesReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateUnitedMarketplaceServicesReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      if not Value.Date_Time_From.Is_Null then
         Into.Write_Entity ("dateTimeFrom", Value.Date_Time_From);
      end if;
      if not Value.Date_Time_To.Is_Null then
         Into.Write_Entity ("dateTimeTo", Value.Date_Time_To);
      end if;
      if not Value.Date_From.Is_Null then
         Into.Write_Entity ("dateFrom", Value.Date_From);
      end if;
      if not Value.Date_To.Is_Null then
         Into.Write_Entity ("dateTo", Value.Date_To);
      end if;
      if not Value.Year_From.Is_Null then
         Into.Write_Entity ("yearFrom", Value.Year_From);
      end if;
      if not Value.Month_From.Is_Null then
         Into.Write_Entity ("monthFrom", Value.Month_From);
      end if;
      if not Value.Year_To.Is_Null then
         Into.Write_Entity ("yearTo", Value.Year_To);
      end if;
      if not Value.Month_To.Is_Null then
         Into.Write_Entity ("monthTo", Value.Month_To);
      end if;
      Serialize (Into, "placementPrograms", Value.Placement_Programs);
      Serialize (Into, "inns", Value.Inns);
      Serialize (Into, "campaignIds", Value.Campaign_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateUnitedMarketplaceServicesReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateUnitedMarketplaceServicesReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "dateTimeFrom", Value.Date_Time_From);
      Swagger.Streams.Deserialize (Object, "dateTimeTo", Value.Date_Time_To);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Swagger.Streams.Deserialize (Object, "yearFrom", Value.Year_From);
      Swagger.Streams.Deserialize (Object, "monthFrom", Value.Month_From);
      Swagger.Streams.Deserialize (Object, "yearTo", Value.Year_To);
      Swagger.Streams.Deserialize (Object, "monthTo", Value.Month_To);
      Deserialize (Object, "placementPrograms", Value.Placement_Programs);
      Swagger.Streams.Deserialize (Object, "inns", Value.Inns);
      Swagger.Streams.Deserialize (Object, "campaignIds", Value.Campaign_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateUnitedMarketplaceServicesReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateUnitedMarketplaceServicesReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateUnitedNettingReportRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("businessId", Value.Business_Id);
      if not Value.Date_Time_From.Is_Null then
         Into.Write_Entity ("dateTimeFrom", Value.Date_Time_From);
      end if;
      if not Value.Date_Time_To.Is_Null then
         Into.Write_Entity ("dateTimeTo", Value.Date_Time_To);
      end if;
      if not Value.Date_From.Is_Null then
         Into.Write_Entity ("dateFrom", Value.Date_From);
      end if;
      if not Value.Date_To.Is_Null then
         Into.Write_Entity ("dateTo", Value.Date_To);
      end if;
      if not Value.Bank_Order_Id.Is_Null then
         Into.Write_Entity ("bankOrderId", Value.Bank_Order_Id);
      end if;
      if not Value.Bank_Order_Date_Time.Is_Null then
         Into.Write_Entity ("bankOrderDateTime", Value.Bank_Order_Date_Time);
      end if;
      Serialize (Into, "placementPrograms", Value.Placement_Programs);
      Serialize (Into, "inns", Value.Inns);
      Serialize (Into, "campaignIds", Value.Campaign_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateUnitedNettingReportRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateUnitedNettingReportRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "businessId", Value.Business_Id);
      Swagger.Streams.Deserialize (Object, "dateTimeFrom", Value.Date_Time_From);
      Swagger.Streams.Deserialize (Object, "dateTimeTo", Value.Date_Time_To);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Swagger.Streams.Deserialize (Object, "bankOrderId", Value.Bank_Order_Id);
      Swagger.Streams.Deserialize (Object, "bankOrderDateTime", Value.Bank_Order_Date_Time);
      Deserialize (Object, "placementPrograms", Value.Placement_Programs);
      Swagger.Streams.Deserialize (Object, "inns", Value.Inns);
      Swagger.Streams.Deserialize (Object, "campaignIds", Value.Campaign_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateUnitedNettingReportRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateUnitedNettingReportRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SkuBidRecommendationItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("sku", Value.Sku);
      Into.Write_Entity ("bid", Value.Bid);
      Serialize (Into, "bidRecommendations", Value.Bid_Recommendations);
      Serialize (Into, "priceRecommendations", Value.Price_Recommendations);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SkuBidRecommendationItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SkuBidRecommendationItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
      Deserialize (Object, "bidRecommendations", Value.Bid_Recommendations);
      Deserialize (Object, "priceRecommendations", Value.Price_Recommendations);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SkuBidRecommendationItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SkuBidRecommendationItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBidsRecommendationsResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "recommendations", Value.Recommendations);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBidsRecommendationsResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBidsRecommendationsResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "recommendations", Value.Recommendations);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBidsRecommendationsResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBidsRecommendationsResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Serialize (Into, "statuses", Value.Statuses);
      Serialize (Into, "categoryIds", Value.Category_Ids);
      Serialize (Into, "vendorNames", Value.Vendor_Names);
      Serialize (Into, "tags", Value.Tags);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
      Deserialize (Object, "statuses", Value.Statuses);
      Swagger.Streams.Deserialize (Object, "categoryIds", Value.Category_Ids);
      Swagger.Streams.Deserialize (Object, "vendorNames", Value.Vendor_Names);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignRegionResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "region", Value.Region);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignRegionResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignRegionResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "region", Value.Region);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignRegionResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignRegionResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CampaignDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Domain.Is_Null then
         Into.Write_Entity ("domain", Value.Domain);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Client_Id.Is_Null then
         Into.Write_Entity ("clientId", Value.Client_Id);
      end if;
      Serialize (Into, "business", Value.Business);
      Serialize (Into, "placementType", Value.Placement_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CampaignDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CampaignDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "domain", Value.Domain);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "clientId", Value.Client_Id);
      Deserialize (Object, "business", Value.Business);
      Deserialize (Object, "placementType", Value.Placement_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CampaignDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CampaignDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "campaign", Value.Campaign);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "campaign", Value.Campaign);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignSettingsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "settings", Value.Settings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignSettingsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignSettingsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "settings", Value.Settings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignSettingsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignSettingsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCategoriesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "language", Value.Language);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCategoriesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCategoriesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "language", Value.Language);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCategoriesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCategoriesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetDeliveryServicesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetDeliveryServicesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetDeliveryServicesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetDeliveryServicesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetDeliveryServicesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Login.Is_Null then
         Into.Write_Entity ("login", Value.Login);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Password.Is_Null then
         Into.Write_Entity ("password", Value.Password);
      end if;
      if not Value.Upload_Date.Is_Null then
         Into.Write_Entity ("uploadDate", Value.Upload_Date);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Serialize (Into, "content", Value.Content);
      Serialize (Into, "download", Value.Download);
      Serialize (Into, "placement", Value.Placement);
      Serialize (Into, "publication", Value.Publication);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "login", Value.Login);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "password", Value.Password);
      Swagger.Streams.Deserialize (Object, "uploadDate", Value.Upload_Date);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Deserialize (Object, "content", Value.Content);
      Deserialize (Object, "download", Value.Download);
      Deserialize (Object, "placement", Value.Placement);
      Deserialize (Object, "publication", Value.Publication);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetFeedResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "feed", Value.Feed);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetFeedResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetFeedResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "feed", Value.Feed);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetFeedResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetFeedResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetFeedsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "feeds", Value.Feeds);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetFeedsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetFeedsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "feeds", Value.Feeds);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetFeedsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetFeedsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetGoodsFeedbackRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Date_Time_From.Is_Null then
         Into.Write_Entity ("dateTimeFrom", Value.Date_Time_From);
      end if;
      if not Value.Date_Time_To.Is_Null then
         Into.Write_Entity ("dateTimeTo", Value.Date_Time_To);
      end if;
      Serialize (Into, "reactionStatus", Value.Reaction_Status);
      Serialize (Into, "ratingValues", Value.Rating_Values);
      Serialize (Into, "modelIds", Value.Model_Ids);
      if not Value.Paid.Is_Null then
         Into.Write_Entity ("paid", Value.Paid);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetGoodsFeedbackRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetGoodsFeedbackRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "dateTimeFrom", Value.Date_Time_From);
      Swagger.Streams.Deserialize (Object, "dateTimeTo", Value.Date_Time_To);
      Deserialize (Object, "reactionStatus", Value.Reaction_Status);
      Swagger.Streams.Deserialize (Object, "ratingValues", Value.Rating_Values);
      Swagger.Streams.Deserialize (Object, "modelIds", Value.Model_Ids);
      Swagger.Streams.Deserialize (Object, "paid", Value.Paid);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetGoodsFeedbackRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetGoodsFeedbackRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferCardsContentStatusRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Serialize (Into, "cardStatuses", Value.Card_Statuses);
      Serialize (Into, "categoryIds", Value.Category_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferCardsContentStatusRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferCardsContentStatusRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
      Deserialize (Object, "cardStatuses", Value.Card_Statuses);
      Swagger.Streams.Deserialize (Object, "categoryIds", Value.Category_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferCardsContentStatusRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferCardsContentStatusRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferMappingsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Serialize (Into, "cardStatuses", Value.Card_Statuses);
      Serialize (Into, "categoryIds", Value.Category_Ids);
      Serialize (Into, "vendorNames", Value.Vendor_Names);
      Serialize (Into, "tags", Value.Tags);
      if not Value.Archived.Is_Null then
         Into.Write_Entity ("archived", Value.Archived);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferMappingsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferMappingsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
      Deserialize (Object, "cardStatuses", Value.Card_Statuses);
      Swagger.Streams.Deserialize (Object, "categoryIds", Value.Category_Ids);
      Swagger.Streams.Deserialize (Object, "vendorNames", Value.Vendor_Names);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Swagger.Streams.Deserialize (Object, "archived", Value.Archived);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferMappingsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferMappingsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "type", Value.P_Type);
      if not Value.Service_Name.Is_Null then
         Into.Write_Entity ("serviceName", Value.Service_Name);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "deliveryPartnerType", Value.Delivery_Partner_Type);
      Serialize (Into, "courier", Value.Courier);
      Serialize (Into, "dates", Value.Dates);
      Serialize (Into, "region", Value.Region);
      Serialize (Into, "address", Value.Address);
      Serialize (Into, "vat", Value.Vat);
      if not Value.Delivery_Service_Id.Is_Null then
         Into.Write_Entity ("deliveryServiceId", Value.Delivery_Service_Id);
      end if;
      Serialize (Into, "liftType", Value.Lift_Type);
      Serialize (Into, "liftPrice", Value.Lift_Price);
      if not Value.Outlet_Code.Is_Null then
         Into.Write_Entity ("outletCode", Value.Outlet_Code);
      end if;
      if not Value.Outlet_Storage_Limit_Date.Is_Null then
         Into.Write_Entity ("outletStorageLimitDate", Value.Outlet_Storage_Limit_Date);
      end if;
      Serialize (Into, "dispatchType", Value.Dispatch_Type);
      Serialize (Into, "tracks", Value.Tracks);
      Serialize (Into, "shipments", Value.Shipments);
      if not Value.Estimated.Is_Null then
         Into.Write_Entity ("estimated", Value.Estimated);
      end if;
      Serialize (Into, "eacType", Value.Eac_Type);
      if not Value.Eac_Code.Is_Null then
         Into.Write_Entity ("eacCode", Value.Eac_Code);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "serviceName", Value.Service_Name);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Deserialize (Object, "deliveryPartnerType", Value.Delivery_Partner_Type);
      Deserialize (Object, "courier", Value.Courier);
      Deserialize (Object, "dates", Value.Dates);
      Deserialize (Object, "region", Value.Region);
      Deserialize (Object, "address", Value.Address);
      Deserialize (Object, "vat", Value.Vat);
      Swagger.Streams.Deserialize (Object, "deliveryServiceId", Value.Delivery_Service_Id);
      Deserialize (Object, "liftType", Value.Lift_Type);
      Swagger.Streams.Deserialize (Object, "liftPrice", Value.Lift_Price);
      Swagger.Streams.Deserialize (Object, "outletCode", Value.Outlet_Code);
      Swagger.Streams.Deserialize (Object, "outletStorageLimitDate", Value.Outlet_Storage_Limit_Date);
      Deserialize (Object, "dispatchType", Value.Dispatch_Type);
      Deserialize (Object, "tracks", Value.Tracks);
      Deserialize (Object, "shipments", Value.Shipments);
      Swagger.Streams.Deserialize (Object, "estimated", Value.Estimated);
      Deserialize (Object, "eacType", Value.Eac_Type);
      Swagger.Streams.Deserialize (Object, "eacCode", Value.Eac_Code);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "substatus", Value.Substatus);
      if not Value.Creation_Date.Is_Null then
         Into.Write_Entity ("creationDate", Value.Creation_Date);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updatedAt", Value.Updated_At);
      end if;
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "itemsTotal", Value.Items_Total);
      Serialize (Into, "deliveryTotal", Value.Delivery_Total);
      Serialize (Into, "buyerItemsTotal", Value.Buyer_Items_Total);
      Serialize (Into, "buyerTotal", Value.Buyer_Total);
      Serialize (Into, "buyerItemsTotalBeforeDiscount", Value.Buyer_Items_Total_Before_Discount);
      Serialize (Into, "buyerTotalBeforeDiscount", Value.Buyer_Total_Before_Discount);
      Serialize (Into, "paymentType", Value.Payment_Type);
      Serialize (Into, "paymentMethod", Value.Payment_Method);
      if not Value.Fake.Is_Null then
         Into.Write_Entity ("fake", Value.Fake);
      end if;
      Serialize (Into, "items", Value.Items);
      Serialize (Into, "subsidies", Value.Subsidies);
      Serialize (Into, "delivery", Value.Delivery);
      Serialize (Into, "buyer", Value.Buyer);
      if not Value.Notes.Is_Null then
         Into.Write_Entity ("notes", Value.Notes);
      end if;
      Serialize (Into, "taxSystem", Value.Tax_System);
      if not Value.Cancel_Requested.Is_Null then
         Into.Write_Entity ("cancelRequested", Value.Cancel_Requested);
      end if;
      if not Value.Expiry_Date.Is_Null then
         Into.Write_Entity ("expiryDate", Value.Expiry_Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "substatus", Value.Substatus);
      Swagger.Streams.Deserialize (Object, "creationDate", Value.Creation_Date);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "itemsTotal", Value.Items_Total);
      Swagger.Streams.Deserialize (Object, "deliveryTotal", Value.Delivery_Total);
      Swagger.Streams.Deserialize (Object, "buyerItemsTotal", Value.Buyer_Items_Total);
      Swagger.Streams.Deserialize (Object, "buyerTotal", Value.Buyer_Total);
      Swagger.Streams.Deserialize (Object, "buyerItemsTotalBeforeDiscount", Value.Buyer_Items_Total_Before_Discount);
      Swagger.Streams.Deserialize (Object, "buyerTotalBeforeDiscount", Value.Buyer_Total_Before_Discount);
      Deserialize (Object, "paymentType", Value.Payment_Type);
      Deserialize (Object, "paymentMethod", Value.Payment_Method);
      Swagger.Streams.Deserialize (Object, "fake", Value.Fake);
      Deserialize (Object, "items", Value.Items);
      Deserialize (Object, "subsidies", Value.Subsidies);
      Deserialize (Object, "delivery", Value.Delivery);
      Deserialize (Object, "buyer", Value.Buyer);
      Swagger.Streams.Deserialize (Object, "notes", Value.Notes);
      Deserialize (Object, "taxSystem", Value.Tax_System);
      Swagger.Streams.Deserialize (Object, "cancelRequested", Value.Cancel_Requested);
      Swagger.Streams.Deserialize (Object, "expiryDate", Value.Expiry_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOrderResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order", Value.Order);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOrderResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOrderResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order", Value.Order);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOrderResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOrderResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOrdersStatsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Date_From.Is_Null then
         Into.Write_Entity ("dateFrom", Value.Date_From);
      end if;
      if not Value.Date_To.Is_Null then
         Into.Write_Entity ("dateTo", Value.Date_To);
      end if;
      if not Value.Update_From.Is_Null then
         Into.Write_Entity ("updateFrom", Value.Update_From);
      end if;
      if not Value.Update_To.Is_Null then
         Into.Write_Entity ("updateTo", Value.Update_To);
      end if;
      Serialize (Into, "orders", Value.Orders);
      Serialize (Into, "statuses", Value.Statuses);
      if not Value.Has_Cis.Is_Null then
         Into.Write_Entity ("hasCis", Value.Has_Cis);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOrdersStatsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOrdersStatsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Swagger.Streams.Deserialize (Object, "updateFrom", Value.Update_From);
      Swagger.Streams.Deserialize (Object, "updateTo", Value.Update_To);
      Swagger.Streams.Deserialize (Object, "orders", Value.Orders);
      Deserialize (Object, "statuses", Value.Statuses);
      Swagger.Streams.Deserialize (Object, "hasCis", Value.Has_Cis);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOrdersStatsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOrdersStatsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FullOutletDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Coords.Is_Null then
         Into.Write_Entity ("coords", Value.Coords);
      end if;
      if not Value.Is_Main.Is_Null then
         Into.Write_Entity ("isMain", Value.Is_Main);
      end if;
      if not Value.Shop_Outlet_Code.Is_Null then
         Into.Write_Entity ("shopOutletCode", Value.Shop_Outlet_Code);
      end if;
      Serialize (Into, "visibility", Value.Visibility);
      Serialize (Into, "address", Value.Address);
      Serialize (Into, "phones", Value.Phones);
      Serialize (Into, "workingSchedule", Value.Working_Schedule);
      Serialize (Into, "deliveryRules", Value.Delivery_Rules);
      if not Value.Storage_Period.Is_Null then
         Into.Write_Entity ("storagePeriod", Value.Storage_Period);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "region", Value.Region);
      if not Value.Shop_Outlet_Id.Is_Null then
         Into.Write_Entity ("shopOutletId", Value.Shop_Outlet_Id);
      end if;
      if not Value.Working_Time.Is_Null then
         Into.Write_Entity ("workingTime", Value.Working_Time);
      end if;
      if not Value.Moderation_Reason.Is_Null then
         Into.Write_Entity ("moderationReason", Value.Moderation_Reason);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FullOutletDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FullOutletDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "coords", Value.Coords);
      Swagger.Streams.Deserialize (Object, "isMain", Value.Is_Main);
      Swagger.Streams.Deserialize (Object, "shopOutletCode", Value.Shop_Outlet_Code);
      Deserialize (Object, "visibility", Value.Visibility);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "phones", Value.Phones);
      Deserialize (Object, "workingSchedule", Value.Working_Schedule);
      Deserialize (Object, "deliveryRules", Value.Delivery_Rules);
      Swagger.Streams.Deserialize (Object, "storagePeriod", Value.Storage_Period);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "region", Value.Region);
      Swagger.Streams.Deserialize (Object, "shopOutletId", Value.Shop_Outlet_Id);
      Swagger.Streams.Deserialize (Object, "workingTime", Value.Working_Time);
      Swagger.Streams.Deserialize (Object, "moderationReason", Value.Moderation_Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FullOutletDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FullOutletDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOutletResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "outlet", Value.Outlet);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOutletResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOutletResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "outlet", Value.Outlet);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOutletResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOutletResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "currencyId", Value.Currency_Id);
      Into.Write_Entity ("updatedAt", Value.Updated_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "currencyId", Value.Currency_Id);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPriceWithDiscountDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "currencyId", Value.Currency_Id);
      Serialize (Into, "discountBase", Value.Discount_Base);
      Into.Write_Entity ("updatedAt", Value.Updated_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPriceWithDiscountDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPriceWithDiscountDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "currencyId", Value.Currency_Id);
      Swagger.Streams.Deserialize (Object, "discountBase", Value.Discount_Base);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPriceWithDiscountDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPriceWithDiscountDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPriceWithVatDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "discountBase", Value.Discount_Base);
      Serialize (Into, "currencyId", Value.Currency_Id);
      if not Value.Vat.Is_Null then
         Into.Write_Entity ("vat", Value.Vat);
      end if;
      Into.Write_Entity ("updatedAt", Value.Updated_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPriceWithVatDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPriceWithVatDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "discountBase", Value.Discount_Base);
      Deserialize (Object, "currencyId", Value.Currency_Id);
      Swagger.Streams.Deserialize (Object, "vat", Value.Vat);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPriceWithVatDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPriceWithVatDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("promoId", Value.Promo_Id);
      Serialize (Into, "statusType", Value.Status_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "promoId", Value.Promo_Id);
      Deserialize (Object, "statusType", Value.Status_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "period", Value.Period);
      Into.Write_Entity ("participating", Value.Participating);
      Serialize (Into, "assortmentInfo", Value.Assortment_Info);
      Serialize (Into, "mechanicsInfo", Value.Mechanics_Info);
      Serialize (Into, "bestsellerInfo", Value.Bestseller_Info);
      Serialize (Into, "channels", Value.Channels);
      Serialize (Into, "constraints", Value.Constraints);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "period", Value.Period);
      Swagger.Streams.Deserialize (Object, "participating", Value.Participating);
      Deserialize (Object, "assortmentInfo", Value.Assortment_Info);
      Deserialize (Object, "mechanicsInfo", Value.Mechanics_Info);
      Deserialize (Object, "bestsellerInfo", Value.Bestseller_Info);
      Deserialize (Object, "channels", Value.Channels);
      Deserialize (Object, "constraints", Value.Constraints);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromosResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "promos", Value.Promos);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromosResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromosResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "promos", Value.Promos);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromosResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromosResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetQuarantineOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Serialize (Into, "cardStatuses", Value.Card_Statuses);
      Serialize (Into, "categoryIds", Value.Category_Ids);
      Serialize (Into, "vendorNames", Value.Vendor_Names);
      Serialize (Into, "tags", Value.Tags);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetQuarantineOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetQuarantineOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
      Deserialize (Object, "cardStatuses", Value.Card_Statuses);
      Swagger.Streams.Deserialize (Object, "categoryIds", Value.Category_Ids);
      Swagger.Streams.Deserialize (Object, "vendorNames", Value.Vendor_Names);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetQuarantineOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetQuarantineOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MappingsOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Feed_Id.Is_Null then
         Into.Write_Entity ("feedId", Value.Feed_Id);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      Serialize (Into, "urls", Value.Urls);
      Serialize (Into, "pictures", Value.Pictures);
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      if not Value.Min_Shipment.Is_Null then
         Into.Write_Entity ("minShipment", Value.Min_Shipment);
      end if;
      if not Value.Transport_Unit_Size.Is_Null then
         Into.Write_Entity ("transportUnitSize", Value.Transport_Unit_Size);
      end if;
      if not Value.Quantum_Of_Supply.Is_Null then
         Into.Write_Entity ("quantumOfSupply", Value.Quantum_Of_Supply);
      end if;
      if not Value.Delivery_Duration_Days.Is_Null then
         Into.Write_Entity ("deliveryDurationDays", Value.Delivery_Duration_Days);
      end if;
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      Serialize (Into, "supplyScheduleDays", Value.Supply_Schedule_Days);
      if not Value.Shelf_Life_Days.Is_Null then
         Into.Write_Entity ("shelfLifeDays", Value.Shelf_Life_Days);
      end if;
      if not Value.Life_Time_Days.Is_Null then
         Into.Write_Entity ("lifeTimeDays", Value.Life_Time_Days);
      end if;
      if not Value.Guarantee_Period_Days.Is_Null then
         Into.Write_Entity ("guaranteePeriodDays", Value.Guarantee_Period_Days);
      end if;
      Serialize (Into, "processingState", Value.Processing_State);
      Serialize (Into, "availability", Value.Availability);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Certificate.Is_Null then
         Into.Write_Entity ("certificate", Value.Certificate);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MappingsOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MappingsOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "feedId", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "urls", Value.Urls);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Swagger.Streams.Deserialize (Object, "minShipment", Value.Min_Shipment);
      Swagger.Streams.Deserialize (Object, "transportUnitSize", Value.Transport_Unit_Size);
      Swagger.Streams.Deserialize (Object, "quantumOfSupply", Value.Quantum_Of_Supply);
      Swagger.Streams.Deserialize (Object, "deliveryDurationDays", Value.Delivery_Duration_Days);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Swagger.Streams.Deserialize (Object, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Deserialize (Object, "supplyScheduleDays", Value.Supply_Schedule_Days);
      Swagger.Streams.Deserialize (Object, "shelfLifeDays", Value.Shelf_Life_Days);
      Swagger.Streams.Deserialize (Object, "lifeTimeDays", Value.Life_Time_Days);
      Swagger.Streams.Deserialize (Object, "guaranteePeriodDays", Value.Guarantee_Period_Days);
      Deserialize (Object, "processingState", Value.Processing_State);
      Deserialize (Object, "availability", Value.Availability);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "certificate", Value.Certificate);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MappingsOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MappingsOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetSuggestedOfferMappingEntriesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetSuggestedOfferMappingEntriesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetSuggestedOfferMappingEntriesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetSuggestedOfferMappingEntriesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetSuggestedOfferMappingEntriesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SuggestedOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      Serialize (Into, "basicPrice", Value.Basic_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuggestedOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SuggestedOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Deserialize (Object, "basicPrice", Value.Basic_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SuggestedOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SuggestedOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetSuggestedOfferMappingsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetSuggestedOfferMappingsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetSuggestedOfferMappingsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetSuggestedOfferMappingsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetSuggestedOfferMappingsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SuggestedOfferMappingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offer", Value.Offer);
      Serialize (Into, "mapping", Value.Mapping);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuggestedOfferMappingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SuggestedOfferMappingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offer", Value.Offer);
      Deserialize (Object, "mapping", Value.Mapping);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SuggestedOfferMappingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SuggestedOfferMappingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetSuggestedOfferMappingsResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetSuggestedOfferMappingsResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetSuggestedOfferMappingsResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetSuggestedOfferMappingsResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetSuggestedOfferMappingsResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentAuthorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentAuthorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentAuthorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentAuthorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentAuthorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsStatsGoodsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Category_Id.Is_Null then
         Into.Write_Entity ("categoryId", Value.Category_Id);
      end if;
      if not Value.Category_Name.Is_Null then
         Into.Write_Entity ("categoryName", Value.Category_Name);
      end if;
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      Serialize (Into, "warehouses", Value.Warehouses);
      Serialize (Into, "tariffs", Value.Tariffs);
      Serialize (Into, "pictures", Value.Pictures);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsStatsGoodsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsStatsGoodsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
      Swagger.Streams.Deserialize (Object, "categoryName", Value.Category_Name);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Deserialize (Object, "warehouses", Value.Warehouses);
      Deserialize (Object, "tariffs", Value.Tariffs);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsStatsGoodsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsStatsGoodsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsStatsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "shopSkus", Value.Shop_Skus);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsStatsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsStatsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "shopSkus", Value.Shop_Skus);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsStatsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsStatsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseStockDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Into.Write_Long_Entity ("count", Value.Count);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseStockDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseStockDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseStockDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseStockDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsStatsWarehouseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "stocks", Value.Stocks);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsStatsWarehouseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsStatsWarehouseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "stocks", Value.Stocks);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsStatsWarehouseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsStatsWarehouseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "prices", Value.Prices);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "prices", Value.Prices);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ModelsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "models", Value.Models);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ModelsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ModelsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "models", Value.Models);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ModelsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ModelsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCampaignStatusDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCampaignStatusDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCampaignStatusDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCampaignStatusDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCampaignStatusDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCardRecommendationDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Percent.Is_Null then
         Into.Write_Entity ("percent", Value.Percent);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCardRecommendationDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCardRecommendationDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "percent", Value.Percent);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCardRecommendationDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCardRecommendationDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferContentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Into.Write_Entity ("categoryId", Value.Category_Id);
      Serialize (Into, "parameterValues", Value.Parameter_Values);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferContentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferContentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "categoryId", Value.Category_Id);
      Deserialize (Object, "parameterValues", Value.Parameter_Values);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferContentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferContentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferContentErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Parameter_Id.Is_Null then
         Into.Write_Entity ("parameterId", Value.Parameter_Id);
      end if;
      Into.Write_Entity ("message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferContentErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferContentErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "parameterId", Value.Parameter_Id);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferContentErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferContentErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "price", Value.Price);
      if not Value.Feed_Id.Is_Null then
         Into.Write_Entity ("feedId", Value.Feed_Id);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Shop_Category_Id.Is_Null then
         Into.Write_Entity ("shopCategoryId", Value.Shop_Category_Id);
      end if;
      if not Value.Market_Category_Id.Is_Null then
         Into.Write_Entity ("marketCategoryId", Value.Market_Category_Id);
      end if;
      Serialize (Into, "preDiscountPrice", Value.Pre_Discount_Price);
      if not Value.Discount.Is_Null then
         Into.Write_Entity ("discount", Value.Discount);
      end if;
      if not Value.Cut_Price.Is_Null then
         Into.Write_Entity ("cutPrice", Value.Cut_Price);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Into.Write_Long_Entity ("modelId", Value.Model_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "currency", Value.Currency);
      Serialize (Into, "bid", Value.Bid);
      Serialize (Into, "cbid", Value.Cbid);
      Serialize (Into, "fee", Value.Fee);
      if not Value.Blocked.Is_Null then
         Into.Write_Entity ("blocked", Value.Blocked);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "feedId", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "shopCategoryId", Value.Shop_Category_Id);
      Swagger.Streams.Deserialize (Object, "marketCategoryId", Value.Market_Category_Id);
      Swagger.Streams.Deserialize (Object, "preDiscountPrice", Value.Pre_Discount_Price);
      Swagger.Streams.Deserialize (Object, "discount", Value.Discount);
      Swagger.Streams.Deserialize (Object, "cutPrice", Value.Cut_Price);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "modelId", Value.Model_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "bid", Value.Bid);
      Swagger.Streams.Deserialize (Object, "cbid", Value.Cbid);
      Swagger.Streams.Deserialize (Object, "fee", Value.Fee);
      Swagger.Streams.Deserialize (Object, "blocked", Value.Blocked);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetAllOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetAllOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetAllOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetAllOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetAllOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingErrorDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Parameter_Id.Is_Null then
         Into.Write_Entity ("parameterId", Value.Parameter_Id);
      end if;
      Into.Write_Entity ("message", Value.Message);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingErrorDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingErrorDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "parameterId", Value.Parameter_Id);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingErrorDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingErrorDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "mapping", Value.Mapping);
      Serialize (Into, "awaitingModerationMapping", Value.Awaiting_Moderation_Mapping);
      Serialize (Into, "rejectedMapping", Value.Rejected_Mapping);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "mapping", Value.Mapping);
      Deserialize (Object, "awaitingModerationMapping", Value.Awaiting_Moderation_Mapping);
      Deserialize (Object, "rejectedMapping", Value.Rejected_Mapping);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EnrichedMappingsOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Feed_Id.Is_Null then
         Into.Write_Entity ("feedId", Value.Feed_Id);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      Serialize (Into, "urls", Value.Urls);
      Serialize (Into, "pictures", Value.Pictures);
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      if not Value.Min_Shipment.Is_Null then
         Into.Write_Entity ("minShipment", Value.Min_Shipment);
      end if;
      if not Value.Transport_Unit_Size.Is_Null then
         Into.Write_Entity ("transportUnitSize", Value.Transport_Unit_Size);
      end if;
      if not Value.Quantum_Of_Supply.Is_Null then
         Into.Write_Entity ("quantumOfSupply", Value.Quantum_Of_Supply);
      end if;
      if not Value.Delivery_Duration_Days.Is_Null then
         Into.Write_Entity ("deliveryDurationDays", Value.Delivery_Duration_Days);
      end if;
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      Serialize (Into, "supplyScheduleDays", Value.Supply_Schedule_Days);
      if not Value.Shelf_Life_Days.Is_Null then
         Into.Write_Entity ("shelfLifeDays", Value.Shelf_Life_Days);
      end if;
      if not Value.Life_Time_Days.Is_Null then
         Into.Write_Entity ("lifeTimeDays", Value.Life_Time_Days);
      end if;
      if not Value.Guarantee_Period_Days.Is_Null then
         Into.Write_Entity ("guaranteePeriodDays", Value.Guarantee_Period_Days);
      end if;
      Serialize (Into, "processingState", Value.Processing_State);
      Serialize (Into, "availability", Value.Availability);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Certificate.Is_Null then
         Into.Write_Entity ("certificate", Value.Certificate);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Market_Category_Id.Is_Null then
         Into.Write_Entity ("marketCategoryId", Value.Market_Category_Id);
      end if;
      if not Value.Market_Category_Name.Is_Null then
         Into.Write_Entity ("marketCategoryName", Value.Market_Category_Name);
      end if;
      if not Value.Market_Model_Id.Is_Null then
         Into.Write_Entity ("marketModelId", Value.Market_Model_Id);
      end if;
      if not Value.Market_Model_Name.Is_Null then
         Into.Write_Entity ("marketModelName", Value.Market_Model_Name);
      end if;
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Market_Sku_Name.Is_Null then
         Into.Write_Entity ("marketSkuName", Value.Market_Sku_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EnrichedMappingsOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EnrichedMappingsOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "feedId", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "urls", Value.Urls);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Swagger.Streams.Deserialize (Object, "minShipment", Value.Min_Shipment);
      Swagger.Streams.Deserialize (Object, "transportUnitSize", Value.Transport_Unit_Size);
      Swagger.Streams.Deserialize (Object, "quantumOfSupply", Value.Quantum_Of_Supply);
      Swagger.Streams.Deserialize (Object, "deliveryDurationDays", Value.Delivery_Duration_Days);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Swagger.Streams.Deserialize (Object, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Deserialize (Object, "supplyScheduleDays", Value.Supply_Schedule_Days);
      Swagger.Streams.Deserialize (Object, "shelfLifeDays", Value.Shelf_Life_Days);
      Swagger.Streams.Deserialize (Object, "lifeTimeDays", Value.Life_Time_Days);
      Swagger.Streams.Deserialize (Object, "guaranteePeriodDays", Value.Guarantee_Period_Days);
      Deserialize (Object, "processingState", Value.Processing_State);
      Deserialize (Object, "availability", Value.Availability);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "certificate", Value.Certificate);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "marketCategoryId", Value.Market_Category_Id);
      Swagger.Streams.Deserialize (Object, "marketCategoryName", Value.Market_Category_Name);
      Swagger.Streams.Deserialize (Object, "marketModelId", Value.Market_Model_Id);
      Swagger.Streams.Deserialize (Object, "marketModelName", Value.Market_Model_Name);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "marketSkuName", Value.Market_Sku_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EnrichedMappingsOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EnrichedMappingsOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingSuggestionsListDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingSuggestionsListDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingSuggestionsListDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingSuggestionsListDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingSuggestionsListDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "discountBase", Value.Discount_Base);
      Serialize (Into, "currencyId", Value.Currency_Id);
      if not Value.Vat.Is_Null then
         Into.Write_Entity ("vat", Value.Vat);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "discountBase", Value.Discount_Base);
      Deserialize (Object, "currencyId", Value.Currency_Id);
      Swagger.Streams.Deserialize (Object, "vat", Value.Vat);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferPriceByOfferIdsResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updatedAt", Value.Updated_At);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferPriceByOfferIdsResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferPriceByOfferIdsResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferPriceByOfferIdsResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferPriceByOfferIdsResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferPriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferPriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferPriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferPriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferPriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferPriceResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updatedAt", Value.Updated_At);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferPriceResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferPriceResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferPriceResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferPriceResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferProcessingNoteDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Payload.Is_Null then
         Into.Write_Entity ("payload", Value.Payload);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferProcessingNoteDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferProcessingNoteDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferProcessingNoteDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferProcessingNoteDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OffersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OffersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OffersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OffersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OffersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBoxLayoutDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBoxLayoutDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBoxLayoutDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBoxLayoutDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBoxLayoutDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBoxesLayoutDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "boxes", Value.Boxes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBoxesLayoutDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBoxesLayoutDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "boxes", Value.Boxes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBoxesLayoutDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBoxesLayoutDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBusinessDocumentsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "upd", Value.Upd);
      Serialize (Into, "ukd", Value.Ukd);
      Serialize (Into, "torgTwelve", Value.Torg_Twelve);
      Serialize (Into, "sf", Value.Sf);
      Serialize (Into, "ksf", Value.Ksf);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBusinessDocumentsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBusinessDocumentsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "upd", Value.Upd);
      Deserialize (Object, "ukd", Value.Ukd);
      Deserialize (Object, "torgTwelve", Value.Torg_Twelve);
      Deserialize (Object, "sf", Value.Sf);
      Deserialize (Object, "ksf", Value.Ksf);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBusinessDocumentsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBusinessDocumentsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBuyerBasicInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("lastName", Value.Last_Name);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("firstName", Value.First_Name);
      end if;
      if not Value.Middle_Name.Is_Null then
         Into.Write_Entity ("middleName", Value.Middle_Name);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBuyerBasicInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBuyerBasicInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "lastName", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "firstName", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "middleName", Value.Middle_Name);
      Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBuyerBasicInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBuyerBasicInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBuyerDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("lastName", Value.Last_Name);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("firstName", Value.First_Name);
      end if;
      if not Value.Middle_Name.Is_Null then
         Into.Write_Entity ("middleName", Value.Middle_Name);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBuyerDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBuyerDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "lastName", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "firstName", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "middleName", Value.Middle_Name);
      Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBuyerDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBuyerDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderBuyerInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("lastName", Value.Last_Name);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("firstName", Value.First_Name);
      end if;
      if not Value.Middle_Name.Is_Null then
         Into.Write_Entity ("middleName", Value.Middle_Name);
      end if;
      Serialize (Into, "type", Value.P_Type);
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderBuyerInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderBuyerInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "lastName", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "firstName", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "middleName", Value.Middle_Name);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderBuyerInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderBuyerInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderDeliveryAddressDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Country.Is_Null then
         Into.Write_Entity ("country", Value.Country);
      end if;
      if not Value.Postcode.Is_Null then
         Into.Write_Entity ("postcode", Value.Postcode);
      end if;
      if not Value.City.Is_Null then
         Into.Write_Entity ("city", Value.City);
      end if;
      if not Value.District.Is_Null then
         Into.Write_Entity ("district", Value.District);
      end if;
      if not Value.Subway.Is_Null then
         Into.Write_Entity ("subway", Value.Subway);
      end if;
      if not Value.Street.Is_Null then
         Into.Write_Entity ("street", Value.Street);
      end if;
      if not Value.House.Is_Null then
         Into.Write_Entity ("house", Value.House);
      end if;
      if not Value.Block.Is_Null then
         Into.Write_Entity ("block", Value.Block);
      end if;
      if not Value.Entrance.Is_Null then
         Into.Write_Entity ("entrance", Value.Entrance);
      end if;
      if not Value.Entryphone.Is_Null then
         Into.Write_Entity ("entryphone", Value.Entryphone);
      end if;
      if not Value.Floor.Is_Null then
         Into.Write_Entity ("floor", Value.Floor);
      end if;
      if not Value.Apartment.Is_Null then
         Into.Write_Entity ("apartment", Value.Apartment);
      end if;
      if not Value.Phone.Is_Null then
         Into.Write_Entity ("phone", Value.Phone);
      end if;
      if not Value.Recipient.Is_Null then
         Into.Write_Entity ("recipient", Value.Recipient);
      end if;
      Serialize (Into, "gps", Value.Gps);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderDeliveryAddressDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderDeliveryAddressDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "country", Value.Country);
      Swagger.Streams.Deserialize (Object, "postcode", Value.Postcode);
      Swagger.Streams.Deserialize (Object, "city", Value.City);
      Swagger.Streams.Deserialize (Object, "district", Value.District);
      Swagger.Streams.Deserialize (Object, "subway", Value.Subway);
      Swagger.Streams.Deserialize (Object, "street", Value.Street);
      Swagger.Streams.Deserialize (Object, "house", Value.House);
      Swagger.Streams.Deserialize (Object, "block", Value.Block);
      Swagger.Streams.Deserialize (Object, "entrance", Value.Entrance);
      Swagger.Streams.Deserialize (Object, "entryphone", Value.Entryphone);
      Swagger.Streams.Deserialize (Object, "floor", Value.Floor);
      Swagger.Streams.Deserialize (Object, "apartment", Value.Apartment);
      Swagger.Streams.Deserialize (Object, "phone", Value.Phone);
      Swagger.Streams.Deserialize (Object, "recipient", Value.Recipient);
      Deserialize (Object, "gps", Value.Gps);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderDeliveryAddressDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderDeliveryAddressDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemDetailDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Item_Count.Is_Null then
         Into.Write_Entity ("itemCount", Value.Item_Count);
      end if;
      Serialize (Into, "itemStatus", Value.Item_Status);
      if not Value.Update_Date.Is_Null then
         Into.Write_Entity ("updateDate", Value.Update_Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemDetailDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemDetailDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "itemCount", Value.Item_Count);
      Deserialize (Object, "itemStatus", Value.Item_Status);
      Swagger.Streams.Deserialize (Object, "updateDate", Value.Update_Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemDetailDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemDetailDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemInstanceModificationDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Serialize (Into, "instances", Value.Instances);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemInstanceModificationDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemInstanceModificationDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "instances", Value.Instances);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemInstanceModificationDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemInstanceModificationDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemModificationDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("count", Value.Count);
      Serialize (Into, "instances", Value.Instances);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemModificationDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemModificationDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Deserialize (Object, "instances", Value.Instances);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemModificationDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemModificationDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemPromoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "discount", Value.Discount);
      Serialize (Into, "subsidy", Value.Subsidy);
      if not Value.Shop_Promo_Id.Is_Null then
         Into.Write_Entity ("shopPromoId", Value.Shop_Promo_Id);
      end if;
      if not Value.Market_Promo_Id.Is_Null then
         Into.Write_Entity ("marketPromoId", Value.Market_Promo_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemPromoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemPromoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "discount", Value.Discount);
      Swagger.Streams.Deserialize (Object, "subsidy", Value.Subsidy);
      Swagger.Streams.Deserialize (Object, "shopPromoId", Value.Shop_Promo_Id);
      Swagger.Streams.Deserialize (Object, "marketPromoId", Value.Market_Promo_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemPromoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemPromoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemSubsidyDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "amount", Value.Amount);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemSubsidyDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemSubsidyDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemSubsidyDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemSubsidyDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BriefOrderItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "vat", Value.Vat);
      if not Value.Count.Is_Null then
         Into.Write_Entity ("count", Value.Count);
      end if;
      Serialize (Into, "price", Value.Price);
      if not Value.Offer_Name.Is_Null then
         Into.Write_Entity ("offerName", Value.Offer_Name);
      end if;
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "instances", Value.Instances);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BriefOrderItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BriefOrderItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "vat", Value.Vat);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "offerName", Value.Offer_Name);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "instances", Value.Instances);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BriefOrderItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BriefOrderItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemsModificationResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemsModificationResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemsModificationResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemsModificationResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemsModificationResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderLabelDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Into.Write_Entity ("placesNumber", Value.Places_Number);
      Into.Write_Entity ("url", Value.Url);
      Serialize (Into, "parcelBoxLabels", Value.Parcel_Box_Labels);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderLabelDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderLabelDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "placesNumber", Value.Places_Number);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Deserialize (Object, "parcelBoxLabels", Value.Parcel_Box_Labels);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderLabelDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderLabelDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusChangeDeliveryDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "dates", Value.Dates);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusChangeDeliveryDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusChangeDeliveryDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "dates", Value.Dates);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusChangeDeliveryDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusChangeDeliveryDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderSubsidyDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "amount", Value.Amount);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderSubsidyDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderSubsidyDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderSubsidyDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderSubsidyDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsCommissionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "actual", Value.Actual);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsCommissionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsCommissionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "actual", Value.Actual);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsCommissionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsCommissionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsPriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "costPerItem", Value.Cost_Per_Item);
      Serialize (Into, "total", Value.Total);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsPriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsPriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "costPerItem", Value.Cost_Per_Item);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsPriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsPriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletLicenseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Outlet_Id.Is_Null then
         Into.Write_Entity ("outletId", Value.Outlet_Id);
      end if;
      Serialize (Into, "licenseType", Value.License_Type);
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Date_Of_Issue.Is_Null then
         Into.Write_Entity ("dateOfIssue", Value.Date_Of_Issue);
      end if;
      if not Value.Date_Of_Expiry.Is_Null then
         Into.Write_Entity ("dateOfExpiry", Value.Date_Of_Expiry);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletLicenseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletLicenseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "outletId", Value.Outlet_Id);
      Deserialize (Object, "licenseType", Value.License_Type);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "dateOfIssue", Value.Date_Of_Issue);
      Swagger.Streams.Deserialize (Object, "dateOfExpiry", Value.Date_Of_Expiry);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletLicenseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletLicenseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FullOutletLicenseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Outlet_Id.Is_Null then
         Into.Write_Entity ("outletId", Value.Outlet_Id);
      end if;
      Serialize (Into, "licenseType", Value.License_Type);
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Date_Of_Issue.Is_Null then
         Into.Write_Entity ("dateOfIssue", Value.Date_Of_Issue);
      end if;
      if not Value.Date_Of_Expiry.Is_Null then
         Into.Write_Entity ("dateOfExpiry", Value.Date_Of_Expiry);
      end if;
      Serialize (Into, "checkStatus", Value.Check_Status);
      if not Value.Check_Comment.Is_Null then
         Into.Write_Entity ("checkComment", Value.Check_Comment);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FullOutletLicenseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FullOutletLicenseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "outletId", Value.Outlet_Id);
      Deserialize (Object, "licenseType", Value.License_Type);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "dateOfIssue", Value.Date_Of_Issue);
      Swagger.Streams.Deserialize (Object, "dateOfExpiry", Value.Date_Of_Expiry);
      Deserialize (Object, "checkStatus", Value.Check_Status);
      Swagger.Streams.Deserialize (Object, "checkComment", Value.Check_Comment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FullOutletLicenseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FullOutletLicenseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletLicensesResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "licenses", Value.Licenses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletLicensesResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletLicensesResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "licenses", Value.Licenses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletLicensesResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletLicensesResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletWorkingScheduleItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "startDay", Value.Start_Day);
      Serialize (Into, "endDay", Value.End_Day);
      Into.Write_Entity ("startTime", Value.Start_Time);
      Into.Write_Entity ("endTime", Value.End_Time);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletWorkingScheduleItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletWorkingScheduleItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "startDay", Value.Start_Day);
      Deserialize (Object, "endDay", Value.End_Day);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "endTime", Value.End_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletWorkingScheduleItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletWorkingScheduleItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletWorkingScheduleDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Work_In_Holiday.Is_Null then
         Into.Write_Entity ("workInHoliday", Value.Work_In_Holiday);
      end if;
      Serialize (Into, "scheduleItems", Value.Schedule_Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletWorkingScheduleDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletWorkingScheduleDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "workInHoliday", Value.Work_In_Holiday);
      Deserialize (Object, "scheduleItems", Value.Schedule_Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletWorkingScheduleDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletWorkingScheduleDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ParcelDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "boxes", Value.Boxes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ParcelDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ParcelDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "boxes", Value.Boxes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ParcelDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ParcelDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceCompetitivenessThresholdsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "optimalPrice", Value.Optimal_Price);
      Serialize (Into, "averagePrice", Value.Average_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceCompetitivenessThresholdsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceCompetitivenessThresholdsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "optimalPrice", Value.Optimal_Price);
      Deserialize (Object, "averagePrice", Value.Average_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceCompetitivenessThresholdsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceCompetitivenessThresholdsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceQuarantineVerdictParameterDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "name", Value.Name);
      Into.Write_Entity ("value", Value.Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceQuarantineVerdictParameterDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceQuarantineVerdictParameterDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceQuarantineVerdictParameterDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceQuarantineVerdictParameterDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceSuggestDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceSuggestDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceSuggestDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceSuggestDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceSuggestDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceSuggestOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "priceSuggestion", Value.Price_Suggestion);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceSuggestOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceSuggestOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "priceSuggestion", Value.Price_Suggestion);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceSuggestOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceSuggestOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferUpdateWarningDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "code", Value.Code);
      Serialize (Into, "campaignIds", Value.Campaign_Ids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferUpdateWarningDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferUpdateWarningDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "campaignIds", Value.Campaign_Ids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferUpdateWarningDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferUpdateWarningDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProvideOrderDigitalCodesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProvideOrderDigitalCodesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProvideOrderDigitalCodesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProvideOrderDigitalCodesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProvideOrderDigitalCodesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProvideOrderItemIdentifiersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProvideOrderItemIdentifiersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProvideOrderItemIdentifiersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProvideOrderItemIdentifiersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProvideOrderItemIdentifiersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PutSkuBidsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "bids", Value.Bids);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PutSkuBidsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PutSkuBidsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "bids", Value.Bids);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PutSkuBidsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PutSkuBidsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QualityRatingAffectedOrderDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Into.Write_Entity ("description", Value.Description);
      Serialize (Into, "componentType", Value.Component_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QualityRatingAffectedOrderDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QualityRatingAffectedOrderDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "componentType", Value.Component_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QualityRatingAffectedOrderDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QualityRatingAffectedOrderDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QualityRatingComponentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "componentType", Value.Component_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QualityRatingComponentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QualityRatingComponentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "componentType", Value.Component_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QualityRatingComponentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QualityRatingComponentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QualityRatingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("rating", Value.Rating);
      Into.Write_Entity ("calculationDate", Value.Calculation_Date);
      Serialize (Into, "components", Value.Components);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QualityRatingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QualityRatingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "rating", Value.Rating);
      Swagger.Streams.Deserialize (Object, "calculationDate", Value.Calculation_Date);
      Deserialize (Object, "components", Value.Components);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QualityRatingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QualityRatingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QualityRatingDetailsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "affectedOrders", Value.Affected_Orders);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QualityRatingDetailsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QualityRatingDetailsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "affectedOrders", Value.Affected_Orders);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QualityRatingDetailsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QualityRatingDetailsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RegionalModelInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "currency", Value.Currency);
      if not Value.Region_Id.Is_Null then
         Into.Write_Entity ("regionId", Value.Region_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RegionalModelInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RegionalModelInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "regionId", Value.Region_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RegionalModelInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RegionalModelInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RejectedPromoOfferUpdateDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "reason", Value.Reason);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RejectedPromoOfferUpdateDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RejectedPromoOfferUpdateDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RejectedPromoOfferUpdateDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RejectedPromoOfferUpdateDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SearchShipmentsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("dateFrom", Value.Date_From);
      Into.Write_Entity ("dateTo", Value.Date_To);
      Serialize (Into, "statuses", Value.Statuses);
      Serialize (Into, "orderIds", Value.Order_Ids);
      if not Value.Cancelled_Orders.Is_Null then
         Into.Write_Entity ("cancelledOrders", Value.Cancelled_Orders);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SearchShipmentsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SearchShipmentsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "dateFrom", Value.Date_From);
      Swagger.Streams.Deserialize (Object, "dateTo", Value.Date_To);
      Deserialize (Object, "statuses", Value.Statuses);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
      Swagger.Streams.Deserialize (Object, "cancelledOrders", Value.Cancelled_Orders);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SearchShipmentsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SearchShipmentsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetFeedParamsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "parameters", Value.Parameters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetFeedParamsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetFeedParamsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "parameters", Value.Parameters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetFeedParamsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetFeedParamsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetOrderBoxLayoutRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "boxes", Value.Boxes);
      if not Value.Allow_Remove.Is_Null then
         Into.Write_Entity ("allowRemove", Value.Allow_Remove);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetOrderBoxLayoutRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetOrderBoxLayoutRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "boxes", Value.Boxes);
      Swagger.Streams.Deserialize (Object, "allowRemove", Value.Allow_Remove);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetOrderBoxLayoutRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetOrderBoxLayoutRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetOrderShipmentBoxesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "boxes", Value.Boxes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetOrderShipmentBoxesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetOrderShipmentBoxesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "boxes", Value.Boxes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetOrderShipmentBoxesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetOrderShipmentBoxesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetReturnDecisionRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("returnItemId", Value.Return_Item_Id);
      Serialize (Into, "decisionType", Value.Decision_Type);
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetReturnDecisionRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetReturnDecisionRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "returnItemId", Value.Return_Item_Id);
      Deserialize (Object, "decisionType", Value.Decision_Type);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetReturnDecisionRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetReturnDecisionRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentBoxesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "boxes", Value.Boxes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentBoxesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentBoxesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "boxes", Value.Boxes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentBoxesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentBoxesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentStatusChangeDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Update_Time.Is_Null then
         Into.Write_Entity ("updateTime", Value.Update_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentStatusChangeDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentStatusChangeDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "updateTime", Value.Update_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentStatusChangeDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentStatusChangeDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SuggestPricesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuggestPricesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SuggestPricesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SuggestPricesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SuggestPricesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SuggestPricesResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuggestPricesResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SuggestPricesResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SuggestPricesResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SuggestPricesResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TimePeriodDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("timePeriod", Value.Time_Period);
      Serialize (Into, "timeUnit", Value.Time_Unit);
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TimePeriodDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TimePeriodDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "timePeriod", Value.Time_Period);
      Deserialize (Object, "timeUnit", Value.Time_Unit);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TimePeriodDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TimePeriodDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TurnoverDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "turnover", Value.Turnover);
      Serialize (Into, "turnoverDays", Value.Turnover_Days);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TurnoverDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TurnoverDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "turnover", Value.Turnover);
      Swagger.Streams.Deserialize (Object, "turnoverDays", Value.Turnover_Days);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TurnoverDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TurnoverDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePriceWithDiscountDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "value", Value.Value);
      Serialize (Into, "currencyId", Value.Currency_Id);
      Serialize (Into, "discountBase", Value.Discount_Base);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePriceWithDiscountDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePriceWithDiscountDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Deserialize (Object, "currencyId", Value.Currency_Id);
      Swagger.Streams.Deserialize (Object, "discountBase", Value.Discount_Base);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePriceWithDiscountDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePriceWithDiscountDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateBusinessOfferPriceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "price", Value.Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateBusinessOfferPriceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateBusinessOfferPriceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "price", Value.Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateBusinessOfferPriceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateBusinessOfferPriceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateBusinessPricesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateBusinessPricesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateBusinessPricesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateBusinessPricesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateBusinessPricesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateCampaignOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "quantum", Value.Quantum);
      if not Value.Available.Is_Null then
         Into.Write_Entity ("available", Value.Available);
      end if;
      if not Value.Vat.Is_Null then
         Into.Write_Entity ("vat", Value.Vat);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateCampaignOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateCampaignOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "quantum", Value.Quantum);
      Swagger.Streams.Deserialize (Object, "available", Value.Available);
      Swagger.Streams.Deserialize (Object, "vat", Value.Vat);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateCampaignOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateCampaignOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateCampaignOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateCampaignOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateCampaignOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateCampaignOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateCampaignOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateGoodsFeedbackCommentRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("feedbackId", Value.Feedback_Id);
      Serialize (Into, "comment", Value.Comment);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateGoodsFeedbackCommentRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateGoodsFeedbackCommentRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "feedbackId", Value.Feedback_Id);
      Deserialize (Object, "comment", Value.Comment);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateGoodsFeedbackCommentRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateGoodsFeedbackCommentRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferContentRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offersContent", Value.Offers_Content);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferContentRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferContentRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offersContent", Value.Offers_Content);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferContentRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferContentRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferContentResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferContentResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferContentResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferContentResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferContentResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateMappingsOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Feed_Id.Is_Null then
         Into.Write_Entity ("feedId", Value.Feed_Id);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      Serialize (Into, "urls", Value.Urls);
      Serialize (Into, "pictures", Value.Pictures);
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      if not Value.Min_Shipment.Is_Null then
         Into.Write_Entity ("minShipment", Value.Min_Shipment);
      end if;
      if not Value.Transport_Unit_Size.Is_Null then
         Into.Write_Entity ("transportUnitSize", Value.Transport_Unit_Size);
      end if;
      if not Value.Quantum_Of_Supply.Is_Null then
         Into.Write_Entity ("quantumOfSupply", Value.Quantum_Of_Supply);
      end if;
      if not Value.Delivery_Duration_Days.Is_Null then
         Into.Write_Entity ("deliveryDurationDays", Value.Delivery_Duration_Days);
      end if;
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      Serialize (Into, "supplyScheduleDays", Value.Supply_Schedule_Days);
      if not Value.Shelf_Life_Days.Is_Null then
         Into.Write_Entity ("shelfLifeDays", Value.Shelf_Life_Days);
      end if;
      if not Value.Life_Time_Days.Is_Null then
         Into.Write_Entity ("lifeTimeDays", Value.Life_Time_Days);
      end if;
      if not Value.Guarantee_Period_Days.Is_Null then
         Into.Write_Entity ("guaranteePeriodDays", Value.Guarantee_Period_Days);
      end if;
      Serialize (Into, "processingState", Value.Processing_State);
      Serialize (Into, "availability", Value.Availability);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Certificate.Is_Null then
         Into.Write_Entity ("certificate", Value.Certificate);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateMappingsOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateMappingsOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "feedId", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "urls", Value.Urls);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Swagger.Streams.Deserialize (Object, "minShipment", Value.Min_Shipment);
      Swagger.Streams.Deserialize (Object, "transportUnitSize", Value.Transport_Unit_Size);
      Swagger.Streams.Deserialize (Object, "quantumOfSupply", Value.Quantum_Of_Supply);
      Swagger.Streams.Deserialize (Object, "deliveryDurationDays", Value.Delivery_Duration_Days);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Swagger.Streams.Deserialize (Object, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Deserialize (Object, "supplyScheduleDays", Value.Supply_Schedule_Days);
      Swagger.Streams.Deserialize (Object, "shelfLifeDays", Value.Shelf_Life_Days);
      Swagger.Streams.Deserialize (Object, "lifeTimeDays", Value.Life_Time_Days);
      Swagger.Streams.Deserialize (Object, "guaranteePeriodDays", Value.Guarantee_Period_Days);
      Deserialize (Object, "processingState", Value.Processing_State);
      Deserialize (Object, "availability", Value.Availability);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "certificate", Value.Certificate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateMappingsOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateMappingsOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferMappingEntryDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "mapping", Value.Mapping);
      Serialize (Into, "awaitingModerationMapping", Value.Awaiting_Moderation_Mapping);
      Serialize (Into, "rejectedMapping", Value.Rejected_Mapping);
      Serialize (Into, "offer", Value.Offer);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferMappingEntryDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferMappingEntryDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "mapping", Value.Mapping);
      Deserialize (Object, "awaitingModerationMapping", Value.Awaiting_Moderation_Mapping);
      Deserialize (Object, "rejectedMapping", Value.Rejected_Mapping);
      Deserialize (Object, "offer", Value.Offer);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferMappingEntryDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferMappingEntryDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferMappingEntryRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerMappingEntries", Value.Offer_Mapping_Entries);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferMappingEntryRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferMappingEntryRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offerMappingEntries", Value.Offer_Mapping_Entries);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferMappingEntryRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferMappingEntryRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferMappingResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferMappingResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferMappingResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferMappingResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferMappingResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Market_Category_Id.Is_Null then
         Into.Write_Entity ("marketCategoryId", Value.Market_Category_Id);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      Serialize (Into, "pictures", Value.Pictures);
      Serialize (Into, "videos", Value.Videos);
      Serialize (Into, "manuals", Value.Manuals);
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      Serialize (Into, "tags", Value.Tags);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Customs_Commodity_Code.Is_Null then
         Into.Write_Entity ("customsCommodityCode", Value.Customs_Commodity_Code);
      end if;
      Serialize (Into, "certificates", Value.Certificates);
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "condition", Value.Condition);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Adult.Is_Null then
         Into.Write_Entity ("adult", Value.Adult);
      end if;
      Serialize (Into, "age", Value.Age);
      Serialize (Into, "params", Value.Params);
      Serialize (Into, "parameterValues", Value.Parameter_Values);
      Serialize (Into, "basicPrice", Value.Basic_Price);
      Serialize (Into, "purchasePrice", Value.Purchase_Price);
      Serialize (Into, "additionalExpenses", Value.Additional_Expenses);
      Serialize (Into, "cofinancePrice", Value.Cofinance_Price);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "marketCategoryId", Value.Market_Category_Id);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
      Deserialize (Object, "manuals", Value.Manuals);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "customsCommodityCode", Value.Customs_Commodity_Code);
      Swagger.Streams.Deserialize (Object, "certificates", Value.Certificates);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Deserialize (Object, "condition", Value.Condition);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "adult", Value.Adult);
      Deserialize (Object, "age", Value.Age);
      Deserialize (Object, "params", Value.Params);
      Deserialize (Object, "parameterValues", Value.Parameter_Values);
      Deserialize (Object, "basicPrice", Value.Basic_Price);
      Deserialize (Object, "purchasePrice", Value.Purchase_Price);
      Deserialize (Object, "additionalExpenses", Value.Additional_Expenses);
      Deserialize (Object, "cofinancePrice", Value.Cofinance_Price);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferMappingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offer", Value.Offer);
      Serialize (Into, "mapping", Value.Mapping);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferMappingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferMappingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offer", Value.Offer);
      Deserialize (Object, "mapping", Value.Mapping);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferMappingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferMappingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferMappingsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerMappings", Value.Offer_Mappings);
      if not Value.Only_Partner_Media_Content.Is_Null then
         Into.Write_Entity ("onlyPartnerMediaContent", Value.Only_Partner_Media_Content);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferMappingsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferMappingsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offerMappings", Value.Offer_Mappings);
      Swagger.Streams.Deserialize (Object, "onlyPartnerMediaContent", Value.Only_Partner_Media_Content);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferMappingsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferMappingsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStatusChangeDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "substatus", Value.Substatus);
      Serialize (Into, "delivery", Value.Delivery);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStatusChangeDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStatusChangeDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "substatus", Value.Substatus);
      Deserialize (Object, "delivery", Value.Delivery);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStatusChangeDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStatusChangeDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStatusRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order", Value.Order);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStatusRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStatusRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order", Value.Order);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStatusRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStatusRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStatusResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "order", Value.Order);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStatusResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStatusResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "order", Value.Order);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStatusResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStatusResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStatusDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "substatus", Value.Substatus);
      Serialize (Into, "updateStatus", Value.Update_Status);
      if not Value.Error_Details.Is_Null then
         Into.Write_Entity ("errorDetails", Value.Error_Details);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStatusDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStatusDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "substatus", Value.Substatus);
      Deserialize (Object, "updateStatus", Value.Update_Status);
      Swagger.Streams.Deserialize (Object, "errorDetails", Value.Error_Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStatusDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStatusDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStatusesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "orders", Value.Orders);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStatusesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStatusesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "orders", Value.Orders);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStatusesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStatusesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderStateDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "substatus", Value.Substatus);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderStateDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderStateDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "substatus", Value.Substatus);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderStateDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderStateDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStatusesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "orders", Value.Orders);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStatusesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStatusesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "orders", Value.Orders);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStatusesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStatusesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOutletLicenseRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "licenses", Value.Licenses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOutletLicenseRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOutletLicenseRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "licenses", Value.Licenses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOutletLicenseRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOutletLicenseRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePricesRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePricesRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePricesRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePricesRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePricesRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePromoOfferParamsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "discountParams", Value.Discount_Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePromoOfferParamsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePromoOfferParamsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "discountParams", Value.Discount_Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePromoOfferParamsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePromoOfferParamsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePromoOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "params", Value.Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePromoOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePromoOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "params", Value.Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePromoOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePromoOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePromoOffersRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("promoId", Value.Promo_Id);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePromoOffersRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePromoOffersRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "promoId", Value.Promo_Id);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePromoOffersRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePromoOffersRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateStockDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("sku", Value.Sku);
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateStockDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateStockDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "sku", Value.Sku);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateStockDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateStockDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateStocksRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "skus", Value.Skus);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateStocksRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateStocksRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "skus", Value.Skus);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateStocksRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateStocksRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ValueRestrictionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("limitingParameterId", Value.Limiting_Parameter_Id);
      Serialize (Into, "limitedValues", Value.Limited_Values);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ValueRestrictionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ValueRestrictionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "limitingParameterId", Value.Limiting_Parameter_Id);
      Deserialize (Object, "limitedValues", Value.Limited_Values);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ValueRestrictionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ValueRestrictionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("name", Value.Name);
      Into.Write_Long_Entity ("campaignId", Value.Campaign_Id);
      Into.Write_Entity ("express", Value.Express);
      Serialize (Into, "address", Value.Address);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Swagger.Streams.Deserialize (Object, "express", Value.Express);
      Deserialize (Object, "address", Value.Address);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseGroupDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "mainWarehouse", Value.Main_Warehouse);
      Serialize (Into, "warehouses", Value.Warehouses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseGroupDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseGroupDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "mainWarehouse", Value.Main_Warehouse);
      Deserialize (Object, "warehouses", Value.Warehouses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseGroupDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseGroupDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "turnoverSummary", Value.Turnover_Summary);
      Serialize (Into, "stocks", Value.Stocks);
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updatedAt", Value.Updated_At);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "turnoverSummary", Value.Turnover_Summary);
      Deserialize (Object, "stocks", Value.Stocks);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehouseOffersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("warehouseId", Value.Warehouse_Id);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehouseOffersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehouseOffersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "warehouseId", Value.Warehouse_Id);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehouseOffersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehouseOffersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarningPromoOfferUpdateDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarningPromoOfferUpdateDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarningPromoOfferUpdateDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarningPromoOfferUpdateDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarningPromoOfferUpdateDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AddOffersToArchiveResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AddOffersToArchiveResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AddOffersToArchiveResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AddOffersToArchiveResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AddOffersToArchiveResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiClientDataErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiClientDataErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiClientDataErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiClientDataErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiClientDataErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiForbiddenErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiForbiddenErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiForbiddenErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiForbiddenErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiForbiddenErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiLimitErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiLimitErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiLimitErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiLimitErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiLimitErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiLockedErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiLockedErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiLockedErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiLockedErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiLockedErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiNotFoundErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiNotFoundErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiNotFoundErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiNotFoundErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiNotFoundErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiServerErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiServerErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiServerErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiServerErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiServerErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ApiUnauthorizedErrorResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ApiUnauthorizedErrorResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ApiUnauthorizedErrorResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ApiUnauthorizedErrorResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ApiUnauthorizedErrorResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculatedTariffDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "amount", Value.Amount);
      Serialize (Into, "parameters", Value.Parameters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculatedTariffDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculatedTariffDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Deserialize (Object, "parameters", Value.Parameters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculatedTariffDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculatedTariffDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculateTariffsOfferInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offer", Value.Offer);
      Serialize (Into, "tariffs", Value.Tariffs);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculateTariffsOfferInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculateTariffsOfferInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offer", Value.Offer);
      Deserialize (Object, "tariffs", Value.Tariffs);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculateTariffsOfferInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculateTariffsOfferInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculateTariffsResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculateTariffsResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculateTariffsResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculateTariffsResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculateTariffsResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculateTariffsParametersDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Campaign_Id.Is_Null then
         Into.Write_Entity ("campaignId", Value.Campaign_Id);
      end if;
      Serialize (Into, "sellingProgram", Value.Selling_Program);
      Serialize (Into, "frequency", Value.Frequency);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculateTariffsParametersDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculateTariffsParametersDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "campaignId", Value.Campaign_Id);
      Deserialize (Object, "sellingProgram", Value.Selling_Program);
      Deserialize (Object, "frequency", Value.Frequency);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculateTariffsParametersDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculateTariffsParametersDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculateTariffsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "parameters", Value.Parameters);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculateTariffsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculateTariffsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "parameters", Value.Parameters);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculateTariffsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculateTariffsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CalculateTariffsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CalculateTariffsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CalculateTariffsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CalculateTariffsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CalculateTariffsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChatMessageDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("messageId", Value.Message_Id);
      Into.Write_Entity ("createdAt", Value.Created_At);
      Serialize (Into, "sender", Value.Sender);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Serialize (Into, "payload", Value.Payload);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChatMessageDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChatMessageDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "messageId", Value.Message_Id);
      Swagger.Streams.Deserialize (Object, "createdAt", Value.Created_At);
      Deserialize (Object, "sender", Value.Sender);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Deserialize (Object, "payload", Value.Payload);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChatMessageDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChatMessageDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChatMessagesResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Serialize (Into, "messages", Value.Messages);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChatMessagesResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChatMessagesResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Deserialize (Object, "messages", Value.Messages);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChatMessagesResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChatMessagesResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateChatResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateChatResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateChatResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateChatResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateChatResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CreateOutletResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CreateOutletResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CreateOutletResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CreateOutletResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CreateOutletResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteCampaignOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteCampaignOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteCampaignOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteCampaignOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteCampaignOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteOffersFromArchiveResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteOffersFromArchiveResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteOffersFromArchiveResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteOffersFromArchiveResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteOffersFromArchiveResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeleteOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeleteOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeleteOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeleteOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeleteOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DeletePromoOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DeletePromoOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DeletePromoOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DeletePromoOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DeletePromoOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ExtensionShipmentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "currentStatus", Value.Current_Status);
      Serialize (Into, "availableActions", Value.Available_Actions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ExtensionShipmentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ExtensionShipmentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "currentStatus", Value.Current_Status);
      Deserialize (Object, "availableActions", Value.Available_Actions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ExtensionShipmentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ExtensionShipmentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedContentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Rejected_Offers_Count.Is_Null then
         Into.Write_Entity ("rejectedOffersCount", Value.Rejected_Offers_Count);
      end if;
      Serialize (Into, "status", Value.Status);
      if not Value.Total_Offers_Count.Is_Null then
         Into.Write_Entity ("totalOffersCount", Value.Total_Offers_Count);
      end if;
      Serialize (Into, "error", Value.Error);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedContentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedContentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "rejectedOffersCount", Value.Rejected_Offers_Count);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "totalOffersCount", Value.Total_Offers_Count);
      Deserialize (Object, "error", Value.Error);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedContentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedContentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedDownloadDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "error", Value.Error);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedDownloadDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedDownloadDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "error", Value.Error);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedDownloadDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedDownloadDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsRecordDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Download_Time.Is_Null then
         Into.Write_Entity ("downloadTime", Value.Download_Time);
      end if;
      if not Value.File_Time.Is_Null then
         Into.Write_Entity ("fileTime", Value.File_Time);
      end if;
      if not Value.Generation_Id.Is_Null then
         Into.Write_Entity ("generationId", Value.Generation_Id);
      end if;
      Serialize (Into, "indexType", Value.Index_Type);
      if not Value.Published_Time.Is_Null then
         Into.Write_Entity ("publishedTime", Value.Published_Time);
      end if;
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "error", Value.Error);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsRecordDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsRecordDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "downloadTime", Value.Download_Time);
      Swagger.Streams.Deserialize (Object, "fileTime", Value.File_Time);
      Swagger.Streams.Deserialize (Object, "generationId", Value.Generation_Id);
      Deserialize (Object, "indexType", Value.Index_Type);
      Swagger.Streams.Deserialize (Object, "publishedTime", Value.Published_Time);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "error", Value.Error);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsRecordDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsRecordDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedIndexLogsResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "feed", Value.Feed);
      Serialize (Into, "indexLogRecords", Value.Index_Log_Records);
      if not Value.Total.Is_Null then
         Into.Write_Entity ("total", Value.Total);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedIndexLogsResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedIndexLogsResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "feed", Value.Feed);
      Deserialize (Object, "indexLogRecords", Value.Index_Log_Records);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedIndexLogsResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedIndexLogsResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackCommentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parentId", Value.Parent_Id);
      end if;
      if not Value.P_Body.Is_Null then
         Into.Write_Entity ("body", Value.P_Body);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("createdAt", Value.Created_At);
      end if;
      if not Value.Updated_At.Is_Null then
         Into.Write_Entity ("updatedAt", Value.Updated_At);
      end if;
      Serialize (Into, "author", Value.Author);
      Serialize (Into, "children", Value.Children);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackCommentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackCommentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "parentId", Value.Parent_Id);
      Swagger.Streams.Deserialize (Object, "body", Value.P_Body);
      Swagger.Streams.Deserialize (Object, "createdAt", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
      Deserialize (Object, "author", Value.Author);
      Deserialize (Object, "children", Value.Children);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackCommentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackCommentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Created_At.Is_Null then
         Into.Write_Entity ("createdAt", Value.Created_At);
      end if;
      if not Value.Text.Is_Null then
         Into.Write_Entity ("text", Value.Text);
      end if;
      Serialize (Into, "state", Value.State);
      Serialize (Into, "author", Value.Author);
      if not Value.Pro.Is_Null then
         Into.Write_Entity ("pro", Value.Pro);
      end if;
      if not Value.Contra.Is_Null then
         Into.Write_Entity ("contra", Value.Contra);
      end if;
      Serialize (Into, "comments", Value.Comments);
      Serialize (Into, "shop", Value.Shop);
      if not Value.Resolved.Is_Null then
         Into.Write_Entity ("resolved", Value.Resolved);
      end if;
      if not Value.Verified.Is_Null then
         Into.Write_Entity ("verified", Value.Verified);
      end if;
      if not Value.Recommend.Is_Null then
         Into.Write_Entity ("recommend", Value.Recommend);
      end if;
      Serialize (Into, "grades", Value.Grades);
      Serialize (Into, "order", Value.Order);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "createdAt", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "text", Value.Text);
      Deserialize (Object, "state", Value.State);
      Deserialize (Object, "author", Value.Author);
      Swagger.Streams.Deserialize (Object, "pro", Value.Pro);
      Swagger.Streams.Deserialize (Object, "contra", Value.Contra);
      Deserialize (Object, "comments", Value.Comments);
      Deserialize (Object, "shop", Value.Shop);
      Swagger.Streams.Deserialize (Object, "resolved", Value.Resolved);
      Swagger.Streams.Deserialize (Object, "verified", Value.Verified);
      Swagger.Streams.Deserialize (Object, "recommend", Value.Recommend);
      Deserialize (Object, "grades", Value.Grades);
      Deserialize (Object, "order", Value.Order);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedbackListDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "feedbackList", Value.Feedback_List);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedbackListDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedbackListDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "feedbackList", Value.Feedback_List);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedbackListDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedbackListDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenerateReportResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenerateReportResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenerateReportResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenerateReportResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenerateReportResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBidsInfoResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "bids", Value.Bids);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBidsInfoResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBidsInfoResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "bids", Value.Bids);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBidsInfoResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBidsInfoResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBidsInfoResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBidsInfoResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBidsInfoResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBidsInfoResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBidsInfoResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBidsRecommendationsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBidsRecommendationsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBidsRecommendationsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBidsRecommendationsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBidsRecommendationsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessBuyerInfoResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessBuyerInfoResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessBuyerInfoResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessBuyerInfoResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessBuyerInfoResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessDocumentsInfoResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessDocumentsInfoResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessDocumentsInfoResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessDocumentsInfoResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessDocumentsInfoResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessSettingsInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "info", Value.Info);
      Serialize (Into, "settings", Value.Settings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessSettingsInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessSettingsInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "info", Value.Info);
      Deserialize (Object, "settings", Value.Settings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessSettingsInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessSettingsInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetBusinessSettingsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetBusinessSettingsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetBusinessSettingsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetBusinessSettingsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetBusinessSettingsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "quantum", Value.Quantum);
      if not Value.Available.Is_Null then
         Into.Write_Entity ("available", Value.Available);
      end if;
      Serialize (Into, "basicPrice", Value.Basic_Price);
      Serialize (Into, "campaignPrice", Value.Campaign_Price);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "quantum", Value.Quantum);
      Swagger.Streams.Deserialize (Object, "available", Value.Available);
      Deserialize (Object, "basicPrice", Value.Basic_Price);
      Deserialize (Object, "campaignPrice", Value.Campaign_Price);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignOffersResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignOffersResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignOffersResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignOffersResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignOffersResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCampaignsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "campaigns", Value.Campaigns);
      Serialize (Into, "pager", Value.Pager);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCampaignsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCampaignsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "campaigns", Value.Campaigns);
      Deserialize (Object, "pager", Value.Pager);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCampaignsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCampaignsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCategoriesMaxSaleQuantumDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "results", Value.Results);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCategoriesMaxSaleQuantumDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCategoriesMaxSaleQuantumDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "results", Value.Results);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCategoriesMaxSaleQuantumDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCategoriesMaxSaleQuantumDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCategoriesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCategoriesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCategoriesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCategoriesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCategoriesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCategoryContentParametersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCategoryContentParametersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCategoryContentParametersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCategoryContentParametersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCategoryContentParametersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetChatHistoryResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetChatHistoryResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetChatHistoryResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetChatHistoryResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetChatHistoryResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetChatInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("chatId", Value.Chat_Id);
      Into.Write_Long_Entity ("orderId", Value.Order_Id);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "status", Value.Status);
      Into.Write_Entity ("createdAt", Value.Created_At);
      Into.Write_Entity ("updatedAt", Value.Updated_At);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetChatInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetChatInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "chatId", Value.Chat_Id);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "createdAt", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "updatedAt", Value.Updated_At);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetChatInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetChatInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetChatsInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "chats", Value.Chats);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetChatsInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetChatsInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "chats", Value.Chats);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetChatsInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetChatsInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetChatsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "orderIds", Value.Order_Ids);
      Serialize (Into, "types", Value.Types);
      Serialize (Into, "statuses", Value.Statuses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetChatsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetChatsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
      Deserialize (Object, "types", Value.Types);
      Deserialize (Object, "statuses", Value.Statuses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetChatsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetChatsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetChatsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetChatsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetChatsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetChatsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetChatsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetFeedIndexLogsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetFeedIndexLogsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetFeedIndexLogsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetFeedIndexLogsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetFeedIndexLogsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetFeedbackListResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetFeedbackListResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetFeedbackListResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetFeedbackListResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetFeedbackListResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetFulfillmentWarehousesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetFulfillmentWarehousesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetFulfillmentWarehousesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetFulfillmentWarehousesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetFulfillmentWarehousesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentListDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "comments", Value.Comments);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentListDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentListDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "comments", Value.Comments);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentListDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentListDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetGoodsFeedbackCommentsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetGoodsFeedbackCommentsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetGoodsFeedbackCommentsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetGoodsFeedbackCommentsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetGoodsFeedbackCommentsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetGoodsStatsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetGoodsStatsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetGoodsStatsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetGoodsStatsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetGoodsStatsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetHiddenOffersResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "hiddenOffers", Value.Hidden_Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetHiddenOffersResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetHiddenOffersResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "hiddenOffers", Value.Hidden_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetHiddenOffersResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetHiddenOffersResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetHiddenOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetHiddenOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetHiddenOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetHiddenOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetHiddenOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetModelsOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "models", Value.Models);
      Serialize (Into, "currency", Value.Currency);
      if not Value.Region_Id.Is_Null then
         Into.Write_Entity ("regionId", Value.Region_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetModelsOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetModelsOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "models", Value.Models);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "regionId", Value.Region_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetModelsOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetModelsOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetModelsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "models", Value.Models);
      Serialize (Into, "currency", Value.Currency);
      if not Value.Region_Id.Is_Null then
         Into.Write_Entity ("regionId", Value.Region_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetModelsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetModelsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "models", Value.Models);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "regionId", Value.Region_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetModelsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetModelsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCardDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "mapping", Value.Mapping);
      Serialize (Into, "parameterValues", Value.Parameter_Values);
      Serialize (Into, "cardStatus", Value.Card_Status);
      if not Value.Content_Rating.Is_Null then
         Into.Write_Entity ("contentRating", Value.Content_Rating);
      end if;
      Serialize (Into, "recommendations", Value.Recommendations);
      Serialize (Into, "errors", Value.Errors);
      Serialize (Into, "warnings", Value.Warnings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCardDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCardDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "mapping", Value.Mapping);
      Deserialize (Object, "parameterValues", Value.Parameter_Values);
      Deserialize (Object, "cardStatus", Value.Card_Status);
      Swagger.Streams.Deserialize (Object, "contentRating", Value.Content_Rating);
      Deserialize (Object, "recommendations", Value.Recommendations);
      Deserialize (Object, "errors", Value.Errors);
      Deserialize (Object, "warnings", Value.Warnings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCardDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCardDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferCardsContentStatusDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerCards", Value.Offer_Cards);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferCardsContentStatusDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferCardsContentStatusDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offerCards", Value.Offer_Cards);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferCardsContentStatusDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferCardsContentStatusDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferCardsContentStatusResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferCardsContentStatusResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferCardsContentStatusResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferCardsContentStatusResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferCardsContentStatusResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Market_Category_Id.Is_Null then
         Into.Write_Entity ("marketCategoryId", Value.Market_Category_Id);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      Serialize (Into, "pictures", Value.Pictures);
      Serialize (Into, "videos", Value.Videos);
      Serialize (Into, "manuals", Value.Manuals);
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      Serialize (Into, "tags", Value.Tags);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Customs_Commodity_Code.Is_Null then
         Into.Write_Entity ("customsCommodityCode", Value.Customs_Commodity_Code);
      end if;
      Serialize (Into, "certificates", Value.Certificates);
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "condition", Value.Condition);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Adult.Is_Null then
         Into.Write_Entity ("adult", Value.Adult);
      end if;
      Serialize (Into, "age", Value.Age);
      Serialize (Into, "params", Value.Params);
      Serialize (Into, "basicPrice", Value.Basic_Price);
      Serialize (Into, "purchasePrice", Value.Purchase_Price);
      Serialize (Into, "additionalExpenses", Value.Additional_Expenses);
      Serialize (Into, "cofinancePrice", Value.Cofinance_Price);
      Serialize (Into, "cardStatus", Value.Card_Status);
      Serialize (Into, "campaigns", Value.Campaigns);
      Serialize (Into, "sellingPrograms", Value.Selling_Programs);
      if not Value.Archived.Is_Null then
         Into.Write_Entity ("archived", Value.Archived);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "marketCategoryId", Value.Market_Category_Id);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
      Deserialize (Object, "manuals", Value.Manuals);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "customsCommodityCode", Value.Customs_Commodity_Code);
      Swagger.Streams.Deserialize (Object, "certificates", Value.Certificates);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Deserialize (Object, "condition", Value.Condition);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "adult", Value.Adult);
      Deserialize (Object, "age", Value.Age);
      Deserialize (Object, "params", Value.Params);
      Deserialize (Object, "basicPrice", Value.Basic_Price);
      Deserialize (Object, "purchasePrice", Value.Purchase_Price);
      Deserialize (Object, "additionalExpenses", Value.Additional_Expenses);
      Deserialize (Object, "cofinancePrice", Value.Cofinance_Price);
      Deserialize (Object, "cardStatus", Value.Card_Status);
      Deserialize (Object, "campaigns", Value.Campaigns);
      Deserialize (Object, "sellingPrograms", Value.Selling_Programs);
      Swagger.Streams.Deserialize (Object, "archived", Value.Archived);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferMappingDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offer", Value.Offer);
      Serialize (Into, "mapping", Value.Mapping);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferMappingDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferMappingDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offer", Value.Offer);
      Deserialize (Object, "mapping", Value.Mapping);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferMappingDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferMappingDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingEntriesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "offerMappingEntries", Value.Offer_Mapping_Entries);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingEntriesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingEntriesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "offerMappingEntries", Value.Offer_Mapping_Entries);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingEntriesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingEntriesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferMappingEntriesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferMappingEntriesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferMappingEntriesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferMappingEntriesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferMappingEntriesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferMappingsResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "offerMappings", Value.Offer_Mappings);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferMappingsResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferMappingsResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "offerMappings", Value.Offer_Mappings);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferMappingsResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferMappingsResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferMappingsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferMappingsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferMappingsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferMappingsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferMappingsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferRecommendationsRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offerIds", Value.Offer_Ids);
      Serialize (Into, "cofinancePriceFilter", Value.Cofinance_Price_Filter);
      Serialize (Into, "recommendedCofinancePriceFilter", Value.Recommended_Cofinance_Price_Filter);
      Serialize (Into, "competitivenessFilter", Value.Competitiveness_Filter);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferRecommendationsRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferRecommendationsRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerIds", Value.Offer_Ids);
      Deserialize (Object, "cofinancePriceFilter", Value.Cofinance_Price_Filter);
      Deserialize (Object, "recommendedCofinancePriceFilter", Value.Recommended_Cofinance_Price_Filter);
      Deserialize (Object, "competitivenessFilter", Value.Competitiveness_Filter);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferRecommendationsRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferRecommendationsRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferRecommendationsResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "offerRecommendations", Value.Offer_Recommendations);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferRecommendationsResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferRecommendationsResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "offerRecommendations", Value.Offer_Recommendations);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferRecommendationsResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferRecommendationsResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOfferRecommendationsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOfferRecommendationsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOfferRecommendationsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOfferRecommendationsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOfferRecommendationsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Serialize (Into, "pager", Value.Pager);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
      Deserialize (Object, "pager", Value.Pager);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOrderBuyerInfoResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOrderBuyerInfoResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOrderBuyerInfoResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOrderBuyerInfoResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOrderBuyerInfoResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOrderLabelsDataResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOrderLabelsDataResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOrderLabelsDataResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOrderLabelsDataResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOrderLabelsDataResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsOrderDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Creation_Date.Is_Null then
         Into.Write_Entity ("creationDate", Value.Creation_Date);
      end if;
      if not Value.Status_Update_Date.Is_Null then
         Into.Write_Entity ("statusUpdateDate", Value.Status_Update_Date);
      end if;
      Serialize (Into, "status", Value.Status);
      if not Value.Partner_Order_Id.Is_Null then
         Into.Write_Entity ("partnerOrderId", Value.Partner_Order_Id);
      end if;
      Serialize (Into, "paymentType", Value.Payment_Type);
      if not Value.Fake.Is_Null then
         Into.Write_Entity ("fake", Value.Fake);
      end if;
      Serialize (Into, "deliveryRegion", Value.Delivery_Region);
      Serialize (Into, "items", Value.Items);
      Serialize (Into, "initialItems", Value.Initial_Items);
      Serialize (Into, "payments", Value.Payments);
      Serialize (Into, "commissions", Value.Commissions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsOrderDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsOrderDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "creationDate", Value.Creation_Date);
      Swagger.Streams.Deserialize (Object, "statusUpdateDate", Value.Status_Update_Date);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "partnerOrderId", Value.Partner_Order_Id);
      Deserialize (Object, "paymentType", Value.Payment_Type);
      Swagger.Streams.Deserialize (Object, "fake", Value.Fake);
      Deserialize (Object, "deliveryRegion", Value.Delivery_Region);
      Deserialize (Object, "items", Value.Items);
      Deserialize (Object, "initialItems", Value.Initial_Items);
      Deserialize (Object, "payments", Value.Payments);
      Deserialize (Object, "commissions", Value.Commissions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsOrderDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsOrderDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "orders", Value.Orders);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "orders", Value.Orders);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOrdersStatsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOrdersStatsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOrdersStatsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOrdersStatsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOrdersStatsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOutletLicensesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOutletLicensesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOutletLicensesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOutletLicensesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOutletLicensesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferPriceByOfferIdsListResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferPriceByOfferIdsListResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferPriceByOfferIdsListResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferPriceByOfferIdsListResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferPriceByOfferIdsListResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPricesByOfferIdsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPricesByOfferIdsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPricesByOfferIdsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPricesByOfferIdsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPricesByOfferIdsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferPriceListResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Serialize (Into, "paging", Value.Paging);
      if not Value.Total.Is_Null then
         Into.Write_Entity ("total", Value.Total);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferPriceListResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferPriceListResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
      Deserialize (Object, "paging", Value.Paging);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferPriceListResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferPriceListResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPricesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPricesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPricesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPricesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPricesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoMechanicsInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "promocodeInfo", Value.Promocode_Info);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoMechanicsInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoMechanicsInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "promocodeInfo", Value.Promocode_Info);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoMechanicsInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoMechanicsInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "params", Value.Params);
      Serialize (Into, "autoParticipatingDetails", Value.Auto_Participating_Details);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "params", Value.Params);
      Deserialize (Object, "autoParticipatingDetails", Value.Auto_Participating_Details);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoOffersResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offers", Value.Offers);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoOffersResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoOffersResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offers", Value.Offers);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoOffersResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoOffersResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromoOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromoOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromoOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromoOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromoOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromosRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "participation", Value.Participation);
      Serialize (Into, "mechanics", Value.Mechanics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromosRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromosRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "participation", Value.Participation);
      Deserialize (Object, "mechanics", Value.Mechanics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromosRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromosRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetPromosResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetPromosResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetPromosResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetPromosResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetPromosResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetQualityRatingDetailsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetQualityRatingDetailsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetQualityRatingDetailsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetQualityRatingDetailsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetQualityRatingDetailsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetQualityRatingResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetQualityRatingResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetQualityRatingResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetQualityRatingResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetQualityRatingResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QuarantineOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "currentPrice", Value.Current_Price);
      Serialize (Into, "lastValidPrice", Value.Last_Valid_Price);
      Serialize (Into, "verdicts", Value.Verdicts);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QuarantineOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QuarantineOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "currentPrice", Value.Current_Price);
      Deserialize (Object, "lastValidPrice", Value.Last_Valid_Price);
      Deserialize (Object, "verdicts", Value.Verdicts);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QuarantineOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QuarantineOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetQuarantineOffersResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "offers", Value.Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetQuarantineOffersResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetQuarantineOffersResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "offers", Value.Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetQuarantineOffersResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetQuarantineOffersResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetQuarantineOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetQuarantineOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetQuarantineOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetQuarantineOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetQuarantineOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetRegionWithChildrenResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "pager", Value.Pager);
      Serialize (Into, "regions", Value.Regions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetRegionWithChildrenResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetRegionWithChildrenResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "pager", Value.Pager);
      Deserialize (Object, "regions", Value.Regions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetRegionWithChildrenResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetRegionWithChildrenResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetRegionsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "regions", Value.Regions);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetRegionsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetRegionsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "regions", Value.Regions);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetRegionsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetRegionsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReportInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "subStatus", Value.Sub_Status);
      Into.Write_Entity ("generationRequestedAt", Value.Generation_Requested_At);
      if not Value.Generation_Finished_At.Is_Null then
         Into.Write_Entity ("generationFinishedAt", Value.Generation_Finished_At);
      end if;
      if not Value.File.Is_Null then
         Into.Write_Entity ("file", Value.File);
      end if;
      if not Value.Estimated_Generation_Time.Is_Null then
         Into.Write_Entity ("estimatedGenerationTime", Value.Estimated_Generation_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReportInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReportInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "subStatus", Value.Sub_Status);
      Swagger.Streams.Deserialize (Object, "generationRequestedAt", Value.Generation_Requested_At);
      Swagger.Streams.Deserialize (Object, "generationFinishedAt", Value.Generation_Finished_At);
      Swagger.Streams.Deserialize (Object, "file", Value.File);
      Swagger.Streams.Deserialize (Object, "estimatedGenerationTime", Value.Estimated_Generation_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReportInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReportInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetReportInfoResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetReportInfoResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetReportInfoResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetReportInfoResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetReportInfoResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Order_Id.Is_Null then
         Into.Write_Entity ("orderId", Value.Order_Id);
      end if;
      if not Value.Creation_Date.Is_Null then
         Into.Write_Entity ("creationDate", Value.Creation_Date);
      end if;
      if not Value.Update_Date.Is_Null then
         Into.Write_Entity ("updateDate", Value.Update_Date);
      end if;
      Serialize (Into, "refundStatus", Value.Refund_Status);
      Serialize (Into, "logisticPickupPoint", Value.Logistic_Pickup_Point);
      Serialize (Into, "shipmentRecipientType", Value.Shipment_Recipient_Type);
      Serialize (Into, "shipmentStatus", Value.Shipment_Status);
      if not Value.Refund_Amount.Is_Null then
         Into.Write_Entity ("refundAmount", Value.Refund_Amount);
      end if;
      Serialize (Into, "items", Value.Items);
      Serialize (Into, "returnType", Value.Return_Type);
      if not Value.Fast_Return.Is_Null then
         Into.Write_Entity ("fastReturn", Value.Fast_Return);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "orderId", Value.Order_Id);
      Swagger.Streams.Deserialize (Object, "creationDate", Value.Creation_Date);
      Swagger.Streams.Deserialize (Object, "updateDate", Value.Update_Date);
      Deserialize (Object, "refundStatus", Value.Refund_Status);
      Deserialize (Object, "logisticPickupPoint", Value.Logistic_Pickup_Point);
      Deserialize (Object, "shipmentRecipientType", Value.Shipment_Recipient_Type);
      Deserialize (Object, "shipmentStatus", Value.Shipment_Status);
      Swagger.Streams.Deserialize (Object, "refundAmount", Value.Refund_Amount);
      Deserialize (Object, "items", Value.Items);
      Deserialize (Object, "returnType", Value.Return_Type);
      Swagger.Streams.Deserialize (Object, "fastReturn", Value.Fast_Return);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetReturnResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetReturnResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetReturnResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetReturnResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetReturnResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PagedReturnsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "returns", Value.Returns);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PagedReturnsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PagedReturnsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "returns", Value.Returns);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PagedReturnsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PagedReturnsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetReturnsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetReturnsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetReturnsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetReturnsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetReturnsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetShipmentOrdersInfoResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetShipmentOrdersInfoResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetShipmentOrdersInfoResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetShipmentOrdersInfoResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetShipmentOrdersInfoResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Plan_Interval_From.Is_Null then
         Into.Write_Entity ("planIntervalFrom", Value.Plan_Interval_From);
      end if;
      if not Value.Plan_Interval_To.Is_Null then
         Into.Write_Entity ("planIntervalTo", Value.Plan_Interval_To);
      end if;
      Serialize (Into, "shipmentType", Value.Shipment_Type);
      Serialize (Into, "warehouse", Value.Warehouse);
      Serialize (Into, "warehouseTo", Value.Warehouse_To);
      if not Value.External_Id.Is_Null then
         Into.Write_Entity ("externalId", Value.External_Id);
      end if;
      Serialize (Into, "deliveryService", Value.Delivery_Service);
      Serialize (Into, "palletsCount", Value.Pallets_Count);
      Serialize (Into, "orderIds", Value.Order_Ids);
      if not Value.Draft_Count.Is_Null then
         Into.Write_Entity ("draftCount", Value.Draft_Count);
      end if;
      if not Value.Planned_Count.Is_Null then
         Into.Write_Entity ("plannedCount", Value.Planned_Count);
      end if;
      if not Value.Fact_Count.Is_Null then
         Into.Write_Entity ("factCount", Value.Fact_Count);
      end if;
      Serialize (Into, "currentStatus", Value.Current_Status);
      Serialize (Into, "availableActions", Value.Available_Actions);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "planIntervalFrom", Value.Plan_Interval_From);
      Swagger.Streams.Deserialize (Object, "planIntervalTo", Value.Plan_Interval_To);
      Deserialize (Object, "shipmentType", Value.Shipment_Type);
      Deserialize (Object, "warehouse", Value.Warehouse);
      Deserialize (Object, "warehouseTo", Value.Warehouse_To);
      Swagger.Streams.Deserialize (Object, "externalId", Value.External_Id);
      Deserialize (Object, "deliveryService", Value.Delivery_Service);
      Deserialize (Object, "palletsCount", Value.Pallets_Count);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
      Swagger.Streams.Deserialize (Object, "draftCount", Value.Draft_Count);
      Swagger.Streams.Deserialize (Object, "plannedCount", Value.Planned_Count);
      Swagger.Streams.Deserialize (Object, "factCount", Value.Fact_Count);
      Deserialize (Object, "currentStatus", Value.Current_Status);
      Deserialize (Object, "availableActions", Value.Available_Actions);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetShipmentResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetShipmentResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetShipmentResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetShipmentResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetShipmentResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetSuggestedOfferMappingEntriesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetSuggestedOfferMappingEntriesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetSuggestedOfferMappingEntriesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetSuggestedOfferMappingEntriesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetSuggestedOfferMappingEntriesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetSuggestedOfferMappingsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetSuggestedOfferMappingsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetSuggestedOfferMappingsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetSuggestedOfferMappingsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetSuggestedOfferMappingsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetWarehouseStocksDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "warehouses", Value.Warehouses);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetWarehouseStocksDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetWarehouseStocksDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "warehouses", Value.Warehouses);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetWarehouseStocksDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetWarehouseStocksDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetWarehouseStocksResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetWarehouseStocksResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetWarehouseStocksResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetWarehouseStocksResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetWarehouseStocksResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.WarehousesDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "warehouses", Value.Warehouses);
      Serialize (Into, "warehouseGroups", Value.Warehouse_Groups);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in WarehousesDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.WarehousesDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "warehouses", Value.Warehouses);
      Deserialize (Object, "warehouseGroups", Value.Warehouse_Groups);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out WarehousesDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.WarehousesDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetWarehousesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetWarehousesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetWarehousesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetWarehousesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetWarehousesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackCommentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("id", Value.Id);
      Into.Write_Entity ("text", Value.Text);
      if not Value.Can_Modify.Is_Null then
         Into.Write_Entity ("canModify", Value.Can_Modify);
      end if;
      if not Value.Parent_Id.Is_Null then
         Into.Write_Entity ("parentId", Value.Parent_Id);
      end if;
      Serialize (Into, "author", Value.Author);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackCommentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackCommentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "text", Value.Text);
      Swagger.Streams.Deserialize (Object, "canModify", Value.Can_Modify);
      Swagger.Streams.Deserialize (Object, "parentId", Value.Parent_Id);
      Deserialize (Object, "author", Value.Author);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackCommentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackCommentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Long_Entity ("feedbackId", Value.Feedback_Id);
      Into.Write_Entity ("createdAt", Value.Created_At);
      Into.Write_Entity ("needReaction", Value.Need_Reaction);
      Serialize (Into, "identifiers", Value.Identifiers);
      if not Value.Author.Is_Null then
         Into.Write_Entity ("author", Value.Author);
      end if;
      Serialize (Into, "description", Value.Description);
      Serialize (Into, "media", Value.Media);
      Serialize (Into, "statistics", Value.Statistics);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "feedbackId", Value.Feedback_Id);
      Swagger.Streams.Deserialize (Object, "createdAt", Value.Created_At);
      Swagger.Streams.Deserialize (Object, "needReaction", Value.Need_Reaction);
      Deserialize (Object, "identifiers", Value.Identifiers);
      Swagger.Streams.Deserialize (Object, "author", Value.Author);
      Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "media", Value.Media);
      Deserialize (Object, "statistics", Value.Statistics);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GoodsFeedbackListDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "feedbacks", Value.Feedbacks);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GoodsFeedbackListDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GoodsFeedbackListDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "feedbacks", Value.Feedbacks);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GoodsFeedbackListDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GoodsFeedbackListDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetGoodsFeedbackResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetGoodsFeedbackResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetGoodsFeedbackResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetGoodsFeedbackResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetGoodsFeedbackResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.LogisticPickupPointDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "address", Value.Address);
      if not Value.Instruction.Is_Null then
         Into.Write_Entity ("instruction", Value.Instruction);
      end if;
      Serialize (Into, "type", Value.P_Type);
      if not Value.Logistic_Partner_Id.Is_Null then
         Into.Write_Entity ("logisticPartnerId", Value.Logistic_Partner_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in LogisticPickupPointDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.LogisticPickupPointDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "instruction", Value.Instruction);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "logisticPartnerId", Value.Logistic_Partner_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out LogisticPickupPointDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.LogisticPickupPointDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferConditionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "quality", Value.Quality);
      if not Value.Reason.Is_Null then
         Into.Write_Entity ("reason", Value.Reason);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferConditionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferConditionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "quality", Value.Quality);
      Swagger.Streams.Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferConditionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferConditionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferMappingEntryDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "mapping", Value.Mapping);
      Serialize (Into, "awaitingModerationMapping", Value.Awaiting_Moderation_Mapping);
      Serialize (Into, "rejectedMapping", Value.Rejected_Mapping);
      Serialize (Into, "offer", Value.Offer);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferMappingEntryDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferMappingEntryDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "mapping", Value.Mapping);
      Deserialize (Object, "awaitingModerationMapping", Value.Awaiting_Moderation_Mapping);
      Deserialize (Object, "rejectedMapping", Value.Rejected_Mapping);
      Deserialize (Object, "offer", Value.Offer);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferMappingEntryDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferMappingEntryDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferProcessingStateDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "notes", Value.Notes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferProcessingStateDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferProcessingStateDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "notes", Value.Notes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferProcessingStateDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferProcessingStateDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferRecommendationInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "recommendedCofinancePrice", Value.Recommended_Cofinance_Price);
      Serialize (Into, "competitivenessThresholds", Value.Competitiveness_Thresholds);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferRecommendationInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferRecommendationInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "recommendedCofinancePrice", Value.Recommended_Cofinance_Price);
      Deserialize (Object, "competitivenessThresholds", Value.Competitiveness_Thresholds);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferRecommendationInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferRecommendationInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferForRecommendationDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "cofinancePrice", Value.Cofinance_Price);
      Serialize (Into, "competitiveness", Value.Competitiveness);
      if not Value.Shows.Is_Null then
         Into.Write_Entity ("shows", Value.Shows);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferForRecommendationDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferForRecommendationDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Deserialize (Object, "price", Value.Price);
      Deserialize (Object, "cofinancePrice", Value.Cofinance_Price);
      Deserialize (Object, "competitiveness", Value.Competitiveness);
      Swagger.Streams.Deserialize (Object, "shows", Value.Shows);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferForRecommendationDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferForRecommendationDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferRecommendationDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "offer", Value.Offer);
      Serialize (Into, "recommendation", Value.Recommendation);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferRecommendationDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferRecommendationDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "offer", Value.Offer);
      Deserialize (Object, "recommendation", Value.Recommendation);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferRecommendationDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferRecommendationDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OfferSellingProgramDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "sellingProgram", Value.Selling_Program);
      Serialize (Into, "status", Value.Status);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OfferSellingProgramDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OfferSellingProgramDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "sellingProgram", Value.Selling_Program);
      Deserialize (Object, "status", Value.Status);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OfferSellingProgramDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OfferSellingProgramDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderShipmentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Shipment_Date.Is_Null then
         Into.Write_Entity ("shipmentDate", Value.Shipment_Date);
      end if;
      if not Value.Shipment_Time.Is_Null then
         Into.Write_Entity ("shipmentTime", Value.Shipment_Time);
      end if;
      Serialize (Into, "tracks", Value.Tracks);
      Serialize (Into, "boxes", Value.Boxes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderShipmentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderShipmentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "shipmentDate", Value.Shipment_Date);
      Swagger.Streams.Deserialize (Object, "shipmentTime", Value.Shipment_Time);
      Deserialize (Object, "tracks", Value.Tracks);
      Deserialize (Object, "boxes", Value.Boxes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderShipmentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderShipmentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsDetailsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "itemStatus", Value.Item_Status);
      if not Value.Item_Count.Is_Null then
         Into.Write_Entity ("itemCount", Value.Item_Count);
      end if;
      if not Value.Update_Date.Is_Null then
         Into.Write_Entity ("updateDate", Value.Update_Date);
      end if;
      Serialize (Into, "stockType", Value.Stock_Type);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsDetailsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsDetailsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "itemStatus", Value.Item_Status);
      Swagger.Streams.Deserialize (Object, "itemCount", Value.Item_Count);
      Swagger.Streams.Deserialize (Object, "updateDate", Value.Update_Date);
      Deserialize (Object, "stockType", Value.Stock_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsDetailsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsDetailsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PriceQuarantineVerdictDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "params", Value.Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PriceQuarantineVerdictDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PriceQuarantineVerdictDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "params", Value.Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PriceQuarantineVerdictDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PriceQuarantineVerdictDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PromoOfferParamsDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "discountParams", Value.Discount_Params);
      Serialize (Into, "promocodeParams", Value.Promocode_Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PromoOfferParamsDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PromoOfferParamsDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "discountParams", Value.Discount_Params);
      Deserialize (Object, "promocodeParams", Value.Promocode_Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PromoOfferParamsDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PromoOfferParamsDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ProvideOrderItemIdentifiersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ProvideOrderItemIdentifiersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ProvideOrderItemIdentifiersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ProvideOrderItemIdentifiersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ProvideOrderItemIdentifiersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnInstanceDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "stockType", Value.Stock_Type);
      Serialize (Into, "status", Value.Status);
      if not Value.Cis.Is_Null then
         Into.Write_Entity ("cis", Value.Cis);
      end if;
      if not Value.Imei.Is_Null then
         Into.Write_Entity ("imei", Value.Imei);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnInstanceDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnInstanceDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "stockType", Value.Stock_Type);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "cis", Value.Cis);
      Swagger.Streams.Deserialize (Object, "imei", Value.Imei);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnInstanceDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnInstanceDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ShipmentInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Plan_Interval_From.Is_Null then
         Into.Write_Entity ("planIntervalFrom", Value.Plan_Interval_From);
      end if;
      if not Value.Plan_Interval_To.Is_Null then
         Into.Write_Entity ("planIntervalTo", Value.Plan_Interval_To);
      end if;
      Serialize (Into, "shipmentType", Value.Shipment_Type);
      Serialize (Into, "warehouse", Value.Warehouse);
      Serialize (Into, "warehouseTo", Value.Warehouse_To);
      if not Value.External_Id.Is_Null then
         Into.Write_Entity ("externalId", Value.External_Id);
      end if;
      Serialize (Into, "deliveryService", Value.Delivery_Service);
      Serialize (Into, "palletsCount", Value.Pallets_Count);
      Serialize (Into, "orderIds", Value.Order_Ids);
      if not Value.Draft_Count.Is_Null then
         Into.Write_Entity ("draftCount", Value.Draft_Count);
      end if;
      if not Value.Planned_Count.Is_Null then
         Into.Write_Entity ("plannedCount", Value.Planned_Count);
      end if;
      if not Value.Fact_Count.Is_Null then
         Into.Write_Entity ("factCount", Value.Fact_Count);
      end if;
      Serialize (Into, "status", Value.Status);
      if not Value.Status_Description.Is_Null then
         Into.Write_Entity ("statusDescription", Value.Status_Description);
      end if;
      if not Value.Status_Update_Time.Is_Null then
         Into.Write_Entity ("statusUpdateTime", Value.Status_Update_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ShipmentInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ShipmentInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "planIntervalFrom", Value.Plan_Interval_From);
      Swagger.Streams.Deserialize (Object, "planIntervalTo", Value.Plan_Interval_To);
      Deserialize (Object, "shipmentType", Value.Shipment_Type);
      Deserialize (Object, "warehouse", Value.Warehouse);
      Deserialize (Object, "warehouseTo", Value.Warehouse_To);
      Swagger.Streams.Deserialize (Object, "externalId", Value.External_Id);
      Deserialize (Object, "deliveryService", Value.Delivery_Service);
      Deserialize (Object, "palletsCount", Value.Pallets_Count);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
      Swagger.Streams.Deserialize (Object, "draftCount", Value.Draft_Count);
      Swagger.Streams.Deserialize (Object, "plannedCount", Value.Planned_Count);
      Swagger.Streams.Deserialize (Object, "factCount", Value.Fact_Count);
      Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "statusDescription", Value.Status_Description);
      Swagger.Streams.Deserialize (Object, "statusUpdateTime", Value.Status_Update_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ShipmentInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ShipmentInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SearchShipmentsResponseDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "shipments", Value.Shipments);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SearchShipmentsResponseDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SearchShipmentsResponseDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "shipments", Value.Shipments);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SearchShipmentsResponseDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SearchShipmentsResponseDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SearchShipmentsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SearchShipmentsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SearchShipmentsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SearchShipmentsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SearchShipmentsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetOrderBoxLayoutResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetOrderBoxLayoutResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetOrderBoxLayoutResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetOrderBoxLayoutResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetOrderBoxLayoutResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetOrderDeliveryDateRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "dates", Value.Dates);
      Serialize (Into, "reason", Value.Reason);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetOrderDeliveryDateRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetOrderDeliveryDateRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "dates", Value.Dates);
      Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetOrderDeliveryDateRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetOrderDeliveryDateRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SetOrderShipmentBoxesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SetOrderShipmentBoxesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SetOrderShipmentBoxesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SetOrderShipmentBoxesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SetOrderShipmentBoxesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SuggestPricesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SuggestPricesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SuggestPricesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SuggestPricesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SuggestPricesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.TariffDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "percent", Value.Percent);
      Serialize (Into, "amount", Value.Amount);
      Serialize (Into, "parameters", Value.Parameters);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in TariffDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.TariffDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "percent", Value.Percent);
      Swagger.Streams.Deserialize (Object, "amount", Value.Amount);
      Deserialize (Object, "parameters", Value.Parameters);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out TariffDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.TariffDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateGoodsFeedbackCommentResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateGoodsFeedbackCommentResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateGoodsFeedbackCommentResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateGoodsFeedbackCommentResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateGoodsFeedbackCommentResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferContentResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "results", Value.Results);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferContentResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferContentResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "results", Value.Results);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferContentResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferContentResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOfferMappingsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "results", Value.Results);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOfferMappingsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOfferMappingsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "results", Value.Results);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOfferMappingsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOfferMappingsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderItemRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "items", Value.Items);
      Serialize (Into, "reason", Value.Reason);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderItemRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderItemRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "items", Value.Items);
      Deserialize (Object, "reason", Value.Reason);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderItemRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderItemRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdateOrderStatusesResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdateOrderStatusesResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdateOrderStatusesResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdateOrderStatusesResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdateOrderStatusesResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePromoOffersResultDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "rejectedOffers", Value.Rejected_Offers);
      Serialize (Into, "warningOffers", Value.Warning_Offers);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePromoOffersResultDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePromoOffersResultDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "rejectedOffers", Value.Rejected_Offers);
      Deserialize (Object, "warningOffers", Value.Warning_Offers);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePromoOffersResultDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePromoOffersResultDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UpdatePromoOffersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UpdatePromoOffersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UpdatePromoOffersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UpdatePromoOffersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UpdatePromoOffersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.VerifyOrderEacResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "result", Value.Result);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in VerifyOrderEacResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.VerifyOrderEacResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "result", Value.Result);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out VerifyOrderEacResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.VerifyOrderEacResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FeedPublicationDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "full", Value.Full);
      Serialize (Into, "priceAndStockUpdate", Value.Price_And_Stock_Update);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FeedPublicationDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FeedPublicationDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "full", Value.Full);
      Deserialize (Object, "priceAndStockUpdate", Value.Price_And_Stock_Update);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FeedPublicationDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FeedPublicationDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetCategoriesMaxSaleQuantumResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "status", Value.Status);
      Serialize (Into, "results", Value.Results);
      Serialize (Into, "errors", Value.Errors);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetCategoriesMaxSaleQuantumResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetCategoriesMaxSaleQuantumResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "status", Value.Status);
      Deserialize (Object, "results", Value.Results);
      Deserialize (Object, "errors", Value.Errors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetCategoriesMaxSaleQuantumResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetCategoriesMaxSaleQuantumResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOrdersResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "pager", Value.Pager);
      Serialize (Into, "orders", Value.Orders);
      Serialize (Into, "paging", Value.Paging);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOrdersResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOrdersResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "pager", Value.Pager);
      Deserialize (Object, "orders", Value.Orders);
      Deserialize (Object, "paging", Value.Paging);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOrdersResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOrdersResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GetOutletsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "outlets", Value.Outlets);
      Serialize (Into, "paging", Value.Paging);
      Serialize (Into, "pager", Value.Pager);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GetOutletsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GetOutletsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "outlets", Value.Outlets);
      Deserialize (Object, "paging", Value.Paging);
      Deserialize (Object, "pager", Value.Pager);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GetOutletsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GetOutletsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Offer_Name.Is_Null then
         Into.Write_Entity ("offerName", Value.Offer_Name);
      end if;
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      if not Value.Count.Is_Null then
         Into.Write_Entity ("count", Value.Count);
      end if;
      Serialize (Into, "prices", Value.Prices);
      Serialize (Into, "warehouse", Value.Warehouse);
      Serialize (Into, "details", Value.Details);
      Serialize (Into, "cisList", Value.Cis_List);
      if not Value.Initial_Count.Is_Null then
         Into.Write_Entity ("initialCount", Value.Initial_Count);
      end if;
      if not Value.Bid_Fee.Is_Null then
         Into.Write_Entity ("bidFee", Value.Bid_Fee);
      end if;
      Serialize (Into, "cofinanceThreshold", Value.Cofinance_Threshold);
      Serialize (Into, "cofinanceValue", Value.Cofinance_Value);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerName", Value.Offer_Name);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Deserialize (Object, "prices", Value.Prices);
      Deserialize (Object, "warehouse", Value.Warehouse);
      Deserialize (Object, "details", Value.Details);
      Swagger.Streams.Deserialize (Object, "cisList", Value.Cis_List);
      Swagger.Streams.Deserialize (Object, "initialCount", Value.Initial_Count);
      Swagger.Streams.Deserialize (Object, "bidFee", Value.Bid_Fee);
      Swagger.Streams.Deserialize (Object, "cofinanceThreshold", Value.Cofinance_Threshold);
      Swagger.Streams.Deserialize (Object, "cofinanceValue", Value.Cofinance_Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrdersStatsPaymentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Serialize (Into, "type", Value.P_Type);
      Serialize (Into, "source", Value.Source);
      Serialize (Into, "total", Value.Total);
      Serialize (Into, "paymentOrder", Value.Payment_Order);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrdersStatsPaymentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrdersStatsPaymentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
      Deserialize (Object, "type", Value.P_Type);
      Deserialize (Object, "source", Value.Source);
      Swagger.Streams.Deserialize (Object, "total", Value.Total);
      Deserialize (Object, "paymentOrder", Value.Payment_Order);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrdersStatsPaymentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrdersStatsPaymentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnDecisionDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Return_Item_Id.Is_Null then
         Into.Write_Entity ("returnItemId", Value.Return_Item_Id);
      end if;
      if not Value.Count.Is_Null then
         Into.Write_Entity ("count", Value.Count);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      Serialize (Into, "reasonType", Value.Reason_Type);
      Serialize (Into, "subreasonType", Value.Subreason_Type);
      Serialize (Into, "decisionType", Value.Decision_Type);
      if not Value.Refund_Amount.Is_Null then
         Into.Write_Entity ("refundAmount", Value.Refund_Amount);
      end if;
      if not Value.Partner_Compensation.Is_Null then
         Into.Write_Entity ("partnerCompensation", Value.Partner_Compensation);
      end if;
      Serialize (Into, "images", Value.Images);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnDecisionDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnDecisionDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "returnItemId", Value.Return_Item_Id);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Deserialize (Object, "reasonType", Value.Reason_Type);
      Deserialize (Object, "subreasonType", Value.Subreason_Type);
      Deserialize (Object, "decisionType", Value.Decision_Type);
      Swagger.Streams.Deserialize (Object, "refundAmount", Value.Refund_Amount);
      Swagger.Streams.Deserialize (Object, "partnerCompensation", Value.Partner_Compensation);
      Swagger.Streams.Deserialize (Object, "images", Value.Images);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnDecisionDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnDecisionDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ReturnItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Market_Sku.Is_Null then
         Into.Write_Entity ("marketSku", Value.Market_Sku);
      end if;
      Into.Write_Entity ("shopSku", Value.Shop_Sku);
      Into.Write_Long_Entity ("count", Value.Count);
      Serialize (Into, "decisions", Value.Decisions);
      Serialize (Into, "instances", Value.Instances);
      Serialize (Into, "tracks", Value.Tracks);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ReturnItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ReturnItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "marketSku", Value.Market_Sku);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Deserialize (Object, "decisions", Value.Decisions);
      Deserialize (Object, "instances", Value.Instances);
      Deserialize (Object, "tracks", Value.Tracks);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ReturnItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ReturnItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SearchModelsResponse_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "models", Value.Models);
      Serialize (Into, "currency", Value.Currency);
      if not Value.Region_Id.Is_Null then
         Into.Write_Entity ("regionId", Value.Region_Id);
      end if;
      Serialize (Into, "pager", Value.Pager);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SearchModelsResponse_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SearchModelsResponse_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "models", Value.Models);
      Deserialize (Object, "currency", Value.Currency);
      Swagger.Streams.Deserialize (Object, "regionId", Value.Region_Id);
      Deserialize (Object, "pager", Value.Pager);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SearchModelsResponse_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SearchModelsResponse_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BaseShipmentDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Plan_Interval_From.Is_Null then
         Into.Write_Entity ("planIntervalFrom", Value.Plan_Interval_From);
      end if;
      if not Value.Plan_Interval_To.Is_Null then
         Into.Write_Entity ("planIntervalTo", Value.Plan_Interval_To);
      end if;
      Serialize (Into, "shipmentType", Value.Shipment_Type);
      Serialize (Into, "warehouse", Value.Warehouse);
      Serialize (Into, "warehouseTo", Value.Warehouse_To);
      if not Value.External_Id.Is_Null then
         Into.Write_Entity ("externalId", Value.External_Id);
      end if;
      Serialize (Into, "deliveryService", Value.Delivery_Service);
      Serialize (Into, "palletsCount", Value.Pallets_Count);
      Serialize (Into, "orderIds", Value.Order_Ids);
      if not Value.Draft_Count.Is_Null then
         Into.Write_Entity ("draftCount", Value.Draft_Count);
      end if;
      if not Value.Planned_Count.Is_Null then
         Into.Write_Entity ("plannedCount", Value.Planned_Count);
      end if;
      if not Value.Fact_Count.Is_Null then
         Into.Write_Entity ("factCount", Value.Fact_Count);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BaseShipmentDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BaseShipmentDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "planIntervalFrom", Value.Plan_Interval_From);
      Swagger.Streams.Deserialize (Object, "planIntervalTo", Value.Plan_Interval_To);
      Deserialize (Object, "shipmentType", Value.Shipment_Type);
      Deserialize (Object, "warehouse", Value.Warehouse);
      Deserialize (Object, "warehouseTo", Value.Warehouse_To);
      Swagger.Streams.Deserialize (Object, "externalId", Value.External_Id);
      Deserialize (Object, "deliveryService", Value.Delivery_Service);
      Deserialize (Object, "palletsCount", Value.Pallets_Count);
      Swagger.Streams.Deserialize (Object, "orderIds", Value.Order_Ids);
      Swagger.Streams.Deserialize (Object, "draftCount", Value.Draft_Count);
      Swagger.Streams.Deserialize (Object, "plannedCount", Value.Planned_Count);
      Swagger.Streams.Deserialize (Object, "factCount", Value.Fact_Count);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BaseShipmentDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BaseShipmentDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ChangeOutletRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Coords.Is_Null then
         Into.Write_Entity ("coords", Value.Coords);
      end if;
      if not Value.Is_Main.Is_Null then
         Into.Write_Entity ("isMain", Value.Is_Main);
      end if;
      if not Value.Shop_Outlet_Code.Is_Null then
         Into.Write_Entity ("shopOutletCode", Value.Shop_Outlet_Code);
      end if;
      Serialize (Into, "visibility", Value.Visibility);
      Serialize (Into, "address", Value.Address);
      Serialize (Into, "phones", Value.Phones);
      Serialize (Into, "workingSchedule", Value.Working_Schedule);
      Serialize (Into, "deliveryRules", Value.Delivery_Rules);
      if not Value.Storage_Period.Is_Null then
         Into.Write_Entity ("storagePeriod", Value.Storage_Period);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ChangeOutletRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ChangeOutletRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "coords", Value.Coords);
      Swagger.Streams.Deserialize (Object, "isMain", Value.Is_Main);
      Swagger.Streams.Deserialize (Object, "shopOutletCode", Value.Shop_Outlet_Code);
      Deserialize (Object, "visibility", Value.Visibility);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "phones", Value.Phones);
      Deserialize (Object, "workingSchedule", Value.Working_Schedule);
      Deserialize (Object, "deliveryRules", Value.Delivery_Rules);
      Swagger.Streams.Deserialize (Object, "storagePeriod", Value.Storage_Period);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ChangeOutletRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ChangeOutletRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MappingsOfferInfoDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Feed_Id.Is_Null then
         Into.Write_Entity ("feedId", Value.Feed_Id);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      Serialize (Into, "urls", Value.Urls);
      Serialize (Into, "pictures", Value.Pictures);
      if not Value.Manufacturer.Is_Null then
         Into.Write_Entity ("manufacturer", Value.Manufacturer);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      if not Value.Min_Shipment.Is_Null then
         Into.Write_Entity ("minShipment", Value.Min_Shipment);
      end if;
      if not Value.Transport_Unit_Size.Is_Null then
         Into.Write_Entity ("transportUnitSize", Value.Transport_Unit_Size);
      end if;
      if not Value.Quantum_Of_Supply.Is_Null then
         Into.Write_Entity ("quantumOfSupply", Value.Quantum_Of_Supply);
      end if;
      if not Value.Delivery_Duration_Days.Is_Null then
         Into.Write_Entity ("deliveryDurationDays", Value.Delivery_Duration_Days);
      end if;
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      Serialize (Into, "supplyScheduleDays", Value.Supply_Schedule_Days);
      if not Value.Shelf_Life_Days.Is_Null then
         Into.Write_Entity ("shelfLifeDays", Value.Shelf_Life_Days);
      end if;
      if not Value.Life_Time_Days.Is_Null then
         Into.Write_Entity ("lifeTimeDays", Value.Life_Time_Days);
      end if;
      if not Value.Guarantee_Period_Days.Is_Null then
         Into.Write_Entity ("guaranteePeriodDays", Value.Guarantee_Period_Days);
      end if;
      Serialize (Into, "processingState", Value.Processing_State);
      Serialize (Into, "availability", Value.Availability);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Certificate.Is_Null then
         Into.Write_Entity ("certificate", Value.Certificate);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MappingsOfferInfoDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MappingsOfferInfoDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "feedId", Value.Feed_Id);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "urls", Value.Urls);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "manufacturer", Value.Manufacturer);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Swagger.Streams.Deserialize (Object, "minShipment", Value.Min_Shipment);
      Swagger.Streams.Deserialize (Object, "transportUnitSize", Value.Transport_Unit_Size);
      Swagger.Streams.Deserialize (Object, "quantumOfSupply", Value.Quantum_Of_Supply);
      Swagger.Streams.Deserialize (Object, "deliveryDurationDays", Value.Delivery_Duration_Days);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Swagger.Streams.Deserialize (Object, "customsCommodityCodes", Value.Customs_Commodity_Codes);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Deserialize (Object, "supplyScheduleDays", Value.Supply_Schedule_Days);
      Swagger.Streams.Deserialize (Object, "shelfLifeDays", Value.Shelf_Life_Days);
      Swagger.Streams.Deserialize (Object, "lifeTimeDays", Value.Life_Time_Days);
      Swagger.Streams.Deserialize (Object, "guaranteePeriodDays", Value.Guarantee_Period_Days);
      Deserialize (Object, "processingState", Value.Processing_State);
      Deserialize (Object, "availability", Value.Availability);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "certificate", Value.Certificate);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MappingsOfferInfoDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MappingsOfferInfoDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OutletDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("name", Value.Name);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Coords.Is_Null then
         Into.Write_Entity ("coords", Value.Coords);
      end if;
      if not Value.Is_Main.Is_Null then
         Into.Write_Entity ("isMain", Value.Is_Main);
      end if;
      if not Value.Shop_Outlet_Code.Is_Null then
         Into.Write_Entity ("shopOutletCode", Value.Shop_Outlet_Code);
      end if;
      Serialize (Into, "visibility", Value.Visibility);
      Serialize (Into, "address", Value.Address);
      Serialize (Into, "phones", Value.Phones);
      Serialize (Into, "workingSchedule", Value.Working_Schedule);
      Serialize (Into, "deliveryRules", Value.Delivery_Rules);
      if not Value.Storage_Period.Is_Null then
         Into.Write_Entity ("storagePeriod", Value.Storage_Period);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OutletDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OutletDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "coords", Value.Coords);
      Swagger.Streams.Deserialize (Object, "isMain", Value.Is_Main);
      Swagger.Streams.Deserialize (Object, "shopOutletCode", Value.Shop_Outlet_Code);
      Deserialize (Object, "visibility", Value.Visibility);
      Deserialize (Object, "address", Value.Address);
      Swagger.Streams.Deserialize (Object, "phones", Value.Phones);
      Deserialize (Object, "workingSchedule", Value.Working_Schedule);
      Deserialize (Object, "deliveryRules", Value.Delivery_Rules);
      Swagger.Streams.Deserialize (Object, "storagePeriod", Value.Storage_Period);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OutletDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OutletDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.OrderItemDTO_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Offer_Id.Is_Null then
         Into.Write_Entity ("offerId", Value.Offer_Id);
      end if;
      if not Value.Offer_Name.Is_Null then
         Into.Write_Entity ("offerName", Value.Offer_Name);
      end if;
      Serialize (Into, "price", Value.Price);
      Serialize (Into, "buyerPrice", Value.Buyer_Price);
      Serialize (Into, "buyerPriceBeforeDiscount", Value.Buyer_Price_Before_Discount);
      Serialize (Into, "priceBeforeDiscount", Value.Price_Before_Discount);
      if not Value.Count.Is_Null then
         Into.Write_Entity ("count", Value.Count);
      end if;
      Serialize (Into, "vat", Value.Vat);
      if not Value.Shop_Sku.Is_Null then
         Into.Write_Entity ("shopSku", Value.Shop_Sku);
      end if;
      Serialize (Into, "subsidy", Value.Subsidy);
      if not Value.Partner_Warehouse_Id.Is_Null then
         Into.Write_Entity ("partnerWarehouseId", Value.Partner_Warehouse_Id);
      end if;
      Serialize (Into, "promos", Value.Promos);
      Serialize (Into, "instances", Value.Instances);
      Serialize (Into, "details", Value.Details);
      Serialize (Into, "subsidies", Value.Subsidies);
      Serialize (Into, "requiredInstanceTypes", Value.Required_Instance_Types);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in OrderItemDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.OrderItemDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "offerName", Value.Offer_Name);
      Swagger.Streams.Deserialize (Object, "price", Value.Price);
      Swagger.Streams.Deserialize (Object, "buyerPrice", Value.Buyer_Price);
      Swagger.Streams.Deserialize (Object, "buyerPriceBeforeDiscount", Value.Buyer_Price_Before_Discount);
      Swagger.Streams.Deserialize (Object, "priceBeforeDiscount", Value.Price_Before_Discount);
      Swagger.Streams.Deserialize (Object, "count", Value.Count);
      Deserialize (Object, "vat", Value.Vat);
      Swagger.Streams.Deserialize (Object, "shopSku", Value.Shop_Sku);
      Swagger.Streams.Deserialize (Object, "subsidy", Value.Subsidy);
      Swagger.Streams.Deserialize (Object, "partnerWarehouseId", Value.Partner_Warehouse_Id);
      Deserialize (Object, "promos", Value.Promos);
      Deserialize (Object, "instances", Value.Instances);
      Deserialize (Object, "details", Value.Details);
      Deserialize (Object, "subsidies", Value.Subsidies);
      Deserialize (Object, "requiredInstanceTypes", Value.Required_Instance_Types);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out OrderItemDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.OrderItemDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BaseOfferDTO_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("offerId", Value.Offer_Id);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Market_Category_Id.Is_Null then
         Into.Write_Entity ("marketCategoryId", Value.Market_Category_Id);
      end if;
      if not Value.Category.Is_Null then
         Into.Write_Entity ("category", Value.Category);
      end if;
      Serialize (Into, "pictures", Value.Pictures);
      Serialize (Into, "videos", Value.Videos);
      Serialize (Into, "manuals", Value.Manuals);
      if not Value.Vendor.Is_Null then
         Into.Write_Entity ("vendor", Value.Vendor);
      end if;
      Serialize (Into, "barcodes", Value.Barcodes);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "manufacturerCountries", Value.Manufacturer_Countries);
      Serialize (Into, "weightDimensions", Value.Weight_Dimensions);
      if not Value.Vendor_Code.Is_Null then
         Into.Write_Entity ("vendorCode", Value.Vendor_Code);
      end if;
      Serialize (Into, "tags", Value.Tags);
      Serialize (Into, "shelfLife", Value.Shelf_Life);
      Serialize (Into, "lifeTime", Value.Life_Time);
      Serialize (Into, "guaranteePeriod", Value.Guarantee_Period);
      if not Value.Customs_Commodity_Code.Is_Null then
         Into.Write_Entity ("customsCommodityCode", Value.Customs_Commodity_Code);
      end if;
      Serialize (Into, "certificates", Value.Certificates);
      if not Value.Box_Count.Is_Null then
         Into.Write_Entity ("boxCount", Value.Box_Count);
      end if;
      Serialize (Into, "condition", Value.Condition);
      Serialize (Into, "type", Value.P_Type);
      if not Value.Downloadable.Is_Null then
         Into.Write_Entity ("downloadable", Value.Downloadable);
      end if;
      if not Value.Adult.Is_Null then
         Into.Write_Entity ("adult", Value.Adult);
      end if;
      Serialize (Into, "age", Value.Age);
      Serialize (Into, "params", Value.Params);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BaseOfferDTO_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BaseOfferDTO_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "offerId", Value.Offer_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "marketCategoryId", Value.Market_Category_Id);
      Swagger.Streams.Deserialize (Object, "category", Value.Category);
      Swagger.Streams.Deserialize (Object, "pictures", Value.Pictures);
      Swagger.Streams.Deserialize (Object, "videos", Value.Videos);
      Deserialize (Object, "manuals", Value.Manuals);
      Swagger.Streams.Deserialize (Object, "vendor", Value.Vendor);
      Swagger.Streams.Deserialize (Object, "barcodes", Value.Barcodes);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "manufacturerCountries", Value.Manufacturer_Countries);
      Deserialize (Object, "weightDimensions", Value.Weight_Dimensions);
      Swagger.Streams.Deserialize (Object, "vendorCode", Value.Vendor_Code);
      Swagger.Streams.Deserialize (Object, "tags", Value.Tags);
      Deserialize (Object, "shelfLife", Value.Shelf_Life);
      Deserialize (Object, "lifeTime", Value.Life_Time);
      Deserialize (Object, "guaranteePeriod", Value.Guarantee_Period);
      Swagger.Streams.Deserialize (Object, "customsCommodityCode", Value.Customs_Commodity_Code);
      Swagger.Streams.Deserialize (Object, "certificates", Value.Certificates);
      Swagger.Streams.Deserialize (Object, "boxCount", Value.Box_Count);
      Deserialize (Object, "condition", Value.Condition);
      Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "downloadable", Value.Downloadable);
      Swagger.Streams.Deserialize (Object, "adult", Value.Adult);
      Deserialize (Object, "age", Value.Age);
      Deserialize (Object, "params", Value.Params);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BaseOfferDTO_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BaseOfferDTO_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
