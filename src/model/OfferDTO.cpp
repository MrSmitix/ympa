/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferDTO::OfferDTO()
{
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_FeedId = 0L;
    m_FeedIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ShopCategoryId = utility::conversions::to_string_t("");
    m_ShopCategoryIdIsSet = false;
    m_MarketCategoryId = 0;
    m_MarketCategoryIdIsSet = false;
    m_PreDiscountPrice = 0.0;
    m_PreDiscountPriceIsSet = false;
    m_Discount = 0;
    m_DiscountIsSet = false;
    m_CutPrice = false;
    m_CutPriceIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ModelId = 0L;
    m_ModelIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_CurrencyIsSet = false;
    m_Bid = 0.0;
    m_BidIsSet = false;
    m_Cbid = 0.0;
    m_CbidIsSet = false;
    m_Fee = 0.0;
    m_FeeIsSet = false;
    m_Blocked = false;
    m_BlockedIsSet = false;
}

OfferDTO::~OfferDTO()
{
}

void OfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_FeedIdIsSet)
    {
        val[utility::conversions::to_string_t(U("feedId"))] = ModelBase::toJson(m_FeedId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ShopCategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("shopCategoryId"))] = ModelBase::toJson(m_ShopCategoryId);
    }
    if(m_MarketCategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("marketCategoryId"))] = ModelBase::toJson(m_MarketCategoryId);
    }
    if(m_PreDiscountPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("preDiscountPrice"))] = ModelBase::toJson(m_PreDiscountPrice);
    }
    if(m_DiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("discount"))] = ModelBase::toJson(m_Discount);
    }
    if(m_CutPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("cutPrice"))] = ModelBase::toJson(m_CutPrice);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_ModelIdIsSet)
    {
        val[utility::conversions::to_string_t(U("modelId"))] = ModelBase::toJson(m_ModelId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_BidIsSet)
    {
        val[utility::conversions::to_string_t(U("bid"))] = ModelBase::toJson(m_Bid);
    }
    if(m_CbidIsSet)
    {
        val[utility::conversions::to_string_t(U("cbid"))] = ModelBase::toJson(m_Cbid);
    }
    if(m_FeeIsSet)
    {
        val[utility::conversions::to_string_t(U("fee"))] = ModelBase::toJson(m_Fee);
    }
    if(m_BlockedIsSet)
    {
        val[utility::conversions::to_string_t(U("blocked"))] = ModelBase::toJson(m_Blocked);
    }

    return val;
}

bool OfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feedId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feedId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setFeedId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedId);
            setFeedId(refVal_setFeedId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopCategoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopCategoryId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopCategoryId);
            setShopCategoryId(refVal_setShopCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marketCategoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marketCategoryId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMarketCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketCategoryId);
            setMarketCategoryId(refVal_setMarketCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preDiscountPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preDiscountPrice")));
        if(!fieldValue.is_null())
        {
            double refVal_setPreDiscountPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreDiscountPrice);
            setPreDiscountPrice(refVal_setPreDiscountPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscount);
            setDiscount(refVal_setDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cutPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cutPrice")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCutPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCutPrice);
            setCutPrice(refVal_setCutPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modelId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modelId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setModelId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModelId);
            setModelId(refVal_setModelId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CurrencyType> refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid")));
        if(!fieldValue.is_null())
        {
            double refVal_setBid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBid);
            setBid(refVal_setBid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cbid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cbid")));
        if(!fieldValue.is_null())
        {
            double refVal_setCbid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCbid);
            setCbid(refVal_setCbid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fee"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fee")));
        if(!fieldValue.is_null())
        {
            double refVal_setFee;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFee);
            setFee(refVal_setFee);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("blocked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("blocked")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBlocked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlocked);
            setBlocked(refVal_setBlocked);
        }
    }
    return ok;
}

void OfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_FeedIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feedId")), m_FeedId));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ShopCategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopCategoryId")), m_ShopCategoryId));
    }
    if(m_MarketCategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marketCategoryId")), m_MarketCategoryId));
    }
    if(m_PreDiscountPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preDiscountPrice")), m_PreDiscountPrice));
    }
    if(m_DiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discount")), m_Discount));
    }
    if(m_CutPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cutPrice")), m_CutPrice));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_ModelIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modelId")), m_ModelId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_BidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid")), m_Bid));
    }
    if(m_CbidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cbid")), m_Cbid));
    }
    if(m_FeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fee")), m_Fee));
    }
    if(m_BlockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("blocked")), m_Blocked));
    }
}

bool OfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feedId"))))
    {
        int64_t refVal_setFeedId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feedId"))), refVal_setFeedId );
        setFeedId(refVal_setFeedId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopCategoryId"))))
    {
        utility::string_t refVal_setShopCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopCategoryId"))), refVal_setShopCategoryId );
        setShopCategoryId(refVal_setShopCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marketCategoryId"))))
    {
        int32_t refVal_setMarketCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marketCategoryId"))), refVal_setMarketCategoryId );
        setMarketCategoryId(refVal_setMarketCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preDiscountPrice"))))
    {
        double refVal_setPreDiscountPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preDiscountPrice"))), refVal_setPreDiscountPrice );
        setPreDiscountPrice(refVal_setPreDiscountPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discount"))))
    {
        int32_t refVal_setDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discount"))), refVal_setDiscount );
        setDiscount(refVal_setDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cutPrice"))))
    {
        bool refVal_setCutPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cutPrice"))), refVal_setCutPrice );
        setCutPrice(refVal_setCutPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modelId"))))
    {
        int64_t refVal_setModelId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modelId"))), refVal_setModelId );
        setModelId(refVal_setModelId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        std::shared_ptr<CurrencyType> refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid"))))
    {
        double refVal_setBid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid"))), refVal_setBid );
        setBid(refVal_setBid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cbid"))))
    {
        double refVal_setCbid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cbid"))), refVal_setCbid );
        setCbid(refVal_setCbid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fee"))))
    {
        double refVal_setFee;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fee"))), refVal_setFee );
        setFee(refVal_setFee);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("blocked"))))
    {
        bool refVal_setBlocked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("blocked"))), refVal_setBlocked );
        setBlocked(refVal_setBlocked);
    }
    return ok;
}

double OfferDTO::getPrice() const
{
    return m_Price;
}

void OfferDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool OfferDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void OfferDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t OfferDTO::getFeedId() const
{
    return m_FeedId;
}

void OfferDTO::setFeedId(int64_t value)
{
    m_FeedId = value;
    m_FeedIdIsSet = true;
}

bool OfferDTO::feedIdIsSet() const
{
    return m_FeedIdIsSet;
}

void OfferDTO::unsetFeedId()
{
    m_FeedIdIsSet = false;
}
utility::string_t OfferDTO::getId() const
{
    return m_Id;
}

void OfferDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OfferDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OfferDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OfferDTO::getShopCategoryId() const
{
    return m_ShopCategoryId;
}

void OfferDTO::setShopCategoryId(const utility::string_t& value)
{
    m_ShopCategoryId = value;
    m_ShopCategoryIdIsSet = true;
}

bool OfferDTO::shopCategoryIdIsSet() const
{
    return m_ShopCategoryIdIsSet;
}

void OfferDTO::unsetShopCategoryId()
{
    m_ShopCategoryIdIsSet = false;
}
int32_t OfferDTO::getMarketCategoryId() const
{
    return m_MarketCategoryId;
}

void OfferDTO::setMarketCategoryId(int32_t value)
{
    m_MarketCategoryId = value;
    m_MarketCategoryIdIsSet = true;
}

bool OfferDTO::marketCategoryIdIsSet() const
{
    return m_MarketCategoryIdIsSet;
}

void OfferDTO::unsetMarketCategoryId()
{
    m_MarketCategoryIdIsSet = false;
}
double OfferDTO::getPreDiscountPrice() const
{
    return m_PreDiscountPrice;
}

void OfferDTO::setPreDiscountPrice(double value)
{
    m_PreDiscountPrice = value;
    m_PreDiscountPriceIsSet = true;
}

bool OfferDTO::preDiscountPriceIsSet() const
{
    return m_PreDiscountPriceIsSet;
}

void OfferDTO::unsetPreDiscountPrice()
{
    m_PreDiscountPriceIsSet = false;
}
int32_t OfferDTO::getDiscount() const
{
    return m_Discount;
}

void OfferDTO::setDiscount(int32_t value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}

bool OfferDTO::discountIsSet() const
{
    return m_DiscountIsSet;
}

void OfferDTO::unsetDiscount()
{
    m_DiscountIsSet = false;
}
bool OfferDTO::isCutPrice() const
{
    return m_CutPrice;
}

void OfferDTO::setCutPrice(bool value)
{
    m_CutPrice = value;
    m_CutPriceIsSet = true;
}

bool OfferDTO::cutPriceIsSet() const
{
    return m_CutPriceIsSet;
}

void OfferDTO::unsetCutPrice()
{
    m_CutPriceIsSet = false;
}
utility::string_t OfferDTO::getUrl() const
{
    return m_Url;
}

void OfferDTO::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool OfferDTO::urlIsSet() const
{
    return m_UrlIsSet;
}

void OfferDTO::unsetUrl()
{
    m_UrlIsSet = false;
}
int64_t OfferDTO::getModelId() const
{
    return m_ModelId;
}

void OfferDTO::setModelId(int64_t value)
{
    m_ModelId = value;
    m_ModelIdIsSet = true;
}

bool OfferDTO::modelIdIsSet() const
{
    return m_ModelIdIsSet;
}

void OfferDTO::unsetModelId()
{
    m_ModelIdIsSet = false;
}
utility::string_t OfferDTO::getName() const
{
    return m_Name;
}

void OfferDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool OfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void OfferDTO::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<CurrencyType> OfferDTO::getCurrency() const
{
    return m_Currency;
}

void OfferDTO::setCurrency(const std::shared_ptr<CurrencyType>& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool OfferDTO::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void OfferDTO::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
double OfferDTO::getBid() const
{
    return m_Bid;
}

void OfferDTO::setBid(double value)
{
    m_Bid = value;
    m_BidIsSet = true;
}

bool OfferDTO::bidIsSet() const
{
    return m_BidIsSet;
}

void OfferDTO::unsetBid()
{
    m_BidIsSet = false;
}
double OfferDTO::getCbid() const
{
    return m_Cbid;
}

void OfferDTO::setCbid(double value)
{
    m_Cbid = value;
    m_CbidIsSet = true;
}

bool OfferDTO::cbidIsSet() const
{
    return m_CbidIsSet;
}

void OfferDTO::unsetCbid()
{
    m_CbidIsSet = false;
}
double OfferDTO::getFee() const
{
    return m_Fee;
}

void OfferDTO::setFee(double value)
{
    m_Fee = value;
    m_FeeIsSet = true;
}

bool OfferDTO::feeIsSet() const
{
    return m_FeeIsSet;
}

void OfferDTO::unsetFee()
{
    m_FeeIsSet = false;
}
bool OfferDTO::isBlocked() const
{
    return m_Blocked;
}

void OfferDTO::setBlocked(bool value)
{
    m_Blocked = value;
    m_BlockedIsSet = true;
}

bool OfferDTO::blockedIsSet() const
{
    return m_BlockedIsSet;
}

void OfferDTO::unsetBlocked()
{
    m_BlockedIsSet = false;
}
}
}
}
}


