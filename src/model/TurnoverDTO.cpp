/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/TurnoverDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TurnoverDTO::TurnoverDTO()
{
    m_TurnoverIsSet = false;
    m_TurnoverDays = 0.0;
    m_TurnoverDaysIsSet = false;
}

TurnoverDTO::~TurnoverDTO()
{
}

void TurnoverDTO::validate()
{
    // TODO: implement validation
}

web::json::value TurnoverDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TurnoverIsSet)
    {
        val[utility::conversions::to_string_t(U("turnover"))] = ModelBase::toJson(m_Turnover);
    }
    if(m_TurnoverDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("turnoverDays"))] = ModelBase::toJson(m_TurnoverDays);
    }

    return val;
}

bool TurnoverDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("turnover"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("turnover")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TurnoverType> refVal_setTurnover;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTurnover);
            setTurnover(refVal_setTurnover);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("turnoverDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("turnoverDays")));
        if(!fieldValue.is_null())
        {
            double refVal_setTurnoverDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTurnoverDays);
            setTurnoverDays(refVal_setTurnoverDays);
        }
    }
    return ok;
}

void TurnoverDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TurnoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("turnover")), m_Turnover));
    }
    if(m_TurnoverDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("turnoverDays")), m_TurnoverDays));
    }
}

bool TurnoverDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("turnover"))))
    {
        std::shared_ptr<TurnoverType> refVal_setTurnover;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("turnover"))), refVal_setTurnover );
        setTurnover(refVal_setTurnover);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("turnoverDays"))))
    {
        double refVal_setTurnoverDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("turnoverDays"))), refVal_setTurnoverDays );
        setTurnoverDays(refVal_setTurnoverDays);
    }
    return ok;
}

std::shared_ptr<TurnoverType> TurnoverDTO::getTurnover() const
{
    return m_Turnover;
}

void TurnoverDTO::setTurnover(const std::shared_ptr<TurnoverType>& value)
{
    m_Turnover = value;
    m_TurnoverIsSet = true;
}

bool TurnoverDTO::turnoverIsSet() const
{
    return m_TurnoverIsSet;
}

void TurnoverDTO::unsetTurnover()
{
    m_TurnoverIsSet = false;
}
double TurnoverDTO::getTurnoverDays() const
{
    return m_TurnoverDays;
}

void TurnoverDTO::setTurnoverDays(double value)
{
    m_TurnoverDays = value;
    m_TurnoverDaysIsSet = true;
}

bool TurnoverDTO::turnoverDaysIsSet() const
{
    return m_TurnoverDaysIsSet;
}

void TurnoverDTO::unsetTurnoverDays()
{
    m_TurnoverDaysIsSet = false;
}
}
}
}
}


