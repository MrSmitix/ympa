/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ParameterValueConstraintsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ParameterValueConstraintsDTO::ParameterValueConstraintsDTO()
{
    m_MinValue = 0.0;
    m_MinValueIsSet = false;
    m_MaxValue = 0.0;
    m_MaxValueIsSet = false;
    m_MaxLength = 0;
    m_MaxLengthIsSet = false;
}

ParameterValueConstraintsDTO::~ParameterValueConstraintsDTO()
{
}

void ParameterValueConstraintsDTO::validate()
{
    // TODO: implement validation
}

web::json::value ParameterValueConstraintsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MinValueIsSet)
    {
        val[utility::conversions::to_string_t(U("minValue"))] = ModelBase::toJson(m_MinValue);
    }
    if(m_MaxValueIsSet)
    {
        val[utility::conversions::to_string_t(U("maxValue"))] = ModelBase::toJson(m_MaxValue);
    }
    if(m_MaxLengthIsSet)
    {
        val[utility::conversions::to_string_t(U("maxLength"))] = ModelBase::toJson(m_MaxLength);
    }

    return val;
}

bool ParameterValueConstraintsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("minValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minValue")));
        if(!fieldValue.is_null())
        {
            double refVal_setMinValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinValue);
            setMinValue(refVal_setMinValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxValue")));
        if(!fieldValue.is_null())
        {
            double refVal_setMaxValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxValue);
            setMaxValue(refVal_setMaxValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxLength"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxLength")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxLength);
            setMaxLength(refVal_setMaxLength);
        }
    }
    return ok;
}

void ParameterValueConstraintsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MinValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minValue")), m_MinValue));
    }
    if(m_MaxValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxValue")), m_MaxValue));
    }
    if(m_MaxLengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxLength")), m_MaxLength));
    }
}

bool ParameterValueConstraintsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("minValue"))))
    {
        double refVal_setMinValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minValue"))), refVal_setMinValue );
        setMinValue(refVal_setMinValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxValue"))))
    {
        double refVal_setMaxValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxValue"))), refVal_setMaxValue );
        setMaxValue(refVal_setMaxValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxLength"))))
    {
        int32_t refVal_setMaxLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxLength"))), refVal_setMaxLength );
        setMaxLength(refVal_setMaxLength);
    }
    return ok;
}

double ParameterValueConstraintsDTO::getMinValue() const
{
    return m_MinValue;
}

void ParameterValueConstraintsDTO::setMinValue(double value)
{
    m_MinValue = value;
    m_MinValueIsSet = true;
}

bool ParameterValueConstraintsDTO::minValueIsSet() const
{
    return m_MinValueIsSet;
}

void ParameterValueConstraintsDTO::unsetMinValue()
{
    m_MinValueIsSet = false;
}
double ParameterValueConstraintsDTO::getMaxValue() const
{
    return m_MaxValue;
}

void ParameterValueConstraintsDTO::setMaxValue(double value)
{
    m_MaxValue = value;
    m_MaxValueIsSet = true;
}

bool ParameterValueConstraintsDTO::maxValueIsSet() const
{
    return m_MaxValueIsSet;
}

void ParameterValueConstraintsDTO::unsetMaxValue()
{
    m_MaxValueIsSet = false;
}
int32_t ParameterValueConstraintsDTO::getMaxLength() const
{
    return m_MaxLength;
}

void ParameterValueConstraintsDTO::setMaxLength(int32_t value)
{
    m_MaxLength = value;
    m_MaxLengthIsSet = true;
}

bool ParameterValueConstraintsDTO::maxLengthIsSet() const
{
    return m_MaxLengthIsSet;
}

void ParameterValueConstraintsDTO::unsetMaxLength()
{
    m_MaxLengthIsSet = false;
}
}
}
}
}


