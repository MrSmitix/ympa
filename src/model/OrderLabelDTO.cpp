/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderLabelDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderLabelDTO::OrderLabelDTO()
{
    m_OrderId = 0L;
    m_OrderIdIsSet = false;
    m_PlacesNumber = 0;
    m_PlacesNumberIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ParcelBoxLabelsIsSet = false;
}

OrderLabelDTO::~OrderLabelDTO()
{
}

void OrderLabelDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderLabelDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("orderId"))] = ModelBase::toJson(m_OrderId);
    }
    if(m_PlacesNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("placesNumber"))] = ModelBase::toJson(m_PlacesNumber);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_ParcelBoxLabelsIsSet)
    {
        val[utility::conversions::to_string_t(U("parcelBoxLabels"))] = ModelBase::toJson(m_ParcelBoxLabels);
    }

    return val;
}

bool OrderLabelDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("orderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placesNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placesNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPlacesNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacesNumber);
            setPlacesNumber(refVal_setPlacesNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parcelBoxLabels"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parcelBoxLabels")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ParcelBoxLabelDTO>> refVal_setParcelBoxLabels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParcelBoxLabels);
            setParcelBoxLabels(refVal_setParcelBoxLabels);
        }
    }
    return ok;
}

void OrderLabelDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderId")), m_OrderId));
    }
    if(m_PlacesNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placesNumber")), m_PlacesNumber));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_ParcelBoxLabelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parcelBoxLabels")), m_ParcelBoxLabels));
    }
}

bool OrderLabelDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("orderId"))))
    {
        int64_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderId"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placesNumber"))))
    {
        int32_t refVal_setPlacesNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placesNumber"))), refVal_setPlacesNumber );
        setPlacesNumber(refVal_setPlacesNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parcelBoxLabels"))))
    {
        std::vector<std::shared_ptr<ParcelBoxLabelDTO>> refVal_setParcelBoxLabels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parcelBoxLabels"))), refVal_setParcelBoxLabels );
        setParcelBoxLabels(refVal_setParcelBoxLabels);
    }
    return ok;
}

int64_t OrderLabelDTO::getOrderId() const
{
    return m_OrderId;
}

void OrderLabelDTO::setOrderId(int64_t value)
{
    m_OrderId = value;
    m_OrderIdIsSet = true;
}

bool OrderLabelDTO::orderIdIsSet() const
{
    return m_OrderIdIsSet;
}

void OrderLabelDTO::unsetOrderId()
{
    m_OrderIdIsSet = false;
}
int32_t OrderLabelDTO::getPlacesNumber() const
{
    return m_PlacesNumber;
}

void OrderLabelDTO::setPlacesNumber(int32_t value)
{
    m_PlacesNumber = value;
    m_PlacesNumberIsSet = true;
}

bool OrderLabelDTO::placesNumberIsSet() const
{
    return m_PlacesNumberIsSet;
}

void OrderLabelDTO::unsetPlacesNumber()
{
    m_PlacesNumberIsSet = false;
}
utility::string_t OrderLabelDTO::getUrl() const
{
    return m_Url;
}

void OrderLabelDTO::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool OrderLabelDTO::urlIsSet() const
{
    return m_UrlIsSet;
}

void OrderLabelDTO::unsetUrl()
{
    m_UrlIsSet = false;
}
std::vector<std::shared_ptr<ParcelBoxLabelDTO>>& OrderLabelDTO::getParcelBoxLabels()
{
    return m_ParcelBoxLabels;
}

void OrderLabelDTO::setParcelBoxLabels(const std::vector<std::shared_ptr<ParcelBoxLabelDTO>>& value)
{
    m_ParcelBoxLabels = value;
    m_ParcelBoxLabelsIsSet = true;
}

bool OrderLabelDTO::parcelBoxLabelsIsSet() const
{
    return m_ParcelBoxLabelsIsSet;
}

void OrderLabelDTO::unsetParcelBoxLabels()
{
    m_ParcelBoxLabelsIsSet = false;
}
}
}
}
}


