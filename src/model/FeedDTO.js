/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedContentDTO from './FeedContentDTO';
import FeedDownloadDTO from './FeedDownloadDTO';
import FeedPlacementDTO from './FeedPlacementDTO';
import FeedPublicationDTO from './FeedPublicationDTO';

/**
 * The FeedDTO model module.
 * @module model/FeedDTO
 * @version LATEST
 */
class FeedDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {String} login
     * @type {String}
     */
    login;
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {String} password
     * @type {String}
     */
    password;
    /**
     * @member {Date} uploadDate
     * @type {Date}
     */
    uploadDate;
    /**
     * @member {String} url
     * @type {String}
     */
    url;
    /**
     * @member {module:model/FeedContentDTO} content
     * @type {module:model/FeedContentDTO}
     */
    content;
    /**
     * @member {module:model/FeedDownloadDTO} download
     * @type {module:model/FeedDownloadDTO}
     */
    download;
    /**
     * @member {module:model/FeedPlacementDTO} placement
     * @type {module:model/FeedPlacementDTO}
     */
    placement;
    /**
     * @member {module:model/FeedPublicationDTO} publication
     * @type {module:model/FeedPublicationDTO}
     */
    publication;

    

    /**
     * Constructs a new <code>FeedDTO</code>.
     * Информация о прайс-листе.
     * @alias module:model/FeedDTO
     */
    constructor() { 
        
        FeedDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedDTO} obj Optional instance to populate.
     * @return {module:model/FeedDTO} The populated <code>FeedDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('uploadDate')) {
                obj['uploadDate'] = ApiClient.convertToType(data['uploadDate'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = FeedContentDTO.constructFromObject(data['content']);
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = FeedDownloadDTO.constructFromObject(data['download']);
            }
            if (data.hasOwnProperty('placement')) {
                obj['placement'] = FeedPlacementDTO.constructFromObject(data['placement']);
            }
            if (data.hasOwnProperty('publication')) {
                obj['publication'] = FeedPublicationDTO.constructFromObject(data['publication']);
            }
        }
        return obj;
    }
}



export default FeedDTO;

