/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PickupAddressDTO model module.
 * @module model/PickupAddressDTO
 * @version LATEST
 */
class PickupAddressDTO {
    /**
     * @member {String} country
     * @type {String}
     */
    country;
    /**
     * @member {String} city
     * @type {String}
     */
    city;
    /**
     * @member {String} street
     * @type {String}
     */
    street;
    /**
     * @member {String} house
     * @type {String}
     */
    house;
    /**
     * @member {String} postcode
     * @type {String}
     */
    postcode;

    

    /**
     * Constructs a new <code>PickupAddressDTO</code>.
     * Адрес доставки.
     * @alias module:model/PickupAddressDTO
     */
    constructor() { 
        
        PickupAddressDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PickupAddressDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PickupAddressDTO} obj Optional instance to populate.
     * @return {module:model/PickupAddressDTO} The populated <code>PickupAddressDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PickupAddressDTO();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('house')) {
                obj['house'] = ApiClient.convertToType(data['house'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
        }
        return obj;
    }
}



export default PickupAddressDTO;

