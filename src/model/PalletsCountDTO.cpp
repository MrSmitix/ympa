/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/PalletsCountDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PalletsCountDTO::PalletsCountDTO()
{
    m_Planned = 0;
    m_PlannedIsSet = false;
    m_Fact = 0;
    m_FactIsSet = false;
}

PalletsCountDTO::~PalletsCountDTO()
{
}

void PalletsCountDTO::validate()
{
    // TODO: implement validation
}

web::json::value PalletsCountDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PlannedIsSet)
    {
        val[utility::conversions::to_string_t(U("planned"))] = ModelBase::toJson(m_Planned);
    }
    if(m_FactIsSet)
    {
        val[utility::conversions::to_string_t(U("fact"))] = ModelBase::toJson(m_Fact);
    }

    return val;
}

bool PalletsCountDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("planned"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("planned")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPlanned;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlanned);
            setPlanned(refVal_setPlanned);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fact"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fact")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFact;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFact);
            setFact(refVal_setFact);
        }
    }
    return ok;
}

void PalletsCountDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PlannedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("planned")), m_Planned));
    }
    if(m_FactIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fact")), m_Fact));
    }
}

bool PalletsCountDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("planned"))))
    {
        int32_t refVal_setPlanned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("planned"))), refVal_setPlanned );
        setPlanned(refVal_setPlanned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fact"))))
    {
        int32_t refVal_setFact;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fact"))), refVal_setFact );
        setFact(refVal_setFact);
    }
    return ok;
}

int32_t PalletsCountDTO::getPlanned() const
{
    return m_Planned;
}

void PalletsCountDTO::setPlanned(int32_t value)
{
    m_Planned = value;
    m_PlannedIsSet = true;
}

bool PalletsCountDTO::plannedIsSet() const
{
    return m_PlannedIsSet;
}

void PalletsCountDTO::unsetPlanned()
{
    m_PlannedIsSet = false;
}
int32_t PalletsCountDTO::getFact() const
{
    return m_Fact;
}

void PalletsCountDTO::setFact(int32_t value)
{
    m_Fact = value;
    m_FactIsSet = true;
}

bool PalletsCountDTO::factIsSet() const
{
    return m_FactIsSet;
}

void PalletsCountDTO::unsetFact()
{
    m_FactIsSet = false;
}
}
}
}
}


