/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/WarehouseAddressDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



WarehouseAddressDTO::WarehouseAddressDTO()
{
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_number = utility::conversions::to_string_t("");
    m_numberIsSet = false;
    m_Building = utility::conversions::to_string_t("");
    m_BuildingIsSet = false;
    m_Block = utility::conversions::to_string_t("");
    m_BlockIsSet = false;
    m_GpsIsSet = false;
}

WarehouseAddressDTO::~WarehouseAddressDTO()
{
}

void WarehouseAddressDTO::validate()
{
    // TODO: implement validation
}

web::json::value WarehouseAddressDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t(U("street"))] = ModelBase::toJson(m_Street);
    }
    if(m_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("number"))] = ModelBase::toJson(m_number);
    }
    if(m_BuildingIsSet)
    {
        val[utility::conversions::to_string_t(U("building"))] = ModelBase::toJson(m_Building);
    }
    if(m_BlockIsSet)
    {
        val[utility::conversions::to_string_t(U("block"))] = ModelBase::toJson(m_Block);
    }
    if(m_GpsIsSet)
    {
        val[utility::conversions::to_string_t(U("gps"))] = ModelBase::toJson(m_Gps);
    }

    return val;
}

bool WarehouseAddressDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("street"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("street")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStreet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStreet);
            setStreet(refVal_setStreet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumber);
            setNumber(refVal_setNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("building"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("building")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBuilding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuilding);
            setBuilding(refVal_setBuilding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlock);
            setBlock(refVal_setBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gps")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GpsDTO> refVal_setGps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGps);
            setGps(refVal_setGps);
        }
    }
    return ok;
}

void WarehouseAddressDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("street")), m_Street));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number")), m_number));
    }
    if(m_BuildingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("building")), m_Building));
    }
    if(m_BlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block")), m_Block));
    }
    if(m_GpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gps")), m_Gps));
    }
}

bool WarehouseAddressDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("street"))))
    {
        utility::string_t refVal_setStreet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("street"))), refVal_setStreet );
        setStreet(refVal_setStreet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number"))))
    {
        utility::string_t refVal_setNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number"))), refVal_setNumber );
        setNumber(refVal_setNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("building"))))
    {
        utility::string_t refVal_setBuilding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("building"))), refVal_setBuilding );
        setBuilding(refVal_setBuilding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block"))))
    {
        utility::string_t refVal_setBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block"))), refVal_setBlock );
        setBlock(refVal_setBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gps"))))
    {
        std::shared_ptr<GpsDTO> refVal_setGps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gps"))), refVal_setGps );
        setGps(refVal_setGps);
    }
    return ok;
}

utility::string_t WarehouseAddressDTO::getCity() const
{
    return m_City;
}

void WarehouseAddressDTO::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool WarehouseAddressDTO::cityIsSet() const
{
    return m_CityIsSet;
}

void WarehouseAddressDTO::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t WarehouseAddressDTO::getStreet() const
{
    return m_Street;
}

void WarehouseAddressDTO::setStreet(const utility::string_t& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}

bool WarehouseAddressDTO::streetIsSet() const
{
    return m_StreetIsSet;
}

void WarehouseAddressDTO::unsetStreet()
{
    m_StreetIsSet = false;
}
utility::string_t WarehouseAddressDTO::getNumber() const
{
    return m_number;
}

void WarehouseAddressDTO::setNumber(const utility::string_t& value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool WarehouseAddressDTO::numberIsSet() const
{
    return m_numberIsSet;
}

void WarehouseAddressDTO::unsetnumber()
{
    m_numberIsSet = false;
}
utility::string_t WarehouseAddressDTO::getBuilding() const
{
    return m_Building;
}

void WarehouseAddressDTO::setBuilding(const utility::string_t& value)
{
    m_Building = value;
    m_BuildingIsSet = true;
}

bool WarehouseAddressDTO::buildingIsSet() const
{
    return m_BuildingIsSet;
}

void WarehouseAddressDTO::unsetBuilding()
{
    m_BuildingIsSet = false;
}
utility::string_t WarehouseAddressDTO::getBlock() const
{
    return m_Block;
}

void WarehouseAddressDTO::setBlock(const utility::string_t& value)
{
    m_Block = value;
    m_BlockIsSet = true;
}

bool WarehouseAddressDTO::blockIsSet() const
{
    return m_BlockIsSet;
}

void WarehouseAddressDTO::unsetBlock()
{
    m_BlockIsSet = false;
}
std::shared_ptr<GpsDTO> WarehouseAddressDTO::getGps() const
{
    return m_Gps;
}

void WarehouseAddressDTO::setGps(const std::shared_ptr<GpsDTO>& value)
{
    m_Gps = value;
    m_GpsIsSet = true;
}

bool WarehouseAddressDTO::gpsIsSet() const
{
    return m_GpsIsSet;
}

void WarehouseAddressDTO::unsetGps()
{
    m_GpsIsSet = false;
}
}
}
}
}


