/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderStatsStatusType from './OrderStatsStatusType';
import OrdersStatsCommissionDTO from './OrdersStatsCommissionDTO';
import OrdersStatsDeliveryRegionDTO from './OrdersStatsDeliveryRegionDTO';
import OrdersStatsItemDTO from './OrdersStatsItemDTO';
import OrdersStatsOrderPaymentType from './OrdersStatsOrderPaymentType';
import OrdersStatsPaymentDTO from './OrdersStatsPaymentDTO';

/**
 * The OrdersStatsOrderDTO model module.
 * @module model/OrdersStatsOrderDTO
 * @version LATEST
 */
class OrdersStatsOrderDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {Date} creationDate
     * @type {Date}
     */
    creationDate;
    /**
     * @member {Date} statusUpdateDate
     * @type {Date}
     */
    statusUpdateDate;
    /**
     * @member {module:model/OrderStatsStatusType} status
     * @type {module:model/OrderStatsStatusType}
     */
    status;
    /**
     * @member {String} partnerOrderId
     * @type {String}
     */
    partnerOrderId;
    /**
     * @member {module:model/OrdersStatsOrderPaymentType} paymentType
     * @type {module:model/OrdersStatsOrderPaymentType}
     */
    paymentType;
    /**
     * @member {Boolean} fake
     * @type {Boolean}
     */
    fake;
    /**
     * @member {module:model/OrdersStatsDeliveryRegionDTO} deliveryRegion
     * @type {module:model/OrdersStatsDeliveryRegionDTO}
     */
    deliveryRegion;
    /**
     * @member {Array.<module:model/OrdersStatsItemDTO>} items
     * @type {Array.<module:model/OrdersStatsItemDTO>}
     */
    items;
    /**
     * @member {Array.<module:model/OrdersStatsItemDTO>} initialItems
     * @type {Array.<module:model/OrdersStatsItemDTO>}
     */
    initialItems;
    /**
     * @member {Array.<module:model/OrdersStatsPaymentDTO>} payments
     * @type {Array.<module:model/OrdersStatsPaymentDTO>}
     */
    payments;
    /**
     * @member {Array.<module:model/OrdersStatsCommissionDTO>} commissions
     * @type {Array.<module:model/OrdersStatsCommissionDTO>}
     */
    commissions;

    

    /**
     * Constructs a new <code>OrdersStatsOrderDTO</code>.
     * Информация о заказе.
     * @alias module:model/OrdersStatsOrderDTO
     * @param items {Array.<module:model/OrdersStatsItemDTO>} Список товаров в заказе после возможных изменений.
     * @param payments {Array.<module:model/OrdersStatsPaymentDTO>} Информация о денежных переводах по заказу.
     * @param commissions {Array.<module:model/OrdersStatsCommissionDTO>} Информация о комиссиях за заказ.
     */
    constructor(items, payments, commissions) { 
        
        OrdersStatsOrderDTO.initialize(this, items, payments, commissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items, payments, commissions) { 
        obj['items'] = items;
        obj['payments'] = payments;
        obj['commissions'] = commissions;
    }

    /**
     * Constructs a <code>OrdersStatsOrderDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersStatsOrderDTO} obj Optional instance to populate.
     * @return {module:model/OrdersStatsOrderDTO} The populated <code>OrdersStatsOrderDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersStatsOrderDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('statusUpdateDate')) {
                obj['statusUpdateDate'] = ApiClient.convertToType(data['statusUpdateDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OrderStatsStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('partnerOrderId')) {
                obj['partnerOrderId'] = ApiClient.convertToType(data['partnerOrderId'], 'String');
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = OrdersStatsOrderPaymentType.constructFromObject(data['paymentType']);
            }
            if (data.hasOwnProperty('fake')) {
                obj['fake'] = ApiClient.convertToType(data['fake'], 'Boolean');
            }
            if (data.hasOwnProperty('deliveryRegion')) {
                obj['deliveryRegion'] = OrdersStatsDeliveryRegionDTO.constructFromObject(data['deliveryRegion']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrdersStatsItemDTO]);
            }
            if (data.hasOwnProperty('initialItems')) {
                obj['initialItems'] = ApiClient.convertToType(data['initialItems'], [OrdersStatsItemDTO]);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [OrdersStatsPaymentDTO]);
            }
            if (data.hasOwnProperty('commissions')) {
                obj['commissions'] = ApiClient.convertToType(data['commissions'], [OrdersStatsCommissionDTO]);
            }
        }
        return obj;
    }
}



export default OrdersStatsOrderDTO;

