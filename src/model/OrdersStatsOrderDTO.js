/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderStatsStatusType from './OrderStatsStatusType';
import OrdersStatsCommissionDTO from './OrdersStatsCommissionDTO';
import OrdersStatsDeliveryRegionDTO from './OrdersStatsDeliveryRegionDTO';
import OrdersStatsItemDTO from './OrdersStatsItemDTO';
import OrdersStatsOrderPaymentType from './OrdersStatsOrderPaymentType';
import OrdersStatsPaymentDTO from './OrdersStatsPaymentDTO';

/**
 * The OrdersStatsOrderDTO model module.
 * @module model/OrdersStatsOrderDTO
 * @version LATEST
 */
class OrdersStatsOrderDTO {
    /**
     * Constructs a new <code>OrdersStatsOrderDTO</code>.
     * Информация о заказе.
     * @alias module:model/OrdersStatsOrderDTO
     * @param items {Array.<module:model/OrdersStatsItemDTO>} Список товаров в заказе после возможных изменений.
     * @param payments {Array.<module:model/OrdersStatsPaymentDTO>} Информация о денежных переводах по заказу.
     * @param commissions {Array.<module:model/OrdersStatsCommissionDTO>} Информация о комиссиях за заказ.
     */
    constructor(items, payments, commissions) { 
        
        OrdersStatsOrderDTO.initialize(this, items, payments, commissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items, payments, commissions) { 
        obj['items'] = items;
        obj['payments'] = payments;
        obj['commissions'] = commissions;
    }

    /**
     * Constructs a <code>OrdersStatsOrderDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersStatsOrderDTO} obj Optional instance to populate.
     * @return {module:model/OrdersStatsOrderDTO} The populated <code>OrdersStatsOrderDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersStatsOrderDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('statusUpdateDate')) {
                obj['statusUpdateDate'] = ApiClient.convertToType(data['statusUpdateDate'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OrderStatsStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('partnerOrderId')) {
                obj['partnerOrderId'] = ApiClient.convertToType(data['partnerOrderId'], 'String');
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = OrdersStatsOrderPaymentType.constructFromObject(data['paymentType']);
            }
            if (data.hasOwnProperty('fake')) {
                obj['fake'] = ApiClient.convertToType(data['fake'], 'Boolean');
            }
            if (data.hasOwnProperty('deliveryRegion')) {
                obj['deliveryRegion'] = OrdersStatsDeliveryRegionDTO.constructFromObject(data['deliveryRegion']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrdersStatsItemDTO]);
            }
            if (data.hasOwnProperty('initialItems')) {
                obj['initialItems'] = ApiClient.convertToType(data['initialItems'], [OrdersStatsItemDTO]);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = ApiClient.convertToType(data['payments'], [OrdersStatsPaymentDTO]);
            }
            if (data.hasOwnProperty('commissions')) {
                obj['commissions'] = ApiClient.convertToType(data['commissions'], [OrdersStatsCommissionDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersStatsOrderDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersStatsOrderDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrdersStatsOrderDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['partnerOrderId'] && !(typeof data['partnerOrderId'] === 'string' || data['partnerOrderId'] instanceof String)) {
            throw new Error("Expected the field `partnerOrderId` to be a primitive type in the JSON string but got " + data['partnerOrderId']);
        }
        // validate the optional field `deliveryRegion`
        if (data['deliveryRegion']) { // data not null
          OrdersStatsDeliveryRegionDTO.validateJSON(data['deliveryRegion']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrdersStatsItemDTO.validateJSON(item);
            };
        }
        if (data['initialItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['initialItems'])) {
                throw new Error("Expected the field `initialItems` to be an array in the JSON data but got " + data['initialItems']);
            }
            // validate the optional field `initialItems` (array)
            for (const item of data['initialItems']) {
                OrdersStatsItemDTO.validateJSON(item);
            };
        }
        if (data['payments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['payments'])) {
                throw new Error("Expected the field `payments` to be an array in the JSON data but got " + data['payments']);
            }
            // validate the optional field `payments` (array)
            for (const item of data['payments']) {
                OrdersStatsPaymentDTO.validateJSON(item);
            };
        }
        if (data['commissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['commissions'])) {
                throw new Error("Expected the field `commissions` to be an array in the JSON data but got " + data['commissions']);
            }
            // validate the optional field `commissions` (array)
            for (const item of data['commissions']) {
                OrdersStatsCommissionDTO.validateJSON(item);
            };
        }

        return true;
    }


}

OrdersStatsOrderDTO.RequiredProperties = ["items", "payments", "commissions"];

/**
 * Идентификатор заказа.
 * @member {Number} id
 */
OrdersStatsOrderDTO.prototype['id'] = undefined;

/**
 * Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
 * @member {Date} creationDate
 */
OrdersStatsOrderDTO.prototype['creationDate'] = undefined;

/**
 * Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
 * @member {Date} statusUpdateDate
 */
OrdersStatsOrderDTO.prototype['statusUpdateDate'] = undefined;

/**
 * @member {module:model/OrderStatsStatusType} status
 */
OrdersStatsOrderDTO.prototype['status'] = undefined;

/**
 * Идентификатор заказа в информационной системе магазина.
 * @member {String} partnerOrderId
 */
OrdersStatsOrderDTO.prototype['partnerOrderId'] = undefined;

/**
 * @member {module:model/OrdersStatsOrderPaymentType} paymentType
 */
OrdersStatsOrderDTO.prototype['paymentType'] = undefined;

/**
 * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
 * @member {Boolean} fake
 */
OrdersStatsOrderDTO.prototype['fake'] = undefined;

/**
 * @member {module:model/OrdersStatsDeliveryRegionDTO} deliveryRegion
 */
OrdersStatsOrderDTO.prototype['deliveryRegion'] = undefined;

/**
 * Список товаров в заказе после возможных изменений.
 * @member {Array.<module:model/OrdersStatsItemDTO>} items
 */
OrdersStatsOrderDTO.prototype['items'] = undefined;

/**
 * Список товаров в заказе до изменений.
 * @member {Array.<module:model/OrdersStatsItemDTO>} initialItems
 */
OrdersStatsOrderDTO.prototype['initialItems'] = undefined;

/**
 * Информация о денежных переводах по заказу.
 * @member {Array.<module:model/OrdersStatsPaymentDTO>} payments
 */
OrdersStatsOrderDTO.prototype['payments'] = undefined;

/**
 * Информация о комиссиях за заказ.
 * @member {Array.<module:model/OrdersStatsCommissionDTO>} commissions
 */
OrdersStatsOrderDTO.prototype['commissions'] = undefined;






export default OrdersStatsOrderDTO;

