/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateStockItemDTO from './UpdateStockItemDTO';

/**
 * The UpdateStockDTO model module.
 * @module model/UpdateStockDTO
 * @version LATEST
 */
class UpdateStockDTO {
    /**
     * @member {String} sku
     * @type {String}
     */
    sku;
    /**
     * @member {Array.<module:model/UpdateStockItemDTO>} items
     * @type {Array.<module:model/UpdateStockItemDTO>}
     */
    items;

    

    /**
     * Constructs a new <code>UpdateStockDTO</code>.
     * Информация об остатках одного товара на одном из складов.
     * @alias module:model/UpdateStockDTO
     * @param sku {String} Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @param items {Array.<module:model/UpdateStockItemDTO>} Информация об остатках товара. 
     */
    constructor(sku, items) { 
        
        UpdateStockDTO.initialize(this, sku, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sku, items) { 
        obj['sku'] = sku;
        obj['items'] = items;
    }

    /**
     * Constructs a <code>UpdateStockDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateStockDTO} obj Optional instance to populate.
     * @return {module:model/UpdateStockDTO} The populated <code>UpdateStockDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateStockDTO();

            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApiClient.convertToType(data['sku'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [UpdateStockItemDTO]);
            }
        }
        return obj;
    }
}



export default UpdateStockDTO;

