/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderCourierDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderCourierDTO::OrderCourierDTO()
{
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_PhoneExtension = utility::conversions::to_string_t("");
    m_PhoneExtensionIsSet = false;
    m_VehicleNumber = utility::conversions::to_string_t("");
    m_VehicleNumberIsSet = false;
    m_VehicleDescription = utility::conversions::to_string_t("");
    m_VehicleDescriptionIsSet = false;
}

OrderCourierDTO::~OrderCourierDTO()
{
}

void OrderCourierDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderCourierDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_PhoneExtensionIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneExtension"))] = ModelBase::toJson(m_PhoneExtension);
    }
    if(m_VehicleNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("vehicleNumber"))] = ModelBase::toJson(m_VehicleNumber);
    }
    if(m_VehicleDescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("vehicleDescription"))] = ModelBase::toJson(m_VehicleDescription);
    }

    return val;
}

bool OrderCourierDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullName);
            setFullName(refVal_setFullName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneExtension"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneExtension")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneExtension;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneExtension);
            setPhoneExtension(refVal_setPhoneExtension);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vehicleNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vehicleNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVehicleNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVehicleNumber);
            setVehicleNumber(refVal_setVehicleNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vehicleDescription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vehicleDescription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVehicleDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVehicleDescription);
            setVehicleDescription(refVal_setVehicleDescription);
        }
    }
    return ok;
}

void OrderCourierDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_PhoneExtensionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneExtension")), m_PhoneExtension));
    }
    if(m_VehicleNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vehicleNumber")), m_VehicleNumber));
    }
    if(m_VehicleDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vehicleDescription")), m_VehicleDescription));
    }
}

bool OrderCourierDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_setFullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_setFullName );
        setFullName(refVal_setFullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        utility::string_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneExtension"))))
    {
        utility::string_t refVal_setPhoneExtension;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneExtension"))), refVal_setPhoneExtension );
        setPhoneExtension(refVal_setPhoneExtension);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vehicleNumber"))))
    {
        utility::string_t refVal_setVehicleNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vehicleNumber"))), refVal_setVehicleNumber );
        setVehicleNumber(refVal_setVehicleNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vehicleDescription"))))
    {
        utility::string_t refVal_setVehicleDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vehicleDescription"))), refVal_setVehicleDescription );
        setVehicleDescription(refVal_setVehicleDescription);
    }
    return ok;
}

utility::string_t OrderCourierDTO::getFullName() const
{
    return m_FullName;
}

void OrderCourierDTO::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool OrderCourierDTO::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void OrderCourierDTO::unsetFullName()
{
    m_FullNameIsSet = false;
}
utility::string_t OrderCourierDTO::getPhone() const
{
    return m_Phone;
}

void OrderCourierDTO::setPhone(const utility::string_t& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool OrderCourierDTO::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void OrderCourierDTO::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t OrderCourierDTO::getPhoneExtension() const
{
    return m_PhoneExtension;
}

void OrderCourierDTO::setPhoneExtension(const utility::string_t& value)
{
    m_PhoneExtension = value;
    m_PhoneExtensionIsSet = true;
}

bool OrderCourierDTO::phoneExtensionIsSet() const
{
    return m_PhoneExtensionIsSet;
}

void OrderCourierDTO::unsetPhoneExtension()
{
    m_PhoneExtensionIsSet = false;
}
utility::string_t OrderCourierDTO::getVehicleNumber() const
{
    return m_VehicleNumber;
}

void OrderCourierDTO::setVehicleNumber(const utility::string_t& value)
{
    m_VehicleNumber = value;
    m_VehicleNumberIsSet = true;
}

bool OrderCourierDTO::vehicleNumberIsSet() const
{
    return m_VehicleNumberIsSet;
}

void OrderCourierDTO::unsetVehicleNumber()
{
    m_VehicleNumberIsSet = false;
}
utility::string_t OrderCourierDTO::getVehicleDescription() const
{
    return m_VehicleDescription;
}

void OrderCourierDTO::setVehicleDescription(const utility::string_t& value)
{
    m_VehicleDescription = value;
    m_VehicleDescriptionIsSet = true;
}

bool OrderCourierDTO::vehicleDescriptionIsSet() const
{
    return m_VehicleDescriptionIsSet;
}

void OrderCourierDTO::unsetVehicleDescription()
{
    m_VehicleDescriptionIsSet = false;
}
}
}
}
}


