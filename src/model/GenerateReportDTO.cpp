/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateReportDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateReportDTO::GenerateReportDTO()
{
    m_ReportId = utility::conversions::to_string_t("");
    m_ReportIdIsSet = false;
    m_EstimatedGenerationTime = 0L;
    m_EstimatedGenerationTimeIsSet = false;
}

GenerateReportDTO::~GenerateReportDTO()
{
}

void GenerateReportDTO::validate()
{
    // TODO: implement validation
}

web::json::value GenerateReportDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReportIdIsSet)
    {
        val[utility::conversions::to_string_t(U("reportId"))] = ModelBase::toJson(m_ReportId);
    }
    if(m_EstimatedGenerationTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("estimatedGenerationTime"))] = ModelBase::toJson(m_EstimatedGenerationTime);
    }

    return val;
}

bool GenerateReportDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("reportId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReportId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportId);
            setReportId(refVal_setReportId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estimatedGenerationTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimatedGenerationTime")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEstimatedGenerationTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEstimatedGenerationTime);
            setEstimatedGenerationTime(refVal_setEstimatedGenerationTime);
        }
    }
    return ok;
}

void GenerateReportDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReportIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportId")), m_ReportId));
    }
    if(m_EstimatedGenerationTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimatedGenerationTime")), m_EstimatedGenerationTime));
    }
}

bool GenerateReportDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("reportId"))))
    {
        utility::string_t refVal_setReportId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportId"))), refVal_setReportId );
        setReportId(refVal_setReportId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estimatedGenerationTime"))))
    {
        int64_t refVal_setEstimatedGenerationTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimatedGenerationTime"))), refVal_setEstimatedGenerationTime );
        setEstimatedGenerationTime(refVal_setEstimatedGenerationTime);
    }
    return ok;
}

utility::string_t GenerateReportDTO::getReportId() const
{
    return m_ReportId;
}

void GenerateReportDTO::setReportId(const utility::string_t& value)
{
    m_ReportId = value;
    m_ReportIdIsSet = true;
}

bool GenerateReportDTO::reportIdIsSet() const
{
    return m_ReportIdIsSet;
}

void GenerateReportDTO::unsetReportId()
{
    m_ReportIdIsSet = false;
}
int64_t GenerateReportDTO::getEstimatedGenerationTime() const
{
    return m_EstimatedGenerationTime;
}

void GenerateReportDTO::setEstimatedGenerationTime(int64_t value)
{
    m_EstimatedGenerationTime = value;
    m_EstimatedGenerationTimeIsSet = true;
}

bool GenerateReportDTO::estimatedGenerationTimeIsSet() const
{
    return m_EstimatedGenerationTimeIsSet;
}

void GenerateReportDTO::unsetEstimatedGenerationTime()
{
    m_EstimatedGenerationTimeIsSet = false;
}
}
}
}
}


