/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GenerateStocksOnWarehousesReportRequest model module.
 * @module model/GenerateStocksOnWarehousesReportRequest
 * @version LATEST
 */
class GenerateStocksOnWarehousesReportRequest {
    /**
     * Constructs a new <code>GenerateStocksOnWarehousesReportRequest</code>.
     * Данные, необходимые для генерации отчета. 
     * @alias module:model/GenerateStocksOnWarehousesReportRequest
     * @param campaignId {Number} Идентификатор магазина.
     */
    constructor(campaignId) { 
        
        GenerateStocksOnWarehousesReportRequest.initialize(this, campaignId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, campaignId) { 
        obj['campaignId'] = campaignId;
    }

    /**
     * Constructs a <code>GenerateStocksOnWarehousesReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenerateStocksOnWarehousesReportRequest} obj Optional instance to populate.
     * @return {module:model/GenerateStocksOnWarehousesReportRequest} The populated <code>GenerateStocksOnWarehousesReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenerateStocksOnWarehousesReportRequest();

            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('warehouseIds')) {
                obj['warehouseIds'] = ApiClient.convertToType(data['warehouseIds'], ['Number']);
            }
            if (data.hasOwnProperty('reportDate')) {
                obj['reportDate'] = ApiClient.convertToType(data['reportDate'], 'Date');
            }
            if (data.hasOwnProperty('categoryIds')) {
                obj['categoryIds'] = ApiClient.convertToType(data['categoryIds'], ['Number']);
            }
            if (data.hasOwnProperty('hasStocks')) {
                obj['hasStocks'] = ApiClient.convertToType(data['hasStocks'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenerateStocksOnWarehousesReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenerateStocksOnWarehousesReportRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GenerateStocksOnWarehousesReportRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['warehouseIds'])) {
            throw new Error("Expected the field `warehouseIds` to be an array in the JSON data but got " + data['warehouseIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categoryIds'])) {
            throw new Error("Expected the field `categoryIds` to be an array in the JSON data but got " + data['categoryIds']);
        }

        return true;
    }


}

GenerateStocksOnWarehousesReportRequest.RequiredProperties = ["campaignId"];

/**
 * Идентификатор магазина.
 * @member {Number} campaignId
 */
GenerateStocksOnWarehousesReportRequest.prototype['campaignId'] = undefined;

/**
 * Фильтр по идентификаторам складов (только модель FBY). Чтобы узнать идентификатор, воспользуйтесь запросом [GET warehouses](../../reference/warehouses/getFulfillmentWarehouses.md).
 * @member {Array.<Number>} warehouseIds
 */
GenerateStocksOnWarehousesReportRequest.prototype['warehouseIds'] = undefined;

/**
 * Фильтр по дате (для модели FBY). В отчет попадут данные за **предшествующий** дате день.
 * @member {Date} reportDate
 */
GenerateStocksOnWarehousesReportRequest.prototype['reportDate'] = undefined;

/**
 * Фильтр по категориям на Маркете (кроме модели FBY).
 * @member {Array.<Number>} categoryIds
 */
GenerateStocksOnWarehousesReportRequest.prototype['categoryIds'] = undefined;

/**
 * Фильтр по наличию остатков (кроме модели FBY).
 * @member {Boolean} hasStocks
 */
GenerateStocksOnWarehousesReportRequest.prototype['hasStocks'] = undefined;






export default GenerateStocksOnWarehousesReportRequest;

