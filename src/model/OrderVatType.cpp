/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderVatType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OrderVatType::eOrderVatType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("NO_VAT")))
        return OrderVatType::eOrderVatType::OrderVatType_NO_VAT;
    if (val == utility::conversions::to_string_t(U("VAT_0")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_0;
    if (val == utility::conversions::to_string_t(U("VAT_10")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_10;
    if (val == utility::conversions::to_string_t(U("VAT_10_110")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_10_110;
    if (val == utility::conversions::to_string_t(U("VAT_20")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_20;
    if (val == utility::conversions::to_string_t(U("VAT_20_120")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_20_120;
    if (val == utility::conversions::to_string_t(U("VAT_18")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_18;
    if (val == utility::conversions::to_string_t(U("VAT_18_118")))
        return OrderVatType::eOrderVatType::OrderVatType_VAT_18_118;
    if (val == utility::conversions::to_string_t(U("UNKNOWN_VALUE")))
        return OrderVatType::eOrderVatType::OrderVatType_UNKNOWN_VALUE;
    return {};
}

EnumUnderlyingType fromEnum(OrderVatType::eOrderVatType e)
{
    switch (e)
    {
    case OrderVatType::eOrderVatType::OrderVatType_NO_VAT:
        return U("NO_VAT");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_0:
        return U("VAT_0");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_10:
        return U("VAT_10");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_10_110:
        return U("VAT_10_110");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_20:
        return U("VAT_20");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_20_120:
        return U("VAT_20_120");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_18:
        return U("VAT_18");
    case OrderVatType::eOrderVatType::OrderVatType_VAT_18_118:
        return U("VAT_18_118");
    case OrderVatType::eOrderVatType::OrderVatType_UNKNOWN_VALUE:
        return U("UNKNOWN_VALUE");
    default:
        break;
    }
    return {};
}
}

OrderVatType::OrderVatType()
{
}

OrderVatType::~OrderVatType()
{
}

void OrderVatType::validate()
{
    // TODO: implement validation
}

web::json::value OrderVatType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrderVatType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrderVatType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrderVatType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrderVatType::eOrderVatType OrderVatType::getValue() const
{
   return m_value;
}

void OrderVatType::setValue(OrderVatType::eOrderVatType const value)
{
   m_value = value;
}


}
}
}
}


