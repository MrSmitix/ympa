/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderParcelBoxDTO from './OrderParcelBoxDTO';
import OrderTrackDTO from './OrderTrackDTO';

/**
 * The OrderShipmentDTO model module.
 * @module model/OrderShipmentDTO
 * @version LATEST
 */
class OrderShipmentDTO {
    /**
     * Constructs a new <code>OrderShipmentDTO</code>.
     * Список посылок.  В параметре может указываться несколько посылок. 
     * @alias module:model/OrderShipmentDTO
     */
    constructor() { 
        
        OrderShipmentDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderShipmentDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderShipmentDTO} obj Optional instance to populate.
     * @return {module:model/OrderShipmentDTO} The populated <code>OrderShipmentDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderShipmentDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('shipmentDate')) {
                obj['shipmentDate'] = ApiClient.convertToType(data['shipmentDate'], 'String');
            }
            if (data.hasOwnProperty('shipmentTime')) {
                obj['shipmentTime'] = ApiClient.convertToType(data['shipmentTime'], 'String');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [OrderTrackDTO]);
            }
            if (data.hasOwnProperty('boxes')) {
                obj['boxes'] = ApiClient.convertToType(data['boxes'], [OrderParcelBoxDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderShipmentDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderShipmentDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['shipmentDate'] && !(typeof data['shipmentDate'] === 'string' || data['shipmentDate'] instanceof String)) {
            throw new Error("Expected the field `shipmentDate` to be a primitive type in the JSON string but got " + data['shipmentDate']);
        }
        // ensure the json data is a string
        if (data['shipmentTime'] && !(typeof data['shipmentTime'] === 'string' || data['shipmentTime'] instanceof String)) {
            throw new Error("Expected the field `shipmentTime` to be a primitive type in the JSON string but got " + data['shipmentTime']);
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                OrderTrackDTO.validateJSON(item);
            };
        }
        if (data['boxes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['boxes'])) {
                throw new Error("Expected the field `boxes` to be an array in the JSON data but got " + data['boxes']);
            }
            // validate the optional field `boxes` (array)
            for (const item of data['boxes']) {
                OrderParcelBoxDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Идентификатор посылки, присвоенный Маркетом.
 * @member {Number} id
 */
OrderShipmentDTO.prototype['id'] = undefined;

/**
 * Формат даты: `ДД-ММ-ГГГГ`. 
 * @member {String} shipmentDate
 */
OrderShipmentDTO.prototype['shipmentDate'] = undefined;

/**
 * **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус `READY_TO_SHIP`. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, `ЧЧ:ММ`.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
 * @member {String} shipmentTime
 */
OrderShipmentDTO.prototype['shipmentTime'] = undefined;

/**
 * **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
 * @member {Array.<module:model/OrderTrackDTO>} tracks
 */
OrderShipmentDTO.prototype['tracks'] = undefined;

/**
 * Список грузовых мест.
 * @member {Array.<module:model/OrderParcelBoxDTO>} boxes
 */
OrderShipmentDTO.prototype['boxes'] = undefined;






export default OrderShipmentDTO;

