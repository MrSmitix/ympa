/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferCardDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferCardDTO::OfferCardDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_MappingIsSet = false;
    m_ParameterValuesIsSet = false;
    m_CardStatusIsSet = false;
    m_ContentRating = 0;
    m_ContentRatingIsSet = false;
    m_RecommendationsIsSet = false;
    m_ErrorsIsSet = false;
    m_WarningsIsSet = false;
}

OfferCardDTO::~OfferCardDTO()
{
}

void OfferCardDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferCardDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_MappingIsSet)
    {
        val[utility::conversions::to_string_t(U("mapping"))] = ModelBase::toJson(m_Mapping);
    }
    if(m_ParameterValuesIsSet)
    {
        val[utility::conversions::to_string_t(U("parameterValues"))] = ModelBase::toJson(m_ParameterValues);
    }
    if(m_CardStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("cardStatus"))] = ModelBase::toJson(m_CardStatus);
    }
    if(m_ContentRatingIsSet)
    {
        val[utility::conversions::to_string_t(U("contentRating"))] = ModelBase::toJson(m_ContentRating);
    }
    if(m_RecommendationsIsSet)
    {
        val[utility::conversions::to_string_t(U("recommendations"))] = ModelBase::toJson(m_Recommendations);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("errors"))] = ModelBase::toJson(m_Errors);
    }
    if(m_WarningsIsSet)
    {
        val[utility::conversions::to_string_t(U("warnings"))] = ModelBase::toJson(m_Warnings);
    }

    return val;
}

bool OfferCardDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mapping"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mapping")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetMappingDTO> refVal_setMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMapping);
            setMapping(refVal_setMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parameterValues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parameterValues")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ParameterValueDTO>> refVal_setParameterValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParameterValues);
            setParameterValues(refVal_setParameterValues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cardStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cardStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferCardStatusType> refVal_setCardStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCardStatus);
            setCardStatus(refVal_setCardStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contentRating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contentRating")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setContentRating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentRating);
            setContentRating(refVal_setContentRating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recommendations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recommendations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferCardRecommendationDTO>> refVal_setRecommendations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecommendations);
            setRecommendations(refVal_setRecommendations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errors")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferErrorDTO>> refVal_setErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrors);
            setErrors(refVal_setErrors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warnings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warnings")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferErrorDTO>> refVal_setWarnings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarnings);
            setWarnings(refVal_setWarnings);
        }
    }
    return ok;
}

void OfferCardDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_MappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mapping")), m_Mapping));
    }
    if(m_ParameterValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parameterValues")), m_ParameterValues));
    }
    if(m_CardStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cardStatus")), m_CardStatus));
    }
    if(m_ContentRatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contentRating")), m_ContentRating));
    }
    if(m_RecommendationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recommendations")), m_Recommendations));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errors")), m_Errors));
    }
    if(m_WarningsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warnings")), m_Warnings));
    }
}

bool OfferCardDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mapping"))))
    {
        std::shared_ptr<GetMappingDTO> refVal_setMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mapping"))), refVal_setMapping );
        setMapping(refVal_setMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parameterValues"))))
    {
        std::vector<std::shared_ptr<ParameterValueDTO>> refVal_setParameterValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parameterValues"))), refVal_setParameterValues );
        setParameterValues(refVal_setParameterValues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cardStatus"))))
    {
        std::shared_ptr<OfferCardStatusType> refVal_setCardStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cardStatus"))), refVal_setCardStatus );
        setCardStatus(refVal_setCardStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contentRating"))))
    {
        int32_t refVal_setContentRating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contentRating"))), refVal_setContentRating );
        setContentRating(refVal_setContentRating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recommendations"))))
    {
        std::vector<std::shared_ptr<OfferCardRecommendationDTO>> refVal_setRecommendations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recommendations"))), refVal_setRecommendations );
        setRecommendations(refVal_setRecommendations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errors"))))
    {
        std::vector<std::shared_ptr<OfferErrorDTO>> refVal_setErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errors"))), refVal_setErrors );
        setErrors(refVal_setErrors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warnings"))))
    {
        std::vector<std::shared_ptr<OfferErrorDTO>> refVal_setWarnings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warnings"))), refVal_setWarnings );
        setWarnings(refVal_setWarnings);
    }
    return ok;
}

utility::string_t OfferCardDTO::getOfferId() const
{
    return m_OfferId;
}

void OfferCardDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool OfferCardDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void OfferCardDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::shared_ptr<GetMappingDTO> OfferCardDTO::getMapping() const
{
    return m_Mapping;
}

void OfferCardDTO::setMapping(const std::shared_ptr<GetMappingDTO>& value)
{
    m_Mapping = value;
    m_MappingIsSet = true;
}

bool OfferCardDTO::mappingIsSet() const
{
    return m_MappingIsSet;
}

void OfferCardDTO::unsetMapping()
{
    m_MappingIsSet = false;
}
std::vector<std::shared_ptr<ParameterValueDTO>>& OfferCardDTO::getParameterValues()
{
    return m_ParameterValues;
}

void OfferCardDTO::setParameterValues(const std::vector<std::shared_ptr<ParameterValueDTO>>& value)
{
    m_ParameterValues = value;
    m_ParameterValuesIsSet = true;
}

bool OfferCardDTO::parameterValuesIsSet() const
{
    return m_ParameterValuesIsSet;
}

void OfferCardDTO::unsetParameterValues()
{
    m_ParameterValuesIsSet = false;
}
std::shared_ptr<OfferCardStatusType> OfferCardDTO::getCardStatus() const
{
    return m_CardStatus;
}

void OfferCardDTO::setCardStatus(const std::shared_ptr<OfferCardStatusType>& value)
{
    m_CardStatus = value;
    m_CardStatusIsSet = true;
}

bool OfferCardDTO::cardStatusIsSet() const
{
    return m_CardStatusIsSet;
}

void OfferCardDTO::unsetCardStatus()
{
    m_CardStatusIsSet = false;
}
int32_t OfferCardDTO::getContentRating() const
{
    return m_ContentRating;
}

void OfferCardDTO::setContentRating(int32_t value)
{
    m_ContentRating = value;
    m_ContentRatingIsSet = true;
}

bool OfferCardDTO::contentRatingIsSet() const
{
    return m_ContentRatingIsSet;
}

void OfferCardDTO::unsetContentRating()
{
    m_ContentRatingIsSet = false;
}
std::vector<std::shared_ptr<OfferCardRecommendationDTO>>& OfferCardDTO::getRecommendations()
{
    return m_Recommendations;
}

void OfferCardDTO::setRecommendations(const std::vector<std::shared_ptr<OfferCardRecommendationDTO>>& value)
{
    m_Recommendations = value;
    m_RecommendationsIsSet = true;
}

bool OfferCardDTO::recommendationsIsSet() const
{
    return m_RecommendationsIsSet;
}

void OfferCardDTO::unsetRecommendations()
{
    m_RecommendationsIsSet = false;
}
std::vector<std::shared_ptr<OfferErrorDTO>>& OfferCardDTO::getErrors()
{
    return m_Errors;
}

void OfferCardDTO::setErrors(const std::vector<std::shared_ptr<OfferErrorDTO>>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool OfferCardDTO::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void OfferCardDTO::unsetErrors()
{
    m_ErrorsIsSet = false;
}
std::vector<std::shared_ptr<OfferErrorDTO>>& OfferCardDTO::getWarnings()
{
    return m_Warnings;
}

void OfferCardDTO::setWarnings(const std::vector<std::shared_ptr<OfferErrorDTO>>& value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}

bool OfferCardDTO::warningsIsSet() const
{
    return m_WarningsIsSet;
}

void OfferCardDTO::unsetWarnings()
{
    m_WarningsIsSet = false;
}
}
}
}
}


