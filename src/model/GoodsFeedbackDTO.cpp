/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsFeedbackDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsFeedbackDTO::GoodsFeedbackDTO()
{
    m_FeedbackId = 0L;
    m_FeedbackIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_NeedReaction = false;
    m_NeedReactionIsSet = false;
    m_IdentifiersIsSet = false;
    m_Author = utility::conversions::to_string_t("");
    m_AuthorIsSet = false;
    m_DescriptionIsSet = false;
    m_MediaIsSet = false;
    m_StatisticsIsSet = false;
}

GoodsFeedbackDTO::~GoodsFeedbackDTO()
{
}

void GoodsFeedbackDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsFeedbackDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeedbackIdIsSet)
    {
        val[utility::conversions::to_string_t(U("feedbackId"))] = ModelBase::toJson(m_FeedbackId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_NeedReactionIsSet)
    {
        val[utility::conversions::to_string_t(U("needReaction"))] = ModelBase::toJson(m_NeedReaction);
    }
    if(m_IdentifiersIsSet)
    {
        val[utility::conversions::to_string_t(U("identifiers"))] = ModelBase::toJson(m_Identifiers);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_Author);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_MediaIsSet)
    {
        val[utility::conversions::to_string_t(U("media"))] = ModelBase::toJson(m_Media);
    }
    if(m_StatisticsIsSet)
    {
        val[utility::conversions::to_string_t(U("statistics"))] = ModelBase::toJson(m_Statistics);
    }

    return val;
}

bool GoodsFeedbackDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("feedbackId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feedbackId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setFeedbackId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedbackId);
            setFeedbackId(refVal_setFeedbackId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("needReaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("needReaction")));
        if(!fieldValue.is_null())
        {
            bool refVal_setNeedReaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNeedReaction);
            setNeedReaction(refVal_setNeedReaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("identifiers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("identifiers")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsFeedbackIdentifiersDTO> refVal_setIdentifiers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdentifiers);
            setIdentifiers(refVal_setIdentifiers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAuthor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthor);
            setAuthor(refVal_setAuthor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsFeedbackDescriptionDTO> refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("media"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("media")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsFeedbackMediaDTO> refVal_setMedia;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMedia);
            setMedia(refVal_setMedia);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statistics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statistics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsFeedbackStatisticsDTO> refVal_setStatistics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatistics);
            setStatistics(refVal_setStatistics);
        }
    }
    return ok;
}

void GoodsFeedbackDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FeedbackIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feedbackId")), m_FeedbackId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_NeedReactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("needReaction")), m_NeedReaction));
    }
    if(m_IdentifiersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("identifiers")), m_Identifiers));
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_Author));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_MediaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("media")), m_Media));
    }
    if(m_StatisticsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statistics")), m_Statistics));
    }
}

bool GoodsFeedbackDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("feedbackId"))))
    {
        int64_t refVal_setFeedbackId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feedbackId"))), refVal_setFeedbackId );
        setFeedbackId(refVal_setFeedbackId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("needReaction"))))
    {
        bool refVal_setNeedReaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("needReaction"))), refVal_setNeedReaction );
        setNeedReaction(refVal_setNeedReaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("identifiers"))))
    {
        std::shared_ptr<GoodsFeedbackIdentifiersDTO> refVal_setIdentifiers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("identifiers"))), refVal_setIdentifiers );
        setIdentifiers(refVal_setIdentifiers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        utility::string_t refVal_setAuthor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_setAuthor );
        setAuthor(refVal_setAuthor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        std::shared_ptr<GoodsFeedbackDescriptionDTO> refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("media"))))
    {
        std::shared_ptr<GoodsFeedbackMediaDTO> refVal_setMedia;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("media"))), refVal_setMedia );
        setMedia(refVal_setMedia);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statistics"))))
    {
        std::shared_ptr<GoodsFeedbackStatisticsDTO> refVal_setStatistics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statistics"))), refVal_setStatistics );
        setStatistics(refVal_setStatistics);
    }
    return ok;
}

int64_t GoodsFeedbackDTO::getFeedbackId() const
{
    return m_FeedbackId;
}

void GoodsFeedbackDTO::setFeedbackId(int64_t value)
{
    m_FeedbackId = value;
    m_FeedbackIdIsSet = true;
}

bool GoodsFeedbackDTO::feedbackIdIsSet() const
{
    return m_FeedbackIdIsSet;
}

void GoodsFeedbackDTO::unsetFeedbackId()
{
    m_FeedbackIdIsSet = false;
}
utility::datetime GoodsFeedbackDTO::getCreatedAt() const
{
    return m_CreatedAt;
}

void GoodsFeedbackDTO::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool GoodsFeedbackDTO::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void GoodsFeedbackDTO::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
bool GoodsFeedbackDTO::isNeedReaction() const
{
    return m_NeedReaction;
}

void GoodsFeedbackDTO::setNeedReaction(bool value)
{
    m_NeedReaction = value;
    m_NeedReactionIsSet = true;
}

bool GoodsFeedbackDTO::needReactionIsSet() const
{
    return m_NeedReactionIsSet;
}

void GoodsFeedbackDTO::unsetNeedReaction()
{
    m_NeedReactionIsSet = false;
}
std::shared_ptr<GoodsFeedbackIdentifiersDTO> GoodsFeedbackDTO::getIdentifiers() const
{
    return m_Identifiers;
}

void GoodsFeedbackDTO::setIdentifiers(const std::shared_ptr<GoodsFeedbackIdentifiersDTO>& value)
{
    m_Identifiers = value;
    m_IdentifiersIsSet = true;
}

bool GoodsFeedbackDTO::identifiersIsSet() const
{
    return m_IdentifiersIsSet;
}

void GoodsFeedbackDTO::unsetIdentifiers()
{
    m_IdentifiersIsSet = false;
}
utility::string_t GoodsFeedbackDTO::getAuthor() const
{
    return m_Author;
}

void GoodsFeedbackDTO::setAuthor(const utility::string_t& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool GoodsFeedbackDTO::authorIsSet() const
{
    return m_AuthorIsSet;
}

void GoodsFeedbackDTO::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::shared_ptr<GoodsFeedbackDescriptionDTO> GoodsFeedbackDTO::getDescription() const
{
    return m_Description;
}

void GoodsFeedbackDTO::setDescription(const std::shared_ptr<GoodsFeedbackDescriptionDTO>& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool GoodsFeedbackDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GoodsFeedbackDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<GoodsFeedbackMediaDTO> GoodsFeedbackDTO::getMedia() const
{
    return m_Media;
}

void GoodsFeedbackDTO::setMedia(const std::shared_ptr<GoodsFeedbackMediaDTO>& value)
{
    m_Media = value;
    m_MediaIsSet = true;
}

bool GoodsFeedbackDTO::mediaIsSet() const
{
    return m_MediaIsSet;
}

void GoodsFeedbackDTO::unsetMedia()
{
    m_MediaIsSet = false;
}
std::shared_ptr<GoodsFeedbackStatisticsDTO> GoodsFeedbackDTO::getStatistics() const
{
    return m_Statistics;
}

void GoodsFeedbackDTO::setStatistics(const std::shared_ptr<GoodsFeedbackStatisticsDTO>& value)
{
    m_Statistics = value;
    m_StatisticsIsSet = true;
}

bool GoodsFeedbackDTO::statisticsIsSet() const
{
    return m_StatisticsIsSet;
}

void GoodsFeedbackDTO::unsetStatistics()
{
    m_StatisticsIsSet = false;
}
}
}
}
}


