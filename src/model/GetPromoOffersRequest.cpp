/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetPromoOffersRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetPromoOffersRequest::GetPromoOffersRequest()
{
    m_PromoId = utility::conversions::to_string_t("");
    m_PromoIdIsSet = false;
    m_StatusTypeIsSet = false;
}

GetPromoOffersRequest::~GetPromoOffersRequest()
{
}

void GetPromoOffersRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetPromoOffersRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PromoIdIsSet)
    {
        val[utility::conversions::to_string_t(U("promoId"))] = ModelBase::toJson(m_PromoId);
    }
    if(m_StatusTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("statusType"))] = ModelBase::toJson(m_StatusType);
    }

    return val;
}

bool GetPromoOffersRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("promoId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("promoId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPromoId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromoId);
            setPromoId(refVal_setPromoId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PromoOfferParticipationStatusFilterType> refVal_setStatusType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusType);
            setStatusType(refVal_setStatusType);
        }
    }
    return ok;
}

void GetPromoOffersRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PromoIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("promoId")), m_PromoId));
    }
    if(m_StatusTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusType")), m_StatusType));
    }
}

bool GetPromoOffersRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("promoId"))))
    {
        utility::string_t refVal_setPromoId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("promoId"))), refVal_setPromoId );
        setPromoId(refVal_setPromoId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusType"))))
    {
        std::shared_ptr<PromoOfferParticipationStatusFilterType> refVal_setStatusType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusType"))), refVal_setStatusType );
        setStatusType(refVal_setStatusType);
    }
    return ok;
}

utility::string_t GetPromoOffersRequest::getPromoId() const
{
    return m_PromoId;
}

void GetPromoOffersRequest::setPromoId(const utility::string_t& value)
{
    m_PromoId = value;
    m_PromoIdIsSet = true;
}

bool GetPromoOffersRequest::promoIdIsSet() const
{
    return m_PromoIdIsSet;
}

void GetPromoOffersRequest::unsetPromoId()
{
    m_PromoIdIsSet = false;
}
std::shared_ptr<PromoOfferParticipationStatusFilterType> GetPromoOffersRequest::getStatusType() const
{
    return m_StatusType;
}

void GetPromoOffersRequest::setStatusType(const std::shared_ptr<PromoOfferParticipationStatusFilterType>& value)
{
    m_StatusType = value;
    m_StatusTypeIsSet = true;
}

bool GetPromoOffersRequest::statusTypeIsSet() const
{
    return m_StatusTypeIsSet;
}

void GetPromoOffersRequest::unsetStatusType()
{
    m_StatusTypeIsSet = false;
}
}
}
}
}


