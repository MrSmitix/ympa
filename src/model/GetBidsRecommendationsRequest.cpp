/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetBidsRecommendationsRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetBidsRecommendationsRequest::GetBidsRecommendationsRequest()
{
    m_SkusIsSet = false;
}

GetBidsRecommendationsRequest::~GetBidsRecommendationsRequest()
{
}

void GetBidsRecommendationsRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetBidsRecommendationsRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SkusIsSet)
    {
        val[utility::conversions::to_string_t(U("skus"))] = ModelBase::toJson(m_Skus);
    }

    return val;
}

bool GetBidsRecommendationsRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("skus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("skus")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setSkus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSkus);
            setSkus(refVal_setSkus);
        }
    }
    return ok;
}

void GetBidsRecommendationsRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SkusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("skus")), m_Skus));
    }
}

bool GetBidsRecommendationsRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("skus"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setSkus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("skus"))), refVal_setSkus );
        setSkus(refVal_setSkus);
    }
    return ok;
}

std::vector<std::shared_ptr<utility::string_t>>& GetBidsRecommendationsRequest::getSkus()
{
    return m_Skus;
}

void GetBidsRecommendationsRequest::setSkus(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_Skus = value;
    m_SkusIsSet = true;
}

bool GetBidsRecommendationsRequest::skusIsSet() const
{
    return m_SkusIsSet;
}

void GetBidsRecommendationsRequest::unsetSkus()
{
    m_SkusIsSet = false;
}
}
}
}
}


