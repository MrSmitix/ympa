/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderSubstatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OrderSubstatusType::eOrderSubstatusType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("RESERVATION_EXPIRED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_RESERVATION_EXPIRED;
    if (val == utility::conversions::to_string_t(U("USER_NOT_PAID")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_NOT_PAID;
    if (val == utility::conversions::to_string_t(U("USER_UNREACHABLE")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_UNREACHABLE;
    if (val == utility::conversions::to_string_t(U("USER_CHANGED_MIND")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_CHANGED_MIND;
    if (val == utility::conversions::to_string_t(U("USER_REFUSED_DELIVERY")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_DELIVERY;
    if (val == utility::conversions::to_string_t(U("USER_REFUSED_PRODUCT")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_PRODUCT;
    if (val == utility::conversions::to_string_t(U("SHOP_FAILED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHOP_FAILED;
    if (val == utility::conversions::to_string_t(U("USER_REFUSED_QUALITY")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_QUALITY;
    if (val == utility::conversions::to_string_t(U("REPLACING_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_REPLACING_ORDER;
    if (val == utility::conversions::to_string_t(U("PROCESSING_EXPIRED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PROCESSING_EXPIRED;
    if (val == utility::conversions::to_string_t(U("PENDING_EXPIRED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PENDING_EXPIRED;
    if (val == utility::conversions::to_string_t(U("SHOP_PENDING_CANCELLED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHOP_PENDING_CANCELLED;
    if (val == utility::conversions::to_string_t(U("PENDING_CANCELLED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PENDING_CANCELLED;
    if (val == utility::conversions::to_string_t(U("USER_FRAUD")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_FRAUD;
    if (val == utility::conversions::to_string_t(U("RESERVATION_FAILED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_RESERVATION_FAILED;
    if (val == utility::conversions::to_string_t(U("USER_PLACED_OTHER_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_PLACED_OTHER_ORDER;
    if (val == utility::conversions::to_string_t(U("USER_BOUGHT_CHEAPER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_BOUGHT_CHEAPER;
    if (val == utility::conversions::to_string_t(U("MISSING_ITEM")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_MISSING_ITEM;
    if (val == utility::conversions::to_string_t(U("BROKEN_ITEM")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_BROKEN_ITEM;
    if (val == utility::conversions::to_string_t(U("WRONG_ITEM")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WRONG_ITEM;
    if (val == utility::conversions::to_string_t(U("PICKUP_EXPIRED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_EXPIRED;
    if (val == utility::conversions::to_string_t(U("DELIVERY_PROBLEMS")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_PROBLEMS;
    if (val == utility::conversions::to_string_t(U("LATE_CONTACT")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LATE_CONTACT;
    if (val == utility::conversions::to_string_t(U("CUSTOM")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CUSTOM;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERVICE_FAILED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_FAILED;
    if (val == utility::conversions::to_string_t(U("WAREHOUSE_FAILED_TO_SHIP")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAREHOUSE_FAILED_TO_SHIP;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERIVCE_UNDELIVERED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERIVCE_UNDELIVERED;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERVICE_UNDELIVERED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_UNDELIVERED;
    if (val == utility::conversions::to_string_t(U("PREORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PREORDER;
    if (val == utility::conversions::to_string_t(U("AWAIT_CONFIRMATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_CONFIRMATION;
    if (val == utility::conversions::to_string_t(U("STARTED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_STARTED;
    if (val == utility::conversions::to_string_t(U("PACKAGING")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PACKAGING;
    if (val == utility::conversions::to_string_t(U("READY_TO_SHIP")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_READY_TO_SHIP;
    if (val == utility::conversions::to_string_t(U("SHIPPED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHIPPED;
    if (val == utility::conversions::to_string_t(U("ASYNC_PROCESSING")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_ASYNC_PROCESSING;
    if (val == utility::conversions::to_string_t(U("USER_REFUSED_TO_PROVIDE_PERSONAL_DATA")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_TO_PROVIDE_PERSONAL_DATA;
    if (val == utility::conversions::to_string_t(U("WAITING_USER_INPUT")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_USER_INPUT;
    if (val == utility::conversions::to_string_t(U("WAITING_BANK_DECISION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_BANK_DECISION;
    if (val == utility::conversions::to_string_t(U("BANK_REJECT_CREDIT_OFFER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_BANK_REJECT_CREDIT_OFFER;
    if (val == utility::conversions::to_string_t(U("CUSTOMER_REJECT_CREDIT_OFFER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CUSTOMER_REJECT_CREDIT_OFFER;
    if (val == utility::conversions::to_string_t(U("CREDIT_OFFER_FAILED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CREDIT_OFFER_FAILED;
    if (val == utility::conversions::to_string_t(U("AWAIT_DELIVERY_DATES_CONFIRMATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_DELIVERY_DATES_CONFIRMATION;
    if (val == utility::conversions::to_string_t(U("SERVICE_FAULT")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SERVICE_FAULT;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERVICE_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_RECEIVED;
    if (val == utility::conversions::to_string_t(U("USER_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_RECEIVED;
    if (val == utility::conversions::to_string_t(U("WAITING_FOR_STOCKS")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_FOR_STOCKS;
    if (val == utility::conversions::to_string_t(U("AS_PART_OF_MULTI_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AS_PART_OF_MULTI_ORDER;
    if (val == utility::conversions::to_string_t(U("READY_FOR_LAST_MILE")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_READY_FOR_LAST_MILE;
    if (val == utility::conversions::to_string_t(U("LAST_MILE_STARTED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LAST_MILE_STARTED;
    if (val == utility::conversions::to_string_t(U("ANTIFRAUD")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_ANTIFRAUD;
    if (val == utility::conversions::to_string_t(U("DELIVERY_USER_NOT_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_USER_NOT_RECEIVED;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERVICE_DELIVERED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_DELIVERED;
    if (val == utility::conversions::to_string_t(U("DELIVERED_USER_NOT_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERED_USER_NOT_RECEIVED;
    if (val == utility::conversions::to_string_t(U("USER_WANTED_ANOTHER_PAYMENT_METHOD")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_WANTED_ANOTHER_PAYMENT_METHOD;
    if (val == utility::conversions::to_string_t(U("USER_RECEIVED_TECHNICAL_ERROR")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_RECEIVED_TECHNICAL_ERROR;
    if (val == utility::conversions::to_string_t(U("USER_FORGOT_TO_USE_BONUS")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_FORGOT_TO_USE_BONUS;
    if (val == utility::conversions::to_string_t(U("RECEIVED_ON_DISTRIBUTION_CENTER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_RECEIVED_ON_DISTRIBUTION_CENTER;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERVICE_NOT_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_NOT_RECEIVED;
    if (val == utility::conversions::to_string_t(U("DELIVERY_SERVICE_LOST")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_LOST;
    if (val == utility::conversions::to_string_t(U("SHIPPED_TO_WRONG_DELIVERY_SERVICE")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHIPPED_TO_WRONG_DELIVERY_SERVICE;
    if (val == utility::conversions::to_string_t(U("DELIVERED_USER_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERED_USER_RECEIVED;
    if (val == utility::conversions::to_string_t(U("WAITING_TINKOFF_DECISION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_TINKOFF_DECISION;
    if (val == utility::conversions::to_string_t(U("COURIER_SEARCH")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_SEARCH;
    if (val == utility::conversions::to_string_t(U("COURIER_FOUND")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_FOUND;
    if (val == utility::conversions::to_string_t(U("COURIER_IN_TRANSIT_TO_SENDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_IN_TRANSIT_TO_SENDER;
    if (val == utility::conversions::to_string_t(U("COURIER_ARRIVED_TO_SENDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_ARRIVED_TO_SENDER;
    if (val == utility::conversions::to_string_t(U("COURIER_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_RECEIVED;
    if (val == utility::conversions::to_string_t(U("COURIER_NOT_FOUND")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_NOT_FOUND;
    if (val == utility::conversions::to_string_t(U("COURIER_NOT_DELIVER_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_NOT_DELIVER_ORDER;
    if (val == utility::conversions::to_string_t(U("COURIER_RETURNS_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_RETURNS_ORDER;
    if (val == utility::conversions::to_string_t(U("COURIER_RETURNED_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_RETURNED_ORDER;
    if (val == utility::conversions::to_string_t(U("WAITING_USER_DELIVERY_INPUT")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_USER_DELIVERY_INPUT;
    if (val == utility::conversions::to_string_t(U("PICKUP_SERVICE_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_SERVICE_RECEIVED;
    if (val == utility::conversions::to_string_t(U("PICKUP_USER_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_USER_RECEIVED;
    if (val == utility::conversions::to_string_t(U("CANCELLED_COURIER_NOT_FOUND")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CANCELLED_COURIER_NOT_FOUND;
    if (val == utility::conversions::to_string_t(U("COURIER_NOT_COME_FOR_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_NOT_COME_FOR_ORDER;
    if (val == utility::conversions::to_string_t(U("DELIVERY_NOT_MANAGED_REGION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_NOT_MANAGED_REGION;
    if (val == utility::conversions::to_string_t(U("INCOMPLETE_CONTACT_INFORMATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_INCOMPLETE_CONTACT_INFORMATION;
    if (val == utility::conversions::to_string_t(U("INCOMPLETE_MULTI_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_INCOMPLETE_MULTI_ORDER;
    if (val == utility::conversions::to_string_t(U("INAPPROPRIATE_WEIGHT_SIZE")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_INAPPROPRIATE_WEIGHT_SIZE;
    if (val == utility::conversions::to_string_t(U("TECHNICAL_ERROR")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_TECHNICAL_ERROR;
    if (val == utility::conversions::to_string_t(U("SORTING_CENTER_LOST")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SORTING_CENTER_LOST;
    if (val == utility::conversions::to_string_t(U("COURIER_SEARCH_NOT_STARTED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_SEARCH_NOT_STARTED;
    if (val == utility::conversions::to_string_t(U("LOST")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LOST;
    if (val == utility::conversions::to_string_t(U("AWAIT_PAYMENT")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_PAYMENT;
    if (val == utility::conversions::to_string_t(U("AWAIT_LAVKA_RESERVATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_LAVKA_RESERVATION;
    if (val == utility::conversions::to_string_t(U("USER_WANTS_TO_CHANGE_ADDRESS")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_WANTS_TO_CHANGE_ADDRESS;
    if (val == utility::conversions::to_string_t(U("FULL_NOT_RANSOM")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_FULL_NOT_RANSOM;
    if (val == utility::conversions::to_string_t(U("PRESCRIPTION_MISMATCH")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PRESCRIPTION_MISMATCH;
    if (val == utility::conversions::to_string_t(U("DROPOFF_LOST")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DROPOFF_LOST;
    if (val == utility::conversions::to_string_t(U("DROPOFF_CLOSED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DROPOFF_CLOSED;
    if (val == utility::conversions::to_string_t(U("DELIVERY_TO_STORE_STARTED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_TO_STORE_STARTED;
    if (val == utility::conversions::to_string_t(U("USER_WANTS_TO_CHANGE_DELIVERY_DATE")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_WANTS_TO_CHANGE_DELIVERY_DATE;
    if (val == utility::conversions::to_string_t(U("WRONG_ITEM_DELIVERED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WRONG_ITEM_DELIVERED;
    if (val == utility::conversions::to_string_t(U("DAMAGED_BOX")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DAMAGED_BOX;
    if (val == utility::conversions::to_string_t(U("AWAIT_DELIVERY_DATES")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_DELIVERY_DATES;
    if (val == utility::conversions::to_string_t(U("LAST_MILE_COURIER_SEARCH")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LAST_MILE_COURIER_SEARCH;
    if (val == utility::conversions::to_string_t(U("PICKUP_POINT_CLOSED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_POINT_CLOSED;
    if (val == utility::conversions::to_string_t(U("LEGAL_INFO_CHANGED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LEGAL_INFO_CHANGED;
    if (val == utility::conversions::to_string_t(U("USER_HAS_NO_TIME_TO_PICKUP_ORDER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_HAS_NO_TIME_TO_PICKUP_ORDER;
    if (val == utility::conversions::to_string_t(U("DELIVERY_CUSTOMS_ARRIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_CUSTOMS_ARRIVED;
    if (val == utility::conversions::to_string_t(U("DELIVERY_CUSTOMS_CLEARED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_CUSTOMS_CLEARED;
    if (val == utility::conversions::to_string_t(U("FIRST_MILE_DELIVERY_SERVICE_RECEIVED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_FIRST_MILE_DELIVERY_SERVICE_RECEIVED;
    if (val == utility::conversions::to_string_t(U("AWAIT_AUTO_DELIVERY_DATES")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_AUTO_DELIVERY_DATES;
    if (val == utility::conversions::to_string_t(U("AWAIT_USER_PERSONAL_DATA")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_USER_PERSONAL_DATA;
    if (val == utility::conversions::to_string_t(U("NO_PERSONAL_DATA_EXPIRED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_NO_PERSONAL_DATA_EXPIRED;
    if (val == utility::conversions::to_string_t(U("CUSTOMS_PROBLEMS")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CUSTOMS_PROBLEMS;
    if (val == utility::conversions::to_string_t(U("AWAIT_CASHIER")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_CASHIER;
    if (val == utility::conversions::to_string_t(U("WAITING_POSTPAID_BUDGET_RESERVATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_POSTPAID_BUDGET_RESERVATION;
    if (val == utility::conversions::to_string_t(U("AWAIT_SERVICEABLE_CONFIRMATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_SERVICEABLE_CONFIRMATION;
    if (val == utility::conversions::to_string_t(U("POSTPAID_BUDGET_RESERVATION_FAILED")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_POSTPAID_BUDGET_RESERVATION_FAILED;
    if (val == utility::conversions::to_string_t(U("AWAIT_CUSTOM_PRICE_CONFIRMATION")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_CUSTOM_PRICE_CONFIRMATION;
    if (val == utility::conversions::to_string_t(U("READY_FOR_PICKUP")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_READY_FOR_PICKUP;
    if (val == utility::conversions::to_string_t(U("UNKNOWN")))
        return OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_UNKNOWN;
    return {};
}

EnumUnderlyingType fromEnum(OrderSubstatusType::eOrderSubstatusType e)
{
    switch (e)
    {
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_RESERVATION_EXPIRED:
        return U("RESERVATION_EXPIRED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_NOT_PAID:
        return U("USER_NOT_PAID");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_UNREACHABLE:
        return U("USER_UNREACHABLE");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_CHANGED_MIND:
        return U("USER_CHANGED_MIND");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_DELIVERY:
        return U("USER_REFUSED_DELIVERY");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_PRODUCT:
        return U("USER_REFUSED_PRODUCT");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHOP_FAILED:
        return U("SHOP_FAILED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_QUALITY:
        return U("USER_REFUSED_QUALITY");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_REPLACING_ORDER:
        return U("REPLACING_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PROCESSING_EXPIRED:
        return U("PROCESSING_EXPIRED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PENDING_EXPIRED:
        return U("PENDING_EXPIRED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHOP_PENDING_CANCELLED:
        return U("SHOP_PENDING_CANCELLED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PENDING_CANCELLED:
        return U("PENDING_CANCELLED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_FRAUD:
        return U("USER_FRAUD");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_RESERVATION_FAILED:
        return U("RESERVATION_FAILED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_PLACED_OTHER_ORDER:
        return U("USER_PLACED_OTHER_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_BOUGHT_CHEAPER:
        return U("USER_BOUGHT_CHEAPER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_MISSING_ITEM:
        return U("MISSING_ITEM");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_BROKEN_ITEM:
        return U("BROKEN_ITEM");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WRONG_ITEM:
        return U("WRONG_ITEM");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_EXPIRED:
        return U("PICKUP_EXPIRED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_PROBLEMS:
        return U("DELIVERY_PROBLEMS");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LATE_CONTACT:
        return U("LATE_CONTACT");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CUSTOM:
        return U("CUSTOM");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_FAILED:
        return U("DELIVERY_SERVICE_FAILED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAREHOUSE_FAILED_TO_SHIP:
        return U("WAREHOUSE_FAILED_TO_SHIP");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERIVCE_UNDELIVERED:
        return U("DELIVERY_SERIVCE_UNDELIVERED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_UNDELIVERED:
        return U("DELIVERY_SERVICE_UNDELIVERED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PREORDER:
        return U("PREORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_CONFIRMATION:
        return U("AWAIT_CONFIRMATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_STARTED:
        return U("STARTED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PACKAGING:
        return U("PACKAGING");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_READY_TO_SHIP:
        return U("READY_TO_SHIP");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHIPPED:
        return U("SHIPPED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_ASYNC_PROCESSING:
        return U("ASYNC_PROCESSING");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_REFUSED_TO_PROVIDE_PERSONAL_DATA:
        return U("USER_REFUSED_TO_PROVIDE_PERSONAL_DATA");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_USER_INPUT:
        return U("WAITING_USER_INPUT");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_BANK_DECISION:
        return U("WAITING_BANK_DECISION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_BANK_REJECT_CREDIT_OFFER:
        return U("BANK_REJECT_CREDIT_OFFER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CUSTOMER_REJECT_CREDIT_OFFER:
        return U("CUSTOMER_REJECT_CREDIT_OFFER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CREDIT_OFFER_FAILED:
        return U("CREDIT_OFFER_FAILED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_DELIVERY_DATES_CONFIRMATION:
        return U("AWAIT_DELIVERY_DATES_CONFIRMATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SERVICE_FAULT:
        return U("SERVICE_FAULT");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_RECEIVED:
        return U("DELIVERY_SERVICE_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_RECEIVED:
        return U("USER_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_FOR_STOCKS:
        return U("WAITING_FOR_STOCKS");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AS_PART_OF_MULTI_ORDER:
        return U("AS_PART_OF_MULTI_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_READY_FOR_LAST_MILE:
        return U("READY_FOR_LAST_MILE");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LAST_MILE_STARTED:
        return U("LAST_MILE_STARTED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_ANTIFRAUD:
        return U("ANTIFRAUD");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_USER_NOT_RECEIVED:
        return U("DELIVERY_USER_NOT_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_DELIVERED:
        return U("DELIVERY_SERVICE_DELIVERED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERED_USER_NOT_RECEIVED:
        return U("DELIVERED_USER_NOT_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_WANTED_ANOTHER_PAYMENT_METHOD:
        return U("USER_WANTED_ANOTHER_PAYMENT_METHOD");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_RECEIVED_TECHNICAL_ERROR:
        return U("USER_RECEIVED_TECHNICAL_ERROR");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_FORGOT_TO_USE_BONUS:
        return U("USER_FORGOT_TO_USE_BONUS");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_RECEIVED_ON_DISTRIBUTION_CENTER:
        return U("RECEIVED_ON_DISTRIBUTION_CENTER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_NOT_RECEIVED:
        return U("DELIVERY_SERVICE_NOT_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_SERVICE_LOST:
        return U("DELIVERY_SERVICE_LOST");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SHIPPED_TO_WRONG_DELIVERY_SERVICE:
        return U("SHIPPED_TO_WRONG_DELIVERY_SERVICE");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERED_USER_RECEIVED:
        return U("DELIVERED_USER_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_TINKOFF_DECISION:
        return U("WAITING_TINKOFF_DECISION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_SEARCH:
        return U("COURIER_SEARCH");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_FOUND:
        return U("COURIER_FOUND");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_IN_TRANSIT_TO_SENDER:
        return U("COURIER_IN_TRANSIT_TO_SENDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_ARRIVED_TO_SENDER:
        return U("COURIER_ARRIVED_TO_SENDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_RECEIVED:
        return U("COURIER_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_NOT_FOUND:
        return U("COURIER_NOT_FOUND");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_NOT_DELIVER_ORDER:
        return U("COURIER_NOT_DELIVER_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_RETURNS_ORDER:
        return U("COURIER_RETURNS_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_RETURNED_ORDER:
        return U("COURIER_RETURNED_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_USER_DELIVERY_INPUT:
        return U("WAITING_USER_DELIVERY_INPUT");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_SERVICE_RECEIVED:
        return U("PICKUP_SERVICE_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_USER_RECEIVED:
        return U("PICKUP_USER_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CANCELLED_COURIER_NOT_FOUND:
        return U("CANCELLED_COURIER_NOT_FOUND");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_NOT_COME_FOR_ORDER:
        return U("COURIER_NOT_COME_FOR_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_NOT_MANAGED_REGION:
        return U("DELIVERY_NOT_MANAGED_REGION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_INCOMPLETE_CONTACT_INFORMATION:
        return U("INCOMPLETE_CONTACT_INFORMATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_INCOMPLETE_MULTI_ORDER:
        return U("INCOMPLETE_MULTI_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_INAPPROPRIATE_WEIGHT_SIZE:
        return U("INAPPROPRIATE_WEIGHT_SIZE");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_TECHNICAL_ERROR:
        return U("TECHNICAL_ERROR");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_SORTING_CENTER_LOST:
        return U("SORTING_CENTER_LOST");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_COURIER_SEARCH_NOT_STARTED:
        return U("COURIER_SEARCH_NOT_STARTED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LOST:
        return U("LOST");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_PAYMENT:
        return U("AWAIT_PAYMENT");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_LAVKA_RESERVATION:
        return U("AWAIT_LAVKA_RESERVATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_WANTS_TO_CHANGE_ADDRESS:
        return U("USER_WANTS_TO_CHANGE_ADDRESS");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_FULL_NOT_RANSOM:
        return U("FULL_NOT_RANSOM");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PRESCRIPTION_MISMATCH:
        return U("PRESCRIPTION_MISMATCH");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DROPOFF_LOST:
        return U("DROPOFF_LOST");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DROPOFF_CLOSED:
        return U("DROPOFF_CLOSED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_TO_STORE_STARTED:
        return U("DELIVERY_TO_STORE_STARTED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_WANTS_TO_CHANGE_DELIVERY_DATE:
        return U("USER_WANTS_TO_CHANGE_DELIVERY_DATE");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WRONG_ITEM_DELIVERED:
        return U("WRONG_ITEM_DELIVERED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DAMAGED_BOX:
        return U("DAMAGED_BOX");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_DELIVERY_DATES:
        return U("AWAIT_DELIVERY_DATES");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LAST_MILE_COURIER_SEARCH:
        return U("LAST_MILE_COURIER_SEARCH");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_PICKUP_POINT_CLOSED:
        return U("PICKUP_POINT_CLOSED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_LEGAL_INFO_CHANGED:
        return U("LEGAL_INFO_CHANGED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_USER_HAS_NO_TIME_TO_PICKUP_ORDER:
        return U("USER_HAS_NO_TIME_TO_PICKUP_ORDER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_CUSTOMS_ARRIVED:
        return U("DELIVERY_CUSTOMS_ARRIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_DELIVERY_CUSTOMS_CLEARED:
        return U("DELIVERY_CUSTOMS_CLEARED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_FIRST_MILE_DELIVERY_SERVICE_RECEIVED:
        return U("FIRST_MILE_DELIVERY_SERVICE_RECEIVED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_AUTO_DELIVERY_DATES:
        return U("AWAIT_AUTO_DELIVERY_DATES");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_USER_PERSONAL_DATA:
        return U("AWAIT_USER_PERSONAL_DATA");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_NO_PERSONAL_DATA_EXPIRED:
        return U("NO_PERSONAL_DATA_EXPIRED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_CUSTOMS_PROBLEMS:
        return U("CUSTOMS_PROBLEMS");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_CASHIER:
        return U("AWAIT_CASHIER");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_WAITING_POSTPAID_BUDGET_RESERVATION:
        return U("WAITING_POSTPAID_BUDGET_RESERVATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_SERVICEABLE_CONFIRMATION:
        return U("AWAIT_SERVICEABLE_CONFIRMATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_POSTPAID_BUDGET_RESERVATION_FAILED:
        return U("POSTPAID_BUDGET_RESERVATION_FAILED");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_AWAIT_CUSTOM_PRICE_CONFIRMATION:
        return U("AWAIT_CUSTOM_PRICE_CONFIRMATION");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_READY_FOR_PICKUP:
        return U("READY_FOR_PICKUP");
    case OrderSubstatusType::eOrderSubstatusType::OrderSubstatusType_UNKNOWN:
        return U("UNKNOWN");
    default:
        break;
    }
    return {};
}
}

OrderSubstatusType::OrderSubstatusType()
{
}

OrderSubstatusType::~OrderSubstatusType()
{
}

void OrderSubstatusType::validate()
{
    // TODO: implement validation
}

web::json::value OrderSubstatusType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrderSubstatusType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrderSubstatusType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrderSubstatusType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrderSubstatusType::eOrderSubstatusType OrderSubstatusType::getValue() const
{
   return m_value;
}

void OrderSubstatusType::setValue(OrderSubstatusType::eOrderSubstatusType const value)
{
   m_value = value;
}


}
}
}
}


