/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/UpdateOfferMappingsRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateOfferMappingsRequest::UpdateOfferMappingsRequest()
{
    m_OfferMappingsIsSet = false;
    m_OnlyPartnerMediaContent = false;
    m_OnlyPartnerMediaContentIsSet = false;
}

UpdateOfferMappingsRequest::~UpdateOfferMappingsRequest()
{
}

void UpdateOfferMappingsRequest::validate()
{
    // TODO: implement validation
}

web::json::value UpdateOfferMappingsRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferMappingsIsSet)
    {
        val[utility::conversions::to_string_t(U("offerMappings"))] = ModelBase::toJson(m_OfferMappings);
    }
    if(m_OnlyPartnerMediaContentIsSet)
    {
        val[utility::conversions::to_string_t(U("onlyPartnerMediaContent"))] = ModelBase::toJson(m_OnlyPartnerMediaContent);
    }

    return val;
}

bool UpdateOfferMappingsRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerMappings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerMappings")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UpdateOfferMappingDTO>> refVal_setOfferMappings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferMappings);
            setOfferMappings(refVal_setOfferMappings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("onlyPartnerMediaContent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("onlyPartnerMediaContent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOnlyPartnerMediaContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOnlyPartnerMediaContent);
            setOnlyPartnerMediaContent(refVal_setOnlyPartnerMediaContent);
        }
    }
    return ok;
}

void UpdateOfferMappingsRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferMappingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerMappings")), m_OfferMappings));
    }
    if(m_OnlyPartnerMediaContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("onlyPartnerMediaContent")), m_OnlyPartnerMediaContent));
    }
}

bool UpdateOfferMappingsRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerMappings"))))
    {
        std::vector<std::shared_ptr<UpdateOfferMappingDTO>> refVal_setOfferMappings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerMappings"))), refVal_setOfferMappings );
        setOfferMappings(refVal_setOfferMappings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("onlyPartnerMediaContent"))))
    {
        bool refVal_setOnlyPartnerMediaContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("onlyPartnerMediaContent"))), refVal_setOnlyPartnerMediaContent );
        setOnlyPartnerMediaContent(refVal_setOnlyPartnerMediaContent);
    }
    return ok;
}

std::vector<std::shared_ptr<UpdateOfferMappingDTO>>& UpdateOfferMappingsRequest::getOfferMappings()
{
    return m_OfferMappings;
}

void UpdateOfferMappingsRequest::setOfferMappings(const std::vector<std::shared_ptr<UpdateOfferMappingDTO>>& value)
{
    m_OfferMappings = value;
    m_OfferMappingsIsSet = true;
}

bool UpdateOfferMappingsRequest::offerMappingsIsSet() const
{
    return m_OfferMappingsIsSet;
}

void UpdateOfferMappingsRequest::unsetOfferMappings()
{
    m_OfferMappingsIsSet = false;
}
bool UpdateOfferMappingsRequest::isOnlyPartnerMediaContent() const
{
    return m_OnlyPartnerMediaContent;
}

void UpdateOfferMappingsRequest::setOnlyPartnerMediaContent(bool value)
{
    m_OnlyPartnerMediaContent = value;
    m_OnlyPartnerMediaContentIsSet = true;
}

bool UpdateOfferMappingsRequest::onlyPartnerMediaContentIsSet() const
{
    return m_OnlyPartnerMediaContentIsSet;
}

void UpdateOfferMappingsRequest::unsetOnlyPartnerMediaContent()
{
    m_OnlyPartnerMediaContentIsSet = false;
}
}
}
}
}


