/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedbackCommentDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedbackCommentDTO::FeedbackCommentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_ParentId = 0L;
    m_ParentIdIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_AuthorIsSet = false;
    m_ChildrenIsSet = false;
}

FeedbackCommentDTO::~FeedbackCommentDTO()
{
}

void FeedbackCommentDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedbackCommentDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("parentId"))] = ModelBase::toJson(m_ParentId);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_Author);
    }
    if(m_ChildrenIsSet)
    {
        val[utility::conversions::to_string_t(U("children"))] = ModelBase::toJson(m_Children);
    }

    return val;
}

bool FeedbackCommentDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parentId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setParentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentId);
            setParentId(refVal_setParentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedbackCommentAuthorDTO> refVal_setAuthor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthor);
            setAuthor(refVal_setAuthor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("children"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("children")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FeedbackCommentDTO>> refVal_setChildren;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChildren);
            setChildren(refVal_setChildren);
        }
    }
    return ok;
}

void FeedbackCommentDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parentId")), m_ParentId));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_Author));
    }
    if(m_ChildrenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("children")), m_Children));
    }
}

bool FeedbackCommentDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parentId"))))
    {
        int64_t refVal_setParentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parentId"))), refVal_setParentId );
        setParentId(refVal_setParentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        std::shared_ptr<FeedbackCommentAuthorDTO> refVal_setAuthor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_setAuthor );
        setAuthor(refVal_setAuthor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("children"))))
    {
        std::vector<std::shared_ptr<FeedbackCommentDTO>> refVal_setChildren;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("children"))), refVal_setChildren );
        setChildren(refVal_setChildren);
    }
    return ok;
}

int64_t FeedbackCommentDTO::getId() const
{
    return m_Id;
}

void FeedbackCommentDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FeedbackCommentDTO::idIsSet() const
{
    return m_IdIsSet;
}

void FeedbackCommentDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t FeedbackCommentDTO::getParentId() const
{
    return m_ParentId;
}

void FeedbackCommentDTO::setParentId(int64_t value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool FeedbackCommentDTO::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void FeedbackCommentDTO::unsetParentId()
{
    m_ParentIdIsSet = false;
}
utility::string_t FeedbackCommentDTO::getBody() const
{
    return m_Body;
}

void FeedbackCommentDTO::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool FeedbackCommentDTO::bodyIsSet() const
{
    return m_BodyIsSet;
}

void FeedbackCommentDTO::unsetBody()
{
    m_BodyIsSet = false;
}
utility::datetime FeedbackCommentDTO::getCreatedAt() const
{
    return m_CreatedAt;
}

void FeedbackCommentDTO::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool FeedbackCommentDTO::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void FeedbackCommentDTO::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime FeedbackCommentDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void FeedbackCommentDTO::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool FeedbackCommentDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void FeedbackCommentDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
std::shared_ptr<FeedbackCommentAuthorDTO> FeedbackCommentDTO::getAuthor() const
{
    return m_Author;
}

void FeedbackCommentDTO::setAuthor(const std::shared_ptr<FeedbackCommentAuthorDTO>& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool FeedbackCommentDTO::authorIsSet() const
{
    return m_AuthorIsSet;
}

void FeedbackCommentDTO::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::vector<std::shared_ptr<FeedbackCommentDTO>>& FeedbackCommentDTO::getChildren()
{
    return m_Children;
}

void FeedbackCommentDTO::setChildren(const std::vector<std::shared_ptr<FeedbackCommentDTO>>& value)
{
    m_Children = value;
    m_ChildrenIsSet = true;
}

bool FeedbackCommentDTO::childrenIsSet() const
{
    return m_ChildrenIsSet;
}

void FeedbackCommentDTO::unsetChildren()
{
    m_ChildrenIsSet = false;
}
}
}
}
}


