/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/WarehouseOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



WarehouseOfferDTO::WarehouseOfferDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_TurnoverSummaryIsSet = false;
    m_StocksIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

WarehouseOfferDTO::~WarehouseOfferDTO()
{
}

void WarehouseOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value WarehouseOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_TurnoverSummaryIsSet)
    {
        val[utility::conversions::to_string_t(U("turnoverSummary"))] = ModelBase::toJson(m_TurnoverSummary);
    }
    if(m_StocksIsSet)
    {
        val[utility::conversions::to_string_t(U("stocks"))] = ModelBase::toJson(m_Stocks);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool WarehouseOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("turnoverSummary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("turnoverSummary")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TurnoverDTO> refVal_setTurnoverSummary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTurnoverSummary);
            setTurnoverSummary(refVal_setTurnoverSummary);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stocks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stocks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WarehouseStockDTO>> refVal_setStocks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStocks);
            setStocks(refVal_setStocks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    return ok;
}

void WarehouseOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_TurnoverSummaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("turnoverSummary")), m_TurnoverSummary));
    }
    if(m_StocksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stocks")), m_Stocks));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool WarehouseOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("turnoverSummary"))))
    {
        std::shared_ptr<TurnoverDTO> refVal_setTurnoverSummary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("turnoverSummary"))), refVal_setTurnoverSummary );
        setTurnoverSummary(refVal_setTurnoverSummary);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stocks"))))
    {
        std::vector<std::shared_ptr<WarehouseStockDTO>> refVal_setStocks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stocks"))), refVal_setStocks );
        setStocks(refVal_setStocks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}

utility::string_t WarehouseOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void WarehouseOfferDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool WarehouseOfferDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void WarehouseOfferDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::shared_ptr<TurnoverDTO> WarehouseOfferDTO::getTurnoverSummary() const
{
    return m_TurnoverSummary;
}

void WarehouseOfferDTO::setTurnoverSummary(const std::shared_ptr<TurnoverDTO>& value)
{
    m_TurnoverSummary = value;
    m_TurnoverSummaryIsSet = true;
}

bool WarehouseOfferDTO::turnoverSummaryIsSet() const
{
    return m_TurnoverSummaryIsSet;
}

void WarehouseOfferDTO::unsetTurnoverSummary()
{
    m_TurnoverSummaryIsSet = false;
}
std::vector<std::shared_ptr<WarehouseStockDTO>>& WarehouseOfferDTO::getStocks()
{
    return m_Stocks;
}

void WarehouseOfferDTO::setStocks(const std::vector<std::shared_ptr<WarehouseStockDTO>>& value)
{
    m_Stocks = value;
    m_StocksIsSet = true;
}

bool WarehouseOfferDTO::stocksIsSet() const
{
    return m_StocksIsSet;
}

void WarehouseOfferDTO::unsetStocks()
{
    m_StocksIsSet = false;
}
utility::datetime WarehouseOfferDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void WarehouseOfferDTO::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool WarehouseOfferDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void WarehouseOfferDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


