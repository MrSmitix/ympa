/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderDigitalItemDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderDigitalItemDTO::OrderDigitalItemDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Code = utility::conversions::to_string_t("");
    m_CodeIsSet = false;
    m_Slip = utility::conversions::to_string_t("");
    m_SlipIsSet = false;
    m_Activate_tillIsSet = false;
}

OrderDigitalItemDTO::~OrderDigitalItemDTO()
{
}

void OrderDigitalItemDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderDigitalItemDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t(U("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_SlipIsSet)
    {
        val[utility::conversions::to_string_t(U("slip"))] = ModelBase::toJson(m_Slip);
    }
    if(m_Activate_tillIsSet)
    {
        val[utility::conversions::to_string_t(U("activate_till"))] = ModelBase::toJson(m_Activate_till);
    }

    return val;
}

bool OrderDigitalItemDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slip"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slip")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSlip;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlip);
            setSlip(refVal_setSlip);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activate_till"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activate_till")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setActivateTill;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivateTill);
            setActivateTill(refVal_setActivateTill);
        }
    }
    return ok;
}

void OrderDigitalItemDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code")), m_Code));
    }
    if(m_SlipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slip")), m_Slip));
    }
    if(m_Activate_tillIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activate_till")), m_Activate_till));
    }
}

bool OrderDigitalItemDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code"))))
    {
        utility::string_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slip"))))
    {
        utility::string_t refVal_setSlip;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slip"))), refVal_setSlip );
        setSlip(refVal_setSlip);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activate_till"))))
    {
        utility::datetime refVal_setActivateTill;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activate_till"))), refVal_setActivateTill );
        setActivateTill(refVal_setActivateTill);
    }
    return ok;
}

int64_t OrderDigitalItemDTO::getId() const
{
    return m_Id;
}

void OrderDigitalItemDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrderDigitalItemDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrderDigitalItemDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrderDigitalItemDTO::getCode() const
{
    return m_Code;
}

void OrderDigitalItemDTO::setCode(const utility::string_t& value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool OrderDigitalItemDTO::codeIsSet() const
{
    return m_CodeIsSet;
}

void OrderDigitalItemDTO::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t OrderDigitalItemDTO::getSlip() const
{
    return m_Slip;
}

void OrderDigitalItemDTO::setSlip(const utility::string_t& value)
{
    m_Slip = value;
    m_SlipIsSet = true;
}

bool OrderDigitalItemDTO::slipIsSet() const
{
    return m_SlipIsSet;
}

void OrderDigitalItemDTO::unsetSlip()
{
    m_SlipIsSet = false;
}
utility::datetime OrderDigitalItemDTO::getActivateTill() const
{
    return m_Activate_till;
}

void OrderDigitalItemDTO::setActivateTill(const utility::datetime& value)
{
    m_Activate_till = value;
    m_Activate_tillIsSet = true;
}

bool OrderDigitalItemDTO::activateTillIsSet() const
{
    return m_Activate_tillIsSet;
}

void OrderDigitalItemDTO::unsetActivate_till()
{
    m_Activate_tillIsSet = false;
}
}
}
}
}


