/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrdersStatsPaymentDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrdersStatsPaymentDTO::OrdersStatsPaymentDTO()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_dateIsSet = false;
    m_TypeIsSet = false;
    m_SourceIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
    m_PaymentOrderIsSet = false;
}

OrdersStatsPaymentDTO::~OrdersStatsPaymentDTO()
{
}

void OrdersStatsPaymentDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrdersStatsPaymentDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("date"))] = ModelBase::toJson(m_date);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t(U("source"))] = ModelBase::toJson(m_Source);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_PaymentOrderIsSet)
    {
        val[utility::conversions::to_string_t(U("paymentOrder"))] = ModelBase::toJson(m_PaymentOrder);
    }

    return val;
}

bool OrdersStatsPaymentDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsPaymentType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsPaymentSourceType> refVal_setSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSource);
            setSource(refVal_setSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paymentOrder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paymentOrder")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsPaymentOrderDTO> refVal_setPaymentOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaymentOrder);
            setPaymentOrder(refVal_setPaymentOrder);
        }
    }
    return ok;
}

void OrdersStatsPaymentDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date")), m_date));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source")), m_Source));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
    if(m_PaymentOrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paymentOrder")), m_PaymentOrder));
    }
}

bool OrdersStatsPaymentDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date"))))
    {
        utility::datetime refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OrdersStatsPaymentType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source"))))
    {
        std::shared_ptr<OrdersStatsPaymentSourceType> refVal_setSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source"))), refVal_setSource );
        setSource(refVal_setSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        double refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paymentOrder"))))
    {
        std::shared_ptr<OrdersStatsPaymentOrderDTO> refVal_setPaymentOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paymentOrder"))), refVal_setPaymentOrder );
        setPaymentOrder(refVal_setPaymentOrder);
    }
    return ok;
}

utility::string_t OrdersStatsPaymentDTO::getId() const
{
    return m_Id;
}

void OrdersStatsPaymentDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrdersStatsPaymentDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrdersStatsPaymentDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime OrdersStatsPaymentDTO::getDate() const
{
    return m_date;
}

void OrdersStatsPaymentDTO::setDate(const utility::datetime& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool OrdersStatsPaymentDTO::dateIsSet() const
{
    return m_dateIsSet;
}

void OrdersStatsPaymentDTO::unsetdate()
{
    m_dateIsSet = false;
}
std::shared_ptr<OrdersStatsPaymentType> OrdersStatsPaymentDTO::getType() const
{
    return m_Type;
}

void OrdersStatsPaymentDTO::setType(const std::shared_ptr<OrdersStatsPaymentType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OrdersStatsPaymentDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrdersStatsPaymentDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<OrdersStatsPaymentSourceType> OrdersStatsPaymentDTO::getSource() const
{
    return m_Source;
}

void OrdersStatsPaymentDTO::setSource(const std::shared_ptr<OrdersStatsPaymentSourceType>& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool OrdersStatsPaymentDTO::sourceIsSet() const
{
    return m_SourceIsSet;
}

void OrdersStatsPaymentDTO::unsetSource()
{
    m_SourceIsSet = false;
}
double OrdersStatsPaymentDTO::getTotal() const
{
    return m_Total;
}

void OrdersStatsPaymentDTO::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool OrdersStatsPaymentDTO::totalIsSet() const
{
    return m_TotalIsSet;
}

void OrdersStatsPaymentDTO::unsetTotal()
{
    m_TotalIsSet = false;
}
std::shared_ptr<OrdersStatsPaymentOrderDTO> OrdersStatsPaymentDTO::getPaymentOrder() const
{
    return m_PaymentOrder;
}

void OrdersStatsPaymentDTO::setPaymentOrder(const std::shared_ptr<OrdersStatsPaymentOrderDTO>& value)
{
    m_PaymentOrder = value;
    m_PaymentOrderIsSet = true;
}

bool OrdersStatsPaymentDTO::paymentOrderIsSet() const
{
    return m_PaymentOrderIsSet;
}

void OrdersStatsPaymentDTO::unsetPaymentOrder()
{
    m_PaymentOrderIsSet = false;
}
}
}
}
}


