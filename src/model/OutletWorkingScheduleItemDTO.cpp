/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OutletWorkingScheduleItemDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OutletWorkingScheduleItemDTO::OutletWorkingScheduleItemDTO()
{
    m_StartDayIsSet = false;
    m_EndDayIsSet = false;
    m_StartTime = utility::conversions::to_string_t("");
    m_StartTimeIsSet = false;
    m_EndTime = utility::conversions::to_string_t("");
    m_EndTimeIsSet = false;
}

OutletWorkingScheduleItemDTO::~OutletWorkingScheduleItemDTO()
{
}

void OutletWorkingScheduleItemDTO::validate()
{
    // TODO: implement validation
}

web::json::value OutletWorkingScheduleItemDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StartDayIsSet)
    {
        val[utility::conversions::to_string_t(U("startDay"))] = ModelBase::toJson(m_StartDay);
    }
    if(m_EndDayIsSet)
    {
        val[utility::conversions::to_string_t(U("endDay"))] = ModelBase::toJson(m_EndDay);
    }
    if(m_StartTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("startTime"))] = ModelBase::toJson(m_StartTime);
    }
    if(m_EndTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("endTime"))] = ModelBase::toJson(m_EndTime);
    }

    return val;
}

bool OutletWorkingScheduleItemDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("startDay"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startDay")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DayOfWeekType> refVal_setStartDay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartDay);
            setStartDay(refVal_setStartDay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("endDay"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("endDay")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DayOfWeekType> refVal_setEndDay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndDay);
            setEndDay(refVal_setEndDay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("endTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("endTime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    return ok;
}

void OutletWorkingScheduleItemDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StartDayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startDay")), m_StartDay));
    }
    if(m_EndDayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("endDay")), m_EndDay));
    }
    if(m_StartTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTime")), m_StartTime));
    }
    if(m_EndTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("endTime")), m_EndTime));
    }
}

bool OutletWorkingScheduleItemDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("startDay"))))
    {
        std::shared_ptr<DayOfWeekType> refVal_setStartDay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startDay"))), refVal_setStartDay );
        setStartDay(refVal_setStartDay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("endDay"))))
    {
        std::shared_ptr<DayOfWeekType> refVal_setEndDay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("endDay"))), refVal_setEndDay );
        setEndDay(refVal_setEndDay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startTime"))))
    {
        utility::string_t refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTime"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("endTime"))))
    {
        utility::string_t refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("endTime"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    return ok;
}

std::shared_ptr<DayOfWeekType> OutletWorkingScheduleItemDTO::getStartDay() const
{
    return m_StartDay;
}

void OutletWorkingScheduleItemDTO::setStartDay(const std::shared_ptr<DayOfWeekType>& value)
{
    m_StartDay = value;
    m_StartDayIsSet = true;
}

bool OutletWorkingScheduleItemDTO::startDayIsSet() const
{
    return m_StartDayIsSet;
}

void OutletWorkingScheduleItemDTO::unsetStartDay()
{
    m_StartDayIsSet = false;
}
std::shared_ptr<DayOfWeekType> OutletWorkingScheduleItemDTO::getEndDay() const
{
    return m_EndDay;
}

void OutletWorkingScheduleItemDTO::setEndDay(const std::shared_ptr<DayOfWeekType>& value)
{
    m_EndDay = value;
    m_EndDayIsSet = true;
}

bool OutletWorkingScheduleItemDTO::endDayIsSet() const
{
    return m_EndDayIsSet;
}

void OutletWorkingScheduleItemDTO::unsetEndDay()
{
    m_EndDayIsSet = false;
}
utility::string_t OutletWorkingScheduleItemDTO::getStartTime() const
{
    return m_StartTime;
}

void OutletWorkingScheduleItemDTO::setStartTime(const utility::string_t& value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}

bool OutletWorkingScheduleItemDTO::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}

void OutletWorkingScheduleItemDTO::unsetStartTime()
{
    m_StartTimeIsSet = false;
}
utility::string_t OutletWorkingScheduleItemDTO::getEndTime() const
{
    return m_EndTime;
}

void OutletWorkingScheduleItemDTO::setEndTime(const utility::string_t& value)
{
    m_EndTime = value;
    m_EndTimeIsSet = true;
}

bool OutletWorkingScheduleItemDTO::endTimeIsSet() const
{
    return m_EndTimeIsSet;
}

void OutletWorkingScheduleItemDTO::unsetEndTime()
{
    m_EndTimeIsSet = false;
}
}
}
}
}


