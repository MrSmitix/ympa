/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/SearchShipmentsRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SearchShipmentsRequest::SearchShipmentsRequest()
{
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    m_StatusesIsSet = false;
    m_OrderIdsIsSet = false;
    m_CancelledOrders = false;
    m_CancelledOrdersIsSet = false;
}

SearchShipmentsRequest::~SearchShipmentsRequest()
{
}

void SearchShipmentsRequest::validate()
{
    // TODO: implement validation
}

web::json::value SearchShipmentsRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DateFromIsSet)
    {
        val[utility::conversions::to_string_t(U("dateFrom"))] = ModelBase::toJson(m_DateFrom);
    }
    if(m_DateToIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTo"))] = ModelBase::toJson(m_DateTo);
    }
    if(m_StatusesIsSet)
    {
        val[utility::conversions::to_string_t(U("statuses"))] = ModelBase::toJson(m_Statuses);
    }
    if(m_OrderIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("orderIds"))] = ModelBase::toJson(m_OrderIds);
    }
    if(m_CancelledOrdersIsSet)
    {
        val[utility::conversions::to_string_t(U("cancelledOrders"))] = ModelBase::toJson(m_CancelledOrders);
    }

    return val;
}

bool SearchShipmentsRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("dateFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFrom);
            setDateFrom(refVal_setDateFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTo);
            setDateTo(refVal_setDateTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statuses")));
        if(!fieldValue.is_null())
        {
            std::set<std::shared_ptr<ShipmentStatusType>> refVal_setStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatuses);
            setStatuses(refVal_setStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderIds")));
        if(!fieldValue.is_null())
        {
            std::set<int64_t> refVal_setOrderIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderIds);
            setOrderIds(refVal_setOrderIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cancelledOrders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cancelledOrders")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCancelledOrders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCancelledOrders);
            setCancelledOrders(refVal_setCancelledOrders);
        }
    }
    return ok;
}

void SearchShipmentsRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DateFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateFrom")), m_DateFrom));
    }
    if(m_DateToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTo")), m_DateTo));
    }
    if(m_StatusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statuses")), m_Statuses));
    }
    if(m_OrderIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderIds")), m_OrderIds));
    }
    if(m_CancelledOrdersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cancelledOrders")), m_CancelledOrders));
    }
}

bool SearchShipmentsRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("dateFrom"))))
    {
        utility::datetime refVal_setDateFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateFrom"))), refVal_setDateFrom );
        setDateFrom(refVal_setDateFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTo"))))
    {
        utility::datetime refVal_setDateTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTo"))), refVal_setDateTo );
        setDateTo(refVal_setDateTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statuses"))))
    {
        std::set<std::shared_ptr<ShipmentStatusType>> refVal_setStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statuses"))), refVal_setStatuses );
        setStatuses(refVal_setStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderIds"))))
    {
        std::set<int64_t> refVal_setOrderIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderIds"))), refVal_setOrderIds );
        setOrderIds(refVal_setOrderIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cancelledOrders"))))
    {
        bool refVal_setCancelledOrders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cancelledOrders"))), refVal_setCancelledOrders );
        setCancelledOrders(refVal_setCancelledOrders);
    }
    return ok;
}

utility::datetime SearchShipmentsRequest::getDateFrom() const
{
    return m_DateFrom;
}

void SearchShipmentsRequest::setDateFrom(const utility::datetime& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}

bool SearchShipmentsRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}

void SearchShipmentsRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
utility::datetime SearchShipmentsRequest::getDateTo() const
{
    return m_DateTo;
}

void SearchShipmentsRequest::setDateTo(const utility::datetime& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}

bool SearchShipmentsRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}

void SearchShipmentsRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
std::set<std::shared_ptr<ShipmentStatusType>>& SearchShipmentsRequest::getStatuses()
{
    return m_Statuses;
}

void SearchShipmentsRequest::setStatuses(const std::set<std::shared_ptr<ShipmentStatusType>>& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}

bool SearchShipmentsRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}

void SearchShipmentsRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}
std::set<int64_t>& SearchShipmentsRequest::getOrderIds()
{
    return m_OrderIds;
}

void SearchShipmentsRequest::setOrderIds(std::set<int64_t> value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}

bool SearchShipmentsRequest::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}

void SearchShipmentsRequest::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}
bool SearchShipmentsRequest::isCancelledOrders() const
{
    return m_CancelledOrders;
}

void SearchShipmentsRequest::setCancelledOrders(bool value)
{
    m_CancelledOrders = value;
    m_CancelledOrdersIsSet = true;
}

bool SearchShipmentsRequest::cancelledOrdersIsSet() const
{
    return m_CancelledOrdersIsSet;
}

void SearchShipmentsRequest::unsetCancelledOrders()
{
    m_CancelledOrdersIsSet = false;
}
}
}
}
}


