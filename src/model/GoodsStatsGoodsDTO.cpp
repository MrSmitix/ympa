/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsStatsGoodsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsStatsGoodsDTO::GoodsStatsGoodsDTO()
{
    m_ShopSku = utility::conversions::to_string_t("");
    m_ShopSkuIsSet = false;
    m_MarketSku = 0L;
    m_MarketSkuIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_CategoryId = 0L;
    m_CategoryIdIsSet = false;
    m_CategoryName = utility::conversions::to_string_t("");
    m_CategoryNameIsSet = false;
    m_WeightDimensionsIsSet = false;
    m_WarehousesIsSet = false;
    m_TariffsIsSet = false;
    m_PicturesIsSet = false;
}

GoodsStatsGoodsDTO::~GoodsStatsGoodsDTO()
{
}

void GoodsStatsGoodsDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsStatsGoodsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ShopSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("shopSku"))] = ModelBase::toJson(m_ShopSku);
    }
    if(m_MarketSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("marketSku"))] = ModelBase::toJson(m_MarketSku);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_CategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryId"))] = ModelBase::toJson(m_CategoryId);
    }
    if(m_CategoryNameIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryName"))] = ModelBase::toJson(m_CategoryName);
    }
    if(m_WeightDimensionsIsSet)
    {
        val[utility::conversions::to_string_t(U("weightDimensions"))] = ModelBase::toJson(m_WeightDimensions);
    }
    if(m_WarehousesIsSet)
    {
        val[utility::conversions::to_string_t(U("warehouses"))] = ModelBase::toJson(m_Warehouses);
    }
    if(m_TariffsIsSet)
    {
        val[utility::conversions::to_string_t(U("tariffs"))] = ModelBase::toJson(m_Tariffs);
    }
    if(m_PicturesIsSet)
    {
        val[utility::conversions::to_string_t(U("pictures"))] = ModelBase::toJson(m_Pictures);
    }

    return val;
}

bool GoodsStatsGoodsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("shopSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopSku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopSku);
            setShopSku(refVal_setShopSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marketSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marketSku")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMarketSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketSku);
            setMarketSku(refVal_setMarketSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryId);
            setCategoryId(refVal_setCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategoryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryName);
            setCategoryName(refVal_setCategoryName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weightDimensions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weightDimensions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsStatsWeightDimensionsDTO> refVal_setWeightDimensions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeightDimensions);
            setWeightDimensions(refVal_setWeightDimensions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warehouses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warehouses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GoodsStatsWarehouseDTO>> refVal_setWarehouses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarehouses);
            setWarehouses(refVal_setWarehouses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tariffs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tariffs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TariffDTO>> refVal_setTariffs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTariffs);
            setTariffs(refVal_setTariffs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pictures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pictures")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPictures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPictures);
            setPictures(refVal_setPictures);
        }
    }
    return ok;
}

void GoodsStatsGoodsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ShopSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopSku")), m_ShopSku));
    }
    if(m_MarketSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marketSku")), m_MarketSku));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_CategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryId")), m_CategoryId));
    }
    if(m_CategoryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryName")), m_CategoryName));
    }
    if(m_WeightDimensionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weightDimensions")), m_WeightDimensions));
    }
    if(m_WarehousesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warehouses")), m_Warehouses));
    }
    if(m_TariffsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tariffs")), m_Tariffs));
    }
    if(m_PicturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pictures")), m_Pictures));
    }
}

bool GoodsStatsGoodsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("shopSku"))))
    {
        utility::string_t refVal_setShopSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopSku"))), refVal_setShopSku );
        setShopSku(refVal_setShopSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marketSku"))))
    {
        int64_t refVal_setMarketSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marketSku"))), refVal_setMarketSku );
        setMarketSku(refVal_setMarketSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryId"))))
    {
        int64_t refVal_setCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryId"))), refVal_setCategoryId );
        setCategoryId(refVal_setCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryName"))))
    {
        utility::string_t refVal_setCategoryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryName"))), refVal_setCategoryName );
        setCategoryName(refVal_setCategoryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weightDimensions"))))
    {
        std::shared_ptr<GoodsStatsWeightDimensionsDTO> refVal_setWeightDimensions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weightDimensions"))), refVal_setWeightDimensions );
        setWeightDimensions(refVal_setWeightDimensions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warehouses"))))
    {
        std::vector<std::shared_ptr<GoodsStatsWarehouseDTO>> refVal_setWarehouses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warehouses"))), refVal_setWarehouses );
        setWarehouses(refVal_setWarehouses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tariffs"))))
    {
        std::vector<std::shared_ptr<TariffDTO>> refVal_setTariffs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tariffs"))), refVal_setTariffs );
        setTariffs(refVal_setTariffs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pictures"))))
    {
        std::vector<utility::string_t> refVal_setPictures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pictures"))), refVal_setPictures );
        setPictures(refVal_setPictures);
    }
    return ok;
}

utility::string_t GoodsStatsGoodsDTO::getShopSku() const
{
    return m_ShopSku;
}

void GoodsStatsGoodsDTO::setShopSku(const utility::string_t& value)
{
    m_ShopSku = value;
    m_ShopSkuIsSet = true;
}

bool GoodsStatsGoodsDTO::shopSkuIsSet() const
{
    return m_ShopSkuIsSet;
}

void GoodsStatsGoodsDTO::unsetShopSku()
{
    m_ShopSkuIsSet = false;
}
int64_t GoodsStatsGoodsDTO::getMarketSku() const
{
    return m_MarketSku;
}

void GoodsStatsGoodsDTO::setMarketSku(int64_t value)
{
    m_MarketSku = value;
    m_MarketSkuIsSet = true;
}

bool GoodsStatsGoodsDTO::marketSkuIsSet() const
{
    return m_MarketSkuIsSet;
}

void GoodsStatsGoodsDTO::unsetMarketSku()
{
    m_MarketSkuIsSet = false;
}
utility::string_t GoodsStatsGoodsDTO::getName() const
{
    return m_Name;
}

void GoodsStatsGoodsDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GoodsStatsGoodsDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void GoodsStatsGoodsDTO::unsetName()
{
    m_NameIsSet = false;
}
double GoodsStatsGoodsDTO::getPrice() const
{
    return m_Price;
}

void GoodsStatsGoodsDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool GoodsStatsGoodsDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void GoodsStatsGoodsDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t GoodsStatsGoodsDTO::getCategoryId() const
{
    return m_CategoryId;
}

void GoodsStatsGoodsDTO::setCategoryId(int64_t value)
{
    m_CategoryId = value;
    m_CategoryIdIsSet = true;
}

bool GoodsStatsGoodsDTO::categoryIdIsSet() const
{
    return m_CategoryIdIsSet;
}

void GoodsStatsGoodsDTO::unsetCategoryId()
{
    m_CategoryIdIsSet = false;
}
utility::string_t GoodsStatsGoodsDTO::getCategoryName() const
{
    return m_CategoryName;
}

void GoodsStatsGoodsDTO::setCategoryName(const utility::string_t& value)
{
    m_CategoryName = value;
    m_CategoryNameIsSet = true;
}

bool GoodsStatsGoodsDTO::categoryNameIsSet() const
{
    return m_CategoryNameIsSet;
}

void GoodsStatsGoodsDTO::unsetCategoryName()
{
    m_CategoryNameIsSet = false;
}
std::shared_ptr<GoodsStatsWeightDimensionsDTO> GoodsStatsGoodsDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void GoodsStatsGoodsDTO::setWeightDimensions(const std::shared_ptr<GoodsStatsWeightDimensionsDTO>& value)
{
    m_WeightDimensions = value;
    m_WeightDimensionsIsSet = true;
}

bool GoodsStatsGoodsDTO::weightDimensionsIsSet() const
{
    return m_WeightDimensionsIsSet;
}

void GoodsStatsGoodsDTO::unsetWeightDimensions()
{
    m_WeightDimensionsIsSet = false;
}
std::vector<std::shared_ptr<GoodsStatsWarehouseDTO>>& GoodsStatsGoodsDTO::getWarehouses()
{
    return m_Warehouses;
}

void GoodsStatsGoodsDTO::setWarehouses(const std::vector<std::shared_ptr<GoodsStatsWarehouseDTO>>& value)
{
    m_Warehouses = value;
    m_WarehousesIsSet = true;
}

bool GoodsStatsGoodsDTO::warehousesIsSet() const
{
    return m_WarehousesIsSet;
}

void GoodsStatsGoodsDTO::unsetWarehouses()
{
    m_WarehousesIsSet = false;
}
std::vector<std::shared_ptr<TariffDTO>>& GoodsStatsGoodsDTO::getTariffs()
{
    return m_Tariffs;
}

void GoodsStatsGoodsDTO::setTariffs(const std::vector<std::shared_ptr<TariffDTO>>& value)
{
    m_Tariffs = value;
    m_TariffsIsSet = true;
}

bool GoodsStatsGoodsDTO::tariffsIsSet() const
{
    return m_TariffsIsSet;
}

void GoodsStatsGoodsDTO::unsetTariffs()
{
    m_TariffsIsSet = false;
}
std::vector<utility::string_t>& GoodsStatsGoodsDTO::getPictures()
{
    return m_Pictures;
}

void GoodsStatsGoodsDTO::setPictures(const std::vector<utility::string_t>& value)
{
    m_Pictures = value;
    m_PicturesIsSet = true;
}

bool GoodsStatsGoodsDTO::picturesIsSet() const
{
    return m_PicturesIsSet;
}

void GoodsStatsGoodsDTO::unsetPictures()
{
    m_PicturesIsSet = false;
}
}
}
}
}


