/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsFeedbackMediaDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsFeedbackMediaDTO::GoodsFeedbackMediaDTO()
{
    m_PhotosIsSet = false;
    m_VideosIsSet = false;
}

GoodsFeedbackMediaDTO::~GoodsFeedbackMediaDTO()
{
}

void GoodsFeedbackMediaDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsFeedbackMediaDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PhotosIsSet)
    {
        val[utility::conversions::to_string_t(U("photos"))] = ModelBase::toJson(m_Photos);
    }
    if(m_VideosIsSet)
    {
        val[utility::conversions::to_string_t(U("videos"))] = ModelBase::toJson(m_Videos);
    }

    return val;
}

bool GoodsFeedbackMediaDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("photos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("photos")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPhotos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhotos);
            setPhotos(refVal_setPhotos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("videos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("videos")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setVideos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVideos);
            setVideos(refVal_setVideos);
        }
    }
    return ok;
}

void GoodsFeedbackMediaDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PhotosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("photos")), m_Photos));
    }
    if(m_VideosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("videos")), m_Videos));
    }
}

bool GoodsFeedbackMediaDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("photos"))))
    {
        std::vector<utility::string_t> refVal_setPhotos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("photos"))), refVal_setPhotos );
        setPhotos(refVal_setPhotos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("videos"))))
    {
        std::vector<utility::string_t> refVal_setVideos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("videos"))), refVal_setVideos );
        setVideos(refVal_setVideos);
    }
    return ok;
}

std::vector<utility::string_t>& GoodsFeedbackMediaDTO::getPhotos()
{
    return m_Photos;
}

void GoodsFeedbackMediaDTO::setPhotos(const std::vector<utility::string_t>& value)
{
    m_Photos = value;
    m_PhotosIsSet = true;
}

bool GoodsFeedbackMediaDTO::photosIsSet() const
{
    return m_PhotosIsSet;
}

void GoodsFeedbackMediaDTO::unsetPhotos()
{
    m_PhotosIsSet = false;
}
std::vector<utility::string_t>& GoodsFeedbackMediaDTO::getVideos()
{
    return m_Videos;
}

void GoodsFeedbackMediaDTO::setVideos(const std::vector<utility::string_t>& value)
{
    m_Videos = value;
    m_VideosIsSet = true;
}

bool GoodsFeedbackMediaDTO::videosIsSet() const
{
    return m_VideosIsSet;
}

void GoodsFeedbackMediaDTO::unsetVideos()
{
    m_VideosIsSet = false;
}
}
}
}
}


