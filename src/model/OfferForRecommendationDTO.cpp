/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferForRecommendationDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferForRecommendationDTO::OfferForRecommendationDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_PriceIsSet = false;
    m_CofinancePriceIsSet = false;
    m_CompetitivenessIsSet = false;
    m_Shows = 0L;
    m_ShowsIsSet = false;
}

OfferForRecommendationDTO::~OfferForRecommendationDTO()
{
}

void OfferForRecommendationDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferForRecommendationDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_CofinancePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("cofinancePrice"))] = ModelBase::toJson(m_CofinancePrice);
    }
    if(m_CompetitivenessIsSet)
    {
        val[utility::conversions::to_string_t(U("competitiveness"))] = ModelBase::toJson(m_Competitiveness);
    }
    if(m_ShowsIsSet)
    {
        val[utility::conversions::to_string_t(U("shows"))] = ModelBase::toJson(m_Shows);
    }

    return val;
}

bool OfferForRecommendationDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cofinancePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cofinancePrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPriceDTO> refVal_setCofinancePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCofinancePrice);
            setCofinancePrice(refVal_setCofinancePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("competitiveness"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("competitiveness")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PriceCompetitivenessType> refVal_setCompetitiveness;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompetitiveness);
            setCompetitiveness(refVal_setCompetitiveness);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shows"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shows")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setShows;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShows);
            setShows(refVal_setShows);
        }
    }
    return ok;
}

void OfferForRecommendationDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_CofinancePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cofinancePrice")), m_CofinancePrice));
    }
    if(m_CompetitivenessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("competitiveness")), m_Competitiveness));
    }
    if(m_ShowsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shows")), m_Shows));
    }
}

bool OfferForRecommendationDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cofinancePrice"))))
    {
        std::shared_ptr<GetPriceDTO> refVal_setCofinancePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cofinancePrice"))), refVal_setCofinancePrice );
        setCofinancePrice(refVal_setCofinancePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("competitiveness"))))
    {
        std::shared_ptr<PriceCompetitivenessType> refVal_setCompetitiveness;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("competitiveness"))), refVal_setCompetitiveness );
        setCompetitiveness(refVal_setCompetitiveness);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shows"))))
    {
        int64_t refVal_setShows;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shows"))), refVal_setShows );
        setShows(refVal_setShows);
    }
    return ok;
}

utility::string_t OfferForRecommendationDTO::getOfferId() const
{
    return m_OfferId;
}

void OfferForRecommendationDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool OfferForRecommendationDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void OfferForRecommendationDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::shared_ptr<BasePriceDTO> OfferForRecommendationDTO::getPrice() const
{
    return m_Price;
}

void OfferForRecommendationDTO::setPrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool OfferForRecommendationDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void OfferForRecommendationDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
std::shared_ptr<GetPriceDTO> OfferForRecommendationDTO::getCofinancePrice() const
{
    return m_CofinancePrice;
}

void OfferForRecommendationDTO::setCofinancePrice(const std::shared_ptr<GetPriceDTO>& value)
{
    m_CofinancePrice = value;
    m_CofinancePriceIsSet = true;
}

bool OfferForRecommendationDTO::cofinancePriceIsSet() const
{
    return m_CofinancePriceIsSet;
}

void OfferForRecommendationDTO::unsetCofinancePrice()
{
    m_CofinancePriceIsSet = false;
}
std::shared_ptr<PriceCompetitivenessType> OfferForRecommendationDTO::getCompetitiveness() const
{
    return m_Competitiveness;
}

void OfferForRecommendationDTO::setCompetitiveness(const std::shared_ptr<PriceCompetitivenessType>& value)
{
    m_Competitiveness = value;
    m_CompetitivenessIsSet = true;
}

bool OfferForRecommendationDTO::competitivenessIsSet() const
{
    return m_CompetitivenessIsSet;
}

void OfferForRecommendationDTO::unsetCompetitiveness()
{
    m_CompetitivenessIsSet = false;
}
int64_t OfferForRecommendationDTO::getShows() const
{
    return m_Shows;
}

void OfferForRecommendationDTO::setShows(int64_t value)
{
    m_Shows = value;
    m_ShowsIsSet = true;
}

bool OfferForRecommendationDTO::showsIsSet() const
{
    return m_ShowsIsSet;
}

void OfferForRecommendationDTO::unsetShows()
{
    m_ShowsIsSet = false;
}
}
}
}
}


