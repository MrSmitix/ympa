/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BriefOrderItemInstanceDTO model module.
 * @module model/BriefOrderItemInstanceDTO
 * @version LATEST
 */
class BriefOrderItemInstanceDTO {
    /**
     * Constructs a new <code>BriefOrderItemInstanceDTO</code>.
     * Идентификатор единицы товара.  Заполните только одно поле в зависимости от того, в какой системе маркирован товар.  Подробно о работе с маркируемыми товарами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/cz.html). 
     * @alias module:model/BriefOrderItemInstanceDTO
     */
    constructor() { 
        
        BriefOrderItemInstanceDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BriefOrderItemInstanceDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BriefOrderItemInstanceDTO} obj Optional instance to populate.
     * @return {module:model/BriefOrderItemInstanceDTO} The populated <code>BriefOrderItemInstanceDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BriefOrderItemInstanceDTO();

            if (data.hasOwnProperty('cis')) {
                obj['cis'] = ApiClient.convertToType(data['cis'], 'String');
            }
            if (data.hasOwnProperty('uin')) {
                obj['uin'] = ApiClient.convertToType(data['uin'], 'String');
            }
            if (data.hasOwnProperty('rnpt')) {
                obj['rnpt'] = ApiClient.convertToType(data['rnpt'], 'String');
            }
            if (data.hasOwnProperty('gtd')) {
                obj['gtd'] = ApiClient.convertToType(data['gtd'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BriefOrderItemInstanceDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BriefOrderItemInstanceDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cis'] && !(typeof data['cis'] === 'string' || data['cis'] instanceof String)) {
            throw new Error("Expected the field `cis` to be a primitive type in the JSON string but got " + data['cis']);
        }
        // ensure the json data is a string
        if (data['uin'] && !(typeof data['uin'] === 'string' || data['uin'] instanceof String)) {
            throw new Error("Expected the field `uin` to be a primitive type in the JSON string but got " + data['uin']);
        }
        // ensure the json data is a string
        if (data['rnpt'] && !(typeof data['rnpt'] === 'string' || data['rnpt'] instanceof String)) {
            throw new Error("Expected the field `rnpt` to be a primitive type in the JSON string but got " + data['rnpt']);
        }
        // ensure the json data is a string
        if (data['gtd'] && !(typeof data['gtd'] === 'string' || data['gtd'] instanceof String)) {
            throw new Error("Expected the field `gtd` to be a primitive type in the JSON string but got " + data['gtd']);
        }

        return true;
    }


}



/**
 * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).  {% note warning %}  Не экранируйте косую черту в коде символа-разделителя `\\u001d`!  ✅ `01030410947874432155Qbag!\\u001d93Zjqw`  ❌ `01030410947874432155Qbag!\\\\u001d93Zjqw`  Косые черты и кавычки в других местах экранируйте по правилам JSON: `\\\\` и `\\\"`  {% endnote %} 
 * @member {String} cis
 */
BriefOrderItemInstanceDTO.prototype['cis'] = undefined;

/**
 * Уникальный идентификационный номер ювелирного изделия.  Представляет собой число из 16 цифр. 
 * @member {String} uin
 */
BriefOrderItemInstanceDTO.prototype['uin'] = undefined;

/**
 * Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
 * @member {String} rnpt
 */
BriefOrderItemInstanceDTO.prototype['rnpt'] = undefined;

/**
 * Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
 * @member {String} gtd
 */
BriefOrderItemInstanceDTO.prototype['gtd'] = undefined;






export default BriefOrderItemInstanceDTO;

