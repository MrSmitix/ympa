/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyType from './CurrencyType';

/**
 * The OfferDTO model module.
 * @module model/OfferDTO
 * @version LATEST
 */
class OfferDTO {
    /**
     * Constructs a new <code>OfferDTO</code>.
     * Предложение.
     * @alias module:model/OfferDTO
     * @param modelId {Number} Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} 
     */
    constructor(modelId) { 
        
        OfferDTO.initialize(this, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelId) { 
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>OfferDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferDTO} obj Optional instance to populate.
     * @return {module:model/OfferDTO} The populated <code>OfferDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferDTO();

            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('feedId')) {
                obj['feedId'] = ApiClient.convertToType(data['feedId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('shopCategoryId')) {
                obj['shopCategoryId'] = ApiClient.convertToType(data['shopCategoryId'], 'String');
            }
            if (data.hasOwnProperty('marketCategoryId')) {
                obj['marketCategoryId'] = ApiClient.convertToType(data['marketCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('preDiscountPrice')) {
                obj['preDiscountPrice'] = ApiClient.convertToType(data['preDiscountPrice'], 'Number');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('cutPrice')) {
                obj['cutPrice'] = ApiClient.convertToType(data['cutPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyType.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('bid')) {
                obj['bid'] = ApiClient.convertToType(data['bid'], 'Number');
            }
            if (data.hasOwnProperty('cbid')) {
                obj['cbid'] = ApiClient.convertToType(data['cbid'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OfferDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OfferDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OfferDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['shopCategoryId'] && !(typeof data['shopCategoryId'] === 'string' || data['shopCategoryId'] instanceof String)) {
            throw new Error("Expected the field `shopCategoryId` to be a primitive type in the JSON string but got " + data['shopCategoryId']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

OfferDTO.RequiredProperties = ["modelId"];

/**
 * Цена предложения.  До версии 2.0 партнерского API у параметра был тип String. 
 * @member {Number} price
 */
OfferDTO.prototype['price'] = undefined;

/**
 * Идентификатор прайс-листа, содержащего предложение.  Параметр доступен начиная с версии 2.0 партнерского API. 
 * @member {Number} feedId
 */
OfferDTO.prototype['feedId'] = undefined;

/**
 * Идентификатор предложения из прайс-листа.  Параметр выводится, если в прайс-листе задан уникальный идентификатор. Если в прайс-листе содержится несколько предложений с одинаковыми идентификаторами, параметр `id` указывается только для первого из них, для остальных параметры `id` и `feedId` не выводятся.  Параметр доступен начиная с версии 2.0 партнерского API. 
 * @member {String} id
 */
OfferDTO.prototype['id'] = undefined;

/**
 * Идентификатор категории предложения, указанный магазином в прайс-листе.  Параметр выводится только для предложений, у которых указана категория в прайс-листе.  Параметр доступен начиная с версии 2.0 партнерского API. 
 * @member {String} shopCategoryId
 */
OfferDTO.prototype['shopCategoryId'] = undefined;

/**
 * Идентификатор категории предложения в дереве категорий Маркета. Параметр доступен начиная с версии 2.0 партнерского API. 
 * @member {Number} marketCategoryId
 */
OfferDTO.prototype['marketCategoryId'] = undefined;

/**
 * Цена предложения без скидки.
 * @member {Number} preDiscountPrice
 */
OfferDTO.prototype['preDiscountPrice'] = undefined;

/**
 * Скидка на предложение в процентах.
 * @member {Number} discount
 */
OfferDTO.prototype['discount'] = undefined;

/**
 * Является ли предложение уцененным:  * `true` — да. * `false` — нет.  Параметр доступен начиная с версии 2.58 партнерского API. 
 * @member {Boolean} cutPrice
 */
OfferDTO.prototype['cutPrice'] = undefined;

/**
 * URL-адрес предложения на сайте магазина.
 * @member {String} url
 */
OfferDTO.prototype['url'] = undefined;

/**
 * Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} 
 * @member {Number} modelId
 */
OfferDTO.prototype['modelId'] = undefined;

/**
 * Наименование предложения.
 * @member {String} name
 */
OfferDTO.prototype['name'] = undefined;

/**
 * @member {module:model/CurrencyType} currency
 */
OfferDTO.prototype['currency'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
 * @member {Number} bid
 */
OfferDTO.prototype['bid'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Ставка на клик. 
 * @member {Number} cbid
 */
OfferDTO.prototype['cbid'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Процент комиссии на товар при продаже по CPA. 
 * @member {Number} fee
 */
OfferDTO.prototype['fee'] = undefined;

/**
 * Признак блокировки предложения. Возможные значения: * `false` — предложение активно, параметр не выводится. * `true` — предложение заблокировано. Параметр выводится, если предложение заблокировано и не попадает в выдачу Маркета. Это может произойти из-за отключения магазина. 
 * @member {Boolean} blocked
 */
OfferDTO.prototype['blocked'] = undefined;






export default OfferDTO;

