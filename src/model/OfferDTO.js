/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyType from './CurrencyType';

/**
 * The OfferDTO model module.
 * @module model/OfferDTO
 * @version LATEST
 */
class OfferDTO {
    /**
     * @member {Number} price
     * @type {Number}
     */
    price;
    /**
     * @member {Number} feedId
     * @type {Number}
     */
    feedId;
    /**
     * @member {String} id
     * @type {String}
     */
    id;
    /**
     * @member {String} shopCategoryId
     * @type {String}
     */
    shopCategoryId;
    /**
     * @member {Number} marketCategoryId
     * @type {Number}
     */
    marketCategoryId;
    /**
     * @member {Number} preDiscountPrice
     * @type {Number}
     */
    preDiscountPrice;
    /**
     * @member {Number} discount
     * @type {Number}
     */
    discount;
    /**
     * @member {Boolean} cutPrice
     * @type {Boolean}
     */
    cutPrice;
    /**
     * @member {String} url
     * @type {String}
     */
    url;
    /**
     * @member {Number} modelId
     * @type {Number}
     */
    modelId;
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {module:model/CurrencyType} currency
     * @type {module:model/CurrencyType}
     */
    currency;
    /**
     * @member {Number} bid
     * @type {Number}
     */
    bid;
    /**
     * @member {Number} cbid
     * @type {Number}
     */
    cbid;
    /**
     * @member {Number} fee
     * @type {Number}
     */
    fee;
    /**
     * @member {Boolean} blocked
     * @type {Boolean}
     */
    blocked;

    

    /**
     * Constructs a new <code>OfferDTO</code>.
     * Предложение.
     * @alias module:model/OfferDTO
     * @param modelId {Number} Идентификатор модели Маркета, с которой соотнесено предложение.  Если предложение не соотнесено ни с какой карточкой модели, то параметр `modelid` содержит значение `0`.  {% note info %}  Идентификатор модели присутствует в URL карточки модели в виде значения параметра `product`. Например: `https://market.yandex.ru/product/13584121`.  {% endnote %} 
     */
    constructor(modelId) { 
        
        OfferDTO.initialize(this, modelId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelId) { 
        obj['modelId'] = modelId;
    }

    /**
     * Constructs a <code>OfferDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferDTO} obj Optional instance to populate.
     * @return {module:model/OfferDTO} The populated <code>OfferDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferDTO();

            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('feedId')) {
                obj['feedId'] = ApiClient.convertToType(data['feedId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('shopCategoryId')) {
                obj['shopCategoryId'] = ApiClient.convertToType(data['shopCategoryId'], 'String');
            }
            if (data.hasOwnProperty('marketCategoryId')) {
                obj['marketCategoryId'] = ApiClient.convertToType(data['marketCategoryId'], 'Number');
            }
            if (data.hasOwnProperty('preDiscountPrice')) {
                obj['preDiscountPrice'] = ApiClient.convertToType(data['preDiscountPrice'], 'Number');
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('cutPrice')) {
                obj['cutPrice'] = ApiClient.convertToType(data['cutPrice'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('modelId')) {
                obj['modelId'] = ApiClient.convertToType(data['modelId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyType.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('bid')) {
                obj['bid'] = ApiClient.convertToType(data['bid'], 'Number');
            }
            if (data.hasOwnProperty('cbid')) {
                obj['cbid'] = ApiClient.convertToType(data['cbid'], 'Number');
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = ApiClient.convertToType(data['fee'], 'Number');
            }
            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Boolean');
            }
        }
        return obj;
    }
}



export default OfferDTO;

