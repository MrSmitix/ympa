/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OptionValuesLimitedDTO from './OptionValuesLimitedDTO';

/**
 * The ValueRestrictionDTO model module.
 * @module model/ValueRestrictionDTO
 * @version LATEST
 */
class ValueRestrictionDTO {
    /**
     * Constructs a new <code>ValueRestrictionDTO</code>.
     * Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 
     * @alias module:model/ValueRestrictionDTO
     * @param limitingParameterId {Number} Идентификатор ограничивающей характеристики.
     * @param limitedValues {Array.<module:model/OptionValuesLimitedDTO>} Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
     */
    constructor(limitingParameterId, limitedValues) { 
        
        ValueRestrictionDTO.initialize(this, limitingParameterId, limitedValues);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, limitingParameterId, limitedValues) { 
        obj['limitingParameterId'] = limitingParameterId;
        obj['limitedValues'] = limitedValues;
    }

    /**
     * Constructs a <code>ValueRestrictionDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ValueRestrictionDTO} obj Optional instance to populate.
     * @return {module:model/ValueRestrictionDTO} The populated <code>ValueRestrictionDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ValueRestrictionDTO();

            if (data.hasOwnProperty('limitingParameterId')) {
                obj['limitingParameterId'] = ApiClient.convertToType(data['limitingParameterId'], 'Number');
            }
            if (data.hasOwnProperty('limitedValues')) {
                obj['limitedValues'] = ApiClient.convertToType(data['limitedValues'], [OptionValuesLimitedDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ValueRestrictionDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ValueRestrictionDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ValueRestrictionDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['limitedValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['limitedValues'])) {
                throw new Error("Expected the field `limitedValues` to be an array in the JSON data but got " + data['limitedValues']);
            }
            // validate the optional field `limitedValues` (array)
            for (const item of data['limitedValues']) {
                OptionValuesLimitedDTO.validateJSON(item);
            };
        }

        return true;
    }


}

ValueRestrictionDTO.RequiredProperties = ["limitingParameterId", "limitedValues"];

/**
 * Идентификатор ограничивающей характеристики.
 * @member {Number} limitingParameterId
 */
ValueRestrictionDTO.prototype['limitingParameterId'] = undefined;

/**
 * Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
 * @member {Array.<module:model/OptionValuesLimitedDTO>} limitedValues
 */
ValueRestrictionDTO.prototype['limitedValues'] = undefined;






export default ValueRestrictionDTO;

