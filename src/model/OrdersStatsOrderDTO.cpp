/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrdersStatsOrderDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrdersStatsOrderDTO::OrdersStatsOrderDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_CreationDateIsSet = false;
    m_StatusUpdateDate = utility::datetime();
    m_StatusUpdateDateIsSet = false;
    m_StatusIsSet = false;
    m_PartnerOrderId = utility::conversions::to_string_t("");
    m_PartnerOrderIdIsSet = false;
    m_PaymentTypeIsSet = false;
    m_Fake = false;
    m_FakeIsSet = false;
    m_DeliveryRegionIsSet = false;
    m_ItemsIsSet = false;
    m_InitialItemsIsSet = false;
    m_PaymentsIsSet = false;
    m_CommissionsIsSet = false;
}

OrdersStatsOrderDTO::~OrdersStatsOrderDTO()
{
}

void OrdersStatsOrderDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrdersStatsOrderDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_CreationDateIsSet)
    {
        val[utility::conversions::to_string_t(U("creationDate"))] = ModelBase::toJson(m_CreationDate);
    }
    if(m_StatusUpdateDateIsSet)
    {
        val[utility::conversions::to_string_t(U("statusUpdateDate"))] = ModelBase::toJson(m_StatusUpdateDate);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_PartnerOrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("partnerOrderId"))] = ModelBase::toJson(m_PartnerOrderId);
    }
    if(m_PaymentTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("paymentType"))] = ModelBase::toJson(m_PaymentType);
    }
    if(m_FakeIsSet)
    {
        val[utility::conversions::to_string_t(U("fake"))] = ModelBase::toJson(m_Fake);
    }
    if(m_DeliveryRegionIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryRegion"))] = ModelBase::toJson(m_DeliveryRegion);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }
    if(m_InitialItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("initialItems"))] = ModelBase::toJson(m_InitialItems);
    }
    if(m_PaymentsIsSet)
    {
        val[utility::conversions::to_string_t(U("payments"))] = ModelBase::toJson(m_Payments);
    }
    if(m_CommissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("commissions"))] = ModelBase::toJson(m_Commissions);
    }

    return val;
}

bool OrdersStatsOrderDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creationDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creationDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationDate);
            setCreationDate(refVal_setCreationDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusUpdateDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusUpdateDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStatusUpdateDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusUpdateDate);
            setStatusUpdateDate(refVal_setStatusUpdateDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderStatsStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partnerOrderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partnerOrderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartnerOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerOrderId);
            setPartnerOrderId(refVal_setPartnerOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paymentType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paymentType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsOrderPaymentType> refVal_setPaymentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaymentType);
            setPaymentType(refVal_setPaymentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fake"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fake")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFake;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFake);
            setFake(refVal_setFake);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryRegion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryRegion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsDeliveryRegionDTO> refVal_setDeliveryRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryRegion);
            setDeliveryRegion(refVal_setDeliveryRegion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrdersStatsItemDTO>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("initialItems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("initialItems")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrdersStatsItemDTO>> refVal_setInitialItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInitialItems);
            setInitialItems(refVal_setInitialItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> refVal_setPayments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPayments);
            setPayments(refVal_setPayments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("commissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("commissions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> refVal_setCommissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCommissions);
            setCommissions(refVal_setCommissions);
        }
    }
    return ok;
}

void OrdersStatsOrderDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_CreationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creationDate")), m_CreationDate));
    }
    if(m_StatusUpdateDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusUpdateDate")), m_StatusUpdateDate));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_PartnerOrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partnerOrderId")), m_PartnerOrderId));
    }
    if(m_PaymentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paymentType")), m_PaymentType));
    }
    if(m_FakeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fake")), m_Fake));
    }
    if(m_DeliveryRegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryRegion")), m_DeliveryRegion));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
    if(m_InitialItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("initialItems")), m_InitialItems));
    }
    if(m_PaymentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payments")), m_Payments));
    }
    if(m_CommissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("commissions")), m_Commissions));
    }
}

bool OrdersStatsOrderDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creationDate"))))
    {
        utility::datetime refVal_setCreationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creationDate"))), refVal_setCreationDate );
        setCreationDate(refVal_setCreationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusUpdateDate"))))
    {
        utility::datetime refVal_setStatusUpdateDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusUpdateDate"))), refVal_setStatusUpdateDate );
        setStatusUpdateDate(refVal_setStatusUpdateDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<OrderStatsStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partnerOrderId"))))
    {
        utility::string_t refVal_setPartnerOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partnerOrderId"))), refVal_setPartnerOrderId );
        setPartnerOrderId(refVal_setPartnerOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paymentType"))))
    {
        std::shared_ptr<OrdersStatsOrderPaymentType> refVal_setPaymentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paymentType"))), refVal_setPaymentType );
        setPaymentType(refVal_setPaymentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fake"))))
    {
        bool refVal_setFake;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fake"))), refVal_setFake );
        setFake(refVal_setFake);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryRegion"))))
    {
        std::shared_ptr<OrdersStatsDeliveryRegionDTO> refVal_setDeliveryRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryRegion"))), refVal_setDeliveryRegion );
        setDeliveryRegion(refVal_setDeliveryRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<OrdersStatsItemDTO>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("initialItems"))))
    {
        std::vector<std::shared_ptr<OrdersStatsItemDTO>> refVal_setInitialItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("initialItems"))), refVal_setInitialItems );
        setInitialItems(refVal_setInitialItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payments"))))
    {
        std::vector<std::shared_ptr<OrdersStatsPaymentDTO>> refVal_setPayments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payments"))), refVal_setPayments );
        setPayments(refVal_setPayments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("commissions"))))
    {
        std::vector<std::shared_ptr<OrdersStatsCommissionDTO>> refVal_setCommissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("commissions"))), refVal_setCommissions );
        setCommissions(refVal_setCommissions);
    }
    return ok;
}

int64_t OrdersStatsOrderDTO::getId() const
{
    return m_Id;
}

void OrdersStatsOrderDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrdersStatsOrderDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrdersStatsOrderDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime OrdersStatsOrderDTO::getCreationDate() const
{
    return m_CreationDate;
}

void OrdersStatsOrderDTO::setCreationDate(const utility::datetime& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}

bool OrdersStatsOrderDTO::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}

void OrdersStatsOrderDTO::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
utility::datetime OrdersStatsOrderDTO::getStatusUpdateDate() const
{
    return m_StatusUpdateDate;
}

void OrdersStatsOrderDTO::setStatusUpdateDate(const utility::datetime& value)
{
    m_StatusUpdateDate = value;
    m_StatusUpdateDateIsSet = true;
}

bool OrdersStatsOrderDTO::statusUpdateDateIsSet() const
{
    return m_StatusUpdateDateIsSet;
}

void OrdersStatsOrderDTO::unsetStatusUpdateDate()
{
    m_StatusUpdateDateIsSet = false;
}
std::shared_ptr<OrderStatsStatusType> OrdersStatsOrderDTO::getStatus() const
{
    return m_Status;
}

void OrdersStatsOrderDTO::setStatus(const std::shared_ptr<OrderStatsStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool OrdersStatsOrderDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void OrdersStatsOrderDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t OrdersStatsOrderDTO::getPartnerOrderId() const
{
    return m_PartnerOrderId;
}

void OrdersStatsOrderDTO::setPartnerOrderId(const utility::string_t& value)
{
    m_PartnerOrderId = value;
    m_PartnerOrderIdIsSet = true;
}

bool OrdersStatsOrderDTO::partnerOrderIdIsSet() const
{
    return m_PartnerOrderIdIsSet;
}

void OrdersStatsOrderDTO::unsetPartnerOrderId()
{
    m_PartnerOrderIdIsSet = false;
}
std::shared_ptr<OrdersStatsOrderPaymentType> OrdersStatsOrderDTO::getPaymentType() const
{
    return m_PaymentType;
}

void OrdersStatsOrderDTO::setPaymentType(const std::shared_ptr<OrdersStatsOrderPaymentType>& value)
{
    m_PaymentType = value;
    m_PaymentTypeIsSet = true;
}

bool OrdersStatsOrderDTO::paymentTypeIsSet() const
{
    return m_PaymentTypeIsSet;
}

void OrdersStatsOrderDTO::unsetPaymentType()
{
    m_PaymentTypeIsSet = false;
}
bool OrdersStatsOrderDTO::isFake() const
{
    return m_Fake;
}

void OrdersStatsOrderDTO::setFake(bool value)
{
    m_Fake = value;
    m_FakeIsSet = true;
}

bool OrdersStatsOrderDTO::fakeIsSet() const
{
    return m_FakeIsSet;
}

void OrdersStatsOrderDTO::unsetFake()
{
    m_FakeIsSet = false;
}
std::shared_ptr<OrdersStatsDeliveryRegionDTO> OrdersStatsOrderDTO::getDeliveryRegion() const
{
    return m_DeliveryRegion;
}

void OrdersStatsOrderDTO::setDeliveryRegion(const std::shared_ptr<OrdersStatsDeliveryRegionDTO>& value)
{
    m_DeliveryRegion = value;
    m_DeliveryRegionIsSet = true;
}

bool OrdersStatsOrderDTO::deliveryRegionIsSet() const
{
    return m_DeliveryRegionIsSet;
}

void OrdersStatsOrderDTO::unsetDeliveryRegion()
{
    m_DeliveryRegionIsSet = false;
}
std::vector<std::shared_ptr<OrdersStatsItemDTO>>& OrdersStatsOrderDTO::getItems()
{
    return m_Items;
}

void OrdersStatsOrderDTO::setItems(const std::vector<std::shared_ptr<OrdersStatsItemDTO>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool OrdersStatsOrderDTO::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void OrdersStatsOrderDTO::unsetItems()
{
    m_ItemsIsSet = false;
}
std::vector<std::shared_ptr<OrdersStatsItemDTO>>& OrdersStatsOrderDTO::getInitialItems()
{
    return m_InitialItems;
}

void OrdersStatsOrderDTO::setInitialItems(const std::vector<std::shared_ptr<OrdersStatsItemDTO>>& value)
{
    m_InitialItems = value;
    m_InitialItemsIsSet = true;
}

bool OrdersStatsOrderDTO::initialItemsIsSet() const
{
    return m_InitialItemsIsSet;
}

void OrdersStatsOrderDTO::unsetInitialItems()
{
    m_InitialItemsIsSet = false;
}
std::vector<std::shared_ptr<OrdersStatsPaymentDTO>>& OrdersStatsOrderDTO::getPayments()
{
    return m_Payments;
}

void OrdersStatsOrderDTO::setPayments(const std::vector<std::shared_ptr<OrdersStatsPaymentDTO>>& value)
{
    m_Payments = value;
    m_PaymentsIsSet = true;
}

bool OrdersStatsOrderDTO::paymentsIsSet() const
{
    return m_PaymentsIsSet;
}

void OrdersStatsOrderDTO::unsetPayments()
{
    m_PaymentsIsSet = false;
}
std::vector<std::shared_ptr<OrdersStatsCommissionDTO>>& OrdersStatsOrderDTO::getCommissions()
{
    return m_Commissions;
}

void OrdersStatsOrderDTO::setCommissions(const std::vector<std::shared_ptr<OrdersStatsCommissionDTO>>& value)
{
    m_Commissions = value;
    m_CommissionsIsSet = true;
}

bool OrdersStatsOrderDTO::commissionsIsSet() const
{
    return m_CommissionsIsSet;
}

void OrdersStatsOrderDTO::unsetCommissions()
{
    m_CommissionsIsSet = false;
}
}
}
}
}


