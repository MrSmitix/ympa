/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FlippingPagerDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FlippingPagerDTO::FlippingPagerDTO()
{
    m_Total = 0;
    m_TotalIsSet = false;
    m_From = 0;
    m_FromIsSet = false;
    m_To = 0;
    m_ToIsSet = false;
    m_CurrentPage = 0;
    m_CurrentPageIsSet = false;
    m_PagesCount = 0;
    m_PagesCountIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
}

FlippingPagerDTO::~FlippingPagerDTO()
{
}

void FlippingPagerDTO::validate()
{
    // TODO: implement validation
}

web::json::value FlippingPagerDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_CurrentPageIsSet)
    {
        val[utility::conversions::to_string_t(U("currentPage"))] = ModelBase::toJson(m_CurrentPage);
    }
    if(m_PagesCountIsSet)
    {
        val[utility::conversions::to_string_t(U("pagesCount"))] = ModelBase::toJson(m_PagesCount);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("pageSize"))] = ModelBase::toJson(m_PageSize);
    }

    return val;
}

bool FlippingPagerDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currentPage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currentPage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCurrentPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentPage);
            setCurrentPage(refVal_setCurrentPage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pagesCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pagesCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPagesCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPagesCount);
            setPagesCount(refVal_setPagesCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageSize);
            setPageSize(refVal_setPageSize);
        }
    }
    return ok;
}

void FlippingPagerDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_CurrentPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currentPage")), m_CurrentPage));
    }
    if(m_PagesCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pagesCount")), m_PagesCount));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageSize")), m_PageSize));
    }
}

bool FlippingPagerDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        int32_t refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        int32_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        int32_t refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currentPage"))))
    {
        int32_t refVal_setCurrentPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currentPage"))), refVal_setCurrentPage );
        setCurrentPage(refVal_setCurrentPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pagesCount"))))
    {
        int32_t refVal_setPagesCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pagesCount"))), refVal_setPagesCount );
        setPagesCount(refVal_setPagesCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageSize"))))
    {
        int32_t refVal_setPageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageSize"))), refVal_setPageSize );
        setPageSize(refVal_setPageSize);
    }
    return ok;
}

int32_t FlippingPagerDTO::getTotal() const
{
    return m_Total;
}

void FlippingPagerDTO::setTotal(int32_t value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool FlippingPagerDTO::totalIsSet() const
{
    return m_TotalIsSet;
}

void FlippingPagerDTO::unsetTotal()
{
    m_TotalIsSet = false;
}
int32_t FlippingPagerDTO::getFrom() const
{
    return m_From;
}

void FlippingPagerDTO::setFrom(int32_t value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool FlippingPagerDTO::fromIsSet() const
{
    return m_FromIsSet;
}

void FlippingPagerDTO::unsetFrom()
{
    m_FromIsSet = false;
}
int32_t FlippingPagerDTO::getTo() const
{
    return m_To;
}

void FlippingPagerDTO::setTo(int32_t value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool FlippingPagerDTO::toIsSet() const
{
    return m_ToIsSet;
}

void FlippingPagerDTO::unsetTo()
{
    m_ToIsSet = false;
}
int32_t FlippingPagerDTO::getCurrentPage() const
{
    return m_CurrentPage;
}

void FlippingPagerDTO::setCurrentPage(int32_t value)
{
    m_CurrentPage = value;
    m_CurrentPageIsSet = true;
}

bool FlippingPagerDTO::currentPageIsSet() const
{
    return m_CurrentPageIsSet;
}

void FlippingPagerDTO::unsetCurrentPage()
{
    m_CurrentPageIsSet = false;
}
int32_t FlippingPagerDTO::getPagesCount() const
{
    return m_PagesCount;
}

void FlippingPagerDTO::setPagesCount(int32_t value)
{
    m_PagesCount = value;
    m_PagesCountIsSet = true;
}

bool FlippingPagerDTO::pagesCountIsSet() const
{
    return m_PagesCountIsSet;
}

void FlippingPagerDTO::unsetPagesCount()
{
    m_PagesCountIsSet = false;
}
int32_t FlippingPagerDTO::getPageSize() const
{
    return m_PageSize;
}

void FlippingPagerDTO::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}

bool FlippingPagerDTO::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void FlippingPagerDTO::unsetPageSize()
{
    m_PageSizeIsSet = false;
}
}
}
}
}


