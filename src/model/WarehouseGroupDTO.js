/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WarehouseDTO from './WarehouseDTO';

/**
 * The WarehouseGroupDTO model module.
 * @module model/WarehouseGroupDTO
 * @version LATEST
 */
class WarehouseGroupDTO {
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {module:model/WarehouseDTO} mainWarehouse
     * @type {module:model/WarehouseDTO}
     */
    mainWarehouse;
    /**
     * @member {Array.<module:model/WarehouseDTO>} warehouses
     * @type {Array.<module:model/WarehouseDTO>}
     */
    warehouses;

    

    /**
     * Constructs a new <code>WarehouseGroupDTO</code>.
     * Информация о группе складов.
     * @alias module:model/WarehouseGroupDTO
     * @param name {String} Название группы складов.
     * @param mainWarehouse {module:model/WarehouseDTO} 
     * @param warehouses {Array.<module:model/WarehouseDTO>} Список складов, входящих в группу.
     */
    constructor(name, mainWarehouse, warehouses) { 
        
        WarehouseGroupDTO.initialize(this, name, mainWarehouse, warehouses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, mainWarehouse, warehouses) { 
        obj['name'] = name;
        obj['mainWarehouse'] = mainWarehouse;
        obj['warehouses'] = warehouses;
    }

    /**
     * Constructs a <code>WarehouseGroupDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WarehouseGroupDTO} obj Optional instance to populate.
     * @return {module:model/WarehouseGroupDTO} The populated <code>WarehouseGroupDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WarehouseGroupDTO();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('mainWarehouse')) {
                obj['mainWarehouse'] = WarehouseDTO.constructFromObject(data['mainWarehouse']);
            }
            if (data.hasOwnProperty('warehouses')) {
                obj['warehouses'] = ApiClient.convertToType(data['warehouses'], [WarehouseDTO]);
            }
        }
        return obj;
    }
}



export default WarehouseGroupDTO;

