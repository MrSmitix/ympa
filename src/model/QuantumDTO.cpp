/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/QuantumDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QuantumDTO::QuantumDTO()
{
    m_MinQuantity = 0;
    m_MinQuantityIsSet = false;
    m_StepQuantity = 0;
    m_StepQuantityIsSet = false;
}

QuantumDTO::~QuantumDTO()
{
}

void QuantumDTO::validate()
{
    // TODO: implement validation
}

web::json::value QuantumDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MinQuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("minQuantity"))] = ModelBase::toJson(m_MinQuantity);
    }
    if(m_StepQuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("stepQuantity"))] = ModelBase::toJson(m_StepQuantity);
    }

    return val;
}

bool QuantumDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("minQuantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minQuantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinQuantity);
            setMinQuantity(refVal_setMinQuantity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stepQuantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stepQuantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStepQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStepQuantity);
            setStepQuantity(refVal_setStepQuantity);
        }
    }
    return ok;
}

void QuantumDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MinQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minQuantity")), m_MinQuantity));
    }
    if(m_StepQuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stepQuantity")), m_StepQuantity));
    }
}

bool QuantumDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("minQuantity"))))
    {
        int32_t refVal_setMinQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minQuantity"))), refVal_setMinQuantity );
        setMinQuantity(refVal_setMinQuantity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stepQuantity"))))
    {
        int32_t refVal_setStepQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stepQuantity"))), refVal_setStepQuantity );
        setStepQuantity(refVal_setStepQuantity);
    }
    return ok;
}

int32_t QuantumDTO::getMinQuantity() const
{
    return m_MinQuantity;
}

void QuantumDTO::setMinQuantity(int32_t value)
{
    m_MinQuantity = value;
    m_MinQuantityIsSet = true;
}

bool QuantumDTO::minQuantityIsSet() const
{
    return m_MinQuantityIsSet;
}

void QuantumDTO::unsetMinQuantity()
{
    m_MinQuantityIsSet = false;
}
int32_t QuantumDTO::getStepQuantity() const
{
    return m_StepQuantity;
}

void QuantumDTO::setStepQuantity(int32_t value)
{
    m_StepQuantity = value;
    m_StepQuantityIsSet = true;
}

bool QuantumDTO::stepQuantityIsSet() const
{
    return m_StepQuantityIsSet;
}

void QuantumDTO::unsetStepQuantity()
{
    m_StepQuantityIsSet = false;
}
}
}
}
}


