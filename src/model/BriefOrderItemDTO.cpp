/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/BriefOrderItemDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BriefOrderItemDTO::BriefOrderItemDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_VatIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_OfferName = utility::conversions::to_string_t("");
    m_OfferNameIsSet = false;
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_InstancesIsSet = false;
}

BriefOrderItemDTO::~BriefOrderItemDTO()
{
}

void BriefOrderItemDTO::validate()
{
    // TODO: implement validation
}

web::json::value BriefOrderItemDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_VatIsSet)
    {
        val[utility::conversions::to_string_t(U("vat"))] = ModelBase::toJson(m_Vat);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_OfferNameIsSet)
    {
        val[utility::conversions::to_string_t(U("offerName"))] = ModelBase::toJson(m_OfferName);
    }
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_InstancesIsSet)
    {
        val[utility::conversions::to_string_t(U("instances"))] = ModelBase::toJson(m_Instances);
    }

    return val;
}

bool BriefOrderItemDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vat")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderVatType> refVal_setVat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVat);
            setVat(refVal_setVat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferName);
            setOfferName(refVal_setOfferName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instances")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemInstanceDTO>> refVal_setInstances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstances);
            setInstances(refVal_setInstances);
        }
    }
    return ok;
}

void BriefOrderItemDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_VatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vat")), m_Vat));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_OfferNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerName")), m_OfferName));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_InstancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instances")), m_Instances));
    }
}

bool BriefOrderItemDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vat"))))
    {
        std::shared_ptr<OrderVatType> refVal_setVat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vat"))), refVal_setVat );
        setVat(refVal_setVat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int32_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offerName"))))
    {
        utility::string_t refVal_setOfferName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerName"))), refVal_setOfferName );
        setOfferName(refVal_setOfferName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instances"))))
    {
        std::vector<std::shared_ptr<OrderItemInstanceDTO>> refVal_setInstances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instances"))), refVal_setInstances );
        setInstances(refVal_setInstances);
    }
    return ok;
}

int64_t BriefOrderItemDTO::getId() const
{
    return m_Id;
}

void BriefOrderItemDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BriefOrderItemDTO::idIsSet() const
{
    return m_IdIsSet;
}

void BriefOrderItemDTO::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<OrderVatType> BriefOrderItemDTO::getVat() const
{
    return m_Vat;
}

void BriefOrderItemDTO::setVat(const std::shared_ptr<OrderVatType>& value)
{
    m_Vat = value;
    m_VatIsSet = true;
}

bool BriefOrderItemDTO::vatIsSet() const
{
    return m_VatIsSet;
}

void BriefOrderItemDTO::unsetVat()
{
    m_VatIsSet = false;
}
int32_t BriefOrderItemDTO::getCount() const
{
    return m_Count;
}

void BriefOrderItemDTO::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool BriefOrderItemDTO::countIsSet() const
{
    return m_CountIsSet;
}

void BriefOrderItemDTO::unsetCount()
{
    m_CountIsSet = false;
}
double BriefOrderItemDTO::getPrice() const
{
    return m_Price;
}

void BriefOrderItemDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool BriefOrderItemDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void BriefOrderItemDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
utility::string_t BriefOrderItemDTO::getOfferName() const
{
    return m_OfferName;
}

void BriefOrderItemDTO::setOfferName(const utility::string_t& value)
{
    m_OfferName = value;
    m_OfferNameIsSet = true;
}

bool BriefOrderItemDTO::offerNameIsSet() const
{
    return m_OfferNameIsSet;
}

void BriefOrderItemDTO::unsetOfferName()
{
    m_OfferNameIsSet = false;
}
utility::string_t BriefOrderItemDTO::getOfferId() const
{
    return m_OfferId;
}

void BriefOrderItemDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool BriefOrderItemDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void BriefOrderItemDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::vector<std::shared_ptr<OrderItemInstanceDTO>>& BriefOrderItemDTO::getInstances()
{
    return m_Instances;
}

void BriefOrderItemDTO::setInstances(const std::vector<std::shared_ptr<OrderItemInstanceDTO>>& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}

bool BriefOrderItemDTO::instancesIsSet() const
{
    return m_InstancesIsSet;
}

void BriefOrderItemDTO::unsetInstances()
{
    m_InstancesIsSet = false;
}
}
}
}
}


