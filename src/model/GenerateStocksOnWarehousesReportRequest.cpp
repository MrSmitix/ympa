/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateStocksOnWarehousesReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateStocksOnWarehousesReportRequest::GenerateStocksOnWarehousesReportRequest()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_WarehouseIdsIsSet = false;
    m_ReportDateIsSet = false;
    m_CategoryIdsIsSet = false;
    m_HasStocks = false;
    m_HasStocksIsSet = false;
}

GenerateStocksOnWarehousesReportRequest::~GenerateStocksOnWarehousesReportRequest()
{
}

void GenerateStocksOnWarehousesReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value GenerateStocksOnWarehousesReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_WarehouseIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("warehouseIds"))] = ModelBase::toJson(m_WarehouseIds);
    }
    if(m_ReportDateIsSet)
    {
        val[utility::conversions::to_string_t(U("reportDate"))] = ModelBase::toJson(m_ReportDate);
    }
    if(m_CategoryIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryIds"))] = ModelBase::toJson(m_CategoryIds);
    }
    if(m_HasStocksIsSet)
    {
        val[utility::conversions::to_string_t(U("hasStocks"))] = ModelBase::toJson(m_HasStocks);
    }

    return val;
}

bool GenerateStocksOnWarehousesReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warehouseIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warehouseIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setWarehouseIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarehouseIds);
            setWarehouseIds(refVal_setWarehouseIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reportDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setReportDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportDate);
            setReportDate(refVal_setReportDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setCategoryIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryIds);
            setCategoryIds(refVal_setCategoryIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hasStocks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasStocks")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasStocks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasStocks);
            setHasStocks(refVal_setHasStocks);
        }
    }
    return ok;
}

void GenerateStocksOnWarehousesReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_WarehouseIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warehouseIds")), m_WarehouseIds));
    }
    if(m_ReportDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportDate")), m_ReportDate));
    }
    if(m_CategoryIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryIds")), m_CategoryIds));
    }
    if(m_HasStocksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasStocks")), m_HasStocks));
    }
}

bool GenerateStocksOnWarehousesReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warehouseIds"))))
    {
        std::vector<int64_t> refVal_setWarehouseIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warehouseIds"))), refVal_setWarehouseIds );
        setWarehouseIds(refVal_setWarehouseIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportDate"))))
    {
        utility::datetime refVal_setReportDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportDate"))), refVal_setReportDate );
        setReportDate(refVal_setReportDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryIds"))))
    {
        std::vector<int64_t> refVal_setCategoryIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryIds"))), refVal_setCategoryIds );
        setCategoryIds(refVal_setCategoryIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hasStocks"))))
    {
        bool refVal_setHasStocks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasStocks"))), refVal_setHasStocks );
        setHasStocks(refVal_setHasStocks);
    }
    return ok;
}

int64_t GenerateStocksOnWarehousesReportRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GenerateStocksOnWarehousesReportRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool GenerateStocksOnWarehousesReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void GenerateStocksOnWarehousesReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
std::vector<int64_t>& GenerateStocksOnWarehousesReportRequest::getWarehouseIds()
{
    return m_WarehouseIds;
}

void GenerateStocksOnWarehousesReportRequest::setWarehouseIds(std::vector<int64_t> value)
{
    m_WarehouseIds = value;
    m_WarehouseIdsIsSet = true;
}

bool GenerateStocksOnWarehousesReportRequest::warehouseIdsIsSet() const
{
    return m_WarehouseIdsIsSet;
}

void GenerateStocksOnWarehousesReportRequest::unsetWarehouseIds()
{
    m_WarehouseIdsIsSet = false;
}
utility::datetime GenerateStocksOnWarehousesReportRequest::getReportDate() const
{
    return m_ReportDate;
}

void GenerateStocksOnWarehousesReportRequest::setReportDate(const utility::datetime& value)
{
    m_ReportDate = value;
    m_ReportDateIsSet = true;
}

bool GenerateStocksOnWarehousesReportRequest::reportDateIsSet() const
{
    return m_ReportDateIsSet;
}

void GenerateStocksOnWarehousesReportRequest::unsetReportDate()
{
    m_ReportDateIsSet = false;
}
std::vector<int64_t>& GenerateStocksOnWarehousesReportRequest::getCategoryIds()
{
    return m_CategoryIds;
}

void GenerateStocksOnWarehousesReportRequest::setCategoryIds(std::vector<int64_t> value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}

bool GenerateStocksOnWarehousesReportRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}

void GenerateStocksOnWarehousesReportRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}
bool GenerateStocksOnWarehousesReportRequest::isHasStocks() const
{
    return m_HasStocks;
}

void GenerateStocksOnWarehousesReportRequest::setHasStocks(bool value)
{
    m_HasStocks = value;
    m_HasStocksIsSet = true;
}

bool GenerateStocksOnWarehousesReportRequest::hasStocksIsSet() const
{
    return m_HasStocksIsSet;
}

void GenerateStocksOnWarehousesReportRequest::unsetHasStocks()
{
    m_HasStocksIsSet = false;
}
}
}
}
}


