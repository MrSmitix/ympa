/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReportInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReportInfoDTO::ReportInfoDTO()
{
    m_StatusIsSet = false;
    m_SubStatusIsSet = false;
    m_GenerationRequestedAt = utility::datetime();
    m_GenerationRequestedAtIsSet = false;
    m_GenerationFinishedAt = utility::datetime();
    m_GenerationFinishedAtIsSet = false;
    m_file = utility::conversions::to_string_t("");
    m_fileIsSet = false;
    m_EstimatedGenerationTime = 0L;
    m_EstimatedGenerationTimeIsSet = false;
}

ReportInfoDTO::~ReportInfoDTO()
{
}

void ReportInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value ReportInfoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_SubStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("subStatus"))] = ModelBase::toJson(m_SubStatus);
    }
    if(m_GenerationRequestedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("generationRequestedAt"))] = ModelBase::toJson(m_GenerationRequestedAt);
    }
    if(m_GenerationFinishedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("generationFinishedAt"))] = ModelBase::toJson(m_GenerationFinishedAt);
    }
    if(m_fileIsSet)
    {
        val[utility::conversions::to_string_t(U("file"))] = ModelBase::toJson(m_file);
    }
    if(m_EstimatedGenerationTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("estimatedGenerationTime"))] = ModelBase::toJson(m_EstimatedGenerationTime);
    }

    return val;
}

bool ReportInfoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReportStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReportSubStatusType> refVal_setSubStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubStatus);
            setSubStatus(refVal_setSubStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("generationRequestedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("generationRequestedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setGenerationRequestedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGenerationRequestedAt);
            setGenerationRequestedAt(refVal_setGenerationRequestedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("generationFinishedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("generationFinishedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setGenerationFinishedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGenerationFinishedAt);
            setGenerationFinishedAt(refVal_setGenerationFinishedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("file"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("file")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFile);
            setFile(refVal_setFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estimatedGenerationTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimatedGenerationTime")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEstimatedGenerationTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEstimatedGenerationTime);
            setEstimatedGenerationTime(refVal_setEstimatedGenerationTime);
        }
    }
    return ok;
}

void ReportInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_SubStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subStatus")), m_SubStatus));
    }
    if(m_GenerationRequestedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("generationRequestedAt")), m_GenerationRequestedAt));
    }
    if(m_GenerationFinishedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("generationFinishedAt")), m_GenerationFinishedAt));
    }
    if(m_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("file")), m_file));
    }
    if(m_EstimatedGenerationTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimatedGenerationTime")), m_EstimatedGenerationTime));
    }
}

bool ReportInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<ReportStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subStatus"))))
    {
        std::shared_ptr<ReportSubStatusType> refVal_setSubStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subStatus"))), refVal_setSubStatus );
        setSubStatus(refVal_setSubStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("generationRequestedAt"))))
    {
        utility::datetime refVal_setGenerationRequestedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("generationRequestedAt"))), refVal_setGenerationRequestedAt );
        setGenerationRequestedAt(refVal_setGenerationRequestedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("generationFinishedAt"))))
    {
        utility::datetime refVal_setGenerationFinishedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("generationFinishedAt"))), refVal_setGenerationFinishedAt );
        setGenerationFinishedAt(refVal_setGenerationFinishedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("file"))))
    {
        utility::string_t refVal_setFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("file"))), refVal_setFile );
        setFile(refVal_setFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estimatedGenerationTime"))))
    {
        int64_t refVal_setEstimatedGenerationTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimatedGenerationTime"))), refVal_setEstimatedGenerationTime );
        setEstimatedGenerationTime(refVal_setEstimatedGenerationTime);
    }
    return ok;
}

std::shared_ptr<ReportStatusType> ReportInfoDTO::getStatus() const
{
    return m_Status;
}

void ReportInfoDTO::setStatus(const std::shared_ptr<ReportStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ReportInfoDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void ReportInfoDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<ReportSubStatusType> ReportInfoDTO::getSubStatus() const
{
    return m_SubStatus;
}

void ReportInfoDTO::setSubStatus(const std::shared_ptr<ReportSubStatusType>& value)
{
    m_SubStatus = value;
    m_SubStatusIsSet = true;
}

bool ReportInfoDTO::subStatusIsSet() const
{
    return m_SubStatusIsSet;
}

void ReportInfoDTO::unsetSubStatus()
{
    m_SubStatusIsSet = false;
}
utility::datetime ReportInfoDTO::getGenerationRequestedAt() const
{
    return m_GenerationRequestedAt;
}

void ReportInfoDTO::setGenerationRequestedAt(const utility::datetime& value)
{
    m_GenerationRequestedAt = value;
    m_GenerationRequestedAtIsSet = true;
}

bool ReportInfoDTO::generationRequestedAtIsSet() const
{
    return m_GenerationRequestedAtIsSet;
}

void ReportInfoDTO::unsetGenerationRequestedAt()
{
    m_GenerationRequestedAtIsSet = false;
}
utility::datetime ReportInfoDTO::getGenerationFinishedAt() const
{
    return m_GenerationFinishedAt;
}

void ReportInfoDTO::setGenerationFinishedAt(const utility::datetime& value)
{
    m_GenerationFinishedAt = value;
    m_GenerationFinishedAtIsSet = true;
}

bool ReportInfoDTO::generationFinishedAtIsSet() const
{
    return m_GenerationFinishedAtIsSet;
}

void ReportInfoDTO::unsetGenerationFinishedAt()
{
    m_GenerationFinishedAtIsSet = false;
}
utility::string_t ReportInfoDTO::getFile() const
{
    return m_file;
}

void ReportInfoDTO::setFile(const utility::string_t& value)
{
    m_file = value;
    m_fileIsSet = true;
}

bool ReportInfoDTO::fileIsSet() const
{
    return m_fileIsSet;
}

void ReportInfoDTO::unsetfile()
{
    m_fileIsSet = false;
}
int64_t ReportInfoDTO::getEstimatedGenerationTime() const
{
    return m_EstimatedGenerationTime;
}

void ReportInfoDTO::setEstimatedGenerationTime(int64_t value)
{
    m_EstimatedGenerationTime = value;
    m_EstimatedGenerationTimeIsSet = true;
}

bool ReportInfoDTO::estimatedGenerationTimeIsSet() const
{
    return m_EstimatedGenerationTimeIsSet;
}

void ReportInfoDTO::unsetEstimatedGenerationTime()
{
    m_EstimatedGenerationTimeIsSet = false;
}
}
}
}
}


