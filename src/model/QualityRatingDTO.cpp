/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/QualityRatingDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QualityRatingDTO::QualityRatingDTO()
{
    m_Rating = 0L;
    m_RatingIsSet = false;
    m_CalculationDateIsSet = false;
    m_ComponentsIsSet = false;
}

QualityRatingDTO::~QualityRatingDTO()
{
}

void QualityRatingDTO::validate()
{
    // TODO: implement validation
}

web::json::value QualityRatingDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RatingIsSet)
    {
        val[utility::conversions::to_string_t(U("rating"))] = ModelBase::toJson(m_Rating);
    }
    if(m_CalculationDateIsSet)
    {
        val[utility::conversions::to_string_t(U("calculationDate"))] = ModelBase::toJson(m_CalculationDate);
    }
    if(m_ComponentsIsSet)
    {
        val[utility::conversions::to_string_t(U("components"))] = ModelBase::toJson(m_Components);
    }

    return val;
}

bool QualityRatingDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("rating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rating")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRating);
            setRating(refVal_setRating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("calculationDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("calculationDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCalculationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCalculationDate);
            setCalculationDate(refVal_setCalculationDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("components"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("components")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QualityRatingComponentDTO>> refVal_setComponents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComponents);
            setComponents(refVal_setComponents);
        }
    }
    return ok;
}

void QualityRatingDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rating")), m_Rating));
    }
    if(m_CalculationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("calculationDate")), m_CalculationDate));
    }
    if(m_ComponentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("components")), m_Components));
    }
}

bool QualityRatingDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("rating"))))
    {
        int64_t refVal_setRating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rating"))), refVal_setRating );
        setRating(refVal_setRating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("calculationDate"))))
    {
        utility::datetime refVal_setCalculationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("calculationDate"))), refVal_setCalculationDate );
        setCalculationDate(refVal_setCalculationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("components"))))
    {
        std::vector<std::shared_ptr<QualityRatingComponentDTO>> refVal_setComponents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("components"))), refVal_setComponents );
        setComponents(refVal_setComponents);
    }
    return ok;
}

int64_t QualityRatingDTO::getRating() const
{
    return m_Rating;
}

void QualityRatingDTO::setRating(int64_t value)
{
    m_Rating = value;
    m_RatingIsSet = true;
}

bool QualityRatingDTO::ratingIsSet() const
{
    return m_RatingIsSet;
}

void QualityRatingDTO::unsetRating()
{
    m_RatingIsSet = false;
}
utility::datetime QualityRatingDTO::getCalculationDate() const
{
    return m_CalculationDate;
}

void QualityRatingDTO::setCalculationDate(const utility::datetime& value)
{
    m_CalculationDate = value;
    m_CalculationDateIsSet = true;
}

bool QualityRatingDTO::calculationDateIsSet() const
{
    return m_CalculationDateIsSet;
}

void QualityRatingDTO::unsetCalculationDate()
{
    m_CalculationDateIsSet = false;
}
std::vector<std::shared_ptr<QualityRatingComponentDTO>>& QualityRatingDTO::getComponents()
{
    return m_Components;
}

void QualityRatingDTO::setComponents(const std::vector<std::shared_ptr<QualityRatingComponentDTO>>& value)
{
    m_Components = value;
    m_ComponentsIsSet = true;
}

bool QualityRatingDTO::componentsIsSet() const
{
    return m_ComponentsIsSet;
}

void QualityRatingDTO::unsetComponents()
{
    m_ComponentsIsSet = false;
}
}
}
}
}


