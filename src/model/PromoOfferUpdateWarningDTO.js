/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PromoOfferUpdateWarningCodeType from './PromoOfferUpdateWarningCodeType';

/**
 * The PromoOfferUpdateWarningDTO model module.
 * @module model/PromoOfferUpdateWarningDTO
 * @version LATEST
 */
class PromoOfferUpdateWarningDTO {
    /**
     * Constructs a new <code>PromoOfferUpdateWarningDTO</code>.
     * Предупреждение, которое появилось при добавлении товара в акцию или изменении его цен.
     * @alias module:model/PromoOfferUpdateWarningDTO
     * @param code {module:model/PromoOfferUpdateWarningCodeType} 
     */
    constructor(code) { 
        
        PromoOfferUpdateWarningDTO.initialize(this, code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code) { 
        obj['code'] = code;
    }

    /**
     * Constructs a <code>PromoOfferUpdateWarningDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PromoOfferUpdateWarningDTO} obj Optional instance to populate.
     * @return {module:model/PromoOfferUpdateWarningDTO} The populated <code>PromoOfferUpdateWarningDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PromoOfferUpdateWarningDTO();

            if (data.hasOwnProperty('code')) {
                obj['code'] = PromoOfferUpdateWarningCodeType.constructFromObject(data['code']);
            }
            if (data.hasOwnProperty('campaignIds')) {
                obj['campaignIds'] = ApiClient.convertToType(data['campaignIds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PromoOfferUpdateWarningDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PromoOfferUpdateWarningDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PromoOfferUpdateWarningDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['campaignIds'])) {
            throw new Error("Expected the field `campaignIds` to be an array in the JSON data but got " + data['campaignIds']);
        }

        return true;
    }


}

PromoOfferUpdateWarningDTO.RequiredProperties = ["code"];

/**
 * @member {module:model/PromoOfferUpdateWarningCodeType} code
 */
PromoOfferUpdateWarningDTO.prototype['code'] = undefined;

/**
 * Идентификаторы магазинов в кабинете, для которых получены предупреждения.  Не возвращается, если предупреждения действуют для всех магазинов в кабинете. 
 * @member {Array.<Number>} campaignIds
 */
PromoOfferUpdateWarningDTO.prototype['campaignIds'] = undefined;






export default PromoOfferUpdateWarningDTO;

