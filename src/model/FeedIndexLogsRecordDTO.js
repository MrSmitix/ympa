/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedIndexLogsErrorDTO from './FeedIndexLogsErrorDTO';
import FeedIndexLogsIndexType from './FeedIndexLogsIndexType';
import FeedIndexLogsOffersDTO from './FeedIndexLogsOffersDTO';
import FeedIndexLogsStatusType from './FeedIndexLogsStatusType';

/**
 * The FeedIndexLogsRecordDTO model module.
 * @module model/FeedIndexLogsRecordDTO
 * @version LATEST
 */
class FeedIndexLogsRecordDTO {
    /**
     * Constructs a new <code>FeedIndexLogsRecordDTO</code>.
     * Список отчетов по индексации прайс-листа.
     * @alias module:model/FeedIndexLogsRecordDTO
     */
    constructor() { 
        
        FeedIndexLogsRecordDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedIndexLogsRecordDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedIndexLogsRecordDTO} obj Optional instance to populate.
     * @return {module:model/FeedIndexLogsRecordDTO} The populated <code>FeedIndexLogsRecordDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedIndexLogsRecordDTO();

            if (data.hasOwnProperty('downloadTime')) {
                obj['downloadTime'] = ApiClient.convertToType(data['downloadTime'], 'Date');
            }
            if (data.hasOwnProperty('fileTime')) {
                obj['fileTime'] = ApiClient.convertToType(data['fileTime'], 'Date');
            }
            if (data.hasOwnProperty('generationId')) {
                obj['generationId'] = ApiClient.convertToType(data['generationId'], 'Number');
            }
            if (data.hasOwnProperty('indexType')) {
                obj['indexType'] = FeedIndexLogsIndexType.constructFromObject(data['indexType']);
            }
            if (data.hasOwnProperty('publishedTime')) {
                obj['publishedTime'] = ApiClient.convertToType(data['publishedTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = FeedIndexLogsStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = FeedIndexLogsErrorDTO.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = FeedIndexLogsOffersDTO.constructFromObject(data['offers']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedIndexLogsRecordDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedIndexLogsRecordDTO</code>.
     */
    static validateJSON(data) {
        // validate the optional field `error`
        if (data['error']) { // data not null
          FeedIndexLogsErrorDTO.validateJSON(data['error']);
        }
        // validate the optional field `offers`
        if (data['offers']) { // data not null
          FeedIndexLogsOffersDTO.validateJSON(data['offers']);
        }

        return true;
    }


}



/**
 * Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
 * @member {Date} downloadTime
 */
FeedIndexLogsRecordDTO.prototype['downloadTime'] = undefined;

/**
 * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
 * @member {Date} fileTime
 */
FeedIndexLogsRecordDTO.prototype['fileTime'] = undefined;

/**
 * Идентификатор индексации.
 * @member {Number} generationId
 */
FeedIndexLogsRecordDTO.prototype['generationId'] = undefined;

/**
 * @member {module:model/FeedIndexLogsIndexType} indexType
 */
FeedIndexLogsRecordDTO.prototype['indexType'] = undefined;

/**
 * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
 * @member {Date} publishedTime
 */
FeedIndexLogsRecordDTO.prototype['publishedTime'] = undefined;

/**
 * @member {module:model/FeedIndexLogsStatusType} status
 */
FeedIndexLogsRecordDTO.prototype['status'] = undefined;

/**
 * @member {module:model/FeedIndexLogsErrorDTO} error
 */
FeedIndexLogsRecordDTO.prototype['error'] = undefined;

/**
 * @member {module:model/FeedIndexLogsOffersDTO} offers
 */
FeedIndexLogsRecordDTO.prototype['offers'] = undefined;






export default FeedIndexLogsRecordDTO;

