/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/UpdatePromoOffersResultDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdatePromoOffersResultDTO::UpdatePromoOffersResultDTO()
{
    m_RejectedOffersIsSet = false;
    m_WarningOffersIsSet = false;
}

UpdatePromoOffersResultDTO::~UpdatePromoOffersResultDTO()
{
}

void UpdatePromoOffersResultDTO::validate()
{
    // TODO: implement validation
}

web::json::value UpdatePromoOffersResultDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RejectedOffersIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectedOffers"))] = ModelBase::toJson(m_RejectedOffers);
    }
    if(m_WarningOffersIsSet)
    {
        val[utility::conversions::to_string_t(U("warningOffers"))] = ModelBase::toJson(m_WarningOffers);
    }

    return val;
}

bool UpdatePromoOffersResultDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("rejectedOffers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectedOffers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>> refVal_setRejectedOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRejectedOffers);
            setRejectedOffers(refVal_setRejectedOffers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warningOffers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warningOffers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>> refVal_setWarningOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarningOffers);
            setWarningOffers(refVal_setWarningOffers);
        }
    }
    return ok;
}

void UpdatePromoOffersResultDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RejectedOffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectedOffers")), m_RejectedOffers));
    }
    if(m_WarningOffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warningOffers")), m_WarningOffers));
    }
}

bool UpdatePromoOffersResultDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectedOffers"))))
    {
        std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>> refVal_setRejectedOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectedOffers"))), refVal_setRejectedOffers );
        setRejectedOffers(refVal_setRejectedOffers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warningOffers"))))
    {
        std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>> refVal_setWarningOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warningOffers"))), refVal_setWarningOffers );
        setWarningOffers(refVal_setWarningOffers);
    }
    return ok;
}

std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>>& UpdatePromoOffersResultDTO::getRejectedOffers()
{
    return m_RejectedOffers;
}

void UpdatePromoOffersResultDTO::setRejectedOffers(const std::vector<std::shared_ptr<RejectedPromoOfferUpdateDTO>>& value)
{
    m_RejectedOffers = value;
    m_RejectedOffersIsSet = true;
}

bool UpdatePromoOffersResultDTO::rejectedOffersIsSet() const
{
    return m_RejectedOffersIsSet;
}

void UpdatePromoOffersResultDTO::unsetRejectedOffers()
{
    m_RejectedOffersIsSet = false;
}
std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>>& UpdatePromoOffersResultDTO::getWarningOffers()
{
    return m_WarningOffers;
}

void UpdatePromoOffersResultDTO::setWarningOffers(const std::vector<std::shared_ptr<WarningPromoOfferUpdateDTO>>& value)
{
    m_WarningOffers = value;
    m_WarningOffersIsSet = true;
}

bool UpdatePromoOffersResultDTO::warningOffersIsSet() const
{
    return m_WarningOffersIsSet;
}

void UpdatePromoOffersResultDTO::unsetWarningOffers()
{
    m_WarningOffersIsSet = false;
}
}
}
}
}


