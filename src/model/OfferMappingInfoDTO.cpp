/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferMappingInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferMappingInfoDTO::OfferMappingInfoDTO()
{
    m_MappingIsSet = false;
    m_AwaitingModerationMappingIsSet = false;
    m_RejectedMappingIsSet = false;
}

OfferMappingInfoDTO::~OfferMappingInfoDTO()
{
}

void OfferMappingInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferMappingInfoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MappingIsSet)
    {
        val[utility::conversions::to_string_t(U("mapping"))] = ModelBase::toJson(m_Mapping);
    }
    if(m_AwaitingModerationMappingIsSet)
    {
        val[utility::conversions::to_string_t(U("awaitingModerationMapping"))] = ModelBase::toJson(m_AwaitingModerationMapping);
    }
    if(m_RejectedMappingIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectedMapping"))] = ModelBase::toJson(m_RejectedMapping);
    }

    return val;
}

bool OfferMappingInfoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mapping"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mapping")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferMappingDTO> refVal_setMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMapping);
            setMapping(refVal_setMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("awaitingModerationMapping"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("awaitingModerationMapping")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferMappingDTO> refVal_setAwaitingModerationMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAwaitingModerationMapping);
            setAwaitingModerationMapping(refVal_setAwaitingModerationMapping);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejectedMapping"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectedMapping")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferMappingDTO> refVal_setRejectedMapping;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRejectedMapping);
            setRejectedMapping(refVal_setRejectedMapping);
        }
    }
    return ok;
}

void OfferMappingInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mapping")), m_Mapping));
    }
    if(m_AwaitingModerationMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("awaitingModerationMapping")), m_AwaitingModerationMapping));
    }
    if(m_RejectedMappingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectedMapping")), m_RejectedMapping));
    }
}

bool OfferMappingInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mapping"))))
    {
        std::shared_ptr<OfferMappingDTO> refVal_setMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mapping"))), refVal_setMapping );
        setMapping(refVal_setMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("awaitingModerationMapping"))))
    {
        std::shared_ptr<OfferMappingDTO> refVal_setAwaitingModerationMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("awaitingModerationMapping"))), refVal_setAwaitingModerationMapping );
        setAwaitingModerationMapping(refVal_setAwaitingModerationMapping);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectedMapping"))))
    {
        std::shared_ptr<OfferMappingDTO> refVal_setRejectedMapping;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectedMapping"))), refVal_setRejectedMapping );
        setRejectedMapping(refVal_setRejectedMapping);
    }
    return ok;
}

std::shared_ptr<OfferMappingDTO> OfferMappingInfoDTO::getMapping() const
{
    return m_Mapping;
}

void OfferMappingInfoDTO::setMapping(const std::shared_ptr<OfferMappingDTO>& value)
{
    m_Mapping = value;
    m_MappingIsSet = true;
}

bool OfferMappingInfoDTO::mappingIsSet() const
{
    return m_MappingIsSet;
}

void OfferMappingInfoDTO::unsetMapping()
{
    m_MappingIsSet = false;
}
std::shared_ptr<OfferMappingDTO> OfferMappingInfoDTO::getAwaitingModerationMapping() const
{
    return m_AwaitingModerationMapping;
}

void OfferMappingInfoDTO::setAwaitingModerationMapping(const std::shared_ptr<OfferMappingDTO>& value)
{
    m_AwaitingModerationMapping = value;
    m_AwaitingModerationMappingIsSet = true;
}

bool OfferMappingInfoDTO::awaitingModerationMappingIsSet() const
{
    return m_AwaitingModerationMappingIsSet;
}

void OfferMappingInfoDTO::unsetAwaitingModerationMapping()
{
    m_AwaitingModerationMappingIsSet = false;
}
std::shared_ptr<OfferMappingDTO> OfferMappingInfoDTO::getRejectedMapping() const
{
    return m_RejectedMapping;
}

void OfferMappingInfoDTO::setRejectedMapping(const std::shared_ptr<OfferMappingDTO>& value)
{
    m_RejectedMapping = value;
    m_RejectedMappingIsSet = true;
}

bool OfferMappingInfoDTO::rejectedMappingIsSet() const
{
    return m_RejectedMappingIsSet;
}

void OfferMappingInfoDTO::unsetRejectedMapping()
{
    m_RejectedMappingIsSet = false;
}
}
}
}
}


