/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedDTO from './FeedDTO';

/**
 * The GetFeedsResponse model module.
 * @module model/GetFeedsResponse
 * @version LATEST
 */
class GetFeedsResponse {
    /**
     * Constructs a new <code>GetFeedsResponse</code>.
     * Ответ на запрос списка прайс-листов.
     * @alias module:model/GetFeedsResponse
     * @param feeds {Array.<module:model/FeedDTO>} Список прайс-листов.
     */
    constructor(feeds) { 
        
        GetFeedsResponse.initialize(this, feeds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feeds) { 
        obj['feeds'] = feeds;
    }

    /**
     * Constructs a <code>GetFeedsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetFeedsResponse} obj Optional instance to populate.
     * @return {module:model/GetFeedsResponse} The populated <code>GetFeedsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetFeedsResponse();

            if (data.hasOwnProperty('feeds')) {
                obj['feeds'] = ApiClient.convertToType(data['feeds'], [FeedDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetFeedsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetFeedsResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetFeedsResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['feeds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['feeds'])) {
                throw new Error("Expected the field `feeds` to be an array in the JSON data but got " + data['feeds']);
            }
            // validate the optional field `feeds` (array)
            for (const item of data['feeds']) {
                FeedDTO.validateJSON(item);
            };
        }

        return true;
    }


}

GetFeedsResponse.RequiredProperties = ["feeds"];

/**
 * Список прайс-листов.
 * @member {Array.<module:model/FeedDTO>} feeds
 */
GetFeedsResponse.prototype['feeds'] = undefined;






export default GetFeedsResponse;

