/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ModelOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ModelOfferDTO::ModelOfferDTO()
{
    m_Discount = 0;
    m_DiscountIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Pos = 0;
    m_PosIsSet = false;
    m_PreDiscountPrice = 0.0;
    m_PreDiscountPriceIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_RegionId = 0L;
    m_RegionIdIsSet = false;
    m_ShippingCost = 0.0;
    m_ShippingCostIsSet = false;
    m_ShopName = utility::conversions::to_string_t("");
    m_ShopNameIsSet = false;
    m_ShopRating = 0;
    m_ShopRatingIsSet = false;
    m_InStock = 0;
    m_InStockIsSet = false;
}

ModelOfferDTO::~ModelOfferDTO()
{
}

void ModelOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value ModelOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("discount"))] = ModelBase::toJson(m_Discount);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PosIsSet)
    {
        val[utility::conversions::to_string_t(U("pos"))] = ModelBase::toJson(m_Pos);
    }
    if(m_PreDiscountPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("preDiscountPrice"))] = ModelBase::toJson(m_PreDiscountPrice);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_RegionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("regionId"))] = ModelBase::toJson(m_RegionId);
    }
    if(m_ShippingCostIsSet)
    {
        val[utility::conversions::to_string_t(U("shippingCost"))] = ModelBase::toJson(m_ShippingCost);
    }
    if(m_ShopNameIsSet)
    {
        val[utility::conversions::to_string_t(U("shopName"))] = ModelBase::toJson(m_ShopName);
    }
    if(m_ShopRatingIsSet)
    {
        val[utility::conversions::to_string_t(U("shopRating"))] = ModelBase::toJson(m_ShopRating);
    }
    if(m_InStockIsSet)
    {
        val[utility::conversions::to_string_t(U("inStock"))] = ModelBase::toJson(m_InStock);
    }

    return val;
}

bool ModelOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("discount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscount);
            setDiscount(refVal_setDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pos")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPos);
            setPos(refVal_setPos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preDiscountPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preDiscountPrice")));
        if(!fieldValue.is_null())
        {
            double refVal_setPreDiscountPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreDiscountPrice);
            setPreDiscountPrice(refVal_setPreDiscountPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("regionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("regionId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRegionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegionId);
            setRegionId(refVal_setRegionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shippingCost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shippingCost")));
        if(!fieldValue.is_null())
        {
            double refVal_setShippingCost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShippingCost);
            setShippingCost(refVal_setShippingCost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopName);
            setShopName(refVal_setShopName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopRating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopRating")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setShopRating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopRating);
            setShopRating(refVal_setShopRating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inStock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inStock")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setInStock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInStock);
            setInStock(refVal_setInStock);
        }
    }
    return ok;
}

void ModelOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discount")), m_Discount));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pos")), m_Pos));
    }
    if(m_PreDiscountPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preDiscountPrice")), m_PreDiscountPrice));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_RegionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("regionId")), m_RegionId));
    }
    if(m_ShippingCostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shippingCost")), m_ShippingCost));
    }
    if(m_ShopNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopName")), m_ShopName));
    }
    if(m_ShopRatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopRating")), m_ShopRating));
    }
    if(m_InStockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inStock")), m_InStock));
    }
}

bool ModelOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("discount"))))
    {
        int32_t refVal_setDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discount"))), refVal_setDiscount );
        setDiscount(refVal_setDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pos"))))
    {
        int32_t refVal_setPos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pos"))), refVal_setPos );
        setPos(refVal_setPos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preDiscountPrice"))))
    {
        double refVal_setPreDiscountPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preDiscountPrice"))), refVal_setPreDiscountPrice );
        setPreDiscountPrice(refVal_setPreDiscountPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("regionId"))))
    {
        int64_t refVal_setRegionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("regionId"))), refVal_setRegionId );
        setRegionId(refVal_setRegionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shippingCost"))))
    {
        double refVal_setShippingCost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shippingCost"))), refVal_setShippingCost );
        setShippingCost(refVal_setShippingCost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopName"))))
    {
        utility::string_t refVal_setShopName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopName"))), refVal_setShopName );
        setShopName(refVal_setShopName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopRating"))))
    {
        int32_t refVal_setShopRating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopRating"))), refVal_setShopRating );
        setShopRating(refVal_setShopRating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inStock"))))
    {
        int32_t refVal_setInStock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inStock"))), refVal_setInStock );
        setInStock(refVal_setInStock);
    }
    return ok;
}

int32_t ModelOfferDTO::getDiscount() const
{
    return m_Discount;
}

void ModelOfferDTO::setDiscount(int32_t value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}

bool ModelOfferDTO::discountIsSet() const
{
    return m_DiscountIsSet;
}

void ModelOfferDTO::unsetDiscount()
{
    m_DiscountIsSet = false;
}
utility::string_t ModelOfferDTO::getName() const
{
    return m_Name;
}

void ModelOfferDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ModelOfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void ModelOfferDTO::unsetName()
{
    m_NameIsSet = false;
}
int32_t ModelOfferDTO::getPos() const
{
    return m_Pos;
}

void ModelOfferDTO::setPos(int32_t value)
{
    m_Pos = value;
    m_PosIsSet = true;
}

bool ModelOfferDTO::posIsSet() const
{
    return m_PosIsSet;
}

void ModelOfferDTO::unsetPos()
{
    m_PosIsSet = false;
}
double ModelOfferDTO::getPreDiscountPrice() const
{
    return m_PreDiscountPrice;
}

void ModelOfferDTO::setPreDiscountPrice(double value)
{
    m_PreDiscountPrice = value;
    m_PreDiscountPriceIsSet = true;
}

bool ModelOfferDTO::preDiscountPriceIsSet() const
{
    return m_PreDiscountPriceIsSet;
}

void ModelOfferDTO::unsetPreDiscountPrice()
{
    m_PreDiscountPriceIsSet = false;
}
double ModelOfferDTO::getPrice() const
{
    return m_Price;
}

void ModelOfferDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool ModelOfferDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void ModelOfferDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
int64_t ModelOfferDTO::getRegionId() const
{
    return m_RegionId;
}

void ModelOfferDTO::setRegionId(int64_t value)
{
    m_RegionId = value;
    m_RegionIdIsSet = true;
}

bool ModelOfferDTO::regionIdIsSet() const
{
    return m_RegionIdIsSet;
}

void ModelOfferDTO::unsetRegionId()
{
    m_RegionIdIsSet = false;
}
double ModelOfferDTO::getShippingCost() const
{
    return m_ShippingCost;
}

void ModelOfferDTO::setShippingCost(double value)
{
    m_ShippingCost = value;
    m_ShippingCostIsSet = true;
}

bool ModelOfferDTO::shippingCostIsSet() const
{
    return m_ShippingCostIsSet;
}

void ModelOfferDTO::unsetShippingCost()
{
    m_ShippingCostIsSet = false;
}
utility::string_t ModelOfferDTO::getShopName() const
{
    return m_ShopName;
}

void ModelOfferDTO::setShopName(const utility::string_t& value)
{
    m_ShopName = value;
    m_ShopNameIsSet = true;
}

bool ModelOfferDTO::shopNameIsSet() const
{
    return m_ShopNameIsSet;
}

void ModelOfferDTO::unsetShopName()
{
    m_ShopNameIsSet = false;
}
int32_t ModelOfferDTO::getShopRating() const
{
    return m_ShopRating;
}

void ModelOfferDTO::setShopRating(int32_t value)
{
    m_ShopRating = value;
    m_ShopRatingIsSet = true;
}

bool ModelOfferDTO::shopRatingIsSet() const
{
    return m_ShopRatingIsSet;
}

void ModelOfferDTO::unsetShopRating()
{
    m_ShopRatingIsSet = false;
}
int32_t ModelOfferDTO::getInStock() const
{
    return m_InStock;
}

void ModelOfferDTO::setInStock(int32_t value)
{
    m_InStock = value;
    m_InStockIsSet = true;
}

bool ModelOfferDTO::inStockIsSet() const
{
    return m_InStockIsSet;
}

void ModelOfferDTO::unsetInStock()
{
    m_InStockIsSet = false;
}
}
}
}
}


