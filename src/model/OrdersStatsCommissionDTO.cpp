/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrdersStatsCommissionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrdersStatsCommissionDTO::OrdersStatsCommissionDTO()
{
    m_TypeIsSet = false;
    m_Actual = 0.0;
    m_ActualIsSet = false;
}

OrdersStatsCommissionDTO::~OrdersStatsCommissionDTO()
{
}

void OrdersStatsCommissionDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrdersStatsCommissionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_ActualIsSet)
    {
        val[utility::conversions::to_string_t(U("actual"))] = ModelBase::toJson(m_Actual);
    }

    return val;
}

bool OrdersStatsCommissionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsCommissionType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("actual"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("actual")));
        if(!fieldValue.is_null())
        {
            double refVal_setActual;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActual);
            setActual(refVal_setActual);
        }
    }
    return ok;
}

void OrdersStatsCommissionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_ActualIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("actual")), m_Actual));
    }
}

bool OrdersStatsCommissionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OrdersStatsCommissionType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("actual"))))
    {
        double refVal_setActual;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("actual"))), refVal_setActual );
        setActual(refVal_setActual);
    }
    return ok;
}

std::shared_ptr<OrdersStatsCommissionType> OrdersStatsCommissionDTO::getType() const
{
    return m_Type;
}

void OrdersStatsCommissionDTO::setType(const std::shared_ptr<OrdersStatsCommissionType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OrdersStatsCommissionDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrdersStatsCommissionDTO::unsetType()
{
    m_TypeIsSet = false;
}
double OrdersStatsCommissionDTO::getActual() const
{
    return m_Actual;
}

void OrdersStatsCommissionDTO::setActual(double value)
{
    m_Actual = value;
    m_ActualIsSet = true;
}

bool OrdersStatsCommissionDTO::actualIsSet() const
{
    return m_ActualIsSet;
}

void OrdersStatsCommissionDTO::unsetActual()
{
    m_ActualIsSet = false;
}
}
}
}
}


