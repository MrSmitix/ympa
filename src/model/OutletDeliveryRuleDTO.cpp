/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OutletDeliveryRuleDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OutletDeliveryRuleDTO::OutletDeliveryRuleDTO()
{
    m_MinDeliveryDays = 0;
    m_MinDeliveryDaysIsSet = false;
    m_MaxDeliveryDays = 0;
    m_MaxDeliveryDaysIsSet = false;
    m_DeliveryServiceId = 0L;
    m_DeliveryServiceIdIsSet = false;
    m_OrderBefore = 0;
    m_OrderBeforeIsSet = false;
    m_PriceFreePickup = 0.0;
    m_PriceFreePickupIsSet = false;
    m_UnspecifiedDeliveryInterval = false;
    m_UnspecifiedDeliveryIntervalIsSet = false;
}

OutletDeliveryRuleDTO::~OutletDeliveryRuleDTO()
{
}

void OutletDeliveryRuleDTO::validate()
{
    // TODO: implement validation
}

web::json::value OutletDeliveryRuleDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MinDeliveryDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("minDeliveryDays"))] = ModelBase::toJson(m_MinDeliveryDays);
    }
    if(m_MaxDeliveryDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("maxDeliveryDays"))] = ModelBase::toJson(m_MaxDeliveryDays);
    }
    if(m_DeliveryServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryServiceId"))] = ModelBase::toJson(m_DeliveryServiceId);
    }
    if(m_OrderBeforeIsSet)
    {
        val[utility::conversions::to_string_t(U("orderBefore"))] = ModelBase::toJson(m_OrderBefore);
    }
    if(m_PriceFreePickupIsSet)
    {
        val[utility::conversions::to_string_t(U("priceFreePickup"))] = ModelBase::toJson(m_PriceFreePickup);
    }
    if(m_UnspecifiedDeliveryIntervalIsSet)
    {
        val[utility::conversions::to_string_t(U("unspecifiedDeliveryInterval"))] = ModelBase::toJson(m_UnspecifiedDeliveryInterval);
    }

    return val;
}

bool OutletDeliveryRuleDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("minDeliveryDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minDeliveryDays")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinDeliveryDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinDeliveryDays);
            setMinDeliveryDays(refVal_setMinDeliveryDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxDeliveryDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxDeliveryDays")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxDeliveryDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxDeliveryDays);
            setMaxDeliveryDays(refVal_setMaxDeliveryDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryServiceId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDeliveryServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryServiceId);
            setDeliveryServiceId(refVal_setDeliveryServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderBefore"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderBefore")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setOrderBefore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderBefore);
            setOrderBefore(refVal_setOrderBefore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priceFreePickup"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priceFreePickup")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceFreePickup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceFreePickup);
            setPriceFreePickup(refVal_setPriceFreePickup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unspecifiedDeliveryInterval"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unspecifiedDeliveryInterval")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUnspecifiedDeliveryInterval;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnspecifiedDeliveryInterval);
            setUnspecifiedDeliveryInterval(refVal_setUnspecifiedDeliveryInterval);
        }
    }
    return ok;
}

void OutletDeliveryRuleDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MinDeliveryDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minDeliveryDays")), m_MinDeliveryDays));
    }
    if(m_MaxDeliveryDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxDeliveryDays")), m_MaxDeliveryDays));
    }
    if(m_DeliveryServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryServiceId")), m_DeliveryServiceId));
    }
    if(m_OrderBeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderBefore")), m_OrderBefore));
    }
    if(m_PriceFreePickupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priceFreePickup")), m_PriceFreePickup));
    }
    if(m_UnspecifiedDeliveryIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unspecifiedDeliveryInterval")), m_UnspecifiedDeliveryInterval));
    }
}

bool OutletDeliveryRuleDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("minDeliveryDays"))))
    {
        int32_t refVal_setMinDeliveryDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minDeliveryDays"))), refVal_setMinDeliveryDays );
        setMinDeliveryDays(refVal_setMinDeliveryDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxDeliveryDays"))))
    {
        int32_t refVal_setMaxDeliveryDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxDeliveryDays"))), refVal_setMaxDeliveryDays );
        setMaxDeliveryDays(refVal_setMaxDeliveryDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        int64_t refVal_setDeliveryServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryServiceId"))), refVal_setDeliveryServiceId );
        setDeliveryServiceId(refVal_setDeliveryServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderBefore"))))
    {
        int32_t refVal_setOrderBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderBefore"))), refVal_setOrderBefore );
        setOrderBefore(refVal_setOrderBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priceFreePickup"))))
    {
        double refVal_setPriceFreePickup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priceFreePickup"))), refVal_setPriceFreePickup );
        setPriceFreePickup(refVal_setPriceFreePickup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unspecifiedDeliveryInterval"))))
    {
        bool refVal_setUnspecifiedDeliveryInterval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unspecifiedDeliveryInterval"))), refVal_setUnspecifiedDeliveryInterval );
        setUnspecifiedDeliveryInterval(refVal_setUnspecifiedDeliveryInterval);
    }
    return ok;
}

int32_t OutletDeliveryRuleDTO::getMinDeliveryDays() const
{
    return m_MinDeliveryDays;
}

void OutletDeliveryRuleDTO::setMinDeliveryDays(int32_t value)
{
    m_MinDeliveryDays = value;
    m_MinDeliveryDaysIsSet = true;
}

bool OutletDeliveryRuleDTO::minDeliveryDaysIsSet() const
{
    return m_MinDeliveryDaysIsSet;
}

void OutletDeliveryRuleDTO::unsetMinDeliveryDays()
{
    m_MinDeliveryDaysIsSet = false;
}
int32_t OutletDeliveryRuleDTO::getMaxDeliveryDays() const
{
    return m_MaxDeliveryDays;
}

void OutletDeliveryRuleDTO::setMaxDeliveryDays(int32_t value)
{
    m_MaxDeliveryDays = value;
    m_MaxDeliveryDaysIsSet = true;
}

bool OutletDeliveryRuleDTO::maxDeliveryDaysIsSet() const
{
    return m_MaxDeliveryDaysIsSet;
}

void OutletDeliveryRuleDTO::unsetMaxDeliveryDays()
{
    m_MaxDeliveryDaysIsSet = false;
}
int64_t OutletDeliveryRuleDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void OutletDeliveryRuleDTO::setDeliveryServiceId(int64_t value)
{
    m_DeliveryServiceId = value;
    m_DeliveryServiceIdIsSet = true;
}

bool OutletDeliveryRuleDTO::deliveryServiceIdIsSet() const
{
    return m_DeliveryServiceIdIsSet;
}

void OutletDeliveryRuleDTO::unsetDeliveryServiceId()
{
    m_DeliveryServiceIdIsSet = false;
}
int32_t OutletDeliveryRuleDTO::getOrderBefore() const
{
    return m_OrderBefore;
}

void OutletDeliveryRuleDTO::setOrderBefore(int32_t value)
{
    m_OrderBefore = value;
    m_OrderBeforeIsSet = true;
}

bool OutletDeliveryRuleDTO::orderBeforeIsSet() const
{
    return m_OrderBeforeIsSet;
}

void OutletDeliveryRuleDTO::unsetOrderBefore()
{
    m_OrderBeforeIsSet = false;
}
double OutletDeliveryRuleDTO::getPriceFreePickup() const
{
    return m_PriceFreePickup;
}

void OutletDeliveryRuleDTO::setPriceFreePickup(double value)
{
    m_PriceFreePickup = value;
    m_PriceFreePickupIsSet = true;
}

bool OutletDeliveryRuleDTO::priceFreePickupIsSet() const
{
    return m_PriceFreePickupIsSet;
}

void OutletDeliveryRuleDTO::unsetPriceFreePickup()
{
    m_PriceFreePickupIsSet = false;
}
bool OutletDeliveryRuleDTO::isUnspecifiedDeliveryInterval() const
{
    return m_UnspecifiedDeliveryInterval;
}

void OutletDeliveryRuleDTO::setUnspecifiedDeliveryInterval(bool value)
{
    m_UnspecifiedDeliveryInterval = value;
    m_UnspecifiedDeliveryIntervalIsSet = true;
}

bool OutletDeliveryRuleDTO::unspecifiedDeliveryIntervalIsSet() const
{
    return m_UnspecifiedDeliveryIntervalIsSet;
}

void OutletDeliveryRuleDTO::unsetUnspecifiedDeliveryInterval()
{
    m_UnspecifiedDeliveryIntervalIsSet = false;
}
}
}
}
}


