/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateGoodsTurnoverRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateGoodsTurnoverRequest::GenerateGoodsTurnoverRequest()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_dateIsSet = false;
}

GenerateGoodsTurnoverRequest::~GenerateGoodsTurnoverRequest()
{
}

void GenerateGoodsTurnoverRequest::validate()
{
    // TODO: implement validation
}

web::json::value GenerateGoodsTurnoverRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_dateIsSet)
    {
        val[utility::conversions::to_string_t(U("date"))] = ModelBase::toJson(m_date);
    }

    return val;
}

bool GenerateGoodsTurnoverRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("date")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
        }
    }
    return ok;
}

void GenerateGoodsTurnoverRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("date")), m_date));
    }
}

bool GenerateGoodsTurnoverRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("date"))))
    {
        utility::datetime refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    return ok;
}

int64_t GenerateGoodsTurnoverRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GenerateGoodsTurnoverRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool GenerateGoodsTurnoverRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void GenerateGoodsTurnoverRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
utility::datetime GenerateGoodsTurnoverRequest::getDate() const
{
    return m_date;
}

void GenerateGoodsTurnoverRequest::setDate(const utility::datetime& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool GenerateGoodsTurnoverRequest::dateIsSet() const
{
    return m_dateIsSet;
}

void GenerateGoodsTurnoverRequest::unsetdate()
{
    m_dateIsSet = false;
}
}
}
}
}


