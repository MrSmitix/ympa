/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferConditionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferConditionDTO::OfferConditionDTO()
{
    m_TypeIsSet = false;
    m_QualityIsSet = false;
    m_Reason = utility::conversions::to_string_t("");
    m_ReasonIsSet = false;
}

OfferConditionDTO::~OfferConditionDTO()
{
}

void OfferConditionDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferConditionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_QualityIsSet)
    {
        val[utility::conversions::to_string_t(U("quality"))] = ModelBase::toJson(m_Quality);
    }
    if(m_ReasonIsSet)
    {
        val[utility::conversions::to_string_t(U("reason"))] = ModelBase::toJson(m_Reason);
    }

    return val;
}

bool OfferConditionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferConditionType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quality")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferConditionQualityType> refVal_setQuality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuality);
            setQuality(refVal_setQuality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReason);
            setReason(refVal_setReason);
        }
    }
    return ok;
}

void OfferConditionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_QualityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quality")), m_Quality));
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reason")), m_Reason));
    }
}

bool OfferConditionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OfferConditionType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quality"))))
    {
        std::shared_ptr<OfferConditionQualityType> refVal_setQuality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quality"))), refVal_setQuality );
        setQuality(refVal_setQuality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reason"))))
    {
        utility::string_t refVal_setReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reason"))), refVal_setReason );
        setReason(refVal_setReason);
    }
    return ok;
}

std::shared_ptr<OfferConditionType> OfferConditionDTO::getType() const
{
    return m_Type;
}

void OfferConditionDTO::setType(const std::shared_ptr<OfferConditionType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OfferConditionDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void OfferConditionDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<OfferConditionQualityType> OfferConditionDTO::getQuality() const
{
    return m_Quality;
}

void OfferConditionDTO::setQuality(const std::shared_ptr<OfferConditionQualityType>& value)
{
    m_Quality = value;
    m_QualityIsSet = true;
}

bool OfferConditionDTO::qualityIsSet() const
{
    return m_QualityIsSet;
}

void OfferConditionDTO::unsetQuality()
{
    m_QualityIsSet = false;
}
utility::string_t OfferConditionDTO::getReason() const
{
    return m_Reason;
}

void OfferConditionDTO::setReason(const utility::string_t& value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}

bool OfferConditionDTO::reasonIsSet() const
{
    return m_ReasonIsSet;
}

void OfferConditionDTO::unsetReason()
{
    m_ReasonIsSet = false;
}
}
}
}
}


