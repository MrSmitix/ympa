/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedbackFactorDTO from './FeedbackFactorDTO';

/**
 * The FeedbackGradesDTO model module.
 * @module model/FeedbackGradesDTO
 * @version LATEST
 */
class FeedbackGradesDTO {
    /**
     * @member {Number} average
     * @type {Number}
     */
    average;
    /**
     * @member {Number} agreeCount
     * @type {Number}
     */
    agreeCount;
    /**
     * @member {Number} rejectCount
     * @type {Number}
     */
    rejectCount;
    /**
     * @member {Array.<module:model/FeedbackFactorDTO>} factors
     * @type {Array.<module:model/FeedbackFactorDTO>}
     */
    factors;

    

    /**
     * Constructs a new <code>FeedbackGradesDTO</code>.
     * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
     * @alias module:model/FeedbackGradesDTO
     * @param factors {Array.<module:model/FeedbackFactorDTO>} Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
     */
    constructor(factors) { 
        
        FeedbackGradesDTO.initialize(this, factors);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, factors) { 
        obj['factors'] = factors;
    }

    /**
     * Constructs a <code>FeedbackGradesDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackGradesDTO} obj Optional instance to populate.
     * @return {module:model/FeedbackGradesDTO} The populated <code>FeedbackGradesDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackGradesDTO();

            if (data.hasOwnProperty('average')) {
                obj['average'] = ApiClient.convertToType(data['average'], 'Number');
            }
            if (data.hasOwnProperty('agreeCount')) {
                obj['agreeCount'] = ApiClient.convertToType(data['agreeCount'], 'Number');
            }
            if (data.hasOwnProperty('rejectCount')) {
                obj['rejectCount'] = ApiClient.convertToType(data['rejectCount'], 'Number');
            }
            if (data.hasOwnProperty('factors')) {
                obj['factors'] = ApiClient.convertToType(data['factors'], [FeedbackFactorDTO]);
            }
        }
        return obj;
    }
}



export default FeedbackGradesDTO;

