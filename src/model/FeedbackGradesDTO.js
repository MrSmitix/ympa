/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedbackFactorDTO from './FeedbackFactorDTO';

/**
 * The FeedbackGradesDTO model module.
 * @module model/FeedbackGradesDTO
 * @version LATEST
 */
class FeedbackGradesDTO {
    /**
     * Constructs a new <code>FeedbackGradesDTO</code>.
     * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
     * @alias module:model/FeedbackGradesDTO
     * @param factors {Array.<module:model/FeedbackFactorDTO>} Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
     */
    constructor(factors) { 
        
        FeedbackGradesDTO.initialize(this, factors);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, factors) { 
        obj['factors'] = factors;
    }

    /**
     * Constructs a <code>FeedbackGradesDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackGradesDTO} obj Optional instance to populate.
     * @return {module:model/FeedbackGradesDTO} The populated <code>FeedbackGradesDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackGradesDTO();

            if (data.hasOwnProperty('average')) {
                obj['average'] = ApiClient.convertToType(data['average'], 'Number');
            }
            if (data.hasOwnProperty('agreeCount')) {
                obj['agreeCount'] = ApiClient.convertToType(data['agreeCount'], 'Number');
            }
            if (data.hasOwnProperty('rejectCount')) {
                obj['rejectCount'] = ApiClient.convertToType(data['rejectCount'], 'Number');
            }
            if (data.hasOwnProperty('factors')) {
                obj['factors'] = ApiClient.convertToType(data['factors'], [FeedbackFactorDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedbackGradesDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedbackGradesDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeedbackGradesDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['factors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['factors'])) {
                throw new Error("Expected the field `factors` to be an array in the JSON data but got " + data['factors']);
            }
            // validate the optional field `factors` (array)
            for (const item of data['factors']) {
                FeedbackFactorDTO.validateJSON(item);
            };
        }

        return true;
    }


}

FeedbackGradesDTO.RequiredProperties = ["factors"];

/**
 * Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
 * @member {Number} average
 */
FeedbackGradesDTO.prototype['average'] = undefined;

/**
 * Количество пользователей, считающих отзыв полезным.
 * @member {Number} agreeCount
 */
FeedbackGradesDTO.prototype['agreeCount'] = undefined;

/**
 * Количество пользователей, считающих отзыв бесполезным.
 * @member {Number} rejectCount
 */
FeedbackGradesDTO.prototype['rejectCount'] = undefined;

/**
 * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
 * @member {Array.<module:model/FeedbackFactorDTO>} factors
 */
FeedbackGradesDTO.prototype['factors'] = undefined;






export default FeedbackGradesDTO;

