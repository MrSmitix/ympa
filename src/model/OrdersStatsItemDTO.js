/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrdersStatsDetailsDTO from './OrdersStatsDetailsDTO';
import OrdersStatsPriceDTO from './OrdersStatsPriceDTO';
import OrdersStatsWarehouseDTO from './OrdersStatsWarehouseDTO';

/**
 * The OrdersStatsItemDTO model module.
 * @module model/OrdersStatsItemDTO
 * @version LATEST
 */
class OrdersStatsItemDTO {
    /**
     * Constructs a new <code>OrdersStatsItemDTO</code>.
     * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
     * @alias module:model/OrdersStatsItemDTO
     */
    constructor() { 
        
        OrdersStatsItemDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrdersStatsItemDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersStatsItemDTO} obj Optional instance to populate.
     * @return {module:model/OrdersStatsItemDTO} The populated <code>OrdersStatsItemDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersStatsItemDTO();

            if (data.hasOwnProperty('offerName')) {
                obj['offerName'] = ApiClient.convertToType(data['offerName'], 'String');
            }
            if (data.hasOwnProperty('marketSku')) {
                obj['marketSku'] = ApiClient.convertToType(data['marketSku'], 'Number');
            }
            if (data.hasOwnProperty('shopSku')) {
                obj['shopSku'] = ApiClient.convertToType(data['shopSku'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ApiClient.convertToType(data['prices'], [OrdersStatsPriceDTO]);
            }
            if (data.hasOwnProperty('warehouse')) {
                obj['warehouse'] = OrdersStatsWarehouseDTO.constructFromObject(data['warehouse']);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [OrdersStatsDetailsDTO]);
            }
            if (data.hasOwnProperty('cisList')) {
                obj['cisList'] = ApiClient.convertToType(data['cisList'], ['String']);
            }
            if (data.hasOwnProperty('initialCount')) {
                obj['initialCount'] = ApiClient.convertToType(data['initialCount'], 'Number');
            }
            if (data.hasOwnProperty('bidFee')) {
                obj['bidFee'] = ApiClient.convertToType(data['bidFee'], 'Number');
            }
            if (data.hasOwnProperty('cofinanceThreshold')) {
                obj['cofinanceThreshold'] = ApiClient.convertToType(data['cofinanceThreshold'], 'Number');
            }
            if (data.hasOwnProperty('cofinanceValue')) {
                obj['cofinanceValue'] = ApiClient.convertToType(data['cofinanceValue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersStatsItemDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersStatsItemDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['offerName'] && !(typeof data['offerName'] === 'string' || data['offerName'] instanceof String)) {
            throw new Error("Expected the field `offerName` to be a primitive type in the JSON string but got " + data['offerName']);
        }
        // ensure the json data is a string
        if (data['shopSku'] && !(typeof data['shopSku'] === 'string' || data['shopSku'] instanceof String)) {
            throw new Error("Expected the field `shopSku` to be a primitive type in the JSON string but got " + data['shopSku']);
        }
        if (data['prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['prices'])) {
                throw new Error("Expected the field `prices` to be an array in the JSON data but got " + data['prices']);
            }
            // validate the optional field `prices` (array)
            for (const item of data['prices']) {
                OrdersStatsPriceDTO.validateJSON(item);
            };
        }
        // validate the optional field `warehouse`
        if (data['warehouse']) { // data not null
          OrdersStatsWarehouseDTO.validateJSON(data['warehouse']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                OrdersStatsDetailsDTO.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cisList'])) {
            throw new Error("Expected the field `cisList` to be an array in the JSON data but got " + data['cisList']);
        }

        return true;
    }


}



/**
 * Название товара.
 * @member {String} offerName
 */
OrdersStatsItemDTO.prototype['offerName'] = undefined;

/**
 * SKU на Маркете.
 * @member {Number} marketSku
 */
OrdersStatsItemDTO.prototype['marketSku'] = undefined;

/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} shopSku
 */
OrdersStatsItemDTO.prototype['shopSku'] = undefined;

/**
 * Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. 
 * @member {Number} count
 */
OrdersStatsItemDTO.prototype['count'] = undefined;

/**
 * Цена или скидки на товар.
 * @member {Array.<module:model/OrdersStatsPriceDTO>} prices
 */
OrdersStatsItemDTO.prototype['prices'] = undefined;

/**
 * @member {module:model/OrdersStatsWarehouseDTO} warehouse
 */
OrdersStatsItemDTO.prototype['warehouse'] = undefined;

/**
 * Информация об удалении товара из заказа.
 * @member {Array.<module:model/OrdersStatsDetailsDTO>} details
 */
OrdersStatsItemDTO.prototype['details'] = undefined;

/**
 * Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
 * @member {Array.<String>} cisList
 */
OrdersStatsItemDTO.prototype['cisList'] = undefined;

/**
 * Первоначальное количество единиц товара.
 * @member {Number} initialCount
 */
OrdersStatsItemDTO.prototype['initialCount'] = undefined;

/**
 * Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
 * @member {Number} bidFee
 */
OrdersStatsItemDTO.prototype['bidFee'] = undefined;

/**
 * Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
 * @member {Number} cofinanceThreshold
 */
OrdersStatsItemDTO.prototype['cofinanceThreshold'] = undefined;

/**
 * Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
 * @member {Number} cofinanceValue
 */
OrdersStatsItemDTO.prototype['cofinanceValue'] = undefined;






export default OrdersStatsItemDTO;

