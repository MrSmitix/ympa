/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaseCampaignOfferDTO from './BaseCampaignOfferDTO';
import GetPriceWithDiscountDTO from './GetPriceWithDiscountDTO';
import GetPriceWithVatDTO from './GetPriceWithVatDTO';
import OfferCampaignStatusType from './OfferCampaignStatusType';
import OfferErrorDTO from './OfferErrorDTO';
import QuantumDTO from './QuantumDTO';

/**
 * The GetCampaignOfferDTO model module.
 * @module model/GetCampaignOfferDTO
 * @version LATEST
 */
class GetCampaignOfferDTO {
    /**
     * @member {String} offerId
     * @type {String}
     */
    offerId;
    /**
     * @member {module:model/QuantumDTO} quantum
     * @type {module:model/QuantumDTO}
     */
    quantum;
    /**
     * @member {Boolean} available
     * @type {Boolean}
     */
    available;
    /**
     * @member {module:model/GetPriceWithDiscountDTO} basicPrice
     * @type {module:model/GetPriceWithDiscountDTO}
     */
    basicPrice;
    /**
     * @member {module:model/GetPriceWithVatDTO} campaignPrice
     * @type {module:model/GetPriceWithVatDTO}
     */
    campaignPrice;
    /**
     * @member {module:model/OfferCampaignStatusType} status
     * @type {module:model/OfferCampaignStatusType}
     */
    status;
    /**
     * @member {Array.<module:model/OfferErrorDTO>} errors
     * @type {Array.<module:model/OfferErrorDTO>}
     */
    errors;
    /**
     * @member {Array.<module:model/OfferErrorDTO>} warnings
     * @type {Array.<module:model/OfferErrorDTO>}
     */
    warnings;

    /**
     * @member {String} offerId
     * @type {String}
     */
    #offerId;
    /**
     * @member {module:model/QuantumDTO} quantum
     * @type {module:model/QuantumDTO}
     */
    #quantum;
    /**
     * @member {Boolean} available
     * @type {Boolean}
     */
    #available;
    

    /**
     * Constructs a new <code>GetCampaignOfferDTO</code>.
     * Параметры размещения товара в магазине.
     * @alias module:model/GetCampaignOfferDTO
     * @implements module:model/BaseCampaignOfferDTO
     * @param offerId {String} Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     */
    constructor(offerId) { 
        BaseCampaignOfferDTO.initialize(this, offerId);
        GetCampaignOfferDTO.initialize(this, offerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, offerId) { 
        obj['offerId'] = offerId;
    }

    /**
     * Constructs a <code>GetCampaignOfferDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetCampaignOfferDTO} obj Optional instance to populate.
     * @return {module:model/GetCampaignOfferDTO} The populated <code>GetCampaignOfferDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetCampaignOfferDTO();
            BaseCampaignOfferDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('quantum')) {
                obj['quantum'] = QuantumDTO.constructFromObject(data['quantum']);
            }
            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], 'Boolean');
            }
            if (data.hasOwnProperty('basicPrice')) {
                obj['basicPrice'] = GetPriceWithDiscountDTO.constructFromObject(data['basicPrice']);
            }
            if (data.hasOwnProperty('campaignPrice')) {
                obj['campaignPrice'] = GetPriceWithVatDTO.constructFromObject(data['campaignPrice']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OfferCampaignStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [OfferErrorDTO]);
            }
            if (data.hasOwnProperty('warnings')) {
                obj['warnings'] = ApiClient.convertToType(data['warnings'], [OfferErrorDTO]);
            }
        }
        return obj;
    }
}



export default GetCampaignOfferDTO;

