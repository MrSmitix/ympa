/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsFeedbackStatisticsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsFeedbackStatisticsDTO::GoodsFeedbackStatisticsDTO()
{
    m_Rating = 0;
    m_RatingIsSet = false;
    m_CommentsCount = 0L;
    m_CommentsCountIsSet = false;
    m_Recommended = false;
    m_RecommendedIsSet = false;
    m_PaidAmount = 0L;
    m_PaidAmountIsSet = false;
}

GoodsFeedbackStatisticsDTO::~GoodsFeedbackStatisticsDTO()
{
}

void GoodsFeedbackStatisticsDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsFeedbackStatisticsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RatingIsSet)
    {
        val[utility::conversions::to_string_t(U("rating"))] = ModelBase::toJson(m_Rating);
    }
    if(m_CommentsCountIsSet)
    {
        val[utility::conversions::to_string_t(U("commentsCount"))] = ModelBase::toJson(m_CommentsCount);
    }
    if(m_RecommendedIsSet)
    {
        val[utility::conversions::to_string_t(U("recommended"))] = ModelBase::toJson(m_Recommended);
    }
    if(m_PaidAmountIsSet)
    {
        val[utility::conversions::to_string_t(U("paidAmount"))] = ModelBase::toJson(m_PaidAmount);
    }

    return val;
}

bool GoodsFeedbackStatisticsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("rating"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rating")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRating;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRating);
            setRating(refVal_setRating);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("commentsCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("commentsCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCommentsCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCommentsCount);
            setCommentsCount(refVal_setCommentsCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recommended"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recommended")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRecommended;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecommended);
            setRecommended(refVal_setRecommended);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paidAmount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paidAmount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPaidAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaidAmount);
            setPaidAmount(refVal_setPaidAmount);
        }
    }
    return ok;
}

void GoodsFeedbackStatisticsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RatingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rating")), m_Rating));
    }
    if(m_CommentsCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("commentsCount")), m_CommentsCount));
    }
    if(m_RecommendedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recommended")), m_Recommended));
    }
    if(m_PaidAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paidAmount")), m_PaidAmount));
    }
}

bool GoodsFeedbackStatisticsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("rating"))))
    {
        int32_t refVal_setRating;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rating"))), refVal_setRating );
        setRating(refVal_setRating);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("commentsCount"))))
    {
        int64_t refVal_setCommentsCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("commentsCount"))), refVal_setCommentsCount );
        setCommentsCount(refVal_setCommentsCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recommended"))))
    {
        bool refVal_setRecommended;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recommended"))), refVal_setRecommended );
        setRecommended(refVal_setRecommended);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paidAmount"))))
    {
        int64_t refVal_setPaidAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paidAmount"))), refVal_setPaidAmount );
        setPaidAmount(refVal_setPaidAmount);
    }
    return ok;
}

int32_t GoodsFeedbackStatisticsDTO::getRating() const
{
    return m_Rating;
}

void GoodsFeedbackStatisticsDTO::setRating(int32_t value)
{
    m_Rating = value;
    m_RatingIsSet = true;
}

bool GoodsFeedbackStatisticsDTO::ratingIsSet() const
{
    return m_RatingIsSet;
}

void GoodsFeedbackStatisticsDTO::unsetRating()
{
    m_RatingIsSet = false;
}
int64_t GoodsFeedbackStatisticsDTO::getCommentsCount() const
{
    return m_CommentsCount;
}

void GoodsFeedbackStatisticsDTO::setCommentsCount(int64_t value)
{
    m_CommentsCount = value;
    m_CommentsCountIsSet = true;
}

bool GoodsFeedbackStatisticsDTO::commentsCountIsSet() const
{
    return m_CommentsCountIsSet;
}

void GoodsFeedbackStatisticsDTO::unsetCommentsCount()
{
    m_CommentsCountIsSet = false;
}
bool GoodsFeedbackStatisticsDTO::isRecommended() const
{
    return m_Recommended;
}

void GoodsFeedbackStatisticsDTO::setRecommended(bool value)
{
    m_Recommended = value;
    m_RecommendedIsSet = true;
}

bool GoodsFeedbackStatisticsDTO::recommendedIsSet() const
{
    return m_RecommendedIsSet;
}

void GoodsFeedbackStatisticsDTO::unsetRecommended()
{
    m_RecommendedIsSet = false;
}
int64_t GoodsFeedbackStatisticsDTO::getPaidAmount() const
{
    return m_PaidAmount;
}

void GoodsFeedbackStatisticsDTO::setPaidAmount(int64_t value)
{
    m_PaidAmount = value;
    m_PaidAmountIsSet = true;
}

bool GoodsFeedbackStatisticsDTO::paidAmountIsSet() const
{
    return m_PaidAmountIsSet;
}

void GoodsFeedbackStatisticsDTO::unsetPaidAmount()
{
    m_PaidAmountIsSet = false;
}
}
}
}
}


