/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsFeedbackDescriptionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsFeedbackDescriptionDTO::GoodsFeedbackDescriptionDTO()
{
    m_Advantages = utility::conversions::to_string_t("");
    m_AdvantagesIsSet = false;
    m_Disadvantages = utility::conversions::to_string_t("");
    m_DisadvantagesIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
}

GoodsFeedbackDescriptionDTO::~GoodsFeedbackDescriptionDTO()
{
}

void GoodsFeedbackDescriptionDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsFeedbackDescriptionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AdvantagesIsSet)
    {
        val[utility::conversions::to_string_t(U("advantages"))] = ModelBase::toJson(m_Advantages);
    }
    if(m_DisadvantagesIsSet)
    {
        val[utility::conversions::to_string_t(U("disadvantages"))] = ModelBase::toJson(m_Disadvantages);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }

    return val;
}

bool GoodsFeedbackDescriptionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("advantages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("advantages")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdvantages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdvantages);
            setAdvantages(refVal_setAdvantages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("disadvantages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("disadvantages")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisadvantages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisadvantages);
            setDisadvantages(refVal_setDisadvantages);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    return ok;
}

void GoodsFeedbackDescriptionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AdvantagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("advantages")), m_Advantages));
    }
    if(m_DisadvantagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("disadvantages")), m_Disadvantages));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
}

bool GoodsFeedbackDescriptionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("advantages"))))
    {
        utility::string_t refVal_setAdvantages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("advantages"))), refVal_setAdvantages );
        setAdvantages(refVal_setAdvantages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("disadvantages"))))
    {
        utility::string_t refVal_setDisadvantages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("disadvantages"))), refVal_setDisadvantages );
        setDisadvantages(refVal_setDisadvantages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    return ok;
}

utility::string_t GoodsFeedbackDescriptionDTO::getAdvantages() const
{
    return m_Advantages;
}

void GoodsFeedbackDescriptionDTO::setAdvantages(const utility::string_t& value)
{
    m_Advantages = value;
    m_AdvantagesIsSet = true;
}

bool GoodsFeedbackDescriptionDTO::advantagesIsSet() const
{
    return m_AdvantagesIsSet;
}

void GoodsFeedbackDescriptionDTO::unsetAdvantages()
{
    m_AdvantagesIsSet = false;
}
utility::string_t GoodsFeedbackDescriptionDTO::getDisadvantages() const
{
    return m_Disadvantages;
}

void GoodsFeedbackDescriptionDTO::setDisadvantages(const utility::string_t& value)
{
    m_Disadvantages = value;
    m_DisadvantagesIsSet = true;
}

bool GoodsFeedbackDescriptionDTO::disadvantagesIsSet() const
{
    return m_DisadvantagesIsSet;
}

void GoodsFeedbackDescriptionDTO::unsetDisadvantages()
{
    m_DisadvantagesIsSet = false;
}
utility::string_t GoodsFeedbackDescriptionDTO::getComment() const
{
    return m_Comment;
}

void GoodsFeedbackDescriptionDTO::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool GoodsFeedbackDescriptionDTO::commentIsSet() const
{
    return m_CommentIsSet;
}

void GoodsFeedbackDescriptionDTO::unsetComment()
{
    m_CommentIsSet = false;
}
}
}
}
}


