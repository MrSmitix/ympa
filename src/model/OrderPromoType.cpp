/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderPromoType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OrderPromoType::eOrderPromoType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("DIRECT_DISCOUNT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_DIRECT_DISCOUNT;
    if (val == utility::conversions::to_string_t(U("BLUE_SET")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_BLUE_SET;
    if (val == utility::conversions::to_string_t(U("BLUE_FLASH")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_BLUE_FLASH;
    if (val == utility::conversions::to_string_t(U("GENERIC_BUNDLE")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_GENERIC_BUNDLE;
    if (val == utility::conversions::to_string_t(U("MARKET_COUPON")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_COUPON;
    if (val == utility::conversions::to_string_t(U("MARKET_PROMOCODE")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_PROMOCODE;
    if (val == utility::conversions::to_string_t(U("MARKET_DEAL")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_DEAL;
    if (val == utility::conversions::to_string_t(U("MARKET_BLUE")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_BLUE;
    if (val == utility::conversions::to_string_t(U("MARKET_PRIME")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_PRIME;
    if (val == utility::conversions::to_string_t(U("YANDEX_PLUS")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_YANDEX_PLUS;
    if (val == utility::conversions::to_string_t(U("BERU_PLUS")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_BERU_PLUS;
    if (val == utility::conversions::to_string_t(U("MARKET_COIN")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_COIN;
    if (val == utility::conversions::to_string_t(U("YANDEX_EMPLOYEE")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_YANDEX_EMPLOYEE;
    if (val == utility::conversions::to_string_t(U("LIMITED_FREE_DELIVERY_PROMO")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_LIMITED_FREE_DELIVERY_PROMO;
    if (val == utility::conversions::to_string_t(U("FREE_DELIVERY_THRESHOLD")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_FREE_DELIVERY_THRESHOLD;
    if (val == utility::conversions::to_string_t(U("MULTICART_DISCOUNT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_MULTICART_DISCOUNT;
    if (val == utility::conversions::to_string_t(U("PRICE_DROP_AS_YOU_SHOP")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_PRICE_DROP_AS_YOU_SHOP;
    if (val == utility::conversions::to_string_t(U("FREE_DELIVERY_FOR_LDI")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_FREE_DELIVERY_FOR_LDI;
    if (val == utility::conversions::to_string_t(U("FREE_DELIVERY_FOR_LSC")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_FREE_DELIVERY_FOR_LSC;
    if (val == utility::conversions::to_string_t(U("SECRET_SALE")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_SECRET_SALE;
    if (val == utility::conversions::to_string_t(U("FREE_PICKUP")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_FREE_PICKUP;
    if (val == utility::conversions::to_string_t(U("CHEAPEST_AS_GIFT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_CHEAPEST_AS_GIFT;
    if (val == utility::conversions::to_string_t(U("CASHBACK")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_CASHBACK;
    if (val == utility::conversions::to_string_t(U("SUPPLIER_MULTICART_DISCOUNT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_SUPPLIER_MULTICART_DISCOUNT;
    if (val == utility::conversions::to_string_t(U("SPREAD_DISCOUNT_COUNT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_SPREAD_DISCOUNT_COUNT;
    if (val == utility::conversions::to_string_t(U("SPREAD_DISCOUNT_RECEIPT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_SPREAD_DISCOUNT_RECEIPT;
    if (val == utility::conversions::to_string_t(U("ANNOUNCEMENT_PROMO")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_ANNOUNCEMENT_PROMO;
    if (val == utility::conversions::to_string_t(U("DISCOUNT_BY_PAYMENT_TYPE")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_DISCOUNT_BY_PAYMENT_TYPE;
    if (val == utility::conversions::to_string_t(U("PERCENT_DISCOUNT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_PERCENT_DISCOUNT;
    if (val == utility::conversions::to_string_t(U("DCO_EXTRA_DISCOUNT")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_DCO_EXTRA_DISCOUNT;
    if (val == utility::conversions::to_string_t(U("EMPTY_PROMO")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_EMPTY_PROMO;
    if (val == utility::conversions::to_string_t(U("BLOCKING_PROMO")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_BLOCKING_PROMO;
    if (val == utility::conversions::to_string_t(U("UNKNOWN")))
        return OrderPromoType::eOrderPromoType::OrderPromoType_UNKNOWN;
    return {};
}

EnumUnderlyingType fromEnum(OrderPromoType::eOrderPromoType e)
{
    switch (e)
    {
    case OrderPromoType::eOrderPromoType::OrderPromoType_DIRECT_DISCOUNT:
        return U("DIRECT_DISCOUNT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_BLUE_SET:
        return U("BLUE_SET");
    case OrderPromoType::eOrderPromoType::OrderPromoType_BLUE_FLASH:
        return U("BLUE_FLASH");
    case OrderPromoType::eOrderPromoType::OrderPromoType_GENERIC_BUNDLE:
        return U("GENERIC_BUNDLE");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_COUPON:
        return U("MARKET_COUPON");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_PROMOCODE:
        return U("MARKET_PROMOCODE");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_DEAL:
        return U("MARKET_DEAL");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_BLUE:
        return U("MARKET_BLUE");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_PRIME:
        return U("MARKET_PRIME");
    case OrderPromoType::eOrderPromoType::OrderPromoType_YANDEX_PLUS:
        return U("YANDEX_PLUS");
    case OrderPromoType::eOrderPromoType::OrderPromoType_BERU_PLUS:
        return U("BERU_PLUS");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MARKET_COIN:
        return U("MARKET_COIN");
    case OrderPromoType::eOrderPromoType::OrderPromoType_YANDEX_EMPLOYEE:
        return U("YANDEX_EMPLOYEE");
    case OrderPromoType::eOrderPromoType::OrderPromoType_LIMITED_FREE_DELIVERY_PROMO:
        return U("LIMITED_FREE_DELIVERY_PROMO");
    case OrderPromoType::eOrderPromoType::OrderPromoType_FREE_DELIVERY_THRESHOLD:
        return U("FREE_DELIVERY_THRESHOLD");
    case OrderPromoType::eOrderPromoType::OrderPromoType_MULTICART_DISCOUNT:
        return U("MULTICART_DISCOUNT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_PRICE_DROP_AS_YOU_SHOP:
        return U("PRICE_DROP_AS_YOU_SHOP");
    case OrderPromoType::eOrderPromoType::OrderPromoType_FREE_DELIVERY_FOR_LDI:
        return U("FREE_DELIVERY_FOR_LDI");
    case OrderPromoType::eOrderPromoType::OrderPromoType_FREE_DELIVERY_FOR_LSC:
        return U("FREE_DELIVERY_FOR_LSC");
    case OrderPromoType::eOrderPromoType::OrderPromoType_SECRET_SALE:
        return U("SECRET_SALE");
    case OrderPromoType::eOrderPromoType::OrderPromoType_FREE_PICKUP:
        return U("FREE_PICKUP");
    case OrderPromoType::eOrderPromoType::OrderPromoType_CHEAPEST_AS_GIFT:
        return U("CHEAPEST_AS_GIFT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_CASHBACK:
        return U("CASHBACK");
    case OrderPromoType::eOrderPromoType::OrderPromoType_SUPPLIER_MULTICART_DISCOUNT:
        return U("SUPPLIER_MULTICART_DISCOUNT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_SPREAD_DISCOUNT_COUNT:
        return U("SPREAD_DISCOUNT_COUNT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_SPREAD_DISCOUNT_RECEIPT:
        return U("SPREAD_DISCOUNT_RECEIPT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_ANNOUNCEMENT_PROMO:
        return U("ANNOUNCEMENT_PROMO");
    case OrderPromoType::eOrderPromoType::OrderPromoType_DISCOUNT_BY_PAYMENT_TYPE:
        return U("DISCOUNT_BY_PAYMENT_TYPE");
    case OrderPromoType::eOrderPromoType::OrderPromoType_PERCENT_DISCOUNT:
        return U("PERCENT_DISCOUNT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_DCO_EXTRA_DISCOUNT:
        return U("DCO_EXTRA_DISCOUNT");
    case OrderPromoType::eOrderPromoType::OrderPromoType_EMPTY_PROMO:
        return U("EMPTY_PROMO");
    case OrderPromoType::eOrderPromoType::OrderPromoType_BLOCKING_PROMO:
        return U("BLOCKING_PROMO");
    case OrderPromoType::eOrderPromoType::OrderPromoType_UNKNOWN:
        return U("UNKNOWN");
    default:
        break;
    }
    return {};
}
}

OrderPromoType::OrderPromoType()
{
}

OrderPromoType::~OrderPromoType()
{
}

void OrderPromoType::validate()
{
    // TODO: implement validation
}

web::json::value OrderPromoType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrderPromoType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrderPromoType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrderPromoType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrderPromoType::eOrderPromoType OrderPromoType::getValue() const
{
   return m_value;
}

void OrderPromoType::setValue(OrderPromoType::eOrderPromoType const value)
{
   m_value = value;
}


}
}
}
}


