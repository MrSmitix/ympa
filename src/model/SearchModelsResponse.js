/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyType from './CurrencyType';
import FlippingPagerDTO from './FlippingPagerDTO';
import GetModelsResponse from './GetModelsResponse';
import ModelDTO from './ModelDTO';

/**
 * The SearchModelsResponse model module.
 * @module model/SearchModelsResponse
 * @version LATEST
 */
class SearchModelsResponse {
    /**
     * @member {Array.<module:model/ModelDTO>} models
     * @type {Array.<module:model/ModelDTO>}
     */
    models;
    /**
     * @member {module:model/CurrencyType} currency
     * @type {module:model/CurrencyType}
     */
    currency;
    /**
     * @member {Number} regionId
     * @type {Number}
     */
    regionId;
    /**
     * @member {module:model/FlippingPagerDTO} pager
     * @type {module:model/FlippingPagerDTO}
     */
    pager;

    /**
     * @member {Array.<module:model/ModelDTO>} models
     * @type {Array.<module:model/ModelDTO>}
     */
    #models;
    /**
     * @member {module:model/CurrencyType} currency
     * @type {module:model/CurrencyType}
     */
    #currency;
    /**
     * @member {Number} regionId
     * @type {Number}
     */
    #regionId;
    

    /**
     * Constructs a new <code>SearchModelsResponse</code>.
     * @alias module:model/SearchModelsResponse
     * @implements module:model/GetModelsResponse
     * @param models {Array.<module:model/ModelDTO>} Список моделей товаров.
     */
    constructor(models) { 
        GetModelsResponse.initialize(this, models);
        SearchModelsResponse.initialize(this, models);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, models) { 
        obj['models'] = models;
    }

    /**
     * Constructs a <code>SearchModelsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchModelsResponse} obj Optional instance to populate.
     * @return {module:model/SearchModelsResponse} The populated <code>SearchModelsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchModelsResponse();
            GetModelsResponse.constructFromObject(data, obj);

            if (data.hasOwnProperty('models')) {
                obj['models'] = ApiClient.convertToType(data['models'], [ModelDTO]);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyType.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'Number');
            }
            if (data.hasOwnProperty('pager')) {
                obj['pager'] = FlippingPagerDTO.constructFromObject(data['pager']);
            }
        }
        return obj;
    }
}



export default SearchModelsResponse;

