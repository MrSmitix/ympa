/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnShipmentStatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

ReturnShipmentStatusType::eReturnShipmentStatusType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("CREATED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_CREATED;
    if (val == utility::conversions::to_string_t(U("RECEIVED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_RECEIVED;
    if (val == utility::conversions::to_string_t(U("IN_TRANSIT")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_IN_TRANSIT;
    if (val == utility::conversions::to_string_t(U("READY_FOR_PICKUP")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_READY_FOR_PICKUP;
    if (val == utility::conversions::to_string_t(U("PICKED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_PICKED;
    if (val == utility::conversions::to_string_t(U("LOST")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_LOST;
    if (val == utility::conversions::to_string_t(U("EXPIRED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_EXPIRED;
    if (val == utility::conversions::to_string_t(U("CANCELLED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_CANCELLED;
    if (val == utility::conversions::to_string_t(U("FULFILMENT_RECEIVED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_FULFILMENT_RECEIVED;
    if (val == utility::conversions::to_string_t(U("PREPARED_FOR_UTILIZATION")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_PREPARED_FOR_UTILIZATION;
    if (val == utility::conversions::to_string_t(U("NOT_IN_DEMAND")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_NOT_IN_DEMAND;
    if (val == utility::conversions::to_string_t(U("UTILIZED")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_UTILIZED;
    if (val == utility::conversions::to_string_t(U("READY_FOR_EXPROPRIATION")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_READY_FOR_EXPROPRIATION;
    if (val == utility::conversions::to_string_t(U("RECEIVED_FOR_EXPROPRIATION")))
        return ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_RECEIVED_FOR_EXPROPRIATION;
    return {};
}

EnumUnderlyingType fromEnum(ReturnShipmentStatusType::eReturnShipmentStatusType e)
{
    switch (e)
    {
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_CREATED:
        return U("CREATED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_RECEIVED:
        return U("RECEIVED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_IN_TRANSIT:
        return U("IN_TRANSIT");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_READY_FOR_PICKUP:
        return U("READY_FOR_PICKUP");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_PICKED:
        return U("PICKED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_LOST:
        return U("LOST");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_EXPIRED:
        return U("EXPIRED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_CANCELLED:
        return U("CANCELLED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_FULFILMENT_RECEIVED:
        return U("FULFILMENT_RECEIVED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_PREPARED_FOR_UTILIZATION:
        return U("PREPARED_FOR_UTILIZATION");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_NOT_IN_DEMAND:
        return U("NOT_IN_DEMAND");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_UTILIZED:
        return U("UTILIZED");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_READY_FOR_EXPROPRIATION:
        return U("READY_FOR_EXPROPRIATION");
    case ReturnShipmentStatusType::eReturnShipmentStatusType::ReturnShipmentStatusType_RECEIVED_FOR_EXPROPRIATION:
        return U("RECEIVED_FOR_EXPROPRIATION");
    default:
        break;
    }
    return {};
}
}

ReturnShipmentStatusType::ReturnShipmentStatusType()
{
}

ReturnShipmentStatusType::~ReturnShipmentStatusType()
{
}

void ReturnShipmentStatusType::validate()
{
    // TODO: implement validation
}

web::json::value ReturnShipmentStatusType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ReturnShipmentStatusType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ReturnShipmentStatusType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ReturnShipmentStatusType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ReturnShipmentStatusType::eReturnShipmentStatusType ReturnShipmentStatusType::getValue() const
{
   return m_value;
}

void ReturnShipmentStatusType::setValue(ReturnShipmentStatusType::eReturnShipmentStatusType const value)
{
   m_value = value;
}


}
}
}
}


