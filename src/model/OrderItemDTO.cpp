/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderItemDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderItemDTO::OrderItemDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_OfferName = utility::conversions::to_string_t("");
    m_OfferNameIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_BuyerPrice = 0.0;
    m_BuyerPriceIsSet = false;
    m_BuyerPriceBeforeDiscount = 0.0;
    m_BuyerPriceBeforeDiscountIsSet = false;
    m_PriceBeforeDiscount = 0.0;
    m_PriceBeforeDiscountIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_VatIsSet = false;
    m_ShopSku = utility::conversions::to_string_t("");
    m_ShopSkuIsSet = false;
    m_Subsidy = 0.0;
    m_SubsidyIsSet = false;
    m_PartnerWarehouseId = utility::conversions::to_string_t("");
    m_PartnerWarehouseIdIsSet = false;
    m_PromosIsSet = false;
    m_InstancesIsSet = false;
    m_DetailsIsSet = false;
    m_SubsidiesIsSet = false;
    m_RequiredInstanceTypesIsSet = false;
}

OrderItemDTO::~OrderItemDTO()
{
}

void OrderItemDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderItemDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_OfferNameIsSet)
    {
        val[utility::conversions::to_string_t(U("offerName"))] = ModelBase::toJson(m_OfferName);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_BuyerPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("buyerPrice"))] = ModelBase::toJson(m_BuyerPrice);
    }
    if(m_BuyerPriceBeforeDiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("buyerPriceBeforeDiscount"))] = ModelBase::toJson(m_BuyerPriceBeforeDiscount);
    }
    if(m_PriceBeforeDiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("priceBeforeDiscount"))] = ModelBase::toJson(m_PriceBeforeDiscount);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_VatIsSet)
    {
        val[utility::conversions::to_string_t(U("vat"))] = ModelBase::toJson(m_Vat);
    }
    if(m_ShopSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("shopSku"))] = ModelBase::toJson(m_ShopSku);
    }
    if(m_SubsidyIsSet)
    {
        val[utility::conversions::to_string_t(U("subsidy"))] = ModelBase::toJson(m_Subsidy);
    }
    if(m_PartnerWarehouseIdIsSet)
    {
        val[utility::conversions::to_string_t(U("partnerWarehouseId"))] = ModelBase::toJson(m_PartnerWarehouseId);
    }
    if(m_PromosIsSet)
    {
        val[utility::conversions::to_string_t(U("promos"))] = ModelBase::toJson(m_Promos);
    }
    if(m_InstancesIsSet)
    {
        val[utility::conversions::to_string_t(U("instances"))] = ModelBase::toJson(m_Instances);
    }
    if(m_DetailsIsSet)
    {
        val[utility::conversions::to_string_t(U("details"))] = ModelBase::toJson(m_Details);
    }
    if(m_SubsidiesIsSet)
    {
        val[utility::conversions::to_string_t(U("subsidies"))] = ModelBase::toJson(m_Subsidies);
    }
    if(m_RequiredInstanceTypesIsSet)
    {
        val[utility::conversions::to_string_t(U("requiredInstanceTypes"))] = ModelBase::toJson(m_RequiredInstanceTypes);
    }

    return val;
}

bool OrderItemDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferName);
            setOfferName(refVal_setOfferName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyerPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyerPrice")));
        if(!fieldValue.is_null())
        {
            double refVal_setBuyerPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyerPrice);
            setBuyerPrice(refVal_setBuyerPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyerPriceBeforeDiscount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyerPriceBeforeDiscount")));
        if(!fieldValue.is_null())
        {
            double refVal_setBuyerPriceBeforeDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyerPriceBeforeDiscount);
            setBuyerPriceBeforeDiscount(refVal_setBuyerPriceBeforeDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priceBeforeDiscount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priceBeforeDiscount")));
        if(!fieldValue.is_null())
        {
            double refVal_setPriceBeforeDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceBeforeDiscount);
            setPriceBeforeDiscount(refVal_setPriceBeforeDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vat")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderVatType> refVal_setVat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVat);
            setVat(refVal_setVat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopSku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopSku);
            setShopSku(refVal_setShopSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subsidy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subsidy")));
        if(!fieldValue.is_null())
        {
            double refVal_setSubsidy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubsidy);
            setSubsidy(refVal_setSubsidy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partnerWarehouseId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partnerWarehouseId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartnerWarehouseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerWarehouseId);
            setPartnerWarehouseId(refVal_setPartnerWarehouseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("promos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("promos")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemPromoDTO>> refVal_setPromos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromos);
            setPromos(refVal_setPromos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instances")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemInstanceDTO>> refVal_setInstances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstances);
            setInstances(refVal_setInstances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("details"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("details")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemDetailDTO>> refVal_setDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetails);
            setDetails(refVal_setDetails);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subsidies"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subsidies")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemSubsidyDTO>> refVal_setSubsidies;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubsidies);
            setSubsidies(refVal_setSubsidies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requiredInstanceTypes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requiredInstanceTypes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemInstanceType>> refVal_setRequiredInstanceTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredInstanceTypes);
            setRequiredInstanceTypes(refVal_setRequiredInstanceTypes);
        }
    }
    return ok;
}

void OrderItemDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_OfferNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerName")), m_OfferName));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_BuyerPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyerPrice")), m_BuyerPrice));
    }
    if(m_BuyerPriceBeforeDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyerPriceBeforeDiscount")), m_BuyerPriceBeforeDiscount));
    }
    if(m_PriceBeforeDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priceBeforeDiscount")), m_PriceBeforeDiscount));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_VatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vat")), m_Vat));
    }
    if(m_ShopSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopSku")), m_ShopSku));
    }
    if(m_SubsidyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subsidy")), m_Subsidy));
    }
    if(m_PartnerWarehouseIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partnerWarehouseId")), m_PartnerWarehouseId));
    }
    if(m_PromosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("promos")), m_Promos));
    }
    if(m_InstancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instances")), m_Instances));
    }
    if(m_DetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("details")), m_Details));
    }
    if(m_SubsidiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subsidies")), m_Subsidies));
    }
    if(m_RequiredInstanceTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requiredInstanceTypes")), m_RequiredInstanceTypes));
    }
}

bool OrderItemDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offerName"))))
    {
        utility::string_t refVal_setOfferName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerName"))), refVal_setOfferName );
        setOfferName(refVal_setOfferName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyerPrice"))))
    {
        double refVal_setBuyerPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyerPrice"))), refVal_setBuyerPrice );
        setBuyerPrice(refVal_setBuyerPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyerPriceBeforeDiscount"))))
    {
        double refVal_setBuyerPriceBeforeDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyerPriceBeforeDiscount"))), refVal_setBuyerPriceBeforeDiscount );
        setBuyerPriceBeforeDiscount(refVal_setBuyerPriceBeforeDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priceBeforeDiscount"))))
    {
        double refVal_setPriceBeforeDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priceBeforeDiscount"))), refVal_setPriceBeforeDiscount );
        setPriceBeforeDiscount(refVal_setPriceBeforeDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int32_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vat"))))
    {
        std::shared_ptr<OrderVatType> refVal_setVat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vat"))), refVal_setVat );
        setVat(refVal_setVat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopSku"))))
    {
        utility::string_t refVal_setShopSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopSku"))), refVal_setShopSku );
        setShopSku(refVal_setShopSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subsidy"))))
    {
        double refVal_setSubsidy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subsidy"))), refVal_setSubsidy );
        setSubsidy(refVal_setSubsidy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partnerWarehouseId"))))
    {
        utility::string_t refVal_setPartnerWarehouseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partnerWarehouseId"))), refVal_setPartnerWarehouseId );
        setPartnerWarehouseId(refVal_setPartnerWarehouseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("promos"))))
    {
        std::vector<std::shared_ptr<OrderItemPromoDTO>> refVal_setPromos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("promos"))), refVal_setPromos );
        setPromos(refVal_setPromos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instances"))))
    {
        std::vector<std::shared_ptr<OrderItemInstanceDTO>> refVal_setInstances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instances"))), refVal_setInstances );
        setInstances(refVal_setInstances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("details"))))
    {
        std::vector<std::shared_ptr<OrderItemDetailDTO>> refVal_setDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("details"))), refVal_setDetails );
        setDetails(refVal_setDetails);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subsidies"))))
    {
        std::vector<std::shared_ptr<OrderItemSubsidyDTO>> refVal_setSubsidies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subsidies"))), refVal_setSubsidies );
        setSubsidies(refVal_setSubsidies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requiredInstanceTypes"))))
    {
        std::vector<std::shared_ptr<OrderItemInstanceType>> refVal_setRequiredInstanceTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requiredInstanceTypes"))), refVal_setRequiredInstanceTypes );
        setRequiredInstanceTypes(refVal_setRequiredInstanceTypes);
    }
    return ok;
}

int64_t OrderItemDTO::getId() const
{
    return m_Id;
}

void OrderItemDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrderItemDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrderItemDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrderItemDTO::getOfferId() const
{
    return m_OfferId;
}

void OrderItemDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool OrderItemDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void OrderItemDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
utility::string_t OrderItemDTO::getOfferName() const
{
    return m_OfferName;
}

void OrderItemDTO::setOfferName(const utility::string_t& value)
{
    m_OfferName = value;
    m_OfferNameIsSet = true;
}

bool OrderItemDTO::offerNameIsSet() const
{
    return m_OfferNameIsSet;
}

void OrderItemDTO::unsetOfferName()
{
    m_OfferNameIsSet = false;
}
double OrderItemDTO::getPrice() const
{
    return m_Price;
}

void OrderItemDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool OrderItemDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void OrderItemDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
double OrderItemDTO::getBuyerPrice() const
{
    return m_BuyerPrice;
}

void OrderItemDTO::setBuyerPrice(double value)
{
    m_BuyerPrice = value;
    m_BuyerPriceIsSet = true;
}

bool OrderItemDTO::buyerPriceIsSet() const
{
    return m_BuyerPriceIsSet;
}

void OrderItemDTO::unsetBuyerPrice()
{
    m_BuyerPriceIsSet = false;
}
double OrderItemDTO::getBuyerPriceBeforeDiscount() const
{
    return m_BuyerPriceBeforeDiscount;
}

void OrderItemDTO::setBuyerPriceBeforeDiscount(double value)
{
    m_BuyerPriceBeforeDiscount = value;
    m_BuyerPriceBeforeDiscountIsSet = true;
}

bool OrderItemDTO::buyerPriceBeforeDiscountIsSet() const
{
    return m_BuyerPriceBeforeDiscountIsSet;
}

void OrderItemDTO::unsetBuyerPriceBeforeDiscount()
{
    m_BuyerPriceBeforeDiscountIsSet = false;
}
double OrderItemDTO::getPriceBeforeDiscount() const
{
    return m_PriceBeforeDiscount;
}

void OrderItemDTO::setPriceBeforeDiscount(double value)
{
    m_PriceBeforeDiscount = value;
    m_PriceBeforeDiscountIsSet = true;
}

bool OrderItemDTO::priceBeforeDiscountIsSet() const
{
    return m_PriceBeforeDiscountIsSet;
}

void OrderItemDTO::unsetPriceBeforeDiscount()
{
    m_PriceBeforeDiscountIsSet = false;
}
int32_t OrderItemDTO::getCount() const
{
    return m_Count;
}

void OrderItemDTO::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool OrderItemDTO::countIsSet() const
{
    return m_CountIsSet;
}

void OrderItemDTO::unsetCount()
{
    m_CountIsSet = false;
}
std::shared_ptr<OrderVatType> OrderItemDTO::getVat() const
{
    return m_Vat;
}

void OrderItemDTO::setVat(const std::shared_ptr<OrderVatType>& value)
{
    m_Vat = value;
    m_VatIsSet = true;
}

bool OrderItemDTO::vatIsSet() const
{
    return m_VatIsSet;
}

void OrderItemDTO::unsetVat()
{
    m_VatIsSet = false;
}
utility::string_t OrderItemDTO::getShopSku() const
{
    return m_ShopSku;
}

void OrderItemDTO::setShopSku(const utility::string_t& value)
{
    m_ShopSku = value;
    m_ShopSkuIsSet = true;
}

bool OrderItemDTO::shopSkuIsSet() const
{
    return m_ShopSkuIsSet;
}

void OrderItemDTO::unsetShopSku()
{
    m_ShopSkuIsSet = false;
}
double OrderItemDTO::getSubsidy() const
{
    return m_Subsidy;
}

void OrderItemDTO::setSubsidy(double value)
{
    m_Subsidy = value;
    m_SubsidyIsSet = true;
}

bool OrderItemDTO::subsidyIsSet() const
{
    return m_SubsidyIsSet;
}

void OrderItemDTO::unsetSubsidy()
{
    m_SubsidyIsSet = false;
}
utility::string_t OrderItemDTO::getPartnerWarehouseId() const
{
    return m_PartnerWarehouseId;
}

void OrderItemDTO::setPartnerWarehouseId(const utility::string_t& value)
{
    m_PartnerWarehouseId = value;
    m_PartnerWarehouseIdIsSet = true;
}

bool OrderItemDTO::partnerWarehouseIdIsSet() const
{
    return m_PartnerWarehouseIdIsSet;
}

void OrderItemDTO::unsetPartnerWarehouseId()
{
    m_PartnerWarehouseIdIsSet = false;
}
std::vector<std::shared_ptr<OrderItemPromoDTO>>& OrderItemDTO::getPromos()
{
    return m_Promos;
}

void OrderItemDTO::setPromos(const std::vector<std::shared_ptr<OrderItemPromoDTO>>& value)
{
    m_Promos = value;
    m_PromosIsSet = true;
}

bool OrderItemDTO::promosIsSet() const
{
    return m_PromosIsSet;
}

void OrderItemDTO::unsetPromos()
{
    m_PromosIsSet = false;
}
std::vector<std::shared_ptr<OrderItemInstanceDTO>>& OrderItemDTO::getInstances()
{
    return m_Instances;
}

void OrderItemDTO::setInstances(const std::vector<std::shared_ptr<OrderItemInstanceDTO>>& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}

bool OrderItemDTO::instancesIsSet() const
{
    return m_InstancesIsSet;
}

void OrderItemDTO::unsetInstances()
{
    m_InstancesIsSet = false;
}
std::vector<std::shared_ptr<OrderItemDetailDTO>>& OrderItemDTO::getDetails()
{
    return m_Details;
}

void OrderItemDTO::setDetails(const std::vector<std::shared_ptr<OrderItemDetailDTO>>& value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}

bool OrderItemDTO::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void OrderItemDTO::unsetDetails()
{
    m_DetailsIsSet = false;
}
std::vector<std::shared_ptr<OrderItemSubsidyDTO>>& OrderItemDTO::getSubsidies()
{
    return m_Subsidies;
}

void OrderItemDTO::setSubsidies(const std::vector<std::shared_ptr<OrderItemSubsidyDTO>>& value)
{
    m_Subsidies = value;
    m_SubsidiesIsSet = true;
}

bool OrderItemDTO::subsidiesIsSet() const
{
    return m_SubsidiesIsSet;
}

void OrderItemDTO::unsetSubsidies()
{
    m_SubsidiesIsSet = false;
}
std::vector<std::shared_ptr<OrderItemInstanceType>>& OrderItemDTO::getRequiredInstanceTypes()
{
    return m_RequiredInstanceTypes;
}

void OrderItemDTO::setRequiredInstanceTypes(const std::vector<std::shared_ptr<OrderItemInstanceType>>& value)
{
    m_RequiredInstanceTypes = value;
    m_RequiredInstanceTypesIsSet = true;
}

bool OrderItemDTO::requiredInstanceTypesIsSet() const
{
    return m_RequiredInstanceTypesIsSet;
}

void OrderItemDTO::unsetRequiredInstanceTypes()
{
    m_RequiredInstanceTypesIsSet = false;
}
}
}
}
}


