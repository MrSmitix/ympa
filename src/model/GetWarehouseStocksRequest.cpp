/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetWarehouseStocksRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetWarehouseStocksRequest::GetWarehouseStocksRequest()
{
    m_WithTurnover = false;
    m_WithTurnoverIsSet = false;
    m_Archived = false;
    m_ArchivedIsSet = false;
    m_OfferIdsIsSet = false;
}

GetWarehouseStocksRequest::~GetWarehouseStocksRequest()
{
}

void GetWarehouseStocksRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetWarehouseStocksRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WithTurnoverIsSet)
    {
        val[utility::conversions::to_string_t(U("withTurnover"))] = ModelBase::toJson(m_WithTurnover);
    }
    if(m_ArchivedIsSet)
    {
        val[utility::conversions::to_string_t(U("archived"))] = ModelBase::toJson(m_Archived);
    }
    if(m_OfferIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("offerIds"))] = ModelBase::toJson(m_OfferIds);
    }

    return val;
}

bool GetWarehouseStocksRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("withTurnover"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("withTurnover")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWithTurnover;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWithTurnover);
            setWithTurnover(refVal_setWithTurnover);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("archived"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("archived")));
        if(!fieldValue.is_null())
        {
            bool refVal_setArchived;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArchived);
            setArchived(refVal_setArchived);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offerIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerIds")));
        if(!fieldValue.is_null())
        {
            std::set<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferIds);
            setOfferIds(refVal_setOfferIds);
        }
    }
    return ok;
}

void GetWarehouseStocksRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WithTurnoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("withTurnover")), m_WithTurnover));
    }
    if(m_ArchivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("archived")), m_Archived));
    }
    if(m_OfferIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerIds")), m_OfferIds));
    }
}

bool GetWarehouseStocksRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("withTurnover"))))
    {
        bool refVal_setWithTurnover;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("withTurnover"))), refVal_setWithTurnover );
        setWithTurnover(refVal_setWithTurnover);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("archived"))))
    {
        bool refVal_setArchived;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("archived"))), refVal_setArchived );
        setArchived(refVal_setArchived);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offerIds"))))
    {
        std::set<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerIds"))), refVal_setOfferIds );
        setOfferIds(refVal_setOfferIds);
    }
    return ok;
}

bool GetWarehouseStocksRequest::isWithTurnover() const
{
    return m_WithTurnover;
}

void GetWarehouseStocksRequest::setWithTurnover(bool value)
{
    m_WithTurnover = value;
    m_WithTurnoverIsSet = true;
}

bool GetWarehouseStocksRequest::withTurnoverIsSet() const
{
    return m_WithTurnoverIsSet;
}

void GetWarehouseStocksRequest::unsetWithTurnover()
{
    m_WithTurnoverIsSet = false;
}
bool GetWarehouseStocksRequest::isArchived() const
{
    return m_Archived;
}

void GetWarehouseStocksRequest::setArchived(bool value)
{
    m_Archived = value;
    m_ArchivedIsSet = true;
}

bool GetWarehouseStocksRequest::archivedIsSet() const
{
    return m_ArchivedIsSet;
}

void GetWarehouseStocksRequest::unsetArchived()
{
    m_ArchivedIsSet = false;
}
std::set<std::shared_ptr<utility::string_t>>& GetWarehouseStocksRequest::getOfferIds()
{
    return m_OfferIds;
}

void GetWarehouseStocksRequest::setOfferIds(const std::set<std::shared_ptr<utility::string_t>>& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}

bool GetWarehouseStocksRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}

void GetWarehouseStocksRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}
}
}
}
}


