/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedPublicationDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedPublicationDTO::FeedPublicationDTO()
{
    m_StatusIsSet = false;
    m_FullIsSet = false;
    m_PriceAndStockUpdateIsSet = false;
}

FeedPublicationDTO::~FeedPublicationDTO()
{
}

void FeedPublicationDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedPublicationDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_FullIsSet)
    {
        val[utility::conversions::to_string_t(U("full"))] = ModelBase::toJson(m_Full);
    }
    if(m_PriceAndStockUpdateIsSet)
    {
        val[utility::conversions::to_string_t(U("priceAndStockUpdate"))] = ModelBase::toJson(m_PriceAndStockUpdate);
    }

    return val;
}

bool FeedPublicationDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("full"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("full")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedPublicationFullDTO> refVal_setFull;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFull);
            setFull(refVal_setFull);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priceAndStockUpdate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priceAndStockUpdate")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedPublicationPriceAndStockUpdateDTO> refVal_setPriceAndStockUpdate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriceAndStockUpdate);
            setPriceAndStockUpdate(refVal_setPriceAndStockUpdate);
        }
    }
    return ok;
}

void FeedPublicationDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_FullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("full")), m_Full));
    }
    if(m_PriceAndStockUpdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priceAndStockUpdate")), m_PriceAndStockUpdate));
    }
}

bool FeedPublicationDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<FeedStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("full"))))
    {
        std::shared_ptr<FeedPublicationFullDTO> refVal_setFull;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("full"))), refVal_setFull );
        setFull(refVal_setFull);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priceAndStockUpdate"))))
    {
        std::shared_ptr<FeedPublicationPriceAndStockUpdateDTO> refVal_setPriceAndStockUpdate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priceAndStockUpdate"))), refVal_setPriceAndStockUpdate );
        setPriceAndStockUpdate(refVal_setPriceAndStockUpdate);
    }
    return ok;
}

std::shared_ptr<FeedStatusType> FeedPublicationDTO::getStatus() const
{
    return m_Status;
}

void FeedPublicationDTO::setStatus(const std::shared_ptr<FeedStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool FeedPublicationDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void FeedPublicationDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<FeedPublicationFullDTO> FeedPublicationDTO::getFull() const
{
    return m_Full;
}

void FeedPublicationDTO::setFull(const std::shared_ptr<FeedPublicationFullDTO>& value)
{
    m_Full = value;
    m_FullIsSet = true;
}

bool FeedPublicationDTO::fullIsSet() const
{
    return m_FullIsSet;
}

void FeedPublicationDTO::unsetFull()
{
    m_FullIsSet = false;
}
std::shared_ptr<FeedPublicationPriceAndStockUpdateDTO> FeedPublicationDTO::getPriceAndStockUpdate() const
{
    return m_PriceAndStockUpdate;
}

void FeedPublicationDTO::setPriceAndStockUpdate(const std::shared_ptr<FeedPublicationPriceAndStockUpdateDTO>& value)
{
    m_PriceAndStockUpdate = value;
    m_PriceAndStockUpdateIsSet = true;
}

bool FeedPublicationDTO::priceAndStockUpdateIsSet() const
{
    return m_PriceAndStockUpdateIsSet;
}

void FeedPublicationDTO::unsetPriceAndStockUpdate()
{
    m_PriceAndStockUpdateIsSet = false;
}
}
}
}
}


