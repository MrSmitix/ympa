/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderTrackDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderTrackDTO::OrderTrackDTO()
{
    m_TrackCode = utility::conversions::to_string_t("");
    m_TrackCodeIsSet = false;
    m_DeliveryServiceId = 0L;
    m_DeliveryServiceIdIsSet = false;
}

OrderTrackDTO::~OrderTrackDTO()
{
}

void OrderTrackDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderTrackDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TrackCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("trackCode"))] = ModelBase::toJson(m_TrackCode);
    }
    if(m_DeliveryServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryServiceId"))] = ModelBase::toJson(m_DeliveryServiceId);
    }

    return val;
}

bool OrderTrackDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("trackCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("trackCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTrackCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTrackCode);
            setTrackCode(refVal_setTrackCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryServiceId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDeliveryServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryServiceId);
            setDeliveryServiceId(refVal_setDeliveryServiceId);
        }
    }
    return ok;
}

void OrderTrackDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TrackCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("trackCode")), m_TrackCode));
    }
    if(m_DeliveryServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryServiceId")), m_DeliveryServiceId));
    }
}

bool OrderTrackDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("trackCode"))))
    {
        utility::string_t refVal_setTrackCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("trackCode"))), refVal_setTrackCode );
        setTrackCode(refVal_setTrackCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        int64_t refVal_setDeliveryServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryServiceId"))), refVal_setDeliveryServiceId );
        setDeliveryServiceId(refVal_setDeliveryServiceId);
    }
    return ok;
}

utility::string_t OrderTrackDTO::getTrackCode() const
{
    return m_TrackCode;
}

void OrderTrackDTO::setTrackCode(const utility::string_t& value)
{
    m_TrackCode = value;
    m_TrackCodeIsSet = true;
}

bool OrderTrackDTO::trackCodeIsSet() const
{
    return m_TrackCodeIsSet;
}

void OrderTrackDTO::unsetTrackCode()
{
    m_TrackCodeIsSet = false;
}
int64_t OrderTrackDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void OrderTrackDTO::setDeliveryServiceId(int64_t value)
{
    m_DeliveryServiceId = value;
    m_DeliveryServiceIdIsSet = true;
}

bool OrderTrackDTO::deliveryServiceIdIsSet() const
{
    return m_DeliveryServiceIdIsSet;
}

void OrderTrackDTO::unsetDeliveryServiceId()
{
    m_DeliveryServiceIdIsSet = false;
}
}
}
}
}


