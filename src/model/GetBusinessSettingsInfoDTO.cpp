/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetBusinessSettingsInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetBusinessSettingsInfoDTO::GetBusinessSettingsInfoDTO()
{
    m_InfoIsSet = false;
    m_SettingsIsSet = false;
}

GetBusinessSettingsInfoDTO::~GetBusinessSettingsInfoDTO()
{
}

void GetBusinessSettingsInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value GetBusinessSettingsInfoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InfoIsSet)
    {
        val[utility::conversions::to_string_t(U("info"))] = ModelBase::toJson(m_Info);
    }
    if(m_SettingsIsSet)
    {
        val[utility::conversions::to_string_t(U("settings"))] = ModelBase::toJson(m_Settings);
    }

    return val;
}

bool GetBusinessSettingsInfoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("info"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("info")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BusinessDTO> refVal_setInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInfo);
            setInfo(refVal_setInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("settings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("settings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BusinessSettingsDTO> refVal_setSettings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSettings);
            setSettings(refVal_setSettings);
        }
    }
    return ok;
}

void GetBusinessSettingsInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("info")), m_Info));
    }
    if(m_SettingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("settings")), m_Settings));
    }
}

bool GetBusinessSettingsInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("info"))))
    {
        std::shared_ptr<BusinessDTO> refVal_setInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("info"))), refVal_setInfo );
        setInfo(refVal_setInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("settings"))))
    {
        std::shared_ptr<BusinessSettingsDTO> refVal_setSettings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("settings"))), refVal_setSettings );
        setSettings(refVal_setSettings);
    }
    return ok;
}

std::shared_ptr<BusinessDTO> GetBusinessSettingsInfoDTO::getInfo() const
{
    return m_Info;
}

void GetBusinessSettingsInfoDTO::setInfo(const std::shared_ptr<BusinessDTO>& value)
{
    m_Info = value;
    m_InfoIsSet = true;
}

bool GetBusinessSettingsInfoDTO::infoIsSet() const
{
    return m_InfoIsSet;
}

void GetBusinessSettingsInfoDTO::unsetInfo()
{
    m_InfoIsSet = false;
}
std::shared_ptr<BusinessSettingsDTO> GetBusinessSettingsInfoDTO::getSettings() const
{
    return m_Settings;
}

void GetBusinessSettingsInfoDTO::setSettings(const std::shared_ptr<BusinessSettingsDTO>& value)
{
    m_Settings = value;
    m_SettingsIsSet = true;
}

bool GetBusinessSettingsInfoDTO::settingsIsSet() const
{
    return m_SettingsIsSet;
}

void GetBusinessSettingsInfoDTO::unsetSettings()
{
    m_SettingsIsSet = false;
}
}
}
}
}


