/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderDeliveryDatesDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderDeliveryDatesDTO::OrderDeliveryDatesDTO()
{
    m_FromDate = utility::conversions::to_string_t("");
    m_FromDateIsSet = false;
    m_ToDate = utility::conversions::to_string_t("");
    m_ToDateIsSet = false;
    m_FromTime = utility::conversions::to_string_t("");
    m_FromTimeIsSet = false;
    m_ToTime = utility::conversions::to_string_t("");
    m_ToTimeIsSet = false;
    m_RealDeliveryDate = utility::conversions::to_string_t("");
    m_RealDeliveryDateIsSet = false;
}

OrderDeliveryDatesDTO::~OrderDeliveryDatesDTO()
{
}

void OrderDeliveryDatesDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderDeliveryDatesDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromDateIsSet)
    {
        val[utility::conversions::to_string_t(U("fromDate"))] = ModelBase::toJson(m_FromDate);
    }
    if(m_ToDateIsSet)
    {
        val[utility::conversions::to_string_t(U("toDate"))] = ModelBase::toJson(m_ToDate);
    }
    if(m_FromTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("fromTime"))] = ModelBase::toJson(m_FromTime);
    }
    if(m_ToTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("toTime"))] = ModelBase::toJson(m_ToTime);
    }
    if(m_RealDeliveryDateIsSet)
    {
        val[utility::conversions::to_string_t(U("realDeliveryDate"))] = ModelBase::toJson(m_RealDeliveryDate);
    }

    return val;
}

bool OrderDeliveryDatesDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("fromDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromDate);
            setFromDate(refVal_setFromDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToDate);
            setToDate(refVal_setToDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromTime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromTime);
            setFromTime(refVal_setFromTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toTime")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToTime);
            setToTime(refVal_setToTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("realDeliveryDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("realDeliveryDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRealDeliveryDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRealDeliveryDate);
            setRealDeliveryDate(refVal_setRealDeliveryDate);
        }
    }
    return ok;
}

void OrderDeliveryDatesDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FromDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromDate")), m_FromDate));
    }
    if(m_ToDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toDate")), m_ToDate));
    }
    if(m_FromTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromTime")), m_FromTime));
    }
    if(m_ToTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toTime")), m_ToTime));
    }
    if(m_RealDeliveryDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("realDeliveryDate")), m_RealDeliveryDate));
    }
}

bool OrderDeliveryDatesDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("fromDate"))))
    {
        utility::string_t refVal_setFromDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromDate"))), refVal_setFromDate );
        setFromDate(refVal_setFromDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toDate"))))
    {
        utility::string_t refVal_setToDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toDate"))), refVal_setToDate );
        setToDate(refVal_setToDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromTime"))))
    {
        utility::string_t refVal_setFromTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromTime"))), refVal_setFromTime );
        setFromTime(refVal_setFromTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toTime"))))
    {
        utility::string_t refVal_setToTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toTime"))), refVal_setToTime );
        setToTime(refVal_setToTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("realDeliveryDate"))))
    {
        utility::string_t refVal_setRealDeliveryDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("realDeliveryDate"))), refVal_setRealDeliveryDate );
        setRealDeliveryDate(refVal_setRealDeliveryDate);
    }
    return ok;
}

utility::string_t OrderDeliveryDatesDTO::getFromDate() const
{
    return m_FromDate;
}

void OrderDeliveryDatesDTO::setFromDate(const utility::string_t& value)
{
    m_FromDate = value;
    m_FromDateIsSet = true;
}

bool OrderDeliveryDatesDTO::fromDateIsSet() const
{
    return m_FromDateIsSet;
}

void OrderDeliveryDatesDTO::unsetFromDate()
{
    m_FromDateIsSet = false;
}
utility::string_t OrderDeliveryDatesDTO::getToDate() const
{
    return m_ToDate;
}

void OrderDeliveryDatesDTO::setToDate(const utility::string_t& value)
{
    m_ToDate = value;
    m_ToDateIsSet = true;
}

bool OrderDeliveryDatesDTO::toDateIsSet() const
{
    return m_ToDateIsSet;
}

void OrderDeliveryDatesDTO::unsetToDate()
{
    m_ToDateIsSet = false;
}
utility::string_t OrderDeliveryDatesDTO::getFromTime() const
{
    return m_FromTime;
}

void OrderDeliveryDatesDTO::setFromTime(const utility::string_t& value)
{
    m_FromTime = value;
    m_FromTimeIsSet = true;
}

bool OrderDeliveryDatesDTO::fromTimeIsSet() const
{
    return m_FromTimeIsSet;
}

void OrderDeliveryDatesDTO::unsetFromTime()
{
    m_FromTimeIsSet = false;
}
utility::string_t OrderDeliveryDatesDTO::getToTime() const
{
    return m_ToTime;
}

void OrderDeliveryDatesDTO::setToTime(const utility::string_t& value)
{
    m_ToTime = value;
    m_ToTimeIsSet = true;
}

bool OrderDeliveryDatesDTO::toTimeIsSet() const
{
    return m_ToTimeIsSet;
}

void OrderDeliveryDatesDTO::unsetToTime()
{
    m_ToTimeIsSet = false;
}
utility::string_t OrderDeliveryDatesDTO::getRealDeliveryDate() const
{
    return m_RealDeliveryDate;
}

void OrderDeliveryDatesDTO::setRealDeliveryDate(const utility::string_t& value)
{
    m_RealDeliveryDate = value;
    m_RealDeliveryDateIsSet = true;
}

bool OrderDeliveryDatesDTO::realDeliveryDateIsSet() const
{
    return m_RealDeliveryDateIsSet;
}

void OrderDeliveryDatesDTO::unsetRealDeliveryDate()
{
    m_RealDeliveryDateIsSet = false;
}
}
}
}
}


