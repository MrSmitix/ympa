/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetOfferDTO::GetOfferDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_MarketCategoryId = 0L;
    m_MarketCategoryIdIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_PicturesIsSet = false;
    m_VideosIsSet = false;
    m_ManualsIsSet = false;
    m_Vendor = utility::conversions::to_string_t("");
    m_VendorIsSet = false;
    m_BarcodesIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ManufacturerCountriesIsSet = false;
    m_WeightDimensionsIsSet = false;
    m_VendorCode = utility::conversions::to_string_t("");
    m_VendorCodeIsSet = false;
    m_TagsIsSet = false;
    m_ShelfLifeIsSet = false;
    m_LifeTimeIsSet = false;
    m_GuaranteePeriodIsSet = false;
    m_CustomsCommodityCode = utility::conversions::to_string_t("");
    m_CustomsCommodityCodeIsSet = false;
    m_CertificatesIsSet = false;
    m_BoxCount = 0;
    m_BoxCountIsSet = false;
    m_ConditionIsSet = false;
    m_TypeIsSet = false;
    m_Downloadable = false;
    m_DownloadableIsSet = false;
    m_Adult = false;
    m_AdultIsSet = false;
    m_AgeIsSet = false;
    m_ParamsIsSet = false;
    m_BasicPriceIsSet = false;
    m_PurchasePriceIsSet = false;
    m_AdditionalExpensesIsSet = false;
    m_CofinancePriceIsSet = false;
    m_CardStatusIsSet = false;
    m_CampaignsIsSet = false;
    m_SellingProgramsIsSet = false;
    m_Archived = false;
    m_ArchivedIsSet = false;
}

GetOfferDTO::~GetOfferDTO()
{
}

void GetOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value GetOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_MarketCategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("marketCategoryId"))] = ModelBase::toJson(m_MarketCategoryId);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }
    if(m_PicturesIsSet)
    {
        val[utility::conversions::to_string_t(U("pictures"))] = ModelBase::toJson(m_Pictures);
    }
    if(m_VideosIsSet)
    {
        val[utility::conversions::to_string_t(U("videos"))] = ModelBase::toJson(m_Videos);
    }
    if(m_ManualsIsSet)
    {
        val[utility::conversions::to_string_t(U("manuals"))] = ModelBase::toJson(m_Manuals);
    }
    if(m_VendorIsSet)
    {
        val[utility::conversions::to_string_t(U("vendor"))] = ModelBase::toJson(m_Vendor);
    }
    if(m_BarcodesIsSet)
    {
        val[utility::conversions::to_string_t(U("barcodes"))] = ModelBase::toJson(m_Barcodes);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ManufacturerCountriesIsSet)
    {
        val[utility::conversions::to_string_t(U("manufacturerCountries"))] = ModelBase::toJson(m_ManufacturerCountries);
    }
    if(m_WeightDimensionsIsSet)
    {
        val[utility::conversions::to_string_t(U("weightDimensions"))] = ModelBase::toJson(m_WeightDimensions);
    }
    if(m_VendorCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("vendorCode"))] = ModelBase::toJson(m_VendorCode);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_ShelfLifeIsSet)
    {
        val[utility::conversions::to_string_t(U("shelfLife"))] = ModelBase::toJson(m_ShelfLife);
    }
    if(m_LifeTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("lifeTime"))] = ModelBase::toJson(m_LifeTime);
    }
    if(m_GuaranteePeriodIsSet)
    {
        val[utility::conversions::to_string_t(U("guaranteePeriod"))] = ModelBase::toJson(m_GuaranteePeriod);
    }
    if(m_CustomsCommodityCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("customsCommodityCode"))] = ModelBase::toJson(m_CustomsCommodityCode);
    }
    if(m_CertificatesIsSet)
    {
        val[utility::conversions::to_string_t(U("certificates"))] = ModelBase::toJson(m_Certificates);
    }
    if(m_BoxCountIsSet)
    {
        val[utility::conversions::to_string_t(U("boxCount"))] = ModelBase::toJson(m_BoxCount);
    }
    if(m_ConditionIsSet)
    {
        val[utility::conversions::to_string_t(U("condition"))] = ModelBase::toJson(m_Condition);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_DownloadableIsSet)
    {
        val[utility::conversions::to_string_t(U("downloadable"))] = ModelBase::toJson(m_Downloadable);
    }
    if(m_AdultIsSet)
    {
        val[utility::conversions::to_string_t(U("adult"))] = ModelBase::toJson(m_Adult);
    }
    if(m_AgeIsSet)
    {
        val[utility::conversions::to_string_t(U("age"))] = ModelBase::toJson(m_Age);
    }
    if(m_ParamsIsSet)
    {
        val[utility::conversions::to_string_t(U("params"))] = ModelBase::toJson(m_Params);
    }
    if(m_BasicPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("basicPrice"))] = ModelBase::toJson(m_BasicPrice);
    }
    if(m_PurchasePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("purchasePrice"))] = ModelBase::toJson(m_PurchasePrice);
    }
    if(m_AdditionalExpensesIsSet)
    {
        val[utility::conversions::to_string_t(U("additionalExpenses"))] = ModelBase::toJson(m_AdditionalExpenses);
    }
    if(m_CofinancePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("cofinancePrice"))] = ModelBase::toJson(m_CofinancePrice);
    }
    if(m_CardStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("cardStatus"))] = ModelBase::toJson(m_CardStatus);
    }
    if(m_CampaignsIsSet)
    {
        val[utility::conversions::to_string_t(U("campaigns"))] = ModelBase::toJson(m_Campaigns);
    }
    if(m_SellingProgramsIsSet)
    {
        val[utility::conversions::to_string_t(U("sellingPrograms"))] = ModelBase::toJson(m_SellingPrograms);
    }
    if(m_ArchivedIsSet)
    {
        val[utility::conversions::to_string_t(U("archived"))] = ModelBase::toJson(m_Archived);
    }

    return val;
}

bool GetOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("marketCategoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marketCategoryId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMarketCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketCategoryId);
            setMarketCategoryId(refVal_setMarketCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pictures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pictures")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPictures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPictures);
            setPictures(refVal_setPictures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("videos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("videos")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setVideos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVideos);
            setVideos(refVal_setVideos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("manuals"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("manuals")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferManualDTO>> refVal_setManuals;
            ok &= ModelBase::fromJson(fieldValue, refVal_setManuals);
            setManuals(refVal_setManuals);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendor);
            setVendor(refVal_setVendor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("barcodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("barcodes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBarcodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBarcodes);
            setBarcodes(refVal_setBarcodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("manufacturerCountries"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("manufacturerCountries")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setManufacturerCountries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setManufacturerCountries);
            setManufacturerCountries(refVal_setManufacturerCountries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weightDimensions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weightDimensions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferWeightDimensionsDTO> refVal_setWeightDimensions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeightDimensions);
            setWeightDimensions(refVal_setWeightDimensions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendorCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendorCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendorCode);
            setVendorCode(refVal_setVendorCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shelfLife"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shelfLife")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimePeriodDTO> refVal_setShelfLife;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShelfLife);
            setShelfLife(refVal_setShelfLife);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lifeTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lifeTime")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimePeriodDTO> refVal_setLifeTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLifeTime);
            setLifeTime(refVal_setLifeTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("guaranteePeriod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("guaranteePeriod")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimePeriodDTO> refVal_setGuaranteePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGuaranteePeriod);
            setGuaranteePeriod(refVal_setGuaranteePeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customsCommodityCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customsCommodityCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomsCommodityCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomsCommodityCode);
            setCustomsCommodityCode(refVal_setCustomsCommodityCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("certificates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("certificates")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCertificates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCertificates);
            setCertificates(refVal_setCertificates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boxCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boxCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBoxCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoxCount);
            setBoxCount(refVal_setBoxCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("condition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("condition")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferConditionDTO> refVal_setCondition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCondition);
            setCondition(refVal_setCondition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("downloadable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("downloadable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDownloadable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownloadable);
            setDownloadable(refVal_setDownloadable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adult"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adult")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAdult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdult);
            setAdult(refVal_setAdult);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("age"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("age")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AgeDTO> refVal_setAge;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAge);
            setAge(refVal_setAge);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("params"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("params")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferParamDTO>> refVal_setParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParams);
            setParams(refVal_setParams);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("basicPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("basicPrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPriceWithDiscountDTO> refVal_setBasicPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBasicPrice);
            setBasicPrice(refVal_setBasicPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purchasePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purchasePrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPriceDTO> refVal_setPurchasePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurchasePrice);
            setPurchasePrice(refVal_setPurchasePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("additionalExpenses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additionalExpenses")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPriceDTO> refVal_setAdditionalExpenses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdditionalExpenses);
            setAdditionalExpenses(refVal_setAdditionalExpenses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cofinancePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cofinancePrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GetPriceDTO> refVal_setCofinancePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCofinancePrice);
            setCofinancePrice(refVal_setCofinancePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cardStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cardStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferCardStatusType> refVal_setCardStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCardStatus);
            setCardStatus(refVal_setCardStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaigns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaigns")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferCampaignStatusDTO>> refVal_setCampaigns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaigns);
            setCampaigns(refVal_setCampaigns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sellingPrograms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sellingPrograms")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferSellingProgramDTO>> refVal_setSellingPrograms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSellingPrograms);
            setSellingPrograms(refVal_setSellingPrograms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("archived"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("archived")));
        if(!fieldValue.is_null())
        {
            bool refVal_setArchived;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArchived);
            setArchived(refVal_setArchived);
        }
    }
    return ok;
}

void GetOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_MarketCategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marketCategoryId")), m_MarketCategoryId));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
    if(m_PicturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pictures")), m_Pictures));
    }
    if(m_VideosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("videos")), m_Videos));
    }
    if(m_ManualsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("manuals")), m_Manuals));
    }
    if(m_VendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendor")), m_Vendor));
    }
    if(m_BarcodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("barcodes")), m_Barcodes));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ManufacturerCountriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("manufacturerCountries")), m_ManufacturerCountries));
    }
    if(m_WeightDimensionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weightDimensions")), m_WeightDimensions));
    }
    if(m_VendorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendorCode")), m_VendorCode));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_ShelfLifeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shelfLife")), m_ShelfLife));
    }
    if(m_LifeTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lifeTime")), m_LifeTime));
    }
    if(m_GuaranteePeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("guaranteePeriod")), m_GuaranteePeriod));
    }
    if(m_CustomsCommodityCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customsCommodityCode")), m_CustomsCommodityCode));
    }
    if(m_CertificatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("certificates")), m_Certificates));
    }
    if(m_BoxCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boxCount")), m_BoxCount));
    }
    if(m_ConditionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("condition")), m_Condition));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_DownloadableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("downloadable")), m_Downloadable));
    }
    if(m_AdultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adult")), m_Adult));
    }
    if(m_AgeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("age")), m_Age));
    }
    if(m_ParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("params")), m_Params));
    }
    if(m_BasicPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("basicPrice")), m_BasicPrice));
    }
    if(m_PurchasePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purchasePrice")), m_PurchasePrice));
    }
    if(m_AdditionalExpensesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additionalExpenses")), m_AdditionalExpenses));
    }
    if(m_CofinancePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cofinancePrice")), m_CofinancePrice));
    }
    if(m_CardStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cardStatus")), m_CardStatus));
    }
    if(m_CampaignsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaigns")), m_Campaigns));
    }
    if(m_SellingProgramsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sellingPrograms")), m_SellingPrograms));
    }
    if(m_ArchivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("archived")), m_Archived));
    }
}

bool GetOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("marketCategoryId"))))
    {
        int64_t refVal_setMarketCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marketCategoryId"))), refVal_setMarketCategoryId );
        setMarketCategoryId(refVal_setMarketCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        utility::string_t refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pictures"))))
    {
        std::vector<utility::string_t> refVal_setPictures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pictures"))), refVal_setPictures );
        setPictures(refVal_setPictures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("videos"))))
    {
        std::vector<utility::string_t> refVal_setVideos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("videos"))), refVal_setVideos );
        setVideos(refVal_setVideos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("manuals"))))
    {
        std::vector<std::shared_ptr<OfferManualDTO>> refVal_setManuals;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("manuals"))), refVal_setManuals );
        setManuals(refVal_setManuals);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendor"))))
    {
        utility::string_t refVal_setVendor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendor"))), refVal_setVendor );
        setVendor(refVal_setVendor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("barcodes"))))
    {
        std::vector<utility::string_t> refVal_setBarcodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("barcodes"))), refVal_setBarcodes );
        setBarcodes(refVal_setBarcodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("manufacturerCountries"))))
    {
        std::vector<utility::string_t> refVal_setManufacturerCountries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("manufacturerCountries"))), refVal_setManufacturerCountries );
        setManufacturerCountries(refVal_setManufacturerCountries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weightDimensions"))))
    {
        std::shared_ptr<OfferWeightDimensionsDTO> refVal_setWeightDimensions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weightDimensions"))), refVal_setWeightDimensions );
        setWeightDimensions(refVal_setWeightDimensions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendorCode"))))
    {
        utility::string_t refVal_setVendorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendorCode"))), refVal_setVendorCode );
        setVendorCode(refVal_setVendorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shelfLife"))))
    {
        std::shared_ptr<TimePeriodDTO> refVal_setShelfLife;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shelfLife"))), refVal_setShelfLife );
        setShelfLife(refVal_setShelfLife);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lifeTime"))))
    {
        std::shared_ptr<TimePeriodDTO> refVal_setLifeTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lifeTime"))), refVal_setLifeTime );
        setLifeTime(refVal_setLifeTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("guaranteePeriod"))))
    {
        std::shared_ptr<TimePeriodDTO> refVal_setGuaranteePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("guaranteePeriod"))), refVal_setGuaranteePeriod );
        setGuaranteePeriod(refVal_setGuaranteePeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customsCommodityCode"))))
    {
        utility::string_t refVal_setCustomsCommodityCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customsCommodityCode"))), refVal_setCustomsCommodityCode );
        setCustomsCommodityCode(refVal_setCustomsCommodityCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("certificates"))))
    {
        std::vector<utility::string_t> refVal_setCertificates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("certificates"))), refVal_setCertificates );
        setCertificates(refVal_setCertificates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boxCount"))))
    {
        int32_t refVal_setBoxCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boxCount"))), refVal_setBoxCount );
        setBoxCount(refVal_setBoxCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("condition"))))
    {
        std::shared_ptr<OfferConditionDTO> refVal_setCondition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("condition"))), refVal_setCondition );
        setCondition(refVal_setCondition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OfferType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("downloadable"))))
    {
        bool refVal_setDownloadable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("downloadable"))), refVal_setDownloadable );
        setDownloadable(refVal_setDownloadable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adult"))))
    {
        bool refVal_setAdult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adult"))), refVal_setAdult );
        setAdult(refVal_setAdult);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("age"))))
    {
        std::shared_ptr<AgeDTO> refVal_setAge;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("age"))), refVal_setAge );
        setAge(refVal_setAge);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("params"))))
    {
        std::vector<std::shared_ptr<OfferParamDTO>> refVal_setParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("params"))), refVal_setParams );
        setParams(refVal_setParams);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("basicPrice"))))
    {
        std::shared_ptr<GetPriceWithDiscountDTO> refVal_setBasicPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("basicPrice"))), refVal_setBasicPrice );
        setBasicPrice(refVal_setBasicPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purchasePrice"))))
    {
        std::shared_ptr<GetPriceDTO> refVal_setPurchasePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purchasePrice"))), refVal_setPurchasePrice );
        setPurchasePrice(refVal_setPurchasePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("additionalExpenses"))))
    {
        std::shared_ptr<GetPriceDTO> refVal_setAdditionalExpenses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additionalExpenses"))), refVal_setAdditionalExpenses );
        setAdditionalExpenses(refVal_setAdditionalExpenses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cofinancePrice"))))
    {
        std::shared_ptr<GetPriceDTO> refVal_setCofinancePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cofinancePrice"))), refVal_setCofinancePrice );
        setCofinancePrice(refVal_setCofinancePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cardStatus"))))
    {
        std::shared_ptr<OfferCardStatusType> refVal_setCardStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cardStatus"))), refVal_setCardStatus );
        setCardStatus(refVal_setCardStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaigns"))))
    {
        std::vector<std::shared_ptr<OfferCampaignStatusDTO>> refVal_setCampaigns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaigns"))), refVal_setCampaigns );
        setCampaigns(refVal_setCampaigns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sellingPrograms"))))
    {
        std::vector<std::shared_ptr<OfferSellingProgramDTO>> refVal_setSellingPrograms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sellingPrograms"))), refVal_setSellingPrograms );
        setSellingPrograms(refVal_setSellingPrograms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("archived"))))
    {
        bool refVal_setArchived;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("archived"))), refVal_setArchived );
        setArchived(refVal_setArchived);
    }
    return ok;
}

utility::string_t GetOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void GetOfferDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool GetOfferDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void GetOfferDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
utility::string_t GetOfferDTO::getName() const
{
    return m_Name;
}

void GetOfferDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GetOfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void GetOfferDTO::unsetName()
{
    m_NameIsSet = false;
}
int64_t GetOfferDTO::getMarketCategoryId() const
{
    return m_MarketCategoryId;
}

void GetOfferDTO::setMarketCategoryId(int64_t value)
{
    m_MarketCategoryId = value;
    m_MarketCategoryIdIsSet = true;
}

bool GetOfferDTO::marketCategoryIdIsSet() const
{
    return m_MarketCategoryIdIsSet;
}

void GetOfferDTO::unsetMarketCategoryId()
{
    m_MarketCategoryIdIsSet = false;
}
utility::string_t GetOfferDTO::getCategory() const
{
    return m_Category;
}

void GetOfferDTO::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool GetOfferDTO::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void GetOfferDTO::unsetCategory()
{
    m_CategoryIsSet = false;
}
std::vector<utility::string_t>& GetOfferDTO::getPictures()
{
    return m_Pictures;
}

void GetOfferDTO::setPictures(const std::vector<utility::string_t>& value)
{
    m_Pictures = value;
    m_PicturesIsSet = true;
}

bool GetOfferDTO::picturesIsSet() const
{
    return m_PicturesIsSet;
}

void GetOfferDTO::unsetPictures()
{
    m_PicturesIsSet = false;
}
std::vector<utility::string_t>& GetOfferDTO::getVideos()
{
    return m_Videos;
}

void GetOfferDTO::setVideos(const std::vector<utility::string_t>& value)
{
    m_Videos = value;
    m_VideosIsSet = true;
}

bool GetOfferDTO::videosIsSet() const
{
    return m_VideosIsSet;
}

void GetOfferDTO::unsetVideos()
{
    m_VideosIsSet = false;
}
std::vector<std::shared_ptr<OfferManualDTO>>& GetOfferDTO::getManuals()
{
    return m_Manuals;
}

void GetOfferDTO::setManuals(const std::vector<std::shared_ptr<OfferManualDTO>>& value)
{
    m_Manuals = value;
    m_ManualsIsSet = true;
}

bool GetOfferDTO::manualsIsSet() const
{
    return m_ManualsIsSet;
}

void GetOfferDTO::unsetManuals()
{
    m_ManualsIsSet = false;
}
utility::string_t GetOfferDTO::getVendor() const
{
    return m_Vendor;
}

void GetOfferDTO::setVendor(const utility::string_t& value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}

bool GetOfferDTO::vendorIsSet() const
{
    return m_VendorIsSet;
}

void GetOfferDTO::unsetVendor()
{
    m_VendorIsSet = false;
}
std::vector<utility::string_t>& GetOfferDTO::getBarcodes()
{
    return m_Barcodes;
}

void GetOfferDTO::setBarcodes(const std::vector<utility::string_t>& value)
{
    m_Barcodes = value;
    m_BarcodesIsSet = true;
}

bool GetOfferDTO::barcodesIsSet() const
{
    return m_BarcodesIsSet;
}

void GetOfferDTO::unsetBarcodes()
{
    m_BarcodesIsSet = false;
}
utility::string_t GetOfferDTO::getDescription() const
{
    return m_Description;
}

void GetOfferDTO::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool GetOfferDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GetOfferDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<utility::string_t>& GetOfferDTO::getManufacturerCountries()
{
    return m_ManufacturerCountries;
}

void GetOfferDTO::setManufacturerCountries(const std::vector<utility::string_t>& value)
{
    m_ManufacturerCountries = value;
    m_ManufacturerCountriesIsSet = true;
}

bool GetOfferDTO::manufacturerCountriesIsSet() const
{
    return m_ManufacturerCountriesIsSet;
}

void GetOfferDTO::unsetManufacturerCountries()
{
    m_ManufacturerCountriesIsSet = false;
}
std::shared_ptr<OfferWeightDimensionsDTO> GetOfferDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void GetOfferDTO::setWeightDimensions(const std::shared_ptr<OfferWeightDimensionsDTO>& value)
{
    m_WeightDimensions = value;
    m_WeightDimensionsIsSet = true;
}

bool GetOfferDTO::weightDimensionsIsSet() const
{
    return m_WeightDimensionsIsSet;
}

void GetOfferDTO::unsetWeightDimensions()
{
    m_WeightDimensionsIsSet = false;
}
utility::string_t GetOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}

void GetOfferDTO::setVendorCode(const utility::string_t& value)
{
    m_VendorCode = value;
    m_VendorCodeIsSet = true;
}

bool GetOfferDTO::vendorCodeIsSet() const
{
    return m_VendorCodeIsSet;
}

void GetOfferDTO::unsetVendorCode()
{
    m_VendorCodeIsSet = false;
}
std::vector<utility::string_t>& GetOfferDTO::getTags()
{
    return m_Tags;
}

void GetOfferDTO::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool GetOfferDTO::tagsIsSet() const
{
    return m_TagsIsSet;
}

void GetOfferDTO::unsetTags()
{
    m_TagsIsSet = false;
}
std::shared_ptr<TimePeriodDTO> GetOfferDTO::getShelfLife() const
{
    return m_ShelfLife;
}

void GetOfferDTO::setShelfLife(const std::shared_ptr<TimePeriodDTO>& value)
{
    m_ShelfLife = value;
    m_ShelfLifeIsSet = true;
}

bool GetOfferDTO::shelfLifeIsSet() const
{
    return m_ShelfLifeIsSet;
}

void GetOfferDTO::unsetShelfLife()
{
    m_ShelfLifeIsSet = false;
}
std::shared_ptr<TimePeriodDTO> GetOfferDTO::getLifeTime() const
{
    return m_LifeTime;
}

void GetOfferDTO::setLifeTime(const std::shared_ptr<TimePeriodDTO>& value)
{
    m_LifeTime = value;
    m_LifeTimeIsSet = true;
}

bool GetOfferDTO::lifeTimeIsSet() const
{
    return m_LifeTimeIsSet;
}

void GetOfferDTO::unsetLifeTime()
{
    m_LifeTimeIsSet = false;
}
std::shared_ptr<TimePeriodDTO> GetOfferDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}

void GetOfferDTO::setGuaranteePeriod(const std::shared_ptr<TimePeriodDTO>& value)
{
    m_GuaranteePeriod = value;
    m_GuaranteePeriodIsSet = true;
}

bool GetOfferDTO::guaranteePeriodIsSet() const
{
    return m_GuaranteePeriodIsSet;
}

void GetOfferDTO::unsetGuaranteePeriod()
{
    m_GuaranteePeriodIsSet = false;
}
utility::string_t GetOfferDTO::getCustomsCommodityCode() const
{
    return m_CustomsCommodityCode;
}

void GetOfferDTO::setCustomsCommodityCode(const utility::string_t& value)
{
    m_CustomsCommodityCode = value;
    m_CustomsCommodityCodeIsSet = true;
}

bool GetOfferDTO::customsCommodityCodeIsSet() const
{
    return m_CustomsCommodityCodeIsSet;
}

void GetOfferDTO::unsetCustomsCommodityCode()
{
    m_CustomsCommodityCodeIsSet = false;
}
std::vector<utility::string_t>& GetOfferDTO::getCertificates()
{
    return m_Certificates;
}

void GetOfferDTO::setCertificates(const std::vector<utility::string_t>& value)
{
    m_Certificates = value;
    m_CertificatesIsSet = true;
}

bool GetOfferDTO::certificatesIsSet() const
{
    return m_CertificatesIsSet;
}

void GetOfferDTO::unsetCertificates()
{
    m_CertificatesIsSet = false;
}
int32_t GetOfferDTO::getBoxCount() const
{
    return m_BoxCount;
}

void GetOfferDTO::setBoxCount(int32_t value)
{
    m_BoxCount = value;
    m_BoxCountIsSet = true;
}

bool GetOfferDTO::boxCountIsSet() const
{
    return m_BoxCountIsSet;
}

void GetOfferDTO::unsetBoxCount()
{
    m_BoxCountIsSet = false;
}
std::shared_ptr<OfferConditionDTO> GetOfferDTO::getCondition() const
{
    return m_Condition;
}

void GetOfferDTO::setCondition(const std::shared_ptr<OfferConditionDTO>& value)
{
    m_Condition = value;
    m_ConditionIsSet = true;
}

bool GetOfferDTO::conditionIsSet() const
{
    return m_ConditionIsSet;
}

void GetOfferDTO::unsetCondition()
{
    m_ConditionIsSet = false;
}
std::shared_ptr<OfferType> GetOfferDTO::getType() const
{
    return m_Type;
}

void GetOfferDTO::setType(const std::shared_ptr<OfferType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool GetOfferDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void GetOfferDTO::unsetType()
{
    m_TypeIsSet = false;
}
bool GetOfferDTO::isDownloadable() const
{
    return m_Downloadable;
}

void GetOfferDTO::setDownloadable(bool value)
{
    m_Downloadable = value;
    m_DownloadableIsSet = true;
}

bool GetOfferDTO::downloadableIsSet() const
{
    return m_DownloadableIsSet;
}

void GetOfferDTO::unsetDownloadable()
{
    m_DownloadableIsSet = false;
}
bool GetOfferDTO::isAdult() const
{
    return m_Adult;
}

void GetOfferDTO::setAdult(bool value)
{
    m_Adult = value;
    m_AdultIsSet = true;
}

bool GetOfferDTO::adultIsSet() const
{
    return m_AdultIsSet;
}

void GetOfferDTO::unsetAdult()
{
    m_AdultIsSet = false;
}
std::shared_ptr<AgeDTO> GetOfferDTO::getAge() const
{
    return m_Age;
}

void GetOfferDTO::setAge(const std::shared_ptr<AgeDTO>& value)
{
    m_Age = value;
    m_AgeIsSet = true;
}

bool GetOfferDTO::ageIsSet() const
{
    return m_AgeIsSet;
}

void GetOfferDTO::unsetAge()
{
    m_AgeIsSet = false;
}
std::vector<std::shared_ptr<OfferParamDTO>>& GetOfferDTO::getParams()
{
    return m_Params;
}

void GetOfferDTO::setParams(const std::vector<std::shared_ptr<OfferParamDTO>>& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}

bool GetOfferDTO::paramsIsSet() const
{
    return m_ParamsIsSet;
}

void GetOfferDTO::unsetParams()
{
    m_ParamsIsSet = false;
}
std::shared_ptr<GetPriceWithDiscountDTO> GetOfferDTO::getBasicPrice() const
{
    return m_BasicPrice;
}

void GetOfferDTO::setBasicPrice(const std::shared_ptr<GetPriceWithDiscountDTO>& value)
{
    m_BasicPrice = value;
    m_BasicPriceIsSet = true;
}

bool GetOfferDTO::basicPriceIsSet() const
{
    return m_BasicPriceIsSet;
}

void GetOfferDTO::unsetBasicPrice()
{
    m_BasicPriceIsSet = false;
}
std::shared_ptr<GetPriceDTO> GetOfferDTO::getPurchasePrice() const
{
    return m_PurchasePrice;
}

void GetOfferDTO::setPurchasePrice(const std::shared_ptr<GetPriceDTO>& value)
{
    m_PurchasePrice = value;
    m_PurchasePriceIsSet = true;
}

bool GetOfferDTO::purchasePriceIsSet() const
{
    return m_PurchasePriceIsSet;
}

void GetOfferDTO::unsetPurchasePrice()
{
    m_PurchasePriceIsSet = false;
}
std::shared_ptr<GetPriceDTO> GetOfferDTO::getAdditionalExpenses() const
{
    return m_AdditionalExpenses;
}

void GetOfferDTO::setAdditionalExpenses(const std::shared_ptr<GetPriceDTO>& value)
{
    m_AdditionalExpenses = value;
    m_AdditionalExpensesIsSet = true;
}

bool GetOfferDTO::additionalExpensesIsSet() const
{
    return m_AdditionalExpensesIsSet;
}

void GetOfferDTO::unsetAdditionalExpenses()
{
    m_AdditionalExpensesIsSet = false;
}
std::shared_ptr<GetPriceDTO> GetOfferDTO::getCofinancePrice() const
{
    return m_CofinancePrice;
}

void GetOfferDTO::setCofinancePrice(const std::shared_ptr<GetPriceDTO>& value)
{
    m_CofinancePrice = value;
    m_CofinancePriceIsSet = true;
}

bool GetOfferDTO::cofinancePriceIsSet() const
{
    return m_CofinancePriceIsSet;
}

void GetOfferDTO::unsetCofinancePrice()
{
    m_CofinancePriceIsSet = false;
}
std::shared_ptr<OfferCardStatusType> GetOfferDTO::getCardStatus() const
{
    return m_CardStatus;
}

void GetOfferDTO::setCardStatus(const std::shared_ptr<OfferCardStatusType>& value)
{
    m_CardStatus = value;
    m_CardStatusIsSet = true;
}

bool GetOfferDTO::cardStatusIsSet() const
{
    return m_CardStatusIsSet;
}

void GetOfferDTO::unsetCardStatus()
{
    m_CardStatusIsSet = false;
}
std::vector<std::shared_ptr<OfferCampaignStatusDTO>>& GetOfferDTO::getCampaigns()
{
    return m_Campaigns;
}

void GetOfferDTO::setCampaigns(const std::vector<std::shared_ptr<OfferCampaignStatusDTO>>& value)
{
    m_Campaigns = value;
    m_CampaignsIsSet = true;
}

bool GetOfferDTO::campaignsIsSet() const
{
    return m_CampaignsIsSet;
}

void GetOfferDTO::unsetCampaigns()
{
    m_CampaignsIsSet = false;
}
std::vector<std::shared_ptr<OfferSellingProgramDTO>>& GetOfferDTO::getSellingPrograms()
{
    return m_SellingPrograms;
}

void GetOfferDTO::setSellingPrograms(const std::vector<std::shared_ptr<OfferSellingProgramDTO>>& value)
{
    m_SellingPrograms = value;
    m_SellingProgramsIsSet = true;
}

bool GetOfferDTO::sellingProgramsIsSet() const
{
    return m_SellingProgramsIsSet;
}

void GetOfferDTO::unsetSellingPrograms()
{
    m_SellingProgramsIsSet = false;
}
bool GetOfferDTO::isArchived() const
{
    return m_Archived;
}

void GetOfferDTO::setArchived(bool value)
{
    m_Archived = value;
    m_ArchivedIsSet = true;
}

bool GetOfferDTO::archivedIsSet() const
{
    return m_ArchivedIsSet;
}

void GetOfferDTO::unsetArchived()
{
    m_ArchivedIsSet = false;
}
}
}
}
}


