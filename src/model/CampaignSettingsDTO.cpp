/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CampaignSettingsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CampaignSettingsDTO::CampaignSettingsDTO()
{
    m_CountryRegion = 0L;
    m_CountryRegionIsSet = false;
    m_ShopName = utility::conversions::to_string_t("");
    m_ShopNameIsSet = false;
    m_ShowInContext = false;
    m_ShowInContextIsSet = false;
    m_ShowInPremium = false;
    m_ShowInPremiumIsSet = false;
    m_UseOpenStat = false;
    m_UseOpenStatIsSet = false;
    m_LocalRegionIsSet = false;
}

CampaignSettingsDTO::~CampaignSettingsDTO()
{
}

void CampaignSettingsDTO::validate()
{
    // TODO: implement validation
}

web::json::value CampaignSettingsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryRegionIsSet)
    {
        val[utility::conversions::to_string_t(U("countryRegion"))] = ModelBase::toJson(m_CountryRegion);
    }
    if(m_ShopNameIsSet)
    {
        val[utility::conversions::to_string_t(U("shopName"))] = ModelBase::toJson(m_ShopName);
    }
    if(m_ShowInContextIsSet)
    {
        val[utility::conversions::to_string_t(U("showInContext"))] = ModelBase::toJson(m_ShowInContext);
    }
    if(m_ShowInPremiumIsSet)
    {
        val[utility::conversions::to_string_t(U("showInPremium"))] = ModelBase::toJson(m_ShowInPremium);
    }
    if(m_UseOpenStatIsSet)
    {
        val[utility::conversions::to_string_t(U("useOpenStat"))] = ModelBase::toJson(m_UseOpenStat);
    }
    if(m_LocalRegionIsSet)
    {
        val[utility::conversions::to_string_t(U("localRegion"))] = ModelBase::toJson(m_LocalRegion);
    }

    return val;
}

bool CampaignSettingsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("countryRegion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryRegion")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCountryRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountryRegion);
            setCountryRegion(refVal_setCountryRegion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopName);
            setShopName(refVal_setShopName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("showInContext"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("showInContext")));
        if(!fieldValue.is_null())
        {
            bool refVal_setShowInContext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShowInContext);
            setShowInContext(refVal_setShowInContext);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("showInPremium"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("showInPremium")));
        if(!fieldValue.is_null())
        {
            bool refVal_setShowInPremium;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShowInPremium);
            setShowInPremium(refVal_setShowInPremium);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useOpenStat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useOpenStat")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseOpenStat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseOpenStat);
            setUseOpenStat(refVal_setUseOpenStat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("localRegion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("localRegion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CampaignSettingsLocalRegionDTO> refVal_setLocalRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocalRegion);
            setLocalRegion(refVal_setLocalRegion);
        }
    }
    return ok;
}

void CampaignSettingsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountryRegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryRegion")), m_CountryRegion));
    }
    if(m_ShopNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopName")), m_ShopName));
    }
    if(m_ShowInContextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("showInContext")), m_ShowInContext));
    }
    if(m_ShowInPremiumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("showInPremium")), m_ShowInPremium));
    }
    if(m_UseOpenStatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useOpenStat")), m_UseOpenStat));
    }
    if(m_LocalRegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("localRegion")), m_LocalRegion));
    }
}

bool CampaignSettingsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("countryRegion"))))
    {
        int64_t refVal_setCountryRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryRegion"))), refVal_setCountryRegion );
        setCountryRegion(refVal_setCountryRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopName"))))
    {
        utility::string_t refVal_setShopName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopName"))), refVal_setShopName );
        setShopName(refVal_setShopName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("showInContext"))))
    {
        bool refVal_setShowInContext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("showInContext"))), refVal_setShowInContext );
        setShowInContext(refVal_setShowInContext);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("showInPremium"))))
    {
        bool refVal_setShowInPremium;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("showInPremium"))), refVal_setShowInPremium );
        setShowInPremium(refVal_setShowInPremium);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useOpenStat"))))
    {
        bool refVal_setUseOpenStat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useOpenStat"))), refVal_setUseOpenStat );
        setUseOpenStat(refVal_setUseOpenStat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("localRegion"))))
    {
        std::shared_ptr<CampaignSettingsLocalRegionDTO> refVal_setLocalRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("localRegion"))), refVal_setLocalRegion );
        setLocalRegion(refVal_setLocalRegion);
    }
    return ok;
}

int64_t CampaignSettingsDTO::getCountryRegion() const
{
    return m_CountryRegion;
}

void CampaignSettingsDTO::setCountryRegion(int64_t value)
{
    m_CountryRegion = value;
    m_CountryRegionIsSet = true;
}

bool CampaignSettingsDTO::countryRegionIsSet() const
{
    return m_CountryRegionIsSet;
}

void CampaignSettingsDTO::unsetCountryRegion()
{
    m_CountryRegionIsSet = false;
}
utility::string_t CampaignSettingsDTO::getShopName() const
{
    return m_ShopName;
}

void CampaignSettingsDTO::setShopName(const utility::string_t& value)
{
    m_ShopName = value;
    m_ShopNameIsSet = true;
}

bool CampaignSettingsDTO::shopNameIsSet() const
{
    return m_ShopNameIsSet;
}

void CampaignSettingsDTO::unsetShopName()
{
    m_ShopNameIsSet = false;
}
bool CampaignSettingsDTO::isShowInContext() const
{
    return m_ShowInContext;
}

void CampaignSettingsDTO::setShowInContext(bool value)
{
    m_ShowInContext = value;
    m_ShowInContextIsSet = true;
}

bool CampaignSettingsDTO::showInContextIsSet() const
{
    return m_ShowInContextIsSet;
}

void CampaignSettingsDTO::unsetShowInContext()
{
    m_ShowInContextIsSet = false;
}
bool CampaignSettingsDTO::isShowInPremium() const
{
    return m_ShowInPremium;
}

void CampaignSettingsDTO::setShowInPremium(bool value)
{
    m_ShowInPremium = value;
    m_ShowInPremiumIsSet = true;
}

bool CampaignSettingsDTO::showInPremiumIsSet() const
{
    return m_ShowInPremiumIsSet;
}

void CampaignSettingsDTO::unsetShowInPremium()
{
    m_ShowInPremiumIsSet = false;
}
bool CampaignSettingsDTO::isUseOpenStat() const
{
    return m_UseOpenStat;
}

void CampaignSettingsDTO::setUseOpenStat(bool value)
{
    m_UseOpenStat = value;
    m_UseOpenStatIsSet = true;
}

bool CampaignSettingsDTO::useOpenStatIsSet() const
{
    return m_UseOpenStatIsSet;
}

void CampaignSettingsDTO::unsetUseOpenStat()
{
    m_UseOpenStatIsSet = false;
}
std::shared_ptr<CampaignSettingsLocalRegionDTO> CampaignSettingsDTO::getLocalRegion() const
{
    return m_LocalRegion;
}

void CampaignSettingsDTO::setLocalRegion(const std::shared_ptr<CampaignSettingsLocalRegionDTO>& value)
{
    m_LocalRegion = value;
    m_LocalRegionIsSet = true;
}

bool CampaignSettingsDTO::localRegionIsSet() const
{
    return m_LocalRegionIsSet;
}

void CampaignSettingsDTO::unsetLocalRegion()
{
    m_LocalRegionIsSet = false;
}
}
}
}
}


