/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/WarehouseDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



WarehouseDTO::WarehouseDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_Express = false;
    m_ExpressIsSet = false;
    m_AddressIsSet = false;
}

WarehouseDTO::~WarehouseDTO()
{
}

void WarehouseDTO::validate()
{
    // TODO: implement validation
}

web::json::value WarehouseDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_ExpressIsSet)
    {
        val[utility::conversions::to_string_t(U("express"))] = ModelBase::toJson(m_Express);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }

    return val;
}

bool WarehouseDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("express"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("express")));
        if(!fieldValue.is_null())
        {
            bool refVal_setExpress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpress);
            setExpress(refVal_setExpress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WarehouseAddressDTO> refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    return ok;
}

void WarehouseDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_ExpressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("express")), m_Express));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
}

bool WarehouseDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("express"))))
    {
        bool refVal_setExpress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("express"))), refVal_setExpress );
        setExpress(refVal_setExpress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        std::shared_ptr<WarehouseAddressDTO> refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    return ok;
}

int64_t WarehouseDTO::getId() const
{
    return m_Id;
}

void WarehouseDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool WarehouseDTO::idIsSet() const
{
    return m_IdIsSet;
}

void WarehouseDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t WarehouseDTO::getName() const
{
    return m_Name;
}

void WarehouseDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool WarehouseDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void WarehouseDTO::unsetName()
{
    m_NameIsSet = false;
}
int64_t WarehouseDTO::getCampaignId() const
{
    return m_CampaignId;
}

void WarehouseDTO::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool WarehouseDTO::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void WarehouseDTO::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
bool WarehouseDTO::isExpress() const
{
    return m_Express;
}

void WarehouseDTO::setExpress(bool value)
{
    m_Express = value;
    m_ExpressIsSet = true;
}

bool WarehouseDTO::expressIsSet() const
{
    return m_ExpressIsSet;
}

void WarehouseDTO::unsetExpress()
{
    m_ExpressIsSet = false;
}
std::shared_ptr<WarehouseAddressDTO> WarehouseDTO::getAddress() const
{
    return m_Address;
}

void WarehouseDTO::setAddress(const std::shared_ptr<WarehouseAddressDTO>& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool WarehouseDTO::addressIsSet() const
{
    return m_AddressIsSet;
}

void WarehouseDTO::unsetAddress()
{
    m_AddressIsSet = false;
}
}
}
}
}


