/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CampaignSettingsTimePeriodDTO from './CampaignSettingsTimePeriodDTO';

/**
 * The CampaignSettingsScheduleDTO model module.
 * @module model/CampaignSettingsScheduleDTO
 * @version LATEST
 */
class CampaignSettingsScheduleDTO {
    /**
     * Constructs a new <code>CampaignSettingsScheduleDTO</code>.
     * Расписание работы службы доставки в своем регионе.
     * @alias module:model/CampaignSettingsScheduleDTO
     * @param customHolidays {Array.<String>} Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
     * @param customWorkingDays {Array.<String>} Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
     * @param totalHolidays {Array.<String>} Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
     * @param weeklyHolidays {Array.<Number>} Список выходных дней недели и государственных праздников.
     */
    constructor(customHolidays, customWorkingDays, totalHolidays, weeklyHolidays) { 
        
        CampaignSettingsScheduleDTO.initialize(this, customHolidays, customWorkingDays, totalHolidays, weeklyHolidays);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customHolidays, customWorkingDays, totalHolidays, weeklyHolidays) { 
        obj['customHolidays'] = customHolidays;
        obj['customWorkingDays'] = customWorkingDays;
        obj['totalHolidays'] = totalHolidays;
        obj['weeklyHolidays'] = weeklyHolidays;
    }

    /**
     * Constructs a <code>CampaignSettingsScheduleDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CampaignSettingsScheduleDTO} obj Optional instance to populate.
     * @return {module:model/CampaignSettingsScheduleDTO} The populated <code>CampaignSettingsScheduleDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CampaignSettingsScheduleDTO();

            if (data.hasOwnProperty('availableOnHolidays')) {
                obj['availableOnHolidays'] = ApiClient.convertToType(data['availableOnHolidays'], 'Boolean');
            }
            if (data.hasOwnProperty('customHolidays')) {
                obj['customHolidays'] = ApiClient.convertToType(data['customHolidays'], ['String']);
            }
            if (data.hasOwnProperty('customWorkingDays')) {
                obj['customWorkingDays'] = ApiClient.convertToType(data['customWorkingDays'], ['String']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = CampaignSettingsTimePeriodDTO.constructFromObject(data['period']);
            }
            if (data.hasOwnProperty('totalHolidays')) {
                obj['totalHolidays'] = ApiClient.convertToType(data['totalHolidays'], ['String']);
            }
            if (data.hasOwnProperty('weeklyHolidays')) {
                obj['weeklyHolidays'] = ApiClient.convertToType(data['weeklyHolidays'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CampaignSettingsScheduleDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CampaignSettingsScheduleDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CampaignSettingsScheduleDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customHolidays'])) {
            throw new Error("Expected the field `customHolidays` to be an array in the JSON data but got " + data['customHolidays']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customWorkingDays'])) {
            throw new Error("Expected the field `customWorkingDays` to be an array in the JSON data but got " + data['customWorkingDays']);
        }
        // validate the optional field `period`
        if (data['period']) { // data not null
          CampaignSettingsTimePeriodDTO.validateJSON(data['period']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['totalHolidays'])) {
            throw new Error("Expected the field `totalHolidays` to be an array in the JSON data but got " + data['totalHolidays']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['weeklyHolidays'])) {
            throw new Error("Expected the field `weeklyHolidays` to be an array in the JSON data but got " + data['weeklyHolidays']);
        }

        return true;
    }


}

CampaignSettingsScheduleDTO.RequiredProperties = ["customHolidays", "customWorkingDays", "totalHolidays", "weeklyHolidays"];

/**
 * Признак работы службы доставки в государственные праздники. Возможные значения. * `false` — служба доставки не работает в праздничные дни. * `true` — служба доставки работает в праздничные дни. 
 * @member {Boolean} availableOnHolidays
 */
CampaignSettingsScheduleDTO.prototype['availableOnHolidays'] = undefined;

/**
 * Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
 * @member {Array.<String>} customHolidays
 */
CampaignSettingsScheduleDTO.prototype['customHolidays'] = undefined;

/**
 * Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
 * @member {Array.<String>} customWorkingDays
 */
CampaignSettingsScheduleDTO.prototype['customWorkingDays'] = undefined;

/**
 * @member {module:model/CampaignSettingsTimePeriodDTO} period
 */
CampaignSettingsScheduleDTO.prototype['period'] = undefined;

/**
 * Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
 * @member {Array.<String>} totalHolidays
 */
CampaignSettingsScheduleDTO.prototype['totalHolidays'] = undefined;

/**
 * Список выходных дней недели и государственных праздников.
 * @member {Array.<Number>} weeklyHolidays
 */
CampaignSettingsScheduleDTO.prototype['weeklyHolidays'] = undefined;






export default CampaignSettingsScheduleDTO;

