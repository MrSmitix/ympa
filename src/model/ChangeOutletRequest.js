/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutletAddressDTO from './OutletAddressDTO';
import OutletDTO from './OutletDTO';
import OutletDeliveryRuleDTO from './OutletDeliveryRuleDTO';
import OutletType from './OutletType';
import OutletVisibilityType from './OutletVisibilityType';
import OutletWorkingScheduleDTO from './OutletWorkingScheduleDTO';

/**
 * The ChangeOutletRequest model module.
 * @module model/ChangeOutletRequest
 * @version LATEST
 */
class ChangeOutletRequest {
    /**
     * Constructs a new <code>ChangeOutletRequest</code>.
     * @alias module:model/ChangeOutletRequest
     * @implements module:model/OutletDTO
     * @param name {String} Название точки продаж. 
     * @param type {module:model/OutletType} 
     * @param address {module:model/OutletAddressDTO} 
     * @param phones {Array.<String>} Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
     * @param workingSchedule {module:model/OutletWorkingScheduleDTO} 
     */
    constructor(name, type, address, phones, workingSchedule) { 
        OutletDTO.initialize(this, name, type, address, phones, workingSchedule);
        ChangeOutletRequest.initialize(this, name, type, address, phones, workingSchedule);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type, address, phones, workingSchedule) { 
        obj['name'] = name;
        obj['type'] = type;
        obj['address'] = address;
        obj['phones'] = phones;
        obj['workingSchedule'] = workingSchedule;
    }

    /**
     * Constructs a <code>ChangeOutletRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeOutletRequest} obj Optional instance to populate.
     * @return {module:model/ChangeOutletRequest} The populated <code>ChangeOutletRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeOutletRequest();
            OutletDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = OutletType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('coords')) {
                obj['coords'] = ApiClient.convertToType(data['coords'], 'String');
            }
            if (data.hasOwnProperty('isMain')) {
                obj['isMain'] = ApiClient.convertToType(data['isMain'], 'Boolean');
            }
            if (data.hasOwnProperty('shopOutletCode')) {
                obj['shopOutletCode'] = ApiClient.convertToType(data['shopOutletCode'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = OutletVisibilityType.constructFromObject(data['visibility']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = OutletAddressDTO.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('phones')) {
                obj['phones'] = ApiClient.convertToType(data['phones'], ['String']);
            }
            if (data.hasOwnProperty('workingSchedule')) {
                obj['workingSchedule'] = OutletWorkingScheduleDTO.constructFromObject(data['workingSchedule']);
            }
            if (data.hasOwnProperty('deliveryRules')) {
                obj['deliveryRules'] = ApiClient.convertToType(data['deliveryRules'], [OutletDeliveryRuleDTO]);
            }
            if (data.hasOwnProperty('storagePeriod')) {
                obj['storagePeriod'] = ApiClient.convertToType(data['storagePeriod'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeOutletRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeOutletRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChangeOutletRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['coords'] && !(typeof data['coords'] === 'string' || data['coords'] instanceof String)) {
            throw new Error("Expected the field `coords` to be a primitive type in the JSON string but got " + data['coords']);
        }
        // ensure the json data is a string
        if (data['shopOutletCode'] && !(typeof data['shopOutletCode'] === 'string' || data['shopOutletCode'] instanceof String)) {
            throw new Error("Expected the field `shopOutletCode` to be a primitive type in the JSON string but got " + data['shopOutletCode']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          OutletAddressDTO.validateJSON(data['address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phones'])) {
            throw new Error("Expected the field `phones` to be an array in the JSON data but got " + data['phones']);
        }
        // validate the optional field `workingSchedule`
        if (data['workingSchedule']) { // data not null
          OutletWorkingScheduleDTO.validateJSON(data['workingSchedule']);
        }
        if (data['deliveryRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deliveryRules'])) {
                throw new Error("Expected the field `deliveryRules` to be an array in the JSON data but got " + data['deliveryRules']);
            }
            // validate the optional field `deliveryRules` (array)
            for (const item of data['deliveryRules']) {
                OutletDeliveryRuleDTO.validateJSON(item);
            };
        }

        return true;
    }


}

ChangeOutletRequest.RequiredProperties = ["name", "type", "address", "phones", "workingSchedule"];

/**
 * Название точки продаж. 
 * @member {String} name
 */
ChangeOutletRequest.prototype['name'] = undefined;

/**
 * @member {module:model/OutletType} type
 */
ChangeOutletRequest.prototype['type'] = undefined;

/**
 * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
 * @member {String} coords
 */
ChangeOutletRequest.prototype['coords'] = undefined;

/**
 * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
 * @member {Boolean} isMain
 */
ChangeOutletRequest.prototype['isMain'] = undefined;

/**
 * Идентификатор точки продаж, присвоенный магазином.
 * @member {String} shopOutletCode
 */
ChangeOutletRequest.prototype['shopOutletCode'] = undefined;

/**
 * @member {module:model/OutletVisibilityType} visibility
 */
ChangeOutletRequest.prototype['visibility'] = undefined;

/**
 * @member {module:model/OutletAddressDTO} address
 */
ChangeOutletRequest.prototype['address'] = undefined;

/**
 * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
 * @member {Array.<String>} phones
 */
ChangeOutletRequest.prototype['phones'] = undefined;

/**
 * @member {module:model/OutletWorkingScheduleDTO} workingSchedule
 */
ChangeOutletRequest.prototype['workingSchedule'] = undefined;

/**
 * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
 * @member {Array.<module:model/OutletDeliveryRuleDTO>} deliveryRules
 */
ChangeOutletRequest.prototype['deliveryRules'] = undefined;

/**
 * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
 * @member {Number} storagePeriod
 */
ChangeOutletRequest.prototype['storagePeriod'] = undefined;


// Implement OutletDTO interface:
/**
 * Название точки продаж. 
 * @member {String} name
 */
OutletDTO.prototype['name'] = undefined;
/**
 * @member {module:model/OutletType} type
 */
OutletDTO.prototype['type'] = undefined;
/**
 * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
 * @member {String} coords
 */
OutletDTO.prototype['coords'] = undefined;
/**
 * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
 * @member {Boolean} isMain
 */
OutletDTO.prototype['isMain'] = undefined;
/**
 * Идентификатор точки продаж, присвоенный магазином.
 * @member {String} shopOutletCode
 */
OutletDTO.prototype['shopOutletCode'] = undefined;
/**
 * @member {module:model/OutletVisibilityType} visibility
 */
OutletDTO.prototype['visibility'] = undefined;
/**
 * @member {module:model/OutletAddressDTO} address
 */
OutletDTO.prototype['address'] = undefined;
/**
 * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
 * @member {Array.<String>} phones
 */
OutletDTO.prototype['phones'] = undefined;
/**
 * @member {module:model/OutletWorkingScheduleDTO} workingSchedule
 */
OutletDTO.prototype['workingSchedule'] = undefined;
/**
 * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
 * @member {Array.<module:model/OutletDeliveryRuleDTO>} deliveryRules
 */
OutletDTO.prototype['deliveryRules'] = undefined;
/**
 * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
 * @member {Number} storagePeriod
 */
OutletDTO.prototype['storagePeriod'] = undefined;




export default ChangeOutletRequest;

