/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/SetReturnDecisionRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SetReturnDecisionRequest::SetReturnDecisionRequest()
{
    m_ReturnItemId = 0L;
    m_ReturnItemIdIsSet = false;
    m_DecisionTypeIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
}

SetReturnDecisionRequest::~SetReturnDecisionRequest()
{
}

void SetReturnDecisionRequest::validate()
{
    // TODO: implement validation
}

web::json::value SetReturnDecisionRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReturnItemIdIsSet)
    {
        val[utility::conversions::to_string_t(U("returnItemId"))] = ModelBase::toJson(m_ReturnItemId);
    }
    if(m_DecisionTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("decisionType"))] = ModelBase::toJson(m_DecisionType);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }

    return val;
}

bool SetReturnDecisionRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("returnItemId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("returnItemId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setReturnItemId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReturnItemId);
            setReturnItemId(refVal_setReturnItemId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("decisionType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("decisionType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnRequestDecisionType> refVal_setDecisionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDecisionType);
            setDecisionType(refVal_setDecisionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    return ok;
}

void SetReturnDecisionRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReturnItemIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("returnItemId")), m_ReturnItemId));
    }
    if(m_DecisionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("decisionType")), m_DecisionType));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
}

bool SetReturnDecisionRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("returnItemId"))))
    {
        int64_t refVal_setReturnItemId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("returnItemId"))), refVal_setReturnItemId );
        setReturnItemId(refVal_setReturnItemId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("decisionType"))))
    {
        std::shared_ptr<ReturnRequestDecisionType> refVal_setDecisionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("decisionType"))), refVal_setDecisionType );
        setDecisionType(refVal_setDecisionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    return ok;
}

int64_t SetReturnDecisionRequest::getReturnItemId() const
{
    return m_ReturnItemId;
}

void SetReturnDecisionRequest::setReturnItemId(int64_t value)
{
    m_ReturnItemId = value;
    m_ReturnItemIdIsSet = true;
}

bool SetReturnDecisionRequest::returnItemIdIsSet() const
{
    return m_ReturnItemIdIsSet;
}

void SetReturnDecisionRequest::unsetReturnItemId()
{
    m_ReturnItemIdIsSet = false;
}
std::shared_ptr<ReturnRequestDecisionType> SetReturnDecisionRequest::getDecisionType() const
{
    return m_DecisionType;
}

void SetReturnDecisionRequest::setDecisionType(const std::shared_ptr<ReturnRequestDecisionType>& value)
{
    m_DecisionType = value;
    m_DecisionTypeIsSet = true;
}

bool SetReturnDecisionRequest::decisionTypeIsSet() const
{
    return m_DecisionTypeIsSet;
}

void SetReturnDecisionRequest::unsetDecisionType()
{
    m_DecisionTypeIsSet = false;
}
utility::string_t SetReturnDecisionRequest::getComment() const
{
    return m_Comment;
}

void SetReturnDecisionRequest::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool SetReturnDecisionRequest::commentIsSet() const
{
    return m_CommentIsSet;
}

void SetReturnDecisionRequest::unsetComment()
{
    m_CommentIsSet = false;
}
}
}
}
}


