/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetPromoPromocodeInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetPromoPromocodeInfoDTO::GetPromoPromocodeInfoDTO()
{
    m_Promocode = utility::conversions::to_string_t("");
    m_PromocodeIsSet = false;
    m_Discount = 0;
    m_DiscountIsSet = false;
}

GetPromoPromocodeInfoDTO::~GetPromoPromocodeInfoDTO()
{
}

void GetPromoPromocodeInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value GetPromoPromocodeInfoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PromocodeIsSet)
    {
        val[utility::conversions::to_string_t(U("promocode"))] = ModelBase::toJson(m_Promocode);
    }
    if(m_DiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("discount"))] = ModelBase::toJson(m_Discount);
    }

    return val;
}

bool GetPromoPromocodeInfoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("promocode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("promocode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPromocode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromocode);
            setPromocode(refVal_setPromocode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("discount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("discount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiscount);
            setDiscount(refVal_setDiscount);
        }
    }
    return ok;
}

void GetPromoPromocodeInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PromocodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("promocode")), m_Promocode));
    }
    if(m_DiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("discount")), m_Discount));
    }
}

bool GetPromoPromocodeInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("promocode"))))
    {
        utility::string_t refVal_setPromocode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("promocode"))), refVal_setPromocode );
        setPromocode(refVal_setPromocode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("discount"))))
    {
        int32_t refVal_setDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("discount"))), refVal_setDiscount );
        setDiscount(refVal_setDiscount);
    }
    return ok;
}

utility::string_t GetPromoPromocodeInfoDTO::getPromocode() const
{
    return m_Promocode;
}

void GetPromoPromocodeInfoDTO::setPromocode(const utility::string_t& value)
{
    m_Promocode = value;
    m_PromocodeIsSet = true;
}

bool GetPromoPromocodeInfoDTO::promocodeIsSet() const
{
    return m_PromocodeIsSet;
}

void GetPromoPromocodeInfoDTO::unsetPromocode()
{
    m_PromocodeIsSet = false;
}
int32_t GetPromoPromocodeInfoDTO::getDiscount() const
{
    return m_Discount;
}

void GetPromoPromocodeInfoDTO::setDiscount(int32_t value)
{
    m_Discount = value;
    m_DiscountIsSet = true;
}

bool GetPromoPromocodeInfoDTO::discountIsSet() const
{
    return m_DiscountIsSet;
}

void GetPromoPromocodeInfoDTO::unsetDiscount()
{
    m_DiscountIsSet = false;
}
}
}
}
}


