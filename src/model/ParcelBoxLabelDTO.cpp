/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ParcelBoxLabelDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ParcelBoxLabelDTO::ParcelBoxLabelDTO()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_SupplierName = utility::conversions::to_string_t("");
    m_SupplierNameIsSet = false;
    m_DeliveryServiceName = utility::conversions::to_string_t("");
    m_DeliveryServiceNameIsSet = false;
    m_OrderId = 0L;
    m_OrderIdIsSet = false;
    m_OrderNum = utility::conversions::to_string_t("");
    m_OrderNumIsSet = false;
    m_RecipientName = utility::conversions::to_string_t("");
    m_RecipientNameIsSet = false;
    m_BoxId = 0L;
    m_BoxIdIsSet = false;
    m_FulfilmentId = utility::conversions::to_string_t("");
    m_FulfilmentIdIsSet = false;
    m_Place = utility::conversions::to_string_t("");
    m_PlaceIsSet = false;
    m_Weight = utility::conversions::to_string_t("");
    m_WeightIsSet = false;
    m_DeliveryServiceId = utility::conversions::to_string_t("");
    m_DeliveryServiceIdIsSet = false;
    m_DeliveryAddress = utility::conversions::to_string_t("");
    m_DeliveryAddressIsSet = false;
    m_ShipmentDate = utility::conversions::to_string_t("");
    m_ShipmentDateIsSet = false;
}

ParcelBoxLabelDTO::~ParcelBoxLabelDTO()
{
}

void ParcelBoxLabelDTO::validate()
{
    // TODO: implement validation
}

web::json::value ParcelBoxLabelDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_SupplierNameIsSet)
    {
        val[utility::conversions::to_string_t(U("supplierName"))] = ModelBase::toJson(m_SupplierName);
    }
    if(m_DeliveryServiceNameIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryServiceName"))] = ModelBase::toJson(m_DeliveryServiceName);
    }
    if(m_OrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("orderId"))] = ModelBase::toJson(m_OrderId);
    }
    if(m_OrderNumIsSet)
    {
        val[utility::conversions::to_string_t(U("orderNum"))] = ModelBase::toJson(m_OrderNum);
    }
    if(m_RecipientNameIsSet)
    {
        val[utility::conversions::to_string_t(U("recipientName"))] = ModelBase::toJson(m_RecipientName);
    }
    if(m_BoxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("boxId"))] = ModelBase::toJson(m_BoxId);
    }
    if(m_FulfilmentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("fulfilmentId"))] = ModelBase::toJson(m_FulfilmentId);
    }
    if(m_PlaceIsSet)
    {
        val[utility::conversions::to_string_t(U("place"))] = ModelBase::toJson(m_Place);
    }
    if(m_WeightIsSet)
    {
        val[utility::conversions::to_string_t(U("weight"))] = ModelBase::toJson(m_Weight);
    }
    if(m_DeliveryServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryServiceId"))] = ModelBase::toJson(m_DeliveryServiceId);
    }
    if(m_DeliveryAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryAddress"))] = ModelBase::toJson(m_DeliveryAddress);
    }
    if(m_ShipmentDateIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentDate"))] = ModelBase::toJson(m_ShipmentDate);
    }

    return val;
}

bool ParcelBoxLabelDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supplierName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supplierName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSupplierName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupplierName);
            setSupplierName(refVal_setSupplierName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryServiceName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryServiceName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeliveryServiceName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryServiceName);
            setDeliveryServiceName(refVal_setDeliveryServiceName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderId);
            setOrderId(refVal_setOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderNum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderNum")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrderNum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderNum);
            setOrderNum(refVal_setOrderNum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipientName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipientName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecipientName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipientName);
            setRecipientName(refVal_setRecipientName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boxId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBoxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoxId);
            setBoxId(refVal_setBoxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fulfilmentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fulfilmentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFulfilmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFulfilmentId);
            setFulfilmentId(refVal_setFulfilmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("place"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("place")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlace;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlace);
            setPlace(refVal_setPlace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weight")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeight);
            setWeight(refVal_setWeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryServiceId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeliveryServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryServiceId);
            setDeliveryServiceId(refVal_setDeliveryServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeliveryAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryAddress);
            setDeliveryAddress(refVal_setDeliveryAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipmentDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentDate);
            setShipmentDate(refVal_setShipmentDate);
        }
    }
    return ok;
}

void ParcelBoxLabelDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_SupplierNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supplierName")), m_SupplierName));
    }
    if(m_DeliveryServiceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryServiceName")), m_DeliveryServiceName));
    }
    if(m_OrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderId")), m_OrderId));
    }
    if(m_OrderNumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderNum")), m_OrderNum));
    }
    if(m_RecipientNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipientName")), m_RecipientName));
    }
    if(m_BoxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boxId")), m_BoxId));
    }
    if(m_FulfilmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fulfilmentId")), m_FulfilmentId));
    }
    if(m_PlaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("place")), m_Place));
    }
    if(m_WeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weight")), m_Weight));
    }
    if(m_DeliveryServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryServiceId")), m_DeliveryServiceId));
    }
    if(m_DeliveryAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryAddress")), m_DeliveryAddress));
    }
    if(m_ShipmentDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentDate")), m_ShipmentDate));
    }
}

bool ParcelBoxLabelDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supplierName"))))
    {
        utility::string_t refVal_setSupplierName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supplierName"))), refVal_setSupplierName );
        setSupplierName(refVal_setSupplierName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryServiceName"))))
    {
        utility::string_t refVal_setDeliveryServiceName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryServiceName"))), refVal_setDeliveryServiceName );
        setDeliveryServiceName(refVal_setDeliveryServiceName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderId"))))
    {
        int64_t refVal_setOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderId"))), refVal_setOrderId );
        setOrderId(refVal_setOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderNum"))))
    {
        utility::string_t refVal_setOrderNum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderNum"))), refVal_setOrderNum );
        setOrderNum(refVal_setOrderNum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipientName"))))
    {
        utility::string_t refVal_setRecipientName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipientName"))), refVal_setRecipientName );
        setRecipientName(refVal_setRecipientName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boxId"))))
    {
        int64_t refVal_setBoxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boxId"))), refVal_setBoxId );
        setBoxId(refVal_setBoxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fulfilmentId"))))
    {
        utility::string_t refVal_setFulfilmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fulfilmentId"))), refVal_setFulfilmentId );
        setFulfilmentId(refVal_setFulfilmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("place"))))
    {
        utility::string_t refVal_setPlace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("place"))), refVal_setPlace );
        setPlace(refVal_setPlace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weight"))))
    {
        utility::string_t refVal_setWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weight"))), refVal_setWeight );
        setWeight(refVal_setWeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        utility::string_t refVal_setDeliveryServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryServiceId"))), refVal_setDeliveryServiceId );
        setDeliveryServiceId(refVal_setDeliveryServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryAddress"))))
    {
        utility::string_t refVal_setDeliveryAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryAddress"))), refVal_setDeliveryAddress );
        setDeliveryAddress(refVal_setDeliveryAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentDate"))))
    {
        utility::string_t refVal_setShipmentDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentDate"))), refVal_setShipmentDate );
        setShipmentDate(refVal_setShipmentDate);
    }
    return ok;
}

utility::string_t ParcelBoxLabelDTO::getUrl() const
{
    return m_Url;
}

void ParcelBoxLabelDTO::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool ParcelBoxLabelDTO::urlIsSet() const
{
    return m_UrlIsSet;
}

void ParcelBoxLabelDTO::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getSupplierName() const
{
    return m_SupplierName;
}

void ParcelBoxLabelDTO::setSupplierName(const utility::string_t& value)
{
    m_SupplierName = value;
    m_SupplierNameIsSet = true;
}

bool ParcelBoxLabelDTO::supplierNameIsSet() const
{
    return m_SupplierNameIsSet;
}

void ParcelBoxLabelDTO::unsetSupplierName()
{
    m_SupplierNameIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getDeliveryServiceName() const
{
    return m_DeliveryServiceName;
}

void ParcelBoxLabelDTO::setDeliveryServiceName(const utility::string_t& value)
{
    m_DeliveryServiceName = value;
    m_DeliveryServiceNameIsSet = true;
}

bool ParcelBoxLabelDTO::deliveryServiceNameIsSet() const
{
    return m_DeliveryServiceNameIsSet;
}

void ParcelBoxLabelDTO::unsetDeliveryServiceName()
{
    m_DeliveryServiceNameIsSet = false;
}
int64_t ParcelBoxLabelDTO::getOrderId() const
{
    return m_OrderId;
}

void ParcelBoxLabelDTO::setOrderId(int64_t value)
{
    m_OrderId = value;
    m_OrderIdIsSet = true;
}

bool ParcelBoxLabelDTO::orderIdIsSet() const
{
    return m_OrderIdIsSet;
}

void ParcelBoxLabelDTO::unsetOrderId()
{
    m_OrderIdIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getOrderNum() const
{
    return m_OrderNum;
}

void ParcelBoxLabelDTO::setOrderNum(const utility::string_t& value)
{
    m_OrderNum = value;
    m_OrderNumIsSet = true;
}

bool ParcelBoxLabelDTO::orderNumIsSet() const
{
    return m_OrderNumIsSet;
}

void ParcelBoxLabelDTO::unsetOrderNum()
{
    m_OrderNumIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getRecipientName() const
{
    return m_RecipientName;
}

void ParcelBoxLabelDTO::setRecipientName(const utility::string_t& value)
{
    m_RecipientName = value;
    m_RecipientNameIsSet = true;
}

bool ParcelBoxLabelDTO::recipientNameIsSet() const
{
    return m_RecipientNameIsSet;
}

void ParcelBoxLabelDTO::unsetRecipientName()
{
    m_RecipientNameIsSet = false;
}
int64_t ParcelBoxLabelDTO::getBoxId() const
{
    return m_BoxId;
}

void ParcelBoxLabelDTO::setBoxId(int64_t value)
{
    m_BoxId = value;
    m_BoxIdIsSet = true;
}

bool ParcelBoxLabelDTO::boxIdIsSet() const
{
    return m_BoxIdIsSet;
}

void ParcelBoxLabelDTO::unsetBoxId()
{
    m_BoxIdIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getFulfilmentId() const
{
    return m_FulfilmentId;
}

void ParcelBoxLabelDTO::setFulfilmentId(const utility::string_t& value)
{
    m_FulfilmentId = value;
    m_FulfilmentIdIsSet = true;
}

bool ParcelBoxLabelDTO::fulfilmentIdIsSet() const
{
    return m_FulfilmentIdIsSet;
}

void ParcelBoxLabelDTO::unsetFulfilmentId()
{
    m_FulfilmentIdIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getPlace() const
{
    return m_Place;
}

void ParcelBoxLabelDTO::setPlace(const utility::string_t& value)
{
    m_Place = value;
    m_PlaceIsSet = true;
}

bool ParcelBoxLabelDTO::placeIsSet() const
{
    return m_PlaceIsSet;
}

void ParcelBoxLabelDTO::unsetPlace()
{
    m_PlaceIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getWeight() const
{
    return m_Weight;
}

void ParcelBoxLabelDTO::setWeight(const utility::string_t& value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}

bool ParcelBoxLabelDTO::weightIsSet() const
{
    return m_WeightIsSet;
}

void ParcelBoxLabelDTO::unsetWeight()
{
    m_WeightIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void ParcelBoxLabelDTO::setDeliveryServiceId(const utility::string_t& value)
{
    m_DeliveryServiceId = value;
    m_DeliveryServiceIdIsSet = true;
}

bool ParcelBoxLabelDTO::deliveryServiceIdIsSet() const
{
    return m_DeliveryServiceIdIsSet;
}

void ParcelBoxLabelDTO::unsetDeliveryServiceId()
{
    m_DeliveryServiceIdIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getDeliveryAddress() const
{
    return m_DeliveryAddress;
}

void ParcelBoxLabelDTO::setDeliveryAddress(const utility::string_t& value)
{
    m_DeliveryAddress = value;
    m_DeliveryAddressIsSet = true;
}

bool ParcelBoxLabelDTO::deliveryAddressIsSet() const
{
    return m_DeliveryAddressIsSet;
}

void ParcelBoxLabelDTO::unsetDeliveryAddress()
{
    m_DeliveryAddressIsSet = false;
}
utility::string_t ParcelBoxLabelDTO::getShipmentDate() const
{
    return m_ShipmentDate;
}

void ParcelBoxLabelDTO::setShipmentDate(const utility::string_t& value)
{
    m_ShipmentDate = value;
    m_ShipmentDateIsSet = true;
}

bool ParcelBoxLabelDTO::shipmentDateIsSet() const
{
    return m_ShipmentDateIsSet;
}

void ParcelBoxLabelDTO::unsetShipmentDate()
{
    m_ShipmentDateIsSet = false;
}
}
}
}
}


