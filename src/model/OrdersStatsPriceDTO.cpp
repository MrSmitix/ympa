/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrdersStatsPriceDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrdersStatsPriceDTO::OrdersStatsPriceDTO()
{
    m_TypeIsSet = false;
    m_CostPerItem = 0.0;
    m_CostPerItemIsSet = false;
    m_Total = 0.0;
    m_TotalIsSet = false;
}

OrdersStatsPriceDTO::~OrdersStatsPriceDTO()
{
}

void OrdersStatsPriceDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrdersStatsPriceDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_CostPerItemIsSet)
    {
        val[utility::conversions::to_string_t(U("costPerItem"))] = ModelBase::toJson(m_CostPerItem);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }

    return val;
}

bool OrdersStatsPriceDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsPriceType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("costPerItem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("costPerItem")));
        if(!fieldValue.is_null())
        {
            double refVal_setCostPerItem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCostPerItem);
            setCostPerItem(refVal_setCostPerItem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    return ok;
}

void OrdersStatsPriceDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_CostPerItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("costPerItem")), m_CostPerItem));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
}

bool OrdersStatsPriceDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OrdersStatsPriceType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("costPerItem"))))
    {
        double refVal_setCostPerItem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("costPerItem"))), refVal_setCostPerItem );
        setCostPerItem(refVal_setCostPerItem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        double refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    return ok;
}

std::shared_ptr<OrdersStatsPriceType> OrdersStatsPriceDTO::getType() const
{
    return m_Type;
}

void OrdersStatsPriceDTO::setType(const std::shared_ptr<OrdersStatsPriceType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OrdersStatsPriceDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrdersStatsPriceDTO::unsetType()
{
    m_TypeIsSet = false;
}
double OrdersStatsPriceDTO::getCostPerItem() const
{
    return m_CostPerItem;
}

void OrdersStatsPriceDTO::setCostPerItem(double value)
{
    m_CostPerItem = value;
    m_CostPerItemIsSet = true;
}

bool OrdersStatsPriceDTO::costPerItemIsSet() const
{
    return m_CostPerItemIsSet;
}

void OrdersStatsPriceDTO::unsetCostPerItem()
{
    m_CostPerItemIsSet = false;
}
double OrdersStatsPriceDTO::getTotal() const
{
    return m_Total;
}

void OrdersStatsPriceDTO::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool OrdersStatsPriceDTO::totalIsSet() const
{
    return m_TotalIsSet;
}

void OrdersStatsPriceDTO::unsetTotal()
{
    m_TotalIsSet = false;
}
}
}
}
}


