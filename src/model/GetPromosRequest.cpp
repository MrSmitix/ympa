/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetPromosRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetPromosRequest::GetPromosRequest()
{
    m_ParticipationIsSet = false;
    m_MechanicsIsSet = false;
}

GetPromosRequest::~GetPromosRequest()
{
}

void GetPromosRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetPromosRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ParticipationIsSet)
    {
        val[utility::conversions::to_string_t(U("participation"))] = ModelBase::toJson(m_Participation);
    }
    if(m_MechanicsIsSet)
    {
        val[utility::conversions::to_string_t(U("mechanics"))] = ModelBase::toJson(m_Mechanics);
    }

    return val;
}

bool GetPromosRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("participation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("participation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PromoParticipationType> refVal_setParticipation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParticipation);
            setParticipation(refVal_setParticipation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mechanics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mechanics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MechanicsType> refVal_setMechanics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMechanics);
            setMechanics(refVal_setMechanics);
        }
    }
    return ok;
}

void GetPromosRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ParticipationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("participation")), m_Participation));
    }
    if(m_MechanicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mechanics")), m_Mechanics));
    }
}

bool GetPromosRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("participation"))))
    {
        std::shared_ptr<PromoParticipationType> refVal_setParticipation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("participation"))), refVal_setParticipation );
        setParticipation(refVal_setParticipation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mechanics"))))
    {
        std::shared_ptr<MechanicsType> refVal_setMechanics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mechanics"))), refVal_setMechanics );
        setMechanics(refVal_setMechanics);
    }
    return ok;
}

std::shared_ptr<PromoParticipationType> GetPromosRequest::getParticipation() const
{
    return m_Participation;
}

void GetPromosRequest::setParticipation(const std::shared_ptr<PromoParticipationType>& value)
{
    m_Participation = value;
    m_ParticipationIsSet = true;
}

bool GetPromosRequest::participationIsSet() const
{
    return m_ParticipationIsSet;
}

void GetPromosRequest::unsetParticipation()
{
    m_ParticipationIsSet = false;
}
std::shared_ptr<MechanicsType> GetPromosRequest::getMechanics() const
{
    return m_Mechanics;
}

void GetPromosRequest::setMechanics(const std::shared_ptr<MechanicsType>& value)
{
    m_Mechanics = value;
    m_MechanicsIsSet = true;
}

bool GetPromosRequest::mechanicsIsSet() const
{
    return m_MechanicsIsSet;
}

void GetPromosRequest::unsetMechanics()
{
    m_MechanicsIsSet = false;
}
}
}
}
}


