/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParcelBoxLabelDTO model module.
 * @module model/ParcelBoxLabelDTO
 * @version LATEST
 */
class ParcelBoxLabelDTO {
    /**
     * Constructs a new <code>ParcelBoxLabelDTO</code>.
     * Информация о ярлыке для коробки.
     * @alias module:model/ParcelBoxLabelDTO
     * @param url {String} Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
     * @param supplierName {String} Юридическое название магазина.
     * @param deliveryServiceName {String} Юридическое название службы доставки.
     * @param orderId {Number} Идентификатор заказа в системе Маркета.
     * @param orderNum {String} Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
     * @param recipientName {String} Фамилия и инициалы получателя заказа.
     * @param boxId {Number} Идентификатор коробки.
     * @param fulfilmentId {String} Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
     * @param place {String} Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
     * @param weight {String} {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
     * @param deliveryServiceId {String} Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
     */
    constructor(url, supplierName, deliveryServiceName, orderId, orderNum, recipientName, boxId, fulfilmentId, place, weight, deliveryServiceId) { 
        
        ParcelBoxLabelDTO.initialize(this, url, supplierName, deliveryServiceName, orderId, orderNum, recipientName, boxId, fulfilmentId, place, weight, deliveryServiceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url, supplierName, deliveryServiceName, orderId, orderNum, recipientName, boxId, fulfilmentId, place, weight, deliveryServiceId) { 
        obj['url'] = url;
        obj['supplierName'] = supplierName;
        obj['deliveryServiceName'] = deliveryServiceName;
        obj['orderId'] = orderId;
        obj['orderNum'] = orderNum;
        obj['recipientName'] = recipientName;
        obj['boxId'] = boxId;
        obj['fulfilmentId'] = fulfilmentId;
        obj['place'] = place;
        obj['weight'] = weight;
        obj['deliveryServiceId'] = deliveryServiceId;
    }

    /**
     * Constructs a <code>ParcelBoxLabelDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParcelBoxLabelDTO} obj Optional instance to populate.
     * @return {module:model/ParcelBoxLabelDTO} The populated <code>ParcelBoxLabelDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParcelBoxLabelDTO();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('supplierName')) {
                obj['supplierName'] = ApiClient.convertToType(data['supplierName'], 'String');
            }
            if (data.hasOwnProperty('deliveryServiceName')) {
                obj['deliveryServiceName'] = ApiClient.convertToType(data['deliveryServiceName'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
            if (data.hasOwnProperty('orderNum')) {
                obj['orderNum'] = ApiClient.convertToType(data['orderNum'], 'String');
            }
            if (data.hasOwnProperty('recipientName')) {
                obj['recipientName'] = ApiClient.convertToType(data['recipientName'], 'String');
            }
            if (data.hasOwnProperty('boxId')) {
                obj['boxId'] = ApiClient.convertToType(data['boxId'], 'Number');
            }
            if (data.hasOwnProperty('fulfilmentId')) {
                obj['fulfilmentId'] = ApiClient.convertToType(data['fulfilmentId'], 'String');
            }
            if (data.hasOwnProperty('place')) {
                obj['place'] = ApiClient.convertToType(data['place'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'String');
            }
            if (data.hasOwnProperty('deliveryServiceId')) {
                obj['deliveryServiceId'] = ApiClient.convertToType(data['deliveryServiceId'], 'String');
            }
            if (data.hasOwnProperty('deliveryAddress')) {
                obj['deliveryAddress'] = ApiClient.convertToType(data['deliveryAddress'], 'String');
            }
            if (data.hasOwnProperty('shipmentDate')) {
                obj['shipmentDate'] = ApiClient.convertToType(data['shipmentDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParcelBoxLabelDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParcelBoxLabelDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ParcelBoxLabelDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['supplierName'] && !(typeof data['supplierName'] === 'string' || data['supplierName'] instanceof String)) {
            throw new Error("Expected the field `supplierName` to be a primitive type in the JSON string but got " + data['supplierName']);
        }
        // ensure the json data is a string
        if (data['deliveryServiceName'] && !(typeof data['deliveryServiceName'] === 'string' || data['deliveryServiceName'] instanceof String)) {
            throw new Error("Expected the field `deliveryServiceName` to be a primitive type in the JSON string but got " + data['deliveryServiceName']);
        }
        // ensure the json data is a string
        if (data['orderNum'] && !(typeof data['orderNum'] === 'string' || data['orderNum'] instanceof String)) {
            throw new Error("Expected the field `orderNum` to be a primitive type in the JSON string but got " + data['orderNum']);
        }
        // ensure the json data is a string
        if (data['recipientName'] && !(typeof data['recipientName'] === 'string' || data['recipientName'] instanceof String)) {
            throw new Error("Expected the field `recipientName` to be a primitive type in the JSON string but got " + data['recipientName']);
        }
        // ensure the json data is a string
        if (data['fulfilmentId'] && !(typeof data['fulfilmentId'] === 'string' || data['fulfilmentId'] instanceof String)) {
            throw new Error("Expected the field `fulfilmentId` to be a primitive type in the JSON string but got " + data['fulfilmentId']);
        }
        // ensure the json data is a string
        if (data['place'] && !(typeof data['place'] === 'string' || data['place'] instanceof String)) {
            throw new Error("Expected the field `place` to be a primitive type in the JSON string but got " + data['place']);
        }
        // ensure the json data is a string
        if (data['weight'] && !(typeof data['weight'] === 'string' || data['weight'] instanceof String)) {
            throw new Error("Expected the field `weight` to be a primitive type in the JSON string but got " + data['weight']);
        }
        // ensure the json data is a string
        if (data['deliveryServiceId'] && !(typeof data['deliveryServiceId'] === 'string' || data['deliveryServiceId'] instanceof String)) {
            throw new Error("Expected the field `deliveryServiceId` to be a primitive type in the JSON string but got " + data['deliveryServiceId']);
        }
        // ensure the json data is a string
        if (data['deliveryAddress'] && !(typeof data['deliveryAddress'] === 'string' || data['deliveryAddress'] instanceof String)) {
            throw new Error("Expected the field `deliveryAddress` to be a primitive type in the JSON string but got " + data['deliveryAddress']);
        }
        // ensure the json data is a string
        if (data['shipmentDate'] && !(typeof data['shipmentDate'] === 'string' || data['shipmentDate'] instanceof String)) {
            throw new Error("Expected the field `shipmentDate` to be a primitive type in the JSON string but got " + data['shipmentDate']);
        }

        return true;
    }


}

ParcelBoxLabelDTO.RequiredProperties = ["url", "supplierName", "deliveryServiceName", "orderId", "orderNum", "recipientName", "boxId", "fulfilmentId", "place", "weight", "deliveryServiceId"];

/**
 * Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
 * @member {String} url
 */
ParcelBoxLabelDTO.prototype['url'] = undefined;

/**
 * Юридическое название магазина.
 * @member {String} supplierName
 */
ParcelBoxLabelDTO.prototype['supplierName'] = undefined;

/**
 * Юридическое название службы доставки.
 * @member {String} deliveryServiceName
 */
ParcelBoxLabelDTO.prototype['deliveryServiceName'] = undefined;

/**
 * Идентификатор заказа в системе Маркета.
 * @member {Number} orderId
 */
ParcelBoxLabelDTO.prototype['orderId'] = undefined;

/**
 * Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
 * @member {String} orderNum
 */
ParcelBoxLabelDTO.prototype['orderNum'] = undefined;

/**
 * Фамилия и инициалы получателя заказа.
 * @member {String} recipientName
 */
ParcelBoxLabelDTO.prototype['recipientName'] = undefined;

/**
 * Идентификатор коробки.
 * @member {Number} boxId
 */
ParcelBoxLabelDTO.prototype['boxId'] = undefined;

/**
 * Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
 * @member {String} fulfilmentId
 */
ParcelBoxLabelDTO.prototype['fulfilmentId'] = undefined;

/**
 * Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
 * @member {String} place
 */
ParcelBoxLabelDTO.prototype['place'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
 * @member {String} weight
 */
ParcelBoxLabelDTO.prototype['weight'] = undefined;

/**
 * Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
 * @member {String} deliveryServiceId
 */
ParcelBoxLabelDTO.prototype['deliveryServiceId'] = undefined;

/**
 * Адрес получателя.
 * @member {String} deliveryAddress
 */
ParcelBoxLabelDTO.prototype['deliveryAddress'] = undefined;

/**
 * Дата отгрузки в формате `dd.MM.yyyy`.
 * @member {String} shipmentDate
 */
ParcelBoxLabelDTO.prototype['shipmentDate'] = undefined;






export default ParcelBoxLabelDTO;

