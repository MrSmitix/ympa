/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrdersShipmentInfoDTO model module.
 * @module model/OrdersShipmentInfoDTO
 * @version LATEST
 */
class OrdersShipmentInfoDTO {
    /**
     * Constructs a new <code>OrdersShipmentInfoDTO</code>.
     * Годные/негодные ярлыки по заказам в отгрузке.
     * @alias module:model/OrdersShipmentInfoDTO
     * @param orderIdsWithLabels {Array.<Number>} Идентификаторы заказов в отгрузке, для которых можно распечатать ярлыки.
     * @param orderIdsWithoutLabels {Array.<Number>} Идентификаторы заказов в отгрузке, для которых нельзя распечатать ярлыки.
     */
    constructor(orderIdsWithLabels, orderIdsWithoutLabels) { 
        
        OrdersShipmentInfoDTO.initialize(this, orderIdsWithLabels, orderIdsWithoutLabels);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderIdsWithLabels, orderIdsWithoutLabels) { 
        obj['orderIdsWithLabels'] = orderIdsWithLabels;
        obj['orderIdsWithoutLabels'] = orderIdsWithoutLabels;
    }

    /**
     * Constructs a <code>OrdersShipmentInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrdersShipmentInfoDTO} obj Optional instance to populate.
     * @return {module:model/OrdersShipmentInfoDTO} The populated <code>OrdersShipmentInfoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrdersShipmentInfoDTO();

            if (data.hasOwnProperty('orderIdsWithLabels')) {
                obj['orderIdsWithLabels'] = ApiClient.convertToType(data['orderIdsWithLabels'], ['Number']);
            }
            if (data.hasOwnProperty('orderIdsWithoutLabels')) {
                obj['orderIdsWithoutLabels'] = ApiClient.convertToType(data['orderIdsWithoutLabels'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrdersShipmentInfoDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrdersShipmentInfoDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrdersShipmentInfoDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['orderIdsWithLabels'])) {
            throw new Error("Expected the field `orderIdsWithLabels` to be an array in the JSON data but got " + data['orderIdsWithLabels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['orderIdsWithoutLabels'])) {
            throw new Error("Expected the field `orderIdsWithoutLabels` to be an array in the JSON data but got " + data['orderIdsWithoutLabels']);
        }

        return true;
    }


}

OrdersShipmentInfoDTO.RequiredProperties = ["orderIdsWithLabels", "orderIdsWithoutLabels"];

/**
 * Идентификаторы заказов в отгрузке, для которых можно распечатать ярлыки.
 * @member {Array.<Number>} orderIdsWithLabels
 */
OrdersShipmentInfoDTO.prototype['orderIdsWithLabels'] = undefined;

/**
 * Идентификаторы заказов в отгрузке, для которых нельзя распечатать ярлыки.
 * @member {Array.<Number>} orderIdsWithoutLabels
 */
OrdersShipmentInfoDTO.prototype['orderIdsWithoutLabels'] = undefined;






export default OrdersShipmentInfoDTO;

