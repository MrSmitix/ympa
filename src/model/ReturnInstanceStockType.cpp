/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnInstanceStockType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

ReturnInstanceStockType::eReturnInstanceStockType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("FIT")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_FIT;
    if (val == utility::conversions::to_string_t(U("DEFECT")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_DEFECT;
    if (val == utility::conversions::to_string_t(U("ANOMALY")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_ANOMALY;
    if (val == utility::conversions::to_string_t(U("SURPLUS")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_SURPLUS;
    if (val == utility::conversions::to_string_t(U("EXPIRED")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_EXPIRED;
    if (val == utility::conversions::to_string_t(U("MISGRADING")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_MISGRADING;
    if (val == utility::conversions::to_string_t(U("UNDEFINED")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_UNDEFINED;
    if (val == utility::conversions::to_string_t(U("INCORRECT_IMEI")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_INCORRECT_IMEI;
    if (val == utility::conversions::to_string_t(U("INCORRECT_SERIAL_NUMBER")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_INCORRECT_SERIAL_NUMBER;
    if (val == utility::conversions::to_string_t(U("INCORRECT_CIS")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_INCORRECT_CIS;
    if (val == utility::conversions::to_string_t(U("PART_MISSING")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_PART_MISSING;
    if (val == utility::conversions::to_string_t(U("NON_COMPLIENT")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_NON_COMPLIENT;
    if (val == utility::conversions::to_string_t(U("NOT_ACCEPTABLE")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_NOT_ACCEPTABLE;
    if (val == utility::conversions::to_string_t(U("SERVICE")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_SERVICE;
    if (val == utility::conversions::to_string_t(U("MARKDOWN")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_MARKDOWN;
    if (val == utility::conversions::to_string_t(U("DEMO")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_DEMO;
    if (val == utility::conversions::to_string_t(U("REPAIR")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_REPAIR;
    if (val == utility::conversions::to_string_t(U("FIRMWARE")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_FIRMWARE;
    if (val == utility::conversions::to_string_t(U("UNKNOWN")))
        return ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_UNKNOWN;
    return {};
}

EnumUnderlyingType fromEnum(ReturnInstanceStockType::eReturnInstanceStockType e)
{
    switch (e)
    {
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_FIT:
        return U("FIT");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_DEFECT:
        return U("DEFECT");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_ANOMALY:
        return U("ANOMALY");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_SURPLUS:
        return U("SURPLUS");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_EXPIRED:
        return U("EXPIRED");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_MISGRADING:
        return U("MISGRADING");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_UNDEFINED:
        return U("UNDEFINED");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_INCORRECT_IMEI:
        return U("INCORRECT_IMEI");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_INCORRECT_SERIAL_NUMBER:
        return U("INCORRECT_SERIAL_NUMBER");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_INCORRECT_CIS:
        return U("INCORRECT_CIS");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_PART_MISSING:
        return U("PART_MISSING");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_NON_COMPLIENT:
        return U("NON_COMPLIENT");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_NOT_ACCEPTABLE:
        return U("NOT_ACCEPTABLE");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_SERVICE:
        return U("SERVICE");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_MARKDOWN:
        return U("MARKDOWN");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_DEMO:
        return U("DEMO");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_REPAIR:
        return U("REPAIR");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_FIRMWARE:
        return U("FIRMWARE");
    case ReturnInstanceStockType::eReturnInstanceStockType::ReturnInstanceStockType_UNKNOWN:
        return U("UNKNOWN");
    default:
        break;
    }
    return {};
}
}

ReturnInstanceStockType::ReturnInstanceStockType()
{
}

ReturnInstanceStockType::~ReturnInstanceStockType()
{
}

void ReturnInstanceStockType::validate()
{
    // TODO: implement validation
}

web::json::value ReturnInstanceStockType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ReturnInstanceStockType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ReturnInstanceStockType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ReturnInstanceStockType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ReturnInstanceStockType::eReturnInstanceStockType ReturnInstanceStockType::getValue() const
{
   return m_value;
}

void ReturnInstanceStockType::setValue(ReturnInstanceStockType::eReturnInstanceStockType const value)
{
   m_value = value;
}


}
}
}
}


