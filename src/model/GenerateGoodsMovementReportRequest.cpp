/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateGoodsMovementReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateGoodsMovementReportRequest::GenerateGoodsMovementReportRequest()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    m_ShopSku = utility::conversions::to_string_t("");
    m_ShopSkuIsSet = false;
}

GenerateGoodsMovementReportRequest::~GenerateGoodsMovementReportRequest()
{
}

void GenerateGoodsMovementReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value GenerateGoodsMovementReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_DateFromIsSet)
    {
        val[utility::conversions::to_string_t(U("dateFrom"))] = ModelBase::toJson(m_DateFrom);
    }
    if(m_DateToIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTo"))] = ModelBase::toJson(m_DateTo);
    }
    if(m_ShopSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("shopSku"))] = ModelBase::toJson(m_ShopSku);
    }

    return val;
}

bool GenerateGoodsMovementReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFrom);
            setDateFrom(refVal_setDateFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTo);
            setDateTo(refVal_setDateTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopSku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopSku);
            setShopSku(refVal_setShopSku);
        }
    }
    return ok;
}

void GenerateGoodsMovementReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_DateFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateFrom")), m_DateFrom));
    }
    if(m_DateToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTo")), m_DateTo));
    }
    if(m_ShopSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopSku")), m_ShopSku));
    }
}

bool GenerateGoodsMovementReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateFrom"))))
    {
        utility::datetime refVal_setDateFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateFrom"))), refVal_setDateFrom );
        setDateFrom(refVal_setDateFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTo"))))
    {
        utility::datetime refVal_setDateTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTo"))), refVal_setDateTo );
        setDateTo(refVal_setDateTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopSku"))))
    {
        utility::string_t refVal_setShopSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopSku"))), refVal_setShopSku );
        setShopSku(refVal_setShopSku);
    }
    return ok;
}

int64_t GenerateGoodsMovementReportRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GenerateGoodsMovementReportRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool GenerateGoodsMovementReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void GenerateGoodsMovementReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
utility::datetime GenerateGoodsMovementReportRequest::getDateFrom() const
{
    return m_DateFrom;
}

void GenerateGoodsMovementReportRequest::setDateFrom(const utility::datetime& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}

bool GenerateGoodsMovementReportRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}

void GenerateGoodsMovementReportRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
utility::datetime GenerateGoodsMovementReportRequest::getDateTo() const
{
    return m_DateTo;
}

void GenerateGoodsMovementReportRequest::setDateTo(const utility::datetime& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}

bool GenerateGoodsMovementReportRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}

void GenerateGoodsMovementReportRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
utility::string_t GenerateGoodsMovementReportRequest::getShopSku() const
{
    return m_ShopSku;
}

void GenerateGoodsMovementReportRequest::setShopSku(const utility::string_t& value)
{
    m_ShopSku = value;
    m_ShopSkuIsSet = true;
}

bool GenerateGoodsMovementReportRequest::shopSkuIsSet() const
{
    return m_ShopSkuIsSet;
}

void GenerateGoodsMovementReportRequest::unsetShopSku()
{
    m_ShopSkuIsSet = false;
}
}
}
}
}


