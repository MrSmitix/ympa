/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GpsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GpsDTO::GpsDTO()
{
    m_Latitude = 0.0;
    m_LatitudeIsSet = false;
    m_Longitude = 0.0;
    m_LongitudeIsSet = false;
}

GpsDTO::~GpsDTO()
{
}

void GpsDTO::validate()
{
    // TODO: implement validation
}

web::json::value GpsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LatitudeIsSet)
    {
        val[utility::conversions::to_string_t(U("latitude"))] = ModelBase::toJson(m_Latitude);
    }
    if(m_LongitudeIsSet)
    {
        val[utility::conversions::to_string_t(U("longitude"))] = ModelBase::toJson(m_Longitude);
    }

    return val;
}

bool GpsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("latitude"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latitude")));
        if(!fieldValue.is_null())
        {
            double refVal_setLatitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatitude);
            setLatitude(refVal_setLatitude);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("longitude"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("longitude")));
        if(!fieldValue.is_null())
        {
            double refVal_setLongitude;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLongitude);
            setLongitude(refVal_setLongitude);
        }
    }
    return ok;
}

void GpsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LatitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latitude")), m_Latitude));
    }
    if(m_LongitudeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("longitude")), m_Longitude));
    }
}

bool GpsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("latitude"))))
    {
        double refVal_setLatitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latitude"))), refVal_setLatitude );
        setLatitude(refVal_setLatitude);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("longitude"))))
    {
        double refVal_setLongitude;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("longitude"))), refVal_setLongitude );
        setLongitude(refVal_setLongitude);
    }
    return ok;
}

double GpsDTO::getLatitude() const
{
    return m_Latitude;
}

void GpsDTO::setLatitude(double value)
{
    m_Latitude = value;
    m_LatitudeIsSet = true;
}

bool GpsDTO::latitudeIsSet() const
{
    return m_LatitudeIsSet;
}

void GpsDTO::unsetLatitude()
{
    m_LatitudeIsSet = false;
}
double GpsDTO::getLongitude() const
{
    return m_Longitude;
}

void GpsDTO::setLongitude(double value)
{
    m_Longitude = value;
    m_LongitudeIsSet = true;
}

bool GpsDTO::longitudeIsSet() const
{
    return m_LongitudeIsSet;
}

void GpsDTO::unsetLongitude()
{
    m_LongitudeIsSet = false;
}
}
}
}
}


