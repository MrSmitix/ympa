/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetPromoConstraintsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetPromoConstraintsDTO::GetPromoConstraintsDTO()
{
    m_WarehouseIdsIsSet = false;
}

GetPromoConstraintsDTO::~GetPromoConstraintsDTO()
{
}

void GetPromoConstraintsDTO::validate()
{
    // TODO: implement validation
}

web::json::value GetPromoConstraintsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WarehouseIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("warehouseIds"))] = ModelBase::toJson(m_WarehouseIds);
    }

    return val;
}

bool GetPromoConstraintsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("warehouseIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warehouseIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setWarehouseIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarehouseIds);
            setWarehouseIds(refVal_setWarehouseIds);
        }
    }
    return ok;
}

void GetPromoConstraintsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WarehouseIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warehouseIds")), m_WarehouseIds));
    }
}

bool GetPromoConstraintsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("warehouseIds"))))
    {
        std::vector<int64_t> refVal_setWarehouseIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warehouseIds"))), refVal_setWarehouseIds );
        setWarehouseIds(refVal_setWarehouseIds);
    }
    return ok;
}

std::vector<int64_t>& GetPromoConstraintsDTO::getWarehouseIds()
{
    return m_WarehouseIds;
}

void GetPromoConstraintsDTO::setWarehouseIds(std::vector<int64_t> value)
{
    m_WarehouseIds = value;
    m_WarehouseIdsIsSet = true;
}

bool GetPromoConstraintsDTO::warehouseIdsIsSet() const
{
    return m_WarehouseIdsIsSet;
}

void GetPromoConstraintsDTO::unsetWarehouseIds()
{
    m_WarehouseIdsIsSet = false;
}
}
}
}
}


