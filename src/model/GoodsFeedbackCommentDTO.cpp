/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsFeedbackCommentDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsFeedbackCommentDTO::GoodsFeedbackCommentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Text = utility::conversions::to_string_t("");
    m_TextIsSet = false;
    m_CanModify = false;
    m_CanModifyIsSet = false;
    m_ParentId = 0L;
    m_ParentIdIsSet = false;
    m_AuthorIsSet = false;
    m_StatusIsSet = false;
}

GoodsFeedbackCommentDTO::~GoodsFeedbackCommentDTO()
{
}

void GoodsFeedbackCommentDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsFeedbackCommentDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TextIsSet)
    {
        val[utility::conversions::to_string_t(U("text"))] = ModelBase::toJson(m_Text);
    }
    if(m_CanModifyIsSet)
    {
        val[utility::conversions::to_string_t(U("canModify"))] = ModelBase::toJson(m_CanModify);
    }
    if(m_ParentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("parentId"))] = ModelBase::toJson(m_ParentId);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_Author);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool GoodsFeedbackCommentDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setText);
            setText(refVal_setText);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("canModify"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("canModify")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanModify;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanModify);
            setCanModify(refVal_setCanModify);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parentId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setParentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentId);
            setParentId(refVal_setParentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsFeedbackCommentAuthorDTO> refVal_setAuthor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthor);
            setAuthor(refVal_setAuthor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GoodsFeedbackCommentStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void GoodsFeedbackCommentDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("text")), m_Text));
    }
    if(m_CanModifyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("canModify")), m_CanModify));
    }
    if(m_ParentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parentId")), m_ParentId));
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_Author));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool GoodsFeedbackCommentDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("text"))))
    {
        utility::string_t refVal_setText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("text"))), refVal_setText );
        setText(refVal_setText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("canModify"))))
    {
        bool refVal_setCanModify;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("canModify"))), refVal_setCanModify );
        setCanModify(refVal_setCanModify);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parentId"))))
    {
        int64_t refVal_setParentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parentId"))), refVal_setParentId );
        setParentId(refVal_setParentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        std::shared_ptr<GoodsFeedbackCommentAuthorDTO> refVal_setAuthor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_setAuthor );
        setAuthor(refVal_setAuthor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<GoodsFeedbackCommentStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

int64_t GoodsFeedbackCommentDTO::getId() const
{
    return m_Id;
}

void GoodsFeedbackCommentDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GoodsFeedbackCommentDTO::idIsSet() const
{
    return m_IdIsSet;
}

void GoodsFeedbackCommentDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t GoodsFeedbackCommentDTO::getText() const
{
    return m_Text;
}

void GoodsFeedbackCommentDTO::setText(const utility::string_t& value)
{
    m_Text = value;
    m_TextIsSet = true;
}

bool GoodsFeedbackCommentDTO::textIsSet() const
{
    return m_TextIsSet;
}

void GoodsFeedbackCommentDTO::unsetText()
{
    m_TextIsSet = false;
}
bool GoodsFeedbackCommentDTO::isCanModify() const
{
    return m_CanModify;
}

void GoodsFeedbackCommentDTO::setCanModify(bool value)
{
    m_CanModify = value;
    m_CanModifyIsSet = true;
}

bool GoodsFeedbackCommentDTO::canModifyIsSet() const
{
    return m_CanModifyIsSet;
}

void GoodsFeedbackCommentDTO::unsetCanModify()
{
    m_CanModifyIsSet = false;
}
int64_t GoodsFeedbackCommentDTO::getParentId() const
{
    return m_ParentId;
}

void GoodsFeedbackCommentDTO::setParentId(int64_t value)
{
    m_ParentId = value;
    m_ParentIdIsSet = true;
}

bool GoodsFeedbackCommentDTO::parentIdIsSet() const
{
    return m_ParentIdIsSet;
}

void GoodsFeedbackCommentDTO::unsetParentId()
{
    m_ParentIdIsSet = false;
}
std::shared_ptr<GoodsFeedbackCommentAuthorDTO> GoodsFeedbackCommentDTO::getAuthor() const
{
    return m_Author;
}

void GoodsFeedbackCommentDTO::setAuthor(const std::shared_ptr<GoodsFeedbackCommentAuthorDTO>& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool GoodsFeedbackCommentDTO::authorIsSet() const
{
    return m_AuthorIsSet;
}

void GoodsFeedbackCommentDTO::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::shared_ptr<GoodsFeedbackCommentStatusType> GoodsFeedbackCommentDTO::getStatus() const
{
    return m_Status;
}

void GoodsFeedbackCommentDTO::setStatus(const std::shared_ptr<GoodsFeedbackCommentStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool GoodsFeedbackCommentDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void GoodsFeedbackCommentDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


