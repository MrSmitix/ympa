/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoodsFeedbackDescriptionDTO from './GoodsFeedbackDescriptionDTO';
import GoodsFeedbackIdentifiersDTO from './GoodsFeedbackIdentifiersDTO';
import GoodsFeedbackMediaDTO from './GoodsFeedbackMediaDTO';
import GoodsFeedbackStatisticsDTO from './GoodsFeedbackStatisticsDTO';

/**
 * The GoodsFeedbackDTO model module.
 * @module model/GoodsFeedbackDTO
 * @version LATEST
 */
class GoodsFeedbackDTO {
    /**
     * Constructs a new <code>GoodsFeedbackDTO</code>.
     * Отзыв о товаре.
     * @alias module:model/GoodsFeedbackDTO
     * @param feedbackId {Number} Идентификатор отзыва. 
     * @param createdAt {Date} Дата и время создания отзыва.
     * @param needReaction {Boolean} Нужен ли ответ на отзыв.
     * @param identifiers {module:model/GoodsFeedbackIdentifiersDTO} 
     * @param statistics {module:model/GoodsFeedbackStatisticsDTO} 
     */
    constructor(feedbackId, createdAt, needReaction, identifiers, statistics) { 
        
        GoodsFeedbackDTO.initialize(this, feedbackId, createdAt, needReaction, identifiers, statistics);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feedbackId, createdAt, needReaction, identifiers, statistics) { 
        obj['feedbackId'] = feedbackId;
        obj['createdAt'] = createdAt;
        obj['needReaction'] = needReaction;
        obj['identifiers'] = identifiers;
        obj['statistics'] = statistics;
    }

    /**
     * Constructs a <code>GoodsFeedbackDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoodsFeedbackDTO} obj Optional instance to populate.
     * @return {module:model/GoodsFeedbackDTO} The populated <code>GoodsFeedbackDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoodsFeedbackDTO();

            if (data.hasOwnProperty('feedbackId')) {
                obj['feedbackId'] = ApiClient.convertToType(data['feedbackId'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('needReaction')) {
                obj['needReaction'] = ApiClient.convertToType(data['needReaction'], 'Boolean');
            }
            if (data.hasOwnProperty('identifiers')) {
                obj['identifiers'] = GoodsFeedbackIdentifiersDTO.constructFromObject(data['identifiers']);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = GoodsFeedbackDescriptionDTO.constructFromObject(data['description']);
            }
            if (data.hasOwnProperty('media')) {
                obj['media'] = GoodsFeedbackMediaDTO.constructFromObject(data['media']);
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = GoodsFeedbackStatisticsDTO.constructFromObject(data['statistics']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoodsFeedbackDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoodsFeedbackDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GoodsFeedbackDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `identifiers`
        if (data['identifiers']) { // data not null
          GoodsFeedbackIdentifiersDTO.validateJSON(data['identifiers']);
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          GoodsFeedbackDescriptionDTO.validateJSON(data['description']);
        }
        // validate the optional field `media`
        if (data['media']) { // data not null
          GoodsFeedbackMediaDTO.validateJSON(data['media']);
        }
        // validate the optional field `statistics`
        if (data['statistics']) { // data not null
          GoodsFeedbackStatisticsDTO.validateJSON(data['statistics']);
        }

        return true;
    }


}

GoodsFeedbackDTO.RequiredProperties = ["feedbackId", "createdAt", "needReaction", "identifiers", "statistics"];

/**
 * Идентификатор отзыва. 
 * @member {Number} feedbackId
 */
GoodsFeedbackDTO.prototype['feedbackId'] = undefined;

/**
 * Дата и время создания отзыва.
 * @member {Date} createdAt
 */
GoodsFeedbackDTO.prototype['createdAt'] = undefined;

/**
 * Нужен ли ответ на отзыв.
 * @member {Boolean} needReaction
 */
GoodsFeedbackDTO.prototype['needReaction'] = undefined;

/**
 * @member {module:model/GoodsFeedbackIdentifiersDTO} identifiers
 */
GoodsFeedbackDTO.prototype['identifiers'] = undefined;

/**
 * Имя автора отзыва.
 * @member {String} author
 */
GoodsFeedbackDTO.prototype['author'] = undefined;

/**
 * @member {module:model/GoodsFeedbackDescriptionDTO} description
 */
GoodsFeedbackDTO.prototype['description'] = undefined;

/**
 * @member {module:model/GoodsFeedbackMediaDTO} media
 */
GoodsFeedbackDTO.prototype['media'] = undefined;

/**
 * @member {module:model/GoodsFeedbackStatisticsDTO} statistics
 */
GoodsFeedbackDTO.prototype['statistics'] = undefined;






export default GoodsFeedbackDTO;

