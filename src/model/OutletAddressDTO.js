/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutletAddressDTO model module.
 * @module model/OutletAddressDTO
 * @version LATEST
 */
class OutletAddressDTO {
    /**
     * @member {Number} regionId
     * @type {Number}
     */
    regionId;
    /**
     * @member {String} street
     * @type {String}
     */
    street;
    /**
     * @member {String} number
     * @type {String}
     */
    number;
    /**
     * @member {String} building
     * @type {String}
     */
    building;
    /**
     * @member {String} estate
     * @type {String}
     */
    estate;
    /**
     * @member {String} block
     * @type {String}
     */
    block;
    /**
     * @member {String} additional
     * @type {String}
     */
    additional;
    /**
     * @member {Number} km
     * @type {Number}
     */
    km;
    /**
     * @member {String} city
     * @type {String}
     */
    city;

    

    /**
     * Constructs a new <code>OutletAddressDTO</code>.
     * Адрес точки продаж. 
     * @alias module:model/OutletAddressDTO
     * @param regionId {Number} Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
     */
    constructor(regionId) { 
        
        OutletAddressDTO.initialize(this, regionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, regionId) { 
        obj['regionId'] = regionId;
    }

    /**
     * Constructs a <code>OutletAddressDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutletAddressDTO} obj Optional instance to populate.
     * @return {module:model/OutletAddressDTO} The populated <code>OutletAddressDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutletAddressDTO();

            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'Number');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('building')) {
                obj['building'] = ApiClient.convertToType(data['building'], 'String');
            }
            if (data.hasOwnProperty('estate')) {
                obj['estate'] = ApiClient.convertToType(data['estate'], 'String');
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'String');
            }
            if (data.hasOwnProperty('additional')) {
                obj['additional'] = ApiClient.convertToType(data['additional'], 'String');
            }
            if (data.hasOwnProperty('km')) {
                obj['km'] = ApiClient.convertToType(data['km'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
        }
        return obj;
    }
}



export default OutletAddressDTO;

