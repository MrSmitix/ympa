/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OutletAddressDTO model module.
 * @module model/OutletAddressDTO
 * @version LATEST
 */
class OutletAddressDTO {
    /**
     * Constructs a new <code>OutletAddressDTO</code>.
     * Адрес точки продаж. 
     * @alias module:model/OutletAddressDTO
     * @param regionId {Number} Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
     */
    constructor(regionId) { 
        
        OutletAddressDTO.initialize(this, regionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, regionId) { 
        obj['regionId'] = regionId;
    }

    /**
     * Constructs a <code>OutletAddressDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutletAddressDTO} obj Optional instance to populate.
     * @return {module:model/OutletAddressDTO} The populated <code>OutletAddressDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutletAddressDTO();

            if (data.hasOwnProperty('regionId')) {
                obj['regionId'] = ApiClient.convertToType(data['regionId'], 'Number');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('building')) {
                obj['building'] = ApiClient.convertToType(data['building'], 'String');
            }
            if (data.hasOwnProperty('estate')) {
                obj['estate'] = ApiClient.convertToType(data['estate'], 'String');
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'String');
            }
            if (data.hasOwnProperty('additional')) {
                obj['additional'] = ApiClient.convertToType(data['additional'], 'String');
            }
            if (data.hasOwnProperty('km')) {
                obj['km'] = ApiClient.convertToType(data['km'], 'Number');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutletAddressDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutletAddressDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutletAddressDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['building'] && !(typeof data['building'] === 'string' || data['building'] instanceof String)) {
            throw new Error("Expected the field `building` to be a primitive type in the JSON string but got " + data['building']);
        }
        // ensure the json data is a string
        if (data['estate'] && !(typeof data['estate'] === 'string' || data['estate'] instanceof String)) {
            throw new Error("Expected the field `estate` to be a primitive type in the JSON string but got " + data['estate']);
        }
        // ensure the json data is a string
        if (data['block'] && !(typeof data['block'] === 'string' || data['block'] instanceof String)) {
            throw new Error("Expected the field `block` to be a primitive type in the JSON string but got " + data['block']);
        }
        // ensure the json data is a string
        if (data['additional'] && !(typeof data['additional'] === 'string' || data['additional'] instanceof String)) {
            throw new Error("Expected the field `additional` to be a primitive type in the JSON string but got " + data['additional']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }

        return true;
    }


}

OutletAddressDTO.RequiredProperties = ["regionId"];

/**
 * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
 * @member {Number} regionId
 */
OutletAddressDTO.prototype['regionId'] = undefined;

/**
 * Улица.
 * @member {String} street
 */
OutletAddressDTO.prototype['street'] = undefined;

/**
 * Номер дома.
 * @member {String} number
 */
OutletAddressDTO.prototype['number'] = undefined;

/**
 * Номер строения.
 * @member {String} building
 */
OutletAddressDTO.prototype['building'] = undefined;

/**
 * Номер владения.
 * @member {String} estate
 */
OutletAddressDTO.prototype['estate'] = undefined;

/**
 * Номер корпуса.
 * @member {String} block
 */
OutletAddressDTO.prototype['block'] = undefined;

/**
 * Дополнительная информация.
 * @member {String} additional
 */
OutletAddressDTO.prototype['additional'] = undefined;

/**
 * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
 * @member {Number} km
 */
OutletAddressDTO.prototype['km'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
 * @member {String} city
 */
OutletAddressDTO.prototype['city'] = undefined;






export default OutletAddressDTO;

