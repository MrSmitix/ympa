/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderDigitalItemDTO model module.
 * @module model/OrderDigitalItemDTO
 * @version LATEST
 */
class OrderDigitalItemDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {String} code
     * @type {String}
     */
    code;
    /**
     * @member {String} slip
     * @type {String}
     */
    slip;
    /**
     * @member {Date} activate_till
     * @type {Date}
     */
    activate_till;

    

    /**
     * Constructs a new <code>OrderDigitalItemDTO</code>.
     * Ключ цифрового товара.
     * @alias module:model/OrderDigitalItemDTO
     * @param id {Number} Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
     * @param code {String} Сам ключ.
     * @param slip {String} Инструкция по активации.
     * @param activateTill {Date} Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: `ГГГГ-ММ-ДД`. 
     */
    constructor(id, code, slip, activateTill) { 
        
        OrderDigitalItemDTO.initialize(this, id, code, slip, activateTill);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, code, slip, activateTill) { 
        obj['id'] = id;
        obj['code'] = code;
        obj['slip'] = slip;
        obj['activate_till'] = activateTill;
    }

    /**
     * Constructs a <code>OrderDigitalItemDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDigitalItemDTO} obj Optional instance to populate.
     * @return {module:model/OrderDigitalItemDTO} The populated <code>OrderDigitalItemDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDigitalItemDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('slip')) {
                obj['slip'] = ApiClient.convertToType(data['slip'], 'String');
            }
            if (data.hasOwnProperty('activate_till')) {
                obj['activate_till'] = ApiClient.convertToType(data['activate_till'], 'Date');
            }
        }
        return obj;
    }
}



export default OrderDigitalItemDTO;

