/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateUnitedNettingReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateUnitedNettingReportRequest::GenerateUnitedNettingReportRequest()
{
    m_BusinessId = 0L;
    m_BusinessIdIsSet = false;
    m_DateTimeFrom = utility::datetime();
    m_DateTimeFromIsSet = false;
    m_DateTimeTo = utility::datetime();
    m_DateTimeToIsSet = false;
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    m_BankOrderId = 0L;
    m_BankOrderIdIsSet = false;
    m_BankOrderDateTime = utility::datetime();
    m_BankOrderDateTimeIsSet = false;
    m_PlacementProgramsIsSet = false;
    m_InnsIsSet = false;
    m_CampaignIdsIsSet = false;
}

GenerateUnitedNettingReportRequest::~GenerateUnitedNettingReportRequest()
{
}

void GenerateUnitedNettingReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value GenerateUnitedNettingReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BusinessIdIsSet)
    {
        val[utility::conversions::to_string_t(U("businessId"))] = ModelBase::toJson(m_BusinessId);
    }
    if(m_DateTimeFromIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTimeFrom"))] = ModelBase::toJson(m_DateTimeFrom);
    }
    if(m_DateTimeToIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTimeTo"))] = ModelBase::toJson(m_DateTimeTo);
    }
    if(m_DateFromIsSet)
    {
        val[utility::conversions::to_string_t(U("dateFrom"))] = ModelBase::toJson(m_DateFrom);
    }
    if(m_DateToIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTo"))] = ModelBase::toJson(m_DateTo);
    }
    if(m_BankOrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("bankOrderId"))] = ModelBase::toJson(m_BankOrderId);
    }
    if(m_BankOrderDateTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("bankOrderDateTime"))] = ModelBase::toJson(m_BankOrderDateTime);
    }
    if(m_PlacementProgramsIsSet)
    {
        val[utility::conversions::to_string_t(U("placementPrograms"))] = ModelBase::toJson(m_PlacementPrograms);
    }
    if(m_InnsIsSet)
    {
        val[utility::conversions::to_string_t(U("inns"))] = ModelBase::toJson(m_Inns);
    }
    if(m_CampaignIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignIds"))] = ModelBase::toJson(m_CampaignIds);
    }

    return val;
}

bool GenerateUnitedNettingReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("businessId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("businessId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBusinessId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessId);
            setBusinessId(refVal_setBusinessId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTimeFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTimeFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTimeFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTimeFrom);
            setDateTimeFrom(refVal_setDateTimeFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTimeTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTimeTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTimeTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTimeTo);
            setDateTimeTo(refVal_setDateTimeTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFrom);
            setDateFrom(refVal_setDateFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTo);
            setDateTo(refVal_setDateTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bankOrderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bankOrderId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBankOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBankOrderId);
            setBankOrderId(refVal_setBankOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bankOrderDateTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bankOrderDateTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setBankOrderDateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBankOrderDateTime);
            setBankOrderDateTime(refVal_setBankOrderDateTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placementPrograms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placementPrograms")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PlacementType>> refVal_setPlacementPrograms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacementPrograms);
            setPlacementPrograms(refVal_setPlacementPrograms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inns"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inns")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInns;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInns);
            setInns(refVal_setInns);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaignIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setCampaignIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignIds);
            setCampaignIds(refVal_setCampaignIds);
        }
    }
    return ok;
}

void GenerateUnitedNettingReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BusinessIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("businessId")), m_BusinessId));
    }
    if(m_DateTimeFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTimeFrom")), m_DateTimeFrom));
    }
    if(m_DateTimeToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTimeTo")), m_DateTimeTo));
    }
    if(m_DateFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateFrom")), m_DateFrom));
    }
    if(m_DateToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTo")), m_DateTo));
    }
    if(m_BankOrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bankOrderId")), m_BankOrderId));
    }
    if(m_BankOrderDateTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bankOrderDateTime")), m_BankOrderDateTime));
    }
    if(m_PlacementProgramsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placementPrograms")), m_PlacementPrograms));
    }
    if(m_InnsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inns")), m_Inns));
    }
    if(m_CampaignIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignIds")), m_CampaignIds));
    }
}

bool GenerateUnitedNettingReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("businessId"))))
    {
        int64_t refVal_setBusinessId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("businessId"))), refVal_setBusinessId );
        setBusinessId(refVal_setBusinessId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTimeFrom"))))
    {
        utility::datetime refVal_setDateTimeFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTimeFrom"))), refVal_setDateTimeFrom );
        setDateTimeFrom(refVal_setDateTimeFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTimeTo"))))
    {
        utility::datetime refVal_setDateTimeTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTimeTo"))), refVal_setDateTimeTo );
        setDateTimeTo(refVal_setDateTimeTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateFrom"))))
    {
        utility::datetime refVal_setDateFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateFrom"))), refVal_setDateFrom );
        setDateFrom(refVal_setDateFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTo"))))
    {
        utility::datetime refVal_setDateTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTo"))), refVal_setDateTo );
        setDateTo(refVal_setDateTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bankOrderId"))))
    {
        int64_t refVal_setBankOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bankOrderId"))), refVal_setBankOrderId );
        setBankOrderId(refVal_setBankOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bankOrderDateTime"))))
    {
        utility::datetime refVal_setBankOrderDateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bankOrderDateTime"))), refVal_setBankOrderDateTime );
        setBankOrderDateTime(refVal_setBankOrderDateTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placementPrograms"))))
    {
        std::vector<std::shared_ptr<PlacementType>> refVal_setPlacementPrograms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placementPrograms"))), refVal_setPlacementPrograms );
        setPlacementPrograms(refVal_setPlacementPrograms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inns"))))
    {
        std::vector<utility::string_t> refVal_setInns;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inns"))), refVal_setInns );
        setInns(refVal_setInns);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignIds"))))
    {
        std::vector<int64_t> refVal_setCampaignIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignIds"))), refVal_setCampaignIds );
        setCampaignIds(refVal_setCampaignIds);
    }
    return ok;
}

int64_t GenerateUnitedNettingReportRequest::getBusinessId() const
{
    return m_BusinessId;
}

void GenerateUnitedNettingReportRequest::setBusinessId(int64_t value)
{
    m_BusinessId = value;
    m_BusinessIdIsSet = true;
}

bool GenerateUnitedNettingReportRequest::businessIdIsSet() const
{
    return m_BusinessIdIsSet;
}

void GenerateUnitedNettingReportRequest::unsetBusinessId()
{
    m_BusinessIdIsSet = false;
}
utility::datetime GenerateUnitedNettingReportRequest::getDateTimeFrom() const
{
    return m_DateTimeFrom;
}

void GenerateUnitedNettingReportRequest::setDateTimeFrom(const utility::datetime& value)
{
    m_DateTimeFrom = value;
    m_DateTimeFromIsSet = true;
}

bool GenerateUnitedNettingReportRequest::dateTimeFromIsSet() const
{
    return m_DateTimeFromIsSet;
}

void GenerateUnitedNettingReportRequest::unsetDateTimeFrom()
{
    m_DateTimeFromIsSet = false;
}
utility::datetime GenerateUnitedNettingReportRequest::getDateTimeTo() const
{
    return m_DateTimeTo;
}

void GenerateUnitedNettingReportRequest::setDateTimeTo(const utility::datetime& value)
{
    m_DateTimeTo = value;
    m_DateTimeToIsSet = true;
}

bool GenerateUnitedNettingReportRequest::dateTimeToIsSet() const
{
    return m_DateTimeToIsSet;
}

void GenerateUnitedNettingReportRequest::unsetDateTimeTo()
{
    m_DateTimeToIsSet = false;
}
utility::datetime GenerateUnitedNettingReportRequest::getDateFrom() const
{
    return m_DateFrom;
}

void GenerateUnitedNettingReportRequest::setDateFrom(const utility::datetime& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}

bool GenerateUnitedNettingReportRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}

void GenerateUnitedNettingReportRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
utility::datetime GenerateUnitedNettingReportRequest::getDateTo() const
{
    return m_DateTo;
}

void GenerateUnitedNettingReportRequest::setDateTo(const utility::datetime& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}

bool GenerateUnitedNettingReportRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}

void GenerateUnitedNettingReportRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
int64_t GenerateUnitedNettingReportRequest::getBankOrderId() const
{
    return m_BankOrderId;
}

void GenerateUnitedNettingReportRequest::setBankOrderId(int64_t value)
{
    m_BankOrderId = value;
    m_BankOrderIdIsSet = true;
}

bool GenerateUnitedNettingReportRequest::bankOrderIdIsSet() const
{
    return m_BankOrderIdIsSet;
}

void GenerateUnitedNettingReportRequest::unsetBankOrderId()
{
    m_BankOrderIdIsSet = false;
}
utility::datetime GenerateUnitedNettingReportRequest::getBankOrderDateTime() const
{
    return m_BankOrderDateTime;
}

void GenerateUnitedNettingReportRequest::setBankOrderDateTime(const utility::datetime& value)
{
    m_BankOrderDateTime = value;
    m_BankOrderDateTimeIsSet = true;
}

bool GenerateUnitedNettingReportRequest::bankOrderDateTimeIsSet() const
{
    return m_BankOrderDateTimeIsSet;
}

void GenerateUnitedNettingReportRequest::unsetBankOrderDateTime()
{
    m_BankOrderDateTimeIsSet = false;
}
std::vector<std::shared_ptr<PlacementType>>& GenerateUnitedNettingReportRequest::getPlacementPrograms()
{
    return m_PlacementPrograms;
}

void GenerateUnitedNettingReportRequest::setPlacementPrograms(const std::vector<std::shared_ptr<PlacementType>>& value)
{
    m_PlacementPrograms = value;
    m_PlacementProgramsIsSet = true;
}

bool GenerateUnitedNettingReportRequest::placementProgramsIsSet() const
{
    return m_PlacementProgramsIsSet;
}

void GenerateUnitedNettingReportRequest::unsetPlacementPrograms()
{
    m_PlacementProgramsIsSet = false;
}
std::vector<utility::string_t>& GenerateUnitedNettingReportRequest::getInns()
{
    return m_Inns;
}

void GenerateUnitedNettingReportRequest::setInns(const std::vector<utility::string_t>& value)
{
    m_Inns = value;
    m_InnsIsSet = true;
}

bool GenerateUnitedNettingReportRequest::innsIsSet() const
{
    return m_InnsIsSet;
}

void GenerateUnitedNettingReportRequest::unsetInns()
{
    m_InnsIsSet = false;
}
std::vector<int64_t>& GenerateUnitedNettingReportRequest::getCampaignIds()
{
    return m_CampaignIds;
}

void GenerateUnitedNettingReportRequest::setCampaignIds(std::vector<int64_t> value)
{
    m_CampaignIds = value;
    m_CampaignIdsIsSet = true;
}

bool GenerateUnitedNettingReportRequest::campaignIdsIsSet() const
{
    return m_CampaignIdsIsSet;
}

void GenerateUnitedNettingReportRequest::unsetCampaignIds()
{
    m_CampaignIdsIsSet = false;
}
}
}
}
}


