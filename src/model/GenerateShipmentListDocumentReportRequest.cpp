/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GenerateShipmentListDocumentReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GenerateShipmentListDocumentReportRequest::GenerateShipmentListDocumentReportRequest()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_ShipmentId = 0L;
    m_ShipmentIdIsSet = false;
    m_OrderIdsIsSet = false;
}

GenerateShipmentListDocumentReportRequest::~GenerateShipmentListDocumentReportRequest()
{
}

void GenerateShipmentListDocumentReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value GenerateShipmentListDocumentReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_ShipmentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentId"))] = ModelBase::toJson(m_ShipmentId);
    }
    if(m_OrderIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("orderIds"))] = ModelBase::toJson(m_OrderIds);
    }

    return val;
}

bool GenerateShipmentListDocumentReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setShipmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentId);
            setShipmentId(refVal_setShipmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setOrderIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderIds);
            setOrderIds(refVal_setOrderIds);
        }
    }
    return ok;
}

void GenerateShipmentListDocumentReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_ShipmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentId")), m_ShipmentId));
    }
    if(m_OrderIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderIds")), m_OrderIds));
    }
}

bool GenerateShipmentListDocumentReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentId"))))
    {
        int64_t refVal_setShipmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentId"))), refVal_setShipmentId );
        setShipmentId(refVal_setShipmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderIds"))))
    {
        std::vector<int64_t> refVal_setOrderIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderIds"))), refVal_setOrderIds );
        setOrderIds(refVal_setOrderIds);
    }
    return ok;
}

int64_t GenerateShipmentListDocumentReportRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GenerateShipmentListDocumentReportRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool GenerateShipmentListDocumentReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void GenerateShipmentListDocumentReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
int64_t GenerateShipmentListDocumentReportRequest::getShipmentId() const
{
    return m_ShipmentId;
}

void GenerateShipmentListDocumentReportRequest::setShipmentId(int64_t value)
{
    m_ShipmentId = value;
    m_ShipmentIdIsSet = true;
}

bool GenerateShipmentListDocumentReportRequest::shipmentIdIsSet() const
{
    return m_ShipmentIdIsSet;
}

void GenerateShipmentListDocumentReportRequest::unsetShipmentId()
{
    m_ShipmentIdIsSet = false;
}
std::vector<int64_t>& GenerateShipmentListDocumentReportRequest::getOrderIds()
{
    return m_OrderIds;
}

void GenerateShipmentListDocumentReportRequest::setOrderIds(std::vector<int64_t> value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}

bool GenerateShipmentListDocumentReportRequest::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}

void GenerateShipmentListDocumentReportRequest::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}
}
}
}
}


