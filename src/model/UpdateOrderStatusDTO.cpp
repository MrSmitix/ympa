/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/UpdateOrderStatusDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateOrderStatusDTO::UpdateOrderStatusDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_SubstatusIsSet = false;
    m_UpdateStatusIsSet = false;
    m_ErrorDetails = utility::conversions::to_string_t("");
    m_ErrorDetailsIsSet = false;
}

UpdateOrderStatusDTO::~UpdateOrderStatusDTO()
{
}

void UpdateOrderStatusDTO::validate()
{
    // TODO: implement validation
}

web::json::value UpdateOrderStatusDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_SubstatusIsSet)
    {
        val[utility::conversions::to_string_t(U("substatus"))] = ModelBase::toJson(m_Substatus);
    }
    if(m_UpdateStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("updateStatus"))] = ModelBase::toJson(m_UpdateStatus);
    }
    if(m_ErrorDetailsIsSet)
    {
        val[utility::conversions::to_string_t(U("errorDetails"))] = ModelBase::toJson(m_ErrorDetails);
    }

    return val;
}

bool UpdateOrderStatusDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("substatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("substatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderSubstatusType> refVal_setSubstatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubstatus);
            setSubstatus(refVal_setSubstatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderUpdateStatusType> refVal_setUpdateStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateStatus);
            setUpdateStatus(refVal_setUpdateStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errorDetails"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errorDetails")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setErrorDetails;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrorDetails);
            setErrorDetails(refVal_setErrorDetails);
        }
    }
    return ok;
}

void UpdateOrderStatusDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_SubstatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("substatus")), m_Substatus));
    }
    if(m_UpdateStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateStatus")), m_UpdateStatus));
    }
    if(m_ErrorDetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errorDetails")), m_ErrorDetails));
    }
}

bool UpdateOrderStatusDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<OrderStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("substatus"))))
    {
        std::shared_ptr<OrderSubstatusType> refVal_setSubstatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("substatus"))), refVal_setSubstatus );
        setSubstatus(refVal_setSubstatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateStatus"))))
    {
        std::shared_ptr<OrderUpdateStatusType> refVal_setUpdateStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateStatus"))), refVal_setUpdateStatus );
        setUpdateStatus(refVal_setUpdateStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errorDetails"))))
    {
        utility::string_t refVal_setErrorDetails;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errorDetails"))), refVal_setErrorDetails );
        setErrorDetails(refVal_setErrorDetails);
    }
    return ok;
}

int64_t UpdateOrderStatusDTO::getId() const
{
    return m_Id;
}

void UpdateOrderStatusDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UpdateOrderStatusDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UpdateOrderStatusDTO::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<OrderStatusType> UpdateOrderStatusDTO::getStatus() const
{
    return m_Status;
}

void UpdateOrderStatusDTO::setStatus(const std::shared_ptr<OrderStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool UpdateOrderStatusDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void UpdateOrderStatusDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<OrderSubstatusType> UpdateOrderStatusDTO::getSubstatus() const
{
    return m_Substatus;
}

void UpdateOrderStatusDTO::setSubstatus(const std::shared_ptr<OrderSubstatusType>& value)
{
    m_Substatus = value;
    m_SubstatusIsSet = true;
}

bool UpdateOrderStatusDTO::substatusIsSet() const
{
    return m_SubstatusIsSet;
}

void UpdateOrderStatusDTO::unsetSubstatus()
{
    m_SubstatusIsSet = false;
}
std::shared_ptr<OrderUpdateStatusType> UpdateOrderStatusDTO::getUpdateStatus() const
{
    return m_UpdateStatus;
}

void UpdateOrderStatusDTO::setUpdateStatus(const std::shared_ptr<OrderUpdateStatusType>& value)
{
    m_UpdateStatus = value;
    m_UpdateStatusIsSet = true;
}

bool UpdateOrderStatusDTO::updateStatusIsSet() const
{
    return m_UpdateStatusIsSet;
}

void UpdateOrderStatusDTO::unsetUpdateStatus()
{
    m_UpdateStatusIsSet = false;
}
utility::string_t UpdateOrderStatusDTO::getErrorDetails() const
{
    return m_ErrorDetails;
}

void UpdateOrderStatusDTO::setErrorDetails(const utility::string_t& value)
{
    m_ErrorDetails = value;
    m_ErrorDetailsIsSet = true;
}

bool UpdateOrderStatusDTO::errorDetailsIsSet() const
{
    return m_ErrorDetailsIsSet;
}

void UpdateOrderStatusDTO::unsetErrorDetails()
{
    m_ErrorDetailsIsSet = false;
}
}
}
}
}


