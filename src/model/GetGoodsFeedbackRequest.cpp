/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetGoodsFeedbackRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetGoodsFeedbackRequest::GetGoodsFeedbackRequest()
{
    m_DateTimeFrom = utility::datetime();
    m_DateTimeFromIsSet = false;
    m_DateTimeTo = utility::datetime();
    m_DateTimeToIsSet = false;
    m_ReactionStatusIsSet = false;
    m_RatingValuesIsSet = false;
    m_ModelIdsIsSet = false;
    m_Paid = false;
    m_PaidIsSet = false;
}

GetGoodsFeedbackRequest::~GetGoodsFeedbackRequest()
{
}

void GetGoodsFeedbackRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetGoodsFeedbackRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DateTimeFromIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTimeFrom"))] = ModelBase::toJson(m_DateTimeFrom);
    }
    if(m_DateTimeToIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTimeTo"))] = ModelBase::toJson(m_DateTimeTo);
    }
    if(m_ReactionStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("reactionStatus"))] = ModelBase::toJson(m_ReactionStatus);
    }
    if(m_RatingValuesIsSet)
    {
        val[utility::conversions::to_string_t(U("ratingValues"))] = ModelBase::toJson(m_RatingValues);
    }
    if(m_ModelIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("modelIds"))] = ModelBase::toJson(m_ModelIds);
    }
    if(m_PaidIsSet)
    {
        val[utility::conversions::to_string_t(U("paid"))] = ModelBase::toJson(m_Paid);
    }

    return val;
}

bool GetGoodsFeedbackRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("dateTimeFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTimeFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTimeFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTimeFrom);
            setDateTimeFrom(refVal_setDateTimeFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTimeTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTimeTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTimeTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTimeTo);
            setDateTimeTo(refVal_setDateTimeTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reactionStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reactionStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedbackReactionStatusType> refVal_setReactionStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReactionStatus);
            setReactionStatus(refVal_setReactionStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ratingValues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ratingValues")));
        if(!fieldValue.is_null())
        {
            std::set<int32_t> refVal_setRatingValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRatingValues);
            setRatingValues(refVal_setRatingValues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modelIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modelIds")));
        if(!fieldValue.is_null())
        {
            std::set<int64_t> refVal_setModelIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModelIds);
            setModelIds(refVal_setModelIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPaid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaid);
            setPaid(refVal_setPaid);
        }
    }
    return ok;
}

void GetGoodsFeedbackRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DateTimeFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTimeFrom")), m_DateTimeFrom));
    }
    if(m_DateTimeToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTimeTo")), m_DateTimeTo));
    }
    if(m_ReactionStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reactionStatus")), m_ReactionStatus));
    }
    if(m_RatingValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ratingValues")), m_RatingValues));
    }
    if(m_ModelIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modelIds")), m_ModelIds));
    }
    if(m_PaidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paid")), m_Paid));
    }
}

bool GetGoodsFeedbackRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTimeFrom"))))
    {
        utility::datetime refVal_setDateTimeFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTimeFrom"))), refVal_setDateTimeFrom );
        setDateTimeFrom(refVal_setDateTimeFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTimeTo"))))
    {
        utility::datetime refVal_setDateTimeTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTimeTo"))), refVal_setDateTimeTo );
        setDateTimeTo(refVal_setDateTimeTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reactionStatus"))))
    {
        std::shared_ptr<FeedbackReactionStatusType> refVal_setReactionStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reactionStatus"))), refVal_setReactionStatus );
        setReactionStatus(refVal_setReactionStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ratingValues"))))
    {
        std::set<int32_t> refVal_setRatingValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ratingValues"))), refVal_setRatingValues );
        setRatingValues(refVal_setRatingValues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modelIds"))))
    {
        std::set<int64_t> refVal_setModelIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modelIds"))), refVal_setModelIds );
        setModelIds(refVal_setModelIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paid"))))
    {
        bool refVal_setPaid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paid"))), refVal_setPaid );
        setPaid(refVal_setPaid);
    }
    return ok;
}

utility::datetime GetGoodsFeedbackRequest::getDateTimeFrom() const
{
    return m_DateTimeFrom;
}

void GetGoodsFeedbackRequest::setDateTimeFrom(const utility::datetime& value)
{
    m_DateTimeFrom = value;
    m_DateTimeFromIsSet = true;
}

bool GetGoodsFeedbackRequest::dateTimeFromIsSet() const
{
    return m_DateTimeFromIsSet;
}

void GetGoodsFeedbackRequest::unsetDateTimeFrom()
{
    m_DateTimeFromIsSet = false;
}
utility::datetime GetGoodsFeedbackRequest::getDateTimeTo() const
{
    return m_DateTimeTo;
}

void GetGoodsFeedbackRequest::setDateTimeTo(const utility::datetime& value)
{
    m_DateTimeTo = value;
    m_DateTimeToIsSet = true;
}

bool GetGoodsFeedbackRequest::dateTimeToIsSet() const
{
    return m_DateTimeToIsSet;
}

void GetGoodsFeedbackRequest::unsetDateTimeTo()
{
    m_DateTimeToIsSet = false;
}
std::shared_ptr<FeedbackReactionStatusType> GetGoodsFeedbackRequest::getReactionStatus() const
{
    return m_ReactionStatus;
}

void GetGoodsFeedbackRequest::setReactionStatus(const std::shared_ptr<FeedbackReactionStatusType>& value)
{
    m_ReactionStatus = value;
    m_ReactionStatusIsSet = true;
}

bool GetGoodsFeedbackRequest::reactionStatusIsSet() const
{
    return m_ReactionStatusIsSet;
}

void GetGoodsFeedbackRequest::unsetReactionStatus()
{
    m_ReactionStatusIsSet = false;
}
std::set<int32_t>& GetGoodsFeedbackRequest::getRatingValues()
{
    return m_RatingValues;
}

void GetGoodsFeedbackRequest::setRatingValues(std::set<int32_t> value)
{
    m_RatingValues = value;
    m_RatingValuesIsSet = true;
}

bool GetGoodsFeedbackRequest::ratingValuesIsSet() const
{
    return m_RatingValuesIsSet;
}

void GetGoodsFeedbackRequest::unsetRatingValues()
{
    m_RatingValuesIsSet = false;
}
std::set<int64_t>& GetGoodsFeedbackRequest::getModelIds()
{
    return m_ModelIds;
}

void GetGoodsFeedbackRequest::setModelIds(std::set<int64_t> value)
{
    m_ModelIds = value;
    m_ModelIdsIsSet = true;
}

bool GetGoodsFeedbackRequest::modelIdsIsSet() const
{
    return m_ModelIdsIsSet;
}

void GetGoodsFeedbackRequest::unsetModelIds()
{
    m_ModelIdsIsSet = false;
}
bool GetGoodsFeedbackRequest::isPaid() const
{
    return m_Paid;
}

void GetGoodsFeedbackRequest::setPaid(bool value)
{
    m_Paid = value;
    m_PaidIsSet = true;
}

bool GetGoodsFeedbackRequest::paidIsSet() const
{
    return m_PaidIsSet;
}

void GetGoodsFeedbackRequest::unsetPaid()
{
    m_PaidIsSet = false;
}
}
}
}
}


