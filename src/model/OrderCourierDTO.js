/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderCourierDTO model module.
 * @module model/OrderCourierDTO
 * @version LATEST
 */
class OrderCourierDTO {
    /**
     * Constructs a new <code>OrderCourierDTO</code>.
     * Информация о курьере.
     * @alias module:model/OrderCourierDTO
     */
    constructor() { 
        
        OrderCourierDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderCourierDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderCourierDTO} obj Optional instance to populate.
     * @return {module:model/OrderCourierDTO} The populated <code>OrderCourierDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderCourierDTO();

            if (data.hasOwnProperty('fullName')) {
                obj['fullName'] = ApiClient.convertToType(data['fullName'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('phoneExtension')) {
                obj['phoneExtension'] = ApiClient.convertToType(data['phoneExtension'], 'String');
            }
            if (data.hasOwnProperty('vehicleNumber')) {
                obj['vehicleNumber'] = ApiClient.convertToType(data['vehicleNumber'], 'String');
            }
            if (data.hasOwnProperty('vehicleDescription')) {
                obj['vehicleDescription'] = ApiClient.convertToType(data['vehicleDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderCourierDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderCourierDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fullName'] && !(typeof data['fullName'] === 'string' || data['fullName'] instanceof String)) {
            throw new Error("Expected the field `fullName` to be a primitive type in the JSON string but got " + data['fullName']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['phoneExtension'] && !(typeof data['phoneExtension'] === 'string' || data['phoneExtension'] instanceof String)) {
            throw new Error("Expected the field `phoneExtension` to be a primitive type in the JSON string but got " + data['phoneExtension']);
        }
        // ensure the json data is a string
        if (data['vehicleNumber'] && !(typeof data['vehicleNumber'] === 'string' || data['vehicleNumber'] instanceof String)) {
            throw new Error("Expected the field `vehicleNumber` to be a primitive type in the JSON string but got " + data['vehicleNumber']);
        }
        // ensure the json data is a string
        if (data['vehicleDescription'] && !(typeof data['vehicleDescription'] === 'string' || data['vehicleDescription'] instanceof String)) {
            throw new Error("Expected the field `vehicleDescription` to be a primitive type in the JSON string but got " + data['vehicleDescription']);
        }

        return true;
    }


}



/**
 * Полное имя курьера.
 * @member {String} fullName
 */
OrderCourierDTO.prototype['fullName'] = undefined;

/**
 * Номер телефона курьера.
 * @member {String} phone
 */
OrderCourierDTO.prototype['phone'] = undefined;

/**
 * Добавочный номер телефона.
 * @member {String} phoneExtension
 */
OrderCourierDTO.prototype['phoneExtension'] = undefined;

/**
 * Номер транспортного средства.
 * @member {String} vehicleNumber
 */
OrderCourierDTO.prototype['vehicleNumber'] = undefined;

/**
 * Описание машины. Например, модель и цвет.
 * @member {String} vehicleDescription
 */
OrderCourierDTO.prototype['vehicleDescription'] = undefined;






export default OrderCourierDTO;

