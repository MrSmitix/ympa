/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/SuggestedOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SuggestedOfferDTO::SuggestedOfferDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_Vendor = utility::conversions::to_string_t("");
    m_VendorIsSet = false;
    m_BarcodesIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_VendorCode = utility::conversions::to_string_t("");
    m_VendorCodeIsSet = false;
    m_BasicPriceIsSet = false;
}

SuggestedOfferDTO::~SuggestedOfferDTO()
{
}

void SuggestedOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value SuggestedOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }
    if(m_VendorIsSet)
    {
        val[utility::conversions::to_string_t(U("vendor"))] = ModelBase::toJson(m_Vendor);
    }
    if(m_BarcodesIsSet)
    {
        val[utility::conversions::to_string_t(U("barcodes"))] = ModelBase::toJson(m_Barcodes);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_VendorCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("vendorCode"))] = ModelBase::toJson(m_VendorCode);
    }
    if(m_BasicPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("basicPrice"))] = ModelBase::toJson(m_BasicPrice);
    }

    return val;
}

bool SuggestedOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendor);
            setVendor(refVal_setVendor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("barcodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("barcodes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBarcodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBarcodes);
            setBarcodes(refVal_setBarcodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendorCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendorCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendorCode);
            setVendorCode(refVal_setVendorCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("basicPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("basicPrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setBasicPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBasicPrice);
            setBasicPrice(refVal_setBasicPrice);
        }
    }
    return ok;
}

void SuggestedOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
    if(m_VendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendor")), m_Vendor));
    }
    if(m_BarcodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("barcodes")), m_Barcodes));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_VendorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendorCode")), m_VendorCode));
    }
    if(m_BasicPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("basicPrice")), m_BasicPrice));
    }
}

bool SuggestedOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        utility::string_t refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendor"))))
    {
        utility::string_t refVal_setVendor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendor"))), refVal_setVendor );
        setVendor(refVal_setVendor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("barcodes"))))
    {
        std::vector<utility::string_t> refVal_setBarcodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("barcodes"))), refVal_setBarcodes );
        setBarcodes(refVal_setBarcodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendorCode"))))
    {
        utility::string_t refVal_setVendorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendorCode"))), refVal_setVendorCode );
        setVendorCode(refVal_setVendorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("basicPrice"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setBasicPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("basicPrice"))), refVal_setBasicPrice );
        setBasicPrice(refVal_setBasicPrice);
    }
    return ok;
}

utility::string_t SuggestedOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void SuggestedOfferDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool SuggestedOfferDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void SuggestedOfferDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
utility::string_t SuggestedOfferDTO::getName() const
{
    return m_Name;
}

void SuggestedOfferDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SuggestedOfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void SuggestedOfferDTO::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SuggestedOfferDTO::getCategory() const
{
    return m_Category;
}

void SuggestedOfferDTO::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool SuggestedOfferDTO::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void SuggestedOfferDTO::unsetCategory()
{
    m_CategoryIsSet = false;
}
utility::string_t SuggestedOfferDTO::getVendor() const
{
    return m_Vendor;
}

void SuggestedOfferDTO::setVendor(const utility::string_t& value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}

bool SuggestedOfferDTO::vendorIsSet() const
{
    return m_VendorIsSet;
}

void SuggestedOfferDTO::unsetVendor()
{
    m_VendorIsSet = false;
}
std::vector<utility::string_t>& SuggestedOfferDTO::getBarcodes()
{
    return m_Barcodes;
}

void SuggestedOfferDTO::setBarcodes(const std::vector<utility::string_t>& value)
{
    m_Barcodes = value;
    m_BarcodesIsSet = true;
}

bool SuggestedOfferDTO::barcodesIsSet() const
{
    return m_BarcodesIsSet;
}

void SuggestedOfferDTO::unsetBarcodes()
{
    m_BarcodesIsSet = false;
}
utility::string_t SuggestedOfferDTO::getDescription() const
{
    return m_Description;
}

void SuggestedOfferDTO::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool SuggestedOfferDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void SuggestedOfferDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t SuggestedOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}

void SuggestedOfferDTO::setVendorCode(const utility::string_t& value)
{
    m_VendorCode = value;
    m_VendorCodeIsSet = true;
}

bool SuggestedOfferDTO::vendorCodeIsSet() const
{
    return m_VendorCodeIsSet;
}

void SuggestedOfferDTO::unsetVendorCode()
{
    m_VendorCodeIsSet = false;
}
std::shared_ptr<BasePriceDTO> SuggestedOfferDTO::getBasicPrice() const
{
    return m_BasicPrice;
}

void SuggestedOfferDTO::setBasicPrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_BasicPrice = value;
    m_BasicPriceIsSet = true;
}

bool SuggestedOfferDTO::basicPriceIsSet() const
{
    return m_BasicPriceIsSet;
}

void SuggestedOfferDTO::unsetBasicPrice()
{
    m_BasicPriceIsSet = false;
}
}
}
}
}


