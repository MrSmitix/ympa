/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedIndexLogsFeedDTO from './FeedIndexLogsFeedDTO';
import FeedIndexLogsRecordDTO from './FeedIndexLogsRecordDTO';

/**
 * The FeedIndexLogsResultDTO model module.
 * @module model/FeedIndexLogsResultDTO
 * @version LATEST
 */
class FeedIndexLogsResultDTO {
    /**
     * Constructs a new <code>FeedIndexLogsResultDTO</code>.
     * Результат выполнения запроса отчета по индексации прайс-листа.
     * @alias module:model/FeedIndexLogsResultDTO
     * @param indexLogRecords {Array.<module:model/FeedIndexLogsRecordDTO>} Список отчетов по индексации прайс-листа.
     */
    constructor(indexLogRecords) { 
        
        FeedIndexLogsResultDTO.initialize(this, indexLogRecords);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, indexLogRecords) { 
        obj['indexLogRecords'] = indexLogRecords;
    }

    /**
     * Constructs a <code>FeedIndexLogsResultDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedIndexLogsResultDTO} obj Optional instance to populate.
     * @return {module:model/FeedIndexLogsResultDTO} The populated <code>FeedIndexLogsResultDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedIndexLogsResultDTO();

            if (data.hasOwnProperty('feed')) {
                obj['feed'] = FeedIndexLogsFeedDTO.constructFromObject(data['feed']);
            }
            if (data.hasOwnProperty('indexLogRecords')) {
                obj['indexLogRecords'] = ApiClient.convertToType(data['indexLogRecords'], [FeedIndexLogsRecordDTO]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedIndexLogsResultDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedIndexLogsResultDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeedIndexLogsResultDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `feed`
        if (data['feed']) { // data not null
          FeedIndexLogsFeedDTO.validateJSON(data['feed']);
        }
        if (data['indexLogRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['indexLogRecords'])) {
                throw new Error("Expected the field `indexLogRecords` to be an array in the JSON data but got " + data['indexLogRecords']);
            }
            // validate the optional field `indexLogRecords` (array)
            for (const item of data['indexLogRecords']) {
                FeedIndexLogsRecordDTO.validateJSON(item);
            };
        }

        return true;
    }


}

FeedIndexLogsResultDTO.RequiredProperties = ["indexLogRecords"];

/**
 * @member {module:model/FeedIndexLogsFeedDTO} feed
 */
FeedIndexLogsResultDTO.prototype['feed'] = undefined;

/**
 * Список отчетов по индексации прайс-листа.
 * @member {Array.<module:model/FeedIndexLogsRecordDTO>} indexLogRecords
 */
FeedIndexLogsResultDTO.prototype['indexLogRecords'] = undefined;

/**
 * Количество отчетов на всех страницах выходных данных.
 * @member {Number} total
 */
FeedIndexLogsResultDTO.prototype['total'] = undefined;






export default FeedIndexLogsResultDTO;

