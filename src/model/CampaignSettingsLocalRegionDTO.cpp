/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CampaignSettingsLocalRegionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CampaignSettingsLocalRegionDTO::CampaignSettingsLocalRegionDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_TypeIsSet = false;
    m_DeliveryOptionsSourceIsSet = false;
    m_DeliveryIsSet = false;
}

CampaignSettingsLocalRegionDTO::~CampaignSettingsLocalRegionDTO()
{
}

void CampaignSettingsLocalRegionDTO::validate()
{
    // TODO: implement validation
}

web::json::value CampaignSettingsLocalRegionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_DeliveryOptionsSourceIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryOptionsSource"))] = ModelBase::toJson(m_DeliveryOptionsSource);
    }
    if(m_DeliveryIsSet)
    {
        val[utility::conversions::to_string_t(U("delivery"))] = ModelBase::toJson(m_Delivery);
    }

    return val;
}

bool CampaignSettingsLocalRegionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RegionType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryOptionsSource"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryOptionsSource")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CampaignSettingsScheduleSourceType> refVal_setDeliveryOptionsSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryOptionsSource);
            setDeliveryOptionsSource(refVal_setDeliveryOptionsSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delivery"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delivery")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CampaignSettingsDeliveryDTO> refVal_setDelivery;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelivery);
            setDelivery(refVal_setDelivery);
        }
    }
    return ok;
}

void CampaignSettingsLocalRegionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_DeliveryOptionsSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryOptionsSource")), m_DeliveryOptionsSource));
    }
    if(m_DeliveryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delivery")), m_Delivery));
    }
}

bool CampaignSettingsLocalRegionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<RegionType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryOptionsSource"))))
    {
        std::shared_ptr<CampaignSettingsScheduleSourceType> refVal_setDeliveryOptionsSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryOptionsSource"))), refVal_setDeliveryOptionsSource );
        setDeliveryOptionsSource(refVal_setDeliveryOptionsSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delivery"))))
    {
        std::shared_ptr<CampaignSettingsDeliveryDTO> refVal_setDelivery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delivery"))), refVal_setDelivery );
        setDelivery(refVal_setDelivery);
    }
    return ok;
}

int64_t CampaignSettingsLocalRegionDTO::getId() const
{
    return m_Id;
}

void CampaignSettingsLocalRegionDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool CampaignSettingsLocalRegionDTO::idIsSet() const
{
    return m_IdIsSet;
}

void CampaignSettingsLocalRegionDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t CampaignSettingsLocalRegionDTO::getName() const
{
    return m_Name;
}

void CampaignSettingsLocalRegionDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CampaignSettingsLocalRegionDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void CampaignSettingsLocalRegionDTO::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<RegionType> CampaignSettingsLocalRegionDTO::getType() const
{
    return m_Type;
}

void CampaignSettingsLocalRegionDTO::setType(const std::shared_ptr<RegionType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool CampaignSettingsLocalRegionDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void CampaignSettingsLocalRegionDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<CampaignSettingsScheduleSourceType> CampaignSettingsLocalRegionDTO::getDeliveryOptionsSource() const
{
    return m_DeliveryOptionsSource;
}

void CampaignSettingsLocalRegionDTO::setDeliveryOptionsSource(const std::shared_ptr<CampaignSettingsScheduleSourceType>& value)
{
    m_DeliveryOptionsSource = value;
    m_DeliveryOptionsSourceIsSet = true;
}

bool CampaignSettingsLocalRegionDTO::deliveryOptionsSourceIsSet() const
{
    return m_DeliveryOptionsSourceIsSet;
}

void CampaignSettingsLocalRegionDTO::unsetDeliveryOptionsSource()
{
    m_DeliveryOptionsSourceIsSet = false;
}
std::shared_ptr<CampaignSettingsDeliveryDTO> CampaignSettingsLocalRegionDTO::getDelivery() const
{
    return m_Delivery;
}

void CampaignSettingsLocalRegionDTO::setDelivery(const std::shared_ptr<CampaignSettingsDeliveryDTO>& value)
{
    m_Delivery = value;
    m_DeliveryIsSet = true;
}

bool CampaignSettingsLocalRegionDTO::deliveryIsSet() const
{
    return m_DeliveryIsSet;
}

void CampaignSettingsLocalRegionDTO::unsetDelivery()
{
    m_DeliveryIsSet = false;
}
}
}
}
}


