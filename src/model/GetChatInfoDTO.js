/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChatStatusType from './ChatStatusType';
import ChatType from './ChatType';

/**
 * The GetChatInfoDTO model module.
 * @module model/GetChatInfoDTO
 * @version LATEST
 */
class GetChatInfoDTO {
    /**
     * Constructs a new <code>GetChatInfoDTO</code>.
     * Информация о чатах.
     * @alias module:model/GetChatInfoDTO
     * @param chatId {Number} Идентификатор чата.
     * @param orderId {Number} Идентификатор заказа.
     * @param type {module:model/ChatType} 
     * @param status {module:model/ChatStatusType} 
     * @param createdAt {Date} Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
     * @param updatedAt {Date} Дата и время последнего сообщения в чате.
     */
    constructor(chatId, orderId, type, status, createdAt, updatedAt) { 
        
        GetChatInfoDTO.initialize(this, chatId, orderId, type, status, createdAt, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, chatId, orderId, type, status, createdAt, updatedAt) { 
        obj['chatId'] = chatId;
        obj['orderId'] = orderId;
        obj['type'] = type;
        obj['status'] = status;
        obj['createdAt'] = createdAt;
        obj['updatedAt'] = updatedAt;
    }

    /**
     * Constructs a <code>GetChatInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetChatInfoDTO} obj Optional instance to populate.
     * @return {module:model/GetChatInfoDTO} The populated <code>GetChatInfoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetChatInfoDTO();

            if (data.hasOwnProperty('chatId')) {
                obj['chatId'] = ApiClient.convertToType(data['chatId'], 'Number');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ChatType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ChatStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetChatInfoDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetChatInfoDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetChatInfoDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

GetChatInfoDTO.RequiredProperties = ["chatId", "orderId", "type", "status", "createdAt", "updatedAt"];

/**
 * Идентификатор чата.
 * @member {Number} chatId
 */
GetChatInfoDTO.prototype['chatId'] = undefined;

/**
 * Идентификатор заказа.
 * @member {Number} orderId
 */
GetChatInfoDTO.prototype['orderId'] = undefined;

/**
 * @member {module:model/ChatType} type
 */
GetChatInfoDTO.prototype['type'] = undefined;

/**
 * @member {module:model/ChatStatusType} status
 */
GetChatInfoDTO.prototype['status'] = undefined;

/**
 * Дата и время создания чата.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @member {Date} createdAt
 */
GetChatInfoDTO.prototype['createdAt'] = undefined;

/**
 * Дата и время последнего сообщения в чате.
 * @member {Date} updatedAt
 */
GetChatInfoDTO.prototype['updatedAt'] = undefined;






export default GetChatInfoDTO;

