/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CalculateTariffsParametersDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CalculateTariffsParametersDTO::CalculateTariffsParametersDTO()
{
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_SellingProgramIsSet = false;
    m_FrequencyIsSet = false;
}

CalculateTariffsParametersDTO::~CalculateTariffsParametersDTO()
{
}

void CalculateTariffsParametersDTO::validate()
{
    // TODO: implement validation
}

web::json::value CalculateTariffsParametersDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_SellingProgramIsSet)
    {
        val[utility::conversions::to_string_t(U("sellingProgram"))] = ModelBase::toJson(m_SellingProgram);
    }
    if(m_FrequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("frequency"))] = ModelBase::toJson(m_Frequency);
    }

    return val;
}

bool CalculateTariffsParametersDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sellingProgram"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sellingProgram")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SellingProgramType> refVal_setSellingProgram;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSellingProgram);
            setSellingProgram(refVal_setSellingProgram);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frequency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PaymentFrequencyType> refVal_setFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrequency);
            setFrequency(refVal_setFrequency);
        }
    }
    return ok;
}

void CalculateTariffsParametersDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_SellingProgramIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sellingProgram")), m_SellingProgram));
    }
    if(m_FrequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frequency")), m_Frequency));
    }
}

bool CalculateTariffsParametersDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sellingProgram"))))
    {
        std::shared_ptr<SellingProgramType> refVal_setSellingProgram;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sellingProgram"))), refVal_setSellingProgram );
        setSellingProgram(refVal_setSellingProgram);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frequency"))))
    {
        std::shared_ptr<PaymentFrequencyType> refVal_setFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frequency"))), refVal_setFrequency );
        setFrequency(refVal_setFrequency);
    }
    return ok;
}

int64_t CalculateTariffsParametersDTO::getCampaignId() const
{
    return m_CampaignId;
}

void CalculateTariffsParametersDTO::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool CalculateTariffsParametersDTO::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void CalculateTariffsParametersDTO::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
std::shared_ptr<SellingProgramType> CalculateTariffsParametersDTO::getSellingProgram() const
{
    return m_SellingProgram;
}

void CalculateTariffsParametersDTO::setSellingProgram(const std::shared_ptr<SellingProgramType>& value)
{
    m_SellingProgram = value;
    m_SellingProgramIsSet = true;
}

bool CalculateTariffsParametersDTO::sellingProgramIsSet() const
{
    return m_SellingProgramIsSet;
}

void CalculateTariffsParametersDTO::unsetSellingProgram()
{
    m_SellingProgramIsSet = false;
}
std::shared_ptr<PaymentFrequencyType> CalculateTariffsParametersDTO::getFrequency() const
{
    return m_Frequency;
}

void CalculateTariffsParametersDTO::setFrequency(const std::shared_ptr<PaymentFrequencyType>& value)
{
    m_Frequency = value;
    m_FrequencyIsSet = true;
}

bool CalculateTariffsParametersDTO::frequencyIsSet() const
{
    return m_FrequencyIsSet;
}

void CalculateTariffsParametersDTO::unsetFrequency()
{
    m_FrequencyIsSet = false;
}
}
}
}
}


