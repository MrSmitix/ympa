/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferSellingProgramStatusType from './OfferSellingProgramStatusType';
import SellingProgramType from './SellingProgramType';

/**
 * The OfferSellingProgramDTO model module.
 * @module model/OfferSellingProgramDTO
 * @version LATEST
 */
class OfferSellingProgramDTO {
    /**
     * @member {module:model/SellingProgramType} sellingProgram
     * @type {module:model/SellingProgramType}
     */
    sellingProgram;
    /**
     * @member {module:model/OfferSellingProgramStatusType} status
     * @type {module:model/OfferSellingProgramStatusType}
     */
    status;

    

    /**
     * Constructs a new <code>OfferSellingProgramDTO</code>.
     * Информация о том, по каким моделям можно продавать товар, а по каким нельзя.
     * @alias module:model/OfferSellingProgramDTO
     * @param sellingProgram {module:model/SellingProgramType} 
     * @param status {module:model/OfferSellingProgramStatusType} 
     */
    constructor(sellingProgram, status) { 
        
        OfferSellingProgramDTO.initialize(this, sellingProgram, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sellingProgram, status) { 
        obj['sellingProgram'] = sellingProgram;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>OfferSellingProgramDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OfferSellingProgramDTO} obj Optional instance to populate.
     * @return {module:model/OfferSellingProgramDTO} The populated <code>OfferSellingProgramDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OfferSellingProgramDTO();

            if (data.hasOwnProperty('sellingProgram')) {
                obj['sellingProgram'] = SellingProgramType.constructFromObject(data['sellingProgram']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OfferSellingProgramStatusType.constructFromObject(data['status']);
            }
        }
        return obj;
    }
}



export default OfferSellingProgramDTO;

