/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/UpdateOfferMappingResultDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateOfferMappingResultDTO::UpdateOfferMappingResultDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_ErrorsIsSet = false;
    m_WarningsIsSet = false;
}

UpdateOfferMappingResultDTO::~UpdateOfferMappingResultDTO()
{
}

void UpdateOfferMappingResultDTO::validate()
{
    // TODO: implement validation
}

web::json::value UpdateOfferMappingResultDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("errors"))] = ModelBase::toJson(m_Errors);
    }
    if(m_WarningsIsSet)
    {
        val[utility::conversions::to_string_t(U("warnings"))] = ModelBase::toJson(m_Warnings);
    }

    return val;
}

bool UpdateOfferMappingResultDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errors")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferMappingErrorDTO>> refVal_setErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrors);
            setErrors(refVal_setErrors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warnings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warnings")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OfferMappingErrorDTO>> refVal_setWarnings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarnings);
            setWarnings(refVal_setWarnings);
        }
    }
    return ok;
}

void UpdateOfferMappingResultDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errors")), m_Errors));
    }
    if(m_WarningsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warnings")), m_Warnings));
    }
}

bool UpdateOfferMappingResultDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errors"))))
    {
        std::vector<std::shared_ptr<OfferMappingErrorDTO>> refVal_setErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errors"))), refVal_setErrors );
        setErrors(refVal_setErrors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warnings"))))
    {
        std::vector<std::shared_ptr<OfferMappingErrorDTO>> refVal_setWarnings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warnings"))), refVal_setWarnings );
        setWarnings(refVal_setWarnings);
    }
    return ok;
}

utility::string_t UpdateOfferMappingResultDTO::getOfferId() const
{
    return m_OfferId;
}

void UpdateOfferMappingResultDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool UpdateOfferMappingResultDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void UpdateOfferMappingResultDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::vector<std::shared_ptr<OfferMappingErrorDTO>>& UpdateOfferMappingResultDTO::getErrors()
{
    return m_Errors;
}

void UpdateOfferMappingResultDTO::setErrors(const std::vector<std::shared_ptr<OfferMappingErrorDTO>>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool UpdateOfferMappingResultDTO::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void UpdateOfferMappingResultDTO::unsetErrors()
{
    m_ErrorsIsSet = false;
}
std::vector<std::shared_ptr<OfferMappingErrorDTO>>& UpdateOfferMappingResultDTO::getWarnings()
{
    return m_Warnings;
}

void UpdateOfferMappingResultDTO::setWarnings(const std::vector<std::shared_ptr<OfferMappingErrorDTO>>& value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}

bool UpdateOfferMappingResultDTO::warningsIsSet() const
{
    return m_WarningsIsSet;
}

void UpdateOfferMappingResultDTO::unsetWarnings()
{
    m_WarningsIsSet = false;
}
}
}
}
}


