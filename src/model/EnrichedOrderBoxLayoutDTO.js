/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderBoxLayoutDTO from './OrderBoxLayoutDTO';
import OrderBoxLayoutItemDTO from './OrderBoxLayoutItemDTO';

/**
 * The EnrichedOrderBoxLayoutDTO model module.
 * @module model/EnrichedOrderBoxLayoutDTO
 * @version LATEST
 */
class EnrichedOrderBoxLayoutDTO {
    /**
     * Constructs a new <code>EnrichedOrderBoxLayoutDTO</code>.
     * Информация о коробке.
     * @alias module:model/EnrichedOrderBoxLayoutDTO
     * @implements module:model/OrderBoxLayoutDTO
     * @param items {Array.<module:model/OrderBoxLayoutItemDTO>} Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 
     */
    constructor(items) { 
        OrderBoxLayoutDTO.initialize(this, items);
        EnrichedOrderBoxLayoutDTO.initialize(this, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items) { 
        obj['items'] = items;
    }

    /**
     * Constructs a <code>EnrichedOrderBoxLayoutDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnrichedOrderBoxLayoutDTO} obj Optional instance to populate.
     * @return {module:model/EnrichedOrderBoxLayoutDTO} The populated <code>EnrichedOrderBoxLayoutDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnrichedOrderBoxLayoutDTO();
            OrderBoxLayoutDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderBoxLayoutItemDTO]);
            }
            if (data.hasOwnProperty('boxId')) {
                obj['boxId'] = ApiClient.convertToType(data['boxId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnrichedOrderBoxLayoutDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnrichedOrderBoxLayoutDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EnrichedOrderBoxLayoutDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderBoxLayoutItemDTO.validateJSON(item);
            };
        }

        return true;
    }


}

EnrichedOrderBoxLayoutDTO.RequiredProperties = ["items"];

/**
 * Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 
 * @member {Array.<module:model/OrderBoxLayoutItemDTO>} items
 */
EnrichedOrderBoxLayoutDTO.prototype['items'] = undefined;

/**
 * Идентификатор коробки.
 * @member {Number} boxId
 */
EnrichedOrderBoxLayoutDTO.prototype['boxId'] = undefined;


// Implement OrderBoxLayoutDTO interface:
/**
 * Список товаров в коробке.  Если в коробке едет часть большого товара, в списке может быть только один пункт. 
 * @member {Array.<module:model/OrderBoxLayoutItemDTO>} items
 */
OrderBoxLayoutDTO.prototype['items'] = undefined;




export default EnrichedOrderBoxLayoutDTO;

