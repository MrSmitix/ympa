/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetOfferCardsContentStatusRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetOfferCardsContentStatusRequest::GetOfferCardsContentStatusRequest()
{
    m_OfferIdsIsSet = false;
    m_CardStatusesIsSet = false;
    m_CategoryIdsIsSet = false;
}

GetOfferCardsContentStatusRequest::~GetOfferCardsContentStatusRequest()
{
}

void GetOfferCardsContentStatusRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetOfferCardsContentStatusRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("offerIds"))] = ModelBase::toJson(m_OfferIds);
    }
    if(m_CardStatusesIsSet)
    {
        val[utility::conversions::to_string_t(U("cardStatuses"))] = ModelBase::toJson(m_CardStatuses);
    }
    if(m_CategoryIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryIds"))] = ModelBase::toJson(m_CategoryIds);
    }

    return val;
}

bool GetOfferCardsContentStatusRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerIds")));
        if(!fieldValue.is_null())
        {
            std::set<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferIds);
            setOfferIds(refVal_setOfferIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cardStatuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cardStatuses")));
        if(!fieldValue.is_null())
        {
            std::set<std::shared_ptr<OfferCardStatusType>> refVal_setCardStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCardStatuses);
            setCardStatuses(refVal_setCardStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryIds")));
        if(!fieldValue.is_null())
        {
            std::set<int32_t> refVal_setCategoryIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryIds);
            setCategoryIds(refVal_setCategoryIds);
        }
    }
    return ok;
}

void GetOfferCardsContentStatusRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerIds")), m_OfferIds));
    }
    if(m_CardStatusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cardStatuses")), m_CardStatuses));
    }
    if(m_CategoryIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryIds")), m_CategoryIds));
    }
}

bool GetOfferCardsContentStatusRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerIds"))))
    {
        std::set<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerIds"))), refVal_setOfferIds );
        setOfferIds(refVal_setOfferIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cardStatuses"))))
    {
        std::set<std::shared_ptr<OfferCardStatusType>> refVal_setCardStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cardStatuses"))), refVal_setCardStatuses );
        setCardStatuses(refVal_setCardStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryIds"))))
    {
        std::set<int32_t> refVal_setCategoryIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryIds"))), refVal_setCategoryIds );
        setCategoryIds(refVal_setCategoryIds);
    }
    return ok;
}

std::set<std::shared_ptr<utility::string_t>>& GetOfferCardsContentStatusRequest::getOfferIds()
{
    return m_OfferIds;
}

void GetOfferCardsContentStatusRequest::setOfferIds(const std::set<std::shared_ptr<utility::string_t>>& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}

bool GetOfferCardsContentStatusRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}

void GetOfferCardsContentStatusRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}
std::set<std::shared_ptr<OfferCardStatusType>>& GetOfferCardsContentStatusRequest::getCardStatuses()
{
    return m_CardStatuses;
}

void GetOfferCardsContentStatusRequest::setCardStatuses(const std::set<std::shared_ptr<OfferCardStatusType>>& value)
{
    m_CardStatuses = value;
    m_CardStatusesIsSet = true;
}

bool GetOfferCardsContentStatusRequest::cardStatusesIsSet() const
{
    return m_CardStatusesIsSet;
}

void GetOfferCardsContentStatusRequest::unsetCardStatuses()
{
    m_CardStatusesIsSet = false;
}
std::set<int32_t>& GetOfferCardsContentStatusRequest::getCategoryIds()
{
    return m_CategoryIds;
}

void GetOfferCardsContentStatusRequest::setCategoryIds(std::set<int32_t> value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}

bool GetOfferCardsContentStatusRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}

void GetOfferCardsContentStatusRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}
}
}
}
}


