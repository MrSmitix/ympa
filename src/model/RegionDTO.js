/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegionType from './RegionType';

/**
 * The RegionDTO model module.
 * @module model/RegionDTO
 * @version LATEST
 */
class RegionDTO {
    /**
     * Constructs a new <code>RegionDTO</code>.
     * Регион доставки.
     * @alias module:model/RegionDTO
     * @param name {String} Название региона.
     * @param type {module:model/RegionType} 
     */
    constructor(name, type) { 
        
        RegionDTO.initialize(this, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, type) { 
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>RegionDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegionDTO} obj Optional instance to populate.
     * @return {module:model/RegionDTO} The populated <code>RegionDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegionDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = RegionType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = RegionDTO.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [RegionDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegionDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegionDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegionDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          RegionDTO.validateJSON(data['parent']);
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                RegionDTO.validateJSON(item);
            };
        }

        return true;
    }


}

RegionDTO.RequiredProperties = ["name", "type"];

/**
 * Идентификатор региона.
 * @member {Number} id
 */
RegionDTO.prototype['id'] = undefined;

/**
 * Название региона.
 * @member {String} name
 */
RegionDTO.prototype['name'] = undefined;

/**
 * @member {module:model/RegionType} type
 */
RegionDTO.prototype['type'] = undefined;

/**
 * @member {module:model/RegionDTO} parent
 */
RegionDTO.prototype['parent'] = undefined;

/**
 * Дочерние регионы.
 * @member {Array.<module:model/RegionDTO>} children
 */
RegionDTO.prototype['children'] = undefined;






export default RegionDTO;

