/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrdersStatsDetailsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrdersStatsDetailsDTO::OrdersStatsDetailsDTO()
{
    m_ItemStatusIsSet = false;
    m_ItemCount = 0L;
    m_ItemCountIsSet = false;
    m_UpdateDateIsSet = false;
    m_StockTypeIsSet = false;
}

OrdersStatsDetailsDTO::~OrdersStatsDetailsDTO()
{
}

void OrdersStatsDetailsDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrdersStatsDetailsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ItemStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("itemStatus"))] = ModelBase::toJson(m_ItemStatus);
    }
    if(m_ItemCountIsSet)
    {
        val[utility::conversions::to_string_t(U("itemCount"))] = ModelBase::toJson(m_ItemCount);
    }
    if(m_UpdateDateIsSet)
    {
        val[utility::conversions::to_string_t(U("updateDate"))] = ModelBase::toJson(m_UpdateDate);
    }
    if(m_StockTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("stockType"))] = ModelBase::toJson(m_StockType);
    }

    return val;
}

bool OrdersStatsDetailsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("itemStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("itemStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsItemStatusType> refVal_setItemStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemStatus);
            setItemStatus(refVal_setItemStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("itemCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("itemCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setItemCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemCount);
            setItemCount(refVal_setItemCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdateDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateDate);
            setUpdateDate(refVal_setUpdateDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stockType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stockType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrdersStatsStockType> refVal_setStockType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStockType);
            setStockType(refVal_setStockType);
        }
    }
    return ok;
}

void OrdersStatsDetailsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ItemStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("itemStatus")), m_ItemStatus));
    }
    if(m_ItemCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("itemCount")), m_ItemCount));
    }
    if(m_UpdateDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateDate")), m_UpdateDate));
    }
    if(m_StockTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stockType")), m_StockType));
    }
}

bool OrdersStatsDetailsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("itemStatus"))))
    {
        std::shared_ptr<OrdersStatsItemStatusType> refVal_setItemStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("itemStatus"))), refVal_setItemStatus );
        setItemStatus(refVal_setItemStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("itemCount"))))
    {
        int64_t refVal_setItemCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("itemCount"))), refVal_setItemCount );
        setItemCount(refVal_setItemCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateDate"))))
    {
        utility::datetime refVal_setUpdateDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateDate"))), refVal_setUpdateDate );
        setUpdateDate(refVal_setUpdateDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stockType"))))
    {
        std::shared_ptr<OrdersStatsStockType> refVal_setStockType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stockType"))), refVal_setStockType );
        setStockType(refVal_setStockType);
    }
    return ok;
}

std::shared_ptr<OrdersStatsItemStatusType> OrdersStatsDetailsDTO::getItemStatus() const
{
    return m_ItemStatus;
}

void OrdersStatsDetailsDTO::setItemStatus(const std::shared_ptr<OrdersStatsItemStatusType>& value)
{
    m_ItemStatus = value;
    m_ItemStatusIsSet = true;
}

bool OrdersStatsDetailsDTO::itemStatusIsSet() const
{
    return m_ItemStatusIsSet;
}

void OrdersStatsDetailsDTO::unsetItemStatus()
{
    m_ItemStatusIsSet = false;
}
int64_t OrdersStatsDetailsDTO::getItemCount() const
{
    return m_ItemCount;
}

void OrdersStatsDetailsDTO::setItemCount(int64_t value)
{
    m_ItemCount = value;
    m_ItemCountIsSet = true;
}

bool OrdersStatsDetailsDTO::itemCountIsSet() const
{
    return m_ItemCountIsSet;
}

void OrdersStatsDetailsDTO::unsetItemCount()
{
    m_ItemCountIsSet = false;
}
utility::datetime OrdersStatsDetailsDTO::getUpdateDate() const
{
    return m_UpdateDate;
}

void OrdersStatsDetailsDTO::setUpdateDate(const utility::datetime& value)
{
    m_UpdateDate = value;
    m_UpdateDateIsSet = true;
}

bool OrdersStatsDetailsDTO::updateDateIsSet() const
{
    return m_UpdateDateIsSet;
}

void OrdersStatsDetailsDTO::unsetUpdateDate()
{
    m_UpdateDateIsSet = false;
}
std::shared_ptr<OrdersStatsStockType> OrdersStatsDetailsDTO::getStockType() const
{
    return m_StockType;
}

void OrdersStatsDetailsDTO::setStockType(const std::shared_ptr<OrdersStatsStockType>& value)
{
    m_StockType = value;
    m_StockTypeIsSet = true;
}

bool OrdersStatsDetailsDTO::stockTypeIsSet() const
{
    return m_StockTypeIsSet;
}

void OrdersStatsDetailsDTO::unsetStockType()
{
    m_StockTypeIsSet = false;
}
}
}
}
}


