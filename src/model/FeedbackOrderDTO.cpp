/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedbackOrderDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedbackOrderDTO::FeedbackOrderDTO()
{
    m_ShopOrderId = utility::conversions::to_string_t("");
    m_ShopOrderIdIsSet = false;
    m_DeliveryIsSet = false;
}

FeedbackOrderDTO::~FeedbackOrderDTO()
{
}

void FeedbackOrderDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedbackOrderDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ShopOrderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("shopOrderId"))] = ModelBase::toJson(m_ShopOrderId);
    }
    if(m_DeliveryIsSet)
    {
        val[utility::conversions::to_string_t(U("delivery"))] = ModelBase::toJson(m_Delivery);
    }

    return val;
}

bool FeedbackOrderDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("shopOrderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopOrderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopOrderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopOrderId);
            setShopOrderId(refVal_setShopOrderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delivery"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delivery")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedbackDeliveryType> refVal_setDelivery;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelivery);
            setDelivery(refVal_setDelivery);
        }
    }
    return ok;
}

void FeedbackOrderDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ShopOrderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopOrderId")), m_ShopOrderId));
    }
    if(m_DeliveryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delivery")), m_Delivery));
    }
}

bool FeedbackOrderDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("shopOrderId"))))
    {
        utility::string_t refVal_setShopOrderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopOrderId"))), refVal_setShopOrderId );
        setShopOrderId(refVal_setShopOrderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delivery"))))
    {
        std::shared_ptr<FeedbackDeliveryType> refVal_setDelivery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delivery"))), refVal_setDelivery );
        setDelivery(refVal_setDelivery);
    }
    return ok;
}

utility::string_t FeedbackOrderDTO::getShopOrderId() const
{
    return m_ShopOrderId;
}

void FeedbackOrderDTO::setShopOrderId(const utility::string_t& value)
{
    m_ShopOrderId = value;
    m_ShopOrderIdIsSet = true;
}

bool FeedbackOrderDTO::shopOrderIdIsSet() const
{
    return m_ShopOrderIdIsSet;
}

void FeedbackOrderDTO::unsetShopOrderId()
{
    m_ShopOrderIdIsSet = false;
}
std::shared_ptr<FeedbackDeliveryType> FeedbackOrderDTO::getDelivery() const
{
    return m_Delivery;
}

void FeedbackOrderDTO::setDelivery(const std::shared_ptr<FeedbackDeliveryType>& value)
{
    m_Delivery = value;
    m_DeliveryIsSet = true;
}

bool FeedbackOrderDTO::deliveryIsSet() const
{
    return m_DeliveryIsSet;
}

void FeedbackOrderDTO::unsetDelivery()
{
    m_DeliveryIsSet = false;
}
}
}
}
}


