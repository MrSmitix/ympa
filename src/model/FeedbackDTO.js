/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedbackAuthorDTO from './FeedbackAuthorDTO';
import FeedbackCommentDTO from './FeedbackCommentDTO';
import FeedbackGradesDTO from './FeedbackGradesDTO';
import FeedbackOrderDTO from './FeedbackOrderDTO';
import FeedbackShopDTO from './FeedbackShopDTO';
import FeedbackStateType from './FeedbackStateType';

/**
 * The FeedbackDTO model module.
 * @module model/FeedbackDTO
 * @version LATEST
 */
class FeedbackDTO {
    /**
     * Constructs a new <code>FeedbackDTO</code>.
     * Отзыв пользователя Яндекс Маркета об указанном магазине.
     * @alias module:model/FeedbackDTO
     * @param comments {Array.<module:model/FeedbackCommentDTO>} Переписка автора отзыва с магазином.
     */
    constructor(comments) { 
        
        FeedbackDTO.initialize(this, comments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comments) { 
        obj['comments'] = comments;
    }

    /**
     * Constructs a <code>FeedbackDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackDTO} obj Optional instance to populate.
     * @return {module:model/FeedbackDTO} The populated <code>FeedbackDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = FeedbackStateType.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = FeedbackAuthorDTO.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('pro')) {
                obj['pro'] = ApiClient.convertToType(data['pro'], 'String');
            }
            if (data.hasOwnProperty('contra')) {
                obj['contra'] = ApiClient.convertToType(data['contra'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [FeedbackCommentDTO]);
            }
            if (data.hasOwnProperty('shop')) {
                obj['shop'] = FeedbackShopDTO.constructFromObject(data['shop']);
            }
            if (data.hasOwnProperty('resolved')) {
                obj['resolved'] = ApiClient.convertToType(data['resolved'], 'Boolean');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
            if (data.hasOwnProperty('recommend')) {
                obj['recommend'] = ApiClient.convertToType(data['recommend'], 'Boolean');
            }
            if (data.hasOwnProperty('grades')) {
                obj['grades'] = FeedbackGradesDTO.constructFromObject(data['grades']);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = FeedbackOrderDTO.constructFromObject(data['order']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedbackDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedbackDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeedbackDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          FeedbackAuthorDTO.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['pro'] && !(typeof data['pro'] === 'string' || data['pro'] instanceof String)) {
            throw new Error("Expected the field `pro` to be a primitive type in the JSON string but got " + data['pro']);
        }
        // ensure the json data is a string
        if (data['contra'] && !(typeof data['contra'] === 'string' || data['contra'] instanceof String)) {
            throw new Error("Expected the field `contra` to be a primitive type in the JSON string but got " + data['contra']);
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                FeedbackCommentDTO.validateJSON(item);
            };
        }
        // validate the optional field `shop`
        if (data['shop']) { // data not null
          FeedbackShopDTO.validateJSON(data['shop']);
        }
        // validate the optional field `grades`
        if (data['grades']) { // data not null
          FeedbackGradesDTO.validateJSON(data['grades']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          FeedbackOrderDTO.validateJSON(data['order']);
        }

        return true;
    }


}

FeedbackDTO.RequiredProperties = ["comments"];

/**
 * Идентификатор отзыва.
 * @member {Number} id
 */
FeedbackDTO.prototype['id'] = undefined;

/**
 * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @member {Date} createdAt
 */
FeedbackDTO.prototype['createdAt'] = undefined;

/**
 * Комментарий автора отзыва.
 * @member {String} text
 */
FeedbackDTO.prototype['text'] = undefined;

/**
 * @member {module:model/FeedbackStateType} state
 */
FeedbackDTO.prototype['state'] = undefined;

/**
 * @member {module:model/FeedbackAuthorDTO} author
 */
FeedbackDTO.prototype['author'] = undefined;

/**
 * Достоинства магазина, описанные в отзыве.
 * @member {String} pro
 */
FeedbackDTO.prototype['pro'] = undefined;

/**
 * Недостатки магазина, описанные в отзыве.
 * @member {String} contra
 */
FeedbackDTO.prototype['contra'] = undefined;

/**
 * Переписка автора отзыва с магазином.
 * @member {Array.<module:model/FeedbackCommentDTO>} comments
 */
FeedbackDTO.prototype['comments'] = undefined;

/**
 * @member {module:model/FeedbackShopDTO} shop
 */
FeedbackDTO.prototype['shop'] = undefined;

/**
 * Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
 * @member {Boolean} resolved
 */
FeedbackDTO.prototype['resolved'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
 * @member {Boolean} verified
 */
FeedbackDTO.prototype['verified'] = undefined;

/**
 * Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
 * @member {Boolean} recommend
 */
FeedbackDTO.prototype['recommend'] = undefined;

/**
 * @member {module:model/FeedbackGradesDTO} grades
 */
FeedbackDTO.prototype['grades'] = undefined;

/**
 * @member {module:model/FeedbackOrderDTO} order
 */
FeedbackDTO.prototype['order'] = undefined;






export default FeedbackDTO;

