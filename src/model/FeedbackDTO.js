/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedbackAuthorDTO from './FeedbackAuthorDTO';
import FeedbackCommentDTO from './FeedbackCommentDTO';
import FeedbackGradesDTO from './FeedbackGradesDTO';
import FeedbackOrderDTO from './FeedbackOrderDTO';
import FeedbackShopDTO from './FeedbackShopDTO';
import FeedbackStateType from './FeedbackStateType';

/**
 * The FeedbackDTO model module.
 * @module model/FeedbackDTO
 * @version LATEST
 */
class FeedbackDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {Date} createdAt
     * @type {Date}
     */
    createdAt;
    /**
     * @member {String} text
     * @type {String}
     */
    text;
    /**
     * @member {module:model/FeedbackStateType} state
     * @type {module:model/FeedbackStateType}
     */
    state;
    /**
     * @member {module:model/FeedbackAuthorDTO} author
     * @type {module:model/FeedbackAuthorDTO}
     */
    author;
    /**
     * @member {String} pro
     * @type {String}
     */
    pro;
    /**
     * @member {String} contra
     * @type {String}
     */
    contra;
    /**
     * @member {Array.<module:model/FeedbackCommentDTO>} comments
     * @type {Array.<module:model/FeedbackCommentDTO>}
     */
    comments;
    /**
     * @member {module:model/FeedbackShopDTO} shop
     * @type {module:model/FeedbackShopDTO}
     */
    shop;
    /**
     * @member {Boolean} resolved
     * @type {Boolean}
     */
    resolved;
    /**
     * @member {Boolean} verified
     * @type {Boolean}
     */
    verified;
    /**
     * @member {Boolean} recommend
     * @type {Boolean}
     */
    recommend;
    /**
     * @member {module:model/FeedbackGradesDTO} grades
     * @type {module:model/FeedbackGradesDTO}
     */
    grades;
    /**
     * @member {module:model/FeedbackOrderDTO} order
     * @type {module:model/FeedbackOrderDTO}
     */
    order;

    

    /**
     * Constructs a new <code>FeedbackDTO</code>.
     * Отзыв пользователя Яндекс Маркета об указанном магазине.
     * @alias module:model/FeedbackDTO
     * @param comments {Array.<module:model/FeedbackCommentDTO>} Переписка автора отзыва с магазином.
     */
    constructor(comments) { 
        
        FeedbackDTO.initialize(this, comments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, comments) { 
        obj['comments'] = comments;
    }

    /**
     * Constructs a <code>FeedbackDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackDTO} obj Optional instance to populate.
     * @return {module:model/FeedbackDTO} The populated <code>FeedbackDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = FeedbackStateType.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = FeedbackAuthorDTO.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('pro')) {
                obj['pro'] = ApiClient.convertToType(data['pro'], 'String');
            }
            if (data.hasOwnProperty('contra')) {
                obj['contra'] = ApiClient.convertToType(data['contra'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [FeedbackCommentDTO]);
            }
            if (data.hasOwnProperty('shop')) {
                obj['shop'] = FeedbackShopDTO.constructFromObject(data['shop']);
            }
            if (data.hasOwnProperty('resolved')) {
                obj['resolved'] = ApiClient.convertToType(data['resolved'], 'Boolean');
            }
            if (data.hasOwnProperty('verified')) {
                obj['verified'] = ApiClient.convertToType(data['verified'], 'Boolean');
            }
            if (data.hasOwnProperty('recommend')) {
                obj['recommend'] = ApiClient.convertToType(data['recommend'], 'Boolean');
            }
            if (data.hasOwnProperty('grades')) {
                obj['grades'] = FeedbackGradesDTO.constructFromObject(data['grades']);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = FeedbackOrderDTO.constructFromObject(data['order']);
            }
        }
        return obj;
    }
}



export default FeedbackDTO;

