/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ValueRestrictionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ValueRestrictionDTO::ValueRestrictionDTO()
{
    m_LimitingParameterId = 0L;
    m_LimitingParameterIdIsSet = false;
    m_LimitedValuesIsSet = false;
}

ValueRestrictionDTO::~ValueRestrictionDTO()
{
}

void ValueRestrictionDTO::validate()
{
    // TODO: implement validation
}

web::json::value ValueRestrictionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LimitingParameterIdIsSet)
    {
        val[utility::conversions::to_string_t(U("limitingParameterId"))] = ModelBase::toJson(m_LimitingParameterId);
    }
    if(m_LimitedValuesIsSet)
    {
        val[utility::conversions::to_string_t(U("limitedValues"))] = ModelBase::toJson(m_LimitedValues);
    }

    return val;
}

bool ValueRestrictionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("limitingParameterId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitingParameterId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLimitingParameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitingParameterId);
            setLimitingParameterId(refVal_setLimitingParameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limitedValues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limitedValues")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OptionValuesLimitedDTO>> refVal_setLimitedValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimitedValues);
            setLimitedValues(refVal_setLimitedValues);
        }
    }
    return ok;
}

void ValueRestrictionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LimitingParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitingParameterId")), m_LimitingParameterId));
    }
    if(m_LimitedValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limitedValues")), m_LimitedValues));
    }
}

bool ValueRestrictionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("limitingParameterId"))))
    {
        int64_t refVal_setLimitingParameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitingParameterId"))), refVal_setLimitingParameterId );
        setLimitingParameterId(refVal_setLimitingParameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limitedValues"))))
    {
        std::vector<std::shared_ptr<OptionValuesLimitedDTO>> refVal_setLimitedValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limitedValues"))), refVal_setLimitedValues );
        setLimitedValues(refVal_setLimitedValues);
    }
    return ok;
}

int64_t ValueRestrictionDTO::getLimitingParameterId() const
{
    return m_LimitingParameterId;
}

void ValueRestrictionDTO::setLimitingParameterId(int64_t value)
{
    m_LimitingParameterId = value;
    m_LimitingParameterIdIsSet = true;
}

bool ValueRestrictionDTO::limitingParameterIdIsSet() const
{
    return m_LimitingParameterIdIsSet;
}

void ValueRestrictionDTO::unsetLimitingParameterId()
{
    m_LimitingParameterIdIsSet = false;
}
std::vector<std::shared_ptr<OptionValuesLimitedDTO>>& ValueRestrictionDTO::getLimitedValues()
{
    return m_LimitedValues;
}

void ValueRestrictionDTO::setLimitedValues(const std::vector<std::shared_ptr<OptionValuesLimitedDTO>>& value)
{
    m_LimitedValues = value;
    m_LimitedValuesIsSet = true;
}

bool ValueRestrictionDTO::limitedValuesIsSet() const
{
    return m_LimitedValuesIsSet;
}

void ValueRestrictionDTO::unsetLimitedValues()
{
    m_LimitedValuesIsSet = false;
}
}
}
}
}


