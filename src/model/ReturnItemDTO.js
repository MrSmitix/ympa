/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReturnDecisionDTO from './ReturnDecisionDTO';
import ReturnInstanceDTO from './ReturnInstanceDTO';
import TrackDTO from './TrackDTO';

/**
 * The ReturnItemDTO model module.
 * @module model/ReturnItemDTO
 * @version LATEST
 */
class ReturnItemDTO {
    /**
     * Constructs a new <code>ReturnItemDTO</code>.
     * Список товаров в возврате.
     * @alias module:model/ReturnItemDTO
     * @param shopSku {String} Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
     * @param count {Number} Количество единиц товара.
     */
    constructor(shopSku, count) { 
        
        ReturnItemDTO.initialize(this, shopSku, count);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shopSku, count) { 
        obj['shopSku'] = shopSku;
        obj['count'] = count;
    }

    /**
     * Constructs a <code>ReturnItemDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnItemDTO} obj Optional instance to populate.
     * @return {module:model/ReturnItemDTO} The populated <code>ReturnItemDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnItemDTO();

            if (data.hasOwnProperty('marketSku')) {
                obj['marketSku'] = ApiClient.convertToType(data['marketSku'], 'Number');
            }
            if (data.hasOwnProperty('shopSku')) {
                obj['shopSku'] = ApiClient.convertToType(data['shopSku'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('decisions')) {
                obj['decisions'] = ApiClient.convertToType(data['decisions'], [ReturnDecisionDTO]);
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [ReturnInstanceDTO]);
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [TrackDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReturnItemDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReturnItemDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReturnItemDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['shopSku'] && !(typeof data['shopSku'] === 'string' || data['shopSku'] instanceof String)) {
            throw new Error("Expected the field `shopSku` to be a primitive type in the JSON string but got " + data['shopSku']);
        }
        if (data['decisions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['decisions'])) {
                throw new Error("Expected the field `decisions` to be an array in the JSON data but got " + data['decisions']);
            }
            // validate the optional field `decisions` (array)
            for (const item of data['decisions']) {
                ReturnDecisionDTO.validateJSON(item);
            };
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                ReturnInstanceDTO.validateJSON(item);
            };
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                TrackDTO.validateJSON(item);
            };
        }

        return true;
    }


}

ReturnItemDTO.RequiredProperties = ["shopSku", "count"];

/**
 * SKU на Маркете.
 * @member {Number} marketSku
 */
ReturnItemDTO.prototype['marketSku'] = undefined;

/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} shopSku
 */
ReturnItemDTO.prototype['shopSku'] = undefined;

/**
 * Количество единиц товара.
 * @member {Number} count
 */
ReturnItemDTO.prototype['count'] = undefined;

/**
 * Список решений по возврату.
 * @member {Array.<module:model/ReturnDecisionDTO>} decisions
 */
ReturnItemDTO.prototype['decisions'] = undefined;

/**
 * Список логистических позиций возврата.
 * @member {Array.<module:model/ReturnInstanceDTO>} instances
 */
ReturnItemDTO.prototype['instances'] = undefined;

/**
 * Список трек-кодов для почтовых отправлений.
 * @member {Array.<module:model/TrackDTO>} tracks
 */
ReturnItemDTO.prototype['tracks'] = undefined;






export default ReturnItemDTO;

