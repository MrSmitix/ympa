/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WarehouseAddressDTO from './WarehouseAddressDTO';

/**
 * The WarehouseDTO model module.
 * @module model/WarehouseDTO
 * @version LATEST
 */
class WarehouseDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {Number} campaignId
     * @type {Number}
     */
    campaignId;
    /**
     * @member {Boolean} express
     * @type {Boolean}
     */
    express;
    /**
     * @member {module:model/WarehouseAddressDTO} address
     * @type {module:model/WarehouseAddressDTO}
     */
    address;

    

    /**
     * Constructs a new <code>WarehouseDTO</code>.
     * Информация о складе.
     * @alias module:model/WarehouseDTO
     * @param id {Number} Идентификатор склада.
     * @param name {String} Название склада.
     * @param campaignId {Number} Идентификатор кампании в API и идентификатор магазина.
     * @param express {Boolean} Возможна ли доставка по модели Экспресс.
     */
    constructor(id, name, campaignId, express) { 
        
        WarehouseDTO.initialize(this, id, name, campaignId, express);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, campaignId, express) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['campaignId'] = campaignId;
        obj['express'] = express;
    }

    /**
     * Constructs a <code>WarehouseDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WarehouseDTO} obj Optional instance to populate.
     * @return {module:model/WarehouseDTO} The populated <code>WarehouseDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WarehouseDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('campaignId')) {
                obj['campaignId'] = ApiClient.convertToType(data['campaignId'], 'Number');
            }
            if (data.hasOwnProperty('express')) {
                obj['express'] = ApiClient.convertToType(data['express'], 'Boolean');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = WarehouseAddressDTO.constructFromObject(data['address']);
            }
        }
        return obj;
    }
}



export default WarehouseDTO;

