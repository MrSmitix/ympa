/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/BaseShipmentDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BaseShipmentDTO::BaseShipmentDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_PlanIntervalFrom = utility::datetime();
    m_PlanIntervalFromIsSet = false;
    m_PlanIntervalTo = utility::datetime();
    m_PlanIntervalToIsSet = false;
    m_ShipmentTypeIsSet = false;
    m_WarehouseIsSet = false;
    m_WarehouseToIsSet = false;
    m_ExternalId = utility::conversions::to_string_t("");
    m_ExternalIdIsSet = false;
    m_DeliveryServiceIsSet = false;
    m_PalletsCountIsSet = false;
    m_OrderIdsIsSet = false;
    m_DraftCount = 0;
    m_DraftCountIsSet = false;
    m_PlannedCount = 0;
    m_PlannedCountIsSet = false;
    m_FactCount = 0;
    m_FactCountIsSet = false;
}

BaseShipmentDTO::~BaseShipmentDTO()
{
}

void BaseShipmentDTO::validate()
{
    // TODO: implement validation
}

web::json::value BaseShipmentDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_PlanIntervalFromIsSet)
    {
        val[utility::conversions::to_string_t(U("planIntervalFrom"))] = ModelBase::toJson(m_PlanIntervalFrom);
    }
    if(m_PlanIntervalToIsSet)
    {
        val[utility::conversions::to_string_t(U("planIntervalTo"))] = ModelBase::toJson(m_PlanIntervalTo);
    }
    if(m_ShipmentTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("shipmentType"))] = ModelBase::toJson(m_ShipmentType);
    }
    if(m_WarehouseIsSet)
    {
        val[utility::conversions::to_string_t(U("warehouse"))] = ModelBase::toJson(m_Warehouse);
    }
    if(m_WarehouseToIsSet)
    {
        val[utility::conversions::to_string_t(U("warehouseTo"))] = ModelBase::toJson(m_WarehouseTo);
    }
    if(m_ExternalIdIsSet)
    {
        val[utility::conversions::to_string_t(U("externalId"))] = ModelBase::toJson(m_ExternalId);
    }
    if(m_DeliveryServiceIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryService"))] = ModelBase::toJson(m_DeliveryService);
    }
    if(m_PalletsCountIsSet)
    {
        val[utility::conversions::to_string_t(U("palletsCount"))] = ModelBase::toJson(m_PalletsCount);
    }
    if(m_OrderIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("orderIds"))] = ModelBase::toJson(m_OrderIds);
    }
    if(m_DraftCountIsSet)
    {
        val[utility::conversions::to_string_t(U("draftCount"))] = ModelBase::toJson(m_DraftCount);
    }
    if(m_PlannedCountIsSet)
    {
        val[utility::conversions::to_string_t(U("plannedCount"))] = ModelBase::toJson(m_PlannedCount);
    }
    if(m_FactCountIsSet)
    {
        val[utility::conversions::to_string_t(U("factCount"))] = ModelBase::toJson(m_FactCount);
    }

    return val;
}

bool BaseShipmentDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("planIntervalFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("planIntervalFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setPlanIntervalFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlanIntervalFrom);
            setPlanIntervalFrom(refVal_setPlanIntervalFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("planIntervalTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("planIntervalTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setPlanIntervalTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlanIntervalTo);
            setPlanIntervalTo(refVal_setPlanIntervalTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipmentType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipmentType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipmentType> refVal_setShipmentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipmentType);
            setShipmentType(refVal_setShipmentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warehouse"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warehouse")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PartnerShipmentWarehouseDTO> refVal_setWarehouse;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarehouse);
            setWarehouse(refVal_setWarehouse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warehouseTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warehouseTo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PartnerShipmentWarehouseDTO> refVal_setWarehouseTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarehouseTo);
            setWarehouseTo(refVal_setWarehouseTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("externalId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("externalId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExternalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalId);
            setExternalId(refVal_setExternalId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryService"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryService")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<DeliveryServiceDTO> refVal_setDeliveryService;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryService);
            setDeliveryService(refVal_setDeliveryService);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("palletsCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("palletsCount")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PalletsCountDTO> refVal_setPalletsCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPalletsCount);
            setPalletsCount(refVal_setPalletsCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orderIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderIds")));
        if(!fieldValue.is_null())
        {
            std::set<int64_t> refVal_setOrderIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderIds);
            setOrderIds(refVal_setOrderIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("draftCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("draftCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDraftCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDraftCount);
            setDraftCount(refVal_setDraftCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("plannedCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plannedCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPlannedCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlannedCount);
            setPlannedCount(refVal_setPlannedCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("factCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("factCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFactCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFactCount);
            setFactCount(refVal_setFactCount);
        }
    }
    return ok;
}

void BaseShipmentDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_PlanIntervalFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("planIntervalFrom")), m_PlanIntervalFrom));
    }
    if(m_PlanIntervalToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("planIntervalTo")), m_PlanIntervalTo));
    }
    if(m_ShipmentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipmentType")), m_ShipmentType));
    }
    if(m_WarehouseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warehouse")), m_Warehouse));
    }
    if(m_WarehouseToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warehouseTo")), m_WarehouseTo));
    }
    if(m_ExternalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("externalId")), m_ExternalId));
    }
    if(m_DeliveryServiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryService")), m_DeliveryService));
    }
    if(m_PalletsCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("palletsCount")), m_PalletsCount));
    }
    if(m_OrderIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderIds")), m_OrderIds));
    }
    if(m_DraftCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("draftCount")), m_DraftCount));
    }
    if(m_PlannedCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plannedCount")), m_PlannedCount));
    }
    if(m_FactCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("factCount")), m_FactCount));
    }
}

bool BaseShipmentDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("planIntervalFrom"))))
    {
        utility::datetime refVal_setPlanIntervalFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("planIntervalFrom"))), refVal_setPlanIntervalFrom );
        setPlanIntervalFrom(refVal_setPlanIntervalFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("planIntervalTo"))))
    {
        utility::datetime refVal_setPlanIntervalTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("planIntervalTo"))), refVal_setPlanIntervalTo );
        setPlanIntervalTo(refVal_setPlanIntervalTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipmentType"))))
    {
        std::shared_ptr<ShipmentType> refVal_setShipmentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipmentType"))), refVal_setShipmentType );
        setShipmentType(refVal_setShipmentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warehouse"))))
    {
        std::shared_ptr<PartnerShipmentWarehouseDTO> refVal_setWarehouse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warehouse"))), refVal_setWarehouse );
        setWarehouse(refVal_setWarehouse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warehouseTo"))))
    {
        std::shared_ptr<PartnerShipmentWarehouseDTO> refVal_setWarehouseTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warehouseTo"))), refVal_setWarehouseTo );
        setWarehouseTo(refVal_setWarehouseTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("externalId"))))
    {
        utility::string_t refVal_setExternalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("externalId"))), refVal_setExternalId );
        setExternalId(refVal_setExternalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryService"))))
    {
        std::shared_ptr<DeliveryServiceDTO> refVal_setDeliveryService;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryService"))), refVal_setDeliveryService );
        setDeliveryService(refVal_setDeliveryService);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("palletsCount"))))
    {
        std::shared_ptr<PalletsCountDTO> refVal_setPalletsCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("palletsCount"))), refVal_setPalletsCount );
        setPalletsCount(refVal_setPalletsCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orderIds"))))
    {
        std::set<int64_t> refVal_setOrderIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderIds"))), refVal_setOrderIds );
        setOrderIds(refVal_setOrderIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("draftCount"))))
    {
        int32_t refVal_setDraftCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("draftCount"))), refVal_setDraftCount );
        setDraftCount(refVal_setDraftCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("plannedCount"))))
    {
        int32_t refVal_setPlannedCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plannedCount"))), refVal_setPlannedCount );
        setPlannedCount(refVal_setPlannedCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("factCount"))))
    {
        int32_t refVal_setFactCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("factCount"))), refVal_setFactCount );
        setFactCount(refVal_setFactCount);
    }
    return ok;
}

int64_t BaseShipmentDTO::getId() const
{
    return m_Id;
}

void BaseShipmentDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BaseShipmentDTO::idIsSet() const
{
    return m_IdIsSet;
}

void BaseShipmentDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::datetime BaseShipmentDTO::getPlanIntervalFrom() const
{
    return m_PlanIntervalFrom;
}

void BaseShipmentDTO::setPlanIntervalFrom(const utility::datetime& value)
{
    m_PlanIntervalFrom = value;
    m_PlanIntervalFromIsSet = true;
}

bool BaseShipmentDTO::planIntervalFromIsSet() const
{
    return m_PlanIntervalFromIsSet;
}

void BaseShipmentDTO::unsetPlanIntervalFrom()
{
    m_PlanIntervalFromIsSet = false;
}
utility::datetime BaseShipmentDTO::getPlanIntervalTo() const
{
    return m_PlanIntervalTo;
}

void BaseShipmentDTO::setPlanIntervalTo(const utility::datetime& value)
{
    m_PlanIntervalTo = value;
    m_PlanIntervalToIsSet = true;
}

bool BaseShipmentDTO::planIntervalToIsSet() const
{
    return m_PlanIntervalToIsSet;
}

void BaseShipmentDTO::unsetPlanIntervalTo()
{
    m_PlanIntervalToIsSet = false;
}
std::shared_ptr<ShipmentType> BaseShipmentDTO::getShipmentType() const
{
    return m_ShipmentType;
}

void BaseShipmentDTO::setShipmentType(const std::shared_ptr<ShipmentType>& value)
{
    m_ShipmentType = value;
    m_ShipmentTypeIsSet = true;
}

bool BaseShipmentDTO::shipmentTypeIsSet() const
{
    return m_ShipmentTypeIsSet;
}

void BaseShipmentDTO::unsetShipmentType()
{
    m_ShipmentTypeIsSet = false;
}
std::shared_ptr<PartnerShipmentWarehouseDTO> BaseShipmentDTO::getWarehouse() const
{
    return m_Warehouse;
}

void BaseShipmentDTO::setWarehouse(const std::shared_ptr<PartnerShipmentWarehouseDTO>& value)
{
    m_Warehouse = value;
    m_WarehouseIsSet = true;
}

bool BaseShipmentDTO::warehouseIsSet() const
{
    return m_WarehouseIsSet;
}

void BaseShipmentDTO::unsetWarehouse()
{
    m_WarehouseIsSet = false;
}
std::shared_ptr<PartnerShipmentWarehouseDTO> BaseShipmentDTO::getWarehouseTo() const
{
    return m_WarehouseTo;
}

void BaseShipmentDTO::setWarehouseTo(const std::shared_ptr<PartnerShipmentWarehouseDTO>& value)
{
    m_WarehouseTo = value;
    m_WarehouseToIsSet = true;
}

bool BaseShipmentDTO::warehouseToIsSet() const
{
    return m_WarehouseToIsSet;
}

void BaseShipmentDTO::unsetWarehouseTo()
{
    m_WarehouseToIsSet = false;
}
utility::string_t BaseShipmentDTO::getExternalId() const
{
    return m_ExternalId;
}

void BaseShipmentDTO::setExternalId(const utility::string_t& value)
{
    m_ExternalId = value;
    m_ExternalIdIsSet = true;
}

bool BaseShipmentDTO::externalIdIsSet() const
{
    return m_ExternalIdIsSet;
}

void BaseShipmentDTO::unsetExternalId()
{
    m_ExternalIdIsSet = false;
}
std::shared_ptr<DeliveryServiceDTO> BaseShipmentDTO::getDeliveryService() const
{
    return m_DeliveryService;
}

void BaseShipmentDTO::setDeliveryService(const std::shared_ptr<DeliveryServiceDTO>& value)
{
    m_DeliveryService = value;
    m_DeliveryServiceIsSet = true;
}

bool BaseShipmentDTO::deliveryServiceIsSet() const
{
    return m_DeliveryServiceIsSet;
}

void BaseShipmentDTO::unsetDeliveryService()
{
    m_DeliveryServiceIsSet = false;
}
std::shared_ptr<PalletsCountDTO> BaseShipmentDTO::getPalletsCount() const
{
    return m_PalletsCount;
}

void BaseShipmentDTO::setPalletsCount(const std::shared_ptr<PalletsCountDTO>& value)
{
    m_PalletsCount = value;
    m_PalletsCountIsSet = true;
}

bool BaseShipmentDTO::palletsCountIsSet() const
{
    return m_PalletsCountIsSet;
}

void BaseShipmentDTO::unsetPalletsCount()
{
    m_PalletsCountIsSet = false;
}
std::set<int64_t>& BaseShipmentDTO::getOrderIds()
{
    return m_OrderIds;
}

void BaseShipmentDTO::setOrderIds(std::set<int64_t> value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}

bool BaseShipmentDTO::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}

void BaseShipmentDTO::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}
int32_t BaseShipmentDTO::getDraftCount() const
{
    return m_DraftCount;
}

void BaseShipmentDTO::setDraftCount(int32_t value)
{
    m_DraftCount = value;
    m_DraftCountIsSet = true;
}

bool BaseShipmentDTO::draftCountIsSet() const
{
    return m_DraftCountIsSet;
}

void BaseShipmentDTO::unsetDraftCount()
{
    m_DraftCountIsSet = false;
}
int32_t BaseShipmentDTO::getPlannedCount() const
{
    return m_PlannedCount;
}

void BaseShipmentDTO::setPlannedCount(int32_t value)
{
    m_PlannedCount = value;
    m_PlannedCountIsSet = true;
}

bool BaseShipmentDTO::plannedCountIsSet() const
{
    return m_PlannedCountIsSet;
}

void BaseShipmentDTO::unsetPlannedCount()
{
    m_PlannedCountIsSet = false;
}
int32_t BaseShipmentDTO::getFactCount() const
{
    return m_FactCount;
}

void BaseShipmentDTO::setFactCount(int32_t value)
{
    m_FactCount = value;
    m_FactCountIsSet = true;
}

bool BaseShipmentDTO::factCountIsSet() const
{
    return m_FactCountIsSet;
}

void BaseShipmentDTO::unsetFactCount()
{
    m_FactCountIsSet = false;
}
}
}
}
}


