/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParcelBoxLabelDTO from './ParcelBoxLabelDTO';

/**
 * The OrderLabelDTO model module.
 * @module model/OrderLabelDTO
 * @version LATEST
 */
class OrderLabelDTO {
    /**
     * Constructs a new <code>OrderLabelDTO</code>.
     * Данные для печати ярлыка.
     * @alias module:model/OrderLabelDTO
     * @param orderId {Number} Идентификатор заказа.
     * @param placesNumber {Number} Количество коробок в заказе.
     * @param url {String} URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
     * @param parcelBoxLabels {Array.<module:model/ParcelBoxLabelDTO>} Информация на ярлыке.
     */
    constructor(orderId, placesNumber, url, parcelBoxLabels) { 
        
        OrderLabelDTO.initialize(this, orderId, placesNumber, url, parcelBoxLabels);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderId, placesNumber, url, parcelBoxLabels) { 
        obj['orderId'] = orderId;
        obj['placesNumber'] = placesNumber;
        obj['url'] = url;
        obj['parcelBoxLabels'] = parcelBoxLabels;
    }

    /**
     * Constructs a <code>OrderLabelDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderLabelDTO} obj Optional instance to populate.
     * @return {module:model/OrderLabelDTO} The populated <code>OrderLabelDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderLabelDTO();

            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
            if (data.hasOwnProperty('placesNumber')) {
                obj['placesNumber'] = ApiClient.convertToType(data['placesNumber'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('parcelBoxLabels')) {
                obj['parcelBoxLabels'] = ApiClient.convertToType(data['parcelBoxLabels'], [ParcelBoxLabelDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderLabelDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderLabelDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderLabelDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['parcelBoxLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parcelBoxLabels'])) {
                throw new Error("Expected the field `parcelBoxLabels` to be an array in the JSON data but got " + data['parcelBoxLabels']);
            }
            // validate the optional field `parcelBoxLabels` (array)
            for (const item of data['parcelBoxLabels']) {
                ParcelBoxLabelDTO.validateJSON(item);
            };
        }

        return true;
    }


}

OrderLabelDTO.RequiredProperties = ["orderId", "placesNumber", "url", "parcelBoxLabels"];

/**
 * Идентификатор заказа.
 * @member {Number} orderId
 */
OrderLabelDTO.prototype['orderId'] = undefined;

/**
 * Количество коробок в заказе.
 * @member {Number} placesNumber
 */
OrderLabelDTO.prototype['placesNumber'] = undefined;

/**
 * URL файла с ярлыками‑наклейками на все коробки в заказе.  Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/labels](../../reference/orders/generateOrderLabels.md). 
 * @member {String} url
 */
OrderLabelDTO.prototype['url'] = undefined;

/**
 * Информация на ярлыке.
 * @member {Array.<module:model/ParcelBoxLabelDTO>} parcelBoxLabels
 */
OrderLabelDTO.prototype['parcelBoxLabels'] = undefined;






export default OrderLabelDTO;

