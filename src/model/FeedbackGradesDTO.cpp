/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedbackGradesDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedbackGradesDTO::FeedbackGradesDTO()
{
    m_Average = 0.0;
    m_AverageIsSet = false;
    m_AgreeCount = 0L;
    m_AgreeCountIsSet = false;
    m_RejectCount = 0L;
    m_RejectCountIsSet = false;
    m_FactorsIsSet = false;
}

FeedbackGradesDTO::~FeedbackGradesDTO()
{
}

void FeedbackGradesDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedbackGradesDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AverageIsSet)
    {
        val[utility::conversions::to_string_t(U("average"))] = ModelBase::toJson(m_Average);
    }
    if(m_AgreeCountIsSet)
    {
        val[utility::conversions::to_string_t(U("agreeCount"))] = ModelBase::toJson(m_AgreeCount);
    }
    if(m_RejectCountIsSet)
    {
        val[utility::conversions::to_string_t(U("rejectCount"))] = ModelBase::toJson(m_RejectCount);
    }
    if(m_FactorsIsSet)
    {
        val[utility::conversions::to_string_t(U("factors"))] = ModelBase::toJson(m_Factors);
    }

    return val;
}

bool FeedbackGradesDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("average"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average")));
        if(!fieldValue.is_null())
        {
            double refVal_setAverage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverage);
            setAverage(refVal_setAverage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agreeCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agreeCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setAgreeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgreeCount);
            setAgreeCount(refVal_setAgreeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rejectCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rejectCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRejectCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRejectCount);
            setRejectCount(refVal_setRejectCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("factors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("factors")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FeedbackFactorDTO>> refVal_setFactors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFactors);
            setFactors(refVal_setFactors);
        }
    }
    return ok;
}

void FeedbackGradesDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average")), m_Average));
    }
    if(m_AgreeCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agreeCount")), m_AgreeCount));
    }
    if(m_RejectCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rejectCount")), m_RejectCount));
    }
    if(m_FactorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("factors")), m_Factors));
    }
}

bool FeedbackGradesDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("average"))))
    {
        double refVal_setAverage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average"))), refVal_setAverage );
        setAverage(refVal_setAverage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agreeCount"))))
    {
        int64_t refVal_setAgreeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agreeCount"))), refVal_setAgreeCount );
        setAgreeCount(refVal_setAgreeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rejectCount"))))
    {
        int64_t refVal_setRejectCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rejectCount"))), refVal_setRejectCount );
        setRejectCount(refVal_setRejectCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("factors"))))
    {
        std::vector<std::shared_ptr<FeedbackFactorDTO>> refVal_setFactors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("factors"))), refVal_setFactors );
        setFactors(refVal_setFactors);
    }
    return ok;
}

double FeedbackGradesDTO::getAverage() const
{
    return m_Average;
}

void FeedbackGradesDTO::setAverage(double value)
{
    m_Average = value;
    m_AverageIsSet = true;
}

bool FeedbackGradesDTO::averageIsSet() const
{
    return m_AverageIsSet;
}

void FeedbackGradesDTO::unsetAverage()
{
    m_AverageIsSet = false;
}
int64_t FeedbackGradesDTO::getAgreeCount() const
{
    return m_AgreeCount;
}

void FeedbackGradesDTO::setAgreeCount(int64_t value)
{
    m_AgreeCount = value;
    m_AgreeCountIsSet = true;
}

bool FeedbackGradesDTO::agreeCountIsSet() const
{
    return m_AgreeCountIsSet;
}

void FeedbackGradesDTO::unsetAgreeCount()
{
    m_AgreeCountIsSet = false;
}
int64_t FeedbackGradesDTO::getRejectCount() const
{
    return m_RejectCount;
}

void FeedbackGradesDTO::setRejectCount(int64_t value)
{
    m_RejectCount = value;
    m_RejectCountIsSet = true;
}

bool FeedbackGradesDTO::rejectCountIsSet() const
{
    return m_RejectCountIsSet;
}

void FeedbackGradesDTO::unsetRejectCount()
{
    m_RejectCountIsSet = false;
}
std::vector<std::shared_ptr<FeedbackFactorDTO>>& FeedbackGradesDTO::getFactors()
{
    return m_Factors;
}

void FeedbackGradesDTO::setFactors(const std::vector<std::shared_ptr<FeedbackFactorDTO>>& value)
{
    m_Factors = value;
    m_FactorsIsSet = true;
}

bool FeedbackGradesDTO::factorsIsSet() const
{
    return m_FactorsIsSet;
}

void FeedbackGradesDTO::unsetFactors()
{
    m_FactorsIsSet = false;
}
}
}
}
}


