/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasePriceDTO from './BasePriceDTO';
import CurrencyType from './CurrencyType';

/**
 * The UpdatePriceWithDiscountDTO model module.
 * @module model/UpdatePriceWithDiscountDTO
 * @version LATEST
 */
class UpdatePriceWithDiscountDTO {
    /**
     * Constructs a new <code>UpdatePriceWithDiscountDTO</code>.
     * Цена с указанием скидки.
     * @alias module:model/UpdatePriceWithDiscountDTO
     * @implements module:model/BasePriceDTO
     * @param value {Number} Значение.
     * @param currencyId {module:model/CurrencyType} 
     */
    constructor(value, currencyId) { 
        BasePriceDTO.initialize(this, value, currencyId);
        UpdatePriceWithDiscountDTO.initialize(this, value, currencyId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, value, currencyId) { 
        obj['value'] = value;
        obj['currencyId'] = currencyId;
    }

    /**
     * Constructs a <code>UpdatePriceWithDiscountDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePriceWithDiscountDTO} obj Optional instance to populate.
     * @return {module:model/UpdatePriceWithDiscountDTO} The populated <code>UpdatePriceWithDiscountDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePriceWithDiscountDTO();
            BasePriceDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('currencyId')) {
                obj['currencyId'] = CurrencyType.constructFromObject(data['currencyId']);
            }
            if (data.hasOwnProperty('discountBase')) {
                obj['discountBase'] = ApiClient.convertToType(data['discountBase'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePriceWithDiscountDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePriceWithDiscountDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdatePriceWithDiscountDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

UpdatePriceWithDiscountDTO.RequiredProperties = ["value", "currencyId"];

/**
 * Значение.
 * @member {Number} value
 */
UpdatePriceWithDiscountDTO.prototype['value'] = undefined;

/**
 * @member {module:model/CurrencyType} currencyId
 */
UpdatePriceWithDiscountDTO.prototype['currencyId'] = undefined;

/**
 * Цена до скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
 * @member {Number} discountBase
 */
UpdatePriceWithDiscountDTO.prototype['discountBase'] = undefined;


// Implement BasePriceDTO interface:
/**
 * Значение.
 * @member {Number} value
 */
BasePriceDTO.prototype['value'] = undefined;
/**
 * @member {module:model/CurrencyType} currencyId
 */
BasePriceDTO.prototype['currencyId'] = undefined;




export default UpdatePriceWithDiscountDTO;

