/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedDTO::FeedDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Login = utility::conversions::to_string_t("");
    m_LoginIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_UploadDate = utility::datetime();
    m_UploadDateIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ContentIsSet = false;
    m_DownloadIsSet = false;
    m_PlacementIsSet = false;
    m_PublicationIsSet = false;
}

FeedDTO::~FeedDTO()
{
}

void FeedDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_LoginIsSet)
    {
        val[utility::conversions::to_string_t(U("login"))] = ModelBase::toJson(m_Login);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_Password);
    }
    if(m_UploadDateIsSet)
    {
        val[utility::conversions::to_string_t(U("uploadDate"))] = ModelBase::toJson(m_UploadDate);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t(U("content"))] = ModelBase::toJson(m_Content);
    }
    if(m_DownloadIsSet)
    {
        val[utility::conversions::to_string_t(U("download"))] = ModelBase::toJson(m_Download);
    }
    if(m_PlacementIsSet)
    {
        val[utility::conversions::to_string_t(U("placement"))] = ModelBase::toJson(m_Placement);
    }
    if(m_PublicationIsSet)
    {
        val[utility::conversions::to_string_t(U("publication"))] = ModelBase::toJson(m_Publication);
    }

    return val;
}

bool FeedDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("login"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("login")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogin);
            setLogin(refVal_setLogin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPassword);
            setPassword(refVal_setPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uploadDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uploadDate")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUploadDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUploadDate);
            setUploadDate(refVal_setUploadDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedContentDTO> refVal_setContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContent);
            setContent(refVal_setContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("download"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("download")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedDownloadDTO> refVal_setDownload;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownload);
            setDownload(refVal_setDownload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("placement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("placement")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedPlacementDTO> refVal_setPlacement;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlacement);
            setPlacement(refVal_setPlacement);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publication"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publication")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedPublicationDTO> refVal_setPublication;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublication);
            setPublication(refVal_setPublication);
        }
    }
    return ok;
}

void FeedDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_LoginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("login")), m_Login));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")), m_Password));
    }
    if(m_UploadDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uploadDate")), m_UploadDate));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content")), m_Content));
    }
    if(m_DownloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("download")), m_Download));
    }
    if(m_PlacementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("placement")), m_Placement));
    }
    if(m_PublicationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publication")), m_Publication));
    }
}

bool FeedDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("login"))))
    {
        utility::string_t refVal_setLogin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("login"))), refVal_setLogin );
        setLogin(refVal_setLogin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("password"))))
    {
        utility::string_t refVal_setPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_setPassword );
        setPassword(refVal_setPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uploadDate"))))
    {
        utility::datetime refVal_setUploadDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uploadDate"))), refVal_setUploadDate );
        setUploadDate(refVal_setUploadDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("content"))))
    {
        std::shared_ptr<FeedContentDTO> refVal_setContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content"))), refVal_setContent );
        setContent(refVal_setContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("download"))))
    {
        std::shared_ptr<FeedDownloadDTO> refVal_setDownload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("download"))), refVal_setDownload );
        setDownload(refVal_setDownload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("placement"))))
    {
        std::shared_ptr<FeedPlacementDTO> refVal_setPlacement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("placement"))), refVal_setPlacement );
        setPlacement(refVal_setPlacement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publication"))))
    {
        std::shared_ptr<FeedPublicationDTO> refVal_setPublication;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publication"))), refVal_setPublication );
        setPublication(refVal_setPublication);
    }
    return ok;
}

int64_t FeedDTO::getId() const
{
    return m_Id;
}

void FeedDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FeedDTO::idIsSet() const
{
    return m_IdIsSet;
}

void FeedDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t FeedDTO::getLogin() const
{
    return m_Login;
}

void FeedDTO::setLogin(const utility::string_t& value)
{
    m_Login = value;
    m_LoginIsSet = true;
}

bool FeedDTO::loginIsSet() const
{
    return m_LoginIsSet;
}

void FeedDTO::unsetLogin()
{
    m_LoginIsSet = false;
}
utility::string_t FeedDTO::getName() const
{
    return m_Name;
}

void FeedDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool FeedDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void FeedDTO::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t FeedDTO::getPassword() const
{
    return m_Password;
}

void FeedDTO::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool FeedDTO::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void FeedDTO::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::datetime FeedDTO::getUploadDate() const
{
    return m_UploadDate;
}

void FeedDTO::setUploadDate(const utility::datetime& value)
{
    m_UploadDate = value;
    m_UploadDateIsSet = true;
}

bool FeedDTO::uploadDateIsSet() const
{
    return m_UploadDateIsSet;
}

void FeedDTO::unsetUploadDate()
{
    m_UploadDateIsSet = false;
}
utility::string_t FeedDTO::getUrl() const
{
    return m_Url;
}

void FeedDTO::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool FeedDTO::urlIsSet() const
{
    return m_UrlIsSet;
}

void FeedDTO::unsetUrl()
{
    m_UrlIsSet = false;
}
std::shared_ptr<FeedContentDTO> FeedDTO::getContent() const
{
    return m_Content;
}

void FeedDTO::setContent(const std::shared_ptr<FeedContentDTO>& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool FeedDTO::contentIsSet() const
{
    return m_ContentIsSet;
}

void FeedDTO::unsetContent()
{
    m_ContentIsSet = false;
}
std::shared_ptr<FeedDownloadDTO> FeedDTO::getDownload() const
{
    return m_Download;
}

void FeedDTO::setDownload(const std::shared_ptr<FeedDownloadDTO>& value)
{
    m_Download = value;
    m_DownloadIsSet = true;
}

bool FeedDTO::downloadIsSet() const
{
    return m_DownloadIsSet;
}

void FeedDTO::unsetDownload()
{
    m_DownloadIsSet = false;
}
std::shared_ptr<FeedPlacementDTO> FeedDTO::getPlacement() const
{
    return m_Placement;
}

void FeedDTO::setPlacement(const std::shared_ptr<FeedPlacementDTO>& value)
{
    m_Placement = value;
    m_PlacementIsSet = true;
}

bool FeedDTO::placementIsSet() const
{
    return m_PlacementIsSet;
}

void FeedDTO::unsetPlacement()
{
    m_PlacementIsSet = false;
}
std::shared_ptr<FeedPublicationDTO> FeedDTO::getPublication() const
{
    return m_Publication;
}

void FeedDTO::setPublication(const std::shared_ptr<FeedPublicationDTO>& value)
{
    m_Publication = value;
    m_PublicationIsSet = true;
}

bool FeedDTO::publicationIsSet() const
{
    return m_PublicationIsSet;
}

void FeedDTO::unsetPublication()
{
    m_PublicationIsSet = false;
}
}
}
}
}


