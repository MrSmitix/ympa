/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GpsDTO from './GpsDTO';

/**
 * The OrderDeliveryAddressDTO model module.
 * @module model/OrderDeliveryAddressDTO
 * @version LATEST
 */
class OrderDeliveryAddressDTO {
    /**
     * Constructs a new <code>OrderDeliveryAddressDTO</code>.
     * Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
     * @alias module:model/OrderDeliveryAddressDTO
     */
    constructor() { 
        
        OrderDeliveryAddressDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderDeliveryAddressDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDeliveryAddressDTO} obj Optional instance to populate.
     * @return {module:model/OrderDeliveryAddressDTO} The populated <code>OrderDeliveryAddressDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDeliveryAddressDTO();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('postcode')) {
                obj['postcode'] = ApiClient.convertToType(data['postcode'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('subway')) {
                obj['subway'] = ApiClient.convertToType(data['subway'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('house')) {
                obj['house'] = ApiClient.convertToType(data['house'], 'String');
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'String');
            }
            if (data.hasOwnProperty('entrance')) {
                obj['entrance'] = ApiClient.convertToType(data['entrance'], 'String');
            }
            if (data.hasOwnProperty('entryphone')) {
                obj['entryphone'] = ApiClient.convertToType(data['entryphone'], 'String');
            }
            if (data.hasOwnProperty('floor')) {
                obj['floor'] = ApiClient.convertToType(data['floor'], 'String');
            }
            if (data.hasOwnProperty('apartment')) {
                obj['apartment'] = ApiClient.convertToType(data['apartment'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('recipient')) {
                obj['recipient'] = ApiClient.convertToType(data['recipient'], 'String');
            }
            if (data.hasOwnProperty('gps')) {
                obj['gps'] = GpsDTO.constructFromObject(data['gps']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderDeliveryAddressDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderDeliveryAddressDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['postcode'] && !(typeof data['postcode'] === 'string' || data['postcode'] instanceof String)) {
            throw new Error("Expected the field `postcode` to be a primitive type in the JSON string but got " + data['postcode']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['subway'] && !(typeof data['subway'] === 'string' || data['subway'] instanceof String)) {
            throw new Error("Expected the field `subway` to be a primitive type in the JSON string but got " + data['subway']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['house'] && !(typeof data['house'] === 'string' || data['house'] instanceof String)) {
            throw new Error("Expected the field `house` to be a primitive type in the JSON string but got " + data['house']);
        }
        // ensure the json data is a string
        if (data['block'] && !(typeof data['block'] === 'string' || data['block'] instanceof String)) {
            throw new Error("Expected the field `block` to be a primitive type in the JSON string but got " + data['block']);
        }
        // ensure the json data is a string
        if (data['entrance'] && !(typeof data['entrance'] === 'string' || data['entrance'] instanceof String)) {
            throw new Error("Expected the field `entrance` to be a primitive type in the JSON string but got " + data['entrance']);
        }
        // ensure the json data is a string
        if (data['entryphone'] && !(typeof data['entryphone'] === 'string' || data['entryphone'] instanceof String)) {
            throw new Error("Expected the field `entryphone` to be a primitive type in the JSON string but got " + data['entryphone']);
        }
        // ensure the json data is a string
        if (data['floor'] && !(typeof data['floor'] === 'string' || data['floor'] instanceof String)) {
            throw new Error("Expected the field `floor` to be a primitive type in the JSON string but got " + data['floor']);
        }
        // ensure the json data is a string
        if (data['apartment'] && !(typeof data['apartment'] === 'string' || data['apartment'] instanceof String)) {
            throw new Error("Expected the field `apartment` to be a primitive type in the JSON string but got " + data['apartment']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['recipient'] && !(typeof data['recipient'] === 'string' || data['recipient'] instanceof String)) {
            throw new Error("Expected the field `recipient` to be a primitive type in the JSON string but got " + data['recipient']);
        }
        // validate the optional field `gps`
        if (data['gps']) { // data not null
          GpsDTO.validateJSON(data['gps']);
        }

        return true;
    }


}



/**
 * Страна.  Обязательный параметр. 
 * @member {String} country
 */
OrderDeliveryAddressDTO.prototype['country'] = undefined;

/**
 * Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`). 
 * @member {String} postcode
 */
OrderDeliveryAddressDTO.prototype['postcode'] = undefined;

/**
 * Город или населенный пункт.  Обязательный параметр. 
 * @member {String} city
 */
OrderDeliveryAddressDTO.prototype['city'] = undefined;

/**
 * Район.
 * @member {String} district
 */
OrderDeliveryAddressDTO.prototype['district'] = undefined;

/**
 * Станция метро.
 * @member {String} subway
 */
OrderDeliveryAddressDTO.prototype['subway'] = undefined;

/**
 * Улица.  Обязательный параметр. 
 * @member {String} street
 */
OrderDeliveryAddressDTO.prototype['street'] = undefined;

/**
 * Дом или владение.  Обязательный параметр. 
 * @member {String} house
 */
OrderDeliveryAddressDTO.prototype['house'] = undefined;

/**
 * Корпус или строение.
 * @member {String} block
 */
OrderDeliveryAddressDTO.prototype['block'] = undefined;

/**
 * Подъезд.
 * @member {String} entrance
 */
OrderDeliveryAddressDTO.prototype['entrance'] = undefined;

/**
 * Код домофона.
 * @member {String} entryphone
 */
OrderDeliveryAddressDTO.prototype['entryphone'] = undefined;

/**
 * Этаж.
 * @member {String} floor
 */
OrderDeliveryAddressDTO.prototype['floor'] = undefined;

/**
 * Квартира или офис.
 * @member {String} apartment
 */
OrderDeliveryAddressDTO.prototype['apartment'] = undefined;

/**
 * Телефон получателя заказа.  Обязательный параметр. 
 * @member {String} phone
 */
OrderDeliveryAddressDTO.prototype['phone'] = undefined;

/**
 * Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
 * @member {String} recipient
 */
OrderDeliveryAddressDTO.prototype['recipient'] = undefined;

/**
 * @member {module:model/GpsDTO} gps
 */
OrderDeliveryAddressDTO.prototype['gps'] = undefined;






export default OrderDeliveryAddressDTO;

