/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderBuyerType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OrderBuyerType::eOrderBuyerType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("PERSON")))
        return OrderBuyerType::eOrderBuyerType::OrderBuyerType_PERSON;
    if (val == utility::conversions::to_string_t(U("BUSINESS")))
        return OrderBuyerType::eOrderBuyerType::OrderBuyerType_BUSINESS;
    return {};
}

EnumUnderlyingType fromEnum(OrderBuyerType::eOrderBuyerType e)
{
    switch (e)
    {
    case OrderBuyerType::eOrderBuyerType::OrderBuyerType_PERSON:
        return U("PERSON");
    case OrderBuyerType::eOrderBuyerType::OrderBuyerType_BUSINESS:
        return U("BUSINESS");
    default:
        break;
    }
    return {};
}
}

OrderBuyerType::OrderBuyerType()
{
}

OrderBuyerType::~OrderBuyerType()
{
}

void OrderBuyerType::validate()
{
    // TODO: implement validation
}

web::json::value OrderBuyerType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrderBuyerType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrderBuyerType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrderBuyerType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrderBuyerType::eOrderBuyerType OrderBuyerType::getValue() const
{
   return m_value;
}

void OrderBuyerType::setValue(OrderBuyerType::eOrderBuyerType const value)
{
   m_value = value;
}


}
}
}
}


