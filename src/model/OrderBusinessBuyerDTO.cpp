/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderBusinessBuyerDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderBusinessBuyerDTO::OrderBusinessBuyerDTO()
{
    m_Inn = utility::conversions::to_string_t("");
    m_InnIsSet = false;
    m_Kpp = utility::conversions::to_string_t("");
    m_KppIsSet = false;
    m_OrganizationName = utility::conversions::to_string_t("");
    m_OrganizationNameIsSet = false;
    m_OrganizationJurAddress = utility::conversions::to_string_t("");
    m_OrganizationJurAddressIsSet = false;
}

OrderBusinessBuyerDTO::~OrderBusinessBuyerDTO()
{
}

void OrderBusinessBuyerDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderBusinessBuyerDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InnIsSet)
    {
        val[utility::conversions::to_string_t(U("inn"))] = ModelBase::toJson(m_Inn);
    }
    if(m_KppIsSet)
    {
        val[utility::conversions::to_string_t(U("kpp"))] = ModelBase::toJson(m_Kpp);
    }
    if(m_OrganizationNameIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationName"))] = ModelBase::toJson(m_OrganizationName);
    }
    if(m_OrganizationJurAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("organizationJurAddress"))] = ModelBase::toJson(m_OrganizationJurAddress);
    }

    return val;
}

bool OrderBusinessBuyerDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInn);
            setInn(refVal_setInn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kpp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kpp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKpp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKpp);
            setKpp(refVal_setKpp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrganizationName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganizationName);
            setOrganizationName(refVal_setOrganizationName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organizationJurAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organizationJurAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrganizationJurAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganizationJurAddress);
            setOrganizationJurAddress(refVal_setOrganizationJurAddress);
        }
    }
    return ok;
}

void OrderBusinessBuyerDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inn")), m_Inn));
    }
    if(m_KppIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kpp")), m_Kpp));
    }
    if(m_OrganizationNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationName")), m_OrganizationName));
    }
    if(m_OrganizationJurAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organizationJurAddress")), m_OrganizationJurAddress));
    }
}

bool OrderBusinessBuyerDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inn"))))
    {
        utility::string_t refVal_setInn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inn"))), refVal_setInn );
        setInn(refVal_setInn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kpp"))))
    {
        utility::string_t refVal_setKpp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kpp"))), refVal_setKpp );
        setKpp(refVal_setKpp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationName"))))
    {
        utility::string_t refVal_setOrganizationName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationName"))), refVal_setOrganizationName );
        setOrganizationName(refVal_setOrganizationName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organizationJurAddress"))))
    {
        utility::string_t refVal_setOrganizationJurAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organizationJurAddress"))), refVal_setOrganizationJurAddress );
        setOrganizationJurAddress(refVal_setOrganizationJurAddress);
    }
    return ok;
}

utility::string_t OrderBusinessBuyerDTO::getInn() const
{
    return m_Inn;
}

void OrderBusinessBuyerDTO::setInn(const utility::string_t& value)
{
    m_Inn = value;
    m_InnIsSet = true;
}

bool OrderBusinessBuyerDTO::innIsSet() const
{
    return m_InnIsSet;
}

void OrderBusinessBuyerDTO::unsetInn()
{
    m_InnIsSet = false;
}
utility::string_t OrderBusinessBuyerDTO::getKpp() const
{
    return m_Kpp;
}

void OrderBusinessBuyerDTO::setKpp(const utility::string_t& value)
{
    m_Kpp = value;
    m_KppIsSet = true;
}

bool OrderBusinessBuyerDTO::kppIsSet() const
{
    return m_KppIsSet;
}

void OrderBusinessBuyerDTO::unsetKpp()
{
    m_KppIsSet = false;
}
utility::string_t OrderBusinessBuyerDTO::getOrganizationName() const
{
    return m_OrganizationName;
}

void OrderBusinessBuyerDTO::setOrganizationName(const utility::string_t& value)
{
    m_OrganizationName = value;
    m_OrganizationNameIsSet = true;
}

bool OrderBusinessBuyerDTO::organizationNameIsSet() const
{
    return m_OrganizationNameIsSet;
}

void OrderBusinessBuyerDTO::unsetOrganizationName()
{
    m_OrganizationNameIsSet = false;
}
utility::string_t OrderBusinessBuyerDTO::getOrganizationJurAddress() const
{
    return m_OrganizationJurAddress;
}

void OrderBusinessBuyerDTO::setOrganizationJurAddress(const utility::string_t& value)
{
    m_OrganizationJurAddress = value;
    m_OrganizationJurAddressIsSet = true;
}

bool OrderBusinessBuyerDTO::organizationJurAddressIsSet() const
{
    return m_OrganizationJurAddressIsSet;
}

void OrderBusinessBuyerDTO::unsetOrganizationJurAddress()
{
    m_OrganizationJurAddressIsSet = false;
}
}
}
}
}


