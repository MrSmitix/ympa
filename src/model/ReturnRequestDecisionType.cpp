/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnRequestDecisionType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

ReturnRequestDecisionType::eReturnRequestDecisionType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("REFUND_MONEY")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REFUND_MONEY;
    if (val == utility::conversions::to_string_t(U("REFUND_MONEY_INCLUDING_SHIPMENT")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REFUND_MONEY_INCLUDING_SHIPMENT;
    if (val == utility::conversions::to_string_t(U("REPAIR")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REPAIR;
    if (val == utility::conversions::to_string_t(U("REPLACE")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REPLACE;
    if (val == utility::conversions::to_string_t(U("SEND_TO_EXAMINATION")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_SEND_TO_EXAMINATION;
    if (val == utility::conversions::to_string_t(U("DECLINE_REFUND")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_DECLINE_REFUND;
    if (val == utility::conversions::to_string_t(U("OTHER_DECISION")))
        return ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_OTHER_DECISION;
    return {};
}

EnumUnderlyingType fromEnum(ReturnRequestDecisionType::eReturnRequestDecisionType e)
{
    switch (e)
    {
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REFUND_MONEY:
        return U("REFUND_MONEY");
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REFUND_MONEY_INCLUDING_SHIPMENT:
        return U("REFUND_MONEY_INCLUDING_SHIPMENT");
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REPAIR:
        return U("REPAIR");
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_REPLACE:
        return U("REPLACE");
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_SEND_TO_EXAMINATION:
        return U("SEND_TO_EXAMINATION");
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_DECLINE_REFUND:
        return U("DECLINE_REFUND");
    case ReturnRequestDecisionType::eReturnRequestDecisionType::ReturnRequestDecisionType_OTHER_DECISION:
        return U("OTHER_DECISION");
    default:
        break;
    }
    return {};
}
}

ReturnRequestDecisionType::ReturnRequestDecisionType()
{
}

ReturnRequestDecisionType::~ReturnRequestDecisionType()
{
}

void ReturnRequestDecisionType::validate()
{
    // TODO: implement validation
}

web::json::value ReturnRequestDecisionType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ReturnRequestDecisionType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ReturnRequestDecisionType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ReturnRequestDecisionType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ReturnRequestDecisionType::eReturnRequestDecisionType ReturnRequestDecisionType::getValue() const
{
   return m_value;
}

void ReturnRequestDecisionType::setValue(ReturnRequestDecisionType::eReturnRequestDecisionType const value)
{
   m_value = value;
}


}
}
}
}


