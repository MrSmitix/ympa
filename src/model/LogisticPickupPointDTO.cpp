/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/LogisticPickupPointDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



LogisticPickupPointDTO::LogisticPickupPointDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_AddressIsSet = false;
    m_Instruction = utility::conversions::to_string_t("");
    m_InstructionIsSet = false;
    m_TypeIsSet = false;
    m_LogisticPartnerId = 0L;
    m_LogisticPartnerIdIsSet = false;
}

LogisticPickupPointDTO::~LogisticPickupPointDTO()
{
}

void LogisticPickupPointDTO::validate()
{
    // TODO: implement validation
}

web::json::value LogisticPickupPointDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_InstructionIsSet)
    {
        val[utility::conversions::to_string_t(U("instruction"))] = ModelBase::toJson(m_Instruction);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_LogisticPartnerIdIsSet)
    {
        val[utility::conversions::to_string_t(U("logisticPartnerId"))] = ModelBase::toJson(m_LogisticPartnerId);
    }

    return val;
}

bool LogisticPickupPointDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PickupAddressDTO> refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instruction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instruction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstruction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstruction);
            setInstruction(refVal_setInstruction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LogisticPointType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logisticPartnerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logisticPartnerId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLogisticPartnerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogisticPartnerId);
            setLogisticPartnerId(refVal_setLogisticPartnerId);
        }
    }
    return ok;
}

void LogisticPickupPointDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_InstructionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instruction")), m_Instruction));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_LogisticPartnerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logisticPartnerId")), m_LogisticPartnerId));
    }
}

bool LogisticPickupPointDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        std::shared_ptr<PickupAddressDTO> refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instruction"))))
    {
        utility::string_t refVal_setInstruction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instruction"))), refVal_setInstruction );
        setInstruction(refVal_setInstruction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<LogisticPointType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logisticPartnerId"))))
    {
        int64_t refVal_setLogisticPartnerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logisticPartnerId"))), refVal_setLogisticPartnerId );
        setLogisticPartnerId(refVal_setLogisticPartnerId);
    }
    return ok;
}

int64_t LogisticPickupPointDTO::getId() const
{
    return m_Id;
}

void LogisticPickupPointDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool LogisticPickupPointDTO::idIsSet() const
{
    return m_IdIsSet;
}

void LogisticPickupPointDTO::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t LogisticPickupPointDTO::getName() const
{
    return m_Name;
}

void LogisticPickupPointDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool LogisticPickupPointDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void LogisticPickupPointDTO::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<PickupAddressDTO> LogisticPickupPointDTO::getAddress() const
{
    return m_Address;
}

void LogisticPickupPointDTO::setAddress(const std::shared_ptr<PickupAddressDTO>& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool LogisticPickupPointDTO::addressIsSet() const
{
    return m_AddressIsSet;
}

void LogisticPickupPointDTO::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t LogisticPickupPointDTO::getInstruction() const
{
    return m_Instruction;
}

void LogisticPickupPointDTO::setInstruction(const utility::string_t& value)
{
    m_Instruction = value;
    m_InstructionIsSet = true;
}

bool LogisticPickupPointDTO::instructionIsSet() const
{
    return m_InstructionIsSet;
}

void LogisticPickupPointDTO::unsetInstruction()
{
    m_InstructionIsSet = false;
}
std::shared_ptr<LogisticPointType> LogisticPickupPointDTO::getType() const
{
    return m_Type;
}

void LogisticPickupPointDTO::setType(const std::shared_ptr<LogisticPointType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool LogisticPickupPointDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void LogisticPickupPointDTO::unsetType()
{
    m_TypeIsSet = false;
}
int64_t LogisticPickupPointDTO::getLogisticPartnerId() const
{
    return m_LogisticPartnerId;
}

void LogisticPickupPointDTO::setLogisticPartnerId(int64_t value)
{
    m_LogisticPartnerId = value;
    m_LogisticPartnerIdIsSet = true;
}

bool LogisticPickupPointDTO::logisticPartnerIdIsSet() const
{
    return m_LogisticPartnerIdIsSet;
}

void LogisticPickupPointDTO::unsetLogisticPartnerId()
{
    m_LogisticPartnerIdIsSet = false;
}
}
}
}
}


