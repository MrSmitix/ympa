/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferWeightDimensionsDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OfferWeightDimensionsDTO::OfferWeightDimensionsDTO()
{
    m_Length = 0.0;
    m_LengthIsSet = false;
    m_Width = 0.0;
    m_WidthIsSet = false;
    m_Height = 0.0;
    m_HeightIsSet = false;
    m_Weight = 0.0;
    m_WeightIsSet = false;
}

OfferWeightDimensionsDTO::~OfferWeightDimensionsDTO()
{
}

void OfferWeightDimensionsDTO::validate()
{
    // TODO: implement validation
}

web::json::value OfferWeightDimensionsDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LengthIsSet)
    {
        val[utility::conversions::to_string_t(U("length"))] = ModelBase::toJson(m_Length);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t(U("width"))] = ModelBase::toJson(m_Width);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t(U("height"))] = ModelBase::toJson(m_Height);
    }
    if(m_WeightIsSet)
    {
        val[utility::conversions::to_string_t(U("weight"))] = ModelBase::toJson(m_Weight);
    }

    return val;
}

bool OfferWeightDimensionsDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("length"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("length")));
        if(!fieldValue.is_null())
        {
            double refVal_setLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLength);
            setLength(refVal_setLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("width"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("width")));
        if(!fieldValue.is_null())
        {
            double refVal_setWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWidth);
            setWidth(refVal_setWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("height"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("height")));
        if(!fieldValue.is_null())
        {
            double refVal_setHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeight);
            setHeight(refVal_setHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weight")));
        if(!fieldValue.is_null())
        {
            double refVal_setWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeight);
            setWeight(refVal_setWeight);
        }
    }
    return ok;
}

void OfferWeightDimensionsDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("length")), m_Length));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("width")), m_Width));
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("height")), m_Height));
    }
    if(m_WeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weight")), m_Weight));
    }
}

bool OfferWeightDimensionsDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("length"))))
    {
        double refVal_setLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("length"))), refVal_setLength );
        setLength(refVal_setLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("width"))))
    {
        double refVal_setWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("width"))), refVal_setWidth );
        setWidth(refVal_setWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("height"))))
    {
        double refVal_setHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("height"))), refVal_setHeight );
        setHeight(refVal_setHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weight"))))
    {
        double refVal_setWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weight"))), refVal_setWeight );
        setWeight(refVal_setWeight);
    }
    return ok;
}

double OfferWeightDimensionsDTO::getLength() const
{
    return m_Length;
}

void OfferWeightDimensionsDTO::setLength(double value)
{
    m_Length = value;
    m_LengthIsSet = true;
}

bool OfferWeightDimensionsDTO::lengthIsSet() const
{
    return m_LengthIsSet;
}

void OfferWeightDimensionsDTO::unsetLength()
{
    m_LengthIsSet = false;
}
double OfferWeightDimensionsDTO::getWidth() const
{
    return m_Width;
}

void OfferWeightDimensionsDTO::setWidth(double value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool OfferWeightDimensionsDTO::widthIsSet() const
{
    return m_WidthIsSet;
}

void OfferWeightDimensionsDTO::unsetWidth()
{
    m_WidthIsSet = false;
}
double OfferWeightDimensionsDTO::getHeight() const
{
    return m_Height;
}

void OfferWeightDimensionsDTO::setHeight(double value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool OfferWeightDimensionsDTO::heightIsSet() const
{
    return m_HeightIsSet;
}

void OfferWeightDimensionsDTO::unsetHeight()
{
    m_HeightIsSet = false;
}
double OfferWeightDimensionsDTO::getWeight() const
{
    return m_Weight;
}

void OfferWeightDimensionsDTO::setWeight(double value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}

bool OfferWeightDimensionsDTO::weightIsSet() const
{
    return m_WeightIsSet;
}

void OfferWeightDimensionsDTO::unsetWeight()
{
    m_WeightIsSet = false;
}
}
}
}
}


