/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnDecisionDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReturnDecisionDTO::ReturnDecisionDTO()
{
    m_ReturnItemId = 0L;
    m_ReturnItemIdIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_ReasonTypeIsSet = false;
    m_SubreasonTypeIsSet = false;
    m_DecisionTypeIsSet = false;
    m_RefundAmount = 0L;
    m_RefundAmountIsSet = false;
    m_PartnerCompensation = 0L;
    m_PartnerCompensationIsSet = false;
    m_ImagesIsSet = false;
}

ReturnDecisionDTO::~ReturnDecisionDTO()
{
}

void ReturnDecisionDTO::validate()
{
    // TODO: implement validation
}

web::json::value ReturnDecisionDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReturnItemIdIsSet)
    {
        val[utility::conversions::to_string_t(U("returnItemId"))] = ModelBase::toJson(m_ReturnItemId);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_ReasonTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("reasonType"))] = ModelBase::toJson(m_ReasonType);
    }
    if(m_SubreasonTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("subreasonType"))] = ModelBase::toJson(m_SubreasonType);
    }
    if(m_DecisionTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("decisionType"))] = ModelBase::toJson(m_DecisionType);
    }
    if(m_RefundAmountIsSet)
    {
        val[utility::conversions::to_string_t(U("refundAmount"))] = ModelBase::toJson(m_RefundAmount);
    }
    if(m_PartnerCompensationIsSet)
    {
        val[utility::conversions::to_string_t(U("partnerCompensation"))] = ModelBase::toJson(m_PartnerCompensation);
    }
    if(m_ImagesIsSet)
    {
        val[utility::conversions::to_string_t(U("images"))] = ModelBase::toJson(m_Images);
    }

    return val;
}

bool ReturnDecisionDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("returnItemId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("returnItemId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setReturnItemId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReturnItemId);
            setReturnItemId(refVal_setReturnItemId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reasonType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reasonType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnDecisionReasonType> refVal_setReasonType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReasonType);
            setReasonType(refVal_setReasonType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subreasonType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subreasonType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnDecisionSubreasonType> refVal_setSubreasonType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubreasonType);
            setSubreasonType(refVal_setSubreasonType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("decisionType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("decisionType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ReturnDecisionType> refVal_setDecisionType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDecisionType);
            setDecisionType(refVal_setDecisionType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("refundAmount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("refundAmount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRefundAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRefundAmount);
            setRefundAmount(refVal_setRefundAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partnerCompensation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partnerCompensation")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPartnerCompensation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartnerCompensation);
            setPartnerCompensation(refVal_setPartnerCompensation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("images"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("images")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setImages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImages);
            setImages(refVal_setImages);
        }
    }
    return ok;
}

void ReturnDecisionDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReturnItemIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("returnItemId")), m_ReturnItemId));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_ReasonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reasonType")), m_ReasonType));
    }
    if(m_SubreasonTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subreasonType")), m_SubreasonType));
    }
    if(m_DecisionTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("decisionType")), m_DecisionType));
    }
    if(m_RefundAmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("refundAmount")), m_RefundAmount));
    }
    if(m_PartnerCompensationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partnerCompensation")), m_PartnerCompensation));
    }
    if(m_ImagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("images")), m_Images));
    }
}

bool ReturnDecisionDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("returnItemId"))))
    {
        int64_t refVal_setReturnItemId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("returnItemId"))), refVal_setReturnItemId );
        setReturnItemId(refVal_setReturnItemId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int32_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reasonType"))))
    {
        std::shared_ptr<ReturnDecisionReasonType> refVal_setReasonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reasonType"))), refVal_setReasonType );
        setReasonType(refVal_setReasonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subreasonType"))))
    {
        std::shared_ptr<ReturnDecisionSubreasonType> refVal_setSubreasonType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subreasonType"))), refVal_setSubreasonType );
        setSubreasonType(refVal_setSubreasonType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("decisionType"))))
    {
        std::shared_ptr<ReturnDecisionType> refVal_setDecisionType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("decisionType"))), refVal_setDecisionType );
        setDecisionType(refVal_setDecisionType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("refundAmount"))))
    {
        int64_t refVal_setRefundAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("refundAmount"))), refVal_setRefundAmount );
        setRefundAmount(refVal_setRefundAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partnerCompensation"))))
    {
        int64_t refVal_setPartnerCompensation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partnerCompensation"))), refVal_setPartnerCompensation );
        setPartnerCompensation(refVal_setPartnerCompensation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("images"))))
    {
        std::vector<utility::string_t> refVal_setImages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("images"))), refVal_setImages );
        setImages(refVal_setImages);
    }
    return ok;
}

int64_t ReturnDecisionDTO::getReturnItemId() const
{
    return m_ReturnItemId;
}

void ReturnDecisionDTO::setReturnItemId(int64_t value)
{
    m_ReturnItemId = value;
    m_ReturnItemIdIsSet = true;
}

bool ReturnDecisionDTO::returnItemIdIsSet() const
{
    return m_ReturnItemIdIsSet;
}

void ReturnDecisionDTO::unsetReturnItemId()
{
    m_ReturnItemIdIsSet = false;
}
int32_t ReturnDecisionDTO::getCount() const
{
    return m_Count;
}

void ReturnDecisionDTO::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool ReturnDecisionDTO::countIsSet() const
{
    return m_CountIsSet;
}

void ReturnDecisionDTO::unsetCount()
{
    m_CountIsSet = false;
}
utility::string_t ReturnDecisionDTO::getComment() const
{
    return m_Comment;
}

void ReturnDecisionDTO::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool ReturnDecisionDTO::commentIsSet() const
{
    return m_CommentIsSet;
}

void ReturnDecisionDTO::unsetComment()
{
    m_CommentIsSet = false;
}
std::shared_ptr<ReturnDecisionReasonType> ReturnDecisionDTO::getReasonType() const
{
    return m_ReasonType;
}

void ReturnDecisionDTO::setReasonType(const std::shared_ptr<ReturnDecisionReasonType>& value)
{
    m_ReasonType = value;
    m_ReasonTypeIsSet = true;
}

bool ReturnDecisionDTO::reasonTypeIsSet() const
{
    return m_ReasonTypeIsSet;
}

void ReturnDecisionDTO::unsetReasonType()
{
    m_ReasonTypeIsSet = false;
}
std::shared_ptr<ReturnDecisionSubreasonType> ReturnDecisionDTO::getSubreasonType() const
{
    return m_SubreasonType;
}

void ReturnDecisionDTO::setSubreasonType(const std::shared_ptr<ReturnDecisionSubreasonType>& value)
{
    m_SubreasonType = value;
    m_SubreasonTypeIsSet = true;
}

bool ReturnDecisionDTO::subreasonTypeIsSet() const
{
    return m_SubreasonTypeIsSet;
}

void ReturnDecisionDTO::unsetSubreasonType()
{
    m_SubreasonTypeIsSet = false;
}
std::shared_ptr<ReturnDecisionType> ReturnDecisionDTO::getDecisionType() const
{
    return m_DecisionType;
}

void ReturnDecisionDTO::setDecisionType(const std::shared_ptr<ReturnDecisionType>& value)
{
    m_DecisionType = value;
    m_DecisionTypeIsSet = true;
}

bool ReturnDecisionDTO::decisionTypeIsSet() const
{
    return m_DecisionTypeIsSet;
}

void ReturnDecisionDTO::unsetDecisionType()
{
    m_DecisionTypeIsSet = false;
}
int64_t ReturnDecisionDTO::getRefundAmount() const
{
    return m_RefundAmount;
}

void ReturnDecisionDTO::setRefundAmount(int64_t value)
{
    m_RefundAmount = value;
    m_RefundAmountIsSet = true;
}

bool ReturnDecisionDTO::refundAmountIsSet() const
{
    return m_RefundAmountIsSet;
}

void ReturnDecisionDTO::unsetRefundAmount()
{
    m_RefundAmountIsSet = false;
}
int64_t ReturnDecisionDTO::getPartnerCompensation() const
{
    return m_PartnerCompensation;
}

void ReturnDecisionDTO::setPartnerCompensation(int64_t value)
{
    m_PartnerCompensation = value;
    m_PartnerCompensationIsSet = true;
}

bool ReturnDecisionDTO::partnerCompensationIsSet() const
{
    return m_PartnerCompensationIsSet;
}

void ReturnDecisionDTO::unsetPartnerCompensation()
{
    m_PartnerCompensationIsSet = false;
}
std::vector<utility::string_t>& ReturnDecisionDTO::getImages()
{
    return m_Images;
}

void ReturnDecisionDTO::setImages(const std::vector<utility::string_t>& value)
{
    m_Images = value;
    m_ImagesIsSet = true;
}

bool ReturnDecisionDTO::imagesIsSet() const
{
    return m_ImagesIsSet;
}

void ReturnDecisionDTO::unsetImages()
{
    m_ImagesIsSet = false;
}
}
}
}
}


