/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ParameterValueDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ParameterValueDTO::ParameterValueDTO()
{
    m_ParameterId = 0L;
    m_ParameterIdIsSet = false;
    m_UnitId = 0L;
    m_UnitIdIsSet = false;
    m_ValueId = 0L;
    m_ValueIdIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

ParameterValueDTO::~ParameterValueDTO()
{
}

void ParameterValueDTO::validate()
{
    // TODO: implement validation
}

web::json::value ParameterValueDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ParameterIdIsSet)
    {
        val[utility::conversions::to_string_t(U("parameterId"))] = ModelBase::toJson(m_ParameterId);
    }
    if(m_UnitIdIsSet)
    {
        val[utility::conversions::to_string_t(U("unitId"))] = ModelBase::toJson(m_UnitId);
    }
    if(m_ValueIdIsSet)
    {
        val[utility::conversions::to_string_t(U("valueId"))] = ModelBase::toJson(m_ValueId);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool ParameterValueDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("parameterId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parameterId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setParameterId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParameterId);
            setParameterId(refVal_setParameterId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unitId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unitId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUnitId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnitId);
            setUnitId(refVal_setUnitId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("valueId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valueId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setValueId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValueId);
            setValueId(refVal_setValueId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void ParameterValueDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ParameterIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parameterId")), m_ParameterId));
    }
    if(m_UnitIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unitId")), m_UnitId));
    }
    if(m_ValueIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valueId")), m_ValueId));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool ParameterValueDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("parameterId"))))
    {
        int64_t refVal_setParameterId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parameterId"))), refVal_setParameterId );
        setParameterId(refVal_setParameterId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unitId"))))
    {
        int64_t refVal_setUnitId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unitId"))), refVal_setUnitId );
        setUnitId(refVal_setUnitId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("valueId"))))
    {
        int64_t refVal_setValueId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valueId"))), refVal_setValueId );
        setValueId(refVal_setValueId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

int64_t ParameterValueDTO::getParameterId() const
{
    return m_ParameterId;
}

void ParameterValueDTO::setParameterId(int64_t value)
{
    m_ParameterId = value;
    m_ParameterIdIsSet = true;
}

bool ParameterValueDTO::parameterIdIsSet() const
{
    return m_ParameterIdIsSet;
}

void ParameterValueDTO::unsetParameterId()
{
    m_ParameterIdIsSet = false;
}
int64_t ParameterValueDTO::getUnitId() const
{
    return m_UnitId;
}

void ParameterValueDTO::setUnitId(int64_t value)
{
    m_UnitId = value;
    m_UnitIdIsSet = true;
}

bool ParameterValueDTO::unitIdIsSet() const
{
    return m_UnitIdIsSet;
}

void ParameterValueDTO::unsetUnitId()
{
    m_UnitIdIsSet = false;
}
int64_t ParameterValueDTO::getValueId() const
{
    return m_ValueId;
}

void ParameterValueDTO::setValueId(int64_t value)
{
    m_ValueId = value;
    m_ValueIdIsSet = true;
}

bool ParameterValueDTO::valueIdIsSet() const
{
    return m_ValueIdIsSet;
}

void ParameterValueDTO::unsetValueId()
{
    m_ValueIdIsSet = false;
}
utility::string_t ParameterValueDTO::getValue() const
{
    return m_Value;
}

void ParameterValueDTO::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool ParameterValueDTO::valueIsSet() const
{
    return m_ValueIsSet;
}

void ParameterValueDTO::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


