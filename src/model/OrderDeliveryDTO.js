/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderCourierDTO from './OrderCourierDTO';
import OrderDeliveryAddressDTO from './OrderDeliveryAddressDTO';
import OrderDeliveryDatesDTO from './OrderDeliveryDatesDTO';
import OrderDeliveryDispatchType from './OrderDeliveryDispatchType';
import OrderDeliveryEacType from './OrderDeliveryEacType';
import OrderDeliveryPartnerType from './OrderDeliveryPartnerType';
import OrderDeliveryType from './OrderDeliveryType';
import OrderLiftType from './OrderLiftType';
import OrderShipmentDTO from './OrderShipmentDTO';
import OrderTrackDTO from './OrderTrackDTO';
import OrderVatType from './OrderVatType';
import RegionDTO from './RegionDTO';

/**
 * The OrderDeliveryDTO model module.
 * @module model/OrderDeliveryDTO
 * @version LATEST
 */
class OrderDeliveryDTO {
    /**
     * Constructs a new <code>OrderDeliveryDTO</code>.
     * Информация о доставке.
     * @alias module:model/OrderDeliveryDTO
     */
    constructor() { 
        
        OrderDeliveryDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderDeliveryDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDeliveryDTO} obj Optional instance to populate.
     * @return {module:model/OrderDeliveryDTO} The populated <code>OrderDeliveryDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDeliveryDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = OrderDeliveryType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('deliveryPartnerType')) {
                obj['deliveryPartnerType'] = OrderDeliveryPartnerType.constructFromObject(data['deliveryPartnerType']);
            }
            if (data.hasOwnProperty('courier')) {
                obj['courier'] = OrderCourierDTO.constructFromObject(data['courier']);
            }
            if (data.hasOwnProperty('dates')) {
                obj['dates'] = OrderDeliveryDatesDTO.constructFromObject(data['dates']);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = RegionDTO.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = OrderDeliveryAddressDTO.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = OrderVatType.constructFromObject(data['vat']);
            }
            if (data.hasOwnProperty('deliveryServiceId')) {
                obj['deliveryServiceId'] = ApiClient.convertToType(data['deliveryServiceId'], 'Number');
            }
            if (data.hasOwnProperty('liftType')) {
                obj['liftType'] = OrderLiftType.constructFromObject(data['liftType']);
            }
            if (data.hasOwnProperty('liftPrice')) {
                obj['liftPrice'] = ApiClient.convertToType(data['liftPrice'], 'Number');
            }
            if (data.hasOwnProperty('outletCode')) {
                obj['outletCode'] = ApiClient.convertToType(data['outletCode'], 'String');
            }
            if (data.hasOwnProperty('outletStorageLimitDate')) {
                obj['outletStorageLimitDate'] = ApiClient.convertToType(data['outletStorageLimitDate'], 'String');
            }
            if (data.hasOwnProperty('dispatchType')) {
                obj['dispatchType'] = OrderDeliveryDispatchType.constructFromObject(data['dispatchType']);
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [OrderTrackDTO]);
            }
            if (data.hasOwnProperty('shipments')) {
                obj['shipments'] = ApiClient.convertToType(data['shipments'], [OrderShipmentDTO]);
            }
            if (data.hasOwnProperty('estimated')) {
                obj['estimated'] = ApiClient.convertToType(data['estimated'], 'Boolean');
            }
            if (data.hasOwnProperty('eacType')) {
                obj['eacType'] = OrderDeliveryEacType.constructFromObject(data['eacType']);
            }
            if (data.hasOwnProperty('eacCode')) {
                obj['eacCode'] = ApiClient.convertToType(data['eacCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderDeliveryDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderDeliveryDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }
        // validate the optional field `courier`
        if (data['courier']) { // data not null
          OrderCourierDTO.validateJSON(data['courier']);
        }
        // validate the optional field `dates`
        if (data['dates']) { // data not null
          OrderDeliveryDatesDTO.validateJSON(data['dates']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          RegionDTO.validateJSON(data['region']);
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          OrderDeliveryAddressDTO.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['outletCode'] && !(typeof data['outletCode'] === 'string' || data['outletCode'] instanceof String)) {
            throw new Error("Expected the field `outletCode` to be a primitive type in the JSON string but got " + data['outletCode']);
        }
        // ensure the json data is a string
        if (data['outletStorageLimitDate'] && !(typeof data['outletStorageLimitDate'] === 'string' || data['outletStorageLimitDate'] instanceof String)) {
            throw new Error("Expected the field `outletStorageLimitDate` to be a primitive type in the JSON string but got " + data['outletStorageLimitDate']);
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                OrderTrackDTO.validateJSON(item);
            };
        }
        if (data['shipments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shipments'])) {
                throw new Error("Expected the field `shipments` to be an array in the JSON data but got " + data['shipments']);
            }
            // validate the optional field `shipments` (array)
            for (const item of data['shipments']) {
                OrderShipmentDTO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['eacCode'] && !(typeof data['eacCode'] === 'string' || data['eacCode'] instanceof String)) {
            throw new Error("Expected the field `eacCode` to be a primitive type in the JSON string but got " + data['eacCode']);
        }

        return true;
    }


}



/**
 * Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
 * @member {String} id
 */
OrderDeliveryDTO.prototype['id'] = undefined;

/**
 * @member {module:model/OrderDeliveryType} type
 */
OrderDeliveryDTO.prototype['type'] = undefined;

/**
 * Наименование службы доставки.
 * @member {String} serviceName
 */
OrderDeliveryDTO.prototype['serviceName'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа. 
 * @member {Number} price
 */
OrderDeliveryDTO.prototype['price'] = undefined;

/**
 * @member {module:model/OrderDeliveryPartnerType} deliveryPartnerType
 */
OrderDeliveryDTO.prototype['deliveryPartnerType'] = undefined;

/**
 * @member {module:model/OrderCourierDTO} courier
 */
OrderDeliveryDTO.prototype['courier'] = undefined;

/**
 * @member {module:model/OrderDeliveryDatesDTO} dates
 */
OrderDeliveryDTO.prototype['dates'] = undefined;

/**
 * @member {module:model/RegionDTO} region
 */
OrderDeliveryDTO.prototype['region'] = undefined;

/**
 * @member {module:model/OrderDeliveryAddressDTO} address
 */
OrderDeliveryDTO.prototype['address'] = undefined;

/**
 * @member {module:model/OrderVatType} vat
 */
OrderDeliveryDTO.prototype['vat'] = undefined;

/**
 * Идентификатор службы доставки.
 * @member {Number} deliveryServiceId
 */
OrderDeliveryDTO.prototype['deliveryServiceId'] = undefined;

/**
 * @member {module:model/OrderLiftType} liftType
 */
OrderDeliveryDTO.prototype['liftType'] = undefined;

/**
 * Стоимость подъема на этаж.
 * @member {Number} liftPrice
 */
OrderDeliveryDTO.prototype['liftPrice'] = undefined;

/**
 * Идентификатор пункта самовывоза, присвоенный магазином.
 * @member {String} outletCode
 */
OrderDeliveryDTO.prototype['outletCode'] = undefined;

/**
 * Формат даты: `ДД-ММ-ГГГГ`. 
 * @member {String} outletStorageLimitDate
 */
OrderDeliveryDTO.prototype['outletStorageLimitDate'] = undefined;

/**
 * @member {module:model/OrderDeliveryDispatchType} dispatchType
 */
OrderDeliveryDTO.prototype['dispatchType'] = undefined;

/**
 * Информация для отслеживания перемещений посылки.
 * @member {Array.<module:model/OrderTrackDTO>} tracks
 */
OrderDeliveryDTO.prototype['tracks'] = undefined;

/**
 * Информация о посылках.
 * @member {Array.<module:model/OrderShipmentDTO>} shipments
 */
OrderDeliveryDTO.prototype['shipments'] = undefined;

/**
 * Приблизительная ли дата доставки.
 * @member {Boolean} estimated
 */
OrderDeliveryDTO.prototype['estimated'] = undefined;

/**
 * @member {module:model/OrderDeliveryEacType} eacType
 */
OrderDeliveryDTO.prototype['eacType'] = undefined;

/**
 * Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`). 
 * @member {String} eacCode
 */
OrderDeliveryDTO.prototype['eacCode'] = undefined;






export default OrderDeliveryDTO;

