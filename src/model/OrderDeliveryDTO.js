/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderCourierDTO from './OrderCourierDTO';
import OrderDeliveryAddressDTO from './OrderDeliveryAddressDTO';
import OrderDeliveryDatesDTO from './OrderDeliveryDatesDTO';
import OrderDeliveryDispatchType from './OrderDeliveryDispatchType';
import OrderDeliveryEacType from './OrderDeliveryEacType';
import OrderDeliveryPartnerType from './OrderDeliveryPartnerType';
import OrderDeliveryType from './OrderDeliveryType';
import OrderLiftType from './OrderLiftType';
import OrderShipmentDTO from './OrderShipmentDTO';
import OrderTrackDTO from './OrderTrackDTO';
import OrderVatType from './OrderVatType';
import RegionDTO from './RegionDTO';

/**
 * The OrderDeliveryDTO model module.
 * @module model/OrderDeliveryDTO
 * @version LATEST
 */
class OrderDeliveryDTO {
    /**
     * @member {String} id
     * @type {String}
     */
    id;
    /**
     * @member {module:model/OrderDeliveryType} type
     * @type {module:model/OrderDeliveryType}
     */
    type;
    /**
     * @member {String} serviceName
     * @type {String}
     */
    serviceName;
    /**
     * @member {Number} price
     * @type {Number}
     */
    price;
    /**
     * @member {module:model/OrderDeliveryPartnerType} deliveryPartnerType
     * @type {module:model/OrderDeliveryPartnerType}
     */
    deliveryPartnerType;
    /**
     * @member {module:model/OrderCourierDTO} courier
     * @type {module:model/OrderCourierDTO}
     */
    courier;
    /**
     * @member {module:model/OrderDeliveryDatesDTO} dates
     * @type {module:model/OrderDeliveryDatesDTO}
     */
    dates;
    /**
     * @member {module:model/RegionDTO} region
     * @type {module:model/RegionDTO}
     */
    region;
    /**
     * @member {module:model/OrderDeliveryAddressDTO} address
     * @type {module:model/OrderDeliveryAddressDTO}
     */
    address;
    /**
     * @member {module:model/OrderVatType} vat
     * @type {module:model/OrderVatType}
     */
    vat;
    /**
     * @member {Number} deliveryServiceId
     * @type {Number}
     */
    deliveryServiceId;
    /**
     * @member {module:model/OrderLiftType} liftType
     * @type {module:model/OrderLiftType}
     */
    liftType;
    /**
     * @member {Number} liftPrice
     * @type {Number}
     */
    liftPrice;
    /**
     * @member {String} outletCode
     * @type {String}
     */
    outletCode;
    /**
     * @member {String} outletStorageLimitDate
     * @type {String}
     */
    outletStorageLimitDate;
    /**
     * @member {module:model/OrderDeliveryDispatchType} dispatchType
     * @type {module:model/OrderDeliveryDispatchType}
     */
    dispatchType;
    /**
     * @member {Array.<module:model/OrderTrackDTO>} tracks
     * @type {Array.<module:model/OrderTrackDTO>}
     */
    tracks;
    /**
     * @member {Array.<module:model/OrderShipmentDTO>} shipments
     * @type {Array.<module:model/OrderShipmentDTO>}
     */
    shipments;
    /**
     * @member {Boolean} estimated
     * @type {Boolean}
     */
    estimated;
    /**
     * @member {module:model/OrderDeliveryEacType} eacType
     * @type {module:model/OrderDeliveryEacType}
     */
    eacType;
    /**
     * @member {String} eacCode
     * @type {String}
     */
    eacCode;

    

    /**
     * Constructs a new <code>OrderDeliveryDTO</code>.
     * Информация о доставке.
     * @alias module:model/OrderDeliveryDTO
     */
    constructor() { 
        
        OrderDeliveryDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderDeliveryDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDeliveryDTO} obj Optional instance to populate.
     * @return {module:model/OrderDeliveryDTO} The populated <code>OrderDeliveryDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDeliveryDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = OrderDeliveryType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('deliveryPartnerType')) {
                obj['deliveryPartnerType'] = OrderDeliveryPartnerType.constructFromObject(data['deliveryPartnerType']);
            }
            if (data.hasOwnProperty('courier')) {
                obj['courier'] = OrderCourierDTO.constructFromObject(data['courier']);
            }
            if (data.hasOwnProperty('dates')) {
                obj['dates'] = OrderDeliveryDatesDTO.constructFromObject(data['dates']);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = RegionDTO.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = OrderDeliveryAddressDTO.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('vat')) {
                obj['vat'] = OrderVatType.constructFromObject(data['vat']);
            }
            if (data.hasOwnProperty('deliveryServiceId')) {
                obj['deliveryServiceId'] = ApiClient.convertToType(data['deliveryServiceId'], 'Number');
            }
            if (data.hasOwnProperty('liftType')) {
                obj['liftType'] = OrderLiftType.constructFromObject(data['liftType']);
            }
            if (data.hasOwnProperty('liftPrice')) {
                obj['liftPrice'] = ApiClient.convertToType(data['liftPrice'], 'Number');
            }
            if (data.hasOwnProperty('outletCode')) {
                obj['outletCode'] = ApiClient.convertToType(data['outletCode'], 'String');
            }
            if (data.hasOwnProperty('outletStorageLimitDate')) {
                obj['outletStorageLimitDate'] = ApiClient.convertToType(data['outletStorageLimitDate'], 'String');
            }
            if (data.hasOwnProperty('dispatchType')) {
                obj['dispatchType'] = OrderDeliveryDispatchType.constructFromObject(data['dispatchType']);
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [OrderTrackDTO]);
            }
            if (data.hasOwnProperty('shipments')) {
                obj['shipments'] = ApiClient.convertToType(data['shipments'], [OrderShipmentDTO]);
            }
            if (data.hasOwnProperty('estimated')) {
                obj['estimated'] = ApiClient.convertToType(data['estimated'], 'Boolean');
            }
            if (data.hasOwnProperty('eacType')) {
                obj['eacType'] = OrderDeliveryEacType.constructFromObject(data['eacType']);
            }
            if (data.hasOwnProperty('eacCode')) {
                obj['eacCode'] = ApiClient.convertToType(data['eacCode'], 'String');
            }
        }
        return obj;
    }
}



export default OrderDeliveryDTO;

