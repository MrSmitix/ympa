/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OfferCampaignStatusType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OfferCampaignStatusType::eOfferCampaignStatusType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("PUBLISHED")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_PUBLISHED;
    if (val == utility::conversions::to_string_t(U("CHECKING")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_CHECKING;
    if (val == utility::conversions::to_string_t(U("DISABLED_BY_PARTNER")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_DISABLED_BY_PARTNER;
    if (val == utility::conversions::to_string_t(U("DISABLED_AUTOMATICALLY")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_DISABLED_AUTOMATICALLY;
    if (val == utility::conversions::to_string_t(U("REJECTED_BY_MARKET")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_REJECTED_BY_MARKET;
    if (val == utility::conversions::to_string_t(U("CREATING_CARD")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_CREATING_CARD;
    if (val == utility::conversions::to_string_t(U("NO_CARD")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_NO_CARD;
    if (val == utility::conversions::to_string_t(U("NO_STOCKS")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_NO_STOCKS;
    if (val == utility::conversions::to_string_t(U("ARCHIVED")))
        return OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_ARCHIVED;
    return {};
}

EnumUnderlyingType fromEnum(OfferCampaignStatusType::eOfferCampaignStatusType e)
{
    switch (e)
    {
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_PUBLISHED:
        return U("PUBLISHED");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_CHECKING:
        return U("CHECKING");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_DISABLED_BY_PARTNER:
        return U("DISABLED_BY_PARTNER");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_DISABLED_AUTOMATICALLY:
        return U("DISABLED_AUTOMATICALLY");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_REJECTED_BY_MARKET:
        return U("REJECTED_BY_MARKET");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_CREATING_CARD:
        return U("CREATING_CARD");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_NO_CARD:
        return U("NO_CARD");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_NO_STOCKS:
        return U("NO_STOCKS");
    case OfferCampaignStatusType::eOfferCampaignStatusType::OfferCampaignStatusType_ARCHIVED:
        return U("ARCHIVED");
    default:
        break;
    }
    return {};
}
}

OfferCampaignStatusType::OfferCampaignStatusType()
{
}

OfferCampaignStatusType::~OfferCampaignStatusType()
{
}

void OfferCampaignStatusType::validate()
{
    // TODO: implement validation
}

web::json::value OfferCampaignStatusType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OfferCampaignStatusType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OfferCampaignStatusType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OfferCampaignStatusType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OfferCampaignStatusType::eOfferCampaignStatusType OfferCampaignStatusType::getValue() const
{
   return m_value;
}

void OfferCampaignStatusType::setValue(OfferCampaignStatusType::eOfferCampaignStatusType const value)
{
   m_value = value;
}


}
}
}
}


