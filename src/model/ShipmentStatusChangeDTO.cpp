/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ShipmentStatusChangeDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ShipmentStatusChangeDTO::ShipmentStatusChangeDTO()
{
    m_StatusIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_UpdateTime = utility::datetime();
    m_UpdateTimeIsSet = false;
}

ShipmentStatusChangeDTO::~ShipmentStatusChangeDTO()
{
}

void ShipmentStatusChangeDTO::validate()
{
    // TODO: implement validation
}

web::json::value ShipmentStatusChangeDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_UpdateTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("updateTime"))] = ModelBase::toJson(m_UpdateTime);
    }

    return val;
}

bool ShipmentStatusChangeDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipmentStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateTime);
            setUpdateTime(refVal_setUpdateTime);
        }
    }
    return ok;
}

void ShipmentStatusChangeDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_UpdateTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateTime")), m_UpdateTime));
    }
}

bool ShipmentStatusChangeDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<ShipmentStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateTime"))))
    {
        utility::datetime refVal_setUpdateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateTime"))), refVal_setUpdateTime );
        setUpdateTime(refVal_setUpdateTime);
    }
    return ok;
}

std::shared_ptr<ShipmentStatusType> ShipmentStatusChangeDTO::getStatus() const
{
    return m_Status;
}

void ShipmentStatusChangeDTO::setStatus(const std::shared_ptr<ShipmentStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ShipmentStatusChangeDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void ShipmentStatusChangeDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t ShipmentStatusChangeDTO::getDescription() const
{
    return m_Description;
}

void ShipmentStatusChangeDTO::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool ShipmentStatusChangeDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ShipmentStatusChangeDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::datetime ShipmentStatusChangeDTO::getUpdateTime() const
{
    return m_UpdateTime;
}

void ShipmentStatusChangeDTO::setUpdateTime(const utility::datetime& value)
{
    m_UpdateTime = value;
    m_UpdateTimeIsSet = true;
}

bool ShipmentStatusChangeDTO::updateTimeIsSet() const
{
    return m_UpdateTimeIsSet;
}

void ShipmentStatusChangeDTO::unsetUpdateTime()
{
    m_UpdateTimeIsSet = false;
}
}
}
}
}


