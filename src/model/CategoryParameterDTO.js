/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryParameterUnitDTO from './CategoryParameterUnitDTO';
import OfferCardRecommendationType from './OfferCardRecommendationType';
import ParameterType from './ParameterType';
import ParameterValueConstraintsDTO from './ParameterValueConstraintsDTO';
import ParameterValueOptionDTO from './ParameterValueOptionDTO';
import ValueRestrictionDTO from './ValueRestrictionDTO';

/**
 * The CategoryParameterDTO model module.
 * @module model/CategoryParameterDTO
 * @version LATEST
 */
class CategoryParameterDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {module:model/ParameterType} type
     * @type {module:model/ParameterType}
     */
    type;
    /**
     * @member {module:model/CategoryParameterUnitDTO} unit
     * @type {module:model/CategoryParameterUnitDTO}
     */
    unit;
    /**
     * @member {String} description
     * @type {String}
     */
    description;
    /**
     * @member {Array.<module:model/OfferCardRecommendationType>} recommendationTypes
     * @type {Array.<module:model/OfferCardRecommendationType>}
     */
    recommendationTypes;
    /**
     * @member {Boolean} required
     * @type {Boolean}
     */
    required;
    /**
     * @member {Boolean} filtering
     * @type {Boolean}
     */
    filtering;
    /**
     * @member {Boolean} distinctive
     * @type {Boolean}
     */
    distinctive;
    /**
     * @member {Boolean} multivalue
     * @type {Boolean}
     */
    multivalue;
    /**
     * @member {Boolean} allowCustomValues
     * @type {Boolean}
     */
    allowCustomValues;
    /**
     * @member {Array.<module:model/ParameterValueOptionDTO>} values
     * @type {Array.<module:model/ParameterValueOptionDTO>}
     */
    values;
    /**
     * @member {module:model/ParameterValueConstraintsDTO} constraints
     * @type {module:model/ParameterValueConstraintsDTO}
     */
    constraints;
    /**
     * @member {Array.<module:model/ValueRestrictionDTO>} valueRestrictions
     * @type {Array.<module:model/ValueRestrictionDTO>}
     */
    valueRestrictions;

    

    /**
     * Constructs a new <code>CategoryParameterDTO</code>.
     * Характеристика товара.
     * @alias module:model/CategoryParameterDTO
     * @param id {Number} Идентификатор характеристики.
     * @param type {module:model/ParameterType} 
     * @param required {Boolean} Обязательность характеристики.
     * @param filtering {Boolean} Используется ли характеристика в фильтре.
     * @param distinctive {Boolean} Является ли характеристика особенностью варианта.
     * @param multivalue {Boolean} Можно ли передать сразу несколько значений.
     * @param allowCustomValues {Boolean} Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
     */
    constructor(id, type, required, filtering, distinctive, multivalue, allowCustomValues) { 
        
        CategoryParameterDTO.initialize(this, id, type, required, filtering, distinctive, multivalue, allowCustomValues);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, required, filtering, distinctive, multivalue, allowCustomValues) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['required'] = required;
        obj['filtering'] = filtering;
        obj['distinctive'] = distinctive;
        obj['multivalue'] = multivalue;
        obj['allowCustomValues'] = allowCustomValues;
    }

    /**
     * Constructs a <code>CategoryParameterDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryParameterDTO} obj Optional instance to populate.
     * @return {module:model/CategoryParameterDTO} The populated <code>CategoryParameterDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryParameterDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ParameterType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = CategoryParameterUnitDTO.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('recommendationTypes')) {
                obj['recommendationTypes'] = ApiClient.convertToType(data['recommendationTypes'], [OfferCardRecommendationType]);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('filtering')) {
                obj['filtering'] = ApiClient.convertToType(data['filtering'], 'Boolean');
            }
            if (data.hasOwnProperty('distinctive')) {
                obj['distinctive'] = ApiClient.convertToType(data['distinctive'], 'Boolean');
            }
            if (data.hasOwnProperty('multivalue')) {
                obj['multivalue'] = ApiClient.convertToType(data['multivalue'], 'Boolean');
            }
            if (data.hasOwnProperty('allowCustomValues')) {
                obj['allowCustomValues'] = ApiClient.convertToType(data['allowCustomValues'], 'Boolean');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [ParameterValueOptionDTO]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ParameterValueConstraintsDTO.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('valueRestrictions')) {
                obj['valueRestrictions'] = ApiClient.convertToType(data['valueRestrictions'], [ValueRestrictionDTO]);
            }
        }
        return obj;
    }
}



export default CategoryParameterDTO;

