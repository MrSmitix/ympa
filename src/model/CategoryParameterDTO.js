/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryParameterUnitDTO from './CategoryParameterUnitDTO';
import OfferCardRecommendationType from './OfferCardRecommendationType';
import ParameterType from './ParameterType';
import ParameterValueConstraintsDTO from './ParameterValueConstraintsDTO';
import ParameterValueOptionDTO from './ParameterValueOptionDTO';
import ValueRestrictionDTO from './ValueRestrictionDTO';

/**
 * The CategoryParameterDTO model module.
 * @module model/CategoryParameterDTO
 * @version LATEST
 */
class CategoryParameterDTO {
    /**
     * Constructs a new <code>CategoryParameterDTO</code>.
     * Характеристика товара.
     * @alias module:model/CategoryParameterDTO
     * @param id {Number} Идентификатор характеристики.
     * @param type {module:model/ParameterType} 
     * @param required {Boolean} Обязательность характеристики.
     * @param filtering {Boolean} Используется ли характеристика в фильтре.
     * @param distinctive {Boolean} Является ли характеристика особенностью варианта.
     * @param multivalue {Boolean} Можно ли передать сразу несколько значений.
     * @param allowCustomValues {Boolean} Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
     */
    constructor(id, type, required, filtering, distinctive, multivalue, allowCustomValues) { 
        
        CategoryParameterDTO.initialize(this, id, type, required, filtering, distinctive, multivalue, allowCustomValues);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, required, filtering, distinctive, multivalue, allowCustomValues) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['required'] = required;
        obj['filtering'] = filtering;
        obj['distinctive'] = distinctive;
        obj['multivalue'] = multivalue;
        obj['allowCustomValues'] = allowCustomValues;
    }

    /**
     * Constructs a <code>CategoryParameterDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryParameterDTO} obj Optional instance to populate.
     * @return {module:model/CategoryParameterDTO} The populated <code>CategoryParameterDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryParameterDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ParameterType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = CategoryParameterUnitDTO.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('recommendationTypes')) {
                obj['recommendationTypes'] = ApiClient.convertToType(data['recommendationTypes'], [OfferCardRecommendationType]);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('filtering')) {
                obj['filtering'] = ApiClient.convertToType(data['filtering'], 'Boolean');
            }
            if (data.hasOwnProperty('distinctive')) {
                obj['distinctive'] = ApiClient.convertToType(data['distinctive'], 'Boolean');
            }
            if (data.hasOwnProperty('multivalue')) {
                obj['multivalue'] = ApiClient.convertToType(data['multivalue'], 'Boolean');
            }
            if (data.hasOwnProperty('allowCustomValues')) {
                obj['allowCustomValues'] = ApiClient.convertToType(data['allowCustomValues'], 'Boolean');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [ParameterValueOptionDTO]);
            }
            if (data.hasOwnProperty('constraints')) {
                obj['constraints'] = ParameterValueConstraintsDTO.constructFromObject(data['constraints']);
            }
            if (data.hasOwnProperty('valueRestrictions')) {
                obj['valueRestrictions'] = ApiClient.convertToType(data['valueRestrictions'], [ValueRestrictionDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryParameterDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryParameterDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CategoryParameterDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `unit`
        if (data['unit']) { // data not null
          CategoryParameterUnitDTO.validateJSON(data['unit']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['recommendationTypes'])) {
            throw new Error("Expected the field `recommendationTypes` to be an array in the JSON data but got " + data['recommendationTypes']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                ParameterValueOptionDTO.validateJSON(item);
            };
        }
        // validate the optional field `constraints`
        if (data['constraints']) { // data not null
          ParameterValueConstraintsDTO.validateJSON(data['constraints']);
        }
        if (data['valueRestrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['valueRestrictions'])) {
                throw new Error("Expected the field `valueRestrictions` to be an array in the JSON data but got " + data['valueRestrictions']);
            }
            // validate the optional field `valueRestrictions` (array)
            for (const item of data['valueRestrictions']) {
                ValueRestrictionDTO.validateJSON(item);
            };
        }

        return true;
    }


}

CategoryParameterDTO.RequiredProperties = ["id", "type", "required", "filtering", "distinctive", "multivalue", "allowCustomValues"];

/**
 * Идентификатор характеристики.
 * @member {Number} id
 */
CategoryParameterDTO.prototype['id'] = undefined;

/**
 * Название характеристики.
 * @member {String} name
 */
CategoryParameterDTO.prototype['name'] = undefined;

/**
 * @member {module:model/ParameterType} type
 */
CategoryParameterDTO.prototype['type'] = undefined;

/**
 * @member {module:model/CategoryParameterUnitDTO} unit
 */
CategoryParameterDTO.prototype['unit'] = undefined;

/**
 * Описание характеристики.
 * @member {String} description
 */
CategoryParameterDTO.prototype['description'] = undefined;

/**
 * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
 * @member {Array.<module:model/OfferCardRecommendationType>} recommendationTypes
 */
CategoryParameterDTO.prototype['recommendationTypes'] = undefined;

/**
 * Обязательность характеристики.
 * @member {Boolean} required
 */
CategoryParameterDTO.prototype['required'] = undefined;

/**
 * Используется ли характеристика в фильтре.
 * @member {Boolean} filtering
 */
CategoryParameterDTO.prototype['filtering'] = undefined;

/**
 * Является ли характеристика особенностью варианта.
 * @member {Boolean} distinctive
 */
CategoryParameterDTO.prototype['distinctive'] = undefined;

/**
 * Можно ли передать сразу несколько значений.
 * @member {Boolean} multivalue
 */
CategoryParameterDTO.prototype['multivalue'] = undefined;

/**
 * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
 * @member {Boolean} allowCustomValues
 */
CategoryParameterDTO.prototype['allowCustomValues'] = undefined;

/**
 * Список допустимых значений параметра. Только для характеристик типа `ENUM`.
 * @member {Array.<module:model/ParameterValueOptionDTO>} values
 */
CategoryParameterDTO.prototype['values'] = undefined;

/**
 * @member {module:model/ParameterValueConstraintsDTO} constraints
 */
CategoryParameterDTO.prototype['constraints'] = undefined;

/**
 * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
 * @member {Array.<module:model/ValueRestrictionDTO>} valueRestrictions
 */
CategoryParameterDTO.prototype['valueRestrictions'] = undefined;






export default CategoryParameterDTO;

