/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogisticPickupPointDTO from './LogisticPickupPointDTO';
import RecipientType from './RecipientType';
import RefundStatusType from './RefundStatusType';
import ReturnItemDTO from './ReturnItemDTO';
import ReturnShipmentStatusType from './ReturnShipmentStatusType';
import ReturnType from './ReturnType';

/**
 * The ReturnDTO model module.
 * @module model/ReturnDTO
 * @version LATEST
 */
class ReturnDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {Number} orderId
     * @type {Number}
     */
    orderId;
    /**
     * @member {Date} creationDate
     * @type {Date}
     */
    creationDate;
    /**
     * @member {Date} updateDate
     * @type {Date}
     */
    updateDate;
    /**
     * @member {module:model/RefundStatusType} refundStatus
     * @type {module:model/RefundStatusType}
     */
    refundStatus;
    /**
     * @member {module:model/LogisticPickupPointDTO} logisticPickupPoint
     * @type {module:model/LogisticPickupPointDTO}
     */
    logisticPickupPoint;
    /**
     * @member {module:model/RecipientType} shipmentRecipientType
     * @type {module:model/RecipientType}
     */
    shipmentRecipientType;
    /**
     * @member {module:model/ReturnShipmentStatusType} shipmentStatus
     * @type {module:model/ReturnShipmentStatusType}
     */
    shipmentStatus;
    /**
     * @member {Number} refundAmount
     * @type {Number}
     */
    refundAmount;
    /**
     * @member {Array.<module:model/ReturnItemDTO>} items
     * @type {Array.<module:model/ReturnItemDTO>}
     */
    items;
    /**
     * @member {module:model/ReturnType} returnType
     * @type {module:model/ReturnType}
     */
    returnType;
    /**
     * @member {Boolean} fastReturn
     * @type {Boolean}
     */
    fastReturn;

    

    /**
     * Constructs a new <code>ReturnDTO</code>.
     * Возврат заказа.
     * @alias module:model/ReturnDTO
     * @param items {Array.<module:model/ReturnItemDTO>} Список товаров в возврате.
     */
    constructor(items) { 
        
        ReturnDTO.initialize(this, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items) { 
        obj['items'] = items;
    }

    /**
     * Constructs a <code>ReturnDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReturnDTO} obj Optional instance to populate.
     * @return {module:model/ReturnDTO} The populated <code>ReturnDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReturnDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('updateDate')) {
                obj['updateDate'] = ApiClient.convertToType(data['updateDate'], 'Date');
            }
            if (data.hasOwnProperty('refundStatus')) {
                obj['refundStatus'] = RefundStatusType.constructFromObject(data['refundStatus']);
            }
            if (data.hasOwnProperty('logisticPickupPoint')) {
                obj['logisticPickupPoint'] = LogisticPickupPointDTO.constructFromObject(data['logisticPickupPoint']);
            }
            if (data.hasOwnProperty('shipmentRecipientType')) {
                obj['shipmentRecipientType'] = RecipientType.constructFromObject(data['shipmentRecipientType']);
            }
            if (data.hasOwnProperty('shipmentStatus')) {
                obj['shipmentStatus'] = ReturnShipmentStatusType.constructFromObject(data['shipmentStatus']);
            }
            if (data.hasOwnProperty('refundAmount')) {
                obj['refundAmount'] = ApiClient.convertToType(data['refundAmount'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [ReturnItemDTO]);
            }
            if (data.hasOwnProperty('returnType')) {
                obj['returnType'] = ReturnType.constructFromObject(data['returnType']);
            }
            if (data.hasOwnProperty('fastReturn')) {
                obj['fastReturn'] = ApiClient.convertToType(data['fastReturn'], 'Boolean');
            }
        }
        return obj;
    }
}



export default ReturnDTO;

