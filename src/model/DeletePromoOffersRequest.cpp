/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/DeletePromoOffersRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DeletePromoOffersRequest::DeletePromoOffersRequest()
{
    m_PromoId = utility::conversions::to_string_t("");
    m_PromoIdIsSet = false;
    m_DeleteAllOffers = false;
    m_DeleteAllOffersIsSet = false;
    m_OfferIdsIsSet = false;
}

DeletePromoOffersRequest::~DeletePromoOffersRequest()
{
}

void DeletePromoOffersRequest::validate()
{
    // TODO: implement validation
}

web::json::value DeletePromoOffersRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PromoIdIsSet)
    {
        val[utility::conversions::to_string_t(U("promoId"))] = ModelBase::toJson(m_PromoId);
    }
    if(m_DeleteAllOffersIsSet)
    {
        val[utility::conversions::to_string_t(U("deleteAllOffers"))] = ModelBase::toJson(m_DeleteAllOffers);
    }
    if(m_OfferIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("offerIds"))] = ModelBase::toJson(m_OfferIds);
    }

    return val;
}

bool DeletePromoOffersRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("promoId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("promoId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPromoId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPromoId);
            setPromoId(refVal_setPromoId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deleteAllOffers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deleteAllOffers")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeleteAllOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleteAllOffers);
            setDeleteAllOffers(refVal_setDeleteAllOffers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offerIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerIds")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferIds);
            setOfferIds(refVal_setOfferIds);
        }
    }
    return ok;
}

void DeletePromoOffersRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PromoIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("promoId")), m_PromoId));
    }
    if(m_DeleteAllOffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deleteAllOffers")), m_DeleteAllOffers));
    }
    if(m_OfferIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerIds")), m_OfferIds));
    }
}

bool DeletePromoOffersRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("promoId"))))
    {
        utility::string_t refVal_setPromoId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("promoId"))), refVal_setPromoId );
        setPromoId(refVal_setPromoId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deleteAllOffers"))))
    {
        bool refVal_setDeleteAllOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deleteAllOffers"))), refVal_setDeleteAllOffers );
        setDeleteAllOffers(refVal_setDeleteAllOffers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offerIds"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setOfferIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerIds"))), refVal_setOfferIds );
        setOfferIds(refVal_setOfferIds);
    }
    return ok;
}

utility::string_t DeletePromoOffersRequest::getPromoId() const
{
    return m_PromoId;
}

void DeletePromoOffersRequest::setPromoId(const utility::string_t& value)
{
    m_PromoId = value;
    m_PromoIdIsSet = true;
}

bool DeletePromoOffersRequest::promoIdIsSet() const
{
    return m_PromoIdIsSet;
}

void DeletePromoOffersRequest::unsetPromoId()
{
    m_PromoIdIsSet = false;
}
bool DeletePromoOffersRequest::isDeleteAllOffers() const
{
    return m_DeleteAllOffers;
}

void DeletePromoOffersRequest::setDeleteAllOffers(bool value)
{
    m_DeleteAllOffers = value;
    m_DeleteAllOffersIsSet = true;
}

bool DeletePromoOffersRequest::deleteAllOffersIsSet() const
{
    return m_DeleteAllOffersIsSet;
}

void DeletePromoOffersRequest::unsetDeleteAllOffers()
{
    m_DeleteAllOffersIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& DeletePromoOffersRequest::getOfferIds()
{
    return m_OfferIds;
}

void DeletePromoOffersRequest::setOfferIds(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_OfferIds = value;
    m_OfferIdsIsSet = true;
}

bool DeletePromoOffersRequest::offerIdsIsSet() const
{
    return m_OfferIdsIsSet;
}

void DeletePromoOffersRequest::unsetOfferIds()
{
    m_OfferIdsIsSet = false;
}
}
}
}
}


