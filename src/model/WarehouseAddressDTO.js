/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GpsDTO from './GpsDTO';

/**
 * The WarehouseAddressDTO model module.
 * @module model/WarehouseAddressDTO
 * @version LATEST
 */
class WarehouseAddressDTO {
    /**
     * Constructs a new <code>WarehouseAddressDTO</code>.
     * Адрес склада.
     * @alias module:model/WarehouseAddressDTO
     * @param city {String} Город.
     * @param gps {module:model/GpsDTO} 
     */
    constructor(city, gps) { 
        
        WarehouseAddressDTO.initialize(this, city, gps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, gps) { 
        obj['city'] = city;
        obj['gps'] = gps;
    }

    /**
     * Constructs a <code>WarehouseAddressDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WarehouseAddressDTO} obj Optional instance to populate.
     * @return {module:model/WarehouseAddressDTO} The populated <code>WarehouseAddressDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WarehouseAddressDTO();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('street')) {
                obj['street'] = ApiClient.convertToType(data['street'], 'String');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'String');
            }
            if (data.hasOwnProperty('building')) {
                obj['building'] = ApiClient.convertToType(data['building'], 'String');
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'String');
            }
            if (data.hasOwnProperty('gps')) {
                obj['gps'] = GpsDTO.constructFromObject(data['gps']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WarehouseAddressDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WarehouseAddressDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WarehouseAddressDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['street'] && !(typeof data['street'] === 'string' || data['street'] instanceof String)) {
            throw new Error("Expected the field `street` to be a primitive type in the JSON string but got " + data['street']);
        }
        // ensure the json data is a string
        if (data['number'] && !(typeof data['number'] === 'string' || data['number'] instanceof String)) {
            throw new Error("Expected the field `number` to be a primitive type in the JSON string but got " + data['number']);
        }
        // ensure the json data is a string
        if (data['building'] && !(typeof data['building'] === 'string' || data['building'] instanceof String)) {
            throw new Error("Expected the field `building` to be a primitive type in the JSON string but got " + data['building']);
        }
        // ensure the json data is a string
        if (data['block'] && !(typeof data['block'] === 'string' || data['block'] instanceof String)) {
            throw new Error("Expected the field `block` to be a primitive type in the JSON string but got " + data['block']);
        }
        // validate the optional field `gps`
        if (data['gps']) { // data not null
          GpsDTO.validateJSON(data['gps']);
        }

        return true;
    }


}

WarehouseAddressDTO.RequiredProperties = ["city", "gps"];

/**
 * Город.
 * @member {String} city
 */
WarehouseAddressDTO.prototype['city'] = undefined;

/**
 * Улица.
 * @member {String} street
 */
WarehouseAddressDTO.prototype['street'] = undefined;

/**
 * Номер дома.
 * @member {String} number
 */
WarehouseAddressDTO.prototype['number'] = undefined;

/**
 * Номер строения.
 * @member {String} building
 */
WarehouseAddressDTO.prototype['building'] = undefined;

/**
 * Номер корпуса.
 * @member {String} block
 */
WarehouseAddressDTO.prototype['block'] = undefined;

/**
 * @member {module:model/GpsDTO} gps
 */
WarehouseAddressDTO.prototype['gps'] = undefined;






export default WarehouseAddressDTO;

