/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderDeliveryDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderDeliveryDTO::OrderDeliveryDTO()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_TypeIsSet = false;
    m_ServiceName = utility::conversions::to_string_t("");
    m_ServiceNameIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_DeliveryPartnerTypeIsSet = false;
    m_CourierIsSet = false;
    m_DatesIsSet = false;
    m_RegionIsSet = false;
    m_AddressIsSet = false;
    m_VatIsSet = false;
    m_DeliveryServiceId = 0L;
    m_DeliveryServiceIdIsSet = false;
    m_LiftTypeIsSet = false;
    m_LiftPrice = 0.0;
    m_LiftPriceIsSet = false;
    m_OutletCode = utility::conversions::to_string_t("");
    m_OutletCodeIsSet = false;
    m_OutletStorageLimitDate = utility::conversions::to_string_t("");
    m_OutletStorageLimitDateIsSet = false;
    m_DispatchTypeIsSet = false;
    m_TracksIsSet = false;
    m_ShipmentsIsSet = false;
    m_Estimated = false;
    m_EstimatedIsSet = false;
    m_EacTypeIsSet = false;
    m_EacCode = utility::conversions::to_string_t("");
    m_EacCodeIsSet = false;
}

OrderDeliveryDTO::~OrderDeliveryDTO()
{
}

void OrderDeliveryDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderDeliveryDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_ServiceNameIsSet)
    {
        val[utility::conversions::to_string_t(U("serviceName"))] = ModelBase::toJson(m_ServiceName);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_DeliveryPartnerTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryPartnerType"))] = ModelBase::toJson(m_DeliveryPartnerType);
    }
    if(m_CourierIsSet)
    {
        val[utility::conversions::to_string_t(U("courier"))] = ModelBase::toJson(m_Courier);
    }
    if(m_DatesIsSet)
    {
        val[utility::conversions::to_string_t(U("dates"))] = ModelBase::toJson(m_Dates);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t(U("region"))] = ModelBase::toJson(m_Region);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_VatIsSet)
    {
        val[utility::conversions::to_string_t(U("vat"))] = ModelBase::toJson(m_Vat);
    }
    if(m_DeliveryServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryServiceId"))] = ModelBase::toJson(m_DeliveryServiceId);
    }
    if(m_LiftTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("liftType"))] = ModelBase::toJson(m_LiftType);
    }
    if(m_LiftPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("liftPrice"))] = ModelBase::toJson(m_LiftPrice);
    }
    if(m_OutletCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("outletCode"))] = ModelBase::toJson(m_OutletCode);
    }
    if(m_OutletStorageLimitDateIsSet)
    {
        val[utility::conversions::to_string_t(U("outletStorageLimitDate"))] = ModelBase::toJson(m_OutletStorageLimitDate);
    }
    if(m_DispatchTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("dispatchType"))] = ModelBase::toJson(m_DispatchType);
    }
    if(m_TracksIsSet)
    {
        val[utility::conversions::to_string_t(U("tracks"))] = ModelBase::toJson(m_Tracks);
    }
    if(m_ShipmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("shipments"))] = ModelBase::toJson(m_Shipments);
    }
    if(m_EstimatedIsSet)
    {
        val[utility::conversions::to_string_t(U("estimated"))] = ModelBase::toJson(m_Estimated);
    }
    if(m_EacTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("eacType"))] = ModelBase::toJson(m_EacType);
    }
    if(m_EacCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("eacCode"))] = ModelBase::toJson(m_EacCode);
    }

    return val;
}

bool OrderDeliveryDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("serviceName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("serviceName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setServiceName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServiceName);
            setServiceName(refVal_setServiceName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryPartnerType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryPartnerType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryPartnerType> refVal_setDeliveryPartnerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryPartnerType);
            setDeliveryPartnerType(refVal_setDeliveryPartnerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("courier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("courier")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderCourierDTO> refVal_setCourier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCourier);
            setCourier(refVal_setCourier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dates")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryDatesDTO> refVal_setDates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDates);
            setDates(refVal_setDates);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("region"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("region")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RegionDTO> refVal_setRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegion);
            setRegion(refVal_setRegion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryAddressDTO> refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vat")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderVatType> refVal_setVat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVat);
            setVat(refVal_setVat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryServiceId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDeliveryServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryServiceId);
            setDeliveryServiceId(refVal_setDeliveryServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liftType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liftType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderLiftType> refVal_setLiftType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiftType);
            setLiftType(refVal_setLiftType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("liftPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("liftPrice")));
        if(!fieldValue.is_null())
        {
            double refVal_setLiftPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLiftPrice);
            setLiftPrice(refVal_setLiftPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outletCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outletCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutletCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutletCode);
            setOutletCode(refVal_setOutletCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outletStorageLimitDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outletStorageLimitDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOutletStorageLimitDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutletStorageLimitDate);
            setOutletStorageLimitDate(refVal_setOutletStorageLimitDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dispatchType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dispatchType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryDispatchType> refVal_setDispatchType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDispatchType);
            setDispatchType(refVal_setDispatchType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderTrackDTO>> refVal_setTracks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTracks);
            setTracks(refVal_setTracks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderShipmentDTO>> refVal_setShipments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipments);
            setShipments(refVal_setShipments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estimated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimated")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEstimated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEstimated);
            setEstimated(refVal_setEstimated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eacType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eacType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryEacType> refVal_setEacType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEacType);
            setEacType(refVal_setEacType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eacCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eacCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEacCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEacCode);
            setEacCode(refVal_setEacCode);
        }
    }
    return ok;
}

void OrderDeliveryDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_ServiceNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("serviceName")), m_ServiceName));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_DeliveryPartnerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryPartnerType")), m_DeliveryPartnerType));
    }
    if(m_CourierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("courier")), m_Courier));
    }
    if(m_DatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dates")), m_Dates));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("region")), m_Region));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_VatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vat")), m_Vat));
    }
    if(m_DeliveryServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryServiceId")), m_DeliveryServiceId));
    }
    if(m_LiftTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liftType")), m_LiftType));
    }
    if(m_LiftPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("liftPrice")), m_LiftPrice));
    }
    if(m_OutletCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outletCode")), m_OutletCode));
    }
    if(m_OutletStorageLimitDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outletStorageLimitDate")), m_OutletStorageLimitDate));
    }
    if(m_DispatchTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dispatchType")), m_DispatchType));
    }
    if(m_TracksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracks")), m_Tracks));
    }
    if(m_ShipmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipments")), m_Shipments));
    }
    if(m_EstimatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimated")), m_Estimated));
    }
    if(m_EacTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eacType")), m_EacType));
    }
    if(m_EacCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eacCode")), m_EacCode));
    }
}

bool OrderDeliveryDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<OrderDeliveryType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("serviceName"))))
    {
        utility::string_t refVal_setServiceName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("serviceName"))), refVal_setServiceName );
        setServiceName(refVal_setServiceName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryPartnerType"))))
    {
        std::shared_ptr<OrderDeliveryPartnerType> refVal_setDeliveryPartnerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryPartnerType"))), refVal_setDeliveryPartnerType );
        setDeliveryPartnerType(refVal_setDeliveryPartnerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("courier"))))
    {
        std::shared_ptr<OrderCourierDTO> refVal_setCourier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("courier"))), refVal_setCourier );
        setCourier(refVal_setCourier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dates"))))
    {
        std::shared_ptr<OrderDeliveryDatesDTO> refVal_setDates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dates"))), refVal_setDates );
        setDates(refVal_setDates);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("region"))))
    {
        std::shared_ptr<RegionDTO> refVal_setRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("region"))), refVal_setRegion );
        setRegion(refVal_setRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        std::shared_ptr<OrderDeliveryAddressDTO> refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vat"))))
    {
        std::shared_ptr<OrderVatType> refVal_setVat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vat"))), refVal_setVat );
        setVat(refVal_setVat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryServiceId"))))
    {
        int64_t refVal_setDeliveryServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryServiceId"))), refVal_setDeliveryServiceId );
        setDeliveryServiceId(refVal_setDeliveryServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liftType"))))
    {
        std::shared_ptr<OrderLiftType> refVal_setLiftType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liftType"))), refVal_setLiftType );
        setLiftType(refVal_setLiftType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("liftPrice"))))
    {
        double refVal_setLiftPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("liftPrice"))), refVal_setLiftPrice );
        setLiftPrice(refVal_setLiftPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outletCode"))))
    {
        utility::string_t refVal_setOutletCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outletCode"))), refVal_setOutletCode );
        setOutletCode(refVal_setOutletCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outletStorageLimitDate"))))
    {
        utility::string_t refVal_setOutletStorageLimitDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outletStorageLimitDate"))), refVal_setOutletStorageLimitDate );
        setOutletStorageLimitDate(refVal_setOutletStorageLimitDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dispatchType"))))
    {
        std::shared_ptr<OrderDeliveryDispatchType> refVal_setDispatchType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dispatchType"))), refVal_setDispatchType );
        setDispatchType(refVal_setDispatchType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracks"))))
    {
        std::vector<std::shared_ptr<OrderTrackDTO>> refVal_setTracks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracks"))), refVal_setTracks );
        setTracks(refVal_setTracks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipments"))))
    {
        std::vector<std::shared_ptr<OrderShipmentDTO>> refVal_setShipments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipments"))), refVal_setShipments );
        setShipments(refVal_setShipments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estimated"))))
    {
        bool refVal_setEstimated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimated"))), refVal_setEstimated );
        setEstimated(refVal_setEstimated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eacType"))))
    {
        std::shared_ptr<OrderDeliveryEacType> refVal_setEacType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eacType"))), refVal_setEacType );
        setEacType(refVal_setEacType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eacCode"))))
    {
        utility::string_t refVal_setEacCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eacCode"))), refVal_setEacCode );
        setEacCode(refVal_setEacCode);
    }
    return ok;
}

utility::string_t OrderDeliveryDTO::getId() const
{
    return m_Id;
}

void OrderDeliveryDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrderDeliveryDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrderDeliveryDTO::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<OrderDeliveryType> OrderDeliveryDTO::getType() const
{
    return m_Type;
}

void OrderDeliveryDTO::setType(const std::shared_ptr<OrderDeliveryType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool OrderDeliveryDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void OrderDeliveryDTO::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t OrderDeliveryDTO::getServiceName() const
{
    return m_ServiceName;
}

void OrderDeliveryDTO::setServiceName(const utility::string_t& value)
{
    m_ServiceName = value;
    m_ServiceNameIsSet = true;
}

bool OrderDeliveryDTO::serviceNameIsSet() const
{
    return m_ServiceNameIsSet;
}

void OrderDeliveryDTO::unsetServiceName()
{
    m_ServiceNameIsSet = false;
}
double OrderDeliveryDTO::getPrice() const
{
    return m_Price;
}

void OrderDeliveryDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool OrderDeliveryDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void OrderDeliveryDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
std::shared_ptr<OrderDeliveryPartnerType> OrderDeliveryDTO::getDeliveryPartnerType() const
{
    return m_DeliveryPartnerType;
}

void OrderDeliveryDTO::setDeliveryPartnerType(const std::shared_ptr<OrderDeliveryPartnerType>& value)
{
    m_DeliveryPartnerType = value;
    m_DeliveryPartnerTypeIsSet = true;
}

bool OrderDeliveryDTO::deliveryPartnerTypeIsSet() const
{
    return m_DeliveryPartnerTypeIsSet;
}

void OrderDeliveryDTO::unsetDeliveryPartnerType()
{
    m_DeliveryPartnerTypeIsSet = false;
}
std::shared_ptr<OrderCourierDTO> OrderDeliveryDTO::getCourier() const
{
    return m_Courier;
}

void OrderDeliveryDTO::setCourier(const std::shared_ptr<OrderCourierDTO>& value)
{
    m_Courier = value;
    m_CourierIsSet = true;
}

bool OrderDeliveryDTO::courierIsSet() const
{
    return m_CourierIsSet;
}

void OrderDeliveryDTO::unsetCourier()
{
    m_CourierIsSet = false;
}
std::shared_ptr<OrderDeliveryDatesDTO> OrderDeliveryDTO::getDates() const
{
    return m_Dates;
}

void OrderDeliveryDTO::setDates(const std::shared_ptr<OrderDeliveryDatesDTO>& value)
{
    m_Dates = value;
    m_DatesIsSet = true;
}

bool OrderDeliveryDTO::datesIsSet() const
{
    return m_DatesIsSet;
}

void OrderDeliveryDTO::unsetDates()
{
    m_DatesIsSet = false;
}
std::shared_ptr<RegionDTO> OrderDeliveryDTO::getRegion() const
{
    return m_Region;
}

void OrderDeliveryDTO::setRegion(const std::shared_ptr<RegionDTO>& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool OrderDeliveryDTO::regionIsSet() const
{
    return m_RegionIsSet;
}

void OrderDeliveryDTO::unsetRegion()
{
    m_RegionIsSet = false;
}
std::shared_ptr<OrderDeliveryAddressDTO> OrderDeliveryDTO::getAddress() const
{
    return m_Address;
}

void OrderDeliveryDTO::setAddress(const std::shared_ptr<OrderDeliveryAddressDTO>& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool OrderDeliveryDTO::addressIsSet() const
{
    return m_AddressIsSet;
}

void OrderDeliveryDTO::unsetAddress()
{
    m_AddressIsSet = false;
}
std::shared_ptr<OrderVatType> OrderDeliveryDTO::getVat() const
{
    return m_Vat;
}

void OrderDeliveryDTO::setVat(const std::shared_ptr<OrderVatType>& value)
{
    m_Vat = value;
    m_VatIsSet = true;
}

bool OrderDeliveryDTO::vatIsSet() const
{
    return m_VatIsSet;
}

void OrderDeliveryDTO::unsetVat()
{
    m_VatIsSet = false;
}
int64_t OrderDeliveryDTO::getDeliveryServiceId() const
{
    return m_DeliveryServiceId;
}

void OrderDeliveryDTO::setDeliveryServiceId(int64_t value)
{
    m_DeliveryServiceId = value;
    m_DeliveryServiceIdIsSet = true;
}

bool OrderDeliveryDTO::deliveryServiceIdIsSet() const
{
    return m_DeliveryServiceIdIsSet;
}

void OrderDeliveryDTO::unsetDeliveryServiceId()
{
    m_DeliveryServiceIdIsSet = false;
}
std::shared_ptr<OrderLiftType> OrderDeliveryDTO::getLiftType() const
{
    return m_LiftType;
}

void OrderDeliveryDTO::setLiftType(const std::shared_ptr<OrderLiftType>& value)
{
    m_LiftType = value;
    m_LiftTypeIsSet = true;
}

bool OrderDeliveryDTO::liftTypeIsSet() const
{
    return m_LiftTypeIsSet;
}

void OrderDeliveryDTO::unsetLiftType()
{
    m_LiftTypeIsSet = false;
}
double OrderDeliveryDTO::getLiftPrice() const
{
    return m_LiftPrice;
}

void OrderDeliveryDTO::setLiftPrice(double value)
{
    m_LiftPrice = value;
    m_LiftPriceIsSet = true;
}

bool OrderDeliveryDTO::liftPriceIsSet() const
{
    return m_LiftPriceIsSet;
}

void OrderDeliveryDTO::unsetLiftPrice()
{
    m_LiftPriceIsSet = false;
}
utility::string_t OrderDeliveryDTO::getOutletCode() const
{
    return m_OutletCode;
}

void OrderDeliveryDTO::setOutletCode(const utility::string_t& value)
{
    m_OutletCode = value;
    m_OutletCodeIsSet = true;
}

bool OrderDeliveryDTO::outletCodeIsSet() const
{
    return m_OutletCodeIsSet;
}

void OrderDeliveryDTO::unsetOutletCode()
{
    m_OutletCodeIsSet = false;
}
utility::string_t OrderDeliveryDTO::getOutletStorageLimitDate() const
{
    return m_OutletStorageLimitDate;
}

void OrderDeliveryDTO::setOutletStorageLimitDate(const utility::string_t& value)
{
    m_OutletStorageLimitDate = value;
    m_OutletStorageLimitDateIsSet = true;
}

bool OrderDeliveryDTO::outletStorageLimitDateIsSet() const
{
    return m_OutletStorageLimitDateIsSet;
}

void OrderDeliveryDTO::unsetOutletStorageLimitDate()
{
    m_OutletStorageLimitDateIsSet = false;
}
std::shared_ptr<OrderDeliveryDispatchType> OrderDeliveryDTO::getDispatchType() const
{
    return m_DispatchType;
}

void OrderDeliveryDTO::setDispatchType(const std::shared_ptr<OrderDeliveryDispatchType>& value)
{
    m_DispatchType = value;
    m_DispatchTypeIsSet = true;
}

bool OrderDeliveryDTO::dispatchTypeIsSet() const
{
    return m_DispatchTypeIsSet;
}

void OrderDeliveryDTO::unsetDispatchType()
{
    m_DispatchTypeIsSet = false;
}
std::vector<std::shared_ptr<OrderTrackDTO>>& OrderDeliveryDTO::getTracks()
{
    return m_Tracks;
}

void OrderDeliveryDTO::setTracks(const std::vector<std::shared_ptr<OrderTrackDTO>>& value)
{
    m_Tracks = value;
    m_TracksIsSet = true;
}

bool OrderDeliveryDTO::tracksIsSet() const
{
    return m_TracksIsSet;
}

void OrderDeliveryDTO::unsetTracks()
{
    m_TracksIsSet = false;
}
std::vector<std::shared_ptr<OrderShipmentDTO>>& OrderDeliveryDTO::getShipments()
{
    return m_Shipments;
}

void OrderDeliveryDTO::setShipments(const std::vector<std::shared_ptr<OrderShipmentDTO>>& value)
{
    m_Shipments = value;
    m_ShipmentsIsSet = true;
}

bool OrderDeliveryDTO::shipmentsIsSet() const
{
    return m_ShipmentsIsSet;
}

void OrderDeliveryDTO::unsetShipments()
{
    m_ShipmentsIsSet = false;
}
bool OrderDeliveryDTO::isEstimated() const
{
    return m_Estimated;
}

void OrderDeliveryDTO::setEstimated(bool value)
{
    m_Estimated = value;
    m_EstimatedIsSet = true;
}

bool OrderDeliveryDTO::estimatedIsSet() const
{
    return m_EstimatedIsSet;
}

void OrderDeliveryDTO::unsetEstimated()
{
    m_EstimatedIsSet = false;
}
std::shared_ptr<OrderDeliveryEacType> OrderDeliveryDTO::getEacType() const
{
    return m_EacType;
}

void OrderDeliveryDTO::setEacType(const std::shared_ptr<OrderDeliveryEacType>& value)
{
    m_EacType = value;
    m_EacTypeIsSet = true;
}

bool OrderDeliveryDTO::eacTypeIsSet() const
{
    return m_EacTypeIsSet;
}

void OrderDeliveryDTO::unsetEacType()
{
    m_EacTypeIsSet = false;
}
utility::string_t OrderDeliveryDTO::getEacCode() const
{
    return m_EacCode;
}

void OrderDeliveryDTO::setEacCode(const utility::string_t& value)
{
    m_EacCode = value;
    m_EacCodeIsSet = true;
}

bool OrderDeliveryDTO::eacCodeIsSet() const
{
    return m_EacCodeIsSet;
}

void OrderDeliveryDTO::unsetEacCode()
{
    m_EacCodeIsSet = false;
}
}
}
}
}


