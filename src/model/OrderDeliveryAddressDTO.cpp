/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderDeliveryAddressDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderDeliveryAddressDTO::OrderDeliveryAddressDTO()
{
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Postcode = utility::conversions::to_string_t("");
    m_PostcodeIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_District = utility::conversions::to_string_t("");
    m_DistrictIsSet = false;
    m_Subway = utility::conversions::to_string_t("");
    m_SubwayIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_House = utility::conversions::to_string_t("");
    m_HouseIsSet = false;
    m_Block = utility::conversions::to_string_t("");
    m_BlockIsSet = false;
    m_Entrance = utility::conversions::to_string_t("");
    m_EntranceIsSet = false;
    m_Entryphone = utility::conversions::to_string_t("");
    m_EntryphoneIsSet = false;
    m_Floor = utility::conversions::to_string_t("");
    m_FloorIsSet = false;
    m_Apartment = utility::conversions::to_string_t("");
    m_ApartmentIsSet = false;
    m_Phone = utility::conversions::to_string_t("");
    m_PhoneIsSet = false;
    m_Recipient = utility::conversions::to_string_t("");
    m_RecipientIsSet = false;
    m_GpsIsSet = false;
}

OrderDeliveryAddressDTO::~OrderDeliveryAddressDTO()
{
}

void OrderDeliveryAddressDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderDeliveryAddressDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_PostcodeIsSet)
    {
        val[utility::conversions::to_string_t(U("postcode"))] = ModelBase::toJson(m_Postcode);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_DistrictIsSet)
    {
        val[utility::conversions::to_string_t(U("district"))] = ModelBase::toJson(m_District);
    }
    if(m_SubwayIsSet)
    {
        val[utility::conversions::to_string_t(U("subway"))] = ModelBase::toJson(m_Subway);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t(U("street"))] = ModelBase::toJson(m_Street);
    }
    if(m_HouseIsSet)
    {
        val[utility::conversions::to_string_t(U("house"))] = ModelBase::toJson(m_House);
    }
    if(m_BlockIsSet)
    {
        val[utility::conversions::to_string_t(U("block"))] = ModelBase::toJson(m_Block);
    }
    if(m_EntranceIsSet)
    {
        val[utility::conversions::to_string_t(U("entrance"))] = ModelBase::toJson(m_Entrance);
    }
    if(m_EntryphoneIsSet)
    {
        val[utility::conversions::to_string_t(U("entryphone"))] = ModelBase::toJson(m_Entryphone);
    }
    if(m_FloorIsSet)
    {
        val[utility::conversions::to_string_t(U("floor"))] = ModelBase::toJson(m_Floor);
    }
    if(m_ApartmentIsSet)
    {
        val[utility::conversions::to_string_t(U("apartment"))] = ModelBase::toJson(m_Apartment);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t(U("phone"))] = ModelBase::toJson(m_Phone);
    }
    if(m_RecipientIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient"))] = ModelBase::toJson(m_Recipient);
    }
    if(m_GpsIsSet)
    {
        val[utility::conversions::to_string_t(U("gps"))] = ModelBase::toJson(m_Gps);
    }

    return val;
}

bool OrderDeliveryAddressDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postcode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postcode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPostcode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostcode);
            setPostcode(refVal_setPostcode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("district"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("district")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDistrict;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDistrict);
            setDistrict(refVal_setDistrict);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subway"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subway")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubway;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubway);
            setSubway(refVal_setSubway);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("street"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("street")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStreet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStreet);
            setStreet(refVal_setStreet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("house"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("house")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHouse;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHouse);
            setHouse(refVal_setHouse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlock);
            setBlock(refVal_setBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entrance"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entrance")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntrance;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntrance);
            setEntrance(refVal_setEntrance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entryphone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entryphone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntryphone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntryphone);
            setEntryphone(refVal_setEntryphone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("floor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("floor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFloor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFloor);
            setFloor(refVal_setFloor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("apartment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("apartment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setApartment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApartment);
            setApartment(refVal_setApartment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhone);
            setPhone(refVal_setPhone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipient);
            setRecipient(refVal_setRecipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gps")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GpsDTO> refVal_setGps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGps);
            setGps(refVal_setGps);
        }
    }
    return ok;
}

void OrderDeliveryAddressDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_PostcodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postcode")), m_Postcode));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_DistrictIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("district")), m_District));
    }
    if(m_SubwayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subway")), m_Subway));
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("street")), m_Street));
    }
    if(m_HouseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("house")), m_House));
    }
    if(m_BlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block")), m_Block));
    }
    if(m_EntranceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entrance")), m_Entrance));
    }
    if(m_EntryphoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entryphone")), m_Entryphone));
    }
    if(m_FloorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("floor")), m_Floor));
    }
    if(m_ApartmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("apartment")), m_Apartment));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phone")), m_Phone));
    }
    if(m_RecipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient")), m_Recipient));
    }
    if(m_GpsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gps")), m_Gps));
    }
}

bool OrderDeliveryAddressDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postcode"))))
    {
        utility::string_t refVal_setPostcode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postcode"))), refVal_setPostcode );
        setPostcode(refVal_setPostcode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("district"))))
    {
        utility::string_t refVal_setDistrict;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("district"))), refVal_setDistrict );
        setDistrict(refVal_setDistrict);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subway"))))
    {
        utility::string_t refVal_setSubway;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subway"))), refVal_setSubway );
        setSubway(refVal_setSubway);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("street"))))
    {
        utility::string_t refVal_setStreet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("street"))), refVal_setStreet );
        setStreet(refVal_setStreet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("house"))))
    {
        utility::string_t refVal_setHouse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("house"))), refVal_setHouse );
        setHouse(refVal_setHouse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block"))))
    {
        utility::string_t refVal_setBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block"))), refVal_setBlock );
        setBlock(refVal_setBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entrance"))))
    {
        utility::string_t refVal_setEntrance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entrance"))), refVal_setEntrance );
        setEntrance(refVal_setEntrance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entryphone"))))
    {
        utility::string_t refVal_setEntryphone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entryphone"))), refVal_setEntryphone );
        setEntryphone(refVal_setEntryphone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("floor"))))
    {
        utility::string_t refVal_setFloor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("floor"))), refVal_setFloor );
        setFloor(refVal_setFloor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("apartment"))))
    {
        utility::string_t refVal_setApartment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("apartment"))), refVal_setApartment );
        setApartment(refVal_setApartment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phone"))))
    {
        utility::string_t refVal_setPhone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phone"))), refVal_setPhone );
        setPhone(refVal_setPhone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient"))))
    {
        utility::string_t refVal_setRecipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient"))), refVal_setRecipient );
        setRecipient(refVal_setRecipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gps"))))
    {
        std::shared_ptr<GpsDTO> refVal_setGps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gps"))), refVal_setGps );
        setGps(refVal_setGps);
    }
    return ok;
}

utility::string_t OrderDeliveryAddressDTO::getCountry() const
{
    return m_Country;
}

void OrderDeliveryAddressDTO::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool OrderDeliveryAddressDTO::countryIsSet() const
{
    return m_CountryIsSet;
}

void OrderDeliveryAddressDTO::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getPostcode() const
{
    return m_Postcode;
}

void OrderDeliveryAddressDTO::setPostcode(const utility::string_t& value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}

bool OrderDeliveryAddressDTO::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}

void OrderDeliveryAddressDTO::unsetPostcode()
{
    m_PostcodeIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getCity() const
{
    return m_City;
}

void OrderDeliveryAddressDTO::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool OrderDeliveryAddressDTO::cityIsSet() const
{
    return m_CityIsSet;
}

void OrderDeliveryAddressDTO::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getDistrict() const
{
    return m_District;
}

void OrderDeliveryAddressDTO::setDistrict(const utility::string_t& value)
{
    m_District = value;
    m_DistrictIsSet = true;
}

bool OrderDeliveryAddressDTO::districtIsSet() const
{
    return m_DistrictIsSet;
}

void OrderDeliveryAddressDTO::unsetDistrict()
{
    m_DistrictIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getSubway() const
{
    return m_Subway;
}

void OrderDeliveryAddressDTO::setSubway(const utility::string_t& value)
{
    m_Subway = value;
    m_SubwayIsSet = true;
}

bool OrderDeliveryAddressDTO::subwayIsSet() const
{
    return m_SubwayIsSet;
}

void OrderDeliveryAddressDTO::unsetSubway()
{
    m_SubwayIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getStreet() const
{
    return m_Street;
}

void OrderDeliveryAddressDTO::setStreet(const utility::string_t& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}

bool OrderDeliveryAddressDTO::streetIsSet() const
{
    return m_StreetIsSet;
}

void OrderDeliveryAddressDTO::unsetStreet()
{
    m_StreetIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getHouse() const
{
    return m_House;
}

void OrderDeliveryAddressDTO::setHouse(const utility::string_t& value)
{
    m_House = value;
    m_HouseIsSet = true;
}

bool OrderDeliveryAddressDTO::houseIsSet() const
{
    return m_HouseIsSet;
}

void OrderDeliveryAddressDTO::unsetHouse()
{
    m_HouseIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getBlock() const
{
    return m_Block;
}

void OrderDeliveryAddressDTO::setBlock(const utility::string_t& value)
{
    m_Block = value;
    m_BlockIsSet = true;
}

bool OrderDeliveryAddressDTO::blockIsSet() const
{
    return m_BlockIsSet;
}

void OrderDeliveryAddressDTO::unsetBlock()
{
    m_BlockIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getEntrance() const
{
    return m_Entrance;
}

void OrderDeliveryAddressDTO::setEntrance(const utility::string_t& value)
{
    m_Entrance = value;
    m_EntranceIsSet = true;
}

bool OrderDeliveryAddressDTO::entranceIsSet() const
{
    return m_EntranceIsSet;
}

void OrderDeliveryAddressDTO::unsetEntrance()
{
    m_EntranceIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getEntryphone() const
{
    return m_Entryphone;
}

void OrderDeliveryAddressDTO::setEntryphone(const utility::string_t& value)
{
    m_Entryphone = value;
    m_EntryphoneIsSet = true;
}

bool OrderDeliveryAddressDTO::entryphoneIsSet() const
{
    return m_EntryphoneIsSet;
}

void OrderDeliveryAddressDTO::unsetEntryphone()
{
    m_EntryphoneIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getFloor() const
{
    return m_Floor;
}

void OrderDeliveryAddressDTO::setFloor(const utility::string_t& value)
{
    m_Floor = value;
    m_FloorIsSet = true;
}

bool OrderDeliveryAddressDTO::floorIsSet() const
{
    return m_FloorIsSet;
}

void OrderDeliveryAddressDTO::unsetFloor()
{
    m_FloorIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getApartment() const
{
    return m_Apartment;
}

void OrderDeliveryAddressDTO::setApartment(const utility::string_t& value)
{
    m_Apartment = value;
    m_ApartmentIsSet = true;
}

bool OrderDeliveryAddressDTO::apartmentIsSet() const
{
    return m_ApartmentIsSet;
}

void OrderDeliveryAddressDTO::unsetApartment()
{
    m_ApartmentIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getPhone() const
{
    return m_Phone;
}

void OrderDeliveryAddressDTO::setPhone(const utility::string_t& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool OrderDeliveryAddressDTO::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void OrderDeliveryAddressDTO::unsetPhone()
{
    m_PhoneIsSet = false;
}
utility::string_t OrderDeliveryAddressDTO::getRecipient() const
{
    return m_Recipient;
}

void OrderDeliveryAddressDTO::setRecipient(const utility::string_t& value)
{
    m_Recipient = value;
    m_RecipientIsSet = true;
}

bool OrderDeliveryAddressDTO::recipientIsSet() const
{
    return m_RecipientIsSet;
}

void OrderDeliveryAddressDTO::unsetRecipient()
{
    m_RecipientIsSet = false;
}
std::shared_ptr<GpsDTO> OrderDeliveryAddressDTO::getGps() const
{
    return m_Gps;
}

void OrderDeliveryAddressDTO::setGps(const std::shared_ptr<GpsDTO>& value)
{
    m_Gps = value;
    m_GpsIsSet = true;
}

bool OrderDeliveryAddressDTO::gpsIsSet() const
{
    return m_GpsIsSet;
}

void OrderDeliveryAddressDTO::unsetGps()
{
    m_GpsIsSet = false;
}
}
}
}
}


