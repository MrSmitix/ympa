/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetOrdersStatsRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetOrdersStatsRequest::GetOrdersStatsRequest()
{
    m_DateFromIsSet = false;
    m_DateToIsSet = false;
    m_UpdateFromIsSet = false;
    m_UpdateToIsSet = false;
    m_OrdersIsSet = false;
    m_StatusesIsSet = false;
    m_HasCis = false;
    m_HasCisIsSet = false;
}

GetOrdersStatsRequest::~GetOrdersStatsRequest()
{
}

void GetOrdersStatsRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetOrdersStatsRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DateFromIsSet)
    {
        val[utility::conversions::to_string_t(U("dateFrom"))] = ModelBase::toJson(m_DateFrom);
    }
    if(m_DateToIsSet)
    {
        val[utility::conversions::to_string_t(U("dateTo"))] = ModelBase::toJson(m_DateTo);
    }
    if(m_UpdateFromIsSet)
    {
        val[utility::conversions::to_string_t(U("updateFrom"))] = ModelBase::toJson(m_UpdateFrom);
    }
    if(m_UpdateToIsSet)
    {
        val[utility::conversions::to_string_t(U("updateTo"))] = ModelBase::toJson(m_UpdateTo);
    }
    if(m_OrdersIsSet)
    {
        val[utility::conversions::to_string_t(U("orders"))] = ModelBase::toJson(m_Orders);
    }
    if(m_StatusesIsSet)
    {
        val[utility::conversions::to_string_t(U("statuses"))] = ModelBase::toJson(m_Statuses);
    }
    if(m_HasCisIsSet)
    {
        val[utility::conversions::to_string_t(U("hasCis"))] = ModelBase::toJson(m_HasCis);
    }

    return val;
}

bool GetOrdersStatsRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("dateFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFrom);
            setDateFrom(refVal_setDateFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateTo);
            setDateTo(refVal_setDateTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdateFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateFrom);
            setUpdateFrom(refVal_setUpdateFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updateTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updateTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdateTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdateTo);
            setUpdateTo(refVal_setUpdateTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orders")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setOrders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrders);
            setOrders(refVal_setOrders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderStatsStatusType>> refVal_setStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatuses);
            setStatuses(refVal_setStatuses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hasCis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasCis")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasCis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasCis);
            setHasCis(refVal_setHasCis);
        }
    }
    return ok;
}

void GetOrdersStatsRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DateFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateFrom")), m_DateFrom));
    }
    if(m_DateToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateTo")), m_DateTo));
    }
    if(m_UpdateFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateFrom")), m_UpdateFrom));
    }
    if(m_UpdateToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updateTo")), m_UpdateTo));
    }
    if(m_OrdersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orders")), m_Orders));
    }
    if(m_StatusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statuses")), m_Statuses));
    }
    if(m_HasCisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasCis")), m_HasCis));
    }
}

bool GetOrdersStatsRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("dateFrom"))))
    {
        utility::datetime refVal_setDateFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateFrom"))), refVal_setDateFrom );
        setDateFrom(refVal_setDateFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateTo"))))
    {
        utility::datetime refVal_setDateTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateTo"))), refVal_setDateTo );
        setDateTo(refVal_setDateTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateFrom"))))
    {
        utility::datetime refVal_setUpdateFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateFrom"))), refVal_setUpdateFrom );
        setUpdateFrom(refVal_setUpdateFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updateTo"))))
    {
        utility::datetime refVal_setUpdateTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updateTo"))), refVal_setUpdateTo );
        setUpdateTo(refVal_setUpdateTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orders"))))
    {
        std::vector<int64_t> refVal_setOrders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orders"))), refVal_setOrders );
        setOrders(refVal_setOrders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statuses"))))
    {
        std::vector<std::shared_ptr<OrderStatsStatusType>> refVal_setStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statuses"))), refVal_setStatuses );
        setStatuses(refVal_setStatuses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hasCis"))))
    {
        bool refVal_setHasCis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasCis"))), refVal_setHasCis );
        setHasCis(refVal_setHasCis);
    }
    return ok;
}

utility::datetime GetOrdersStatsRequest::getDateFrom() const
{
    return m_DateFrom;
}

void GetOrdersStatsRequest::setDateFrom(const utility::datetime& value)
{
    m_DateFrom = value;
    m_DateFromIsSet = true;
}

bool GetOrdersStatsRequest::dateFromIsSet() const
{
    return m_DateFromIsSet;
}

void GetOrdersStatsRequest::unsetDateFrom()
{
    m_DateFromIsSet = false;
}
utility::datetime GetOrdersStatsRequest::getDateTo() const
{
    return m_DateTo;
}

void GetOrdersStatsRequest::setDateTo(const utility::datetime& value)
{
    m_DateTo = value;
    m_DateToIsSet = true;
}

bool GetOrdersStatsRequest::dateToIsSet() const
{
    return m_DateToIsSet;
}

void GetOrdersStatsRequest::unsetDateTo()
{
    m_DateToIsSet = false;
}
utility::datetime GetOrdersStatsRequest::getUpdateFrom() const
{
    return m_UpdateFrom;
}

void GetOrdersStatsRequest::setUpdateFrom(const utility::datetime& value)
{
    m_UpdateFrom = value;
    m_UpdateFromIsSet = true;
}

bool GetOrdersStatsRequest::updateFromIsSet() const
{
    return m_UpdateFromIsSet;
}

void GetOrdersStatsRequest::unsetUpdateFrom()
{
    m_UpdateFromIsSet = false;
}
utility::datetime GetOrdersStatsRequest::getUpdateTo() const
{
    return m_UpdateTo;
}

void GetOrdersStatsRequest::setUpdateTo(const utility::datetime& value)
{
    m_UpdateTo = value;
    m_UpdateToIsSet = true;
}

bool GetOrdersStatsRequest::updateToIsSet() const
{
    return m_UpdateToIsSet;
}

void GetOrdersStatsRequest::unsetUpdateTo()
{
    m_UpdateToIsSet = false;
}
std::vector<int64_t>& GetOrdersStatsRequest::getOrders()
{
    return m_Orders;
}

void GetOrdersStatsRequest::setOrders(std::vector<int64_t> value)
{
    m_Orders = value;
    m_OrdersIsSet = true;
}

bool GetOrdersStatsRequest::ordersIsSet() const
{
    return m_OrdersIsSet;
}

void GetOrdersStatsRequest::unsetOrders()
{
    m_OrdersIsSet = false;
}
std::vector<std::shared_ptr<OrderStatsStatusType>>& GetOrdersStatsRequest::getStatuses()
{
    return m_Statuses;
}

void GetOrdersStatsRequest::setStatuses(const std::vector<std::shared_ptr<OrderStatsStatusType>>& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}

bool GetOrdersStatsRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}

void GetOrdersStatsRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}
bool GetOrdersStatsRequest::isHasCis() const
{
    return m_HasCis;
}

void GetOrdersStatsRequest::setHasCis(bool value)
{
    m_HasCis = value;
    m_HasCisIsSet = true;
}

bool GetOrdersStatsRequest::hasCisIsSet() const
{
    return m_HasCisIsSet;
}

void GetOrdersStatsRequest::unsetHasCis()
{
    m_HasCisIsSet = false;
}
}
}
}
}


