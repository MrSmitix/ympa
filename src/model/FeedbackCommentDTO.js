/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedbackCommentAuthorDTO from './FeedbackCommentAuthorDTO';

/**
 * The FeedbackCommentDTO model module.
 * @module model/FeedbackCommentDTO
 * @version LATEST
 */
class FeedbackCommentDTO {
    /**
     * Constructs a new <code>FeedbackCommentDTO</code>.
     * Комментарий к отзыву на магазин.
     * @alias module:model/FeedbackCommentDTO
     */
    constructor() { 
        
        FeedbackCommentDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedbackCommentDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackCommentDTO} obj Optional instance to populate.
     * @return {module:model/FeedbackCommentDTO} The populated <code>FeedbackCommentDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackCommentDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = FeedbackCommentAuthorDTO.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [FeedbackCommentDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedbackCommentDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedbackCommentDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          FeedbackCommentAuthorDTO.validateJSON(data['author']);
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                FeedbackCommentDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Идентификатор ответа.
 * @member {Number} id
 */
FeedbackCommentDTO.prototype['id'] = undefined;

/**
 * Идентификатор родительского ответа.
 * @member {Number} parentId
 */
FeedbackCommentDTO.prototype['parentId'] = undefined;

/**
 * Текст ответа.
 * @member {String} body
 */
FeedbackCommentDTO.prototype['body'] = undefined;

/**
 * Дата и время создания ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @member {Date} createdAt
 */
FeedbackCommentDTO.prototype['createdAt'] = undefined;

/**
 * Дата и время изменения ответа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
 * @member {Date} updatedAt
 */
FeedbackCommentDTO.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/FeedbackCommentAuthorDTO} author
 */
FeedbackCommentDTO.prototype['author'] = undefined;

/**
 * Дочерние ответы.
 * @member {Array.<module:model/FeedbackCommentDTO>} children
 */
FeedbackCommentDTO.prototype['children'] = undefined;






export default FeedbackCommentDTO;

