/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OutletLicenseDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OutletLicenseDTO::OutletLicenseDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_OutletId = 0L;
    m_OutletIdIsSet = false;
    m_LicenseTypeIsSet = false;
    m_number = utility::conversions::to_string_t("");
    m_numberIsSet = false;
    m_DateOfIssue = utility::datetime();
    m_DateOfIssueIsSet = false;
    m_DateOfExpiry = utility::datetime();
    m_DateOfExpiryIsSet = false;
}

OutletLicenseDTO::~OutletLicenseDTO()
{
}

void OutletLicenseDTO::validate()
{
    // TODO: implement validation
}

web::json::value OutletLicenseDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_OutletIdIsSet)
    {
        val[utility::conversions::to_string_t(U("outletId"))] = ModelBase::toJson(m_OutletId);
    }
    if(m_LicenseTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("licenseType"))] = ModelBase::toJson(m_LicenseType);
    }
    if(m_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("number"))] = ModelBase::toJson(m_number);
    }
    if(m_DateOfIssueIsSet)
    {
        val[utility::conversions::to_string_t(U("dateOfIssue"))] = ModelBase::toJson(m_DateOfIssue);
    }
    if(m_DateOfExpiryIsSet)
    {
        val[utility::conversions::to_string_t(U("dateOfExpiry"))] = ModelBase::toJson(m_DateOfExpiry);
    }

    return val;
}

bool OutletLicenseDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outletId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outletId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setOutletId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutletId);
            setOutletId(refVal_setOutletId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenseType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenseType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LicenseType> refVal_setLicenseType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseType);
            setLicenseType(refVal_setLicenseType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumber);
            setNumber(refVal_setNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateOfIssue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateOfIssue")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateOfIssue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateOfIssue);
            setDateOfIssue(refVal_setDateOfIssue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dateOfExpiry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dateOfExpiry")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDateOfExpiry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateOfExpiry);
            setDateOfExpiry(refVal_setDateOfExpiry);
        }
    }
    return ok;
}

void OutletLicenseDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_OutletIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outletId")), m_OutletId));
    }
    if(m_LicenseTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenseType")), m_LicenseType));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number")), m_number));
    }
    if(m_DateOfIssueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateOfIssue")), m_DateOfIssue));
    }
    if(m_DateOfExpiryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dateOfExpiry")), m_DateOfExpiry));
    }
}

bool OutletLicenseDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outletId"))))
    {
        int64_t refVal_setOutletId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outletId"))), refVal_setOutletId );
        setOutletId(refVal_setOutletId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenseType"))))
    {
        std::shared_ptr<LicenseType> refVal_setLicenseType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenseType"))), refVal_setLicenseType );
        setLicenseType(refVal_setLicenseType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number"))))
    {
        utility::string_t refVal_setNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number"))), refVal_setNumber );
        setNumber(refVal_setNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateOfIssue"))))
    {
        utility::datetime refVal_setDateOfIssue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateOfIssue"))), refVal_setDateOfIssue );
        setDateOfIssue(refVal_setDateOfIssue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dateOfExpiry"))))
    {
        utility::datetime refVal_setDateOfExpiry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dateOfExpiry"))), refVal_setDateOfExpiry );
        setDateOfExpiry(refVal_setDateOfExpiry);
    }
    return ok;
}

int64_t OutletLicenseDTO::getId() const
{
    return m_Id;
}

void OutletLicenseDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OutletLicenseDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OutletLicenseDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t OutletLicenseDTO::getOutletId() const
{
    return m_OutletId;
}

void OutletLicenseDTO::setOutletId(int64_t value)
{
    m_OutletId = value;
    m_OutletIdIsSet = true;
}

bool OutletLicenseDTO::outletIdIsSet() const
{
    return m_OutletIdIsSet;
}

void OutletLicenseDTO::unsetOutletId()
{
    m_OutletIdIsSet = false;
}
std::shared_ptr<LicenseType> OutletLicenseDTO::getLicenseType() const
{
    return m_LicenseType;
}

void OutletLicenseDTO::setLicenseType(const std::shared_ptr<LicenseType>& value)
{
    m_LicenseType = value;
    m_LicenseTypeIsSet = true;
}

bool OutletLicenseDTO::licenseTypeIsSet() const
{
    return m_LicenseTypeIsSet;
}

void OutletLicenseDTO::unsetLicenseType()
{
    m_LicenseTypeIsSet = false;
}
utility::string_t OutletLicenseDTO::getNumber() const
{
    return m_number;
}

void OutletLicenseDTO::setNumber(const utility::string_t& value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool OutletLicenseDTO::numberIsSet() const
{
    return m_numberIsSet;
}

void OutletLicenseDTO::unsetnumber()
{
    m_numberIsSet = false;
}
utility::datetime OutletLicenseDTO::getDateOfIssue() const
{
    return m_DateOfIssue;
}

void OutletLicenseDTO::setDateOfIssue(const utility::datetime& value)
{
    m_DateOfIssue = value;
    m_DateOfIssueIsSet = true;
}

bool OutletLicenseDTO::dateOfIssueIsSet() const
{
    return m_DateOfIssueIsSet;
}

void OutletLicenseDTO::unsetDateOfIssue()
{
    m_DateOfIssueIsSet = false;
}
utility::datetime OutletLicenseDTO::getDateOfExpiry() const
{
    return m_DateOfExpiry;
}

void OutletLicenseDTO::setDateOfExpiry(const utility::datetime& value)
{
    m_DateOfExpiry = value;
    m_DateOfExpiryIsSet = true;
}

bool OutletLicenseDTO::dateOfExpiryIsSet() const
{
    return m_DateOfExpiryIsSet;
}

void OutletLicenseDTO::unsetDateOfExpiry()
{
    m_DateOfExpiryIsSet = false;
}
}
}
}
}


