/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OutletAddressDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OutletAddressDTO::OutletAddressDTO()
{
    m_RegionId = 0L;
    m_RegionIdIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_number = utility::conversions::to_string_t("");
    m_numberIsSet = false;
    m_Building = utility::conversions::to_string_t("");
    m_BuildingIsSet = false;
    m_Estate = utility::conversions::to_string_t("");
    m_EstateIsSet = false;
    m_Block = utility::conversions::to_string_t("");
    m_BlockIsSet = false;
    m_Additional = utility::conversions::to_string_t("");
    m_AdditionalIsSet = false;
    m_Km = 0;
    m_KmIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
}

OutletAddressDTO::~OutletAddressDTO()
{
}

void OutletAddressDTO::validate()
{
    // TODO: implement validation
}

web::json::value OutletAddressDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RegionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("regionId"))] = ModelBase::toJson(m_RegionId);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t(U("street"))] = ModelBase::toJson(m_Street);
    }
    if(m_numberIsSet)
    {
        val[utility::conversions::to_string_t(U("number"))] = ModelBase::toJson(m_number);
    }
    if(m_BuildingIsSet)
    {
        val[utility::conversions::to_string_t(U("building"))] = ModelBase::toJson(m_Building);
    }
    if(m_EstateIsSet)
    {
        val[utility::conversions::to_string_t(U("estate"))] = ModelBase::toJson(m_Estate);
    }
    if(m_BlockIsSet)
    {
        val[utility::conversions::to_string_t(U("block"))] = ModelBase::toJson(m_Block);
    }
    if(m_AdditionalIsSet)
    {
        val[utility::conversions::to_string_t(U("additional"))] = ModelBase::toJson(m_Additional);
    }
    if(m_KmIsSet)
    {
        val[utility::conversions::to_string_t(U("km"))] = ModelBase::toJson(m_Km);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }

    return val;
}

bool OutletAddressDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("regionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("regionId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRegionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegionId);
            setRegionId(refVal_setRegionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("street"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("street")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStreet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStreet);
            setStreet(refVal_setStreet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("number"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("number")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumber);
            setNumber(refVal_setNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("building"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("building")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBuilding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuilding);
            setBuilding(refVal_setBuilding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEstate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEstate);
            setEstate(refVal_setEstate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlock);
            setBlock(refVal_setBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("additional"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("additional")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdditional;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdditional);
            setAdditional(refVal_setAdditional);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("km"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("km")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setKm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKm);
            setKm(refVal_setKm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    return ok;
}

void OutletAddressDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RegionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("regionId")), m_RegionId));
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("street")), m_Street));
    }
    if(m_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("number")), m_number));
    }
    if(m_BuildingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("building")), m_Building));
    }
    if(m_EstateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estate")), m_Estate));
    }
    if(m_BlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block")), m_Block));
    }
    if(m_AdditionalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("additional")), m_Additional));
    }
    if(m_KmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("km")), m_Km));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
}

bool OutletAddressDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("regionId"))))
    {
        int64_t refVal_setRegionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("regionId"))), refVal_setRegionId );
        setRegionId(refVal_setRegionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("street"))))
    {
        utility::string_t refVal_setStreet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("street"))), refVal_setStreet );
        setStreet(refVal_setStreet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("number"))))
    {
        utility::string_t refVal_setNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("number"))), refVal_setNumber );
        setNumber(refVal_setNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("building"))))
    {
        utility::string_t refVal_setBuilding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("building"))), refVal_setBuilding );
        setBuilding(refVal_setBuilding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estate"))))
    {
        utility::string_t refVal_setEstate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estate"))), refVal_setEstate );
        setEstate(refVal_setEstate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block"))))
    {
        utility::string_t refVal_setBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block"))), refVal_setBlock );
        setBlock(refVal_setBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("additional"))))
    {
        utility::string_t refVal_setAdditional;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("additional"))), refVal_setAdditional );
        setAdditional(refVal_setAdditional);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("km"))))
    {
        int32_t refVal_setKm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("km"))), refVal_setKm );
        setKm(refVal_setKm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    return ok;
}

int64_t OutletAddressDTO::getRegionId() const
{
    return m_RegionId;
}

void OutletAddressDTO::setRegionId(int64_t value)
{
    m_RegionId = value;
    m_RegionIdIsSet = true;
}

bool OutletAddressDTO::regionIdIsSet() const
{
    return m_RegionIdIsSet;
}

void OutletAddressDTO::unsetRegionId()
{
    m_RegionIdIsSet = false;
}
utility::string_t OutletAddressDTO::getStreet() const
{
    return m_Street;
}

void OutletAddressDTO::setStreet(const utility::string_t& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}

bool OutletAddressDTO::streetIsSet() const
{
    return m_StreetIsSet;
}

void OutletAddressDTO::unsetStreet()
{
    m_StreetIsSet = false;
}
utility::string_t OutletAddressDTO::getNumber() const
{
    return m_number;
}

void OutletAddressDTO::setNumber(const utility::string_t& value)
{
    m_number = value;
    m_numberIsSet = true;
}

bool OutletAddressDTO::numberIsSet() const
{
    return m_numberIsSet;
}

void OutletAddressDTO::unsetnumber()
{
    m_numberIsSet = false;
}
utility::string_t OutletAddressDTO::getBuilding() const
{
    return m_Building;
}

void OutletAddressDTO::setBuilding(const utility::string_t& value)
{
    m_Building = value;
    m_BuildingIsSet = true;
}

bool OutletAddressDTO::buildingIsSet() const
{
    return m_BuildingIsSet;
}

void OutletAddressDTO::unsetBuilding()
{
    m_BuildingIsSet = false;
}
utility::string_t OutletAddressDTO::getEstate() const
{
    return m_Estate;
}

void OutletAddressDTO::setEstate(const utility::string_t& value)
{
    m_Estate = value;
    m_EstateIsSet = true;
}

bool OutletAddressDTO::estateIsSet() const
{
    return m_EstateIsSet;
}

void OutletAddressDTO::unsetEstate()
{
    m_EstateIsSet = false;
}
utility::string_t OutletAddressDTO::getBlock() const
{
    return m_Block;
}

void OutletAddressDTO::setBlock(const utility::string_t& value)
{
    m_Block = value;
    m_BlockIsSet = true;
}

bool OutletAddressDTO::blockIsSet() const
{
    return m_BlockIsSet;
}

void OutletAddressDTO::unsetBlock()
{
    m_BlockIsSet = false;
}
utility::string_t OutletAddressDTO::getAdditional() const
{
    return m_Additional;
}

void OutletAddressDTO::setAdditional(const utility::string_t& value)
{
    m_Additional = value;
    m_AdditionalIsSet = true;
}

bool OutletAddressDTO::additionalIsSet() const
{
    return m_AdditionalIsSet;
}

void OutletAddressDTO::unsetAdditional()
{
    m_AdditionalIsSet = false;
}
int32_t OutletAddressDTO::getKm() const
{
    return m_Km;
}

void OutletAddressDTO::setKm(int32_t value)
{
    m_Km = value;
    m_KmIsSet = true;
}

bool OutletAddressDTO::kmIsSet() const
{
    return m_KmIsSet;
}

void OutletAddressDTO::unsetKm()
{
    m_KmIsSet = false;
}
utility::string_t OutletAddressDTO::getCity() const
{
    return m_City;
}

void OutletAddressDTO::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool OutletAddressDTO::cityIsSet() const
{
    return m_CityIsSet;
}

void OutletAddressDTO::unsetCity()
{
    m_CityIsSet = false;
}
}
}
}
}


