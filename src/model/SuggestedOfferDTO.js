/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasePriceDTO from './BasePriceDTO';

/**
 * The SuggestedOfferDTO model module.
 * @module model/SuggestedOfferDTO
 * @version LATEST
 */
class SuggestedOfferDTO {
    /**
     * @member {String} offerId
     * @type {String}
     */
    offerId;
    /**
     * @member {String} name
     * @type {String}
     */
    name;
    /**
     * @member {String} category
     * @type {String}
     */
    category;
    /**
     * @member {String} vendor
     * @type {String}
     */
    vendor;
    /**
     * @member {Array.<String>} barcodes
     * @type {Array.<String>}
     */
    barcodes;
    /**
     * @member {String} description
     * @type {String}
     */
    description;
    /**
     * @member {String} vendorCode
     * @type {String}
     */
    vendorCode;
    /**
     * @member {module:model/BasePriceDTO} basicPrice
     * @type {module:model/BasePriceDTO}
     */
    basicPrice;

    

    /**
     * Constructs a new <code>SuggestedOfferDTO</code>.
     * Информация о товаре.
     * @alias module:model/SuggestedOfferDTO
     */
    constructor() { 
        
        SuggestedOfferDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuggestedOfferDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuggestedOfferDTO} obj Optional instance to populate.
     * @return {module:model/SuggestedOfferDTO} The populated <code>SuggestedOfferDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuggestedOfferDTO();

            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
            if (data.hasOwnProperty('barcodes')) {
                obj['barcodes'] = ApiClient.convertToType(data['barcodes'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('vendorCode')) {
                obj['vendorCode'] = ApiClient.convertToType(data['vendorCode'], 'String');
            }
            if (data.hasOwnProperty('basicPrice')) {
                obj['basicPrice'] = BasePriceDTO.constructFromObject(data['basicPrice']);
            }
        }
        return obj;
    }
}



export default SuggestedOfferDTO;

