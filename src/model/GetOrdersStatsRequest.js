/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderStatsStatusType from './OrderStatsStatusType';

/**
 * The GetOrdersStatsRequest model module.
 * @module model/GetOrdersStatsRequest
 * @version LATEST
 */
class GetOrdersStatsRequest {
    /**
     * Constructs a new <code>GetOrdersStatsRequest</code>.
     * Запрос информации по заказам.
     * @alias module:model/GetOrdersStatsRequest
     */
    constructor() { 
        
        GetOrdersStatsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetOrdersStatsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetOrdersStatsRequest} obj Optional instance to populate.
     * @return {module:model/GetOrdersStatsRequest} The populated <code>GetOrdersStatsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetOrdersStatsRequest();

            if (data.hasOwnProperty('dateFrom')) {
                obj['dateFrom'] = ApiClient.convertToType(data['dateFrom'], 'Date');
            }
            if (data.hasOwnProperty('dateTo')) {
                obj['dateTo'] = ApiClient.convertToType(data['dateTo'], 'Date');
            }
            if (data.hasOwnProperty('updateFrom')) {
                obj['updateFrom'] = ApiClient.convertToType(data['updateFrom'], 'Date');
            }
            if (data.hasOwnProperty('updateTo')) {
                obj['updateTo'] = ApiClient.convertToType(data['updateTo'], 'Date');
            }
            if (data.hasOwnProperty('orders')) {
                obj['orders'] = ApiClient.convertToType(data['orders'], ['Number']);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [OrderStatsStatusType]);
            }
            if (data.hasOwnProperty('hasCis')) {
                obj['hasCis'] = ApiClient.convertToType(data['hasCis'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetOrdersStatsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetOrdersStatsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['orders'])) {
            throw new Error("Expected the field `orders` to be an array in the JSON data but got " + data['orders']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['statuses'])) {
            throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
        }

        return true;
    }


}



/**
 * Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
 * @member {Date} dateFrom
 */
GetOrdersStatsRequest.prototype['dateFrom'] = undefined;

/**
 * Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
 * @member {Date} dateTo
 */
GetOrdersStatsRequest.prototype['dateTo'] = undefined;

/**
 * Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
 * @member {Date} updateFrom
 */
GetOrdersStatsRequest.prototype['updateFrom'] = undefined;

/**
 * Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
 * @member {Date} updateTo
 */
GetOrdersStatsRequest.prototype['updateTo'] = undefined;

/**
 * Список идентификаторов заказов.
 * @member {Array.<Number>} orders
 */
GetOrdersStatsRequest.prototype['orders'] = undefined;

/**
 * Список статусов заказов.
 * @member {Array.<module:model/OrderStatsStatusType>} statuses
 */
GetOrdersStatsRequest.prototype['statuses'] = undefined;

/**
 * Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 
 * @member {Boolean} hasCis
 */
GetOrdersStatsRequest.prototype['hasCis'] = undefined;






export default GetOrdersStatsRequest;

