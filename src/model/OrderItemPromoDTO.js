/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderPromoType from './OrderPromoType';

/**
 * The OrderItemPromoDTO model module.
 * @module model/OrderItemPromoDTO
 * @version LATEST
 */
class OrderItemPromoDTO {
    /**
     * Constructs a new <code>OrderItemPromoDTO</code>.
     * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
     * @alias module:model/OrderItemPromoDTO
     * @param type {module:model/OrderPromoType} 
     */
    constructor(type) { 
        
        OrderItemPromoDTO.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>OrderItemPromoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderItemPromoDTO} obj Optional instance to populate.
     * @return {module:model/OrderItemPromoDTO} The populated <code>OrderItemPromoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderItemPromoDTO();

            if (data.hasOwnProperty('type')) {
                obj['type'] = OrderPromoType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('discount')) {
                obj['discount'] = ApiClient.convertToType(data['discount'], 'Number');
            }
            if (data.hasOwnProperty('subsidy')) {
                obj['subsidy'] = ApiClient.convertToType(data['subsidy'], 'Number');
            }
            if (data.hasOwnProperty('shopPromoId')) {
                obj['shopPromoId'] = ApiClient.convertToType(data['shopPromoId'], 'String');
            }
            if (data.hasOwnProperty('marketPromoId')) {
                obj['marketPromoId'] = ApiClient.convertToType(data['marketPromoId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderItemPromoDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderItemPromoDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderItemPromoDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['shopPromoId'] && !(typeof data['shopPromoId'] === 'string' || data['shopPromoId'] instanceof String)) {
            throw new Error("Expected the field `shopPromoId` to be a primitive type in the JSON string but got " + data['shopPromoId']);
        }
        // ensure the json data is a string
        if (data['marketPromoId'] && !(typeof data['marketPromoId'] === 'string' || data['marketPromoId'] instanceof String)) {
            throw new Error("Expected the field `marketPromoId` to be a primitive type in the JSON string but got " + data['marketPromoId']);
        }

        return true;
    }


}

OrderItemPromoDTO.RequiredProperties = ["type"];

/**
 * @member {module:model/OrderPromoType} type
 */
OrderItemPromoDTO.prototype['type'] = undefined;

/**
 * Размер пользовательской скидки в валюте покупателя. 
 * @member {Number} discount
 */
OrderItemPromoDTO.prototype['discount'] = undefined;

/**
 * Вознаграждение партнеру от Маркета за товар, проданный в рамках акции.  Передается в валюте заказа. 
 * @member {Number} subsidy
 */
OrderItemPromoDTO.prototype['subsidy'] = undefined;

/**
 * Идентификатор акции поставщика. 
 * @member {String} shopPromoId
 */
OrderItemPromoDTO.prototype['shopPromoId'] = undefined;

/**
 * Идентификатор акции в рамках соглашения на оказание услуг по продвижению сервиса между Маркетом и партнером.  Параметр передается, только если параметр `type=MARKET_DEAL`. 
 * @member {String} marketPromoId
 */
OrderItemPromoDTO.prototype['marketPromoId'] = undefined;






export default OrderItemPromoDTO;

