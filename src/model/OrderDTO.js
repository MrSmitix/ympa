/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyType from './CurrencyType';
import OrderBuyerDTO from './OrderBuyerDTO';
import OrderDeliveryDTO from './OrderDeliveryDTO';
import OrderItemDTO from './OrderItemDTO';
import OrderPaymentMethodType from './OrderPaymentMethodType';
import OrderPaymentType from './OrderPaymentType';
import OrderStatusType from './OrderStatusType';
import OrderSubsidyDTO from './OrderSubsidyDTO';
import OrderSubstatusType from './OrderSubstatusType';
import OrderTaxSystemType from './OrderTaxSystemType';

/**
 * The OrderDTO model module.
 * @module model/OrderDTO
 * @version LATEST
 */
class OrderDTO {
    /**
     * Constructs a new <code>OrderDTO</code>.
     * Заказ.
     * @alias module:model/OrderDTO
     * @param items {Array.<module:model/OrderItemDTO>} Список товаров в заказе.
     */
    constructor(items) { 
        
        OrderDTO.initialize(this, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items) { 
        obj['items'] = items;
    }

    /**
     * Constructs a <code>OrderDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDTO} obj Optional instance to populate.
     * @return {module:model/OrderDTO} The populated <code>OrderDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OrderStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('substatus')) {
                obj['substatus'] = OrderSubstatusType.constructFromObject(data['substatus']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyType.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('itemsTotal')) {
                obj['itemsTotal'] = ApiClient.convertToType(data['itemsTotal'], 'Number');
            }
            if (data.hasOwnProperty('deliveryTotal')) {
                obj['deliveryTotal'] = ApiClient.convertToType(data['deliveryTotal'], 'Number');
            }
            if (data.hasOwnProperty('buyerItemsTotal')) {
                obj['buyerItemsTotal'] = ApiClient.convertToType(data['buyerItemsTotal'], 'Number');
            }
            if (data.hasOwnProperty('buyerTotal')) {
                obj['buyerTotal'] = ApiClient.convertToType(data['buyerTotal'], 'Number');
            }
            if (data.hasOwnProperty('buyerItemsTotalBeforeDiscount')) {
                obj['buyerItemsTotalBeforeDiscount'] = ApiClient.convertToType(data['buyerItemsTotalBeforeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('buyerTotalBeforeDiscount')) {
                obj['buyerTotalBeforeDiscount'] = ApiClient.convertToType(data['buyerTotalBeforeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = OrderPaymentType.constructFromObject(data['paymentType']);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = OrderPaymentMethodType.constructFromObject(data['paymentMethod']);
            }
            if (data.hasOwnProperty('fake')) {
                obj['fake'] = ApiClient.convertToType(data['fake'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItemDTO]);
            }
            if (data.hasOwnProperty('subsidies')) {
                obj['subsidies'] = ApiClient.convertToType(data['subsidies'], [OrderSubsidyDTO]);
            }
            if (data.hasOwnProperty('delivery')) {
                obj['delivery'] = OrderDeliveryDTO.constructFromObject(data['delivery']);
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = OrderBuyerDTO.constructFromObject(data['buyer']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('taxSystem')) {
                obj['taxSystem'] = OrderTaxSystemType.constructFromObject(data['taxSystem']);
            }
            if (data.hasOwnProperty('cancelRequested')) {
                obj['cancelRequested'] = ApiClient.convertToType(data['cancelRequested'], 'Boolean');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creationDate'] && !(typeof data['creationDate'] === 'string' || data['creationDate'] instanceof String)) {
            throw new Error("Expected the field `creationDate` to be a primitive type in the JSON string but got " + data['creationDate']);
        }
        // ensure the json data is a string
        if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
            throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                OrderItemDTO.validateJSON(item);
            };
        }
        if (data['subsidies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subsidies'])) {
                throw new Error("Expected the field `subsidies` to be an array in the JSON data but got " + data['subsidies']);
            }
            // validate the optional field `subsidies` (array)
            for (const item of data['subsidies']) {
                OrderSubsidyDTO.validateJSON(item);
            };
        }
        // validate the optional field `delivery`
        if (data['delivery']) { // data not null
          OrderDeliveryDTO.validateJSON(data['delivery']);
        }
        // validate the optional field `buyer`
        if (data['buyer']) { // data not null
          OrderBuyerDTO.validateJSON(data['buyer']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['expiryDate'] && !(typeof data['expiryDate'] === 'string' || data['expiryDate'] instanceof String)) {
            throw new Error("Expected the field `expiryDate` to be a primitive type in the JSON string but got " + data['expiryDate']);
        }

        return true;
    }


}

OrderDTO.RequiredProperties = ["items"];

/**
 * Идентификатор заказа.
 * @member {Number} id
 */
OrderDTO.prototype['id'] = undefined;

/**
 * @member {module:model/OrderStatusType} status
 */
OrderDTO.prototype['status'] = undefined;

/**
 * @member {module:model/OrderSubstatusType} substatus
 */
OrderDTO.prototype['substatus'] = undefined;

/**
 * @member {String} creationDate
 */
OrderDTO.prototype['creationDate'] = undefined;

/**
 * @member {String} updatedAt
 */
OrderDTO.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/CurrencyType} currency
 */
OrderDTO.prototype['currency'] = undefined;

/**
 * Платеж покупателя. 
 * @member {Number} itemsTotal
 */
OrderDTO.prototype['itemsTotal'] = undefined;

/**
 * Стоимость доставки. 
 * @member {Number} deliveryTotal
 */
OrderDTO.prototype['deliveryTotal'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
 * @member {Number} buyerItemsTotal
 */
OrderDTO.prototype['buyerItemsTotal'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
 * @member {Number} buyerTotal
 */
OrderDTO.prototype['buyerTotal'] = undefined;

/**
 * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
 * @member {Number} buyerItemsTotalBeforeDiscount
 */
OrderDTO.prototype['buyerItemsTotalBeforeDiscount'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
 * @member {Number} buyerTotalBeforeDiscount
 */
OrderDTO.prototype['buyerTotalBeforeDiscount'] = undefined;

/**
 * @member {module:model/OrderPaymentType} paymentType
 */
OrderDTO.prototype['paymentType'] = undefined;

/**
 * @member {module:model/OrderPaymentMethodType} paymentMethod
 */
OrderDTO.prototype['paymentMethod'] = undefined;

/**
 * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
 * @member {Boolean} fake
 */
OrderDTO.prototype['fake'] = undefined;

/**
 * Список товаров в заказе.
 * @member {Array.<module:model/OrderItemDTO>} items
 */
OrderDTO.prototype['items'] = undefined;

/**
 * Список субсидий по типам.
 * @member {Array.<module:model/OrderSubsidyDTO>} subsidies
 */
OrderDTO.prototype['subsidies'] = undefined;

/**
 * @member {module:model/OrderDeliveryDTO} delivery
 */
OrderDTO.prototype['delivery'] = undefined;

/**
 * @member {module:model/OrderBuyerDTO} buyer
 */
OrderDTO.prototype['buyer'] = undefined;

/**
 * Комментарий к заказу.
 * @member {String} notes
 */
OrderDTO.prototype['notes'] = undefined;

/**
 * @member {module:model/OrderTaxSystemType} taxSystem
 */
OrderDTO.prototype['taxSystem'] = undefined;

/**
 * **Только для модели DBS**  Запрошена ли отмена. 
 * @member {Boolean} cancelRequested
 */
OrderDTO.prototype['cancelRequested'] = undefined;

/**
 * @member {String} expiryDate
 */
OrderDTO.prototype['expiryDate'] = undefined;






export default OrderDTO;

