/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyType from './CurrencyType';
import OrderBuyerDTO from './OrderBuyerDTO';
import OrderDeliveryDTO from './OrderDeliveryDTO';
import OrderItemDTO from './OrderItemDTO';
import OrderPaymentMethodType from './OrderPaymentMethodType';
import OrderPaymentType from './OrderPaymentType';
import OrderStatusType from './OrderStatusType';
import OrderSubsidyDTO from './OrderSubsidyDTO';
import OrderSubstatusType from './OrderSubstatusType';
import OrderTaxSystemType from './OrderTaxSystemType';

/**
 * The OrderDTO model module.
 * @module model/OrderDTO
 * @version LATEST
 */
class OrderDTO {
    /**
     * @member {Number} id
     * @type {Number}
     */
    id;
    /**
     * @member {module:model/OrderStatusType} status
     * @type {module:model/OrderStatusType}
     */
    status;
    /**
     * @member {module:model/OrderSubstatusType} substatus
     * @type {module:model/OrderSubstatusType}
     */
    substatus;
    /**
     * @member {String} creationDate
     * @type {String}
     */
    creationDate;
    /**
     * @member {String} updatedAt
     * @type {String}
     */
    updatedAt;
    /**
     * @member {module:model/CurrencyType} currency
     * @type {module:model/CurrencyType}
     */
    currency;
    /**
     * @member {Number} itemsTotal
     * @type {Number}
     */
    itemsTotal;
    /**
     * @member {Number} deliveryTotal
     * @type {Number}
     */
    deliveryTotal;
    /**
     * @member {Number} buyerItemsTotal
     * @type {Number}
     */
    buyerItemsTotal;
    /**
     * @member {Number} buyerTotal
     * @type {Number}
     */
    buyerTotal;
    /**
     * @member {Number} buyerItemsTotalBeforeDiscount
     * @type {Number}
     */
    buyerItemsTotalBeforeDiscount;
    /**
     * @member {Number} buyerTotalBeforeDiscount
     * @type {Number}
     */
    buyerTotalBeforeDiscount;
    /**
     * @member {module:model/OrderPaymentType} paymentType
     * @type {module:model/OrderPaymentType}
     */
    paymentType;
    /**
     * @member {module:model/OrderPaymentMethodType} paymentMethod
     * @type {module:model/OrderPaymentMethodType}
     */
    paymentMethod;
    /**
     * @member {Boolean} fake
     * @type {Boolean}
     */
    fake;
    /**
     * @member {Array.<module:model/OrderItemDTO>} items
     * @type {Array.<module:model/OrderItemDTO>}
     */
    items;
    /**
     * @member {Array.<module:model/OrderSubsidyDTO>} subsidies
     * @type {Array.<module:model/OrderSubsidyDTO>}
     */
    subsidies;
    /**
     * @member {module:model/OrderDeliveryDTO} delivery
     * @type {module:model/OrderDeliveryDTO}
     */
    delivery;
    /**
     * @member {module:model/OrderBuyerDTO} buyer
     * @type {module:model/OrderBuyerDTO}
     */
    buyer;
    /**
     * @member {String} notes
     * @type {String}
     */
    notes;
    /**
     * @member {module:model/OrderTaxSystemType} taxSystem
     * @type {module:model/OrderTaxSystemType}
     */
    taxSystem;
    /**
     * @member {Boolean} cancelRequested
     * @type {Boolean}
     */
    cancelRequested;
    /**
     * @member {String} expiryDate
     * @type {String}
     */
    expiryDate;

    

    /**
     * Constructs a new <code>OrderDTO</code>.
     * Заказ.
     * @alias module:model/OrderDTO
     * @param items {Array.<module:model/OrderItemDTO>} Список товаров в заказе.
     */
    constructor(items) { 
        
        OrderDTO.initialize(this, items);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, items) { 
        obj['items'] = items;
    }

    /**
     * Constructs a <code>OrderDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDTO} obj Optional instance to populate.
     * @return {module:model/OrderDTO} The populated <code>OrderDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OrderStatusType.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('substatus')) {
                obj['substatus'] = OrderSubstatusType.constructFromObject(data['substatus']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = CurrencyType.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('itemsTotal')) {
                obj['itemsTotal'] = ApiClient.convertToType(data['itemsTotal'], 'Number');
            }
            if (data.hasOwnProperty('deliveryTotal')) {
                obj['deliveryTotal'] = ApiClient.convertToType(data['deliveryTotal'], 'Number');
            }
            if (data.hasOwnProperty('buyerItemsTotal')) {
                obj['buyerItemsTotal'] = ApiClient.convertToType(data['buyerItemsTotal'], 'Number');
            }
            if (data.hasOwnProperty('buyerTotal')) {
                obj['buyerTotal'] = ApiClient.convertToType(data['buyerTotal'], 'Number');
            }
            if (data.hasOwnProperty('buyerItemsTotalBeforeDiscount')) {
                obj['buyerItemsTotalBeforeDiscount'] = ApiClient.convertToType(data['buyerItemsTotalBeforeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('buyerTotalBeforeDiscount')) {
                obj['buyerTotalBeforeDiscount'] = ApiClient.convertToType(data['buyerTotalBeforeDiscount'], 'Number');
            }
            if (data.hasOwnProperty('paymentType')) {
                obj['paymentType'] = OrderPaymentType.constructFromObject(data['paymentType']);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = OrderPaymentMethodType.constructFromObject(data['paymentMethod']);
            }
            if (data.hasOwnProperty('fake')) {
                obj['fake'] = ApiClient.convertToType(data['fake'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [OrderItemDTO]);
            }
            if (data.hasOwnProperty('subsidies')) {
                obj['subsidies'] = ApiClient.convertToType(data['subsidies'], [OrderSubsidyDTO]);
            }
            if (data.hasOwnProperty('delivery')) {
                obj['delivery'] = OrderDeliveryDTO.constructFromObject(data['delivery']);
            }
            if (data.hasOwnProperty('buyer')) {
                obj['buyer'] = OrderBuyerDTO.constructFromObject(data['buyer']);
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('taxSystem')) {
                obj['taxSystem'] = OrderTaxSystemType.constructFromObject(data['taxSystem']);
            }
            if (data.hasOwnProperty('cancelRequested')) {
                obj['cancelRequested'] = ApiClient.convertToType(data['cancelRequested'], 'Boolean');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'String');
            }
        }
        return obj;
    }
}



export default OrderDTO;

