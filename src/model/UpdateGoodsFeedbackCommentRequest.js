/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateGoodsFeedbackCommentDTO from './UpdateGoodsFeedbackCommentDTO';

/**
 * The UpdateGoodsFeedbackCommentRequest model module.
 * @module model/UpdateGoodsFeedbackCommentRequest
 * @version LATEST
 */
class UpdateGoodsFeedbackCommentRequest {
    /**
     * Constructs a new <code>UpdateGoodsFeedbackCommentRequest</code>.
     * Комментарий к отзыву.
     * @alias module:model/UpdateGoodsFeedbackCommentRequest
     * @param feedbackId {Number} Идентификатор отзыва. 
     * @param comment {module:model/UpdateGoodsFeedbackCommentDTO} 
     */
    constructor(feedbackId, comment) { 
        
        UpdateGoodsFeedbackCommentRequest.initialize(this, feedbackId, comment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feedbackId, comment) { 
        obj['feedbackId'] = feedbackId;
        obj['comment'] = comment;
    }

    /**
     * Constructs a <code>UpdateGoodsFeedbackCommentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateGoodsFeedbackCommentRequest} obj Optional instance to populate.
     * @return {module:model/UpdateGoodsFeedbackCommentRequest} The populated <code>UpdateGoodsFeedbackCommentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateGoodsFeedbackCommentRequest();

            if (data.hasOwnProperty('feedbackId')) {
                obj['feedbackId'] = ApiClient.convertToType(data['feedbackId'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = UpdateGoodsFeedbackCommentDTO.constructFromObject(data['comment']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateGoodsFeedbackCommentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateGoodsFeedbackCommentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateGoodsFeedbackCommentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `comment`
        if (data['comment']) { // data not null
          UpdateGoodsFeedbackCommentDTO.validateJSON(data['comment']);
        }

        return true;
    }


}

UpdateGoodsFeedbackCommentRequest.RequiredProperties = ["feedbackId", "comment"];

/**
 * Идентификатор отзыва. 
 * @member {Number} feedbackId
 */
UpdateGoodsFeedbackCommentRequest.prototype['feedbackId'] = undefined;

/**
 * @member {module:model/UpdateGoodsFeedbackCommentDTO} comment
 */
UpdateGoodsFeedbackCommentRequest.prototype['comment'] = undefined;






export default UpdateGoodsFeedbackCommentRequest;

