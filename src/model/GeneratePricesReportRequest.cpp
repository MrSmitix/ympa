/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GeneratePricesReportRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GeneratePricesReportRequest::GeneratePricesReportRequest()
{
    m_BusinessId = 0L;
    m_BusinessIdIsSet = false;
    m_CampaignId = 0L;
    m_CampaignIdIsSet = false;
    m_CategoryIdsIsSet = false;
    m_CreationDateFromIsSet = false;
    m_CreationDateToIsSet = false;
}

GeneratePricesReportRequest::~GeneratePricesReportRequest()
{
}

void GeneratePricesReportRequest::validate()
{
    // TODO: implement validation
}

web::json::value GeneratePricesReportRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BusinessIdIsSet)
    {
        val[utility::conversions::to_string_t(U("businessId"))] = ModelBase::toJson(m_BusinessId);
    }
    if(m_CampaignIdIsSet)
    {
        val[utility::conversions::to_string_t(U("campaignId"))] = ModelBase::toJson(m_CampaignId);
    }
    if(m_CategoryIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryIds"))] = ModelBase::toJson(m_CategoryIds);
    }
    if(m_CreationDateFromIsSet)
    {
        val[utility::conversions::to_string_t(U("creationDateFrom"))] = ModelBase::toJson(m_CreationDateFrom);
    }
    if(m_CreationDateToIsSet)
    {
        val[utility::conversions::to_string_t(U("creationDateTo"))] = ModelBase::toJson(m_CreationDateTo);
    }

    return val;
}

bool GeneratePricesReportRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("businessId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("businessId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBusinessId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusinessId);
            setBusinessId(refVal_setBusinessId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("campaignId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("campaignId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCampaignId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCampaignId);
            setCampaignId(refVal_setCampaignId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("categoryIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setCategoryIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryIds);
            setCategoryIds(refVal_setCategoryIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creationDateFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creationDateFrom")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreationDateFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationDateFrom);
            setCreationDateFrom(refVal_setCreationDateFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creationDateTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creationDateTo")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreationDateTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationDateTo);
            setCreationDateTo(refVal_setCreationDateTo);
        }
    }
    return ok;
}

void GeneratePricesReportRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BusinessIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("businessId")), m_BusinessId));
    }
    if(m_CampaignIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("campaignId")), m_CampaignId));
    }
    if(m_CategoryIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryIds")), m_CategoryIds));
    }
    if(m_CreationDateFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creationDateFrom")), m_CreationDateFrom));
    }
    if(m_CreationDateToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creationDateTo")), m_CreationDateTo));
    }
}

bool GeneratePricesReportRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("businessId"))))
    {
        int64_t refVal_setBusinessId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("businessId"))), refVal_setBusinessId );
        setBusinessId(refVal_setBusinessId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("campaignId"))))
    {
        int64_t refVal_setCampaignId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("campaignId"))), refVal_setCampaignId );
        setCampaignId(refVal_setCampaignId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryIds"))))
    {
        std::vector<int64_t> refVal_setCategoryIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryIds"))), refVal_setCategoryIds );
        setCategoryIds(refVal_setCategoryIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creationDateFrom"))))
    {
        utility::datetime refVal_setCreationDateFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creationDateFrom"))), refVal_setCreationDateFrom );
        setCreationDateFrom(refVal_setCreationDateFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creationDateTo"))))
    {
        utility::datetime refVal_setCreationDateTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creationDateTo"))), refVal_setCreationDateTo );
        setCreationDateTo(refVal_setCreationDateTo);
    }
    return ok;
}

int64_t GeneratePricesReportRequest::getBusinessId() const
{
    return m_BusinessId;
}

void GeneratePricesReportRequest::setBusinessId(int64_t value)
{
    m_BusinessId = value;
    m_BusinessIdIsSet = true;
}

bool GeneratePricesReportRequest::businessIdIsSet() const
{
    return m_BusinessIdIsSet;
}

void GeneratePricesReportRequest::unsetBusinessId()
{
    m_BusinessIdIsSet = false;
}
int64_t GeneratePricesReportRequest::getCampaignId() const
{
    return m_CampaignId;
}

void GeneratePricesReportRequest::setCampaignId(int64_t value)
{
    m_CampaignId = value;
    m_CampaignIdIsSet = true;
}

bool GeneratePricesReportRequest::campaignIdIsSet() const
{
    return m_CampaignIdIsSet;
}

void GeneratePricesReportRequest::unsetCampaignId()
{
    m_CampaignIdIsSet = false;
}
std::vector<int64_t>& GeneratePricesReportRequest::getCategoryIds()
{
    return m_CategoryIds;
}

void GeneratePricesReportRequest::setCategoryIds(std::vector<int64_t> value)
{
    m_CategoryIds = value;
    m_CategoryIdsIsSet = true;
}

bool GeneratePricesReportRequest::categoryIdsIsSet() const
{
    return m_CategoryIdsIsSet;
}

void GeneratePricesReportRequest::unsetCategoryIds()
{
    m_CategoryIdsIsSet = false;
}
utility::datetime GeneratePricesReportRequest::getCreationDateFrom() const
{
    return m_CreationDateFrom;
}

void GeneratePricesReportRequest::setCreationDateFrom(const utility::datetime& value)
{
    m_CreationDateFrom = value;
    m_CreationDateFromIsSet = true;
}

bool GeneratePricesReportRequest::creationDateFromIsSet() const
{
    return m_CreationDateFromIsSet;
}

void GeneratePricesReportRequest::unsetCreationDateFrom()
{
    m_CreationDateFromIsSet = false;
}
utility::datetime GeneratePricesReportRequest::getCreationDateTo() const
{
    return m_CreationDateTo;
}

void GeneratePricesReportRequest::setCreationDateTo(const utility::datetime& value)
{
    m_CreationDateTo = value;
    m_CreationDateToIsSet = true;
}

bool GeneratePricesReportRequest::creationDateToIsSet() const
{
    return m_CreationDateToIsSet;
}

void GeneratePricesReportRequest::unsetCreationDateTo()
{
    m_CreationDateToIsSet = false;
}
}
}
}
}


