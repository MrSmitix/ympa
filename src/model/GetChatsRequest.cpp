/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GetChatsRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GetChatsRequest::GetChatsRequest()
{
    m_OrderIdsIsSet = false;
    m_TypesIsSet = false;
    m_StatusesIsSet = false;
}

GetChatsRequest::~GetChatsRequest()
{
}

void GetChatsRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetChatsRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OrderIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("orderIds"))] = ModelBase::toJson(m_OrderIds);
    }
    if(m_TypesIsSet)
    {
        val[utility::conversions::to_string_t(U("types"))] = ModelBase::toJson(m_Types);
    }
    if(m_StatusesIsSet)
    {
        val[utility::conversions::to_string_t(U("statuses"))] = ModelBase::toJson(m_Statuses);
    }

    return val;
}

bool GetChatsRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("orderIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orderIds")));
        if(!fieldValue.is_null())
        {
            std::vector<int64_t> refVal_setOrderIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrderIds);
            setOrderIds(refVal_setOrderIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("types"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("types")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ChatType>> refVal_setTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTypes);
            setTypes(refVal_setTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statuses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statuses")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ChatStatusType>> refVal_setStatuses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatuses);
            setStatuses(refVal_setStatuses);
        }
    }
    return ok;
}

void GetChatsRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OrderIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orderIds")), m_OrderIds));
    }
    if(m_TypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("types")), m_Types));
    }
    if(m_StatusesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statuses")), m_Statuses));
    }
}

bool GetChatsRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("orderIds"))))
    {
        std::vector<int64_t> refVal_setOrderIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orderIds"))), refVal_setOrderIds );
        setOrderIds(refVal_setOrderIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("types"))))
    {
        std::vector<std::shared_ptr<ChatType>> refVal_setTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("types"))), refVal_setTypes );
        setTypes(refVal_setTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statuses"))))
    {
        std::vector<std::shared_ptr<ChatStatusType>> refVal_setStatuses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statuses"))), refVal_setStatuses );
        setStatuses(refVal_setStatuses);
    }
    return ok;
}

std::vector<int64_t>& GetChatsRequest::getOrderIds()
{
    return m_OrderIds;
}

void GetChatsRequest::setOrderIds(std::vector<int64_t> value)
{
    m_OrderIds = value;
    m_OrderIdsIsSet = true;
}

bool GetChatsRequest::orderIdsIsSet() const
{
    return m_OrderIdsIsSet;
}

void GetChatsRequest::unsetOrderIds()
{
    m_OrderIdsIsSet = false;
}
std::vector<std::shared_ptr<ChatType>>& GetChatsRequest::getTypes()
{
    return m_Types;
}

void GetChatsRequest::setTypes(const std::vector<std::shared_ptr<ChatType>>& value)
{
    m_Types = value;
    m_TypesIsSet = true;
}

bool GetChatsRequest::typesIsSet() const
{
    return m_TypesIsSet;
}

void GetChatsRequest::unsetTypes()
{
    m_TypesIsSet = false;
}
std::vector<std::shared_ptr<ChatStatusType>>& GetChatsRequest::getStatuses()
{
    return m_Statuses;
}

void GetChatsRequest::setStatuses(const std::vector<std::shared_ptr<ChatStatusType>>& value)
{
    m_Statuses = value;
    m_StatusesIsSet = true;
}

bool GetChatsRequest::statusesIsSet() const
{
    return m_StatusesIsSet;
}

void GetChatsRequest::unsetStatuses()
{
    m_StatusesIsSet = false;
}
}
}
}
}


