/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CalculateTariffsOfferInfoDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CalculateTariffsOfferInfoDTO::CalculateTariffsOfferInfoDTO()
{
    m_OfferIsSet = false;
    m_TariffsIsSet = false;
}

CalculateTariffsOfferInfoDTO::~CalculateTariffsOfferInfoDTO()
{
}

void CalculateTariffsOfferInfoDTO::validate()
{
    // TODO: implement validation
}

web::json::value CalculateTariffsOfferInfoDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIsSet)
    {
        val[utility::conversions::to_string_t(U("offer"))] = ModelBase::toJson(m_Offer);
    }
    if(m_TariffsIsSet)
    {
        val[utility::conversions::to_string_t(U("tariffs"))] = ModelBase::toJson(m_Tariffs);
    }

    return val;
}

bool CalculateTariffsOfferInfoDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offer")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CalculateTariffsOfferDTO> refVal_setOffer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffer);
            setOffer(refVal_setOffer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tariffs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tariffs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CalculatedTariffDTO>> refVal_setTariffs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTariffs);
            setTariffs(refVal_setTariffs);
        }
    }
    return ok;
}

void CalculateTariffsOfferInfoDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offer")), m_Offer));
    }
    if(m_TariffsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tariffs")), m_Tariffs));
    }
}

bool CalculateTariffsOfferInfoDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offer"))))
    {
        std::shared_ptr<CalculateTariffsOfferDTO> refVal_setOffer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offer"))), refVal_setOffer );
        setOffer(refVal_setOffer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tariffs"))))
    {
        std::vector<std::shared_ptr<CalculatedTariffDTO>> refVal_setTariffs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tariffs"))), refVal_setTariffs );
        setTariffs(refVal_setTariffs);
    }
    return ok;
}

std::shared_ptr<CalculateTariffsOfferDTO> CalculateTariffsOfferInfoDTO::getOffer() const
{
    return m_Offer;
}

void CalculateTariffsOfferInfoDTO::setOffer(const std::shared_ptr<CalculateTariffsOfferDTO>& value)
{
    m_Offer = value;
    m_OfferIsSet = true;
}

bool CalculateTariffsOfferInfoDTO::offerIsSet() const
{
    return m_OfferIsSet;
}

void CalculateTariffsOfferInfoDTO::unsetOffer()
{
    m_OfferIsSet = false;
}
std::vector<std::shared_ptr<CalculatedTariffDTO>>& CalculateTariffsOfferInfoDTO::getTariffs()
{
    return m_Tariffs;
}

void CalculateTariffsOfferInfoDTO::setTariffs(const std::vector<std::shared_ptr<CalculatedTariffDTO>>& value)
{
    m_Tariffs = value;
    m_TariffsIsSet = true;
}

bool CalculateTariffsOfferInfoDTO::tariffsIsSet() const
{
    return m_TariffsIsSet;
}

void CalculateTariffsOfferInfoDTO::unsetTariffs()
{
    m_TariffsIsSet = false;
}
}
}
}
}


