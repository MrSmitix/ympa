/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/SearchModelsResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SearchModelsResponse::SearchModelsResponse()
{
    m_ModelsIsSet = false;
    m_CurrencyIsSet = false;
    m_RegionId = 0L;
    m_RegionIdIsSet = false;
    m_PagerIsSet = false;
}

SearchModelsResponse::~SearchModelsResponse()
{
}

void SearchModelsResponse::validate()
{
    // TODO: implement validation
}

web::json::value SearchModelsResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ModelsIsSet)
    {
        val[utility::conversions::to_string_t(U("models"))] = ModelBase::toJson(m_Models);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_RegionIdIsSet)
    {
        val[utility::conversions::to_string_t(U("regionId"))] = ModelBase::toJson(m_RegionId);
    }
    if(m_PagerIsSet)
    {
        val[utility::conversions::to_string_t(U("pager"))] = ModelBase::toJson(m_Pager);
    }

    return val;
}

bool SearchModelsResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("models"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("models")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ModelDTO>> refVal_setModels;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModels);
            setModels(refVal_setModels);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CurrencyType> refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("regionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("regionId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRegionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegionId);
            setRegionId(refVal_setRegionId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pager"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pager")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FlippingPagerDTO> refVal_setPager;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPager);
            setPager(refVal_setPager);
        }
    }
    return ok;
}

void SearchModelsResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ModelsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("models")), m_Models));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_RegionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("regionId")), m_RegionId));
    }
    if(m_PagerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pager")), m_Pager));
    }
}

bool SearchModelsResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("models"))))
    {
        std::vector<std::shared_ptr<ModelDTO>> refVal_setModels;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("models"))), refVal_setModels );
        setModels(refVal_setModels);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        std::shared_ptr<CurrencyType> refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("regionId"))))
    {
        int64_t refVal_setRegionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("regionId"))), refVal_setRegionId );
        setRegionId(refVal_setRegionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pager"))))
    {
        std::shared_ptr<FlippingPagerDTO> refVal_setPager;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pager"))), refVal_setPager );
        setPager(refVal_setPager);
    }
    return ok;
}

std::vector<std::shared_ptr<ModelDTO>>& SearchModelsResponse::getModels()
{
    return m_Models;
}

void SearchModelsResponse::setModels(const std::vector<std::shared_ptr<ModelDTO>>& value)
{
    m_Models = value;
    m_ModelsIsSet = true;
}

bool SearchModelsResponse::modelsIsSet() const
{
    return m_ModelsIsSet;
}

void SearchModelsResponse::unsetModels()
{
    m_ModelsIsSet = false;
}
std::shared_ptr<CurrencyType> SearchModelsResponse::getCurrency() const
{
    return m_Currency;
}

void SearchModelsResponse::setCurrency(const std::shared_ptr<CurrencyType>& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool SearchModelsResponse::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void SearchModelsResponse::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
int64_t SearchModelsResponse::getRegionId() const
{
    return m_RegionId;
}

void SearchModelsResponse::setRegionId(int64_t value)
{
    m_RegionId = value;
    m_RegionIdIsSet = true;
}

bool SearchModelsResponse::regionIdIsSet() const
{
    return m_RegionIdIsSet;
}

void SearchModelsResponse::unsetRegionId()
{
    m_RegionIdIsSet = false;
}
std::shared_ptr<FlippingPagerDTO> SearchModelsResponse::getPager() const
{
    return m_Pager;
}

void SearchModelsResponse::setPager(const std::shared_ptr<FlippingPagerDTO>& value)
{
    m_Pager = value;
    m_PagerIsSet = true;
}

bool SearchModelsResponse::pagerIsSet() const
{
    return m_PagerIsSet;
}

void SearchModelsResponse::unsetPager()
{
    m_PagerIsSet = false;
}
}
}
}
}


