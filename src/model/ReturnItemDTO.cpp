/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/ReturnItemDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ReturnItemDTO::ReturnItemDTO()
{
    m_MarketSku = 0L;
    m_MarketSkuIsSet = false;
    m_ShopSku = utility::conversions::to_string_t("");
    m_ShopSkuIsSet = false;
    m_Count = 0L;
    m_CountIsSet = false;
    m_DecisionsIsSet = false;
    m_InstancesIsSet = false;
    m_TracksIsSet = false;
}

ReturnItemDTO::~ReturnItemDTO()
{
}

void ReturnItemDTO::validate()
{
    // TODO: implement validation
}

web::json::value ReturnItemDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MarketSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("marketSku"))] = ModelBase::toJson(m_MarketSku);
    }
    if(m_ShopSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("shopSku"))] = ModelBase::toJson(m_ShopSku);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_DecisionsIsSet)
    {
        val[utility::conversions::to_string_t(U("decisions"))] = ModelBase::toJson(m_Decisions);
    }
    if(m_InstancesIsSet)
    {
        val[utility::conversions::to_string_t(U("instances"))] = ModelBase::toJson(m_Instances);
    }
    if(m_TracksIsSet)
    {
        val[utility::conversions::to_string_t(U("tracks"))] = ModelBase::toJson(m_Tracks);
    }

    return val;
}

bool ReturnItemDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("marketSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("marketSku")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMarketSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMarketSku);
            setMarketSku(refVal_setMarketSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopSku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopSku);
            setShopSku(refVal_setShopSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("decisions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("decisions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReturnDecisionDTO>> refVal_setDecisions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDecisions);
            setDecisions(refVal_setDecisions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instances"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instances")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ReturnInstanceDTO>> refVal_setInstances;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstances);
            setInstances(refVal_setInstances);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tracks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tracks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TrackDTO>> refVal_setTracks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTracks);
            setTracks(refVal_setTracks);
        }
    }
    return ok;
}

void ReturnItemDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MarketSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("marketSku")), m_MarketSku));
    }
    if(m_ShopSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopSku")), m_ShopSku));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_DecisionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("decisions")), m_Decisions));
    }
    if(m_InstancesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instances")), m_Instances));
    }
    if(m_TracksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tracks")), m_Tracks));
    }
}

bool ReturnItemDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("marketSku"))))
    {
        int64_t refVal_setMarketSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("marketSku"))), refVal_setMarketSku );
        setMarketSku(refVal_setMarketSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopSku"))))
    {
        utility::string_t refVal_setShopSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopSku"))), refVal_setShopSku );
        setShopSku(refVal_setShopSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int64_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("decisions"))))
    {
        std::vector<std::shared_ptr<ReturnDecisionDTO>> refVal_setDecisions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("decisions"))), refVal_setDecisions );
        setDecisions(refVal_setDecisions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instances"))))
    {
        std::vector<std::shared_ptr<ReturnInstanceDTO>> refVal_setInstances;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instances"))), refVal_setInstances );
        setInstances(refVal_setInstances);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tracks"))))
    {
        std::vector<std::shared_ptr<TrackDTO>> refVal_setTracks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tracks"))), refVal_setTracks );
        setTracks(refVal_setTracks);
    }
    return ok;
}

int64_t ReturnItemDTO::getMarketSku() const
{
    return m_MarketSku;
}

void ReturnItemDTO::setMarketSku(int64_t value)
{
    m_MarketSku = value;
    m_MarketSkuIsSet = true;
}

bool ReturnItemDTO::marketSkuIsSet() const
{
    return m_MarketSkuIsSet;
}

void ReturnItemDTO::unsetMarketSku()
{
    m_MarketSkuIsSet = false;
}
utility::string_t ReturnItemDTO::getShopSku() const
{
    return m_ShopSku;
}

void ReturnItemDTO::setShopSku(const utility::string_t& value)
{
    m_ShopSku = value;
    m_ShopSkuIsSet = true;
}

bool ReturnItemDTO::shopSkuIsSet() const
{
    return m_ShopSkuIsSet;
}

void ReturnItemDTO::unsetShopSku()
{
    m_ShopSkuIsSet = false;
}
int64_t ReturnItemDTO::getCount() const
{
    return m_Count;
}

void ReturnItemDTO::setCount(int64_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool ReturnItemDTO::countIsSet() const
{
    return m_CountIsSet;
}

void ReturnItemDTO::unsetCount()
{
    m_CountIsSet = false;
}
std::vector<std::shared_ptr<ReturnDecisionDTO>>& ReturnItemDTO::getDecisions()
{
    return m_Decisions;
}

void ReturnItemDTO::setDecisions(const std::vector<std::shared_ptr<ReturnDecisionDTO>>& value)
{
    m_Decisions = value;
    m_DecisionsIsSet = true;
}

bool ReturnItemDTO::decisionsIsSet() const
{
    return m_DecisionsIsSet;
}

void ReturnItemDTO::unsetDecisions()
{
    m_DecisionsIsSet = false;
}
std::vector<std::shared_ptr<ReturnInstanceDTO>>& ReturnItemDTO::getInstances()
{
    return m_Instances;
}

void ReturnItemDTO::setInstances(const std::vector<std::shared_ptr<ReturnInstanceDTO>>& value)
{
    m_Instances = value;
    m_InstancesIsSet = true;
}

bool ReturnItemDTO::instancesIsSet() const
{
    return m_InstancesIsSet;
}

void ReturnItemDTO::unsetInstances()
{
    m_InstancesIsSet = false;
}
std::vector<std::shared_ptr<TrackDTO>>& ReturnItemDTO::getTracks()
{
    return m_Tracks;
}

void ReturnItemDTO::setTracks(const std::vector<std::shared_ptr<TrackDTO>>& value)
{
    m_Tracks = value;
    m_TracksIsSet = true;
}

bool ReturnItemDTO::tracksIsSet() const
{
    return m_TracksIsSet;
}

void ReturnItemDTO::unsetTracks()
{
    m_TracksIsSet = false;
}
}
}
}
}


