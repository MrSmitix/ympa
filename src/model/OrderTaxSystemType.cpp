/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderTaxSystemType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OrderTaxSystemType::eOrderTaxSystemType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("OSN")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_OSN;
    if (val == utility::conversions::to_string_t(U("USN")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_USN;
    if (val == utility::conversions::to_string_t(U("USN_MINUS_COST")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_USN_MINUS_COST;
    if (val == utility::conversions::to_string_t(U("ENVD")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_ENVD;
    if (val == utility::conversions::to_string_t(U("ECHN")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_ECHN;
    if (val == utility::conversions::to_string_t(U("PSN")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_PSN;
    if (val == utility::conversions::to_string_t(U("NPD")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_NPD;
    if (val == utility::conversions::to_string_t(U("UNKNOWN_VALUE")))
        return OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_UNKNOWN_VALUE;
    return {};
}

EnumUnderlyingType fromEnum(OrderTaxSystemType::eOrderTaxSystemType e)
{
    switch (e)
    {
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_OSN:
        return U("OSN");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_USN:
        return U("USN");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_USN_MINUS_COST:
        return U("USN_MINUS_COST");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_ENVD:
        return U("ENVD");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_ECHN:
        return U("ECHN");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_PSN:
        return U("PSN");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_NPD:
        return U("NPD");
    case OrderTaxSystemType::eOrderTaxSystemType::OrderTaxSystemType_UNKNOWN_VALUE:
        return U("UNKNOWN_VALUE");
    default:
        break;
    }
    return {};
}
}

OrderTaxSystemType::OrderTaxSystemType()
{
}

OrderTaxSystemType::~OrderTaxSystemType()
{
}

void OrderTaxSystemType::validate()
{
    // TODO: implement validation
}

web::json::value OrderTaxSystemType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrderTaxSystemType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrderTaxSystemType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrderTaxSystemType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrderTaxSystemType::eOrderTaxSystemType OrderTaxSystemType::getValue() const
{
   return m_value;
}

void OrderTaxSystemType::setValue(OrderTaxSystemType::eOrderTaxSystemType const value)
{
   m_value = value;
}


}
}
}
}


