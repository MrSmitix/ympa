/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReturnRequestDecisionType from './ReturnRequestDecisionType';

/**
 * The SetReturnDecisionRequest model module.
 * @module model/SetReturnDecisionRequest
 * @version LATEST
 */
class SetReturnDecisionRequest {
    /**
     * Constructs a new <code>SetReturnDecisionRequest</code>.
     * Решения по позиции в возврате.
     * @alias module:model/SetReturnDecisionRequest
     * @param returnItemId {Number} Идентификатор товара в возврате.
     * @param decisionType {module:model/ReturnRequestDecisionType} 
     */
    constructor(returnItemId, decisionType) { 
        
        SetReturnDecisionRequest.initialize(this, returnItemId, decisionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, returnItemId, decisionType) { 
        obj['returnItemId'] = returnItemId;
        obj['decisionType'] = decisionType;
    }

    /**
     * Constructs a <code>SetReturnDecisionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SetReturnDecisionRequest} obj Optional instance to populate.
     * @return {module:model/SetReturnDecisionRequest} The populated <code>SetReturnDecisionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SetReturnDecisionRequest();

            if (data.hasOwnProperty('returnItemId')) {
                obj['returnItemId'] = ApiClient.convertToType(data['returnItemId'], 'Number');
            }
            if (data.hasOwnProperty('decisionType')) {
                obj['decisionType'] = ReturnRequestDecisionType.constructFromObject(data['decisionType']);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SetReturnDecisionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SetReturnDecisionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SetReturnDecisionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}

SetReturnDecisionRequest.RequiredProperties = ["returnItemId", "decisionType"];

/**
 * Идентификатор товара в возврате.
 * @member {Number} returnItemId
 */
SetReturnDecisionRequest.prototype['returnItemId'] = undefined;

/**
 * @member {module:model/ReturnRequestDecisionType} decisionType
 */
SetReturnDecisionRequest.prototype['decisionType'] = undefined;

/**
 * Комментарий к решению. Укажите:  * для `REFUND_MONEY_INCLUDING_SHIPMENT`— стоимость обратной пересылки;  * для `REPAIR` — когда вы устраните недостатки товара;  * для `DECLINE_REFUND` — причину отказа;  * для `OTHER_DECISION` — какое решение вы предлагаете. 
 * @member {String} comment
 */
SetReturnDecisionRequest.prototype['comment'] = undefined;






export default SetReturnDecisionRequest;

