/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CalculateTariffsOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CalculateTariffsOfferDTO::CalculateTariffsOfferDTO()
{
    m_CategoryId = 0L;
    m_CategoryIdIsSet = false;
    m_Price = 0.0;
    m_PriceIsSet = false;
    m_Length = 0.0;
    m_LengthIsSet = false;
    m_Width = 0.0;
    m_WidthIsSet = false;
    m_Height = 0.0;
    m_HeightIsSet = false;
    m_Weight = 0.0;
    m_WeightIsSet = false;
    m_Quantity = 0;
    m_QuantityIsSet = false;
}

CalculateTariffsOfferDTO::~CalculateTariffsOfferDTO()
{
}

void CalculateTariffsOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value CalculateTariffsOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CategoryIdIsSet)
    {
        val[utility::conversions::to_string_t(U("categoryId"))] = ModelBase::toJson(m_CategoryId);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_LengthIsSet)
    {
        val[utility::conversions::to_string_t(U("length"))] = ModelBase::toJson(m_Length);
    }
    if(m_WidthIsSet)
    {
        val[utility::conversions::to_string_t(U("width"))] = ModelBase::toJson(m_Width);
    }
    if(m_HeightIsSet)
    {
        val[utility::conversions::to_string_t(U("height"))] = ModelBase::toJson(m_Height);
    }
    if(m_WeightIsSet)
    {
        val[utility::conversions::to_string_t(U("weight"))] = ModelBase::toJson(m_Weight);
    }
    if(m_QuantityIsSet)
    {
        val[utility::conversions::to_string_t(U("quantity"))] = ModelBase::toJson(m_Quantity);
    }

    return val;
}

bool CalculateTariffsOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("categoryId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("categoryId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCategoryId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategoryId);
            setCategoryId(refVal_setCategoryId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            double refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("length"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("length")));
        if(!fieldValue.is_null())
        {
            double refVal_setLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLength);
            setLength(refVal_setLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("width"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("width")));
        if(!fieldValue.is_null())
        {
            double refVal_setWidth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWidth);
            setWidth(refVal_setWidth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("height"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("height")));
        if(!fieldValue.is_null())
        {
            double refVal_setHeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeight);
            setHeight(refVal_setHeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weight")));
        if(!fieldValue.is_null())
        {
            double refVal_setWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeight);
            setWeight(refVal_setWeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQuantity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantity);
            setQuantity(refVal_setQuantity);
        }
    }
    return ok;
}

void CalculateTariffsOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CategoryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("categoryId")), m_CategoryId));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_LengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("length")), m_Length));
    }
    if(m_WidthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("width")), m_Width));
    }
    if(m_HeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("height")), m_Height));
    }
    if(m_WeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weight")), m_Weight));
    }
    if(m_QuantityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantity")), m_Quantity));
    }
}

bool CalculateTariffsOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("categoryId"))))
    {
        int64_t refVal_setCategoryId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("categoryId"))), refVal_setCategoryId );
        setCategoryId(refVal_setCategoryId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        double refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("length"))))
    {
        double refVal_setLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("length"))), refVal_setLength );
        setLength(refVal_setLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("width"))))
    {
        double refVal_setWidth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("width"))), refVal_setWidth );
        setWidth(refVal_setWidth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("height"))))
    {
        double refVal_setHeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("height"))), refVal_setHeight );
        setHeight(refVal_setHeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weight"))))
    {
        double refVal_setWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weight"))), refVal_setWeight );
        setWeight(refVal_setWeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantity"))))
    {
        int32_t refVal_setQuantity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantity"))), refVal_setQuantity );
        setQuantity(refVal_setQuantity);
    }
    return ok;
}

int64_t CalculateTariffsOfferDTO::getCategoryId() const
{
    return m_CategoryId;
}

void CalculateTariffsOfferDTO::setCategoryId(int64_t value)
{
    m_CategoryId = value;
    m_CategoryIdIsSet = true;
}

bool CalculateTariffsOfferDTO::categoryIdIsSet() const
{
    return m_CategoryIdIsSet;
}

void CalculateTariffsOfferDTO::unsetCategoryId()
{
    m_CategoryIdIsSet = false;
}
double CalculateTariffsOfferDTO::getPrice() const
{
    return m_Price;
}

void CalculateTariffsOfferDTO::setPrice(double value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool CalculateTariffsOfferDTO::priceIsSet() const
{
    return m_PriceIsSet;
}

void CalculateTariffsOfferDTO::unsetPrice()
{
    m_PriceIsSet = false;
}
double CalculateTariffsOfferDTO::getLength() const
{
    return m_Length;
}

void CalculateTariffsOfferDTO::setLength(double value)
{
    m_Length = value;
    m_LengthIsSet = true;
}

bool CalculateTariffsOfferDTO::lengthIsSet() const
{
    return m_LengthIsSet;
}

void CalculateTariffsOfferDTO::unsetLength()
{
    m_LengthIsSet = false;
}
double CalculateTariffsOfferDTO::getWidth() const
{
    return m_Width;
}

void CalculateTariffsOfferDTO::setWidth(double value)
{
    m_Width = value;
    m_WidthIsSet = true;
}

bool CalculateTariffsOfferDTO::widthIsSet() const
{
    return m_WidthIsSet;
}

void CalculateTariffsOfferDTO::unsetWidth()
{
    m_WidthIsSet = false;
}
double CalculateTariffsOfferDTO::getHeight() const
{
    return m_Height;
}

void CalculateTariffsOfferDTO::setHeight(double value)
{
    m_Height = value;
    m_HeightIsSet = true;
}

bool CalculateTariffsOfferDTO::heightIsSet() const
{
    return m_HeightIsSet;
}

void CalculateTariffsOfferDTO::unsetHeight()
{
    m_HeightIsSet = false;
}
double CalculateTariffsOfferDTO::getWeight() const
{
    return m_Weight;
}

void CalculateTariffsOfferDTO::setWeight(double value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}

bool CalculateTariffsOfferDTO::weightIsSet() const
{
    return m_WeightIsSet;
}

void CalculateTariffsOfferDTO::unsetWeight()
{
    m_WeightIsSet = false;
}
int32_t CalculateTariffsOfferDTO::getQuantity() const
{
    return m_Quantity;
}

void CalculateTariffsOfferDTO::setQuantity(int32_t value)
{
    m_Quantity = value;
    m_QuantityIsSet = true;
}

bool CalculateTariffsOfferDTO::quantityIsSet() const
{
    return m_QuantityIsSet;
}

void CalculateTariffsOfferDTO::unsetQuantity()
{
    m_QuantityIsSet = false;
}
}
}
}
}


