/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoodsFeedbackCommentAuthorDTO from './GoodsFeedbackCommentAuthorDTO';
import GoodsFeedbackCommentStatusType from './GoodsFeedbackCommentStatusType';

/**
 * The GoodsFeedbackCommentDTO model module.
 * @module model/GoodsFeedbackCommentDTO
 * @version LATEST
 */
class GoodsFeedbackCommentDTO {
    /**
     * Constructs a new <code>GoodsFeedbackCommentDTO</code>.
     * Комментарий к отзыву.
     * @alias module:model/GoodsFeedbackCommentDTO
     * @param id {Number} Идентификатор комментария к отзыву. 
     * @param text {String} Текст комментария.
     * @param author {module:model/GoodsFeedbackCommentAuthorDTO} 
     * @param status {module:model/GoodsFeedbackCommentStatusType} 
     */
    constructor(id, text, author, status) { 
        
        GoodsFeedbackCommentDTO.initialize(this, id, text, author, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, text, author, status) { 
        obj['id'] = id;
        obj['text'] = text;
        obj['author'] = author;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>GoodsFeedbackCommentDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoodsFeedbackCommentDTO} obj Optional instance to populate.
     * @return {module:model/GoodsFeedbackCommentDTO} The populated <code>GoodsFeedbackCommentDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoodsFeedbackCommentDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('canModify')) {
                obj['canModify'] = ApiClient.convertToType(data['canModify'], 'Boolean');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = GoodsFeedbackCommentAuthorDTO.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = GoodsFeedbackCommentStatusType.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoodsFeedbackCommentDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoodsFeedbackCommentDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GoodsFeedbackCommentDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          GoodsFeedbackCommentAuthorDTO.validateJSON(data['author']);
        }

        return true;
    }


}

GoodsFeedbackCommentDTO.RequiredProperties = ["id", "text", "author", "status"];

/**
 * Идентификатор комментария к отзыву. 
 * @member {Number} id
 */
GoodsFeedbackCommentDTO.prototype['id'] = undefined;

/**
 * Текст комментария.
 * @member {String} text
 */
GoodsFeedbackCommentDTO.prototype['text'] = undefined;

/**
 * Может ли продавец изменять комментарий или удалять его.
 * @member {Boolean} canModify
 */
GoodsFeedbackCommentDTO.prototype['canModify'] = undefined;

/**
 * Идентификатор комментария к отзыву. 
 * @member {Number} parentId
 */
GoodsFeedbackCommentDTO.prototype['parentId'] = undefined;

/**
 * @member {module:model/GoodsFeedbackCommentAuthorDTO} author
 */
GoodsFeedbackCommentDTO.prototype['author'] = undefined;

/**
 * @member {module:model/GoodsFeedbackCommentStatusType} status
 */
GoodsFeedbackCommentDTO.prototype['status'] = undefined;






export default GoodsFeedbackCommentDTO;

