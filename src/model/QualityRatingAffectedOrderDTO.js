/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AffectedOrderQualityRatingComponentType from './AffectedOrderQualityRatingComponentType';

/**
 * The QualityRatingAffectedOrderDTO model module.
 * @module model/QualityRatingAffectedOrderDTO
 * @version LATEST
 */
class QualityRatingAffectedOrderDTO {
    /**
     * @member {Number} orderId
     * @type {Number}
     */
    orderId;
    /**
     * @member {String} description
     * @type {String}
     */
    description;
    /**
     * @member {module:model/AffectedOrderQualityRatingComponentType} componentType
     * @type {module:model/AffectedOrderQualityRatingComponentType}
     */
    componentType;

    

    /**
     * Constructs a new <code>QualityRatingAffectedOrderDTO</code>.
     * Информация о заказе, который повлиял на индекс качества.
     * @alias module:model/QualityRatingAffectedOrderDTO
     * @param orderId {Number} Идентификатор заказа.
     * @param description {String} Описание проблемы.
     * @param componentType {module:model/AffectedOrderQualityRatingComponentType} 
     */
    constructor(orderId, description, componentType) { 
        
        QualityRatingAffectedOrderDTO.initialize(this, orderId, description, componentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderId, description, componentType) { 
        obj['orderId'] = orderId;
        obj['description'] = description;
        obj['componentType'] = componentType;
    }

    /**
     * Constructs a <code>QualityRatingAffectedOrderDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QualityRatingAffectedOrderDTO} obj Optional instance to populate.
     * @return {module:model/QualityRatingAffectedOrderDTO} The populated <code>QualityRatingAffectedOrderDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QualityRatingAffectedOrderDTO();

            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('componentType')) {
                obj['componentType'] = AffectedOrderQualityRatingComponentType.constructFromObject(data['componentType']);
            }
        }
        return obj;
    }
}



export default QualityRatingAffectedOrderDTO;

