/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrdersStatsCommissionType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OrdersStatsCommissionType::eOrdersStatsCommissionType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("FEE")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_FEE;
    if (val == utility::conversions::to_string_t(U("FULFILLMENT")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_FULFILLMENT;
    if (val == utility::conversions::to_string_t(U("LOYALTY_PARTICIPATION_FEE")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_LOYALTY_PARTICIPATION_FEE;
    if (val == utility::conversions::to_string_t(U("AUCTION_PROMOTION")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_AUCTION_PROMOTION;
    if (val == utility::conversions::to_string_t(U("INSTALLMENT")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_INSTALLMENT;
    if (val == utility::conversions::to_string_t(U("DELIVERY_TO_CUSTOMER")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_DELIVERY_TO_CUSTOMER;
    if (val == utility::conversions::to_string_t(U("EXPRESS_DELIVERY_TO_CUSTOMER")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_EXPRESS_DELIVERY_TO_CUSTOMER;
    if (val == utility::conversions::to_string_t(U("AGENCY")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_AGENCY;
    if (val == utility::conversions::to_string_t(U("PAYMENT_TRANSFER")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_PAYMENT_TRANSFER;
    if (val == utility::conversions::to_string_t(U("RETURNED_ORDERS_STORAGE")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_RETURNED_ORDERS_STORAGE;
    if (val == utility::conversions::to_string_t(U("SORTING")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_SORTING;
    if (val == utility::conversions::to_string_t(U("INTAKE_SORTING")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_INTAKE_SORTING;
    if (val == utility::conversions::to_string_t(U("RETURN_PROCESSING")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_RETURN_PROCESSING;
    if (val == utility::conversions::to_string_t(U("ILLIQUID_GOODS_SALE")))
        return OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_ILLIQUID_GOODS_SALE;
    return {};
}

EnumUnderlyingType fromEnum(OrdersStatsCommissionType::eOrdersStatsCommissionType e)
{
    switch (e)
    {
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_FEE:
        return U("FEE");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_FULFILLMENT:
        return U("FULFILLMENT");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_LOYALTY_PARTICIPATION_FEE:
        return U("LOYALTY_PARTICIPATION_FEE");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_AUCTION_PROMOTION:
        return U("AUCTION_PROMOTION");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_INSTALLMENT:
        return U("INSTALLMENT");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_DELIVERY_TO_CUSTOMER:
        return U("DELIVERY_TO_CUSTOMER");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_EXPRESS_DELIVERY_TO_CUSTOMER:
        return U("EXPRESS_DELIVERY_TO_CUSTOMER");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_AGENCY:
        return U("AGENCY");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_PAYMENT_TRANSFER:
        return U("PAYMENT_TRANSFER");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_RETURNED_ORDERS_STORAGE:
        return U("RETURNED_ORDERS_STORAGE");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_SORTING:
        return U("SORTING");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_INTAKE_SORTING:
        return U("INTAKE_SORTING");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_RETURN_PROCESSING:
        return U("RETURN_PROCESSING");
    case OrdersStatsCommissionType::eOrdersStatsCommissionType::OrdersStatsCommissionType_ILLIQUID_GOODS_SALE:
        return U("ILLIQUID_GOODS_SALE");
    default:
        break;
    }
    return {};
}
}

OrdersStatsCommissionType::OrdersStatsCommissionType()
{
}

OrdersStatsCommissionType::~OrdersStatsCommissionType()
{
}

void OrdersStatsCommissionType::validate()
{
    // TODO: implement validation
}

web::json::value OrdersStatsCommissionType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OrdersStatsCommissionType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OrdersStatsCommissionType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OrdersStatsCommissionType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OrdersStatsCommissionType::eOrdersStatsCommissionType OrdersStatsCommissionType::getValue() const
{
   return m_value;
}

void OrdersStatsCommissionType::setValue(OrdersStatsCommissionType::eOrdersStatsCommissionType const value)
{
   m_value = value;
}


}
}
}
}


