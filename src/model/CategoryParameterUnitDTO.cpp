/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CategoryParameterUnitDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CategoryParameterUnitDTO::CategoryParameterUnitDTO()
{
    m_DefaultUnitId = 0L;
    m_DefaultUnitIdIsSet = false;
    m_UnitsIsSet = false;
}

CategoryParameterUnitDTO::~CategoryParameterUnitDTO()
{
}

void CategoryParameterUnitDTO::validate()
{
    // TODO: implement validation
}

web::json::value CategoryParameterUnitDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DefaultUnitIdIsSet)
    {
        val[utility::conversions::to_string_t(U("defaultUnitId"))] = ModelBase::toJson(m_DefaultUnitId);
    }
    if(m_UnitsIsSet)
    {
        val[utility::conversions::to_string_t(U("units"))] = ModelBase::toJson(m_Units);
    }

    return val;
}

bool CategoryParameterUnitDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("defaultUnitId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultUnitId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDefaultUnitId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultUnitId);
            setDefaultUnitId(refVal_setDefaultUnitId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("units"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("units")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UnitDTO>> refVal_setUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnits);
            setUnits(refVal_setUnits);
        }
    }
    return ok;
}

void CategoryParameterUnitDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DefaultUnitIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultUnitId")), m_DefaultUnitId));
    }
    if(m_UnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("units")), m_Units));
    }
}

bool CategoryParameterUnitDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultUnitId"))))
    {
        int64_t refVal_setDefaultUnitId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultUnitId"))), refVal_setDefaultUnitId );
        setDefaultUnitId(refVal_setDefaultUnitId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("units"))))
    {
        std::vector<std::shared_ptr<UnitDTO>> refVal_setUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("units"))), refVal_setUnits );
        setUnits(refVal_setUnits);
    }
    return ok;
}

int64_t CategoryParameterUnitDTO::getDefaultUnitId() const
{
    return m_DefaultUnitId;
}

void CategoryParameterUnitDTO::setDefaultUnitId(int64_t value)
{
    m_DefaultUnitId = value;
    m_DefaultUnitIdIsSet = true;
}

bool CategoryParameterUnitDTO::defaultUnitIdIsSet() const
{
    return m_DefaultUnitIdIsSet;
}

void CategoryParameterUnitDTO::unsetDefaultUnitId()
{
    m_DefaultUnitIdIsSet = false;
}
std::vector<std::shared_ptr<UnitDTO>>& CategoryParameterUnitDTO::getUnits()
{
    return m_Units;
}

void CategoryParameterUnitDTO::setUnits(const std::vector<std::shared_ptr<UnitDTO>>& value)
{
    m_Units = value;
    m_UnitsIsSet = true;
}

bool CategoryParameterUnitDTO::unitsIsSet() const
{
    return m_UnitsIsSet;
}

void CategoryParameterUnitDTO::unsetUnits()
{
    m_UnitsIsSet = false;
}
}
}
}
}


