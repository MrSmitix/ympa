/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/CampaignSettingsScheduleDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CampaignSettingsScheduleDTO::CampaignSettingsScheduleDTO()
{
    m_AvailableOnHolidays = false;
    m_AvailableOnHolidaysIsSet = false;
    m_CustomHolidaysIsSet = false;
    m_CustomWorkingDaysIsSet = false;
    m_PeriodIsSet = false;
    m_TotalHolidaysIsSet = false;
    m_WeeklyHolidaysIsSet = false;
}

CampaignSettingsScheduleDTO::~CampaignSettingsScheduleDTO()
{
}

void CampaignSettingsScheduleDTO::validate()
{
    // TODO: implement validation
}

web::json::value CampaignSettingsScheduleDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AvailableOnHolidaysIsSet)
    {
        val[utility::conversions::to_string_t(U("availableOnHolidays"))] = ModelBase::toJson(m_AvailableOnHolidays);
    }
    if(m_CustomHolidaysIsSet)
    {
        val[utility::conversions::to_string_t(U("customHolidays"))] = ModelBase::toJson(m_CustomHolidays);
    }
    if(m_CustomWorkingDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("customWorkingDays"))] = ModelBase::toJson(m_CustomWorkingDays);
    }
    if(m_PeriodIsSet)
    {
        val[utility::conversions::to_string_t(U("period"))] = ModelBase::toJson(m_Period);
    }
    if(m_TotalHolidaysIsSet)
    {
        val[utility::conversions::to_string_t(U("totalHolidays"))] = ModelBase::toJson(m_TotalHolidays);
    }
    if(m_WeeklyHolidaysIsSet)
    {
        val[utility::conversions::to_string_t(U("weeklyHolidays"))] = ModelBase::toJson(m_WeeklyHolidays);
    }

    return val;
}

bool CampaignSettingsScheduleDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("availableOnHolidays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availableOnHolidays")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAvailableOnHolidays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailableOnHolidays);
            setAvailableOnHolidays(refVal_setAvailableOnHolidays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customHolidays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customHolidays")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setCustomHolidays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomHolidays);
            setCustomHolidays(refVal_setCustomHolidays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customWorkingDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customWorkingDays")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setCustomWorkingDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomWorkingDays);
            setCustomWorkingDays(refVal_setCustomWorkingDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("period")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CampaignSettingsTimePeriodDTO> refVal_setPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriod);
            setPeriod(refVal_setPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalHolidays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalHolidays")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setTotalHolidays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalHolidays);
            setTotalHolidays(refVal_setTotalHolidays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weeklyHolidays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weeklyHolidays")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setWeeklyHolidays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeeklyHolidays);
            setWeeklyHolidays(refVal_setWeeklyHolidays);
        }
    }
    return ok;
}

void CampaignSettingsScheduleDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AvailableOnHolidaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availableOnHolidays")), m_AvailableOnHolidays));
    }
    if(m_CustomHolidaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customHolidays")), m_CustomHolidays));
    }
    if(m_CustomWorkingDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customWorkingDays")), m_CustomWorkingDays));
    }
    if(m_PeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("period")), m_Period));
    }
    if(m_TotalHolidaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalHolidays")), m_TotalHolidays));
    }
    if(m_WeeklyHolidaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weeklyHolidays")), m_WeeklyHolidays));
    }
}

bool CampaignSettingsScheduleDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("availableOnHolidays"))))
    {
        bool refVal_setAvailableOnHolidays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availableOnHolidays"))), refVal_setAvailableOnHolidays );
        setAvailableOnHolidays(refVal_setAvailableOnHolidays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customHolidays"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setCustomHolidays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customHolidays"))), refVal_setCustomHolidays );
        setCustomHolidays(refVal_setCustomHolidays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customWorkingDays"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setCustomWorkingDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customWorkingDays"))), refVal_setCustomWorkingDays );
        setCustomWorkingDays(refVal_setCustomWorkingDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("period"))))
    {
        std::shared_ptr<CampaignSettingsTimePeriodDTO> refVal_setPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("period"))), refVal_setPeriod );
        setPeriod(refVal_setPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalHolidays"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setTotalHolidays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalHolidays"))), refVal_setTotalHolidays );
        setTotalHolidays(refVal_setTotalHolidays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weeklyHolidays"))))
    {
        std::vector<int32_t> refVal_setWeeklyHolidays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weeklyHolidays"))), refVal_setWeeklyHolidays );
        setWeeklyHolidays(refVal_setWeeklyHolidays);
    }
    return ok;
}

bool CampaignSettingsScheduleDTO::isAvailableOnHolidays() const
{
    return m_AvailableOnHolidays;
}

void CampaignSettingsScheduleDTO::setAvailableOnHolidays(bool value)
{
    m_AvailableOnHolidays = value;
    m_AvailableOnHolidaysIsSet = true;
}

bool CampaignSettingsScheduleDTO::availableOnHolidaysIsSet() const
{
    return m_AvailableOnHolidaysIsSet;
}

void CampaignSettingsScheduleDTO::unsetAvailableOnHolidays()
{
    m_AvailableOnHolidaysIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& CampaignSettingsScheduleDTO::getCustomHolidays()
{
    return m_CustomHolidays;
}

void CampaignSettingsScheduleDTO::setCustomHolidays(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_CustomHolidays = value;
    m_CustomHolidaysIsSet = true;
}

bool CampaignSettingsScheduleDTO::customHolidaysIsSet() const
{
    return m_CustomHolidaysIsSet;
}

void CampaignSettingsScheduleDTO::unsetCustomHolidays()
{
    m_CustomHolidaysIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& CampaignSettingsScheduleDTO::getCustomWorkingDays()
{
    return m_CustomWorkingDays;
}

void CampaignSettingsScheduleDTO::setCustomWorkingDays(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_CustomWorkingDays = value;
    m_CustomWorkingDaysIsSet = true;
}

bool CampaignSettingsScheduleDTO::customWorkingDaysIsSet() const
{
    return m_CustomWorkingDaysIsSet;
}

void CampaignSettingsScheduleDTO::unsetCustomWorkingDays()
{
    m_CustomWorkingDaysIsSet = false;
}
std::shared_ptr<CampaignSettingsTimePeriodDTO> CampaignSettingsScheduleDTO::getPeriod() const
{
    return m_Period;
}

void CampaignSettingsScheduleDTO::setPeriod(const std::shared_ptr<CampaignSettingsTimePeriodDTO>& value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}

bool CampaignSettingsScheduleDTO::periodIsSet() const
{
    return m_PeriodIsSet;
}

void CampaignSettingsScheduleDTO::unsetPeriod()
{
    m_PeriodIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& CampaignSettingsScheduleDTO::getTotalHolidays()
{
    return m_TotalHolidays;
}

void CampaignSettingsScheduleDTO::setTotalHolidays(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_TotalHolidays = value;
    m_TotalHolidaysIsSet = true;
}

bool CampaignSettingsScheduleDTO::totalHolidaysIsSet() const
{
    return m_TotalHolidaysIsSet;
}

void CampaignSettingsScheduleDTO::unsetTotalHolidays()
{
    m_TotalHolidaysIsSet = false;
}
std::vector<int32_t>& CampaignSettingsScheduleDTO::getWeeklyHolidays()
{
    return m_WeeklyHolidays;
}

void CampaignSettingsScheduleDTO::setWeeklyHolidays(std::vector<int32_t> value)
{
    m_WeeklyHolidays = value;
    m_WeeklyHolidaysIsSet = true;
}

bool CampaignSettingsScheduleDTO::weeklyHolidaysIsSet() const
{
    return m_WeeklyHolidaysIsSet;
}

void CampaignSettingsScheduleDTO::unsetWeeklyHolidays()
{
    m_WeeklyHolidaysIsSet = false;
}
}
}
}
}


