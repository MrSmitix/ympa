/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/WarehouseOffersDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



WarehouseOffersDTO::WarehouseOffersDTO()
{
    m_WarehouseId = 0L;
    m_WarehouseIdIsSet = false;
    m_OffersIsSet = false;
}

WarehouseOffersDTO::~WarehouseOffersDTO()
{
}

void WarehouseOffersDTO::validate()
{
    // TODO: implement validation
}

web::json::value WarehouseOffersDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WarehouseIdIsSet)
    {
        val[utility::conversions::to_string_t(U("warehouseId"))] = ModelBase::toJson(m_WarehouseId);
    }
    if(m_OffersIsSet)
    {
        val[utility::conversions::to_string_t(U("offers"))] = ModelBase::toJson(m_Offers);
    }

    return val;
}

bool WarehouseOffersDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("warehouseId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warehouseId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setWarehouseId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarehouseId);
            setWarehouseId(refVal_setWarehouseId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WarehouseOfferDTO>> refVal_setOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffers);
            setOffers(refVal_setOffers);
        }
    }
    return ok;
}

void WarehouseOffersDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WarehouseIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warehouseId")), m_WarehouseId));
    }
    if(m_OffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offers")), m_Offers));
    }
}

bool WarehouseOffersDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("warehouseId"))))
    {
        int64_t refVal_setWarehouseId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warehouseId"))), refVal_setWarehouseId );
        setWarehouseId(refVal_setWarehouseId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offers"))))
    {
        std::vector<std::shared_ptr<WarehouseOfferDTO>> refVal_setOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offers"))), refVal_setOffers );
        setOffers(refVal_setOffers);
    }
    return ok;
}

int64_t WarehouseOffersDTO::getWarehouseId() const
{
    return m_WarehouseId;
}

void WarehouseOffersDTO::setWarehouseId(int64_t value)
{
    m_WarehouseId = value;
    m_WarehouseIdIsSet = true;
}

bool WarehouseOffersDTO::warehouseIdIsSet() const
{
    return m_WarehouseIdIsSet;
}

void WarehouseOffersDTO::unsetWarehouseId()
{
    m_WarehouseIdIsSet = false;
}
std::vector<std::shared_ptr<WarehouseOfferDTO>>& WarehouseOffersDTO::getOffers()
{
    return m_Offers;
}

void WarehouseOffersDTO::setOffers(const std::vector<std::shared_ptr<WarehouseOfferDTO>>& value)
{
    m_Offers = value;
    m_OffersIsSet = true;
}

bool WarehouseOffersDTO::offersIsSet() const
{
    return m_OffersIsSet;
}

void WarehouseOffersDTO::unsetOffers()
{
    m_OffersIsSet = false;
}
}
}
}
}


