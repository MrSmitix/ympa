/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OutletType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

OutletType::eOutletType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("DEPOT")))
        return OutletType::eOutletType::OutletType_DEPOT;
    if (val == utility::conversions::to_string_t(U("MIXED")))
        return OutletType::eOutletType::OutletType_MIXED;
    if (val == utility::conversions::to_string_t(U("RETAIL")))
        return OutletType::eOutletType::OutletType_RETAIL;
    if (val == utility::conversions::to_string_t(U("NOT_DEFINED")))
        return OutletType::eOutletType::OutletType_NOT_DEFINED;
    return {};
}

EnumUnderlyingType fromEnum(OutletType::eOutletType e)
{
    switch (e)
    {
    case OutletType::eOutletType::OutletType_DEPOT:
        return U("DEPOT");
    case OutletType::eOutletType::OutletType_MIXED:
        return U("MIXED");
    case OutletType::eOutletType::OutletType_RETAIL:
        return U("RETAIL");
    case OutletType::eOutletType::OutletType_NOT_DEFINED:
        return U("NOT_DEFINED");
    default:
        break;
    }
    return {};
}
}

OutletType::OutletType()
{
}

OutletType::~OutletType()
{
}

void OutletType::validate()
{
    // TODO: implement validation
}

web::json::value OutletType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool OutletType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void OutletType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool OutletType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

OutletType::eOutletType OutletType::getValue() const
{
   return m_value;
}

void OutletType::setValue(OutletType::eOutletType const value)
{
   m_value = value;
}


}
}
}
}


