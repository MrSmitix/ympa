/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/PriceQuarantineVerdictDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PriceQuarantineVerdictDTO::PriceQuarantineVerdictDTO()
{
    m_TypeIsSet = false;
    m_ParamsIsSet = false;
}

PriceQuarantineVerdictDTO::~PriceQuarantineVerdictDTO()
{
}

void PriceQuarantineVerdictDTO::validate()
{
    // TODO: implement validation
}

web::json::value PriceQuarantineVerdictDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_ParamsIsSet)
    {
        val[utility::conversions::to_string_t(U("params"))] = ModelBase::toJson(m_Params);
    }

    return val;
}

bool PriceQuarantineVerdictDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PriceQuarantineVerdictType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("params"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("params")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PriceQuarantineVerdictParameterDTO>> refVal_setParams;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParams);
            setParams(refVal_setParams);
        }
    }
    return ok;
}

void PriceQuarantineVerdictDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_ParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("params")), m_Params));
    }
}

bool PriceQuarantineVerdictDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<PriceQuarantineVerdictType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("params"))))
    {
        std::vector<std::shared_ptr<PriceQuarantineVerdictParameterDTO>> refVal_setParams;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("params"))), refVal_setParams );
        setParams(refVal_setParams);
    }
    return ok;
}

std::shared_ptr<PriceQuarantineVerdictType> PriceQuarantineVerdictDTO::getType() const
{
    return m_Type;
}

void PriceQuarantineVerdictDTO::setType(const std::shared_ptr<PriceQuarantineVerdictType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool PriceQuarantineVerdictDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void PriceQuarantineVerdictDTO::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<std::shared_ptr<PriceQuarantineVerdictParameterDTO>>& PriceQuarantineVerdictDTO::getParams()
{
    return m_Params;
}

void PriceQuarantineVerdictDTO::setParams(const std::vector<std::shared_ptr<PriceQuarantineVerdictParameterDTO>>& value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}

bool PriceQuarantineVerdictDTO::paramsIsSet() const
{
    return m_ParamsIsSet;
}

void PriceQuarantineVerdictDTO::unsetParams()
{
    m_ParamsIsSet = false;
}
}
}
}
}


