/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelDTO from './ModelDTO';
import ModelOfferDTO from './ModelOfferDTO';
import ModelPriceDTO from './ModelPriceDTO';

/**
 * The EnrichedModelDTO model module.
 * @module model/EnrichedModelDTO
 * @version LATEST
 */
class EnrichedModelDTO {
    /**
     * Constructs a new <code>EnrichedModelDTO</code>.
     * Модель товара.
     * @alias module:model/EnrichedModelDTO
     * @implements module:model/ModelDTO
     */
    constructor() { 
        ModelDTO.initialize(this);
        EnrichedModelDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EnrichedModelDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EnrichedModelDTO} obj Optional instance to populate.
     * @return {module:model/EnrichedModelDTO} The populated <code>EnrichedModelDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EnrichedModelDTO();
            ModelDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('prices')) {
                obj['prices'] = ModelPriceDTO.constructFromObject(data['prices']);
            }
            if (data.hasOwnProperty('offers')) {
                obj['offers'] = ApiClient.convertToType(data['offers'], [ModelOfferDTO]);
            }
            if (data.hasOwnProperty('offlineOffers')) {
                obj['offlineOffers'] = ApiClient.convertToType(data['offlineOffers'], 'Number');
            }
            if (data.hasOwnProperty('onlineOffers')) {
                obj['onlineOffers'] = ApiClient.convertToType(data['onlineOffers'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EnrichedModelDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EnrichedModelDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `prices`
        if (data['prices']) { // data not null
          ModelPriceDTO.validateJSON(data['prices']);
        }
        if (data['offers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offers'])) {
                throw new Error("Expected the field `offers` to be an array in the JSON data but got " + data['offers']);
            }
            // validate the optional field `offers` (array)
            for (const item of data['offers']) {
                ModelOfferDTO.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Идентификатор модели товара.
 * @member {Number} id
 */
EnrichedModelDTO.prototype['id'] = undefined;

/**
 * Название модели товара.
 * @member {String} name
 */
EnrichedModelDTO.prototype['name'] = undefined;

/**
 * @member {module:model/ModelPriceDTO} prices
 */
EnrichedModelDTO.prototype['prices'] = undefined;

/**
 * Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
 * @member {Array.<module:model/ModelOfferDTO>} offers
 */
EnrichedModelDTO.prototype['offers'] = undefined;

/**
 * Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
 * @member {Number} offlineOffers
 */
EnrichedModelDTO.prototype['offlineOffers'] = undefined;

/**
 * Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
 * @member {Number} onlineOffers
 */
EnrichedModelDTO.prototype['onlineOffers'] = undefined;


// Implement ModelDTO interface:
/**
 * Идентификатор модели товара.
 * @member {Number} id
 */
ModelDTO.prototype['id'] = undefined;
/**
 * Название модели товара.
 * @member {String} name
 */
ModelDTO.prototype['name'] = undefined;
/**
 * @member {module:model/ModelPriceDTO} prices
 */
ModelDTO.prototype['prices'] = undefined;




export default EnrichedModelDTO;

