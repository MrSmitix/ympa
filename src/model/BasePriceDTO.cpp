/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/BasePriceDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BasePriceDTO::BasePriceDTO()
{
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_CurrencyIdIsSet = false;
}

BasePriceDTO::~BasePriceDTO()
{
}

void BasePriceDTO::validate()
{
    // TODO: implement validation
}

web::json::value BasePriceDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_CurrencyIdIsSet)
    {
        val[utility::conversions::to_string_t(U("currencyId"))] = ModelBase::toJson(m_CurrencyId);
    }

    return val;
}

bool BasePriceDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            double refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currencyId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currencyId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CurrencyType> refVal_setCurrencyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrencyId);
            setCurrencyId(refVal_setCurrencyId);
        }
    }
    return ok;
}

void BasePriceDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_CurrencyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currencyId")), m_CurrencyId));
    }
}

bool BasePriceDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        double refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currencyId"))))
    {
        std::shared_ptr<CurrencyType> refVal_setCurrencyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currencyId"))), refVal_setCurrencyId );
        setCurrencyId(refVal_setCurrencyId);
    }
    return ok;
}

double BasePriceDTO::getValue() const
{
    return m_Value;
}

void BasePriceDTO::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool BasePriceDTO::valueIsSet() const
{
    return m_ValueIsSet;
}

void BasePriceDTO::unsetValue()
{
    m_ValueIsSet = false;
}
std::shared_ptr<CurrencyType> BasePriceDTO::getCurrencyId() const
{
    return m_CurrencyId;
}

void BasePriceDTO::setCurrencyId(const std::shared_ptr<CurrencyType>& value)
{
    m_CurrencyId = value;
    m_CurrencyIdIsSet = true;
}

bool BasePriceDTO::currencyIdIsSet() const
{
    return m_CurrencyIdIsSet;
}

void BasePriceDTO::unsetCurrencyId()
{
    m_CurrencyIdIsSet = false;
}
}
}
}
}


