/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedIndexLogsErrorDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedIndexLogsErrorDTO::FeedIndexLogsErrorDTO()
{
    m_HttpStatusCode = 0;
    m_HttpStatusCodeIsSet = false;
    m_TypeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
}

FeedIndexLogsErrorDTO::~FeedIndexLogsErrorDTO()
{
}

void FeedIndexLogsErrorDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedIndexLogsErrorDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HttpStatusCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("httpStatusCode"))] = ModelBase::toJson(m_HttpStatusCode);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }

    return val;
}

bool FeedIndexLogsErrorDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("httpStatusCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("httpStatusCode")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHttpStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHttpStatusCode);
            setHttpStatusCode(refVal_setHttpStatusCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedIndexLogsErrorType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    return ok;
}

void FeedIndexLogsErrorDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HttpStatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("httpStatusCode")), m_HttpStatusCode));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
}

bool FeedIndexLogsErrorDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("httpStatusCode"))))
    {
        int32_t refVal_setHttpStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("httpStatusCode"))), refVal_setHttpStatusCode );
        setHttpStatusCode(refVal_setHttpStatusCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<FeedIndexLogsErrorType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    return ok;
}

int32_t FeedIndexLogsErrorDTO::getHttpStatusCode() const
{
    return m_HttpStatusCode;
}

void FeedIndexLogsErrorDTO::setHttpStatusCode(int32_t value)
{
    m_HttpStatusCode = value;
    m_HttpStatusCodeIsSet = true;
}

bool FeedIndexLogsErrorDTO::httpStatusCodeIsSet() const
{
    return m_HttpStatusCodeIsSet;
}

void FeedIndexLogsErrorDTO::unsetHttpStatusCode()
{
    m_HttpStatusCodeIsSet = false;
}
std::shared_ptr<FeedIndexLogsErrorType> FeedIndexLogsErrorDTO::getType() const
{
    return m_Type;
}

void FeedIndexLogsErrorDTO::setType(const std::shared_ptr<FeedIndexLogsErrorType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool FeedIndexLogsErrorDTO::typeIsSet() const
{
    return m_TypeIsSet;
}

void FeedIndexLogsErrorDTO::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t FeedIndexLogsErrorDTO::getDescription() const
{
    return m_Description;
}

void FeedIndexLogsErrorDTO::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool FeedIndexLogsErrorDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void FeedIndexLogsErrorDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
}
}
}
}


