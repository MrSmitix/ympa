/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DayOfWeekType from './DayOfWeekType';
import MappingsOfferInfoDTO from './MappingsOfferInfoDTO';
import OfferAvailabilityStatusType from './OfferAvailabilityStatusType';
import OfferProcessingStateDTO from './OfferProcessingStateDTO';
import OfferWeightDimensionsDTO from './OfferWeightDimensionsDTO';
import TimePeriodDTO from './TimePeriodDTO';

/**
 * The UpdateMappingsOfferDTO model module.
 * @module model/UpdateMappingsOfferDTO
 * @version LATEST
 */
class UpdateMappingsOfferDTO {
    /**
     * Constructs a new <code>UpdateMappingsOfferDTO</code>.
     * Информация о товарах в каталоге.
     * @alias module:model/UpdateMappingsOfferDTO
     * @implements module:model/MappingsOfferInfoDTO
     */
    constructor() { 
        MappingsOfferInfoDTO.initialize(this);
        UpdateMappingsOfferDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateMappingsOfferDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateMappingsOfferDTO} obj Optional instance to populate.
     * @return {module:model/UpdateMappingsOfferDTO} The populated <code>UpdateMappingsOfferDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateMappingsOfferDTO();
            MappingsOfferInfoDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('shopSku')) {
                obj['shopSku'] = ApiClient.convertToType(data['shopSku'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
            if (data.hasOwnProperty('vendorCode')) {
                obj['vendorCode'] = ApiClient.convertToType(data['vendorCode'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('feedId')) {
                obj['feedId'] = ApiClient.convertToType(data['feedId'], 'Number');
            }
            if (data.hasOwnProperty('barcodes')) {
                obj['barcodes'] = ApiClient.convertToType(data['barcodes'], ['String']);
            }
            if (data.hasOwnProperty('urls')) {
                obj['urls'] = ApiClient.convertToType(data['urls'], ['String']);
            }
            if (data.hasOwnProperty('pictures')) {
                obj['pictures'] = ApiClient.convertToType(data['pictures'], ['String']);
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('manufacturerCountries')) {
                obj['manufacturerCountries'] = ApiClient.convertToType(data['manufacturerCountries'], ['String']);
            }
            if (data.hasOwnProperty('minShipment')) {
                obj['minShipment'] = ApiClient.convertToType(data['minShipment'], 'Number');
            }
            if (data.hasOwnProperty('transportUnitSize')) {
                obj['transportUnitSize'] = ApiClient.convertToType(data['transportUnitSize'], 'Number');
            }
            if (data.hasOwnProperty('quantumOfSupply')) {
                obj['quantumOfSupply'] = ApiClient.convertToType(data['quantumOfSupply'], 'Number');
            }
            if (data.hasOwnProperty('deliveryDurationDays')) {
                obj['deliveryDurationDays'] = ApiClient.convertToType(data['deliveryDurationDays'], 'Number');
            }
            if (data.hasOwnProperty('boxCount')) {
                obj['boxCount'] = ApiClient.convertToType(data['boxCount'], 'Number');
            }
            if (data.hasOwnProperty('customsCommodityCodes')) {
                obj['customsCommodityCodes'] = ApiClient.convertToType(data['customsCommodityCodes'], ['String']);
            }
            if (data.hasOwnProperty('weightDimensions')) {
                obj['weightDimensions'] = OfferWeightDimensionsDTO.constructFromObject(data['weightDimensions']);
            }
            if (data.hasOwnProperty('supplyScheduleDays')) {
                obj['supplyScheduleDays'] = ApiClient.convertToType(data['supplyScheduleDays'], [DayOfWeekType]);
            }
            if (data.hasOwnProperty('shelfLifeDays')) {
                obj['shelfLifeDays'] = ApiClient.convertToType(data['shelfLifeDays'], 'Number');
            }
            if (data.hasOwnProperty('lifeTimeDays')) {
                obj['lifeTimeDays'] = ApiClient.convertToType(data['lifeTimeDays'], 'Number');
            }
            if (data.hasOwnProperty('guaranteePeriodDays')) {
                obj['guaranteePeriodDays'] = ApiClient.convertToType(data['guaranteePeriodDays'], 'Number');
            }
            if (data.hasOwnProperty('processingState')) {
                obj['processingState'] = OfferProcessingStateDTO.constructFromObject(data['processingState']);
            }
            if (data.hasOwnProperty('availability')) {
                obj['availability'] = OfferAvailabilityStatusType.constructFromObject(data['availability']);
            }
            if (data.hasOwnProperty('shelfLife')) {
                obj['shelfLife'] = TimePeriodDTO.constructFromObject(data['shelfLife']);
            }
            if (data.hasOwnProperty('lifeTime')) {
                obj['lifeTime'] = TimePeriodDTO.constructFromObject(data['lifeTime']);
            }
            if (data.hasOwnProperty('guaranteePeriod')) {
                obj['guaranteePeriod'] = TimePeriodDTO.constructFromObject(data['guaranteePeriod']);
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateMappingsOfferDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateMappingsOfferDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['shopSku'] && !(typeof data['shopSku'] === 'string' || data['shopSku'] instanceof String)) {
            throw new Error("Expected the field `shopSku` to be a primitive type in the JSON string but got " + data['shopSku']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }
        // ensure the json data is a string
        if (data['vendorCode'] && !(typeof data['vendorCode'] === 'string' || data['vendorCode'] instanceof String)) {
            throw new Error("Expected the field `vendorCode` to be a primitive type in the JSON string but got " + data['vendorCode']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['barcodes'])) {
            throw new Error("Expected the field `barcodes` to be an array in the JSON data but got " + data['barcodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['urls'])) {
            throw new Error("Expected the field `urls` to be an array in the JSON data but got " + data['urls']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pictures'])) {
            throw new Error("Expected the field `pictures` to be an array in the JSON data but got " + data['pictures']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['manufacturerCountries'])) {
            throw new Error("Expected the field `manufacturerCountries` to be an array in the JSON data but got " + data['manufacturerCountries']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customsCommodityCodes'])) {
            throw new Error("Expected the field `customsCommodityCodes` to be an array in the JSON data but got " + data['customsCommodityCodes']);
        }
        // validate the optional field `weightDimensions`
        if (data['weightDimensions']) { // data not null
          OfferWeightDimensionsDTO.validateJSON(data['weightDimensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supplyScheduleDays'])) {
            throw new Error("Expected the field `supplyScheduleDays` to be an array in the JSON data but got " + data['supplyScheduleDays']);
        }
        // validate the optional field `processingState`
        if (data['processingState']) { // data not null
          OfferProcessingStateDTO.validateJSON(data['processingState']);
        }
        // validate the optional field `shelfLife`
        if (data['shelfLife']) { // data not null
          TimePeriodDTO.validateJSON(data['shelfLife']);
        }
        // validate the optional field `lifeTime`
        if (data['lifeTime']) { // data not null
          TimePeriodDTO.validateJSON(data['lifeTime']);
        }
        // validate the optional field `guaranteePeriod`
        if (data['guaranteePeriod']) { // data not null
          TimePeriodDTO.validateJSON(data['guaranteePeriod']);
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }

        return true;
    }


}



/**
 * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
 * @member {String} name
 */
UpdateMappingsOfferDTO.prototype['name'] = undefined;

/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} shopSku
 */
UpdateMappingsOfferDTO.prototype['shopSku'] = undefined;

/**
 * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
 * @member {String} category
 */
UpdateMappingsOfferDTO.prototype['category'] = undefined;

/**
 * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
 * @member {String} vendor
 */
UpdateMappingsOfferDTO.prototype['vendor'] = undefined;

/**
 * Артикул товара от производителя.
 * @member {String} vendorCode
 */
UpdateMappingsOfferDTO.prototype['vendorCode'] = undefined;

/**
 * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
 * @member {String} description
 */
UpdateMappingsOfferDTO.prototype['description'] = undefined;

/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} id
 */
UpdateMappingsOfferDTO.prototype['id'] = undefined;

/**
 * Идентификатор фида.
 * @member {Number} feedId
 */
UpdateMappingsOfferDTO.prototype['feedId'] = undefined;

/**
 * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
 * @member {Array.<String>} barcodes
 */
UpdateMappingsOfferDTO.prototype['barcodes'] = undefined;

/**
 * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
 * @member {Array.<String>} urls
 */
UpdateMappingsOfferDTO.prototype['urls'] = undefined;

/**
 * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
 * @member {Array.<String>} pictures
 */
UpdateMappingsOfferDTO.prototype['pictures'] = undefined;

/**
 * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
 * @member {String} manufacturer
 */
UpdateMappingsOfferDTO.prototype['manufacturer'] = undefined;

/**
 * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
 * @member {Array.<String>} manufacturerCountries
 */
UpdateMappingsOfferDTO.prototype['manufacturerCountries'] = undefined;

/**
 * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
 * @member {Number} minShipment
 */
UpdateMappingsOfferDTO.prototype['minShipment'] = undefined;

/**
 * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
 * @member {Number} transportUnitSize
 */
UpdateMappingsOfferDTO.prototype['transportUnitSize'] = undefined;

/**
 * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
 * @member {Number} quantumOfSupply
 */
UpdateMappingsOfferDTO.prototype['quantumOfSupply'] = undefined;

/**
 * Срок, за который продавец поставляет товары на склад, в днях.
 * @member {Number} deliveryDurationDays
 */
UpdateMappingsOfferDTO.prototype['deliveryDurationDays'] = undefined;

/**
 * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
 * @member {Number} boxCount
 */
UpdateMappingsOfferDTO.prototype['boxCount'] = undefined;

/**
 * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
 * @member {Array.<String>} customsCommodityCodes
 */
UpdateMappingsOfferDTO.prototype['customsCommodityCodes'] = undefined;

/**
 * @member {module:model/OfferWeightDimensionsDTO} weightDimensions
 */
UpdateMappingsOfferDTO.prototype['weightDimensions'] = undefined;

/**
 * Дни недели, в которые продавец поставляет товары на склад.
 * @member {Array.<module:model/DayOfWeekType>} supplyScheduleDays
 */
UpdateMappingsOfferDTO.prototype['supplyScheduleDays'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
 * @member {Number} shelfLifeDays
 */
UpdateMappingsOfferDTO.prototype['shelfLifeDays'] = undefined;

/**
 * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
 * @member {Number} lifeTimeDays
 */
UpdateMappingsOfferDTO.prototype['lifeTimeDays'] = undefined;

/**
 * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
 * @member {Number} guaranteePeriodDays
 */
UpdateMappingsOfferDTO.prototype['guaranteePeriodDays'] = undefined;

/**
 * @member {module:model/OfferProcessingStateDTO} processingState
 */
UpdateMappingsOfferDTO.prototype['processingState'] = undefined;

/**
 * @member {module:model/OfferAvailabilityStatusType} availability
 */
UpdateMappingsOfferDTO.prototype['availability'] = undefined;

/**
 * @member {module:model/TimePeriodDTO} shelfLife
 */
UpdateMappingsOfferDTO.prototype['shelfLife'] = undefined;

/**
 * @member {module:model/TimePeriodDTO} lifeTime
 */
UpdateMappingsOfferDTO.prototype['lifeTime'] = undefined;

/**
 * @member {module:model/TimePeriodDTO} guaranteePeriod
 */
UpdateMappingsOfferDTO.prototype['guaranteePeriod'] = undefined;

/**
 * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
 * @member {String} certificate
 */
UpdateMappingsOfferDTO.prototype['certificate'] = undefined;


// Implement MappingsOfferInfoDTO interface:
/**
 * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
 * @member {String} name
 */
MappingsOfferInfoDTO.prototype['name'] = undefined;
/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} shopSku
 */
MappingsOfferInfoDTO.prototype['shopSku'] = undefined;
/**
 * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
 * @member {String} category
 */
MappingsOfferInfoDTO.prototype['category'] = undefined;
/**
 * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
 * @member {String} vendor
 */
MappingsOfferInfoDTO.prototype['vendor'] = undefined;
/**
 * Артикул товара от производителя.
 * @member {String} vendorCode
 */
MappingsOfferInfoDTO.prototype['vendorCode'] = undefined;
/**
 * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
 * @member {String} description
 */
MappingsOfferInfoDTO.prototype['description'] = undefined;
/**
 * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
 * @member {String} id
 */
MappingsOfferInfoDTO.prototype['id'] = undefined;
/**
 * Идентификатор фида.
 * @member {Number} feedId
 */
MappingsOfferInfoDTO.prototype['feedId'] = undefined;
/**
 * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
 * @member {Array.<String>} barcodes
 */
MappingsOfferInfoDTO.prototype['barcodes'] = undefined;
/**
 * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
 * @member {Array.<String>} urls
 */
MappingsOfferInfoDTO.prototype['urls'] = undefined;
/**
 * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
 * @member {Array.<String>} pictures
 */
MappingsOfferInfoDTO.prototype['pictures'] = undefined;
/**
 * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
 * @member {String} manufacturer
 */
MappingsOfferInfoDTO.prototype['manufacturer'] = undefined;
/**
 * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
 * @member {Array.<String>} manufacturerCountries
 */
MappingsOfferInfoDTO.prototype['manufacturerCountries'] = undefined;
/**
 * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
 * @member {Number} minShipment
 */
MappingsOfferInfoDTO.prototype['minShipment'] = undefined;
/**
 * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
 * @member {Number} transportUnitSize
 */
MappingsOfferInfoDTO.prototype['transportUnitSize'] = undefined;
/**
 * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
 * @member {Number} quantumOfSupply
 */
MappingsOfferInfoDTO.prototype['quantumOfSupply'] = undefined;
/**
 * Срок, за который продавец поставляет товары на склад, в днях.
 * @member {Number} deliveryDurationDays
 */
MappingsOfferInfoDTO.prototype['deliveryDurationDays'] = undefined;
/**
 * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
 * @member {Number} boxCount
 */
MappingsOfferInfoDTO.prototype['boxCount'] = undefined;
/**
 * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
 * @member {Array.<String>} customsCommodityCodes
 */
MappingsOfferInfoDTO.prototype['customsCommodityCodes'] = undefined;
/**
 * @member {module:model/OfferWeightDimensionsDTO} weightDimensions
 */
MappingsOfferInfoDTO.prototype['weightDimensions'] = undefined;
/**
 * Дни недели, в которые продавец поставляет товары на склад.
 * @member {Array.<module:model/DayOfWeekType>} supplyScheduleDays
 */
MappingsOfferInfoDTO.prototype['supplyScheduleDays'] = undefined;
/**
 * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
 * @member {Number} shelfLifeDays
 */
MappingsOfferInfoDTO.prototype['shelfLifeDays'] = undefined;
/**
 * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
 * @member {Number} lifeTimeDays
 */
MappingsOfferInfoDTO.prototype['lifeTimeDays'] = undefined;
/**
 * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
 * @member {Number} guaranteePeriodDays
 */
MappingsOfferInfoDTO.prototype['guaranteePeriodDays'] = undefined;
/**
 * @member {module:model/OfferProcessingStateDTO} processingState
 */
MappingsOfferInfoDTO.prototype['processingState'] = undefined;
/**
 * @member {module:model/OfferAvailabilityStatusType} availability
 */
MappingsOfferInfoDTO.prototype['availability'] = undefined;
/**
 * @member {module:model/TimePeriodDTO} shelfLife
 */
MappingsOfferInfoDTO.prototype['shelfLife'] = undefined;
/**
 * @member {module:model/TimePeriodDTO} lifeTime
 */
MappingsOfferInfoDTO.prototype['lifeTime'] = undefined;
/**
 * @member {module:model/TimePeriodDTO} guaranteePeriod
 */
MappingsOfferInfoDTO.prototype['guaranteePeriod'] = undefined;
/**
 * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
 * @member {String} certificate
 */
MappingsOfferInfoDTO.prototype['certificate'] = undefined;




export default UpdateMappingsOfferDTO;

