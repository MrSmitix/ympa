/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/QuarantineOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QuarantineOfferDTO::QuarantineOfferDTO()
{
    m_OfferId = utility::conversions::to_string_t("");
    m_OfferIdIsSet = false;
    m_CurrentPriceIsSet = false;
    m_LastValidPriceIsSet = false;
    m_VerdictsIsSet = false;
}

QuarantineOfferDTO::~QuarantineOfferDTO()
{
}

void QuarantineOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value QuarantineOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_OfferIdIsSet)
    {
        val[utility::conversions::to_string_t(U("offerId"))] = ModelBase::toJson(m_OfferId);
    }
    if(m_CurrentPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("currentPrice"))] = ModelBase::toJson(m_CurrentPrice);
    }
    if(m_LastValidPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("lastValidPrice"))] = ModelBase::toJson(m_LastValidPrice);
    }
    if(m_VerdictsIsSet)
    {
        val[utility::conversions::to_string_t(U("verdicts"))] = ModelBase::toJson(m_Verdicts);
    }

    return val;
}

bool QuarantineOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("offerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfferId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfferId);
            setOfferId(refVal_setOfferId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currentPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currentPrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setCurrentPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentPrice);
            setCurrentPrice(refVal_setCurrentPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastValidPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastValidPrice")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<BasePriceDTO> refVal_setLastValidPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastValidPrice);
            setLastValidPrice(refVal_setLastValidPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verdicts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verdicts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<PriceQuarantineVerdictDTO>> refVal_setVerdicts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVerdicts);
            setVerdicts(refVal_setVerdicts);
        }
    }
    return ok;
}

void QuarantineOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_OfferIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offerId")), m_OfferId));
    }
    if(m_CurrentPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currentPrice")), m_CurrentPrice));
    }
    if(m_LastValidPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastValidPrice")), m_LastValidPrice));
    }
    if(m_VerdictsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verdicts")), m_Verdicts));
    }
}

bool QuarantineOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("offerId"))))
    {
        utility::string_t refVal_setOfferId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offerId"))), refVal_setOfferId );
        setOfferId(refVal_setOfferId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currentPrice"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setCurrentPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currentPrice"))), refVal_setCurrentPrice );
        setCurrentPrice(refVal_setCurrentPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastValidPrice"))))
    {
        std::shared_ptr<BasePriceDTO> refVal_setLastValidPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastValidPrice"))), refVal_setLastValidPrice );
        setLastValidPrice(refVal_setLastValidPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verdicts"))))
    {
        std::vector<std::shared_ptr<PriceQuarantineVerdictDTO>> refVal_setVerdicts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verdicts"))), refVal_setVerdicts );
        setVerdicts(refVal_setVerdicts);
    }
    return ok;
}

utility::string_t QuarantineOfferDTO::getOfferId() const
{
    return m_OfferId;
}

void QuarantineOfferDTO::setOfferId(const utility::string_t& value)
{
    m_OfferId = value;
    m_OfferIdIsSet = true;
}

bool QuarantineOfferDTO::offerIdIsSet() const
{
    return m_OfferIdIsSet;
}

void QuarantineOfferDTO::unsetOfferId()
{
    m_OfferIdIsSet = false;
}
std::shared_ptr<BasePriceDTO> QuarantineOfferDTO::getCurrentPrice() const
{
    return m_CurrentPrice;
}

void QuarantineOfferDTO::setCurrentPrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_CurrentPrice = value;
    m_CurrentPriceIsSet = true;
}

bool QuarantineOfferDTO::currentPriceIsSet() const
{
    return m_CurrentPriceIsSet;
}

void QuarantineOfferDTO::unsetCurrentPrice()
{
    m_CurrentPriceIsSet = false;
}
std::shared_ptr<BasePriceDTO> QuarantineOfferDTO::getLastValidPrice() const
{
    return m_LastValidPrice;
}

void QuarantineOfferDTO::setLastValidPrice(const std::shared_ptr<BasePriceDTO>& value)
{
    m_LastValidPrice = value;
    m_LastValidPriceIsSet = true;
}

bool QuarantineOfferDTO::lastValidPriceIsSet() const
{
    return m_LastValidPriceIsSet;
}

void QuarantineOfferDTO::unsetLastValidPrice()
{
    m_LastValidPriceIsSet = false;
}
std::vector<std::shared_ptr<PriceQuarantineVerdictDTO>>& QuarantineOfferDTO::getVerdicts()
{
    return m_Verdicts;
}

void QuarantineOfferDTO::setVerdicts(const std::vector<std::shared_ptr<PriceQuarantineVerdictDTO>>& value)
{
    m_Verdicts = value;
    m_VerdictsIsSet = true;
}

bool QuarantineOfferDTO::verdictsIsSet() const
{
    return m_VerdictsIsSet;
}

void QuarantineOfferDTO::unsetVerdicts()
{
    m_VerdictsIsSet = false;
}
}
}
}
}


