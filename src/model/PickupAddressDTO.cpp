/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/PickupAddressDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PickupAddressDTO::PickupAddressDTO()
{
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_House = utility::conversions::to_string_t("");
    m_HouseIsSet = false;
    m_Postcode = utility::conversions::to_string_t("");
    m_PostcodeIsSet = false;
}

PickupAddressDTO::~PickupAddressDTO()
{
}

void PickupAddressDTO::validate()
{
    // TODO: implement validation
}

web::json::value PickupAddressDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t(U("country"))] = ModelBase::toJson(m_Country);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t(U("street"))] = ModelBase::toJson(m_Street);
    }
    if(m_HouseIsSet)
    {
        val[utility::conversions::to_string_t(U("house"))] = ModelBase::toJson(m_House);
    }
    if(m_PostcodeIsSet)
    {
        val[utility::conversions::to_string_t(U("postcode"))] = ModelBase::toJson(m_Postcode);
    }

    return val;
}

bool PickupAddressDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("country"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("country")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountry);
            setCountry(refVal_setCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("street"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("street")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStreet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStreet);
            setStreet(refVal_setStreet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("house"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("house")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHouse;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHouse);
            setHouse(refVal_setHouse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postcode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postcode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPostcode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostcode);
            setPostcode(refVal_setPostcode);
        }
    }
    return ok;
}

void PickupAddressDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("country")), m_Country));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("street")), m_Street));
    }
    if(m_HouseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("house")), m_House));
    }
    if(m_PostcodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postcode")), m_Postcode));
    }
}

bool PickupAddressDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("country"))))
    {
        utility::string_t refVal_setCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("country"))), refVal_setCountry );
        setCountry(refVal_setCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("street"))))
    {
        utility::string_t refVal_setStreet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("street"))), refVal_setStreet );
        setStreet(refVal_setStreet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("house"))))
    {
        utility::string_t refVal_setHouse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("house"))), refVal_setHouse );
        setHouse(refVal_setHouse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postcode"))))
    {
        utility::string_t refVal_setPostcode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postcode"))), refVal_setPostcode );
        setPostcode(refVal_setPostcode);
    }
    return ok;
}

utility::string_t PickupAddressDTO::getCountry() const
{
    return m_Country;
}

void PickupAddressDTO::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool PickupAddressDTO::countryIsSet() const
{
    return m_CountryIsSet;
}

void PickupAddressDTO::unsetCountry()
{
    m_CountryIsSet = false;
}
utility::string_t PickupAddressDTO::getCity() const
{
    return m_City;
}

void PickupAddressDTO::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool PickupAddressDTO::cityIsSet() const
{
    return m_CityIsSet;
}

void PickupAddressDTO::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t PickupAddressDTO::getStreet() const
{
    return m_Street;
}

void PickupAddressDTO::setStreet(const utility::string_t& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}

bool PickupAddressDTO::streetIsSet() const
{
    return m_StreetIsSet;
}

void PickupAddressDTO::unsetStreet()
{
    m_StreetIsSet = false;
}
utility::string_t PickupAddressDTO::getHouse() const
{
    return m_House;
}

void PickupAddressDTO::setHouse(const utility::string_t& value)
{
    m_House = value;
    m_HouseIsSet = true;
}

bool PickupAddressDTO::houseIsSet() const
{
    return m_HouseIsSet;
}

void PickupAddressDTO::unsetHouse()
{
    m_HouseIsSet = false;
}
utility::string_t PickupAddressDTO::getPostcode() const
{
    return m_Postcode;
}

void PickupAddressDTO::setPostcode(const utility::string_t& value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}

bool PickupAddressDTO::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}

void PickupAddressDTO::unsetPostcode()
{
    m_PostcodeIsSet = false;
}
}
}
}
}


