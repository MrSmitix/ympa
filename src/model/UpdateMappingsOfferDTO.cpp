/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/UpdateMappingsOfferDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UpdateMappingsOfferDTO::UpdateMappingsOfferDTO()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_ShopSku = utility::conversions::to_string_t("");
    m_ShopSkuIsSet = false;
    m_Category = utility::conversions::to_string_t("");
    m_CategoryIsSet = false;
    m_Vendor = utility::conversions::to_string_t("");
    m_VendorIsSet = false;
    m_VendorCode = utility::conversions::to_string_t("");
    m_VendorCodeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_FeedId = 0L;
    m_FeedIdIsSet = false;
    m_BarcodesIsSet = false;
    m_UrlsIsSet = false;
    m_PicturesIsSet = false;
    m_Manufacturer = utility::conversions::to_string_t("");
    m_ManufacturerIsSet = false;
    m_ManufacturerCountriesIsSet = false;
    m_MinShipment = 0;
    m_MinShipmentIsSet = false;
    m_TransportUnitSize = 0;
    m_TransportUnitSizeIsSet = false;
    m_QuantumOfSupply = 0;
    m_QuantumOfSupplyIsSet = false;
    m_DeliveryDurationDays = 0;
    m_DeliveryDurationDaysIsSet = false;
    m_BoxCount = 0;
    m_BoxCountIsSet = false;
    m_CustomsCommodityCodesIsSet = false;
    m_WeightDimensionsIsSet = false;
    m_SupplyScheduleDaysIsSet = false;
    m_ShelfLifeDays = 0;
    m_ShelfLifeDaysIsSet = false;
    m_LifeTimeDays = 0;
    m_LifeTimeDaysIsSet = false;
    m_GuaranteePeriodDays = 0;
    m_GuaranteePeriodDaysIsSet = false;
    m_ProcessingStateIsSet = false;
    m_AvailabilityIsSet = false;
    m_ShelfLifeIsSet = false;
    m_LifeTimeIsSet = false;
    m_GuaranteePeriodIsSet = false;
    m_Certificate = utility::conversions::to_string_t("");
    m_CertificateIsSet = false;
}

UpdateMappingsOfferDTO::~UpdateMappingsOfferDTO()
{
}

void UpdateMappingsOfferDTO::validate()
{
    // TODO: implement validation
}

web::json::value UpdateMappingsOfferDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_ShopSkuIsSet)
    {
        val[utility::conversions::to_string_t(U("shopSku"))] = ModelBase::toJson(m_ShopSku);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }
    if(m_VendorIsSet)
    {
        val[utility::conversions::to_string_t(U("vendor"))] = ModelBase::toJson(m_Vendor);
    }
    if(m_VendorCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("vendorCode"))] = ModelBase::toJson(m_VendorCode);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_FeedIdIsSet)
    {
        val[utility::conversions::to_string_t(U("feedId"))] = ModelBase::toJson(m_FeedId);
    }
    if(m_BarcodesIsSet)
    {
        val[utility::conversions::to_string_t(U("barcodes"))] = ModelBase::toJson(m_Barcodes);
    }
    if(m_UrlsIsSet)
    {
        val[utility::conversions::to_string_t(U("urls"))] = ModelBase::toJson(m_Urls);
    }
    if(m_PicturesIsSet)
    {
        val[utility::conversions::to_string_t(U("pictures"))] = ModelBase::toJson(m_Pictures);
    }
    if(m_ManufacturerIsSet)
    {
        val[utility::conversions::to_string_t(U("manufacturer"))] = ModelBase::toJson(m_Manufacturer);
    }
    if(m_ManufacturerCountriesIsSet)
    {
        val[utility::conversions::to_string_t(U("manufacturerCountries"))] = ModelBase::toJson(m_ManufacturerCountries);
    }
    if(m_MinShipmentIsSet)
    {
        val[utility::conversions::to_string_t(U("minShipment"))] = ModelBase::toJson(m_MinShipment);
    }
    if(m_TransportUnitSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("transportUnitSize"))] = ModelBase::toJson(m_TransportUnitSize);
    }
    if(m_QuantumOfSupplyIsSet)
    {
        val[utility::conversions::to_string_t(U("quantumOfSupply"))] = ModelBase::toJson(m_QuantumOfSupply);
    }
    if(m_DeliveryDurationDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryDurationDays"))] = ModelBase::toJson(m_DeliveryDurationDays);
    }
    if(m_BoxCountIsSet)
    {
        val[utility::conversions::to_string_t(U("boxCount"))] = ModelBase::toJson(m_BoxCount);
    }
    if(m_CustomsCommodityCodesIsSet)
    {
        val[utility::conversions::to_string_t(U("customsCommodityCodes"))] = ModelBase::toJson(m_CustomsCommodityCodes);
    }
    if(m_WeightDimensionsIsSet)
    {
        val[utility::conversions::to_string_t(U("weightDimensions"))] = ModelBase::toJson(m_WeightDimensions);
    }
    if(m_SupplyScheduleDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("supplyScheduleDays"))] = ModelBase::toJson(m_SupplyScheduleDays);
    }
    if(m_ShelfLifeDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("shelfLifeDays"))] = ModelBase::toJson(m_ShelfLifeDays);
    }
    if(m_LifeTimeDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("lifeTimeDays"))] = ModelBase::toJson(m_LifeTimeDays);
    }
    if(m_GuaranteePeriodDaysIsSet)
    {
        val[utility::conversions::to_string_t(U("guaranteePeriodDays"))] = ModelBase::toJson(m_GuaranteePeriodDays);
    }
    if(m_ProcessingStateIsSet)
    {
        val[utility::conversions::to_string_t(U("processingState"))] = ModelBase::toJson(m_ProcessingState);
    }
    if(m_AvailabilityIsSet)
    {
        val[utility::conversions::to_string_t(U("availability"))] = ModelBase::toJson(m_Availability);
    }
    if(m_ShelfLifeIsSet)
    {
        val[utility::conversions::to_string_t(U("shelfLife"))] = ModelBase::toJson(m_ShelfLife);
    }
    if(m_LifeTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("lifeTime"))] = ModelBase::toJson(m_LifeTime);
    }
    if(m_GuaranteePeriodIsSet)
    {
        val[utility::conversions::to_string_t(U("guaranteePeriod"))] = ModelBase::toJson(m_GuaranteePeriod);
    }
    if(m_CertificateIsSet)
    {
        val[utility::conversions::to_string_t(U("certificate"))] = ModelBase::toJson(m_Certificate);
    }

    return val;
}

bool UpdateMappingsOfferDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shopSku"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shopSku")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShopSku;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShopSku);
            setShopSku(refVal_setShopSku);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendor")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendor);
            setVendor(refVal_setVendor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vendorCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vendorCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVendorCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVendorCode);
            setVendorCode(refVal_setVendorCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("feedId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feedId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setFeedId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedId);
            setFeedId(refVal_setFeedId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("barcodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("barcodes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBarcodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBarcodes);
            setBarcodes(refVal_setBarcodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("urls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("urls")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrls);
            setUrls(refVal_setUrls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pictures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pictures")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPictures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPictures);
            setPictures(refVal_setPictures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("manufacturer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("manufacturer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setManufacturer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setManufacturer);
            setManufacturer(refVal_setManufacturer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("manufacturerCountries"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("manufacturerCountries")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setManufacturerCountries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setManufacturerCountries);
            setManufacturerCountries(refVal_setManufacturerCountries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minShipment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minShipment")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinShipment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinShipment);
            setMinShipment(refVal_setMinShipment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transportUnitSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transportUnitSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTransportUnitSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransportUnitSize);
            setTransportUnitSize(refVal_setTransportUnitSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("quantumOfSupply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("quantumOfSupply")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQuantumOfSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuantumOfSupply);
            setQuantumOfSupply(refVal_setQuantumOfSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryDurationDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryDurationDays")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDeliveryDurationDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryDurationDays);
            setDeliveryDurationDays(refVal_setDeliveryDurationDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boxCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boxCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBoxCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoxCount);
            setBoxCount(refVal_setBoxCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customsCommodityCodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customsCommodityCodes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCustomsCommodityCodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomsCommodityCodes);
            setCustomsCommodityCodes(refVal_setCustomsCommodityCodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weightDimensions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weightDimensions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferWeightDimensionsDTO> refVal_setWeightDimensions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeightDimensions);
            setWeightDimensions(refVal_setWeightDimensions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supplyScheduleDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supplyScheduleDays")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DayOfWeekType>> refVal_setSupplyScheduleDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupplyScheduleDays);
            setSupplyScheduleDays(refVal_setSupplyScheduleDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shelfLifeDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shelfLifeDays")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setShelfLifeDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShelfLifeDays);
            setShelfLifeDays(refVal_setShelfLifeDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lifeTimeDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lifeTimeDays")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLifeTimeDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLifeTimeDays);
            setLifeTimeDays(refVal_setLifeTimeDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("guaranteePeriodDays"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("guaranteePeriodDays")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGuaranteePeriodDays;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGuaranteePeriodDays);
            setGuaranteePeriodDays(refVal_setGuaranteePeriodDays);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("processingState"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("processingState")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferProcessingStateDTO> refVal_setProcessingState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProcessingState);
            setProcessingState(refVal_setProcessingState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availability"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availability")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OfferAvailabilityStatusType> refVal_setAvailability;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailability);
            setAvailability(refVal_setAvailability);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shelfLife"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shelfLife")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimePeriodDTO> refVal_setShelfLife;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShelfLife);
            setShelfLife(refVal_setShelfLife);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lifeTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lifeTime")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimePeriodDTO> refVal_setLifeTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLifeTime);
            setLifeTime(refVal_setLifeTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("guaranteePeriod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("guaranteePeriod")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TimePeriodDTO> refVal_setGuaranteePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGuaranteePeriod);
            setGuaranteePeriod(refVal_setGuaranteePeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("certificate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("certificate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCertificate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCertificate);
            setCertificate(refVal_setCertificate);
        }
    }
    return ok;
}

void UpdateMappingsOfferDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_ShopSkuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shopSku")), m_ShopSku));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
    if(m_VendorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendor")), m_Vendor));
    }
    if(m_VendorCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vendorCode")), m_VendorCode));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_FeedIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feedId")), m_FeedId));
    }
    if(m_BarcodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("barcodes")), m_Barcodes));
    }
    if(m_UrlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("urls")), m_Urls));
    }
    if(m_PicturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pictures")), m_Pictures));
    }
    if(m_ManufacturerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("manufacturer")), m_Manufacturer));
    }
    if(m_ManufacturerCountriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("manufacturerCountries")), m_ManufacturerCountries));
    }
    if(m_MinShipmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minShipment")), m_MinShipment));
    }
    if(m_TransportUnitSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transportUnitSize")), m_TransportUnitSize));
    }
    if(m_QuantumOfSupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("quantumOfSupply")), m_QuantumOfSupply));
    }
    if(m_DeliveryDurationDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryDurationDays")), m_DeliveryDurationDays));
    }
    if(m_BoxCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boxCount")), m_BoxCount));
    }
    if(m_CustomsCommodityCodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customsCommodityCodes")), m_CustomsCommodityCodes));
    }
    if(m_WeightDimensionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weightDimensions")), m_WeightDimensions));
    }
    if(m_SupplyScheduleDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supplyScheduleDays")), m_SupplyScheduleDays));
    }
    if(m_ShelfLifeDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shelfLifeDays")), m_ShelfLifeDays));
    }
    if(m_LifeTimeDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lifeTimeDays")), m_LifeTimeDays));
    }
    if(m_GuaranteePeriodDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("guaranteePeriodDays")), m_GuaranteePeriodDays));
    }
    if(m_ProcessingStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("processingState")), m_ProcessingState));
    }
    if(m_AvailabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availability")), m_Availability));
    }
    if(m_ShelfLifeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shelfLife")), m_ShelfLife));
    }
    if(m_LifeTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lifeTime")), m_LifeTime));
    }
    if(m_GuaranteePeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("guaranteePeriod")), m_GuaranteePeriod));
    }
    if(m_CertificateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("certificate")), m_Certificate));
    }
}

bool UpdateMappingsOfferDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shopSku"))))
    {
        utility::string_t refVal_setShopSku;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shopSku"))), refVal_setShopSku );
        setShopSku(refVal_setShopSku);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        utility::string_t refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendor"))))
    {
        utility::string_t refVal_setVendor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendor"))), refVal_setVendor );
        setVendor(refVal_setVendor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vendorCode"))))
    {
        utility::string_t refVal_setVendorCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vendorCode"))), refVal_setVendorCode );
        setVendorCode(refVal_setVendorCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("feedId"))))
    {
        int64_t refVal_setFeedId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feedId"))), refVal_setFeedId );
        setFeedId(refVal_setFeedId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("barcodes"))))
    {
        std::vector<utility::string_t> refVal_setBarcodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("barcodes"))), refVal_setBarcodes );
        setBarcodes(refVal_setBarcodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("urls"))))
    {
        std::vector<utility::string_t> refVal_setUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("urls"))), refVal_setUrls );
        setUrls(refVal_setUrls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pictures"))))
    {
        std::vector<utility::string_t> refVal_setPictures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pictures"))), refVal_setPictures );
        setPictures(refVal_setPictures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("manufacturer"))))
    {
        utility::string_t refVal_setManufacturer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("manufacturer"))), refVal_setManufacturer );
        setManufacturer(refVal_setManufacturer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("manufacturerCountries"))))
    {
        std::vector<utility::string_t> refVal_setManufacturerCountries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("manufacturerCountries"))), refVal_setManufacturerCountries );
        setManufacturerCountries(refVal_setManufacturerCountries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minShipment"))))
    {
        int32_t refVal_setMinShipment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minShipment"))), refVal_setMinShipment );
        setMinShipment(refVal_setMinShipment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transportUnitSize"))))
    {
        int32_t refVal_setTransportUnitSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transportUnitSize"))), refVal_setTransportUnitSize );
        setTransportUnitSize(refVal_setTransportUnitSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("quantumOfSupply"))))
    {
        int32_t refVal_setQuantumOfSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("quantumOfSupply"))), refVal_setQuantumOfSupply );
        setQuantumOfSupply(refVal_setQuantumOfSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryDurationDays"))))
    {
        int32_t refVal_setDeliveryDurationDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryDurationDays"))), refVal_setDeliveryDurationDays );
        setDeliveryDurationDays(refVal_setDeliveryDurationDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boxCount"))))
    {
        int32_t refVal_setBoxCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boxCount"))), refVal_setBoxCount );
        setBoxCount(refVal_setBoxCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customsCommodityCodes"))))
    {
        std::vector<utility::string_t> refVal_setCustomsCommodityCodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customsCommodityCodes"))), refVal_setCustomsCommodityCodes );
        setCustomsCommodityCodes(refVal_setCustomsCommodityCodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weightDimensions"))))
    {
        std::shared_ptr<OfferWeightDimensionsDTO> refVal_setWeightDimensions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weightDimensions"))), refVal_setWeightDimensions );
        setWeightDimensions(refVal_setWeightDimensions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supplyScheduleDays"))))
    {
        std::vector<std::shared_ptr<DayOfWeekType>> refVal_setSupplyScheduleDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supplyScheduleDays"))), refVal_setSupplyScheduleDays );
        setSupplyScheduleDays(refVal_setSupplyScheduleDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shelfLifeDays"))))
    {
        int32_t refVal_setShelfLifeDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shelfLifeDays"))), refVal_setShelfLifeDays );
        setShelfLifeDays(refVal_setShelfLifeDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lifeTimeDays"))))
    {
        int32_t refVal_setLifeTimeDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lifeTimeDays"))), refVal_setLifeTimeDays );
        setLifeTimeDays(refVal_setLifeTimeDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("guaranteePeriodDays"))))
    {
        int32_t refVal_setGuaranteePeriodDays;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("guaranteePeriodDays"))), refVal_setGuaranteePeriodDays );
        setGuaranteePeriodDays(refVal_setGuaranteePeriodDays);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("processingState"))))
    {
        std::shared_ptr<OfferProcessingStateDTO> refVal_setProcessingState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("processingState"))), refVal_setProcessingState );
        setProcessingState(refVal_setProcessingState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availability"))))
    {
        std::shared_ptr<OfferAvailabilityStatusType> refVal_setAvailability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availability"))), refVal_setAvailability );
        setAvailability(refVal_setAvailability);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shelfLife"))))
    {
        std::shared_ptr<TimePeriodDTO> refVal_setShelfLife;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shelfLife"))), refVal_setShelfLife );
        setShelfLife(refVal_setShelfLife);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lifeTime"))))
    {
        std::shared_ptr<TimePeriodDTO> refVal_setLifeTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lifeTime"))), refVal_setLifeTime );
        setLifeTime(refVal_setLifeTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("guaranteePeriod"))))
    {
        std::shared_ptr<TimePeriodDTO> refVal_setGuaranteePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("guaranteePeriod"))), refVal_setGuaranteePeriod );
        setGuaranteePeriod(refVal_setGuaranteePeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("certificate"))))
    {
        utility::string_t refVal_setCertificate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("certificate"))), refVal_setCertificate );
        setCertificate(refVal_setCertificate);
    }
    return ok;
}

utility::string_t UpdateMappingsOfferDTO::getName() const
{
    return m_Name;
}

void UpdateMappingsOfferDTO::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateMappingsOfferDTO::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateMappingsOfferDTO::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getShopSku() const
{
    return m_ShopSku;
}

void UpdateMappingsOfferDTO::setShopSku(const utility::string_t& value)
{
    m_ShopSku = value;
    m_ShopSkuIsSet = true;
}

bool UpdateMappingsOfferDTO::shopSkuIsSet() const
{
    return m_ShopSkuIsSet;
}

void UpdateMappingsOfferDTO::unsetShopSku()
{
    m_ShopSkuIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getCategory() const
{
    return m_Category;
}

void UpdateMappingsOfferDTO::setCategory(const utility::string_t& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool UpdateMappingsOfferDTO::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void UpdateMappingsOfferDTO::unsetCategory()
{
    m_CategoryIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getVendor() const
{
    return m_Vendor;
}

void UpdateMappingsOfferDTO::setVendor(const utility::string_t& value)
{
    m_Vendor = value;
    m_VendorIsSet = true;
}

bool UpdateMappingsOfferDTO::vendorIsSet() const
{
    return m_VendorIsSet;
}

void UpdateMappingsOfferDTO::unsetVendor()
{
    m_VendorIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getVendorCode() const
{
    return m_VendorCode;
}

void UpdateMappingsOfferDTO::setVendorCode(const utility::string_t& value)
{
    m_VendorCode = value;
    m_VendorCodeIsSet = true;
}

bool UpdateMappingsOfferDTO::vendorCodeIsSet() const
{
    return m_VendorCodeIsSet;
}

void UpdateMappingsOfferDTO::unsetVendorCode()
{
    m_VendorCodeIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getDescription() const
{
    return m_Description;
}

void UpdateMappingsOfferDTO::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool UpdateMappingsOfferDTO::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UpdateMappingsOfferDTO::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getId() const
{
    return m_Id;
}

void UpdateMappingsOfferDTO::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UpdateMappingsOfferDTO::idIsSet() const
{
    return m_IdIsSet;
}

void UpdateMappingsOfferDTO::unsetId()
{
    m_IdIsSet = false;
}
int64_t UpdateMappingsOfferDTO::getFeedId() const
{
    return m_FeedId;
}

void UpdateMappingsOfferDTO::setFeedId(int64_t value)
{
    m_FeedId = value;
    m_FeedIdIsSet = true;
}

bool UpdateMappingsOfferDTO::feedIdIsSet() const
{
    return m_FeedIdIsSet;
}

void UpdateMappingsOfferDTO::unsetFeedId()
{
    m_FeedIdIsSet = false;
}
std::vector<utility::string_t>& UpdateMappingsOfferDTO::getBarcodes()
{
    return m_Barcodes;
}

void UpdateMappingsOfferDTO::setBarcodes(const std::vector<utility::string_t>& value)
{
    m_Barcodes = value;
    m_BarcodesIsSet = true;
}

bool UpdateMappingsOfferDTO::barcodesIsSet() const
{
    return m_BarcodesIsSet;
}

void UpdateMappingsOfferDTO::unsetBarcodes()
{
    m_BarcodesIsSet = false;
}
std::vector<utility::string_t>& UpdateMappingsOfferDTO::getUrls()
{
    return m_Urls;
}

void UpdateMappingsOfferDTO::setUrls(const std::vector<utility::string_t>& value)
{
    m_Urls = value;
    m_UrlsIsSet = true;
}

bool UpdateMappingsOfferDTO::urlsIsSet() const
{
    return m_UrlsIsSet;
}

void UpdateMappingsOfferDTO::unsetUrls()
{
    m_UrlsIsSet = false;
}
std::vector<utility::string_t>& UpdateMappingsOfferDTO::getPictures()
{
    return m_Pictures;
}

void UpdateMappingsOfferDTO::setPictures(const std::vector<utility::string_t>& value)
{
    m_Pictures = value;
    m_PicturesIsSet = true;
}

bool UpdateMappingsOfferDTO::picturesIsSet() const
{
    return m_PicturesIsSet;
}

void UpdateMappingsOfferDTO::unsetPictures()
{
    m_PicturesIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getManufacturer() const
{
    return m_Manufacturer;
}

void UpdateMappingsOfferDTO::setManufacturer(const utility::string_t& value)
{
    m_Manufacturer = value;
    m_ManufacturerIsSet = true;
}

bool UpdateMappingsOfferDTO::manufacturerIsSet() const
{
    return m_ManufacturerIsSet;
}

void UpdateMappingsOfferDTO::unsetManufacturer()
{
    m_ManufacturerIsSet = false;
}
std::vector<utility::string_t>& UpdateMappingsOfferDTO::getManufacturerCountries()
{
    return m_ManufacturerCountries;
}

void UpdateMappingsOfferDTO::setManufacturerCountries(const std::vector<utility::string_t>& value)
{
    m_ManufacturerCountries = value;
    m_ManufacturerCountriesIsSet = true;
}

bool UpdateMappingsOfferDTO::manufacturerCountriesIsSet() const
{
    return m_ManufacturerCountriesIsSet;
}

void UpdateMappingsOfferDTO::unsetManufacturerCountries()
{
    m_ManufacturerCountriesIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getMinShipment() const
{
    return m_MinShipment;
}

void UpdateMappingsOfferDTO::setMinShipment(int32_t value)
{
    m_MinShipment = value;
    m_MinShipmentIsSet = true;
}

bool UpdateMappingsOfferDTO::minShipmentIsSet() const
{
    return m_MinShipmentIsSet;
}

void UpdateMappingsOfferDTO::unsetMinShipment()
{
    m_MinShipmentIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getTransportUnitSize() const
{
    return m_TransportUnitSize;
}

void UpdateMappingsOfferDTO::setTransportUnitSize(int32_t value)
{
    m_TransportUnitSize = value;
    m_TransportUnitSizeIsSet = true;
}

bool UpdateMappingsOfferDTO::transportUnitSizeIsSet() const
{
    return m_TransportUnitSizeIsSet;
}

void UpdateMappingsOfferDTO::unsetTransportUnitSize()
{
    m_TransportUnitSizeIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getQuantumOfSupply() const
{
    return m_QuantumOfSupply;
}

void UpdateMappingsOfferDTO::setQuantumOfSupply(int32_t value)
{
    m_QuantumOfSupply = value;
    m_QuantumOfSupplyIsSet = true;
}

bool UpdateMappingsOfferDTO::quantumOfSupplyIsSet() const
{
    return m_QuantumOfSupplyIsSet;
}

void UpdateMappingsOfferDTO::unsetQuantumOfSupply()
{
    m_QuantumOfSupplyIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getDeliveryDurationDays() const
{
    return m_DeliveryDurationDays;
}

void UpdateMappingsOfferDTO::setDeliveryDurationDays(int32_t value)
{
    m_DeliveryDurationDays = value;
    m_DeliveryDurationDaysIsSet = true;
}

bool UpdateMappingsOfferDTO::deliveryDurationDaysIsSet() const
{
    return m_DeliveryDurationDaysIsSet;
}

void UpdateMappingsOfferDTO::unsetDeliveryDurationDays()
{
    m_DeliveryDurationDaysIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getBoxCount() const
{
    return m_BoxCount;
}

void UpdateMappingsOfferDTO::setBoxCount(int32_t value)
{
    m_BoxCount = value;
    m_BoxCountIsSet = true;
}

bool UpdateMappingsOfferDTO::boxCountIsSet() const
{
    return m_BoxCountIsSet;
}

void UpdateMappingsOfferDTO::unsetBoxCount()
{
    m_BoxCountIsSet = false;
}
std::vector<utility::string_t>& UpdateMappingsOfferDTO::getCustomsCommodityCodes()
{
    return m_CustomsCommodityCodes;
}

void UpdateMappingsOfferDTO::setCustomsCommodityCodes(const std::vector<utility::string_t>& value)
{
    m_CustomsCommodityCodes = value;
    m_CustomsCommodityCodesIsSet = true;
}

bool UpdateMappingsOfferDTO::customsCommodityCodesIsSet() const
{
    return m_CustomsCommodityCodesIsSet;
}

void UpdateMappingsOfferDTO::unsetCustomsCommodityCodes()
{
    m_CustomsCommodityCodesIsSet = false;
}
std::shared_ptr<OfferWeightDimensionsDTO> UpdateMappingsOfferDTO::getWeightDimensions() const
{
    return m_WeightDimensions;
}

void UpdateMappingsOfferDTO::setWeightDimensions(const std::shared_ptr<OfferWeightDimensionsDTO>& value)
{
    m_WeightDimensions = value;
    m_WeightDimensionsIsSet = true;
}

bool UpdateMappingsOfferDTO::weightDimensionsIsSet() const
{
    return m_WeightDimensionsIsSet;
}

void UpdateMappingsOfferDTO::unsetWeightDimensions()
{
    m_WeightDimensionsIsSet = false;
}
std::vector<std::shared_ptr<DayOfWeekType>>& UpdateMappingsOfferDTO::getSupplyScheduleDays()
{
    return m_SupplyScheduleDays;
}

void UpdateMappingsOfferDTO::setSupplyScheduleDays(const std::vector<std::shared_ptr<DayOfWeekType>>& value)
{
    m_SupplyScheduleDays = value;
    m_SupplyScheduleDaysIsSet = true;
}

bool UpdateMappingsOfferDTO::supplyScheduleDaysIsSet() const
{
    return m_SupplyScheduleDaysIsSet;
}

void UpdateMappingsOfferDTO::unsetSupplyScheduleDays()
{
    m_SupplyScheduleDaysIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getShelfLifeDays() const
{
    return m_ShelfLifeDays;
}

void UpdateMappingsOfferDTO::setShelfLifeDays(int32_t value)
{
    m_ShelfLifeDays = value;
    m_ShelfLifeDaysIsSet = true;
}

bool UpdateMappingsOfferDTO::shelfLifeDaysIsSet() const
{
    return m_ShelfLifeDaysIsSet;
}

void UpdateMappingsOfferDTO::unsetShelfLifeDays()
{
    m_ShelfLifeDaysIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getLifeTimeDays() const
{
    return m_LifeTimeDays;
}

void UpdateMappingsOfferDTO::setLifeTimeDays(int32_t value)
{
    m_LifeTimeDays = value;
    m_LifeTimeDaysIsSet = true;
}

bool UpdateMappingsOfferDTO::lifeTimeDaysIsSet() const
{
    return m_LifeTimeDaysIsSet;
}

void UpdateMappingsOfferDTO::unsetLifeTimeDays()
{
    m_LifeTimeDaysIsSet = false;
}
int32_t UpdateMappingsOfferDTO::getGuaranteePeriodDays() const
{
    return m_GuaranteePeriodDays;
}

void UpdateMappingsOfferDTO::setGuaranteePeriodDays(int32_t value)
{
    m_GuaranteePeriodDays = value;
    m_GuaranteePeriodDaysIsSet = true;
}

bool UpdateMappingsOfferDTO::guaranteePeriodDaysIsSet() const
{
    return m_GuaranteePeriodDaysIsSet;
}

void UpdateMappingsOfferDTO::unsetGuaranteePeriodDays()
{
    m_GuaranteePeriodDaysIsSet = false;
}
std::shared_ptr<OfferProcessingStateDTO> UpdateMappingsOfferDTO::getProcessingState() const
{
    return m_ProcessingState;
}

void UpdateMappingsOfferDTO::setProcessingState(const std::shared_ptr<OfferProcessingStateDTO>& value)
{
    m_ProcessingState = value;
    m_ProcessingStateIsSet = true;
}

bool UpdateMappingsOfferDTO::processingStateIsSet() const
{
    return m_ProcessingStateIsSet;
}

void UpdateMappingsOfferDTO::unsetProcessingState()
{
    m_ProcessingStateIsSet = false;
}
std::shared_ptr<OfferAvailabilityStatusType> UpdateMappingsOfferDTO::getAvailability() const
{
    return m_Availability;
}

void UpdateMappingsOfferDTO::setAvailability(const std::shared_ptr<OfferAvailabilityStatusType>& value)
{
    m_Availability = value;
    m_AvailabilityIsSet = true;
}

bool UpdateMappingsOfferDTO::availabilityIsSet() const
{
    return m_AvailabilityIsSet;
}

void UpdateMappingsOfferDTO::unsetAvailability()
{
    m_AvailabilityIsSet = false;
}
std::shared_ptr<TimePeriodDTO> UpdateMappingsOfferDTO::getShelfLife() const
{
    return m_ShelfLife;
}

void UpdateMappingsOfferDTO::setShelfLife(const std::shared_ptr<TimePeriodDTO>& value)
{
    m_ShelfLife = value;
    m_ShelfLifeIsSet = true;
}

bool UpdateMappingsOfferDTO::shelfLifeIsSet() const
{
    return m_ShelfLifeIsSet;
}

void UpdateMappingsOfferDTO::unsetShelfLife()
{
    m_ShelfLifeIsSet = false;
}
std::shared_ptr<TimePeriodDTO> UpdateMappingsOfferDTO::getLifeTime() const
{
    return m_LifeTime;
}

void UpdateMappingsOfferDTO::setLifeTime(const std::shared_ptr<TimePeriodDTO>& value)
{
    m_LifeTime = value;
    m_LifeTimeIsSet = true;
}

bool UpdateMappingsOfferDTO::lifeTimeIsSet() const
{
    return m_LifeTimeIsSet;
}

void UpdateMappingsOfferDTO::unsetLifeTime()
{
    m_LifeTimeIsSet = false;
}
std::shared_ptr<TimePeriodDTO> UpdateMappingsOfferDTO::getGuaranteePeriod() const
{
    return m_GuaranteePeriod;
}

void UpdateMappingsOfferDTO::setGuaranteePeriod(const std::shared_ptr<TimePeriodDTO>& value)
{
    m_GuaranteePeriod = value;
    m_GuaranteePeriodIsSet = true;
}

bool UpdateMappingsOfferDTO::guaranteePeriodIsSet() const
{
    return m_GuaranteePeriodIsSet;
}

void UpdateMappingsOfferDTO::unsetGuaranteePeriod()
{
    m_GuaranteePeriodIsSet = false;
}
utility::string_t UpdateMappingsOfferDTO::getCertificate() const
{
    return m_Certificate;
}

void UpdateMappingsOfferDTO::setCertificate(const utility::string_t& value)
{
    m_Certificate = value;
    m_CertificateIsSet = true;
}

bool UpdateMappingsOfferDTO::certificateIsSet() const
{
    return m_CertificateIsSet;
}

void UpdateMappingsOfferDTO::unsetCertificate()
{
    m_CertificateIsSet = false;
}
}
}
}
}


