/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrderBuyerBasicInfoDTO from './OrderBuyerBasicInfoDTO';
import OrderBuyerType from './OrderBuyerType';

/**
 * The OrderBuyerInfoDTO model module.
 * @module model/OrderBuyerInfoDTO
 * @version LATEST
 */
class OrderBuyerInfoDTO {
    /**
     * @member {String} id
     * @type {String}
     */
    id;
    /**
     * @member {String} lastName
     * @type {String}
     */
    lastName;
    /**
     * @member {String} firstName
     * @type {String}
     */
    firstName;
    /**
     * @member {String} middleName
     * @type {String}
     */
    middleName;
    /**
     * @member {module:model/OrderBuyerType} type
     * @type {module:model/OrderBuyerType}
     */
    type;
    /**
     * @member {String} phone
     * @type {String}
     */
    phone;

    /**
     * @member {String} id
     * @type {String}
     */
    #id;
    /**
     * @member {String} lastName
     * @type {String}
     */
    #lastName;
    /**
     * @member {String} firstName
     * @type {String}
     */
    #firstName;
    /**
     * @member {String} middleName
     * @type {String}
     */
    #middleName;
    /**
     * @member {module:model/OrderBuyerType} type
     * @type {module:model/OrderBuyerType}
     */
    #type;
    

    /**
     * Constructs a new <code>OrderBuyerInfoDTO</code>.
     * Информация о покупателе и его номере телефона.
     * @alias module:model/OrderBuyerInfoDTO
     * @implements module:model/OrderBuyerBasicInfoDTO
     */
    constructor() { 
        OrderBuyerBasicInfoDTO.initialize(this);
        OrderBuyerInfoDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderBuyerInfoDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderBuyerInfoDTO} obj Optional instance to populate.
     * @return {module:model/OrderBuyerInfoDTO} The populated <code>OrderBuyerInfoDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderBuyerInfoDTO();
            OrderBuyerBasicInfoDTO.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('middleName')) {
                obj['middleName'] = ApiClient.convertToType(data['middleName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = OrderBuyerType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
        }
        return obj;
    }
}



export default OrderBuyerInfoDTO;

