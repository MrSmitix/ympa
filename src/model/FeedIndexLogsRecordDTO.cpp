/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/FeedIndexLogsRecordDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



FeedIndexLogsRecordDTO::FeedIndexLogsRecordDTO()
{
    m_DownloadTime = utility::datetime();
    m_DownloadTimeIsSet = false;
    m_FileTime = utility::datetime();
    m_FileTimeIsSet = false;
    m_GenerationId = 0L;
    m_GenerationIdIsSet = false;
    m_IndexTypeIsSet = false;
    m_PublishedTime = utility::datetime();
    m_PublishedTimeIsSet = false;
    m_StatusIsSet = false;
    m_ErrorIsSet = false;
    m_OffersIsSet = false;
}

FeedIndexLogsRecordDTO::~FeedIndexLogsRecordDTO()
{
}

void FeedIndexLogsRecordDTO::validate()
{
    // TODO: implement validation
}

web::json::value FeedIndexLogsRecordDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DownloadTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("downloadTime"))] = ModelBase::toJson(m_DownloadTime);
    }
    if(m_FileTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("fileTime"))] = ModelBase::toJson(m_FileTime);
    }
    if(m_GenerationIdIsSet)
    {
        val[utility::conversions::to_string_t(U("generationId"))] = ModelBase::toJson(m_GenerationId);
    }
    if(m_IndexTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("indexType"))] = ModelBase::toJson(m_IndexType);
    }
    if(m_PublishedTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("publishedTime"))] = ModelBase::toJson(m_PublishedTime);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_OffersIsSet)
    {
        val[utility::conversions::to_string_t(U("offers"))] = ModelBase::toJson(m_Offers);
    }

    return val;
}

bool FeedIndexLogsRecordDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("downloadTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("downloadTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDownloadTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownloadTime);
            setDownloadTime(refVal_setDownloadTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fileTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setFileTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileTime);
            setFileTime(refVal_setFileTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("generationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("generationId")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setGenerationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGenerationId);
            setGenerationId(refVal_setGenerationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("indexType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("indexType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedIndexLogsIndexType> refVal_setIndexType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndexType);
            setIndexType(refVal_setIndexType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("publishedTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("publishedTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setPublishedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPublishedTime);
            setPublishedTime(refVal_setPublishedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedIndexLogsStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedIndexLogsErrorDTO> refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offers")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FeedIndexLogsOffersDTO> refVal_setOffers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffers);
            setOffers(refVal_setOffers);
        }
    }
    return ok;
}

void FeedIndexLogsRecordDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DownloadTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("downloadTime")), m_DownloadTime));
    }
    if(m_FileTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileTime")), m_FileTime));
    }
    if(m_GenerationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("generationId")), m_GenerationId));
    }
    if(m_IndexTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("indexType")), m_IndexType));
    }
    if(m_PublishedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("publishedTime")), m_PublishedTime));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
    if(m_OffersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offers")), m_Offers));
    }
}

bool FeedIndexLogsRecordDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("downloadTime"))))
    {
        utility::datetime refVal_setDownloadTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("downloadTime"))), refVal_setDownloadTime );
        setDownloadTime(refVal_setDownloadTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fileTime"))))
    {
        utility::datetime refVal_setFileTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileTime"))), refVal_setFileTime );
        setFileTime(refVal_setFileTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("generationId"))))
    {
        int64_t refVal_setGenerationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("generationId"))), refVal_setGenerationId );
        setGenerationId(refVal_setGenerationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("indexType"))))
    {
        std::shared_ptr<FeedIndexLogsIndexType> refVal_setIndexType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("indexType"))), refVal_setIndexType );
        setIndexType(refVal_setIndexType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("publishedTime"))))
    {
        utility::datetime refVal_setPublishedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("publishedTime"))), refVal_setPublishedTime );
        setPublishedTime(refVal_setPublishedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<FeedIndexLogsStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        std::shared_ptr<FeedIndexLogsErrorDTO> refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offers"))))
    {
        std::shared_ptr<FeedIndexLogsOffersDTO> refVal_setOffers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offers"))), refVal_setOffers );
        setOffers(refVal_setOffers);
    }
    return ok;
}

utility::datetime FeedIndexLogsRecordDTO::getDownloadTime() const
{
    return m_DownloadTime;
}

void FeedIndexLogsRecordDTO::setDownloadTime(const utility::datetime& value)
{
    m_DownloadTime = value;
    m_DownloadTimeIsSet = true;
}

bool FeedIndexLogsRecordDTO::downloadTimeIsSet() const
{
    return m_DownloadTimeIsSet;
}

void FeedIndexLogsRecordDTO::unsetDownloadTime()
{
    m_DownloadTimeIsSet = false;
}
utility::datetime FeedIndexLogsRecordDTO::getFileTime() const
{
    return m_FileTime;
}

void FeedIndexLogsRecordDTO::setFileTime(const utility::datetime& value)
{
    m_FileTime = value;
    m_FileTimeIsSet = true;
}

bool FeedIndexLogsRecordDTO::fileTimeIsSet() const
{
    return m_FileTimeIsSet;
}

void FeedIndexLogsRecordDTO::unsetFileTime()
{
    m_FileTimeIsSet = false;
}
int64_t FeedIndexLogsRecordDTO::getGenerationId() const
{
    return m_GenerationId;
}

void FeedIndexLogsRecordDTO::setGenerationId(int64_t value)
{
    m_GenerationId = value;
    m_GenerationIdIsSet = true;
}

bool FeedIndexLogsRecordDTO::generationIdIsSet() const
{
    return m_GenerationIdIsSet;
}

void FeedIndexLogsRecordDTO::unsetGenerationId()
{
    m_GenerationIdIsSet = false;
}
std::shared_ptr<FeedIndexLogsIndexType> FeedIndexLogsRecordDTO::getIndexType() const
{
    return m_IndexType;
}

void FeedIndexLogsRecordDTO::setIndexType(const std::shared_ptr<FeedIndexLogsIndexType>& value)
{
    m_IndexType = value;
    m_IndexTypeIsSet = true;
}

bool FeedIndexLogsRecordDTO::indexTypeIsSet() const
{
    return m_IndexTypeIsSet;
}

void FeedIndexLogsRecordDTO::unsetIndexType()
{
    m_IndexTypeIsSet = false;
}
utility::datetime FeedIndexLogsRecordDTO::getPublishedTime() const
{
    return m_PublishedTime;
}

void FeedIndexLogsRecordDTO::setPublishedTime(const utility::datetime& value)
{
    m_PublishedTime = value;
    m_PublishedTimeIsSet = true;
}

bool FeedIndexLogsRecordDTO::publishedTimeIsSet() const
{
    return m_PublishedTimeIsSet;
}

void FeedIndexLogsRecordDTO::unsetPublishedTime()
{
    m_PublishedTimeIsSet = false;
}
std::shared_ptr<FeedIndexLogsStatusType> FeedIndexLogsRecordDTO::getStatus() const
{
    return m_Status;
}

void FeedIndexLogsRecordDTO::setStatus(const std::shared_ptr<FeedIndexLogsStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool FeedIndexLogsRecordDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void FeedIndexLogsRecordDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<FeedIndexLogsErrorDTO> FeedIndexLogsRecordDTO::getError() const
{
    return m_Error;
}

void FeedIndexLogsRecordDTO::setError(const std::shared_ptr<FeedIndexLogsErrorDTO>& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool FeedIndexLogsRecordDTO::errorIsSet() const
{
    return m_ErrorIsSet;
}

void FeedIndexLogsRecordDTO::unsetError()
{
    m_ErrorIsSet = false;
}
std::shared_ptr<FeedIndexLogsOffersDTO> FeedIndexLogsRecordDTO::getOffers() const
{
    return m_Offers;
}

void FeedIndexLogsRecordDTO::setOffers(const std::shared_ptr<FeedIndexLogsOffersDTO>& value)
{
    m_Offers = value;
    m_OffersIsSet = true;
}

bool FeedIndexLogsRecordDTO::offersIsSet() const
{
    return m_OffersIsSet;
}

void FeedIndexLogsRecordDTO::unsetOffers()
{
    m_OffersIsSet = false;
}
}
}
}
}


