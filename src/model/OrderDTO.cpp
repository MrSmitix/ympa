/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/OrderDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



OrderDTO::OrderDTO()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_StatusIsSet = false;
    m_SubstatusIsSet = false;
    m_CreationDate = utility::conversions::to_string_t("");
    m_CreationDateIsSet = false;
    m_UpdatedAt = utility::conversions::to_string_t("");
    m_UpdatedAtIsSet = false;
    m_CurrencyIsSet = false;
    m_ItemsTotal = 0.0;
    m_ItemsTotalIsSet = false;
    m_DeliveryTotal = 0.0;
    m_DeliveryTotalIsSet = false;
    m_BuyerItemsTotal = 0.0;
    m_BuyerItemsTotalIsSet = false;
    m_BuyerTotal = 0.0;
    m_BuyerTotalIsSet = false;
    m_BuyerItemsTotalBeforeDiscount = 0.0;
    m_BuyerItemsTotalBeforeDiscountIsSet = false;
    m_BuyerTotalBeforeDiscount = 0.0;
    m_BuyerTotalBeforeDiscountIsSet = false;
    m_PaymentTypeIsSet = false;
    m_PaymentMethodIsSet = false;
    m_Fake = false;
    m_FakeIsSet = false;
    m_ItemsIsSet = false;
    m_SubsidiesIsSet = false;
    m_DeliveryIsSet = false;
    m_BuyerIsSet = false;
    m_Notes = utility::conversions::to_string_t("");
    m_NotesIsSet = false;
    m_TaxSystemIsSet = false;
    m_CancelRequested = false;
    m_CancelRequestedIsSet = false;
    m_ExpiryDate = utility::conversions::to_string_t("");
    m_ExpiryDateIsSet = false;
}

OrderDTO::~OrderDTO()
{
}

void OrderDTO::validate()
{
    // TODO: implement validation
}

web::json::value OrderDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_SubstatusIsSet)
    {
        val[utility::conversions::to_string_t(U("substatus"))] = ModelBase::toJson(m_Substatus);
    }
    if(m_CreationDateIsSet)
    {
        val[utility::conversions::to_string_t(U("creationDate"))] = ModelBase::toJson(m_CreationDate);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_CurrencyIsSet)
    {
        val[utility::conversions::to_string_t(U("currency"))] = ModelBase::toJson(m_Currency);
    }
    if(m_ItemsTotalIsSet)
    {
        val[utility::conversions::to_string_t(U("itemsTotal"))] = ModelBase::toJson(m_ItemsTotal);
    }
    if(m_DeliveryTotalIsSet)
    {
        val[utility::conversions::to_string_t(U("deliveryTotal"))] = ModelBase::toJson(m_DeliveryTotal);
    }
    if(m_BuyerItemsTotalIsSet)
    {
        val[utility::conversions::to_string_t(U("buyerItemsTotal"))] = ModelBase::toJson(m_BuyerItemsTotal);
    }
    if(m_BuyerTotalIsSet)
    {
        val[utility::conversions::to_string_t(U("buyerTotal"))] = ModelBase::toJson(m_BuyerTotal);
    }
    if(m_BuyerItemsTotalBeforeDiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("buyerItemsTotalBeforeDiscount"))] = ModelBase::toJson(m_BuyerItemsTotalBeforeDiscount);
    }
    if(m_BuyerTotalBeforeDiscountIsSet)
    {
        val[utility::conversions::to_string_t(U("buyerTotalBeforeDiscount"))] = ModelBase::toJson(m_BuyerTotalBeforeDiscount);
    }
    if(m_PaymentTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("paymentType"))] = ModelBase::toJson(m_PaymentType);
    }
    if(m_PaymentMethodIsSet)
    {
        val[utility::conversions::to_string_t(U("paymentMethod"))] = ModelBase::toJson(m_PaymentMethod);
    }
    if(m_FakeIsSet)
    {
        val[utility::conversions::to_string_t(U("fake"))] = ModelBase::toJson(m_Fake);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }
    if(m_SubsidiesIsSet)
    {
        val[utility::conversions::to_string_t(U("subsidies"))] = ModelBase::toJson(m_Subsidies);
    }
    if(m_DeliveryIsSet)
    {
        val[utility::conversions::to_string_t(U("delivery"))] = ModelBase::toJson(m_Delivery);
    }
    if(m_BuyerIsSet)
    {
        val[utility::conversions::to_string_t(U("buyer"))] = ModelBase::toJson(m_Buyer);
    }
    if(m_NotesIsSet)
    {
        val[utility::conversions::to_string_t(U("notes"))] = ModelBase::toJson(m_Notes);
    }
    if(m_TaxSystemIsSet)
    {
        val[utility::conversions::to_string_t(U("taxSystem"))] = ModelBase::toJson(m_TaxSystem);
    }
    if(m_CancelRequestedIsSet)
    {
        val[utility::conversions::to_string_t(U("cancelRequested"))] = ModelBase::toJson(m_CancelRequested);
    }
    if(m_ExpiryDateIsSet)
    {
        val[utility::conversions::to_string_t(U("expiryDate"))] = ModelBase::toJson(m_ExpiryDate);
    }

    return val;
}

bool OrderDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderStatusType> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("substatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("substatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderSubstatusType> refVal_setSubstatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubstatus);
            setSubstatus(refVal_setSubstatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("creationDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("creationDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCreationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreationDate);
            setCreationDate(refVal_setCreationDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("currency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("currency")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CurrencyType> refVal_setCurrency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrency);
            setCurrency(refVal_setCurrency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("itemsTotal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("itemsTotal")));
        if(!fieldValue.is_null())
        {
            double refVal_setItemsTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemsTotal);
            setItemsTotal(refVal_setItemsTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliveryTotal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliveryTotal")));
        if(!fieldValue.is_null())
        {
            double refVal_setDeliveryTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliveryTotal);
            setDeliveryTotal(refVal_setDeliveryTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyerItemsTotal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyerItemsTotal")));
        if(!fieldValue.is_null())
        {
            double refVal_setBuyerItemsTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyerItemsTotal);
            setBuyerItemsTotal(refVal_setBuyerItemsTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyerTotal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyerTotal")));
        if(!fieldValue.is_null())
        {
            double refVal_setBuyerTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyerTotal);
            setBuyerTotal(refVal_setBuyerTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyerItemsTotalBeforeDiscount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyerItemsTotalBeforeDiscount")));
        if(!fieldValue.is_null())
        {
            double refVal_setBuyerItemsTotalBeforeDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyerItemsTotalBeforeDiscount);
            setBuyerItemsTotalBeforeDiscount(refVal_setBuyerItemsTotalBeforeDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyerTotalBeforeDiscount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyerTotalBeforeDiscount")));
        if(!fieldValue.is_null())
        {
            double refVal_setBuyerTotalBeforeDiscount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyerTotalBeforeDiscount);
            setBuyerTotalBeforeDiscount(refVal_setBuyerTotalBeforeDiscount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paymentType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paymentType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderPaymentType> refVal_setPaymentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaymentType);
            setPaymentType(refVal_setPaymentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paymentMethod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paymentMethod")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderPaymentMethodType> refVal_setPaymentMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaymentMethod);
            setPaymentMethod(refVal_setPaymentMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fake"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fake")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFake;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFake);
            setFake(refVal_setFake);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderItemDTO>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subsidies"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subsidies")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<OrderSubsidyDTO>> refVal_setSubsidies;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubsidies);
            setSubsidies(refVal_setSubsidies);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delivery"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delivery")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderDeliveryDTO> refVal_setDelivery;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelivery);
            setDelivery(refVal_setDelivery);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buyer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buyer")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderBuyerDTO> refVal_setBuyer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuyer);
            setBuyer(refVal_setBuyer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNotes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotes);
            setNotes(refVal_setNotes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("taxSystem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("taxSystem")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<OrderTaxSystemType> refVal_setTaxSystem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTaxSystem);
            setTaxSystem(refVal_setTaxSystem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cancelRequested"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cancelRequested")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCancelRequested;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCancelRequested);
            setCancelRequested(refVal_setCancelRequested);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiryDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiryDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExpiryDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiryDate);
            setExpiryDate(refVal_setExpiryDate);
        }
    }
    return ok;
}

void OrderDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_SubstatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("substatus")), m_Substatus));
    }
    if(m_CreationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("creationDate")), m_CreationDate));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_CurrencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("currency")), m_Currency));
    }
    if(m_ItemsTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("itemsTotal")), m_ItemsTotal));
    }
    if(m_DeliveryTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliveryTotal")), m_DeliveryTotal));
    }
    if(m_BuyerItemsTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyerItemsTotal")), m_BuyerItemsTotal));
    }
    if(m_BuyerTotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyerTotal")), m_BuyerTotal));
    }
    if(m_BuyerItemsTotalBeforeDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyerItemsTotalBeforeDiscount")), m_BuyerItemsTotalBeforeDiscount));
    }
    if(m_BuyerTotalBeforeDiscountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyerTotalBeforeDiscount")), m_BuyerTotalBeforeDiscount));
    }
    if(m_PaymentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paymentType")), m_PaymentType));
    }
    if(m_PaymentMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paymentMethod")), m_PaymentMethod));
    }
    if(m_FakeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fake")), m_Fake));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
    if(m_SubsidiesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subsidies")), m_Subsidies));
    }
    if(m_DeliveryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delivery")), m_Delivery));
    }
    if(m_BuyerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buyer")), m_Buyer));
    }
    if(m_NotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notes")), m_Notes));
    }
    if(m_TaxSystemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("taxSystem")), m_TaxSystem));
    }
    if(m_CancelRequestedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cancelRequested")), m_CancelRequested));
    }
    if(m_ExpiryDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiryDate")), m_ExpiryDate));
    }
}

bool OrderDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int64_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<OrderStatusType> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("substatus"))))
    {
        std::shared_ptr<OrderSubstatusType> refVal_setSubstatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("substatus"))), refVal_setSubstatus );
        setSubstatus(refVal_setSubstatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("creationDate"))))
    {
        utility::string_t refVal_setCreationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("creationDate"))), refVal_setCreationDate );
        setCreationDate(refVal_setCreationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::string_t refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("currency"))))
    {
        std::shared_ptr<CurrencyType> refVal_setCurrency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("currency"))), refVal_setCurrency );
        setCurrency(refVal_setCurrency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("itemsTotal"))))
    {
        double refVal_setItemsTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("itemsTotal"))), refVal_setItemsTotal );
        setItemsTotal(refVal_setItemsTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliveryTotal"))))
    {
        double refVal_setDeliveryTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliveryTotal"))), refVal_setDeliveryTotal );
        setDeliveryTotal(refVal_setDeliveryTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyerItemsTotal"))))
    {
        double refVal_setBuyerItemsTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyerItemsTotal"))), refVal_setBuyerItemsTotal );
        setBuyerItemsTotal(refVal_setBuyerItemsTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyerTotal"))))
    {
        double refVal_setBuyerTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyerTotal"))), refVal_setBuyerTotal );
        setBuyerTotal(refVal_setBuyerTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyerItemsTotalBeforeDiscount"))))
    {
        double refVal_setBuyerItemsTotalBeforeDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyerItemsTotalBeforeDiscount"))), refVal_setBuyerItemsTotalBeforeDiscount );
        setBuyerItemsTotalBeforeDiscount(refVal_setBuyerItemsTotalBeforeDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyerTotalBeforeDiscount"))))
    {
        double refVal_setBuyerTotalBeforeDiscount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyerTotalBeforeDiscount"))), refVal_setBuyerTotalBeforeDiscount );
        setBuyerTotalBeforeDiscount(refVal_setBuyerTotalBeforeDiscount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paymentType"))))
    {
        std::shared_ptr<OrderPaymentType> refVal_setPaymentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paymentType"))), refVal_setPaymentType );
        setPaymentType(refVal_setPaymentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paymentMethod"))))
    {
        std::shared_ptr<OrderPaymentMethodType> refVal_setPaymentMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paymentMethod"))), refVal_setPaymentMethod );
        setPaymentMethod(refVal_setPaymentMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fake"))))
    {
        bool refVal_setFake;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fake"))), refVal_setFake );
        setFake(refVal_setFake);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<OrderItemDTO>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subsidies"))))
    {
        std::vector<std::shared_ptr<OrderSubsidyDTO>> refVal_setSubsidies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subsidies"))), refVal_setSubsidies );
        setSubsidies(refVal_setSubsidies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delivery"))))
    {
        std::shared_ptr<OrderDeliveryDTO> refVal_setDelivery;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delivery"))), refVal_setDelivery );
        setDelivery(refVal_setDelivery);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buyer"))))
    {
        std::shared_ptr<OrderBuyerDTO> refVal_setBuyer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buyer"))), refVal_setBuyer );
        setBuyer(refVal_setBuyer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notes"))))
    {
        utility::string_t refVal_setNotes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notes"))), refVal_setNotes );
        setNotes(refVal_setNotes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("taxSystem"))))
    {
        std::shared_ptr<OrderTaxSystemType> refVal_setTaxSystem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("taxSystem"))), refVal_setTaxSystem );
        setTaxSystem(refVal_setTaxSystem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cancelRequested"))))
    {
        bool refVal_setCancelRequested;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cancelRequested"))), refVal_setCancelRequested );
        setCancelRequested(refVal_setCancelRequested);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiryDate"))))
    {
        utility::string_t refVal_setExpiryDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiryDate"))), refVal_setExpiryDate );
        setExpiryDate(refVal_setExpiryDate);
    }
    return ok;
}

int64_t OrderDTO::getId() const
{
    return m_Id;
}

void OrderDTO::setId(int64_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrderDTO::idIsSet() const
{
    return m_IdIsSet;
}

void OrderDTO::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<OrderStatusType> OrderDTO::getStatus() const
{
    return m_Status;
}

void OrderDTO::setStatus(const std::shared_ptr<OrderStatusType>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool OrderDTO::statusIsSet() const
{
    return m_StatusIsSet;
}

void OrderDTO::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<OrderSubstatusType> OrderDTO::getSubstatus() const
{
    return m_Substatus;
}

void OrderDTO::setSubstatus(const std::shared_ptr<OrderSubstatusType>& value)
{
    m_Substatus = value;
    m_SubstatusIsSet = true;
}

bool OrderDTO::substatusIsSet() const
{
    return m_SubstatusIsSet;
}

void OrderDTO::unsetSubstatus()
{
    m_SubstatusIsSet = false;
}
utility::string_t OrderDTO::getCreationDate() const
{
    return m_CreationDate;
}

void OrderDTO::setCreationDate(const utility::string_t& value)
{
    m_CreationDate = value;
    m_CreationDateIsSet = true;
}

bool OrderDTO::creationDateIsSet() const
{
    return m_CreationDateIsSet;
}

void OrderDTO::unsetCreationDate()
{
    m_CreationDateIsSet = false;
}
utility::string_t OrderDTO::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void OrderDTO::setUpdatedAt(const utility::string_t& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool OrderDTO::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void OrderDTO::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
std::shared_ptr<CurrencyType> OrderDTO::getCurrency() const
{
    return m_Currency;
}

void OrderDTO::setCurrency(const std::shared_ptr<CurrencyType>& value)
{
    m_Currency = value;
    m_CurrencyIsSet = true;
}

bool OrderDTO::currencyIsSet() const
{
    return m_CurrencyIsSet;
}

void OrderDTO::unsetCurrency()
{
    m_CurrencyIsSet = false;
}
double OrderDTO::getItemsTotal() const
{
    return m_ItemsTotal;
}

void OrderDTO::setItemsTotal(double value)
{
    m_ItemsTotal = value;
    m_ItemsTotalIsSet = true;
}

bool OrderDTO::itemsTotalIsSet() const
{
    return m_ItemsTotalIsSet;
}

void OrderDTO::unsetItemsTotal()
{
    m_ItemsTotalIsSet = false;
}
double OrderDTO::getDeliveryTotal() const
{
    return m_DeliveryTotal;
}

void OrderDTO::setDeliveryTotal(double value)
{
    m_DeliveryTotal = value;
    m_DeliveryTotalIsSet = true;
}

bool OrderDTO::deliveryTotalIsSet() const
{
    return m_DeliveryTotalIsSet;
}

void OrderDTO::unsetDeliveryTotal()
{
    m_DeliveryTotalIsSet = false;
}
double OrderDTO::getBuyerItemsTotal() const
{
    return m_BuyerItemsTotal;
}

void OrderDTO::setBuyerItemsTotal(double value)
{
    m_BuyerItemsTotal = value;
    m_BuyerItemsTotalIsSet = true;
}

bool OrderDTO::buyerItemsTotalIsSet() const
{
    return m_BuyerItemsTotalIsSet;
}

void OrderDTO::unsetBuyerItemsTotal()
{
    m_BuyerItemsTotalIsSet = false;
}
double OrderDTO::getBuyerTotal() const
{
    return m_BuyerTotal;
}

void OrderDTO::setBuyerTotal(double value)
{
    m_BuyerTotal = value;
    m_BuyerTotalIsSet = true;
}

bool OrderDTO::buyerTotalIsSet() const
{
    return m_BuyerTotalIsSet;
}

void OrderDTO::unsetBuyerTotal()
{
    m_BuyerTotalIsSet = false;
}
double OrderDTO::getBuyerItemsTotalBeforeDiscount() const
{
    return m_BuyerItemsTotalBeforeDiscount;
}

void OrderDTO::setBuyerItemsTotalBeforeDiscount(double value)
{
    m_BuyerItemsTotalBeforeDiscount = value;
    m_BuyerItemsTotalBeforeDiscountIsSet = true;
}

bool OrderDTO::buyerItemsTotalBeforeDiscountIsSet() const
{
    return m_BuyerItemsTotalBeforeDiscountIsSet;
}

void OrderDTO::unsetBuyerItemsTotalBeforeDiscount()
{
    m_BuyerItemsTotalBeforeDiscountIsSet = false;
}
double OrderDTO::getBuyerTotalBeforeDiscount() const
{
    return m_BuyerTotalBeforeDiscount;
}

void OrderDTO::setBuyerTotalBeforeDiscount(double value)
{
    m_BuyerTotalBeforeDiscount = value;
    m_BuyerTotalBeforeDiscountIsSet = true;
}

bool OrderDTO::buyerTotalBeforeDiscountIsSet() const
{
    return m_BuyerTotalBeforeDiscountIsSet;
}

void OrderDTO::unsetBuyerTotalBeforeDiscount()
{
    m_BuyerTotalBeforeDiscountIsSet = false;
}
std::shared_ptr<OrderPaymentType> OrderDTO::getPaymentType() const
{
    return m_PaymentType;
}

void OrderDTO::setPaymentType(const std::shared_ptr<OrderPaymentType>& value)
{
    m_PaymentType = value;
    m_PaymentTypeIsSet = true;
}

bool OrderDTO::paymentTypeIsSet() const
{
    return m_PaymentTypeIsSet;
}

void OrderDTO::unsetPaymentType()
{
    m_PaymentTypeIsSet = false;
}
std::shared_ptr<OrderPaymentMethodType> OrderDTO::getPaymentMethod() const
{
    return m_PaymentMethod;
}

void OrderDTO::setPaymentMethod(const std::shared_ptr<OrderPaymentMethodType>& value)
{
    m_PaymentMethod = value;
    m_PaymentMethodIsSet = true;
}

bool OrderDTO::paymentMethodIsSet() const
{
    return m_PaymentMethodIsSet;
}

void OrderDTO::unsetPaymentMethod()
{
    m_PaymentMethodIsSet = false;
}
bool OrderDTO::isFake() const
{
    return m_Fake;
}

void OrderDTO::setFake(bool value)
{
    m_Fake = value;
    m_FakeIsSet = true;
}

bool OrderDTO::fakeIsSet() const
{
    return m_FakeIsSet;
}

void OrderDTO::unsetFake()
{
    m_FakeIsSet = false;
}
std::vector<std::shared_ptr<OrderItemDTO>>& OrderDTO::getItems()
{
    return m_Items;
}

void OrderDTO::setItems(const std::vector<std::shared_ptr<OrderItemDTO>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool OrderDTO::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void OrderDTO::unsetItems()
{
    m_ItemsIsSet = false;
}
std::vector<std::shared_ptr<OrderSubsidyDTO>>& OrderDTO::getSubsidies()
{
    return m_Subsidies;
}

void OrderDTO::setSubsidies(const std::vector<std::shared_ptr<OrderSubsidyDTO>>& value)
{
    m_Subsidies = value;
    m_SubsidiesIsSet = true;
}

bool OrderDTO::subsidiesIsSet() const
{
    return m_SubsidiesIsSet;
}

void OrderDTO::unsetSubsidies()
{
    m_SubsidiesIsSet = false;
}
std::shared_ptr<OrderDeliveryDTO> OrderDTO::getDelivery() const
{
    return m_Delivery;
}

void OrderDTO::setDelivery(const std::shared_ptr<OrderDeliveryDTO>& value)
{
    m_Delivery = value;
    m_DeliveryIsSet = true;
}

bool OrderDTO::deliveryIsSet() const
{
    return m_DeliveryIsSet;
}

void OrderDTO::unsetDelivery()
{
    m_DeliveryIsSet = false;
}
std::shared_ptr<OrderBuyerDTO> OrderDTO::getBuyer() const
{
    return m_Buyer;
}

void OrderDTO::setBuyer(const std::shared_ptr<OrderBuyerDTO>& value)
{
    m_Buyer = value;
    m_BuyerIsSet = true;
}

bool OrderDTO::buyerIsSet() const
{
    return m_BuyerIsSet;
}

void OrderDTO::unsetBuyer()
{
    m_BuyerIsSet = false;
}
utility::string_t OrderDTO::getNotes() const
{
    return m_Notes;
}

void OrderDTO::setNotes(const utility::string_t& value)
{
    m_Notes = value;
    m_NotesIsSet = true;
}

bool OrderDTO::notesIsSet() const
{
    return m_NotesIsSet;
}

void OrderDTO::unsetNotes()
{
    m_NotesIsSet = false;
}
std::shared_ptr<OrderTaxSystemType> OrderDTO::getTaxSystem() const
{
    return m_TaxSystem;
}

void OrderDTO::setTaxSystem(const std::shared_ptr<OrderTaxSystemType>& value)
{
    m_TaxSystem = value;
    m_TaxSystemIsSet = true;
}

bool OrderDTO::taxSystemIsSet() const
{
    return m_TaxSystemIsSet;
}

void OrderDTO::unsetTaxSystem()
{
    m_TaxSystemIsSet = false;
}
bool OrderDTO::isCancelRequested() const
{
    return m_CancelRequested;
}

void OrderDTO::setCancelRequested(bool value)
{
    m_CancelRequested = value;
    m_CancelRequestedIsSet = true;
}

bool OrderDTO::cancelRequestedIsSet() const
{
    return m_CancelRequestedIsSet;
}

void OrderDTO::unsetCancelRequested()
{
    m_CancelRequestedIsSet = false;
}
utility::string_t OrderDTO::getExpiryDate() const
{
    return m_ExpiryDate;
}

void OrderDTO::setExpiryDate(const utility::string_t& value)
{
    m_ExpiryDate = value;
    m_ExpiryDateIsSet = true;
}

bool OrderDTO::expiryDateIsSet() const
{
    return m_ExpiryDateIsSet;
}

void OrderDTO::unsetExpiryDate()
{
    m_ExpiryDateIsSet = false;
}
}
}
}
}


