/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ympa_cpp_restsdk_client/model/GoodsFeedbackListDTO.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GoodsFeedbackListDTO::GoodsFeedbackListDTO()
{
    m_FeedbacksIsSet = false;
    m_PagingIsSet = false;
}

GoodsFeedbackListDTO::~GoodsFeedbackListDTO()
{
}

void GoodsFeedbackListDTO::validate()
{
    // TODO: implement validation
}

web::json::value GoodsFeedbackListDTO::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeedbacksIsSet)
    {
        val[utility::conversions::to_string_t(U("feedbacks"))] = ModelBase::toJson(m_Feedbacks);
    }
    if(m_PagingIsSet)
    {
        val[utility::conversions::to_string_t(U("paging"))] = ModelBase::toJson(m_Paging);
    }

    return val;
}

bool GoodsFeedbackListDTO::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("feedbacks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feedbacks")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GoodsFeedbackDTO>> refVal_setFeedbacks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeedbacks);
            setFeedbacks(refVal_setFeedbacks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("paging"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("paging")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ForwardScrollingPagerDTO> refVal_setPaging;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPaging);
            setPaging(refVal_setPaging);
        }
    }
    return ok;
}

void GoodsFeedbackListDTO::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FeedbacksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feedbacks")), m_Feedbacks));
    }
    if(m_PagingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("paging")), m_Paging));
    }
}

bool GoodsFeedbackListDTO::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("feedbacks"))))
    {
        std::vector<std::shared_ptr<GoodsFeedbackDTO>> refVal_setFeedbacks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feedbacks"))), refVal_setFeedbacks );
        setFeedbacks(refVal_setFeedbacks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("paging"))))
    {
        std::shared_ptr<ForwardScrollingPagerDTO> refVal_setPaging;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("paging"))), refVal_setPaging );
        setPaging(refVal_setPaging);
    }
    return ok;
}

std::vector<std::shared_ptr<GoodsFeedbackDTO>>& GoodsFeedbackListDTO::getFeedbacks()
{
    return m_Feedbacks;
}

void GoodsFeedbackListDTO::setFeedbacks(const std::vector<std::shared_ptr<GoodsFeedbackDTO>>& value)
{
    m_Feedbacks = value;
    m_FeedbacksIsSet = true;
}

bool GoodsFeedbackListDTO::feedbacksIsSet() const
{
    return m_FeedbacksIsSet;
}

void GoodsFeedbackListDTO::unsetFeedbacks()
{
    m_FeedbacksIsSet = false;
}
std::shared_ptr<ForwardScrollingPagerDTO> GoodsFeedbackListDTO::getPaging() const
{
    return m_Paging;
}

void GoodsFeedbackListDTO::setPaging(const std::shared_ptr<ForwardScrollingPagerDTO>& value)
{
    m_Paging = value;
    m_PagingIsSet = true;
}

bool GoodsFeedbackListDTO::pagingIsSet() const
{
    return m_PagingIsSet;
}

void GoodsFeedbackListDTO::unsetPaging()
{
    m_PagingIsSet = false;
}
}
}
}
}


