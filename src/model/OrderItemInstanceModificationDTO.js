/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BriefOrderItemInstanceDTO from './BriefOrderItemInstanceDTO';

/**
 * The OrderItemInstanceModificationDTO model module.
 * @module model/OrderItemInstanceModificationDTO
 * @version LATEST
 */
class OrderItemInstanceModificationDTO {
    /**
     * Constructs a new <code>OrderItemInstanceModificationDTO</code>.
     * Позиция в корзине, требующая маркировки.
     * @alias module:model/OrderItemInstanceModificationDTO
     * @param id {Number} Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
     * @param instances {Array.<module:model/BriefOrderItemInstanceDTO>} Список кодов маркировки единиц товара. 
     */
    constructor(id, instances) { 
        
        OrderItemInstanceModificationDTO.initialize(this, id, instances);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, instances) { 
        obj['id'] = id;
        obj['instances'] = instances;
    }

    /**
     * Constructs a <code>OrderItemInstanceModificationDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderItemInstanceModificationDTO} obj Optional instance to populate.
     * @return {module:model/OrderItemInstanceModificationDTO} The populated <code>OrderItemInstanceModificationDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderItemInstanceModificationDTO();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [BriefOrderItemInstanceDTO]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderItemInstanceModificationDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderItemInstanceModificationDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderItemInstanceModificationDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                BriefOrderItemInstanceDTO.validateJSON(item);
            };
        }

        return true;
    }


}

OrderItemInstanceModificationDTO.RequiredProperties = ["id", "instances"];

/**
 * Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
 * @member {Number} id
 */
OrderItemInstanceModificationDTO.prototype['id'] = undefined;

/**
 * Список кодов маркировки единиц товара. 
 * @member {Array.<module:model/BriefOrderItemInstanceDTO>} instances
 */
OrderItemInstanceModificationDTO.prototype['instances'] = undefined;






export default OrderItemInstanceModificationDTO;

