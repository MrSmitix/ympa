/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import AddOffersToArchiveRequest from '../model/AddOffersToArchiveRequest';
import AddOffersToArchiveResponse from '../model/AddOffersToArchiveResponse';
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiLockedErrorResponse from '../model/ApiLockedErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import DeleteOffersFromArchiveRequest from '../model/DeleteOffersFromArchiveRequest';
import DeleteOffersFromArchiveResponse from '../model/DeleteOffersFromArchiveResponse';
import DeleteOffersRequest from '../model/DeleteOffersRequest';
import DeleteOffersResponse from '../model/DeleteOffersResponse';
import GetOfferMappingsRequest from '../model/GetOfferMappingsRequest';
import GetOfferMappingsResponse from '../model/GetOfferMappingsResponse';
import GetSuggestedOfferMappingsRequest from '../model/GetSuggestedOfferMappingsRequest';
import GetSuggestedOfferMappingsResponse from '../model/GetSuggestedOfferMappingsResponse';
import UpdateOfferMappingsRequest from '../model/UpdateOfferMappingsRequest';
import UpdateOfferMappingsResponse from '../model/UpdateOfferMappingsResponse';

/**
* BusinessOfferMappings service.
* @module api/BusinessOfferMappingsApi
* @version LATEST
*/
export default class BusinessOfferMappingsApi extends ApiClient {

    /**
    * Constructs a new BusinessOfferMappingsApi. 
    * @alias module:api/BusinessOfferMappingsApi
    * @class
    */
    constructor(baseURL = 'https://api.partner.market.yandex.ru') {
      super(baseURL);
    }


    /**
     * Добавление товаров в архив
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/AddOffersToArchiveRequest} addOffersToArchiveRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/AddOffersToArchiveResponse>}
     */
    async addOffersToArchive(businessId, addOffersToArchiveRequest, requestInit) {
      let postBody = addOffersToArchiveRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling addOffersToArchive");
      }
      // verify the required parameter 'addOffersToArchiveRequest' is set
      if (addOffersToArchiveRequest === undefined || addOffersToArchiveRequest === null) {
        throw new Error("Missing the required parameter 'addOffersToArchiveRequest' when calling addOffersToArchive");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddOffersToArchiveResponse;

      return this.callApi(
        '/businesses/{businessId}/offer-mappings/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Удаление товаров из каталога
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/DeleteOffersRequest} deleteOffersRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/DeleteOffersResponse>}
     */
    async deleteOffers(businessId, deleteOffersRequest, requestInit) {
      let postBody = deleteOffersRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling deleteOffers");
      }
      // verify the required parameter 'deleteOffersRequest' is set
      if (deleteOffersRequest === undefined || deleteOffersRequest === null) {
        throw new Error("Missing the required parameter 'deleteOffersRequest' when calling deleteOffers");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteOffersResponse;

      return this.callApi(
        '/businesses/{businessId}/offer-mappings/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Удаление товаров из архива
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/DeleteOffersFromArchiveRequest} deleteOffersFromArchiveRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/DeleteOffersFromArchiveResponse>}
     */
    async deleteOffersFromArchive(businessId, deleteOffersFromArchiveRequest, requestInit) {
      let postBody = deleteOffersFromArchiveRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling deleteOffersFromArchive");
      }
      // verify the required parameter 'deleteOffersFromArchiveRequest' is set
      if (deleteOffersFromArchiveRequest === undefined || deleteOffersFromArchiveRequest === null) {
        throw new Error("Missing the required parameter 'deleteOffersFromArchiveRequest' when calling deleteOffersFromArchive");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteOffersFromArchiveResponse;

      return this.callApi(
        '/businesses/{businessId}/offer-mappings/unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Информация о товарах в каталоге
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} opts.limit Количество значений на одной странице. 
     * @param {module:model/GetOfferMappingsRequest} opts.getOfferMappingsRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GetOfferMappingsResponse>}
     */
    async getOfferMappings(businessId, opts, requestInit) {
      opts = opts || {};
      let postBody = opts['getOfferMappingsRequest'];
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getOfferMappings");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'page_token': opts['pageToken'],
        'limit': opts['limit']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOfferMappingsResponse;

      return this.callApi(
        '/businesses/{businessId}/offer-mappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Просмотр карточек на Маркете, которые подходят вашим товарам
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Object} opts Optional parameters
     * @param {module:model/GetSuggestedOfferMappingsRequest} opts.getSuggestedOfferMappingsRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GetSuggestedOfferMappingsResponse>}
     */
    async getSuggestedOfferMappings(businessId, opts, requestInit) {
      opts = opts || {};
      let postBody = opts['getSuggestedOfferMappingsRequest'];
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getSuggestedOfferMappings");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSuggestedOfferMappingsResponse;

      return this.callApi(
        '/businesses/{businessId}/offer-mappings/suggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Добавление товаров в каталог и изменение информации о них
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/UpdateOfferMappingsRequest} updateOfferMappingsRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/UpdateOfferMappingsResponse>}
     */
    async updateOfferMappings(businessId, updateOfferMappingsRequest, requestInit) {
      let postBody = updateOfferMappingsRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling updateOfferMappings");
      }
      // verify the required parameter 'updateOfferMappingsRequest' is set
      if (updateOfferMappingsRequest === undefined || updateOfferMappingsRequest === null) {
        throw new Error("Missing the required parameter 'updateOfferMappingsRequest' when calling updateOfferMappings");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateOfferMappingsResponse;

      return this.callApi(
        '/businesses/{businessId}/offer-mappings/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }


}
