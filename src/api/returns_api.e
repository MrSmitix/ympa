note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	RETURNS_API

inherit

    API_I


feature -- API Access


	return (campaign_id: INTEGER_64; order_id: INTEGER_64; return_id: INTEGER_64): detachable GET_RETURN_RESPONSE
			-- Информация о невыкупе или возврате
			-- Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
			-- 
			-- argument: campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
			-- 
			-- argument: order_id Идентификатор заказа. (required)
			-- 
			-- argument: return_id Идентификатор возврата. (required)
			-- 
			-- 
			-- Result GET_RETURN_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}"
			l_path.replace_substring_all ("{"+"campaignId"+"}", api_client.url_encode (campaign_id.out))
			l_path.replace_substring_all ("{"+"orderId"+"}", api_client.url_encode (order_id.out))
			l_path.replace_substring_all ("{"+"returnId"+"}", api_client.url_encode (return_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"OAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GET_RETURN_RESPONSE } l_response.data ({ GET_RETURN_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	return_application (campaign_id: INTEGER_64; order_id: INTEGER_64; return_id: INTEGER_64): detachable FILE
			-- Получение заявления на возврат
			-- Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
			-- 
			-- argument: campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
			-- 
			-- argument: order_id Идентификатор заказа. (required)
			-- 
			-- argument: return_id Идентификатор возврата. (required)
			-- 
			-- 
			-- Result FILE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application"
			l_path.replace_substring_all ("{"+"campaignId"+"}", api_client.url_encode (campaign_id.out))
			l_path.replace_substring_all ("{"+"orderId"+"}", api_client.url_encode (order_id.out))
			l_path.replace_substring_all ("{"+"returnId"+"}", api_client.url_encode (return_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/octet-stream", "application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"OAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FILE } l_response.data ({ FILE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	return_photo (campaign_id: INTEGER_64; order_id: INTEGER_64; return_id: INTEGER_64; item_id: INTEGER_64; image_hash: STRING_32): detachable FILE
			-- Получение фотографии возврата
			-- Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
			-- 
			-- argument: campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
			-- 
			-- argument: order_id Идентификатор заказа. (required)
			-- 
			-- argument: return_id Идентификатор возврата. (required)
			-- 
			-- argument: item_id Идентификатор товара в возврате. (required)
			-- 
			-- argument: image_hash Хеш ссылки изображения для загрузки. (required)
			-- 
			-- 
			-- Result FILE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}"
			l_path.replace_substring_all ("{"+"campaignId"+"}", api_client.url_encode (campaign_id.out))
			l_path.replace_substring_all ("{"+"orderId"+"}", api_client.url_encode (order_id.out))
			l_path.replace_substring_all ("{"+"returnId"+"}", api_client.url_encode (return_id.out))
			l_path.replace_substring_all ("{"+"itemId"+"}", api_client.url_encode (item_id.out))
			l_path.replace_substring_all ("{"+"imageHash"+"}", api_client.url_encode (image_hash.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/octet-stream", "application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"OAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FILE } l_response.data ({ FILE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	returns (campaign_id: INTEGER_64; page_token: STRING_32; limit: INTEGER_32; order_ids: detachable LIST [INTEGER_64]; statuses: detachable LIST [REFUND_STATUS_TYPE]; type: detachable RETURN_TYPE; from_date: DATE; to_date: DATE; from_date2: DATE; to_date2: DATE): detachable GET_RETURNS_RESPONSE
			-- Список невыкупов и возвратов
			-- Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
			-- 
			-- argument: campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
			-- 
			-- argument: page_token Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional, default to null)
			-- 
			-- argument: limit Количество значений на одной странице.  (optional, default to null)
			-- 
			-- argument: order_ids Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.  (optional, default to null)
			-- 
			-- argument: statuses Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую.  (optional, default to null)
			-- 
			-- argument: type Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы.  (optional, default to null)
			-- 
			-- argument: from_date Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional, default to null)
			-- 
			-- argument: to_date Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.  (optional, default to null)
			-- 
			-- argument: from_date2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional, default to null)
			-- 
			-- argument: to_date2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  (optional, default to null)
			-- 
			-- 
			-- Result GET_RETURNS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/campaigns/{campaignId}/returns"
			l_path.replace_substring_all ("{"+"campaignId"+"}", api_client.url_encode (campaign_id.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page_token", page_token));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "limit", limit));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "orderIds", order_ids));
			l_request.fill_query_params(api_client.parameter_to_tuple("csv", "statuses", statuses));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "type", type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "fromDate", from_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "toDate", to_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from_date", from_date2));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "to_date", to_date2));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"OAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { GET_RETURNS_RESPONSE } l_response.data ({ GET_RETURNS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	set_return_decision (campaign_id: INTEGER_64; order_id: INTEGER_64; return_id: INTEGER_64; set_return_decision_request: SET_RETURN_DECISION_REQUEST): detachable EMPTY_API_RESPONSE
			-- Принятие или изменение решения по возврату
			-- Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
			-- 
			-- argument: campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
			-- 
			-- argument: order_id Идентификатор заказа. (required)
			-- 
			-- argument: return_id Идентификатор возврата. (required)
			-- 
			-- argument: set_return_decision_request  (required)
			-- 
			-- 
			-- Result EMPTY_API_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(set_return_decision_request)
			l_path := "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision"
			l_path.replace_substring_all ("{"+"campaignId"+"}", api_client.url_encode (campaign_id.out))
			l_path.replace_substring_all ("{"+"orderId"+"}", api_client.url_encode (order_id.out))
			l_path.replace_substring_all ("{"+"returnId"+"}", api_client.url_encode (return_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"OAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { EMPTY_API_RESPONSE } l_response.data ({ EMPTY_API_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	submit_return_decision (campaign_id: INTEGER_64; order_id: INTEGER_64; return_id: INTEGER_64): detachable EMPTY_API_RESPONSE
			-- Подтверждение решения по возврату
			-- Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
			-- 
			-- argument: campaign_id Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
			-- 
			-- argument: order_id Идентификатор заказа. (required)
			-- 
			-- argument: return_id Идентификатор возврата. (required)
			-- 
			-- 
			-- Result EMPTY_API_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit"
			l_path.replace_substring_all ("{"+"campaignId"+"}", api_client.url_encode (campaign_id.out))
			l_path.replace_substring_all ("{"+"orderId"+"}", api_client.url_encode (order_id.out))
			l_path.replace_substring_all ("{"+"returnId"+"}", api_client.url_encode (return_id.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"OAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { EMPTY_API_RESPONSE } l_response.data ({ EMPTY_API_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
