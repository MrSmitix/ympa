/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import EmptyApiResponse from '../model/EmptyApiResponse';
import GetReturnResponse from '../model/GetReturnResponse';
import GetReturnsResponse from '../model/GetReturnsResponse';
import RefundStatusType from '../model/RefundStatusType';
import ReturnType from '../model/ReturnType';
import SetReturnDecisionRequest from '../model/SetReturnDecisionRequest';

/**
* Returns service.
* @module api/ReturnsApi
* @version LATEST
*/
export default class ReturnsApi {

    /**
    * Constructs a new ReturnsApi. 
    * @alias module:api/ReturnsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getReturn operation.
     * @callback module:api/ReturnsApi~getReturnCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReturnResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о невыкупе или возврате
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {Number} returnId Идентификатор возврата.
     * @param {module:api/ReturnsApi~getReturnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReturnResponse}
     */
    getReturn(campaignId, orderId, returnId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReturn");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getReturn");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling getReturn");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId,
        'returnId': returnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReturnResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturnApplication operation.
     * @callback module:api/ReturnsApi~getReturnApplicationCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение заявления на возврат
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {Number} returnId Идентификатор возврата.
     * @param {module:api/ReturnsApi~getReturnApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getReturnApplication(campaignId, orderId, returnId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReturnApplication");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getReturnApplication");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling getReturnApplication");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId,
        'returnId': returnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturnPhoto operation.
     * @callback module:api/ReturnsApi~getReturnPhotoCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение фотографии возврата
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {Number} returnId Идентификатор возврата.
     * @param {Number} itemId Идентификатор товара в возврате.
     * @param {String} imageHash Хеш ссылки изображения для загрузки.
     * @param {module:api/ReturnsApi~getReturnPhotoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getReturnPhoto(campaignId, orderId, returnId, itemId, imageHash, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReturnPhoto");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getReturnPhoto");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling getReturnPhoto");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getReturnPhoto");
      }
      // verify the required parameter 'imageHash' is set
      if (imageHash === undefined || imageHash === null) {
        throw new Error("Missing the required parameter 'imageHash' when calling getReturnPhoto");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId,
        'returnId': returnId,
        'itemId': itemId,
        'imageHash': imageHash
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReturns operation.
     * @callback module:api/ReturnsApi~getReturnsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReturnsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список невыкупов и возвратов
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} [limit] Количество значений на одной странице. 
     * @param {Array.<Number>} [orderIds] Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
     * @param {Array.<module:model/RefundStatusType>} [statuses] Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
     * @param {module:model/ReturnType} [type] Тип заказа для фильтрации:  * `RETURN` — возврат.  * `UNREDEEMED` — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
     * @param {Date} [fromDate] Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
     * @param {Date} [toDate] Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: `ГГГГ-ММ-ДД`. 
     * @param {Date} [fromDate2] {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `fromDate`.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
     * @param {Date} [toDate2] {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `toDate`.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
     * @param {module:api/ReturnsApi~getReturnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReturnsResponse}
     */
    getReturns(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getReturns");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'page_token': opts['pageToken'],
        'limit': opts['limit'],
        'orderIds': this.apiClient.buildCollectionParam(opts['orderIds'], 'csv'),
        'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'csv'),
        'type': opts['type'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'from_date': opts['fromDate2'],
        'to_date': opts['toDate2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReturnsResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/returns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setReturnDecision operation.
     * @callback module:api/ReturnsApi~setReturnDecisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Принятие или изменение решения по возврату
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {Number} returnId Идентификатор возврата.
     * @param {module:model/SetReturnDecisionRequest} setReturnDecisionRequest 
     * @param {module:api/ReturnsApi~setReturnDecisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    setReturnDecision(campaignId, orderId, returnId, setReturnDecisionRequest, callback) {
      let postBody = setReturnDecisionRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling setReturnDecision");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling setReturnDecision");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling setReturnDecision");
      }
      // verify the required parameter 'setReturnDecisionRequest' is set
      if (setReturnDecisionRequest === undefined || setReturnDecisionRequest === null) {
        throw new Error("Missing the required parameter 'setReturnDecisionRequest' when calling setReturnDecision");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId,
        'returnId': returnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitReturnDecision operation.
     * @callback module:api/ReturnsApi~submitReturnDecisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Подтверждение решения по возврату
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} orderId Идентификатор заказа.
     * @param {Number} returnId Идентификатор возврата.
     * @param {module:api/ReturnsApi~submitReturnDecisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    submitReturnDecision(campaignId, orderId, returnId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling submitReturnDecision");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling submitReturnDecision");
      }
      // verify the required parameter 'returnId' is set
      if (returnId === undefined || returnId === null) {
        throw new Error("Missing the required parameter 'returnId' when calling submitReturnDecision");
      }

      let pathParams = {
        'campaignId': campaignId,
        'orderId': orderId,
        'returnId': returnId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
