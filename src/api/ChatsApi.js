/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import CreateChatRequest from '../model/CreateChatRequest';
import CreateChatResponse from '../model/CreateChatResponse';
import EmptyApiResponse from '../model/EmptyApiResponse';
import GetChatHistoryRequest from '../model/GetChatHistoryRequest';
import GetChatHistoryResponse from '../model/GetChatHistoryResponse';
import GetChatsRequest from '../model/GetChatsRequest';
import GetChatsResponse from '../model/GetChatsResponse';
import SendMessageToChatRequest from '../model/SendMessageToChatRequest';

/**
* Chats service.
* @module api/ChatsApi
* @version LATEST
*/
export default class ChatsApi {

    /**
    * Constructs a new ChatsApi. 
    * @alias module:api/ChatsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChat operation.
     * @callback module:api/ChatsApi~createChatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание нового чата с покупателем
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/CreateChatRequest} createChatRequest description
     * @param {module:api/ChatsApi~createChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChatResponse}
     */
    createChat(businessId, createChatRequest, callback) {
      let postBody = createChatRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling createChat");
      }
      // verify the required parameter 'createChatRequest' is set
      if (createChatRequest === undefined || createChatRequest === null) {
        throw new Error("Missing the required parameter 'createChatRequest' when calling createChat");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChatResponse;
      return this.apiClient.callApi(
        '/businesses/{businessId}/chats/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChatHistory operation.
     * @callback module:api/ChatsApi~getChatHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение истории сообщений в чате
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} chatId Идентификатор чата.
     * @param {module:model/GetChatHistoryRequest} getChatHistoryRequest description
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} [limit] Количество значений на одной странице. 
     * @param {module:api/ChatsApi~getChatHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatHistoryResponse}
     */
    getChatHistory(businessId, chatId, getChatHistoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = getChatHistoryRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getChatHistory");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling getChatHistory");
      }
      // verify the required parameter 'getChatHistoryRequest' is set
      if (getChatHistoryRequest === undefined || getChatHistoryRequest === null) {
        throw new Error("Missing the required parameter 'getChatHistoryRequest' when calling getChatHistory");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'chatId': chatId,
        'page_token': opts['pageToken'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetChatHistoryResponse;
      return this.apiClient.callApi(
        '/businesses/{businessId}/chats/history', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChats operation.
     * @callback module:api/ChatsApi~getChatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получение доступных чатов
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/GetChatsRequest} getChatsRequest description
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} [limit] Количество значений на одной странице. 
     * @param {module:api/ChatsApi~getChatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChatsResponse}
     */
    getChats(businessId, getChatsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getChatsRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getChats");
      }
      // verify the required parameter 'getChatsRequest' is set
      if (getChatsRequest === undefined || getChatsRequest === null) {
        throw new Error("Missing the required parameter 'getChatsRequest' when calling getChats");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'page_token': opts['pageToken'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetChatsResponse;
      return this.apiClient.callApi(
        '/businesses/{businessId}/chats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendFileToChat operation.
     * @callback module:api/ChatsApi~sendFileToChatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отправка файла в чат
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} chatId Идентификатор чата.
     * @param {File} file Содержимое файла. Максимальный размер файла — 5 Мбайт.
     * @param {module:api/ChatsApi~sendFileToChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    sendFileToChat(businessId, chatId, file, callback) {
      let postBody = null;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling sendFileToChat");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendFileToChat");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling sendFileToChat");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'chatId': chatId
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['OAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/businesses/{businessId}/chats/file/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessageToChat operation.
     * @callback module:api/ChatsApi~sendMessageToChatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отправка сообщения в чат
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} chatId Идентификатор чата.
     * @param {module:model/SendMessageToChatRequest} sendMessageToChatRequest description
     * @param {module:api/ChatsApi~sendMessageToChatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    sendMessageToChat(businessId, chatId, sendMessageToChatRequest, callback) {
      let postBody = sendMessageToChatRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling sendMessageToChat");
      }
      // verify the required parameter 'chatId' is set
      if (chatId === undefined || chatId === null) {
        throw new Error("Missing the required parameter 'chatId' when calling sendMessageToChat");
      }
      // verify the required parameter 'sendMessageToChatRequest' is set
      if (sendMessageToChatRequest === undefined || sendMessageToChatRequest === null) {
        throw new Error("Missing the required parameter 'sendMessageToChatRequest' when calling sendMessageToChat");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'chatId': chatId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/businesses/{businessId}/chats/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
