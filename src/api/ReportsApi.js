/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import GenerateBoostConsolidatedRequest from '../model/GenerateBoostConsolidatedRequest';
import GenerateCompetitorsPositionReportRequest from '../model/GenerateCompetitorsPositionReportRequest';
import GenerateGoodsFeedbackRequest from '../model/GenerateGoodsFeedbackRequest';
import GenerateGoodsMovementReportRequest from '../model/GenerateGoodsMovementReportRequest';
import GenerateGoodsRealizationReportRequest from '../model/GenerateGoodsRealizationReportRequest';
import GenerateGoodsTurnoverRequest from '../model/GenerateGoodsTurnoverRequest';
import GenerateMassOrderLabelsRequest from '../model/GenerateMassOrderLabelsRequest';
import GeneratePricesReportRequest from '../model/GeneratePricesReportRequest';
import GenerateReportResponse from '../model/GenerateReportResponse';
import GenerateShelfsStatisticsRequest from '../model/GenerateShelfsStatisticsRequest';
import GenerateShipmentListDocumentReportRequest from '../model/GenerateShipmentListDocumentReportRequest';
import GenerateShowsSalesReportRequest from '../model/GenerateShowsSalesReportRequest';
import GenerateStocksOnWarehousesReportRequest from '../model/GenerateStocksOnWarehousesReportRequest';
import GenerateUnitedMarketplaceServicesReportRequest from '../model/GenerateUnitedMarketplaceServicesReportRequest';
import GenerateUnitedNettingReportRequest from '../model/GenerateUnitedNettingReportRequest';
import GenerateUnitedOrdersRequest from '../model/GenerateUnitedOrdersRequest';
import GetReportInfoResponse from '../model/GetReportInfoResponse';
import PageFormatType from '../model/PageFormatType';
import ReportFormatType from '../model/ReportFormatType';

/**
* Reports service.
* @module api/ReportsApi
* @version LATEST
*/
export default class ReportsApi extends ApiClient {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    */
    constructor(baseURL = 'https://api.partner.market.yandex.ru') {
      super(baseURL);
    }


    /**
     * Отчет по бусту продаж
     * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateBoostConsolidatedRequest} generateBoostConsolidatedRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateBoostConsolidatedReport(generateBoostConsolidatedRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateBoostConsolidatedRequest;
      // verify the required parameter 'generateBoostConsolidatedRequest' is set
      if (generateBoostConsolidatedRequest === undefined || generateBoostConsolidatedRequest === null) {
        throw new Error("Missing the required parameter 'generateBoostConsolidatedRequest' when calling generateBoostConsolidatedReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/boost-consolidated/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет «Конкурентная позиция»
     * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * @param {module:model/GenerateCompetitorsPositionReportRequest} generateCompetitorsPositionReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateCompetitorsPositionReport(generateCompetitorsPositionReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateCompetitorsPositionReportRequest;
      // verify the required parameter 'generateCompetitorsPositionReportRequest' is set
      if (generateCompetitorsPositionReportRequest === undefined || generateCompetitorsPositionReportRequest === null) {
        throw new Error("Missing the required parameter 'generateCompetitorsPositionReportRequest' when calling generateCompetitorsPositionReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/competitors-position/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по отзывам о товарах
     * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateGoodsFeedbackRequest} generateGoodsFeedbackRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateGoodsFeedbackReport(generateGoodsFeedbackRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateGoodsFeedbackRequest;
      // verify the required parameter 'generateGoodsFeedbackRequest' is set
      if (generateGoodsFeedbackRequest === undefined || generateGoodsFeedbackRequest === null) {
        throw new Error("Missing the required parameter 'generateGoodsFeedbackRequest' when calling generateGoodsFeedbackReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/goods-feedback/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по движению товаров
     * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateGoodsMovementReportRequest} generateGoodsMovementReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateGoodsMovementReport(generateGoodsMovementReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateGoodsMovementReportRequest;
      // verify the required parameter 'generateGoodsMovementReportRequest' is set
      if (generateGoodsMovementReportRequest === undefined || generateGoodsMovementReportRequest === null) {
        throw new Error("Missing the required parameter 'generateGoodsMovementReportRequest' when calling generateGoodsMovementReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/goods-movement/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по реализации
     * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateGoodsRealizationReportRequest} generateGoodsRealizationReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateGoodsRealizationReport(generateGoodsRealizationReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateGoodsRealizationReportRequest;
      // verify the required parameter 'generateGoodsRealizationReportRequest' is set
      if (generateGoodsRealizationReportRequest === undefined || generateGoodsRealizationReportRequest === null) {
        throw new Error("Missing the required parameter 'generateGoodsRealizationReportRequest' when calling generateGoodsRealizationReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/goods-realization/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по оборачиваемости
     * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateGoodsTurnoverRequest} generateGoodsTurnoverRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateGoodsTurnoverReport(generateGoodsTurnoverRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateGoodsTurnoverRequest;
      // verify the required parameter 'generateGoodsTurnoverRequest' is set
      if (generateGoodsTurnoverRequest === undefined || generateGoodsTurnoverRequest === null) {
        throw new Error("Missing the required parameter 'generateGoodsTurnoverRequest' when calling generateGoodsTurnoverReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/goods-turnover/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param {module:model/GenerateMassOrderLabelsRequest} generateMassOrderLabelsRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/PageFormatType} opts.format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateMassOrderLabelsReport(generateMassOrderLabelsRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateMassOrderLabelsRequest;
      // verify the required parameter 'generateMassOrderLabelsRequest' is set
      if (generateMassOrderLabelsRequest === undefined || generateMassOrderLabelsRequest === null) {
        throw new Error("Missing the required parameter 'generateMassOrderLabelsRequest' when calling generateMassOrderLabelsReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/documents/labels/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет «Цены на рынке»
     * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GeneratePricesReportRequest} generatePricesReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generatePricesReport(generatePricesReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generatePricesReportRequest;
      // verify the required parameter 'generatePricesReportRequest' is set
      if (generatePricesReportRequest === undefined || generatePricesReportRequest === null) {
        throw new Error("Missing the required parameter 'generatePricesReportRequest' when calling generatePricesReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/prices/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по полкам
     * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateShelfsStatisticsRequest} generateShelfsStatisticsRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateShelfsStatisticsReport(generateShelfsStatisticsRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateShelfsStatisticsRequest;
      // verify the required parameter 'generateShelfsStatisticsRequest' is set
      if (generateShelfsStatisticsRequest === undefined || generateShelfsStatisticsRequest === null) {
        throw new Error("Missing the required parameter 'generateShelfsStatisticsRequest' when calling generateShelfsStatisticsReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/shelf-statistics/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Получение листа сборки
     * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateShipmentListDocumentReportRequest} generateShipmentListDocumentReportRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateShipmentListDocumentReport(generateShipmentListDocumentReportRequest, requestInit) {
      let postBody = generateShipmentListDocumentReportRequest;
      // verify the required parameter 'generateShipmentListDocumentReportRequest' is set
      if (generateShipmentListDocumentReportRequest === undefined || generateShipmentListDocumentReportRequest === null) {
        throw new Error("Missing the required parameter 'generateShipmentListDocumentReportRequest' when calling generateShipmentListDocumentReport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/documents/shipment-list/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет «Аналитика продаж»
     * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
     * @param {module:model/GenerateShowsSalesReportRequest} generateShowsSalesReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateShowsSalesReport(generateShowsSalesReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateShowsSalesReportRequest;
      // verify the required parameter 'generateShowsSalesReportRequest' is set
      if (generateShowsSalesReportRequest === undefined || generateShowsSalesReportRequest === null) {
        throw new Error("Missing the required parameter 'generateShowsSalesReportRequest' when calling generateShowsSalesReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/shows-sales/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по остаткам на складах
     * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateStocksOnWarehousesReportRequest} generateStocksOnWarehousesReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateStocksOnWarehousesReport(generateStocksOnWarehousesReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateStocksOnWarehousesReportRequest;
      // verify the required parameter 'generateStocksOnWarehousesReportRequest' is set
      if (generateStocksOnWarehousesReportRequest === undefined || generateStocksOnWarehousesReportRequest === null) {
        throw new Error("Missing the required parameter 'generateStocksOnWarehousesReportRequest' when calling generateStocksOnWarehousesReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/stocks-on-warehouses/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по стоимости услуг
     * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateUnitedMarketplaceServicesReportRequest} generateUnitedMarketplaceServicesReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateUnitedMarketplaceServicesReport(generateUnitedMarketplaceServicesReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateUnitedMarketplaceServicesReportRequest;
      // verify the required parameter 'generateUnitedMarketplaceServicesReportRequest' is set
      if (generateUnitedMarketplaceServicesReportRequest === undefined || generateUnitedMarketplaceServicesReportRequest === null) {
        throw new Error("Missing the required parameter 'generateUnitedMarketplaceServicesReportRequest' when calling generateUnitedMarketplaceServicesReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/united-marketplace-services/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по платежам
     * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateUnitedNettingReportRequest} generateUnitedNettingReportRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateUnitedNettingReport(generateUnitedNettingReportRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateUnitedNettingReportRequest;
      // verify the required parameter 'generateUnitedNettingReportRequest' is set
      if (generateUnitedNettingReportRequest === undefined || generateUnitedNettingReportRequest === null) {
        throw new Error("Missing the required parameter 'generateUnitedNettingReportRequest' when calling generateUnitedNettingReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/united-netting/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отчет по заказам
     * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param {module:model/GenerateUnitedOrdersRequest} generateUnitedOrdersRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/ReportFormatType} opts.format Формат отчета.
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GenerateReportResponse>}
     */
    async generateUnitedOrdersReport(generateUnitedOrdersRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = generateUnitedOrdersRequest;
      // verify the required parameter 'generateUnitedOrdersRequest' is set
      if (generateUnitedOrdersRequest === undefined || generateUnitedOrdersRequest === null) {
        throw new Error("Missing the required parameter 'generateUnitedOrdersRequest' when calling generateUnitedOrdersReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateReportResponse;

      return this.callApi(
        '/reports/united-orders/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Получение заданного отчета
     * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     * @param {String} reportId Идентификатор отчета, который вы получили после запуска генерации. 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GetReportInfoResponse>}
     */
    async getReportInfo(reportId, requestInit) {
      let postBody = null;
      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getReportInfo");
      }

      let pathParams = {
        'reportId': reportId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReportInfoResponse;

      return this.callApi(
        '/reports/info/{reportId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }


}
