/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import DeleteGoodsFeedbackCommentRequest from '../model/DeleteGoodsFeedbackCommentRequest';
import EmptyApiResponse from '../model/EmptyApiResponse';
import GetGoodsFeedbackCommentsRequest from '../model/GetGoodsFeedbackCommentsRequest';
import GetGoodsFeedbackCommentsResponse from '../model/GetGoodsFeedbackCommentsResponse';
import GetGoodsFeedbackRequest from '../model/GetGoodsFeedbackRequest';
import GetGoodsFeedbackResponse from '../model/GetGoodsFeedbackResponse';
import SkipGoodsFeedbackReactionRequest from '../model/SkipGoodsFeedbackReactionRequest';
import UpdateGoodsFeedbackCommentRequest from '../model/UpdateGoodsFeedbackCommentRequest';
import UpdateGoodsFeedbackCommentResponse from '../model/UpdateGoodsFeedbackCommentResponse';

/**
* GoodsFeedback service.
* @module api/GoodsFeedbackApi
* @version LATEST
*/
export default class GoodsFeedbackApi extends ApiClient {

    /**
    * Constructs a new GoodsFeedbackApi. 
    * @alias module:api/GoodsFeedbackApi
    * @class
    */
    constructor(baseURL = 'https://api.partner.market.yandex.ru') {
      super(baseURL);
    }


    /**
     * Удаление комментария к отзыву
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/DeleteGoodsFeedbackCommentRequest} deleteGoodsFeedbackCommentRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/EmptyApiResponse>}
     */
    async deleteGoodsFeedbackComment(businessId, deleteGoodsFeedbackCommentRequest, requestInit) {
      let postBody = deleteGoodsFeedbackCommentRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling deleteGoodsFeedbackComment");
      }
      // verify the required parameter 'deleteGoodsFeedbackCommentRequest' is set
      if (deleteGoodsFeedbackCommentRequest === undefined || deleteGoodsFeedbackCommentRequest === null) {
        throw new Error("Missing the required parameter 'deleteGoodsFeedbackCommentRequest' when calling deleteGoodsFeedbackComment");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;

      return this.callApi(
        '/businesses/{businessId}/goods-feedback/comments/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Получение комментариев к отзыву
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/GetGoodsFeedbackCommentsRequest} getGoodsFeedbackCommentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} opts.limit Количество значений на одной странице. 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GetGoodsFeedbackCommentsResponse>}
     */
    async getGoodsFeedbackComments(businessId, getGoodsFeedbackCommentsRequest, opts, requestInit) {
      opts = opts || {};
      let postBody = getGoodsFeedbackCommentsRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getGoodsFeedbackComments");
      }
      // verify the required parameter 'getGoodsFeedbackCommentsRequest' is set
      if (getGoodsFeedbackCommentsRequest === undefined || getGoodsFeedbackCommentsRequest === null) {
        throw new Error("Missing the required parameter 'getGoodsFeedbackCommentsRequest' when calling getGoodsFeedbackComments");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'page_token': opts['pageToken'],
        'limit': opts['limit']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGoodsFeedbackCommentsResponse;

      return this.callApi(
        '/businesses/{businessId}/goods-feedback/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Получение отзывов о товарах продавца
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} opts.limit Количество значений на одной странице. 
     * @param {module:model/GetGoodsFeedbackRequest} opts.getGoodsFeedbackRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/GetGoodsFeedbackResponse>}
     */
    async getGoodsFeedbacks(businessId, opts, requestInit) {
      opts = opts || {};
      let postBody = opts['getGoodsFeedbackRequest'];
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling getGoodsFeedbacks");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
        'page_token': opts['pageToken'],
        'limit': opts['limit']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGoodsFeedbackResponse;

      return this.callApi(
        '/businesses/{businessId}/goods-feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Отказ от ответа на отзывы
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/SkipGoodsFeedbackReactionRequest} skipGoodsFeedbackReactionRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/EmptyApiResponse>}
     */
    async skipGoodsFeedbacksReaction(businessId, skipGoodsFeedbackReactionRequest, requestInit) {
      let postBody = skipGoodsFeedbackReactionRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling skipGoodsFeedbacksReaction");
      }
      // verify the required parameter 'skipGoodsFeedbackReactionRequest' is set
      if (skipGoodsFeedbackReactionRequest === undefined || skipGoodsFeedbackReactionRequest === null) {
        throw new Error("Missing the required parameter 'skipGoodsFeedbackReactionRequest' when calling skipGoodsFeedbacksReaction");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;

      return this.callApi(
        '/businesses/{businessId}/goods-feedback/skip-reaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * Добавление нового или изменение созданного комментария
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param {Number} businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/UpdateGoodsFeedbackCommentRequest} updateGoodsFeedbackCommentRequest 
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/UpdateGoodsFeedbackCommentResponse>}
     */
    async updateGoodsFeedbackComment(businessId, updateGoodsFeedbackCommentRequest, requestInit) {
      let postBody = updateGoodsFeedbackCommentRequest;
      // verify the required parameter 'businessId' is set
      if (businessId === undefined || businessId === null) {
        throw new Error("Missing the required parameter 'businessId' when calling updateGoodsFeedbackComment");
      }
      // verify the required parameter 'updateGoodsFeedbackCommentRequest' is set
      if (updateGoodsFeedbackCommentRequest === undefined || updateGoodsFeedbackCommentRequest === null) {
        throw new Error("Missing the required parameter 'updateGoodsFeedbackCommentRequest' when calling updateGoodsFeedbackComment");
      }

      let pathParams = {
        'businessId': businessId
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/LATEST/Javascript',
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGoodsFeedbackCommentResponse;

      return this.callApi(
        '/businesses/{businessId}/goods-feedback/comments/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }


}
