/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiLockedErrorResponse from '../model/ApiLockedErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import EmptyApiResponse from '../model/EmptyApiResponse';
import FeedIndexLogsStatusType from '../model/FeedIndexLogsStatusType';
import GetFeedIndexLogsResponse from '../model/GetFeedIndexLogsResponse';
import GetFeedResponse from '../model/GetFeedResponse';
import GetFeedsResponse from '../model/GetFeedsResponse';
import SetFeedParamsRequest from '../model/SetFeedParamsRequest';

/**
* Feeds service.
* @module api/FeedsApi
* @version LATEST
*/
export default class FeedsApi {

    /**
    * Constructs a new FeedsApi. 
    * @alias module:api/FeedsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFeed operation.
     * @callback module:api/FeedsApi~getFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о прайс-листе
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} feedId Идентификатор прайс-листа.
     * @param {module:api/FeedsApi~getFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedResponse}
     */
    getFeed(campaignId, feedId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getFeed");
      }
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling getFeed");
      }

      let pathParams = {
        'campaignId': campaignId,
        'feedId': feedId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeedResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/feeds/{feedId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedIndexLogs operation.
     * @callback module:api/FeedsApi~getFeedIndexLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedIndexLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отчет по индексации прайс-листа
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} feedId Идентификатор прайс-листа.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Количество значений на одной странице. 
     * @param {Date} [publishedTimeFrom] Начальная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`.  Значение по умолчанию: последние восемь дней со времени отправки запроса. 
     * @param {Date} [publishedTimeTo] Конечная дата. Используется для фильтрации записей — по дате и времени публикации предложений на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-31T00:42:42+03:00`.  Значение по умолчанию: дата и время отправки запроса.  {% note info %}  Если во время переключения между страницами выходных данных на Яндекс Маркете появятся новые результаты индексации прайс-листа, вы не получите часть данных. Чтобы этого не произошло, зафиксируйте выходные данные с помощью входного параметра `published_time_to`. Значение параметра не должно быть датой из будущего.  {% endnote %} 
     * @param {module:model/FeedIndexLogsStatusType} [status] Статус индексации и проверки прайс-листа на соответствие техническим требованиям.  Возможные значения: * `ERROR` — произошли ошибки. * `OK` — обработан без ошибок. * `WARNING` — наблюдались некритичные проблемы. 
     * @param {module:api/FeedsApi~getFeedIndexLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedIndexLogsResponse}
     */
    getFeedIndexLogs(campaignId, feedId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getFeedIndexLogs");
      }
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling getFeedIndexLogs");
      }

      let pathParams = {
        'campaignId': campaignId,
        'feedId': feedId
      };
      let queryParams = {
        'limit': opts['limit'],
        'published_time_from': opts['publishedTimeFrom'],
        'published_time_to': opts['publishedTimeTo'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeedIndexLogsResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/feeds/{feedId}/index-logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeeds operation.
     * @callback module:api/FeedsApi~getFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Список прайс-листов магазина
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:api/FeedsApi~getFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedsResponse}
     */
    getFeeds(campaignId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getFeeds");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeedsResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshFeed operation.
     * @callback module:api/FeedsApi~refreshFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Сообщить, что прайс-лист обновился
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} feedId Идентификатор прайс-листа.
     * @param {module:api/FeedsApi~refreshFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    refreshFeed(campaignId, feedId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling refreshFeed");
      }
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling refreshFeed");
      }

      let pathParams = {
        'campaignId': campaignId,
        'feedId': feedId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/feeds/{feedId}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setFeedParams operation.
     * @callback module:api/FeedsApi~setFeedParamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменение параметров прайс-листа
     * {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} feedId Идентификатор прайс-листа.
     * @param {module:model/SetFeedParamsRequest} setFeedParamsRequest 
     * @param {module:api/FeedsApi~setFeedParamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    setFeedParams(campaignId, feedId, setFeedParamsRequest, callback) {
      let postBody = setFeedParamsRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling setFeedParams");
      }
      // verify the required parameter 'feedId' is set
      if (feedId === undefined || feedId === null) {
        throw new Error("Missing the required parameter 'feedId' when calling setFeedParams");
      }
      // verify the required parameter 'setFeedParamsRequest' is set
      if (setFeedParamsRequest === undefined || setFeedParamsRequest === null) {
        throw new Error("Missing the required parameter 'setFeedParamsRequest' when calling setFeedParams");
      }

      let pathParams = {
        'campaignId': campaignId,
        'feedId': feedId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/feeds/{feedId}/params', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
