/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiClientDataErrorResponse from '../model/ApiClientDataErrorResponse';
import ApiForbiddenErrorResponse from '../model/ApiForbiddenErrorResponse';
import ApiLimitErrorResponse from '../model/ApiLimitErrorResponse';
import ApiNotFoundErrorResponse from '../model/ApiNotFoundErrorResponse';
import ApiServerErrorResponse from '../model/ApiServerErrorResponse';
import ApiUnauthorizedErrorResponse from '../model/ApiUnauthorizedErrorResponse';
import ChangeOutletRequest from '../model/ChangeOutletRequest';
import CreateOutletResponse from '../model/CreateOutletResponse';
import EmptyApiResponse from '../model/EmptyApiResponse';
import GetOutletResponse from '../model/GetOutletResponse';
import GetOutletsResponse from '../model/GetOutletsResponse';

/**
* Outlets service.
* @module api/OutletsApi
* @version LATEST
*/
export default class OutletsApi {

    /**
    * Constructs a new OutletsApi. 
    * @alias module:api/OutletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createOutlet operation.
     * @callback module:api/OutletsApi~createOutletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOutletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создание точки продаж
     * Создает точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {module:model/ChangeOutletRequest} changeOutletRequest 
     * @param {module:api/OutletsApi~createOutletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOutletResponse}
     */
    createOutlet(campaignId, changeOutletRequest, callback) {
      let postBody = changeOutletRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling createOutlet");
      }
      // verify the required parameter 'changeOutletRequest' is set
      if (changeOutletRequest === undefined || changeOutletRequest === null) {
        throw new Error("Missing the required parameter 'changeOutletRequest' when calling createOutlet");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOutletResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/outlets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOutlet operation.
     * @callback module:api/OutletsApi~deleteOutletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Удаление точки продаж
     * Удаляет точку продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} outletId Идентификатор точки продаж.
     * @param {module:api/OutletsApi~deleteOutletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    deleteOutlet(campaignId, outletId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteOutlet");
      }
      // verify the required parameter 'outletId' is set
      if (outletId === undefined || outletId === null) {
        throw new Error("Missing the required parameter 'outletId' when calling deleteOutlet");
      }

      let pathParams = {
        'campaignId': campaignId,
        'outletId': outletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/outlets/{outletId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutlet operation.
     * @callback module:api/OutletsApi~getOutletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOutletResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация об одной точке продаж
     * Возвращает информацию о точках продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} outletId Идентификатор точки продаж.
     * @param {module:api/OutletsApi~getOutletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOutletResponse}
     */
    getOutlet(campaignId, outletId, callback) {
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getOutlet");
      }
      // verify the required parameter 'outletId' is set
      if (outletId === undefined || outletId === null) {
        throw new Error("Missing the required parameter 'outletId' when calling getOutlet");
      }

      let pathParams = {
        'campaignId': campaignId,
        'outletId': outletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOutletResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/outlets/{outletId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOutlets operation.
     * @callback module:api/OutletsApi~getOutletsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOutletsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Информация о нескольких точках продаж
     * Возвращает список точек продаж магазина.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Object} opts Optional parameters
     * @param {String} [pageToken] Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
     * @param {Number} [regionId] Идентификатор региона. Если задать идентификатор родительского региона любого уровня, в выходных данных будут отображены точки продаж всех дочерних регионов. Идентификатор региона можно получить c помощью метода [GET regions](../../reference/regions/searchRegionsByName.md). 
     * @param {String} [shopOutletCode] Идентификатор точки продаж, присвоенный магазином.
     * @param {Number} [regionId2] {% note warning \"\" %}  Этот параметр устарел. Для указания региона используйте `region_id`.  {% endnote %} 
     * @param {module:api/OutletsApi~getOutletsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOutletsResponse}
     */
    getOutlets(campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getOutlets");
      }

      let pathParams = {
        'campaignId': campaignId
      };
      let queryParams = {
        'page_token': opts['pageToken'],
        'region_id': opts['regionId'],
        'shop_outlet_code': opts['shopOutletCode'],
        'regionId': opts['regionId2']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOutletsResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/outlets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOutlet operation.
     * @callback module:api/OutletsApi~updateOutletCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменение информации о точке продаж
     * Изменяет информацию о точке продаж магазина на Маркете.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param {Number} campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
     * @param {Number} outletId Идентификатор точки продаж.
     * @param {module:model/ChangeOutletRequest} changeOutletRequest 
     * @param {module:api/OutletsApi~updateOutletCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyApiResponse}
     */
    updateOutlet(campaignId, outletId, changeOutletRequest, callback) {
      let postBody = changeOutletRequest;
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateOutlet");
      }
      // verify the required parameter 'outletId' is set
      if (outletId === undefined || outletId === null) {
        throw new Error("Missing the required parameter 'outletId' when calling updateOutlet");
      }
      // verify the required parameter 'changeOutletRequest' is set
      if (changeOutletRequest === undefined || changeOutletRequest === null) {
        throw new Error("Missing the required parameter 'changeOutletRequest' when calling updateOutlet");
      }

      let pathParams = {
        'campaignId': campaignId,
        'outletId': outletId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmptyApiResponse;
      return this.apiClient.callApi(
        '/campaigns/{campaignId}/outlets/{outletId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
