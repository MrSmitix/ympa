/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ympa_kotlin_client.models.GoodsStatsGoodsDTO
import ympa_kotlin_client.models.GoodsStatsWarehouseDTO
import ympa_kotlin_client.models.GoodsStatsWeightDimensionsDTO
import ympa_kotlin_client.models.TariffDTO

class GoodsStatsGoodsDTOTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GoodsStatsGoodsDTO
        //val modelInstance = GoodsStatsGoodsDTO()

        // to test the property `shopSku` - Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
        should("test shopSku") {
            // uncomment below to test the property
            //modelInstance.shopSku shouldBe ("TODO")
        }

        // to test the property `marketSku` - SKU на Маркете.
        should("test marketSku") {
            // uncomment below to test the property
            //modelInstance.marketSku shouldBe ("TODO")
        }

        // to test the property `name` - Название товара.
        should("test name") {
            // uncomment below to test the property
            //modelInstance.name shouldBe ("TODO")
        }

        // to test the property `price` - Цена на товар в валюте, которая установлена [в кабинете продавца на Маркете](https://partner.market.yandex.ru/).
        should("test price") {
            // uncomment below to test the property
            //modelInstance.price shouldBe ("TODO")
        }

        // to test the property `categoryId` - Идентификатор категории товара на Маркете.
        should("test categoryId") {
            // uncomment below to test the property
            //modelInstance.categoryId shouldBe ("TODO")
        }

        // to test the property `categoryName` - Название категории товара на Маркете.
        should("test categoryName") {
            // uncomment below to test the property
            //modelInstance.categoryName shouldBe ("TODO")
        }

        // to test the property `weightDimensions`
        should("test weightDimensions") {
            // uncomment below to test the property
            //modelInstance.weightDimensions shouldBe ("TODO")
        }

        // to test the property `warehouses` - Информация о складах, на которых хранится товар.  Параметр не приходит, если товара нет ни на одном складе. 
        should("test warehouses") {
            // uncomment below to test the property
            //modelInstance.warehouses shouldBe ("TODO")
        }

        // to test the property `tariffs` - Информация о тарифах, по которым нужно заплатить за услуги Маркета.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
        should("test tariffs") {
            // uncomment below to test the property
            //modelInstance.tariffs shouldBe ("TODO")
        }

        // to test the property `pictures` - Ссылки (URL) изображений товара в хорошем качестве.
        should("test pictures") {
            // uncomment below to test the property
            //modelInstance.pictures shouldBe ("TODO")
        }

    }
}
