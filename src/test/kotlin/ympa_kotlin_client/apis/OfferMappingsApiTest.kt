/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ympa_kotlin_client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ympa_kotlin_client.apis.OfferMappingsApi
import ympa_kotlin_client.models.ApiClientDataErrorResponse
import ympa_kotlin_client.models.ApiForbiddenErrorResponse
import ympa_kotlin_client.models.ApiLimitErrorResponse
import ympa_kotlin_client.models.ApiLockedErrorResponse
import ympa_kotlin_client.models.ApiNotFoundErrorResponse
import ympa_kotlin_client.models.ApiServerErrorResponse
import ympa_kotlin_client.models.ApiUnauthorizedErrorResponse
import ympa_kotlin_client.models.EmptyApiResponse
import ympa_kotlin_client.models.GetOfferMappingEntriesResponse
import ympa_kotlin_client.models.GetSuggestedOfferMappingEntriesRequest
import ympa_kotlin_client.models.GetSuggestedOfferMappingEntriesResponse
import ympa_kotlin_client.models.OfferAvailabilityStatusType
import ympa_kotlin_client.models.OfferMappingKindType
import ympa_kotlin_client.models.OfferProcessingStatusType
import ympa_kotlin_client.models.UpdateOfferMappingEntryRequest

class OfferMappingsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of OfferMappingsApi
        //val apiInstance = OfferMappingsApi()

        // to test getOfferMappingEntries
        should("test getOfferMappingEntries") {
            // uncomment below to test getOfferMappingEntries
            //val campaignId : kotlin.Long = 789 // kotlin.Long | Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
            //val offerId : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Идентификатор товара в каталоге.
            //val shopSku : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Ваш SKU товара.  Параметр может быть указан несколько раз, например:  ``` ...shop_sku=123&shop_sku=129&shop_sku=141... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
            //val mappingKind : OfferMappingKindType =  // OfferMappingKindType | Тип маппинга.
            //val status : kotlin.collections.List<OfferProcessingStatusType> =  // kotlin.collections.List<OfferProcessingStatusType> | Фильтрация по статусу публикации товара:  * `READY` — товар прошел модерацию. * `IN_WORK` — товар проходит модерацию. * `NEED_CONTENT` — для товара без SKU на Маркете marketSku нужно найти карточку самостоятельно или создать ее. * `NEED_INFO` — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. * `REJECTED` — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * `SUSPENDED` — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. * `OTHER` — товар не прошел модерацию по другой причине.  Можно указать несколько статусов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...status=READY,IN_WORK... ...status=READY&status=IN_WORK... ```  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
            //val availability : kotlin.collections.List<OfferAvailabilityStatusType> =  // kotlin.collections.List<OfferAvailabilityStatusType> | Фильтрация по планам поставок товара:  * `ACTIVE` — поставки будут. * `INACTIVE` — поставок не будет: товар есть на складе, но вы больше не планируете его поставлять. * `DELISTED` — архив: товар закончился на складе, и его поставок больше не будет.  Можно указать несколько значений в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...availability=INACTIVE,DELISTED... ...availability=INACTIVE&availability=DELISTED... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
            //val categoryId : kotlin.collections.List<kotlin.Int> =  // kotlin.collections.List<kotlin.Int> | Фильтрация по идентификатору категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  Можно указать несколько идентификаторов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...category_id=14727164,14382343... ...category_id=14727164&category_id=14382343... ```  В запросе можно указать либо параметр `shopSku`, либо любые параметры для фильтрации товаров. Совместное использование параметра `shopSku` и параметров для фильтрации приведет к ошибке. 
            //val vendor : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Фильтрация по бренду товара.  Можно указать несколько брендов в одном параметре, через запятую, или в нескольких одинаковых параметрах. Например:  ``` ...vendor=Aqua%20Minerale,Borjomi... ...vendor=Aqua%20Minerale&vendor=Borjomi... ```  Чтобы товар попал в результаты фильтрации, его бренд должен точно совпадать с одним из указанных в запросе. Например, если указан бренд Schwarzkopf, то в результатах не будет товаров Schwarzkopf Professional.  Если в названии бренда есть символы, которые не входят в таблицу ASCII (в том числе кириллические символы), используйте для них URL-кодирование. Например, пробел — %20, апостроф «'» — %27 и т. д. Подробнее см. в разделе [Кодирование URL русскоязычной Википедии](https://ru.wikipedia.org/wiki/URL#Кодирование_URL).  В запросе можно указать либо параметр shopSku, либо любые параметры для фильтрации товаров. Совместное использование параметра shopSku и параметров для фильтрации приведет к ошибке. 
            //val pageToken : kotlin.String = eyBuZXh0SWQ6IDIzNDIgfQ== // kotlin.String | Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. 
            //val limit : kotlin.Int = 20 // kotlin.Int | Количество значений на одной странице. 
            //val result : GetOfferMappingEntriesResponse = apiInstance.getOfferMappingEntries(campaignId, offerId, shopSku, mappingKind, status, availability, categoryId, vendor, pageToken, limit)
            //result shouldBe ("TODO")
        }

        // to test getSuggestedOfferMappingEntries
        should("test getSuggestedOfferMappingEntries") {
            // uncomment below to test getSuggestedOfferMappingEntries
            //val campaignId : kotlin.Long = 789 // kotlin.Long | Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
            //val getSuggestedOfferMappingEntriesRequest : GetSuggestedOfferMappingEntriesRequest =  // GetSuggestedOfferMappingEntriesRequest | 
            //val result : GetSuggestedOfferMappingEntriesResponse = apiInstance.getSuggestedOfferMappingEntries(campaignId, getSuggestedOfferMappingEntriesRequest)
            //result shouldBe ("TODO")
        }

        // to test updateOfferMappingEntries
        should("test updateOfferMappingEntries") {
            // uncomment below to test updateOfferMappingEntries
            //val campaignId : kotlin.Long = 789 // kotlin.Long | Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
            //val updateOfferMappingEntryRequest : UpdateOfferMappingEntryRequest =  // UpdateOfferMappingEntryRequest | 
            //val result : EmptyApiResponse = apiInstance.updateOfferMappingEntries(campaignId, updateOfferMappingEntryRequest)
            //result shouldBe ("TODO")
        }

    }
}
