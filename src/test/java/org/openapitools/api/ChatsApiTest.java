/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.ApiClientDataErrorResponse;
import org.openapitools.model.ApiForbiddenErrorResponse;
import org.openapitools.model.ApiLimitErrorResponse;
import org.openapitools.model.ApiNotFoundErrorResponse;
import org.openapitools.model.ApiServerErrorResponse;
import org.openapitools.model.ApiUnauthorizedErrorResponse;
import org.openapitools.model.CreateChatRequest;
import org.openapitools.model.CreateChatResponse;
import org.openapitools.model.EmptyApiResponse;
import java.io.File;
import org.openapitools.model.GetChatHistoryRequest;
import org.openapitools.model.GetChatHistoryResponse;
import org.openapitools.model.GetChatsRequest;
import org.openapitools.model.GetChatsResponse;
import org.openapitools.model.SendMessageToChatRequest;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.ext.multipart.Attachment;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;
import org.apache.cxf.jaxrs.provider.MultipartProvider;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * Партнерский API Маркета
 *
 * <p>API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * API tests for ChatsApi.
 */
public class ChatsApiTest {

    private ChatsApi api;

    @Before
    public void setup() {
        List<?> providers = Arrays.asList(new JacksonJsonProvider(), new JacksonXMLProvider(), new MultipartProvider());

        api = JAXRSClientFactory.create("https://api.partner.market.yandex.ru", ChatsApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Создание нового чата с покупателем
     *
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void createChatTest() throws Exception {
        // TODO: assign appropriate parameter values
        Long businessId = null;
        CreateChatRequest createChatRequest = null;

        // TODO: delete this line and uncomment the next
        // CreateChatResponse response = api.createChat(businessId, createChatRequest);
        // TODO: complete test assertions
    }
    
    /**
     * Получение истории сообщений в чате
     *
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getChatHistoryTest() throws Exception {
        // TODO: assign appropriate parameter values
        Long businessId = null;
        Long chatId = null;
        GetChatHistoryRequest getChatHistoryRequest = null;
        String pageToken = null;
        Integer limit = null;

        // TODO: delete this line and uncomment the next
        // GetChatHistoryResponse response = api.getChatHistory(businessId, chatId, getChatHistoryRequest, pageToken, limit);
        // TODO: complete test assertions
    }
    
    /**
     * Получение доступных чатов
     *
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void getChatsTest() throws Exception {
        // TODO: assign appropriate parameter values
        Long businessId = null;
        GetChatsRequest getChatsRequest = null;
        String pageToken = null;
        Integer limit = null;

        // TODO: delete this line and uncomment the next
        // GetChatsResponse response = api.getChats(businessId, getChatsRequest, pageToken, limit);
        // TODO: complete test assertions
    }
    
    /**
     * Отправка файла в чат
     *
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void sendFileToChatTest() throws Exception {
        // TODO: assign appropriate parameter values
        Long businessId = null;
        Long chatId = null;
        Attachment _file = new Attachment("_file", MediaType.TEXT_PLAIN, "Dummy attachment content");

        // TODO: delete this line and uncomment the next
        // EmptyApiResponse response = api.sendFileToChat(businessId, chatId, _file);
        // TODO: complete test assertions
    }
    
    /**
     * Отправка сообщения в чат
     *
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @throws ApiException if the API call fails
     */
    @Test
    public void sendMessageToChatTest() throws Exception {
        // TODO: assign appropriate parameter values
        Long businessId = null;
        Long chatId = null;
        SendMessageToChatRequest sendMessageToChatRequest = null;

        // TODO: delete this line and uncomment the next
        // EmptyApiResponse response = api.sendMessageToChat(businessId, chatId, sendMessageToChatRequest);
        // TODO: complete test assertions
    }
    
}
