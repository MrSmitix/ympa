/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.server.api;

import org.openapitools.server.model.ApiClientDataErrorResponse;
import org.openapitools.server.model.ApiForbiddenErrorResponse;
import org.openapitools.server.model.ApiLimitErrorResponse;
import org.openapitools.server.model.ApiNotFoundErrorResponse;
import org.openapitools.server.model.ApiServerErrorResponse;
import org.openapitools.server.model.ApiUnauthorizedErrorResponse;
import java.util.Date;
import org.openapitools.server.model.EmptyApiResponse;
import java.io.File;
import org.openapitools.server.model.GetReturnResponse;
import org.openapitools.server.model.GetReturnsResponse;
import org.openapitools.server.model.RefundStatusType;
import org.openapitools.server.model.ReturnType;
import org.openapitools.server.model.SetReturnDecisionRequest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

import org.eclipse.microprofile.rest.client.RestClientBuilder;

import java.net.URL;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Партнерский API Маркета Test
 *
 * API tests for ReturnsApi
 */
public class ReturnsApiTest {

    private ReturnsApi client;
    private String baseUrl = "http://localhost:9080";

    @BeforeEach
    public void setup() throws MalformedURLException {
        client = RestClientBuilder.newBuilder()
                        .baseUrl(new URL(baseUrl))
                        .register(ApiException.class)
                        .build(ReturnsApi.class);
    }

    
    /**
     * Информация о невыкупе или возврате
     *
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReturnTest() {
        // TODO: test validations
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        //GetReturnResponse response = api.getReturn(campaignId, orderId, returnId);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * Получение заявления на возврат
     *
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReturnApplicationTest() {
        // TODO: test validations
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        //File response = api.getReturnApplication(campaignId, orderId, returnId);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * Получение фотографии возврата
     *
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReturnPhotoTest() {
        // TODO: test validations
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        Long itemId = null;
        String imageHash = null;
        //File response = api.getReturnPhoto(campaignId, orderId, returnId, itemId, imageHash);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * Список невыкупов и возвратов
     *
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getReturnsTest() {
        // TODO: test validations
        Long campaignId = null;
        String pageToken = null;
        Integer limit = null;
        List<Long> orderIds = null;
        List<RefundStatusType> statuses = null;
        ReturnType type = null;
        Date fromDate = null;
        Date toDate = null;
        Date fromDate2 = null;
        Date toDate2 = null;
        //GetReturnsResponse response = api.getReturns(campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * Принятие или изменение решения по возврату
     *
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setReturnDecisionTest() {
        // TODO: test validations
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        SetReturnDecisionRequest setReturnDecisionRequest = null;
        //EmptyApiResponse response = api.setReturnDecision(campaignId, orderId, returnId, setReturnDecisionRequest);
        //Assertions.assertNotNull(response);


    }
    
    /**
     * Подтверждение решения по возврату
     *
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitReturnDecisionTest() {
        // TODO: test validations
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        //EmptyApiResponse response = api.submitReturnDecision(campaignId, orderId, returnId);
        //Assertions.assertNotNull(response);


    }
    
}
