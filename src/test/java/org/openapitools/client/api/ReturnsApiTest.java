/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.EmptyApiResponse;
import java.io.File;
import org.openapitools.client.model.GetReturnResponse;
import org.openapitools.client.model.GetReturnsResponse;
import java.time.LocalDate;
import org.openapitools.client.model.RefundStatusType;
import org.openapitools.client.model.ReturnType;
import org.openapitools.client.model.SetReturnDecisionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReturnsApi
 */
@Disabled
public class ReturnsApiTest {

    private final ReturnsApi api = new ReturnsApi();

    /**
     * Информация о невыкупе или возврате
     *
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnTest() throws ApiException {
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        GetReturnResponse response = api.getReturn(campaignId, orderId, returnId);
        // TODO: test validations
    }

    /**
     * Получение заявления на возврат
     *
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnApplicationTest() throws ApiException {
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        File response = api.getReturnApplication(campaignId, orderId, returnId);
        // TODO: test validations
    }

    /**
     * Получение фотографии возврата
     *
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnPhotoTest() throws ApiException {
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        Long itemId = null;
        String imageHash = null;
        File response = api.getReturnPhoto(campaignId, orderId, returnId, itemId, imageHash);
        // TODO: test validations
    }

    /**
     * Список невыкупов и возвратов
     *
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReturnsTest() throws ApiException {
        Long campaignId = null;
        String pageToken = null;
        Integer limit = null;
        List<Long> orderIds = null;
        List<RefundStatusType> statuses = null;
        ReturnType type = null;
        LocalDate fromDate = null;
        LocalDate toDate = null;
        LocalDate fromDate2 = null;
        LocalDate toDate2 = null;
        GetReturnsResponse response = api.getReturns(campaignId, pageToken, limit, orderIds, statuses, type, fromDate, toDate, fromDate2, toDate2);
        // TODO: test validations
    }

    /**
     * Принятие или изменение решения по возврату
     *
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setReturnDecisionTest() throws ApiException {
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        SetReturnDecisionRequest setReturnDecisionRequest = null;
        EmptyApiResponse response = api.setReturnDecision(campaignId, orderId, returnId, setReturnDecisionRequest);
        // TODO: test validations
    }

    /**
     * Подтверждение решения по возврату
     *
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitReturnDecisionTest() throws ApiException {
        Long campaignId = null;
        Long orderId = null;
        Long returnId = null;
        EmptyApiResponse response = api.submitReturnDecision(campaignId, orderId, returnId);
        // TODO: test validations
    }

}
