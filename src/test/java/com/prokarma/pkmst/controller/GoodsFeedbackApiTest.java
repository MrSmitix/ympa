/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.ApiClientDataErrorResponse;
import com.prokarma.pkmst.model.ApiForbiddenErrorResponse;
import com.prokarma.pkmst.model.ApiLimitErrorResponse;
import com.prokarma.pkmst.model.ApiNotFoundErrorResponse;
import com.prokarma.pkmst.model.ApiServerErrorResponse;
import com.prokarma.pkmst.model.ApiUnauthorizedErrorResponse;
import com.prokarma.pkmst.model.DeleteGoodsFeedbackCommentRequest;
import com.prokarma.pkmst.model.EmptyApiResponse;
import com.prokarma.pkmst.model.GetGoodsFeedbackCommentsRequest;
import com.prokarma.pkmst.model.GetGoodsFeedbackCommentsResponse;
import com.prokarma.pkmst.model.GetGoodsFeedbackRequest;
import com.prokarma.pkmst.model.GetGoodsFeedbackResponse;
import com.prokarma.pkmst.model.SkipGoodsFeedbackReactionRequest;
import com.prokarma.pkmst.model.UpdateGoodsFeedbackCommentRequest;
import com.prokarma.pkmst.model.UpdateGoodsFeedbackCommentResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for GoodsFeedbackApi
 */
@Ignore
public class GoodsFeedbackApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final GoodsFeedbackApi api = new GoodsFeedbackApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Удаление комментария к отзыву
     *
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteGoodsFeedbackCommentTest() throws Exception {
        Long businessId = null;
        DeleteGoodsFeedbackCommentRequest deleteGoodsFeedbackCommentRequest = null;
    ResponseEntity<EmptyApiResponse> response = api.deleteGoodsFeedbackComment(businessId, deleteGoodsFeedbackCommentRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Получение комментариев к отзыву
     *
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGoodsFeedbackCommentsTest() throws Exception {
        Long businessId = null;
        GetGoodsFeedbackCommentsRequest getGoodsFeedbackCommentsRequest = null;
        String pageToken = null;
        Integer limit = null;
    ResponseEntity<GetGoodsFeedbackCommentsResponse> response = api.getGoodsFeedbackComments(businessId, getGoodsFeedbackCommentsRequest, pageToken, limit , accept);

        // TODO: test validations
    }
    
    /**
     * Получение отзывов о товарах продавца
     *
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGoodsFeedbacksTest() throws Exception {
        Long businessId = null;
        String pageToken = null;
        Integer limit = null;
        GetGoodsFeedbackRequest getGoodsFeedbackRequest = null;
    ResponseEntity<GetGoodsFeedbackResponse> response = api.getGoodsFeedbacks(businessId, pageToken, limit, getGoodsFeedbackRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Отказ от ответа на отзывы
     *
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void skipGoodsFeedbacksReactionTest() throws Exception {
        Long businessId = null;
        SkipGoodsFeedbackReactionRequest skipGoodsFeedbackReactionRequest = null;
    ResponseEntity<EmptyApiResponse> response = api.skipGoodsFeedbacksReaction(businessId, skipGoodsFeedbackReactionRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Добавление нового или изменение созданного комментария
     *
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateGoodsFeedbackCommentTest() throws Exception {
        Long businessId = null;
        UpdateGoodsFeedbackCommentRequest updateGoodsFeedbackCommentRequest = null;
    ResponseEntity<UpdateGoodsFeedbackCommentResponse> response = api.updateGoodsFeedbackComment(businessId, updateGoodsFeedbackCommentRequest , accept);

        // TODO: test validations
    }
    
}
