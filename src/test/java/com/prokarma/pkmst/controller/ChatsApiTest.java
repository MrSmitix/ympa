/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.ApiClientDataErrorResponse;
import com.prokarma.pkmst.model.ApiForbiddenErrorResponse;
import com.prokarma.pkmst.model.ApiLimitErrorResponse;
import com.prokarma.pkmst.model.ApiNotFoundErrorResponse;
import com.prokarma.pkmst.model.ApiServerErrorResponse;
import com.prokarma.pkmst.model.ApiUnauthorizedErrorResponse;
import com.prokarma.pkmst.model.CreateChatRequest;
import com.prokarma.pkmst.model.CreateChatResponse;
import com.prokarma.pkmst.model.EmptyApiResponse;
import java.io.File;
import com.prokarma.pkmst.model.GetChatHistoryRequest;
import com.prokarma.pkmst.model.GetChatHistoryResponse;
import com.prokarma.pkmst.model.GetChatsRequest;
import com.prokarma.pkmst.model.GetChatsResponse;
import com.prokarma.pkmst.model.SendMessageToChatRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for ChatsApi
 */
@Ignore
public class ChatsApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final ChatsApi api = new ChatsApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * Создание нового чата с покупателем
     *
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createChatTest() throws Exception {
        Long businessId = null;
        CreateChatRequest createChatRequest = null;
    ResponseEntity<CreateChatResponse> response = api.createChat(businessId, createChatRequest , accept);

        // TODO: test validations
    }
    
    /**
     * Получение истории сообщений в чате
     *
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getChatHistoryTest() throws Exception {
        Long businessId = null;
        Long chatId = null;
        GetChatHistoryRequest getChatHistoryRequest = null;
        String pageToken = null;
        Integer limit = null;
    ResponseEntity<GetChatHistoryResponse> response = api.getChatHistory(businessId, chatId, getChatHistoryRequest, pageToken, limit , accept);

        // TODO: test validations
    }
    
    /**
     * Получение доступных чатов
     *
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getChatsTest() throws Exception {
        Long businessId = null;
        GetChatsRequest getChatsRequest = null;
        String pageToken = null;
        Integer limit = null;
    ResponseEntity<GetChatsResponse> response = api.getChats(businessId, getChatsRequest, pageToken, limit , accept);

        // TODO: test validations
    }
    
    /**
     * Отправка файла в чат
     *
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendFileToChatTest() throws Exception {
        Long businessId = null;
        Long chatId = null;
        MultipartFile _file = null;
    ResponseEntity<EmptyApiResponse> response = api.sendFileToChat(businessId, chatId, _file , accept);

        // TODO: test validations
    }
    
    /**
     * Отправка сообщения в чат
     *
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sendMessageToChatTest() throws Exception {
        Long businessId = null;
        Long chatId = null;
        SendMessageToChatRequest sendMessageToChatRequest = null;
    ResponseEntity<EmptyApiResponse> response = api.sendMessageToChat(businessId, chatId, sendMessageToChatRequest , accept);

        // TODO: test validations
    }
    
}
