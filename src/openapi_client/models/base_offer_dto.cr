# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Основные параметры товара.
  class BaseOfferDTO
    include JSON::Serializable

    # Required properties
    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    @[JSON::Field(key: "offerId", type: String, nillable: false, emit_null: false)]
    property offer_id : String

    # Optional properties
    # Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
    @[JSON::Field(key: "name", type: String?, nillable: true, emit_null: false)]
    property name : String?

    # Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    @[JSON::Field(key: "marketCategoryId", type: Int64?, nillable: true, emit_null: false)]
    property market_category_id : Int64?

    # Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
    @[JSON::Field(key: "category", type: String?, nillable: true, emit_null: false)]
    property category : String?

    # Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
    @[JSON::Field(key: "pictures", type: Array(String)?, nillable: true, emit_null: false)]
    property pictures : Array(String)?

    # Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
    @[JSON::Field(key: "videos", type: Array(String)?, nillable: true, emit_null: false)]
    property videos : Array(String)?

    # Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
    @[JSON::Field(key: "manuals", type: Array(OfferManualDTO)?, nillable: true, emit_null: false)]
    property manuals : Array(OfferManualDTO)?

    # Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    @[JSON::Field(key: "vendor", type: String?, nillable: true, emit_null: false)]
    property vendor : String?

    # Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
    @[JSON::Field(key: "barcodes", type: Array(String)?, nillable: true, emit_null: false)]
    property barcodes : Array(String)?

    # Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
    @[JSON::Field(key: "description", type: String?, nillable: true, emit_null: false)]
    property description : String?

    # Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
    @[JSON::Field(key: "manufacturerCountries", type: Array(String)?, nillable: true, emit_null: false)]
    property manufacturer_countries : Array(String)?

    @[JSON::Field(key: "weightDimensions", type: OfferWeightDimensionsDTO?, nillable: true, emit_null: false)]
    property weight_dimensions : OfferWeightDimensionsDTO?

    # Артикул товара от производителя.
    @[JSON::Field(key: "vendorCode", type: String?, nillable: true, emit_null: false)]
    property vendor_code : String?

    # Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
    @[JSON::Field(key: "tags", type: Array(String)?, nillable: true, emit_null: false)]
    property tags : Array(String)?

    @[JSON::Field(key: "shelfLife", type: TimePeriodDTO?, nillable: true, emit_null: false)]
    property shelf_life : TimePeriodDTO?

    @[JSON::Field(key: "lifeTime", type: TimePeriodDTO?, nillable: true, emit_null: false)]
    property life_time : TimePeriodDTO?

    @[JSON::Field(key: "guaranteePeriod", type: TimePeriodDTO?, nillable: true, emit_null: false)]
    property guarantee_period : TimePeriodDTO?

    # Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
    @[JSON::Field(key: "customsCommodityCode", type: String?, nillable: true, emit_null: false)]
    property customs_commodity_code : String?

    # Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
    @[JSON::Field(key: "certificates", type: Array(String)?, nillable: true, emit_null: false)]
    property certificates : Array(String)?

    # Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
    @[JSON::Field(key: "boxCount", type: Int32?, nillable: true, emit_null: false)]
    property box_count : Int32?

    @[JSON::Field(key: "condition", type: OfferConditionDTO?, nillable: true, emit_null: false)]
    property condition : OfferConditionDTO?

    @[JSON::Field(key: "type", type: OfferType?, nillable: true, emit_null: false)]
    property _type : OfferType?

    # Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
    @[JSON::Field(key: "downloadable", type: Bool?, nillable: true, emit_null: false)]
    property downloadable : Bool?

    # Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
    @[JSON::Field(key: "adult", type: Bool?, nillable: true, emit_null: false)]
    property adult : Bool?

    @[JSON::Field(key: "age", type: AgeDTO?, nillable: true, emit_null: false)]
    property age : AgeDTO?

    # {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
    @[JSON::Field(key: "params", type: Array(OfferParamDTO)?, nillable: true, emit_null: false)]
    property params : Array(OfferParamDTO)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@offer_id : String, @name : String?, @market_category_id : Int64?, @category : String?, @pictures : Array(String)?, @videos : Array(String)?, @manuals : Array(OfferManualDTO)?, @vendor : String?, @barcodes : Array(String)?, @description : String?, @manufacturer_countries : Array(String)?, @weight_dimensions : OfferWeightDimensionsDTO?, @vendor_code : String?, @tags : Array(String)?, @shelf_life : TimePeriodDTO?, @life_time : TimePeriodDTO?, @guarantee_period : TimePeriodDTO?, @customs_commodity_code : String?, @certificates : Array(String)?, @box_count : Int32?, @condition : OfferConditionDTO?, @_type : OfferType?, @downloadable : Bool?, @adult : Bool?, @age : AgeDTO?, @params : Array(OfferParamDTO)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @offer_id.to_s.size > 255
        invalid_properties.push("invalid value for \"offer_id\", the character length must be smaller than or equal to 255.")
      end

      if @offer_id.to_s.size < 1
        invalid_properties.push("invalid value for \"offer_id\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if @offer_id !~ pattern
        invalid_properties.push("invalid value for \"offer_id\", must conform to the pattern #{pattern}.")
      end

      if !@name.nil? && @name.to_s.size > 256
        invalid_properties.push("invalid value for \"name\", the character length must be smaller than or equal to 256.")
      end

      if !@videos.nil? && @videos.size > 6
        invalid_properties.push("invalid value for \"videos\", number of items must be less than or equal to 6."
      end

      if !@manuals.nil? && @manuals.size > 6
        invalid_properties.push("invalid value for \"manuals\", number of items must be less than or equal to 6."
      end

      if !@description.nil? && @description.to_s.size > 6000
        invalid_properties.push("invalid value for \"description\", the character length must be smaller than or equal to 6000.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @offer_id.to_s.size > 255
      return false if @offer_id.to_s.size < 1
      return false if @offer_id !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      return false if !@name.nil? && @name.to_s.size > 256
      return false if !@videos.nil? && @videos.size > 6
      return false if !@manuals.nil? && @manuals.size > 6
      return false if !@description.nil? && @description.to_s.size > 6000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] offer_id Value to be assigned
    def offer_id=(offer_id)
      if offer_id.to_s.size > 255
        raise ArgumentError.new("invalid value for \"offer_id\", the character length must be smaller than or equal to 255.")
      end

      if offer_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"offer_id\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if offer_id !~ pattern
        raise ArgumentError.new("invalid value for \"offer_id\", must conform to the pattern #{pattern}.")
      end

      @offer_id = offer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.size > 256
        raise ArgumentError.new("invalid value for \"name\", the character length must be smaller than or equal to 256.")
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] videos Value to be assigned
    def videos=(videos)
      if !videos.nil? && videos.size > 6
        raise ArgumentError.new("invalid value for \"videos\", number of items must be less than or equal to 6.")
      end

      @videos = videos
    end

    # Custom attribute writer method with validation
    # @param [Object] manuals Value to be assigned
    def manuals=(manuals)
      if !manuals.nil? && manuals.size > 6
        raise ArgumentError.new("invalid value for \"manuals\", number of items must be less than or equal to 6.")
      end

      @manuals = manuals
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.size > 6000
        raise ArgumentError.new("invalid value for \"description\", the character length must be smaller than or equal to 6000.")
      end

      @description = description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          offer_id == o.offer_id &&
          name == o.name &&
          market_category_id == o.market_category_id &&
          category == o.category &&
          pictures == o.pictures &&
          videos == o.videos &&
          manuals == o.manuals &&
          vendor == o.vendor &&
          barcodes == o.barcodes &&
          description == o.description &&
          manufacturer_countries == o.manufacturer_countries &&
          weight_dimensions == o.weight_dimensions &&
          vendor_code == o.vendor_code &&
          tags == o.tags &&
          shelf_life == o.shelf_life &&
          life_time == o.life_time &&
          guarantee_period == o.guarantee_period &&
          customs_commodity_code == o.customs_commodity_code &&
          certificates == o.certificates &&
          box_count == o.box_count &&
          condition == o.condition &&
          _type == o._type &&
          downloadable == o.downloadable &&
          adult == o.adult &&
          age == o.age &&
          params == o.params
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [offer_id, name, market_category_id, category, pictures, videos, manuals, vendor, barcodes, description, manufacturer_countries, weight_dimensions, vendor_code, tags, shelf_life, life_time, guarantee_period, customs_commodity_code, certificates, box_count, condition, _type, downloadable, adult, age, params].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
