# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Список товаров в заказе.
  class OrderItemDTO
    include JSON::Serializable

    # Optional properties
    # Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    @[JSON::Field(key: "id", type: Int64?, nillable: true, emit_null: false)]
    property id : Int64?

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    @[JSON::Field(key: "offerId", type: String?, nillable: true, emit_null: false)]
    property offer_id : String?

    # Название товара.
    @[JSON::Field(key: "offerName", type: String?, nillable: true, emit_null: false)]
    property offer_name : String?

    # Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
    @[JSON::Field(key: "price", type: Float64?, nillable: true, emit_null: false)]
    property price : Float64?

    # Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    @[JSON::Field(key: "buyerPrice", type: Float64?, nillable: true, emit_null: false)]
    property buyer_price : Float64?

    # Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    @[JSON::Field(key: "buyerPriceBeforeDiscount", type: Float64?, nillable: true, emit_null: false)]
    property buyer_price_before_discount : Float64?

    # {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    @[JSON::Field(key: "priceBeforeDiscount", type: Float64?, nillable: true, emit_null: false)]
    property price_before_discount : Float64?

    # Количество единиц товара.
    @[JSON::Field(key: "count", type: Int32?, nillable: true, emit_null: false)]
    property count : Int32?

    @[JSON::Field(key: "vat", type: OrderVatType?, nillable: true, emit_null: false)]
    property vat : OrderVatType?

    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    @[JSON::Field(key: "shopSku", type: String?, nillable: true, emit_null: false)]
    property shop_sku : String?

    # {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    @[JSON::Field(key: "subsidy", type: Float64?, nillable: true, emit_null: false)]
    property subsidy : Float64?

    # {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    @[JSON::Field(key: "partnerWarehouseId", type: String?, nillable: true, emit_null: false)]
    property partner_warehouse_id : String?

    # Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    @[JSON::Field(key: "promos", type: Array(OrderItemPromoDTO)?, nillable: true, emit_null: false)]
    property promos : Array(OrderItemPromoDTO)?

    # Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
    @[JSON::Field(key: "instances", type: Array(OrderItemInstanceDTO)?, nillable: true, emit_null: false)]
    property instances : Array(OrderItemInstanceDTO)?

    # Информация об удалении товара из заказа. 
    @[JSON::Field(key: "details", type: Array(OrderItemDetailDTO)?, nillable: true, emit_null: false)]
    property details : Array(OrderItemDetailDTO)?

    # Список субсидий по типам.
    @[JSON::Field(key: "subsidies", type: Array(OrderItemSubsidyDTO)?, nillable: true, emit_null: false)]
    property subsidies : Array(OrderItemSubsidyDTO)?

    # Список необходимых маркировок товара.
    @[JSON::Field(key: "requiredInstanceTypes", type: Array(OrderItemInstanceType)?, nillable: true, emit_null: false)]
    property required_instance_types : Array(OrderItemInstanceType)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : Int64?, @offer_id : String?, @offer_name : String?, @price : Float64?, @buyer_price : Float64?, @buyer_price_before_discount : Float64?, @price_before_discount : Float64?, @count : Int32?, @vat : OrderVatType?, @shop_sku : String?, @subsidy : Float64?, @partner_warehouse_id : String?, @promos : Array(OrderItemPromoDTO)?, @instances : Array(OrderItemInstanceDTO)?, @details : Array(OrderItemDetailDTO)?, @subsidies : Array(OrderItemSubsidyDTO)?, @required_instance_types : Array(OrderItemInstanceType)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@offer_id.nil? && @offer_id.to_s.size > 255
        invalid_properties.push("invalid value for \"offer_id\", the character length must be smaller than or equal to 255.")
      end

      if !@offer_id.nil? && @offer_id.to_s.size < 1
        invalid_properties.push("invalid value for \"offer_id\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@offer_id.nil? && @offer_id !~ pattern
        invalid_properties.push("invalid value for \"offer_id\", must conform to the pattern #{pattern}.")
      end

      if !@shop_sku.nil? && @shop_sku.to_s.size > 255
        invalid_properties.push("invalid value for \"shop_sku\", the character length must be smaller than or equal to 255.")
      end

      if !@shop_sku.nil? && @shop_sku.to_s.size < 1
        invalid_properties.push("invalid value for \"shop_sku\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !@shop_sku.nil? && @shop_sku !~ pattern
        invalid_properties.push("invalid value for \"shop_sku\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@offer_id.nil? && @offer_id.to_s.size > 255
      return false if !@offer_id.nil? && @offer_id.to_s.size < 1
      return false if !@offer_id.nil? && @offer_id !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      return false if !@shop_sku.nil? && @shop_sku.to_s.size > 255
      return false if !@shop_sku.nil? && @shop_sku.to_s.size < 1
      return false if !@shop_sku.nil? && @shop_sku !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] offer_id Value to be assigned
    def offer_id=(offer_id)
      if !offer_id.nil? && offer_id.to_s.size > 255
        raise ArgumentError.new("invalid value for \"offer_id\", the character length must be smaller than or equal to 255.")
      end

      if !offer_id.nil? && offer_id.to_s.size < 1
        raise ArgumentError.new("invalid value for \"offer_id\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !offer_id.nil? && offer_id !~ pattern
        raise ArgumentError.new("invalid value for \"offer_id\", must conform to the pattern #{pattern}.")
      end

      @offer_id = offer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shop_sku Value to be assigned
    def shop_sku=(shop_sku)
      if !shop_sku.nil? && shop_sku.to_s.size > 255
        raise ArgumentError.new("invalid value for \"shop_sku\", the character length must be smaller than or equal to 255.")
      end

      if !shop_sku.nil? && shop_sku.to_s.size < 1
        raise ArgumentError.new("invalid value for \"shop_sku\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if !shop_sku.nil? && shop_sku !~ pattern
        raise ArgumentError.new("invalid value for \"shop_sku\", must conform to the pattern #{pattern}.")
      end

      @shop_sku = shop_sku
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          offer_id == o.offer_id &&
          offer_name == o.offer_name &&
          price == o.price &&
          buyer_price == o.buyer_price &&
          buyer_price_before_discount == o.buyer_price_before_discount &&
          price_before_discount == o.price_before_discount &&
          count == o.count &&
          vat == o.vat &&
          shop_sku == o.shop_sku &&
          subsidy == o.subsidy &&
          partner_warehouse_id == o.partner_warehouse_id &&
          promos == o.promos &&
          instances == o.instances &&
          details == o.details &&
          subsidies == o.subsidies &&
          required_instance_types == o.required_instance_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, offer_id, offer_name, price, buyer_price, buyer_price_before_discount, price_before_discount, count, vat, shop_sku, subsidy, partner_warehouse_id, promos, instances, details, subsidies, required_instance_types].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
