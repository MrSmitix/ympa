# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Параметры товара, для которого нужно рассчитать стоимость услуг.
  class CalculateTariffsOfferDTO
    include JSON::Serializable

    # Required properties
    # Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    @[JSON::Field(key: "categoryId", type: Int64, nillable: false, emit_null: false)]
    property category_id : Int64

    # Цена на товар в рублях.
    @[JSON::Field(key: "price", type: Float64, nillable: false, emit_null: false)]
    property price : Float64

    # Длина товара в сантиметрах.
    @[JSON::Field(key: "length", type: Float64, nillable: false, emit_null: false)]
    property length : Float64

    # Ширина товара в сантиметрах.
    @[JSON::Field(key: "width", type: Float64, nillable: false, emit_null: false)]
    property width : Float64

    # Высота товара в сантиметрах.
    @[JSON::Field(key: "height", type: Float64, nillable: false, emit_null: false)]
    property height : Float64

    # Вес товара в килограммах.
    @[JSON::Field(key: "weight", type: Float64, nillable: false, emit_null: false)]
    property weight : Float64

    # Optional properties
    # Квант продажи — количество единиц товара в одном товарном предложении.
    @[JSON::Field(key: "quantity", type: Int32?, default: 1, nillable: true, emit_null: false)]
    property quantity : Int32?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@category_id : Int64, @price : Float64, @length : Float64, @width : Float64, @height : Float64, @weight : Float64, @quantity : Int32?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @category_id <= 0
        invalid_properties.push("invalid value for \"category_id\", must be greater than 0.")
      end

      if @price <= 0
        invalid_properties.push("invalid value for \"price\", must be greater than 0.")
      end

      if @length <= 0
        invalid_properties.push("invalid value for \"length\", must be greater than 0.")
      end

      if @width <= 0
        invalid_properties.push("invalid value for \"width\", must be greater than 0.")
      end

      if @height <= 0
        invalid_properties.push("invalid value for \"height\", must be greater than 0.")
      end

      if @weight <= 0
        invalid_properties.push("invalid value for \"weight\", must be greater than 0.")
      end

      if !@quantity.nil? && @quantity < 1
        invalid_properties.push("invalid value for \"quantity\", must be greater than or equal to 1.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @category_id <= 0
      return false if @price <= 0
      return false if @length <= 0
      return false if @width <= 0
      return false if @height <= 0
      return false if @weight <= 0
      return false if !@quantity.nil? && @quantity < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] category_id Value to be assigned
    def category_id=(category_id)
      if category_id <= 0
        raise ArgumentError.new("invalid value for \"category_id\", must be greater than 0.")
      end

      @category_id = category_id
    end

    # Custom attribute writer method with validation
    # @param [Object] price Value to be assigned
    def price=(price)
      if price <= 0
        raise ArgumentError.new("invalid value for \"price\", must be greater than 0.")
      end

      @price = price
    end

    # Custom attribute writer method with validation
    # @param [Object] length Value to be assigned
    def length=(length)
      if length <= 0
        raise ArgumentError.new("invalid value for \"length\", must be greater than 0.")
      end

      @length = length
    end

    # Custom attribute writer method with validation
    # @param [Object] width Value to be assigned
    def width=(width)
      if width <= 0
        raise ArgumentError.new("invalid value for \"width\", must be greater than 0.")
      end

      @width = width
    end

    # Custom attribute writer method with validation
    # @param [Object] height Value to be assigned
    def height=(height)
      if height <= 0
        raise ArgumentError.new("invalid value for \"height\", must be greater than 0.")
      end

      @height = height
    end

    # Custom attribute writer method with validation
    # @param [Object] weight Value to be assigned
    def weight=(weight)
      if weight <= 0
        raise ArgumentError.new("invalid value for \"weight\", must be greater than 0.")
      end

      @weight = weight
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if !quantity.nil? && quantity < 1
        raise ArgumentError.new("invalid value for \"quantity\", must be greater than or equal to 1.")
      end

      @quantity = quantity
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          category_id == o.category_id &&
          price == o.price &&
          length == o.length &&
          width == o.width &&
          height == o.height &&
          weight == o.weight &&
          quantity == o.quantity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [category_id, price, length, width, height, weight, quantity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
