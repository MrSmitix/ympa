# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Список товаров с рекомендованными ставками.
  class SkuBidRecommendationItemDTO
    include JSON::Serializable

    # Required properties
    # Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    @[JSON::Field(key: "sku", type: String, nillable: false, emit_null: false)]
    property sku : String

    # Значение ставки.
    @[JSON::Field(key: "bid", type: Int32, nillable: false, emit_null: false)]
    property bid : Int32

    # Optional properties
    # Список рекомендованных ставок с соответствующими долями показов. Чем больше ставка, тем большую долю показов она помогает получить. 
    @[JSON::Field(key: "bidRecommendations", type: Array(BidRecommendationItemDTO)?, nillable: true, emit_null: false)]
    property bid_recommendations : Array(BidRecommendationItemDTO)?

    # Рекомендованные цены.
    @[JSON::Field(key: "priceRecommendations", type: Array(PriceRecommendationItemDTO)?, nillable: true, emit_null: false)]
    property price_recommendations : Array(PriceRecommendationItemDTO)?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@sku : String, @bid : Int32, @bid_recommendations : Array(BidRecommendationItemDTO)?, @price_recommendations : Array(PriceRecommendationItemDTO)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if @sku.to_s.size > 255
        invalid_properties.push("invalid value for \"sku\", the character length must be smaller than or equal to 255.")
      end

      if @sku.to_s.size < 1
        invalid_properties.push("invalid value for \"sku\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if @sku !~ pattern
        invalid_properties.push("invalid value for \"sku\", must conform to the pattern #{pattern}.")
      end

      if @bid > 9999
        invalid_properties.push("invalid value for \"bid\", must be smaller than or equal to 9999.")
      end

      if @bid < 0
        invalid_properties.push("invalid value for \"bid\", must be greater than or equal to 0.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sku.to_s.size > 255
      return false if @sku.to_s.size < 1
      return false if @sku !~ Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      return false if @bid > 9999
      return false if @bid < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] sku Value to be assigned
    def sku=(sku)
      if sku.to_s.size > 255
        raise ArgumentError.new("invalid value for \"sku\", the character length must be smaller than or equal to 255.")
      end

      if sku.to_s.size < 1
        raise ArgumentError.new("invalid value for \"sku\", the character length must be great than or equal to 1.")
      end

      pattern = Regexp.new(/^[^\x00-\x08\x0A-\x1f\x7f]{1,255}$/)
      if sku !~ pattern
        raise ArgumentError.new("invalid value for \"sku\", must conform to the pattern #{pattern}.")
      end

      @sku = sku
    end

    # Custom attribute writer method with validation
    # @param [Object] bid Value to be assigned
    def bid=(bid)
      if bid > 9999
        raise ArgumentError.new("invalid value for \"bid\", must be smaller than or equal to 9999.")
      end

      if bid < 0
        raise ArgumentError.new("invalid value for \"bid\", must be greater than or equal to 0.")
      end

      @bid = bid
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          sku == o.sku &&
          bid == o.bid &&
          bid_recommendations == o.bid_recommendations &&
          price_recommendations == o.price_recommendations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sku, bid, bid_recommendations, price_recommendations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
