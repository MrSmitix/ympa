# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Фильтр запроса отзывов в кабинете. 
  class GetGoodsFeedbackRequest
    include JSON::Serializable

    # Optional properties
    # Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 
    @[JSON::Field(key: "dateTimeFrom", type: Time?, nillable: true, emit_null: false)]
    property date_time_from : Time?

    # Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
    @[JSON::Field(key: "dateTimeTo", type: Time?, nillable: true, emit_null: false)]
    property date_time_to : Time?

    @[JSON::Field(key: "reactionStatus", type: FeedbackReactionStatusType?, nillable: true, emit_null: false)]
    property reaction_status : FeedbackReactionStatusType?

    # Оценка товара.
    @[JSON::Field(key: "ratingValues", type: Set(Int32)?, nillable: true, emit_null: false)]
    property rating_values : Set(Int32)?

    # Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
    @[JSON::Field(key: "modelIds", type: Set(Int64)?, nillable: true, emit_null: false)]
    property model_ids : Set(Int64)?

    # Фильтр отзывов за баллы Плюса.
    @[JSON::Field(key: "paid", type: Bool?, nillable: true, emit_null: false)]
    property paid : Bool?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@date_time_from : Time?, @date_time_to : Time?, @reaction_status : FeedbackReactionStatusType?, @rating_values : Set(Int32)?, @model_ids : Set(Int64)?, @paid : Bool?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@rating_values.nil? && @rating_values.size > 5
        invalid_properties.push("invalid value for \"rating_values\", number of items must be less than or equal to 5."
      end

      if !@model_ids.nil? && @model_ids.size > 20
        invalid_properties.push("invalid value for \"model_ids\", number of items must be less than or equal to 20."
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@rating_values.nil? && @rating_values.size > 5
      return false if !@model_ids.nil? && @model_ids.size > 20
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] rating_values Value to be assigned
    def rating_values=(rating_values)
      if !rating_values.nil? && rating_values.size > 5
        raise ArgumentError.new("invalid value for \"rating_values\", number of items must be less than or equal to 5.")
      end

      @rating_values = rating_values
    end

    # Custom attribute writer method with validation
    # @param [Object] model_ids Value to be assigned
    def model_ids=(model_ids)
      if !model_ids.nil? && model_ids.size > 20
        raise ArgumentError.new("invalid value for \"model_ids\", number of items must be less than or equal to 20.")
      end

      @model_ids = model_ids
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          date_time_from == o.date_time_from &&
          date_time_to == o.date_time_to &&
          reaction_status == o.reaction_status &&
          rating_values == o.rating_values &&
          model_ids == o.model_ids &&
          paid == o.paid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [date_time_from, date_time_to, reaction_status, rating_values, model_ids, paid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
