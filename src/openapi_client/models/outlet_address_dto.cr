# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Адрес точки продаж. 
  class OutletAddressDTO
    include JSON::Serializable

    # Required properties
    # Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    @[JSON::Field(key: "regionId", type: Int64, nillable: false, emit_null: false)]
    property region_id : Int64

    # Optional properties
    # Улица.
    @[JSON::Field(key: "street", type: String?, nillable: true, emit_null: false)]
    property street : String?

    # Номер дома.
    @[JSON::Field(key: "number", type: String?, nillable: true, emit_null: false)]
    property number : String?

    # Номер строения.
    @[JSON::Field(key: "building", type: String?, nillable: true, emit_null: false)]
    property building : String?

    # Номер владения.
    @[JSON::Field(key: "estate", type: String?, nillable: true, emit_null: false)]
    property estate : String?

    # Номер корпуса.
    @[JSON::Field(key: "block", type: String?, nillable: true, emit_null: false)]
    property block : String?

    # Дополнительная информация.
    @[JSON::Field(key: "additional", type: String?, nillable: true, emit_null: false)]
    property additional : String?

    # Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    @[JSON::Field(key: "km", type: Int32?, nillable: true, emit_null: false)]
    property km : Int32?

    # {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
    @[JSON::Field(key: "city", type: String?, nillable: true, emit_null: false)]
    property city : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@region_id : Int64, @street : String?, @number : String?, @building : String?, @estate : String?, @block : String?, @additional : String?, @km : Int32?, @city : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      if !@street.nil? && @street.to_s.size > 512
        invalid_properties.push("invalid value for \"street\", the character length must be smaller than or equal to 512.")
      end

      if !@number.nil? && @number.to_s.size > 256
        invalid_properties.push("invalid value for \"number\", the character length must be smaller than or equal to 256.")
      end

      if !@building.nil? && @building.to_s.size > 16
        invalid_properties.push("invalid value for \"building\", the character length must be smaller than or equal to 16.")
      end

      if !@estate.nil? && @estate.to_s.size > 16
        invalid_properties.push("invalid value for \"estate\", the character length must be smaller than or equal to 16.")
      end

      if !@block.nil? && @block.to_s.size > 16
        invalid_properties.push("invalid value for \"block\", the character length must be smaller than or equal to 16.")
      end

      if !@city.nil? && @city.to_s.size > 200
        invalid_properties.push("invalid value for \"city\", the character length must be smaller than or equal to 200.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@street.nil? && @street.to_s.size > 512
      return false if !@number.nil? && @number.to_s.size > 256
      return false if !@building.nil? && @building.to_s.size > 16
      return false if !@estate.nil? && @estate.to_s.size > 16
      return false if !@block.nil? && @block.to_s.size > 16
      return false if !@city.nil? && @city.to_s.size > 200
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] street Value to be assigned
    def street=(street)
      if !street.nil? && street.to_s.size > 512
        raise ArgumentError.new("invalid value for \"street\", the character length must be smaller than or equal to 512.")
      end

      @street = street
    end

    # Custom attribute writer method with validation
    # @param [Object] number Value to be assigned
    def number=(number)
      if !number.nil? && number.to_s.size > 256
        raise ArgumentError.new("invalid value for \"number\", the character length must be smaller than or equal to 256.")
      end

      @number = number
    end

    # Custom attribute writer method with validation
    # @param [Object] building Value to be assigned
    def building=(building)
      if !building.nil? && building.to_s.size > 16
        raise ArgumentError.new("invalid value for \"building\", the character length must be smaller than or equal to 16.")
      end

      @building = building
    end

    # Custom attribute writer method with validation
    # @param [Object] estate Value to be assigned
    def estate=(estate)
      if !estate.nil? && estate.to_s.size > 16
        raise ArgumentError.new("invalid value for \"estate\", the character length must be smaller than or equal to 16.")
      end

      @estate = estate
    end

    # Custom attribute writer method with validation
    # @param [Object] block Value to be assigned
    def block=(block)
      if !block.nil? && block.to_s.size > 16
        raise ArgumentError.new("invalid value for \"block\", the character length must be smaller than or equal to 16.")
      end

      @block = block
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.size > 200
        raise ArgumentError.new("invalid value for \"city\", the character length must be smaller than or equal to 200.")
      end

      @city = city
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          region_id == o.region_id &&
          street == o.street &&
          number == o.number &&
          building == o.building &&
          estate == o.estate &&
          block == o.block &&
          additional == o.additional &&
          km == o.km &&
          city == o.city
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [region_id, street, number, building, estate, block, additional, km, city].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
