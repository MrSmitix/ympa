# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Информация о доставке.
  class OrderDeliveryDTO
    include JSON::Serializable

    # Optional properties
    # Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
    @[JSON::Field(key: "id", type: String?, nillable: true, emit_null: false)]
    property id : String?

    @[JSON::Field(key: "type", type: OrderDeliveryType?, nillable: true, emit_null: false)]
    property _type : OrderDeliveryType?

    # Наименование службы доставки.
    @[JSON::Field(key: "serviceName", type: String?, nillable: true, emit_null: false)]
    property service_name : String?

    # {% note warning \"\" %}  Этот параметр устарел. Стоимость доставки смотрите в параметре `deliveryTotal`.  {% endnote %}  Стоимость доставки в валюте заказа. 
    @[JSON::Field(key: "price", type: Float64?, nillable: true, emit_null: false)]
    property price : Float64?

    @[JSON::Field(key: "deliveryPartnerType", type: OrderDeliveryPartnerType?, nillable: true, emit_null: false)]
    property delivery_partner_type : OrderDeliveryPartnerType?

    @[JSON::Field(key: "courier", type: OrderCourierDTO?, nillable: true, emit_null: false)]
    property courier : OrderCourierDTO?

    @[JSON::Field(key: "dates", type: OrderDeliveryDatesDTO?, nillable: true, emit_null: false)]
    property dates : OrderDeliveryDatesDTO?

    @[JSON::Field(key: "region", type: RegionDTO?, nillable: true, emit_null: false)]
    property region : RegionDTO?

    @[JSON::Field(key: "address", type: OrderDeliveryAddressDTO?, nillable: true, emit_null: false)]
    property address : OrderDeliveryAddressDTO?

    @[JSON::Field(key: "vat", type: OrderVatType?, nillable: true, emit_null: false)]
    property vat : OrderVatType?

    # Идентификатор службы доставки.
    @[JSON::Field(key: "deliveryServiceId", type: Int64?, nillable: true, emit_null: false)]
    property delivery_service_id : Int64?

    @[JSON::Field(key: "liftType", type: OrderLiftType?, nillable: true, emit_null: false)]
    property lift_type : OrderLiftType?

    # Стоимость подъема на этаж.
    @[JSON::Field(key: "liftPrice", type: Float64?, nillable: true, emit_null: false)]
    property lift_price : Float64?

    # Идентификатор пункта самовывоза, присвоенный магазином.
    @[JSON::Field(key: "outletCode", type: String?, nillable: true, emit_null: false)]
    property outlet_code : String?

    # Формат даты: `ДД-ММ-ГГГГ`. 
    @[JSON::Field(key: "outletStorageLimitDate", type: String?, nillable: true, emit_null: false)]
    property outlet_storage_limit_date : String?

    @[JSON::Field(key: "dispatchType", type: OrderDeliveryDispatchType?, nillable: true, emit_null: false)]
    property dispatch_type : OrderDeliveryDispatchType?

    # Информация для отслеживания перемещений посылки.
    @[JSON::Field(key: "tracks", type: Array(OrderTrackDTO)?, nillable: true, emit_null: false)]
    property tracks : Array(OrderTrackDTO)?

    # Информация о посылках.
    @[JSON::Field(key: "shipments", type: Array(OrderShipmentDTO)?, nillable: true, emit_null: false)]
    property shipments : Array(OrderShipmentDTO)?

    # Приблизительная ли дата доставки.
    @[JSON::Field(key: "estimated", type: Bool?, nillable: true, emit_null: false)]
    property estimated : Bool?

    @[JSON::Field(key: "eacType", type: OrderDeliveryEacType?, nillable: true, emit_null: false)]
    property eac_type : OrderDeliveryEacType?

    # Код подтверждения ЭАПП (для типа `MERCHANT_TO_COURIER`). 
    @[JSON::Field(key: "eacCode", type: String?, nillable: true, emit_null: false)]
    property eac_code : String?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String?, @_type : OrderDeliveryType?, @service_name : String?, @price : Float64?, @delivery_partner_type : OrderDeliveryPartnerType?, @courier : OrderCourierDTO?, @dates : OrderDeliveryDatesDTO?, @region : RegionDTO?, @address : OrderDeliveryAddressDTO?, @vat : OrderVatType?, @delivery_service_id : Int64?, @lift_type : OrderLiftType?, @lift_price : Float64?, @outlet_code : String?, @outlet_storage_limit_date : String?, @dispatch_type : OrderDeliveryDispatchType?, @tracks : Array(OrderTrackDTO)?, @shipments : Array(OrderShipmentDTO)?, @estimated : Bool?, @eac_type : OrderDeliveryEacType?, @eac_code : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          _type == o._type &&
          service_name == o.service_name &&
          price == o.price &&
          delivery_partner_type == o.delivery_partner_type &&
          courier == o.courier &&
          dates == o.dates &&
          region == o.region &&
          address == o.address &&
          vat == o.vat &&
          delivery_service_id == o.delivery_service_id &&
          lift_type == o.lift_type &&
          lift_price == o.lift_price &&
          outlet_code == o.outlet_code &&
          outlet_storage_limit_date == o.outlet_storage_limit_date &&
          dispatch_type == o.dispatch_type &&
          tracks == o.tracks &&
          shipments == o.shipments &&
          estimated == o.estimated &&
          eac_type == o.eac_type &&
          eac_code == o.eac_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, _type, service_name, price, delivery_partner_type, courier, dates, region, address, vat, delivery_service_id, lift_type, lift_price, outlet_code, outlet_storage_limit_date, dispatch_type, tracks, shipments, estimated, eac_type, eac_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
