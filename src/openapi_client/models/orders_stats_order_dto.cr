# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Информация о заказе.
  class OrdersStatsOrderDTO
    include JSON::Serializable

    # Required properties
    # Список товаров в заказе после возможных изменений.
    @[JSON::Field(key: "items", type: Array(OrdersStatsItemDTO), nillable: false, emit_null: false)]
    property items : Array(OrdersStatsItemDTO)

    # Информация о денежных переводах по заказу.
    @[JSON::Field(key: "payments", type: Array(OrdersStatsPaymentDTO), nillable: false, emit_null: false)]
    property payments : Array(OrdersStatsPaymentDTO)

    # Информация о комиссиях за заказ.
    @[JSON::Field(key: "commissions", type: Array(OrdersStatsCommissionDTO), nillable: false, emit_null: false)]
    property commissions : Array(OrdersStatsCommissionDTO)

    # Optional properties
    # Идентификатор заказа.
    @[JSON::Field(key: "id", type: Int64?, nillable: true, emit_null: false)]
    property id : Int64?

    # Дата создания заказа.  Формат даты: `ГГГГ-ММ-ДД`. 
    @[JSON::Field(key: "creationDate", type: Time?, nillable: true, emit_null: false)]
    property creation_date : Time?

    # Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, `2017-11-21T00:00:00`. Часовой пояс — UTC+03:00 (Москва). 
    @[JSON::Field(key: "statusUpdateDate", type: Time?, nillable: true, emit_null: false)]
    property status_update_date : Time?

    @[JSON::Field(key: "status", type: OrderStatsStatusType?, nillable: true, emit_null: false)]
    property status : OrderStatsStatusType?

    # Идентификатор заказа в информационной системе магазина.
    @[JSON::Field(key: "partnerOrderId", type: String?, nillable: true, emit_null: false)]
    property partner_order_id : String?

    @[JSON::Field(key: "paymentType", type: OrdersStatsOrderPaymentType?, nillable: true, emit_null: false)]
    property payment_type : OrdersStatsOrderPaymentType?

    # Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    @[JSON::Field(key: "fake", type: Bool?, nillable: true, emit_null: false)]
    property fake : Bool?

    @[JSON::Field(key: "deliveryRegion", type: OrdersStatsDeliveryRegionDTO?, nillable: true, emit_null: false)]
    property delivery_region : OrdersStatsDeliveryRegionDTO?

    # Список товаров в заказе до изменений.
    @[JSON::Field(key: "initialItems", type: Array(OrdersStatsItemDTO)?, nillable: true, emit_null: false)]
    property initial_items : Array(OrdersStatsItemDTO)?

    class EnumAttributeValidator
      getter datatype : String
      getter allowable_values : Array(String)

      def initialize(datatype, allowable_values)
        @datatype = datatype
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.includes?(value)
      end
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@items : Array(OrdersStatsItemDTO), @payments : Array(OrdersStatsPaymentDTO), @commissions : Array(OrdersStatsCommissionDTO), @id : Int64?, @creation_date : Time?, @status_update_date : Time?, @status : OrderStatsStatusType?, @partner_order_id : String?, @payment_type : OrdersStatsOrderPaymentType?, @fake : Bool?, @delivery_region : OrdersStatsDeliveryRegionDTO?, @initial_items : Array(OrdersStatsItemDTO)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          id == o.id &&
          creation_date == o.creation_date &&
          status_update_date == o.status_update_date &&
          status == o.status &&
          partner_order_id == o.partner_order_id &&
          payment_type == o.payment_type &&
          fake == o.fake &&
          delivery_region == o.delivery_region &&
          items == o.items &&
          initial_items == o.initial_items &&
          payments == o.payments &&
          commissions == o.commissions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, creation_date, status_update_date, status, partner_order_id, payment_type, fake, delivery_region, items, initial_items, payments, commissions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
