# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  # Информация о ярлыке для коробки.
  class ParcelBoxLabelDTO
    include JSON::Serializable

    # Required properties
    # Соответствует URL, по которому выполняется запрос [GET campaigns/{campaignId}/orders/{orderId}/delivery/shipments/{shipmentId}/boxes/{boxId}/label](../../reference/orders/generateOrderLabel.md). 
    @[JSON::Field(key: "url", type: String, nillable: false, emit_null: false)]
    property url : String

    # Юридическое название магазина.
    @[JSON::Field(key: "supplierName", type: String, nillable: false, emit_null: false)]
    property supplier_name : String

    # Юридическое название службы доставки.
    @[JSON::Field(key: "deliveryServiceName", type: String, nillable: false, emit_null: false)]
    property delivery_service_name : String

    # Идентификатор заказа в системе Маркета.
    @[JSON::Field(key: "orderId", type: Int64, nillable: false, emit_null: false)]
    property order_id : Int64

    # Идентификатор заказа в информационной системе магазина.  Совпадает с `orderId`, если Маркету неизвестен номер заказа в системе магазина. 
    @[JSON::Field(key: "orderNum", type: String, nillable: false, emit_null: false)]
    property order_num : String

    # Фамилия и инициалы получателя заказа.
    @[JSON::Field(key: "recipientName", type: String, nillable: false, emit_null: false)]
    property recipient_name : String

    # Идентификатор коробки.
    @[JSON::Field(key: "boxId", type: Int64, nillable: false, emit_null: false)]
    property box_id : Int64

    # Идентификатор коробки в информационной системе магазина.  Возвращается в формате: `номер заказа на Маркете-номер коробки`. Например, `7206821‑1`, `7206821‑2` и т. д. 
    @[JSON::Field(key: "fulfilmentId", type: String, nillable: false, emit_null: false)]
    property fulfilment_id : String

    # Номер коробки в заказе. Возвращается в формате: `номер места/общее количество мест`. 
    @[JSON::Field(key: "place", type: String, nillable: false, emit_null: false)]
    property place : String

    # {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Общая масса всех товаров в заказе. Возвращается в формате: `weight кг`. 
    @[JSON::Field(key: "weight", type: String, nillable: false, emit_null: false)]
    property weight : String

    # Идентификатор службы доставки. Информацию о службе доставки можно получить с помощью запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md).
    @[JSON::Field(key: "deliveryServiceId", type: String, nillable: false, emit_null: false)]
    property delivery_service_id : String

    # Optional properties
    # Адрес получателя.
    @[JSON::Field(key: "deliveryAddress", type: String?, nillable: true, emit_null: false)]
    property delivery_address : String?

    # Дата отгрузки в формате `dd.MM.yyyy`.
    @[JSON::Field(key: "shipmentDate", type: String?, nillable: true, emit_null: false)]
    property shipment_date : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@url : String, @supplier_name : String, @delivery_service_name : String, @order_id : Int64, @order_num : String, @recipient_name : String, @box_id : Int64, @fulfilment_id : String, @place : String, @weight : String, @delivery_service_id : String, @delivery_address : String?, @shipment_date : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          url == o.url &&
          supplier_name == o.supplier_name &&
          delivery_service_name == o.delivery_service_name &&
          order_id == o.order_id &&
          order_num == o.order_num &&
          recipient_name == o.recipient_name &&
          box_id == o.box_id &&
          fulfilment_id == o.fulfilment_id &&
          place == o.place &&
          weight == o.weight &&
          delivery_service_id == o.delivery_service_id &&
          delivery_address == o.delivery_address &&
          shipment_date == o.shipment_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, supplier_name, delivery_service_name, order_id, order_num, recipient_name, box_id, fulfilment_id, place, weight, delivery_service_id, delivery_address, shipment_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
