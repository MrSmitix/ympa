# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class TariffsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Калькулятор стоимости услуг
    # Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param calculate_tariffs_request [CalculateTariffsRequest] 
    # @return [CalculateTariffsResponse]
    def calculate_tariffs(calculate_tariffs_request : CalculateTariffsRequest)
      data, _status_code, _headers = calculate_tariffs_with_http_info(calculate_tariffs_request)
      data
    end

    # Калькулятор стоимости услуг
    # Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param calculate_tariffs_request [CalculateTariffsRequest] 
    # @return [Array<(CalculateTariffsResponse, Integer, Hash)>] CalculateTariffsResponse data, response status code and response headers
    def calculate_tariffs_with_http_info(calculate_tariffs_request : CalculateTariffsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: TariffsApi.calculate_tariffs ..."}
      end
      # verify the required parameter "calculate_tariffs_request" is set
      if @api_client.config.client_side_validation && calculate_tariffs_request.nil?
        raise ArgumentError.new("Missing the required parameter 'calculate_tariffs_request' when calling TariffsApi.calculate_tariffs")
      end
      # resource path
      local_var_path = "/tariffs/calculate"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = calculate_tariffs_request.to_json

      # return_type
      return_type = "CalculateTariffsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"TariffsApi.calculate_tariffs",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: TariffsApi#calculate_tariffs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CalculateTariffsResponse.from_json(data), status_code, headers
    end
  end
end
