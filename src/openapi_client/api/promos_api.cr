# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class PromosApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Удаление товаров из акции
    # Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_promo_offers_request [DeletePromoOffersRequest] 
    # @return [DeletePromoOffersResponse]
    def delete_promo_offers(business_id : Int64, delete_promo_offers_request : DeletePromoOffersRequest)
      data, _status_code, _headers = delete_promo_offers_with_http_info(business_id, delete_promo_offers_request)
      data
    end

    # Удаление товаров из акции
    # Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_promo_offers_request [DeletePromoOffersRequest] 
    # @return [Array<(DeletePromoOffersResponse, Integer, Hash)>] DeletePromoOffersResponse data, response status code and response headers
    def delete_promo_offers_with_http_info(business_id : Int64, delete_promo_offers_request : DeletePromoOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: PromosApi.delete_promo_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling PromosApi.delete_promo_offers")
      end
      # verify the required parameter "delete_promo_offers_request" is set
      if @api_client.config.client_side_validation && delete_promo_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_promo_offers_request' when calling PromosApi.delete_promo_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos/offers/delete".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_promo_offers_request.to_json

      # return_type
      return_type = "DeletePromoOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PromosApi.delete_promo_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PromosApi#delete_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletePromoOffersResponse.from_json(data), status_code, headers
    end

    # Получение списка товаров, которые участвуют или могут участвовать в акции
    # Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_promo_offers_request [GetPromoOffersRequest] 
    # @return [GetPromoOffersResponse]
    def get_promo_offers(business_id : Int64, get_promo_offers_request : GetPromoOffersRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_promo_offers_with_http_info(business_id, get_promo_offers_request, page_token, limit)
      data
    end

    # Получение списка товаров, которые участвуют или могут участвовать в акции
    # Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_promo_offers_request [GetPromoOffersRequest] 
    # @return [Array<(GetPromoOffersResponse, Integer, Hash)>] GetPromoOffersResponse data, response status code and response headers
    def get_promo_offers_with_http_info(business_id : Int64, get_promo_offers_request : GetPromoOffersRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PromosApi.get_promo_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling PromosApi.get_promo_offers")
      end
      # verify the required parameter "get_promo_offers_request" is set
      if @api_client.config.client_side_validation && get_promo_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_promo_offers_request' when calling PromosApi.get_promo_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos/offers".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_promo_offers_request.to_json

      # return_type
      return_type = "GetPromoOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PromosApi.get_promo_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PromosApi#get_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetPromoOffersResponse.from_json(data), status_code, headers
    end

    # Получение списка акций
    # Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetPromosResponse]
    def get_promos(business_id : Int64, get_promos_request : GetPromosRequest?)
      data, _status_code, _headers = get_promos_with_http_info(business_id, get_promos_request)
      data
    end

    # Получение списка акций
    # Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetPromosResponse, Integer, Hash)>] GetPromosResponse data, response status code and response headers
    def get_promos_with_http_info(business_id : Int64, get_promos_request : GetPromosRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PromosApi.get_promos ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling PromosApi.get_promos")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_promos_request.to_json

      # return_type
      return_type = "GetPromosResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PromosApi.get_promos",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PromosApi#get_promos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetPromosResponse.from_json(data), status_code, headers
    end

    # Добавление товаров в акцию или изменение их цен
    # Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_promo_offers_request [UpdatePromoOffersRequest] 
    # @return [UpdatePromoOffersResponse]
    def update_promo_offers(business_id : Int64, update_promo_offers_request : UpdatePromoOffersRequest)
      data, _status_code, _headers = update_promo_offers_with_http_info(business_id, update_promo_offers_request)
      data
    end

    # Добавление товаров в акцию или изменение их цен
    # Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_promo_offers_request [UpdatePromoOffersRequest] 
    # @return [Array<(UpdatePromoOffersResponse, Integer, Hash)>] UpdatePromoOffersResponse data, response status code and response headers
    def update_promo_offers_with_http_info(business_id : Int64, update_promo_offers_request : UpdatePromoOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: PromosApi.update_promo_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling PromosApi.update_promo_offers")
      end
      # verify the required parameter "update_promo_offers_request" is set
      if @api_client.config.client_side_validation && update_promo_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_promo_offers_request' when calling PromosApi.update_promo_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos/offers/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_promo_offers_request.to_json

      # return_type
      return_type = "UpdatePromoOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PromosApi.update_promo_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PromosApi#update_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdatePromoOffersResponse.from_json(data), status_code, headers
    end
  end
end
