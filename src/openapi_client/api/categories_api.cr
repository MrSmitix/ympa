# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class CategoriesApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Лимит на установку кванта продажи и минимального количества товаров в заказе
    # Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param get_categories_max_sale_quantum_request [GetCategoriesMaxSaleQuantumRequest] 
    # @return [GetCategoriesMaxSaleQuantumResponse]
    def get_categories_max_sale_quantum(get_categories_max_sale_quantum_request : GetCategoriesMaxSaleQuantumRequest)
      data, _status_code, _headers = get_categories_max_sale_quantum_with_http_info(get_categories_max_sale_quantum_request)
      data
    end

    # Лимит на установку кванта продажи и минимального количества товаров в заказе
    # Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param get_categories_max_sale_quantum_request [GetCategoriesMaxSaleQuantumRequest] 
    # @return [Array<(GetCategoriesMaxSaleQuantumResponse, Integer, Hash)>] GetCategoriesMaxSaleQuantumResponse data, response status code and response headers
    def get_categories_max_sale_quantum_with_http_info(get_categories_max_sale_quantum_request : GetCategoriesMaxSaleQuantumRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: CategoriesApi.get_categories_max_sale_quantum ..."}
      end
      # verify the required parameter "get_categories_max_sale_quantum_request" is set
      if @api_client.config.client_side_validation && get_categories_max_sale_quantum_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_categories_max_sale_quantum_request' when calling CategoriesApi.get_categories_max_sale_quantum")
      end
      # resource path
      local_var_path = "/categories/max-sale-quantum"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_categories_max_sale_quantum_request.to_json

      # return_type
      return_type = "GetCategoriesMaxSaleQuantumResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"CategoriesApi.get_categories_max_sale_quantum",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CategoriesApi#get_categories_max_sale_quantum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCategoriesMaxSaleQuantumResponse.from_json(data), status_code, headers
    end

    # Дерево категорий
    # Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @return [GetCategoriesResponse]
    def get_categories_tree(get_categories_request : GetCategoriesRequest?)
      data, _status_code, _headers = get_categories_tree_with_http_info(get_categories_request)
      data
    end

    # Дерево категорий
    # Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @return [Array<(GetCategoriesResponse, Integer, Hash)>] GetCategoriesResponse data, response status code and response headers
    def get_categories_tree_with_http_info(get_categories_request : GetCategoriesRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CategoriesApi.get_categories_tree ..."}
      end
      # resource path
      local_var_path = "/categories/tree"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_categories_request.to_json

      # return_type
      return_type = "GetCategoriesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"CategoriesApi.get_categories_tree",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CategoriesApi#get_categories_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCategoriesResponse.from_json(data), status_code, headers
    end
  end
end
