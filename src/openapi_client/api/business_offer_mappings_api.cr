# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class BusinessOfferMappingsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Добавление товаров в архив
    # Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param add_offers_to_archive_request [AddOffersToArchiveRequest] 
    # @return [AddOffersToArchiveResponse]
    def add_offers_to_archive(business_id : Int64, add_offers_to_archive_request : AddOffersToArchiveRequest)
      data, _status_code, _headers = add_offers_to_archive_with_http_info(business_id, add_offers_to_archive_request)
      data
    end

    # Добавление товаров в архив
    # Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param add_offers_to_archive_request [AddOffersToArchiveRequest] 
    # @return [Array<(AddOffersToArchiveResponse, Integer, Hash)>] AddOffersToArchiveResponse data, response status code and response headers
    def add_offers_to_archive_with_http_info(business_id : Int64, add_offers_to_archive_request : AddOffersToArchiveRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessOfferMappingsApi.add_offers_to_archive ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessOfferMappingsApi.add_offers_to_archive")
      end
      # verify the required parameter "add_offers_to_archive_request" is set
      if @api_client.config.client_side_validation && add_offers_to_archive_request.nil?
        raise ArgumentError.new("Missing the required parameter 'add_offers_to_archive_request' when calling BusinessOfferMappingsApi.add_offers_to_archive")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/archive".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = add_offers_to_archive_request.to_json

      # return_type
      return_type = "AddOffersToArchiveResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessOfferMappingsApi.add_offers_to_archive",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessOfferMappingsApi#add_offers_to_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AddOffersToArchiveResponse.from_json(data), status_code, headers
    end

    # Удаление товаров из каталога
    # Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_request [DeleteOffersRequest] 
    # @return [DeleteOffersResponse]
    def delete_offers(business_id : Int64, delete_offers_request : DeleteOffersRequest)
      data, _status_code, _headers = delete_offers_with_http_info(business_id, delete_offers_request)
      data
    end

    # Удаление товаров из каталога
    # Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_request [DeleteOffersRequest] 
    # @return [Array<(DeleteOffersResponse, Integer, Hash)>] DeleteOffersResponse data, response status code and response headers
    def delete_offers_with_http_info(business_id : Int64, delete_offers_request : DeleteOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessOfferMappingsApi.delete_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessOfferMappingsApi.delete_offers")
      end
      # verify the required parameter "delete_offers_request" is set
      if @api_client.config.client_side_validation && delete_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_offers_request' when calling BusinessOfferMappingsApi.delete_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/delete".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_offers_request.to_json

      # return_type
      return_type = "DeleteOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessOfferMappingsApi.delete_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessOfferMappingsApi#delete_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteOffersResponse.from_json(data), status_code, headers
    end

    # Удаление товаров из архива
    # Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_from_archive_request [DeleteOffersFromArchiveRequest] 
    # @return [DeleteOffersFromArchiveResponse]
    def delete_offers_from_archive(business_id : Int64, delete_offers_from_archive_request : DeleteOffersFromArchiveRequest)
      data, _status_code, _headers = delete_offers_from_archive_with_http_info(business_id, delete_offers_from_archive_request)
      data
    end

    # Удаление товаров из архива
    # Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_from_archive_request [DeleteOffersFromArchiveRequest] 
    # @return [Array<(DeleteOffersFromArchiveResponse, Integer, Hash)>] DeleteOffersFromArchiveResponse data, response status code and response headers
    def delete_offers_from_archive_with_http_info(business_id : Int64, delete_offers_from_archive_request : DeleteOffersFromArchiveRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessOfferMappingsApi.delete_offers_from_archive ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessOfferMappingsApi.delete_offers_from_archive")
      end
      # verify the required parameter "delete_offers_from_archive_request" is set
      if @api_client.config.client_side_validation && delete_offers_from_archive_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_offers_from_archive_request' when calling BusinessOfferMappingsApi.delete_offers_from_archive")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/unarchive".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_offers_from_archive_request.to_json

      # return_type
      return_type = "DeleteOffersFromArchiveResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessOfferMappingsApi.delete_offers_from_archive",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessOfferMappingsApi#delete_offers_from_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteOffersFromArchiveResponse.from_json(data), status_code, headers
    end

    # Информация о товарах в каталоге
    # Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOfferMappingsResponse]
    def get_offer_mappings(business_id : Int64, page_token : String?, limit : Int32?, get_offer_mappings_request : GetOfferMappingsRequest?)
      data, _status_code, _headers = get_offer_mappings_with_http_info(business_id, page_token, limit, get_offer_mappings_request)
      data
    end

    # Информация о товарах в каталоге
    # Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOfferMappingsResponse, Integer, Hash)>] GetOfferMappingsResponse data, response status code and response headers
    def get_offer_mappings_with_http_info(business_id : Int64, page_token : String?, limit : Int32?, get_offer_mappings_request : GetOfferMappingsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessOfferMappingsApi.get_offer_mappings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessOfferMappingsApi.get_offer_mappings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_offer_mappings_request.to_json

      # return_type
      return_type = "GetOfferMappingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessOfferMappingsApi.get_offer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessOfferMappingsApi#get_offer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOfferMappingsResponse.from_json(data), status_code, headers
    end

    # Просмотр карточек на Маркете, которые подходят вашим товарам
    # Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetSuggestedOfferMappingsResponse]
    def get_suggested_offer_mappings(business_id : Int64, get_suggested_offer_mappings_request : GetSuggestedOfferMappingsRequest?)
      data, _status_code, _headers = get_suggested_offer_mappings_with_http_info(business_id, get_suggested_offer_mappings_request)
      data
    end

    # Просмотр карточек на Маркете, которые подходят вашим товарам
    # Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetSuggestedOfferMappingsResponse, Integer, Hash)>] GetSuggestedOfferMappingsResponse data, response status code and response headers
    def get_suggested_offer_mappings_with_http_info(business_id : Int64, get_suggested_offer_mappings_request : GetSuggestedOfferMappingsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessOfferMappingsApi.get_suggested_offer_mappings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessOfferMappingsApi.get_suggested_offer_mappings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/suggestions".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_suggested_offer_mappings_request.to_json

      # return_type
      return_type = "GetSuggestedOfferMappingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessOfferMappingsApi.get_suggested_offer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessOfferMappingsApi#get_suggested_offer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetSuggestedOfferMappingsResponse.from_json(data), status_code, headers
    end

    # Добавление товаров в каталог и изменение информации о них
    # Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_mappings_request [UpdateOfferMappingsRequest] 
    # @return [UpdateOfferMappingsResponse]
    def update_offer_mappings(business_id : Int64, update_offer_mappings_request : UpdateOfferMappingsRequest)
      data, _status_code, _headers = update_offer_mappings_with_http_info(business_id, update_offer_mappings_request)
      data
    end

    # Добавление товаров в каталог и изменение информации о них
    # Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_mappings_request [UpdateOfferMappingsRequest] 
    # @return [Array<(UpdateOfferMappingsResponse, Integer, Hash)>] UpdateOfferMappingsResponse data, response status code and response headers
    def update_offer_mappings_with_http_info(business_id : Int64, update_offer_mappings_request : UpdateOfferMappingsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: BusinessOfferMappingsApi.update_offer_mappings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling BusinessOfferMappingsApi.update_offer_mappings")
      end
      # verify the required parameter "update_offer_mappings_request" is set
      if @api_client.config.client_side_validation && update_offer_mappings_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_offer_mappings_request' when calling BusinessOfferMappingsApi.update_offer_mappings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_offer_mappings_request.to_json

      # return_type
      return_type = "UpdateOfferMappingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BusinessOfferMappingsApi.update_offer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BusinessOfferMappingsApi#update_offer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateOfferMappingsResponse.from_json(data), status_code, headers
    end
  end
end
