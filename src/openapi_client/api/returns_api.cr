# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class ReturnsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Информация о невыкупе или возврате
    # Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [GetReturnResponse]
    def get_return(campaign_id : Int64, order_id : Int64, return_id : Int64)
      data, _status_code, _headers = get_return_with_http_info(campaign_id, order_id, return_id)
      data
    end

    # Информация о невыкупе или возврате
    # Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [Array<(GetReturnResponse, Integer, Hash)>] GetReturnResponse data, response status code and response headers
    def get_return_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReturnsApi.get_return ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling ReturnsApi.get_return")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling ReturnsApi.get_return")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling ReturnsApi.get_return")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetReturnResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReturnsApi.get_return",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReturnsApi#get_return\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetReturnResponse.from_json(data), status_code, headers
    end

    # Получение заявления на возврат
    # Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [::File]
    def get_return_application(campaign_id : Int64, order_id : Int64, return_id : Int64)
      data, _status_code, _headers = get_return_application_with_http_info(campaign_id, order_id, return_id)
      data
    end

    # Получение заявления на возврат
    # Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def get_return_application_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReturnsApi.get_return_application ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling ReturnsApi.get_return_application")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling ReturnsApi.get_return_application")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling ReturnsApi.get_return_application")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/octet-stream", "application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "::File"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReturnsApi.get_return_application",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReturnsApi#get_return_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ::File.from_json(data), status_code, headers
    end

    # Получение фотографии возврата
    # Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @param item_id [Int64] Идентификатор товара в возврате.
    # @param image_hash [String] Хеш ссылки изображения для загрузки.
    # @return [::File]
    def get_return_photo(campaign_id : Int64, order_id : Int64, return_id : Int64, item_id : Int64, image_hash : String)
      data, _status_code, _headers = get_return_photo_with_http_info(campaign_id, order_id, return_id, item_id, image_hash)
      data
    end

    # Получение фотографии возврата
    # Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @param item_id [Int64] Идентификатор товара в возврате.
    # @param image_hash [String] Хеш ссылки изображения для загрузки.
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def get_return_photo_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64, item_id : Int64, image_hash : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReturnsApi.get_return_photo ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling ReturnsApi.get_return_photo")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling ReturnsApi.get_return_photo")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling ReturnsApi.get_return_photo")
      end
      # verify the required parameter "item_id" is set
      if @api_client.config.client_side_validation && item_id.nil?
        raise ArgumentError.new("Missing the required parameter 'item_id' when calling ReturnsApi.get_return_photo")
      end
      # verify the required parameter "image_hash" is set
      if @api_client.config.client_side_validation && image_hash.nil?
        raise ArgumentError.new("Missing the required parameter 'image_hash' when calling ReturnsApi.get_return_photo")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s)).sub("{" + "itemId" + "}", URI.encode_path(item_id.to_s)).sub("{" + "imageHash" + "}", URI.encode_path(image_hash.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/octet-stream", "application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "::File"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReturnsApi.get_return_photo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReturnsApi#get_return_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ::File.from_json(data), status_code, headers
    end

    # Список невыкупов и возвратов
    # Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetReturnsResponse]
    def get_returns(campaign_id : Int64, page_token : String?, limit : Int32?, order_ids : Array(Int64)?, statuses : Array(RefundStatusType)?, _type : ReturnType?, from_date : Time?, to_date : Time?, from_date2 : Time?, to_date2 : Time?)
      data, _status_code, _headers = get_returns_with_http_info(campaign_id, page_token, limit, order_ids, statuses, _type, from_date, to_date, from_date2, to_date2)
      data
    end

    # Список невыкупов и возвратов
    # Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetReturnsResponse, Integer, Hash)>] GetReturnsResponse data, response status code and response headers
    def get_returns_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, order_ids : Array(Int64)?, statuses : Array(RefundStatusType)?, _type : ReturnType?, from_date : Time?, to_date : Time?, from_date2 : Time?, to_date2 : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReturnsApi.get_returns ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling ReturnsApi.get_returns")
      end
      if @api_client.config.client_side_validation && order_ids.nil? && order_ids.size > 50
        raise ArgumentError.new("invalid value for \"order_ids\" when calling ReturnsApi.get_returns, number of items must be less than or equal to 50.")
      end

      # resource path
      local_var_path = "/campaigns/{campaignId}/returns".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["orderIds"] = @api_client.build_collection_param(order_ids, :csv)
      query_params["statuses"] = @api_client.build_collection_param(statuses, :csv)
      query_params["type"] = _type.to_s unless _type.nil?
      query_params["fromDate"] = from_date.to_s unless from_date.nil?
      query_params["toDate"] = to_date.to_s unless to_date.nil?
      query_params["from_date"] = from_date2.to_s unless from_date2.nil?
      query_params["to_date"] = to_date2.to_s unless to_date2.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetReturnsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReturnsApi.get_returns",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReturnsApi#get_returns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetReturnsResponse.from_json(data), status_code, headers
    end

    # Принятие или изменение решения по возврату
    # Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @param set_return_decision_request [SetReturnDecisionRequest] 
    # @return [EmptyApiResponse]
    def set_return_decision(campaign_id : Int64, order_id : Int64, return_id : Int64, set_return_decision_request : SetReturnDecisionRequest)
      data, _status_code, _headers = set_return_decision_with_http_info(campaign_id, order_id, return_id, set_return_decision_request)
      data
    end

    # Принятие или изменение решения по возврату
    # Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @param set_return_decision_request [SetReturnDecisionRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def set_return_decision_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64, set_return_decision_request : SetReturnDecisionRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReturnsApi.set_return_decision ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling ReturnsApi.set_return_decision")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling ReturnsApi.set_return_decision")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling ReturnsApi.set_return_decision")
      end
      # verify the required parameter "set_return_decision_request" is set
      if @api_client.config.client_side_validation && set_return_decision_request.nil?
        raise ArgumentError.new("Missing the required parameter 'set_return_decision_request' when calling ReturnsApi.set_return_decision")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = set_return_decision_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReturnsApi.set_return_decision",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReturnsApi#set_return_decision\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Подтверждение решения по возврату
    # Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [EmptyApiResponse]
    def submit_return_decision(campaign_id : Int64, order_id : Int64, return_id : Int64)
      data, _status_code, _headers = submit_return_decision_with_http_info(campaign_id, order_id, return_id)
      data
    end

    # Подтверждение решения по возврату
    # Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def submit_return_decision_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReturnsApi.submit_return_decision ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling ReturnsApi.submit_return_decision")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling ReturnsApi.submit_return_decision")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling ReturnsApi.submit_return_decision")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReturnsApi.submit_return_decision",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReturnsApi#submit_return_decision\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end
  end
end
