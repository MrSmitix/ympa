# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class GoodsFeedbackApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Удаление комментария к отзыву
    # Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_goods_feedback_comment_request [DeleteGoodsFeedbackCommentRequest] 
    # @return [EmptyApiResponse]
    def delete_goods_feedback_comment(business_id : Int64, delete_goods_feedback_comment_request : DeleteGoodsFeedbackCommentRequest)
      data, _status_code, _headers = delete_goods_feedback_comment_with_http_info(business_id, delete_goods_feedback_comment_request)
      data
    end

    # Удаление комментария к отзыву
    # Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_goods_feedback_comment_request [DeleteGoodsFeedbackCommentRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def delete_goods_feedback_comment_with_http_info(business_id : Int64, delete_goods_feedback_comment_request : DeleteGoodsFeedbackCommentRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: GoodsFeedbackApi.delete_goods_feedback_comment ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling GoodsFeedbackApi.delete_goods_feedback_comment")
      end
      # verify the required parameter "delete_goods_feedback_comment_request" is set
      if @api_client.config.client_side_validation && delete_goods_feedback_comment_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_goods_feedback_comment_request' when calling GoodsFeedbackApi.delete_goods_feedback_comment")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/comments/delete".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_goods_feedback_comment_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GoodsFeedbackApi.delete_goods_feedback_comment",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GoodsFeedbackApi#delete_goods_feedback_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Получение комментариев к отзыву
    # Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_feedback_comments_request [GetGoodsFeedbackCommentsRequest] 
    # @return [GetGoodsFeedbackCommentsResponse]
    def get_goods_feedback_comments(business_id : Int64, get_goods_feedback_comments_request : GetGoodsFeedbackCommentsRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_goods_feedback_comments_with_http_info(business_id, get_goods_feedback_comments_request, page_token, limit)
      data
    end

    # Получение комментариев к отзыву
    # Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_feedback_comments_request [GetGoodsFeedbackCommentsRequest] 
    # @return [Array<(GetGoodsFeedbackCommentsResponse, Integer, Hash)>] GetGoodsFeedbackCommentsResponse data, response status code and response headers
    def get_goods_feedback_comments_with_http_info(business_id : Int64, get_goods_feedback_comments_request : GetGoodsFeedbackCommentsRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: GoodsFeedbackApi.get_goods_feedback_comments ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling GoodsFeedbackApi.get_goods_feedback_comments")
      end
      # verify the required parameter "get_goods_feedback_comments_request" is set
      if @api_client.config.client_side_validation && get_goods_feedback_comments_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_goods_feedback_comments_request' when calling GoodsFeedbackApi.get_goods_feedback_comments")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/comments".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_goods_feedback_comments_request.to_json

      # return_type
      return_type = "GetGoodsFeedbackCommentsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GoodsFeedbackApi.get_goods_feedback_comments",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GoodsFeedbackApi#get_goods_feedback_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetGoodsFeedbackCommentsResponse.from_json(data), status_code, headers
    end

    # Получение отзывов о товарах продавца
    # Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetGoodsFeedbackResponse]
    def get_goods_feedbacks(business_id : Int64, page_token : String?, limit : Int32?, get_goods_feedback_request : GetGoodsFeedbackRequest?)
      data, _status_code, _headers = get_goods_feedbacks_with_http_info(business_id, page_token, limit, get_goods_feedback_request)
      data
    end

    # Получение отзывов о товарах продавца
    # Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetGoodsFeedbackResponse, Integer, Hash)>] GetGoodsFeedbackResponse data, response status code and response headers
    def get_goods_feedbacks_with_http_info(business_id : Int64, page_token : String?, limit : Int32?, get_goods_feedback_request : GetGoodsFeedbackRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: GoodsFeedbackApi.get_goods_feedbacks ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling GoodsFeedbackApi.get_goods_feedbacks")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_goods_feedback_request.to_json

      # return_type
      return_type = "GetGoodsFeedbackResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GoodsFeedbackApi.get_goods_feedbacks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GoodsFeedbackApi#get_goods_feedbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetGoodsFeedbackResponse.from_json(data), status_code, headers
    end

    # Отказ от ответа на отзывы
    # Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param skip_goods_feedback_reaction_request [SkipGoodsFeedbackReactionRequest] 
    # @return [EmptyApiResponse]
    def skip_goods_feedbacks_reaction(business_id : Int64, skip_goods_feedback_reaction_request : SkipGoodsFeedbackReactionRequest)
      data, _status_code, _headers = skip_goods_feedbacks_reaction_with_http_info(business_id, skip_goods_feedback_reaction_request)
      data
    end

    # Отказ от ответа на отзывы
    # Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param skip_goods_feedback_reaction_request [SkipGoodsFeedbackReactionRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def skip_goods_feedbacks_reaction_with_http_info(business_id : Int64, skip_goods_feedback_reaction_request : SkipGoodsFeedbackReactionRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: GoodsFeedbackApi.skip_goods_feedbacks_reaction ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling GoodsFeedbackApi.skip_goods_feedbacks_reaction")
      end
      # verify the required parameter "skip_goods_feedback_reaction_request" is set
      if @api_client.config.client_side_validation && skip_goods_feedback_reaction_request.nil?
        raise ArgumentError.new("Missing the required parameter 'skip_goods_feedback_reaction_request' when calling GoodsFeedbackApi.skip_goods_feedbacks_reaction")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/skip-reaction".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = skip_goods_feedback_reaction_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GoodsFeedbackApi.skip_goods_feedbacks_reaction",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GoodsFeedbackApi#skip_goods_feedbacks_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Добавление нового или изменение созданного комментария
    # Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_goods_feedback_comment_request [UpdateGoodsFeedbackCommentRequest] 
    # @return [UpdateGoodsFeedbackCommentResponse]
    def update_goods_feedback_comment(business_id : Int64, update_goods_feedback_comment_request : UpdateGoodsFeedbackCommentRequest)
      data, _status_code, _headers = update_goods_feedback_comment_with_http_info(business_id, update_goods_feedback_comment_request)
      data
    end

    # Добавление нового или изменение созданного комментария
    # Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_goods_feedback_comment_request [UpdateGoodsFeedbackCommentRequest] 
    # @return [Array<(UpdateGoodsFeedbackCommentResponse, Integer, Hash)>] UpdateGoodsFeedbackCommentResponse data, response status code and response headers
    def update_goods_feedback_comment_with_http_info(business_id : Int64, update_goods_feedback_comment_request : UpdateGoodsFeedbackCommentRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: GoodsFeedbackApi.update_goods_feedback_comment ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling GoodsFeedbackApi.update_goods_feedback_comment")
      end
      # verify the required parameter "update_goods_feedback_comment_request" is set
      if @api_client.config.client_side_validation && update_goods_feedback_comment_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_goods_feedback_comment_request' when calling GoodsFeedbackApi.update_goods_feedback_comment")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/comments/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_goods_feedback_comment_request.to_json

      # return_type
      return_type = "UpdateGoodsFeedbackCommentResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GoodsFeedbackApi.update_goods_feedback_comment",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GoodsFeedbackApi#update_goods_feedback_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateGoodsFeedbackCommentResponse.from_json(data), status_code, headers
    end
  end
end
