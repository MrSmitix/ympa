# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class CampaignsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Информация о магазине
    # Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignResponse]
    def get_campaign(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_with_http_info(campaign_id)
      data
    end

    # Информация о магазине
    # Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignResponse, Integer, Hash)>] GetCampaignResponse data, response status code and response headers
    def get_campaign_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.get_campaign ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling CampaignsApi.get_campaign")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.get_campaign",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#get_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignResponse.from_json(data), status_code, headers
    end

    # Логины, связанные с магазином
    # Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignLoginsResponse]
    def get_campaign_logins(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_logins_with_http_info(campaign_id)
      data
    end

    # Логины, связанные с магазином
    # Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignLoginsResponse, Integer, Hash)>] GetCampaignLoginsResponse data, response status code and response headers
    def get_campaign_logins_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.get_campaign_logins ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling CampaignsApi.get_campaign_logins")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/logins".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignLoginsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.get_campaign_logins",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#get_campaign_logins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignLoginsResponse.from_json(data), status_code, headers
    end

    # Регион магазина
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignRegionResponse]
    def get_campaign_region(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_region_with_http_info(campaign_id)
      data
    end

    # Регион магазина
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignRegionResponse, Integer, Hash)>] GetCampaignRegionResponse data, response status code and response headers
    def get_campaign_region_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.get_campaign_region ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling CampaignsApi.get_campaign_region")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/region".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignRegionResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.get_campaign_region",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#get_campaign_region\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignRegionResponse.from_json(data), status_code, headers
    end

    # Настройки магазина
    # Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignSettingsResponse]
    def get_campaign_settings(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_settings_with_http_info(campaign_id)
      data
    end

    # Настройки магазина
    # Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignSettingsResponse, Integer, Hash)>] GetCampaignSettingsResponse data, response status code and response headers
    def get_campaign_settings_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.get_campaign_settings ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling CampaignsApi.get_campaign_settings")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/settings".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignSettingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.get_campaign_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#get_campaign_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignSettingsResponse.from_json(data), status_code, headers
    end

    # Список магазинов пользователя
    # Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @return [GetCampaignsResponse]
    def get_campaigns(page : Int32?, page_size : Int32?)
      data, _status_code, _headers = get_campaigns_with_http_info(page, page_size)
      data
    end

    # Список магазинов пользователя
    # Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @return [Array<(GetCampaignsResponse, Integer, Hash)>] GetCampaignsResponse data, response status code and response headers
    def get_campaigns_with_http_info(page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.get_campaigns ..."}
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling CampaignsApi.get_campaigns, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns"

      # query parameters
      query_params = Hash(String, String).new
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.get_campaigns",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#get_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignsResponse.from_json(data), status_code, headers
    end

    # Магазины, доступные логину
    # Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param login [String] Логин пользователя.
    # @return [GetCampaignsResponse]
    def get_campaigns_by_login(login : String, page : Int32?, page_size : Int32?)
      data, _status_code, _headers = get_campaigns_by_login_with_http_info(login, page, page_size)
      data
    end

    # Магазины, доступные логину
    # Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param login [String] Логин пользователя.
    # @return [Array<(GetCampaignsResponse, Integer, Hash)>] GetCampaignsResponse data, response status code and response headers
    def get_campaigns_by_login_with_http_info(login : String, page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: CampaignsApi.get_campaigns_by_login ..."}
      end
      # verify the required parameter "login" is set
      if @api_client.config.client_side_validation && login.nil?
        raise ArgumentError.new("Missing the required parameter 'login' when calling CampaignsApi.get_campaigns_by_login")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling CampaignsApi.get_campaigns_by_login, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns/by_login/{login}".sub("{" + "login" + "}", URI.encode_path(login.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"CampaignsApi.get_campaigns_by_login",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: CampaignsApi#get_campaigns_by_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignsResponse.from_json(data), status_code, headers
    end
  end
end
