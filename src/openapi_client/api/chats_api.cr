# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class ChatsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Создание нового чата с покупателем
    # Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param create_chat_request [CreateChatRequest] description
    # @return [CreateChatResponse]
    def create_chat(business_id : Int64, create_chat_request : CreateChatRequest)
      data, _status_code, _headers = create_chat_with_http_info(business_id, create_chat_request)
      data
    end

    # Создание нового чата с покупателем
    # Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param create_chat_request [CreateChatRequest] description
    # @return [Array<(CreateChatResponse, Integer, Hash)>] CreateChatResponse data, response status code and response headers
    def create_chat_with_http_info(business_id : Int64, create_chat_request : CreateChatRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: ChatsApi.create_chat ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling ChatsApi.create_chat")
      end
      # verify the required parameter "create_chat_request" is set
      if @api_client.config.client_side_validation && create_chat_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_chat_request' when calling ChatsApi.create_chat")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/new".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_chat_request.to_json

      # return_type
      return_type = "CreateChatResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ChatsApi.create_chat",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ChatsApi#create_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateChatResponse.from_json(data), status_code, headers
    end

    # Получение истории сообщений в чате
    # Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param get_chat_history_request [GetChatHistoryRequest] description
    # @return [GetChatHistoryResponse]
    def get_chat_history(business_id : Int64, chat_id : Int64, get_chat_history_request : GetChatHistoryRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_chat_history_with_http_info(business_id, chat_id, get_chat_history_request, page_token, limit)
      data
    end

    # Получение истории сообщений в чате
    # Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param get_chat_history_request [GetChatHistoryRequest] description
    # @return [Array<(GetChatHistoryResponse, Integer, Hash)>] GetChatHistoryResponse data, response status code and response headers
    def get_chat_history_with_http_info(business_id : Int64, chat_id : Int64, get_chat_history_request : GetChatHistoryRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ChatsApi.get_chat_history ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling ChatsApi.get_chat_history")
      end
      # verify the required parameter "chat_id" is set
      if @api_client.config.client_side_validation && chat_id.nil?
        raise ArgumentError.new("Missing the required parameter 'chat_id' when calling ChatsApi.get_chat_history")
      end
      # verify the required parameter "get_chat_history_request" is set
      if @api_client.config.client_side_validation && get_chat_history_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_chat_history_request' when calling ChatsApi.get_chat_history")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/history".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["chatId"] = chat_id.to_s unless chat_id.nil?
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_chat_history_request.to_json

      # return_type
      return_type = "GetChatHistoryResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ChatsApi.get_chat_history",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ChatsApi#get_chat_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetChatHistoryResponse.from_json(data), status_code, headers
    end

    # Получение доступных чатов
    # Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_chats_request [GetChatsRequest] description
    # @return [GetChatsResponse]
    def get_chats(business_id : Int64, get_chats_request : GetChatsRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_chats_with_http_info(business_id, get_chats_request, page_token, limit)
      data
    end

    # Получение доступных чатов
    # Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_chats_request [GetChatsRequest] description
    # @return [Array<(GetChatsResponse, Integer, Hash)>] GetChatsResponse data, response status code and response headers
    def get_chats_with_http_info(business_id : Int64, get_chats_request : GetChatsRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ChatsApi.get_chats ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling ChatsApi.get_chats")
      end
      # verify the required parameter "get_chats_request" is set
      if @api_client.config.client_side_validation && get_chats_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_chats_request' when calling ChatsApi.get_chats")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_chats_request.to_json

      # return_type
      return_type = "GetChatsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ChatsApi.get_chats",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ChatsApi#get_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetChatsResponse.from_json(data), status_code, headers
    end

    # Отправка файла в чат
    # Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param file [::File] Содержимое файла. Максимальный размер файла — 5 Мбайт.
    # @return [EmptyApiResponse]
    def send_file_to_chat(business_id : Int64, chat_id : Int64, file : ::File)
      data, _status_code, _headers = send_file_to_chat_with_http_info(business_id, chat_id, file)
      data
    end

    # Отправка файла в чат
    # Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param file [::File] Содержимое файла. Максимальный размер файла — 5 Мбайт.
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def send_file_to_chat_with_http_info(business_id : Int64, chat_id : Int64, file : ::File)
      if @api_client.config.debugging
        Log.debug {"Calling API: ChatsApi.send_file_to_chat ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling ChatsApi.send_file_to_chat")
      end
      # verify the required parameter "chat_id" is set
      if @api_client.config.client_side_validation && chat_id.nil?
        raise ArgumentError.new("Missing the required parameter 'chat_id' when calling ChatsApi.send_file_to_chat")
      end
      # verify the required parameter "file" is set
      if @api_client.config.client_side_validation && file.nil?
        raise ArgumentError.new("Missing the required parameter 'file' when calling ChatsApi.send_file_to_chat")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/file/send".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["chatId"] = chat_id.to_s unless chat_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"file"] = file unless file.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ChatsApi.send_file_to_chat",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ChatsApi#send_file_to_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Отправка сообщения в чат
    # Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param send_message_to_chat_request [SendMessageToChatRequest] description
    # @return [EmptyApiResponse]
    def send_message_to_chat(business_id : Int64, chat_id : Int64, send_message_to_chat_request : SendMessageToChatRequest)
      data, _status_code, _headers = send_message_to_chat_with_http_info(business_id, chat_id, send_message_to_chat_request)
      data
    end

    # Отправка сообщения в чат
    # Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param send_message_to_chat_request [SendMessageToChatRequest] description
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def send_message_to_chat_with_http_info(business_id : Int64, chat_id : Int64, send_message_to_chat_request : SendMessageToChatRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: ChatsApi.send_message_to_chat ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling ChatsApi.send_message_to_chat")
      end
      # verify the required parameter "chat_id" is set
      if @api_client.config.client_side_validation && chat_id.nil?
        raise ArgumentError.new("Missing the required parameter 'chat_id' when calling ChatsApi.send_message_to_chat")
      end
      # verify the required parameter "send_message_to_chat_request" is set
      if @api_client.config.client_side_validation && send_message_to_chat_request.nil?
        raise ArgumentError.new("Missing the required parameter 'send_message_to_chat_request' when calling ChatsApi.send_message_to_chat")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/message".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["chatId"] = chat_id.to_s unless chat_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = send_message_to_chat_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ChatsApi.send_message_to_chat",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ChatsApi#send_message_to_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end
  end
end
