# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class ModelsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Информация об одной модели
    # Возвращает информацию о модели товара.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param model_id [Int64] Идентификатор модели товара.
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [GetModelsResponse]
    def get_model(model_id : Int64, region_id : Int64, currency : CurrencyType?)
      data, _status_code, _headers = get_model_with_http_info(model_id, region_id, currency)
      data
    end

    # Информация об одной модели
    # Возвращает информацию о модели товара.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param model_id [Int64] Идентификатор модели товара.
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [Array<(GetModelsResponse, Integer, Hash)>] GetModelsResponse data, response status code and response headers
    def get_model_with_http_info(model_id : Int64, region_id : Int64, currency : CurrencyType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ModelsApi.get_model ..."}
      end
      # verify the required parameter "model_id" is set
      if @api_client.config.client_side_validation && model_id.nil?
        raise ArgumentError.new("Missing the required parameter 'model_id' when calling ModelsApi.get_model")
      end
      if @api_client.config.client_side_validation && model_id <= 0
        raise ArgumentError.new("invalid value for \"model_id\" when calling ModelsApi.get_model, must be greater than 0.")
      end

      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling ModelsApi.get_model")
      end
      # resource path
      local_var_path = "/models/{modelId}".sub("{" + "modelId" + "}", URI.encode_path(model_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["regionId"] = region_id.to_s unless region_id.nil?
      query_params["currency"] = currency.to_s unless currency.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetModelsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ModelsApi.get_model",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ModelsApi#get_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetModelsResponse.from_json(data), status_code, headers
    end

    # Список предложений для одной модели
    # Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов `GET models/{modelId}/offers` и `POST models/offers` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param model_id [Int64] Идентификатор модели товара.
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [GetModelsOffersResponse]
    def get_model_offers(model_id : Int64, region_id : Int64, currency : CurrencyType?, order_by_price : SortOrderType?, count : Int32?, page : Int32?)
      data, _status_code, _headers = get_model_offers_with_http_info(model_id, region_id, currency, order_by_price, count, page)
      data
    end

    # Список предложений для одной модели
    # Возвращает информацию о первых десяти предложениях, расположенных на карточке модели.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей метод не поддерживается. Идентификатор групповой модели игнорируется.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param model_id [Int64] Идентификатор модели товара.
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [Array<(GetModelsOffersResponse, Integer, Hash)>] GetModelsOffersResponse data, response status code and response headers
    def get_model_offers_with_http_info(model_id : Int64, region_id : Int64, currency : CurrencyType?, order_by_price : SortOrderType?, count : Int32?, page : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ModelsApi.get_model_offers ..."}
      end
      # verify the required parameter "model_id" is set
      if @api_client.config.client_side_validation && model_id.nil?
        raise ArgumentError.new("Missing the required parameter 'model_id' when calling ModelsApi.get_model_offers")
      end
      if @api_client.config.client_side_validation && model_id <= 0
        raise ArgumentError.new("invalid value for \"model_id\" when calling ModelsApi.get_model_offers, must be greater than 0.")
      end

      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling ModelsApi.get_model_offers")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling ModelsApi.get_model_offers, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/models/{modelId}/offers".sub("{" + "modelId" + "}", URI.encode_path(model_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["regionId"] = region_id.to_s unless region_id.nil?
      query_params["currency"] = currency.to_s unless currency.nil?
      query_params["orderByPrice"] = order_by_price.to_s unless order_by_price.nil?
      query_params["count"] = count.to_s unless count.nil?
      query_params["page"] = page.to_s unless page.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetModelsOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ModelsApi.get_model_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ModelsApi#get_model_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetModelsOffersResponse.from_json(data), status_code, headers
    end

    # Информация о нескольких моделях
    # Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @param get_models_request [GetModelsRequest] 
    # @return [GetModelsResponse]
    def get_models(region_id : Int64, get_models_request : GetModelsRequest, currency : CurrencyType?)
      data, _status_code, _headers = get_models_with_http_info(region_id, get_models_request, currency)
      data
    end

    # Информация о нескольких моделях
    # Возвращает информацию о моделях товаров.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @param get_models_request [GetModelsRequest] 
    # @return [Array<(GetModelsResponse, Integer, Hash)>] GetModelsResponse data, response status code and response headers
    def get_models_with_http_info(region_id : Int64, get_models_request : GetModelsRequest, currency : CurrencyType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ModelsApi.get_models ..."}
      end
      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling ModelsApi.get_models")
      end
      # verify the required parameter "get_models_request" is set
      if @api_client.config.client_side_validation && get_models_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_models_request' when calling ModelsApi.get_models")
      end
      # resource path
      local_var_path = "/models"

      # query parameters
      query_params = Hash(String, String).new
      query_params["regionId"] = region_id.to_s unless region_id.nil?
      query_params["currency"] = currency.to_s unless currency.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_models_request.to_json

      # return_type
      return_type = "GetModelsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ModelsApi.get_models",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ModelsApi#get_models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetModelsResponse.from_json(data), status_code, headers
    end

    # Список предложений для нескольких моделей
    # Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов `GET models/{modelId}/offers` и `POST models/offers` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @param get_models_request [GetModelsRequest] 
    # @return [GetModelsOffersResponse]
    def get_models_offers(region_id : Int64, get_models_request : GetModelsRequest, currency : CurrencyType?, order_by_price : SortOrderType?)
      data, _status_code, _headers = get_models_offers_with_http_info(region_id, get_models_request, currency, order_by_price)
      data
    end

    # Список предложений для нескольких моделей
    # Возвращает информацию о первых десяти предложениях, расположенных на карточках моделей, идентификаторы которых указаны в запросе.  Предложения выдаются для определенного региона и располагаются в том же порядке, в котором они показываются в выдаче Маркета на карточке модели.  Для групповых моделей выдача предложений не поддерживается. Идентификаторы групповых моделей игнорируются.  В одном запросе можно получить информацию о предложениях не более чем для 100 моделей.  Для методов &#x60;GET models/{modelId}/offers&#x60; и &#x60;POST models/offers&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @param get_models_request [GetModelsRequest] 
    # @return [Array<(GetModelsOffersResponse, Integer, Hash)>] GetModelsOffersResponse data, response status code and response headers
    def get_models_offers_with_http_info(region_id : Int64, get_models_request : GetModelsRequest, currency : CurrencyType?, order_by_price : SortOrderType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ModelsApi.get_models_offers ..."}
      end
      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling ModelsApi.get_models_offers")
      end
      # verify the required parameter "get_models_request" is set
      if @api_client.config.client_side_validation && get_models_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_models_request' when calling ModelsApi.get_models_offers")
      end
      # resource path
      local_var_path = "/models/offers"

      # query parameters
      query_params = Hash(String, String).new
      query_params["regionId"] = region_id.to_s unless region_id.nil?
      query_params["currency"] = currency.to_s unless currency.nil?
      query_params["orderByPrice"] = order_by_price.to_s unless order_by_price.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_models_request.to_json

      # return_type
      return_type = "GetModelsOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ModelsApi.get_models_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ModelsApi#get_models_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetModelsOffersResponse.from_json(data), status_code, headers
    end

    # Поиск модели товара
    # Возвращает информацию о моделях, удовлетворяющих заданным в запросе условиям поиска.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов `GET models`, `GET models/{modelId}` и `POST models` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: <> (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param query [String] Поисковый запрос по названию модели товара.
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [SearchModelsResponse]
    def search_models(query : String, region_id : Int64, currency : CurrencyType?, page : Int32?, page_size : Int32?)
      data, _status_code, _headers = search_models_with_http_info(query, region_id, currency, page, page_size)
      data
    end

    # Поиск модели товара
    # Возвращает информацию о моделях, удовлетворяющих заданным в запросе условиям поиска.  В одном запросе можно получить информацию не более чем о 100 моделях.  Для методов &#x60;GET models&#x60;, &#x60;GET models/{modelId}&#x60; и &#x60;POST models&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество моделей, информация о которых запрошена при помощи этих методов.  |**⚙️ Лимит:** [рассчитывается индивидуально](*rule)| |-|  [//]: &lt;&gt; (rule: Суточный лимит зависит от количества предложений на карточках моделей и активных магазинов клиента. Количество предложений считается по данным за последние семь дней, не включая сегодня. Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений. Для клиентов с несколькими магазинами ограничение рассчитывается с учетом количества предложений, являющегося максимальным среди всех магазинов клиента. Для агентств ограничение суммируется по всем субклиентам агентства.) 
    # @param query [String] Поисковый запрос по названию модели товара.
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [Array<(SearchModelsResponse, Integer, Hash)>] SearchModelsResponse data, response status code and response headers
    def search_models_with_http_info(query : String, region_id : Int64, currency : CurrencyType?, page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ModelsApi.search_models ..."}
      end
      # verify the required parameter "query" is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError.new("Missing the required parameter 'query' when calling ModelsApi.search_models")
      end
      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling ModelsApi.search_models")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling ModelsApi.search_models, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/models"

      # query parameters
      query_params = Hash(String, String).new
      query_params["query"] = query.to_s unless query.nil?
      query_params["regionId"] = region_id.to_s unless region_id.nil?
      query_params["currency"] = currency.to_s unless currency.nil?
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SearchModelsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ModelsApi.search_models",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ModelsApi#search_models\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SearchModelsResponse.from_json(data), status_code, headers
    end
  end
end
