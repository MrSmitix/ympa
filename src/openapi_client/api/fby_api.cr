# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class FbyApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Скрытие товаров и настройки скрытия
    # Скрывает товары магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param add_hidden_offers_request [AddHiddenOffersRequest] Запрос на скрытие оферов.
    # @return [EmptyApiResponse]
    def add_hidden_offers(campaign_id : Int64, add_hidden_offers_request : AddHiddenOffersRequest)
      data, _status_code, _headers = add_hidden_offers_with_http_info(campaign_id, add_hidden_offers_request)
      data
    end

    # Скрытие товаров и настройки скрытия
    # Скрывает товары магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param add_hidden_offers_request [AddHiddenOffersRequest] Запрос на скрытие оферов.
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def add_hidden_offers_with_http_info(campaign_id : Int64, add_hidden_offers_request : AddHiddenOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.add_hidden_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.add_hidden_offers")
      end
      # verify the required parameter "add_hidden_offers_request" is set
      if @api_client.config.client_side_validation && add_hidden_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'add_hidden_offers_request' when calling FbyApi.add_hidden_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/hidden-offers".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = add_hidden_offers_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.add_hidden_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#add_hidden_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Добавление товаров в архив
    # Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param add_offers_to_archive_request [AddOffersToArchiveRequest] 
    # @return [AddOffersToArchiveResponse]
    def add_offers_to_archive(business_id : Int64, add_offers_to_archive_request : AddOffersToArchiveRequest)
      data, _status_code, _headers = add_offers_to_archive_with_http_info(business_id, add_offers_to_archive_request)
      data
    end

    # Добавление товаров в архив
    # Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param add_offers_to_archive_request [AddOffersToArchiveRequest] 
    # @return [Array<(AddOffersToArchiveResponse, Integer, Hash)>] AddOffersToArchiveResponse data, response status code and response headers
    def add_offers_to_archive_with_http_info(business_id : Int64, add_offers_to_archive_request : AddOffersToArchiveRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.add_offers_to_archive ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.add_offers_to_archive")
      end
      # verify the required parameter "add_offers_to_archive_request" is set
      if @api_client.config.client_side_validation && add_offers_to_archive_request.nil?
        raise ArgumentError.new("Missing the required parameter 'add_offers_to_archive_request' when calling FbyApi.add_offers_to_archive")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/archive".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = add_offers_to_archive_request.to_json

      # return_type
      return_type = "AddOffersToArchiveResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.add_offers_to_archive",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#add_offers_to_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AddOffersToArchiveResponse.from_json(data), status_code, headers
    end

    # Калькулятор стоимости услуг
    # Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр `campaignId`, либо `sellingProgram`. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param calculate_tariffs_request [CalculateTariffsRequest] 
    # @return [CalculateTariffsResponse]
    def calculate_tariffs(calculate_tariffs_request : CalculateTariffsRequest)
      data, _status_code, _headers = calculate_tariffs_with_http_info(calculate_tariffs_request)
      data
    end

    # Калькулятор стоимости услуг
    # Рассчитывает стоимость услуг Маркета для товаров с заданными параметрами. Порядок товаров в запросе и ответе сохраняется, чтобы определить, для какого товара рассчитана стоимость услуги.  Обратите внимание: калькулятор осуществляет примерные расчеты. Финальная стоимость для каждого заказа зависит от предоставленных услуг.  В запросе можно указать либо параметр &#x60;campaignId&#x60;, либо &#x60;sellingProgram&#x60;. Совместное использование параметров приведет к ошибке.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param calculate_tariffs_request [CalculateTariffsRequest] 
    # @return [Array<(CalculateTariffsResponse, Integer, Hash)>] CalculateTariffsResponse data, response status code and response headers
    def calculate_tariffs_with_http_info(calculate_tariffs_request : CalculateTariffsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.calculate_tariffs ..."}
      end
      # verify the required parameter "calculate_tariffs_request" is set
      if @api_client.config.client_side_validation && calculate_tariffs_request.nil?
        raise ArgumentError.new("Missing the required parameter 'calculate_tariffs_request' when calling FbyApi.calculate_tariffs")
      end
      # resource path
      local_var_path = "/tariffs/calculate"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = calculate_tariffs_request.to_json

      # return_type
      return_type = "CalculateTariffsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.calculate_tariffs",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#calculate_tariffs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CalculateTariffsResponse.from_json(data), status_code, headers
    end

    # Удаление товара из карантина по цене в кабинете
    # Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param confirm_prices_request [ConfirmPricesRequest] 
    # @return [EmptyApiResponse]
    def confirm_business_prices(business_id : Int64, confirm_prices_request : ConfirmPricesRequest)
      data, _status_code, _headers = confirm_business_prices_with_http_info(business_id, confirm_prices_request)
      data
    end

    # Удаление товара из карантина по цене в кабинете
    # Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param confirm_prices_request [ConfirmPricesRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def confirm_business_prices_with_http_info(business_id : Int64, confirm_prices_request : ConfirmPricesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.confirm_business_prices ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.confirm_business_prices")
      end
      # verify the required parameter "confirm_prices_request" is set
      if @api_client.config.client_side_validation && confirm_prices_request.nil?
        raise ArgumentError.new("Missing the required parameter 'confirm_prices_request' when calling FbyApi.confirm_business_prices")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/price-quarantine/confirm".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = confirm_prices_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.confirm_business_prices",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#confirm_business_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Удаление товара из карантина по цене в магазине
    # Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param confirm_prices_request [ConfirmPricesRequest] 
    # @return [EmptyApiResponse]
    def confirm_campaign_prices(campaign_id : Int64, confirm_prices_request : ConfirmPricesRequest)
      data, _status_code, _headers = confirm_campaign_prices_with_http_info(campaign_id, confirm_prices_request)
      data
    end

    # Удаление товара из карантина по цене в магазине
    # Подтверждает в заданном магазине цену на товары, которые попали в карантин, и удаляет их из карантина.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST campaigns/{campaignId}/price-quarantine](getCampaignQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param confirm_prices_request [ConfirmPricesRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def confirm_campaign_prices_with_http_info(campaign_id : Int64, confirm_prices_request : ConfirmPricesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.confirm_campaign_prices ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.confirm_campaign_prices")
      end
      # verify the required parameter "confirm_prices_request" is set
      if @api_client.config.client_side_validation && confirm_prices_request.nil?
        raise ArgumentError.new("Missing the required parameter 'confirm_prices_request' when calling FbyApi.confirm_campaign_prices")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/price-quarantine/confirm".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = confirm_prices_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.confirm_campaign_prices",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#confirm_campaign_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Создание нового чата с покупателем
    # Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param create_chat_request [CreateChatRequest] description
    # @return [CreateChatResponse]
    def create_chat(business_id : Int64, create_chat_request : CreateChatRequest)
      data, _status_code, _headers = create_chat_with_http_info(business_id, create_chat_request)
      data
    end

    # Создание нового чата с покупателем
    # Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param create_chat_request [CreateChatRequest] description
    # @return [Array<(CreateChatResponse, Integer, Hash)>] CreateChatResponse data, response status code and response headers
    def create_chat_with_http_info(business_id : Int64, create_chat_request : CreateChatRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.create_chat ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.create_chat")
      end
      # verify the required parameter "create_chat_request" is set
      if @api_client.config.client_side_validation && create_chat_request.nil?
        raise ArgumentError.new("Missing the required parameter 'create_chat_request' when calling FbyApi.create_chat")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/new".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = create_chat_request.to_json

      # return_type
      return_type = "CreateChatResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.create_chat",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#create_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CreateChatResponse.from_json(data), status_code, headers
    end

    # Удаление товаров из ассортимента магазина
    # Удаляет заданные товары из заданного магазина.  {% note warning \"Запрос удаляет товары именно из конкретного магазина\" %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_campaign_offers_request [DeleteCampaignOffersRequest] 
    # @return [DeleteCampaignOffersResponse]
    def delete_campaign_offers(campaign_id : Int64, delete_campaign_offers_request : DeleteCampaignOffersRequest)
      data, _status_code, _headers = delete_campaign_offers_with_http_info(campaign_id, delete_campaign_offers_request)
      data
    end

    # Удаление товаров из ассортимента магазина
    # Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_campaign_offers_request [DeleteCampaignOffersRequest] 
    # @return [Array<(DeleteCampaignOffersResponse, Integer, Hash)>] DeleteCampaignOffersResponse data, response status code and response headers
    def delete_campaign_offers_with_http_info(campaign_id : Int64, delete_campaign_offers_request : DeleteCampaignOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.delete_campaign_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.delete_campaign_offers")
      end
      # verify the required parameter "delete_campaign_offers_request" is set
      if @api_client.config.client_side_validation && delete_campaign_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_campaign_offers_request' when calling FbyApi.delete_campaign_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offers/delete".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_campaign_offers_request.to_json

      # return_type
      return_type = "DeleteCampaignOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.delete_campaign_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#delete_campaign_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteCampaignOffersResponse.from_json(data), status_code, headers
    end

    # Удаление комментария к отзыву
    # Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_goods_feedback_comment_request [DeleteGoodsFeedbackCommentRequest] 
    # @return [EmptyApiResponse]
    def delete_goods_feedback_comment(business_id : Int64, delete_goods_feedback_comment_request : DeleteGoodsFeedbackCommentRequest)
      data, _status_code, _headers = delete_goods_feedback_comment_with_http_info(business_id, delete_goods_feedback_comment_request)
      data
    end

    # Удаление комментария к отзыву
    # Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_goods_feedback_comment_request [DeleteGoodsFeedbackCommentRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def delete_goods_feedback_comment_with_http_info(business_id : Int64, delete_goods_feedback_comment_request : DeleteGoodsFeedbackCommentRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.delete_goods_feedback_comment ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.delete_goods_feedback_comment")
      end
      # verify the required parameter "delete_goods_feedback_comment_request" is set
      if @api_client.config.client_side_validation && delete_goods_feedback_comment_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_goods_feedback_comment_request' when calling FbyApi.delete_goods_feedback_comment")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/comments/delete".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_goods_feedback_comment_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.delete_goods_feedback_comment",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#delete_goods_feedback_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Возобновление показа товаров
    # Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_hidden_offers_request [DeleteHiddenOffersRequest] Запрос на возобновление показа оферов.
    # @return [EmptyApiResponse]
    def delete_hidden_offers(campaign_id : Int64, delete_hidden_offers_request : DeleteHiddenOffersRequest)
      data, _status_code, _headers = delete_hidden_offers_with_http_info(campaign_id, delete_hidden_offers_request)
      data
    end

    # Возобновление показа товаров
    # Возобновляет показ скрытых вами товаров магазина на Маркете.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_hidden_offers_request [DeleteHiddenOffersRequest] Запрос на возобновление показа оферов.
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def delete_hidden_offers_with_http_info(campaign_id : Int64, delete_hidden_offers_request : DeleteHiddenOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.delete_hidden_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.delete_hidden_offers")
      end
      # verify the required parameter "delete_hidden_offers_request" is set
      if @api_client.config.client_side_validation && delete_hidden_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_hidden_offers_request' when calling FbyApi.delete_hidden_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/hidden-offers/delete".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_hidden_offers_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.delete_hidden_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#delete_hidden_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Удаление товаров из каталога
    # Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_request [DeleteOffersRequest] 
    # @return [DeleteOffersResponse]
    def delete_offers(business_id : Int64, delete_offers_request : DeleteOffersRequest)
      data, _status_code, _headers = delete_offers_with_http_info(business_id, delete_offers_request)
      data
    end

    # Удаление товаров из каталога
    # Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_request [DeleteOffersRequest] 
    # @return [Array<(DeleteOffersResponse, Integer, Hash)>] DeleteOffersResponse data, response status code and response headers
    def delete_offers_with_http_info(business_id : Int64, delete_offers_request : DeleteOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.delete_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.delete_offers")
      end
      # verify the required parameter "delete_offers_request" is set
      if @api_client.config.client_side_validation && delete_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_offers_request' when calling FbyApi.delete_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/delete".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_offers_request.to_json

      # return_type
      return_type = "DeleteOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.delete_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#delete_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteOffersResponse.from_json(data), status_code, headers
    end

    # Удаление товаров из архива
    # Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_from_archive_request [DeleteOffersFromArchiveRequest] 
    # @return [DeleteOffersFromArchiveResponse]
    def delete_offers_from_archive(business_id : Int64, delete_offers_from_archive_request : DeleteOffersFromArchiveRequest)
      data, _status_code, _headers = delete_offers_from_archive_with_http_info(business_id, delete_offers_from_archive_request)
      data
    end

    # Удаление товаров из архива
    # Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_offers_from_archive_request [DeleteOffersFromArchiveRequest] 
    # @return [Array<(DeleteOffersFromArchiveResponse, Integer, Hash)>] DeleteOffersFromArchiveResponse data, response status code and response headers
    def delete_offers_from_archive_with_http_info(business_id : Int64, delete_offers_from_archive_request : DeleteOffersFromArchiveRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.delete_offers_from_archive ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.delete_offers_from_archive")
      end
      # verify the required parameter "delete_offers_from_archive_request" is set
      if @api_client.config.client_side_validation && delete_offers_from_archive_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_offers_from_archive_request' when calling FbyApi.delete_offers_from_archive")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/unarchive".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_offers_from_archive_request.to_json

      # return_type
      return_type = "DeleteOffersFromArchiveResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.delete_offers_from_archive",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#delete_offers_from_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeleteOffersFromArchiveResponse.from_json(data), status_code, headers
    end

    # Удаление товаров из акции
    # Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_promo_offers_request [DeletePromoOffersRequest] 
    # @return [DeletePromoOffersResponse]
    def delete_promo_offers(business_id : Int64, delete_promo_offers_request : DeletePromoOffersRequest)
      data, _status_code, _headers = delete_promo_offers_with_http_info(business_id, delete_promo_offers_request)
      data
    end

    # Удаление товаров из акции
    # Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param delete_promo_offers_request [DeletePromoOffersRequest] 
    # @return [Array<(DeletePromoOffersResponse, Integer, Hash)>] DeletePromoOffersResponse data, response status code and response headers
    def delete_promo_offers_with_http_info(business_id : Int64, delete_promo_offers_request : DeletePromoOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.delete_promo_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.delete_promo_offers")
      end
      # verify the required parameter "delete_promo_offers_request" is set
      if @api_client.config.client_side_validation && delete_promo_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'delete_promo_offers_request' when calling FbyApi.delete_promo_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos/offers/delete".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = delete_promo_offers_request.to_json

      # return_type
      return_type = "DeletePromoOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.delete_promo_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#delete_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DeletePromoOffersResponse.from_json(data), status_code, headers
    end

    # Отчет по бусту продаж
    # Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_boost_consolidated_request [GenerateBoostConsolidatedRequest] 
    # @return [GenerateReportResponse]
    def generate_boost_consolidated_report(generate_boost_consolidated_request : GenerateBoostConsolidatedRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_boost_consolidated_report_with_http_info(generate_boost_consolidated_request, format)
      data
    end

    # Отчет по бусту продаж
    # Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_boost_consolidated_request [GenerateBoostConsolidatedRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_boost_consolidated_report_with_http_info(generate_boost_consolidated_request : GenerateBoostConsolidatedRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_boost_consolidated_report ..."}
      end
      # verify the required parameter "generate_boost_consolidated_request" is set
      if @api_client.config.client_side_validation && generate_boost_consolidated_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_boost_consolidated_request' when calling FbyApi.generate_boost_consolidated_report")
      end
      # resource path
      local_var_path = "/reports/boost-consolidated/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_boost_consolidated_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_boost_consolidated_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_boost_consolidated_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет «Конкурентная позиция»
    # Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_competitors_position_report_request [GenerateCompetitorsPositionReportRequest] 
    # @return [GenerateReportResponse]
    def generate_competitors_position_report(generate_competitors_position_report_request : GenerateCompetitorsPositionReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_competitors_position_report_with_http_info(generate_competitors_position_report_request, format)
      data
    end

    # Отчет «Конкурентная позиция»
    # Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_competitors_position_report_request [GenerateCompetitorsPositionReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_competitors_position_report_with_http_info(generate_competitors_position_report_request : GenerateCompetitorsPositionReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_competitors_position_report ..."}
      end
      # verify the required parameter "generate_competitors_position_report_request" is set
      if @api_client.config.client_side_validation && generate_competitors_position_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_competitors_position_report_request' when calling FbyApi.generate_competitors_position_report")
      end
      # resource path
      local_var_path = "/reports/competitors-position/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_competitors_position_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_competitors_position_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_competitors_position_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по отзывам о товарах
    # Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_feedback_request [GenerateGoodsFeedbackRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_feedback_report(generate_goods_feedback_request : GenerateGoodsFeedbackRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_feedback_report_with_http_info(generate_goods_feedback_request, format)
      data
    end

    # Отчет по отзывам о товарах
    # Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_feedback_request [GenerateGoodsFeedbackRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_feedback_report_with_http_info(generate_goods_feedback_request : GenerateGoodsFeedbackRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_goods_feedback_report ..."}
      end
      # verify the required parameter "generate_goods_feedback_request" is set
      if @api_client.config.client_side_validation && generate_goods_feedback_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_feedback_request' when calling FbyApi.generate_goods_feedback_report")
      end
      # resource path
      local_var_path = "/reports/goods-feedback/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_feedback_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_goods_feedback_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_goods_feedback_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по движению товаров
    # Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_movement_report_request [GenerateGoodsMovementReportRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_movement_report(generate_goods_movement_report_request : GenerateGoodsMovementReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_movement_report_with_http_info(generate_goods_movement_report_request, format)
      data
    end

    # Отчет по движению товаров
    # Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_movement_report_request [GenerateGoodsMovementReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_movement_report_with_http_info(generate_goods_movement_report_request : GenerateGoodsMovementReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_goods_movement_report ..."}
      end
      # verify the required parameter "generate_goods_movement_report_request" is set
      if @api_client.config.client_side_validation && generate_goods_movement_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_movement_report_request' when calling FbyApi.generate_goods_movement_report")
      end
      # resource path
      local_var_path = "/reports/goods-movement/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_movement_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_goods_movement_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_goods_movement_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по реализации
    # Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_realization_report_request [GenerateGoodsRealizationReportRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_realization_report(generate_goods_realization_report_request : GenerateGoodsRealizationReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_realization_report_with_http_info(generate_goods_realization_report_request, format)
      data
    end

    # Отчет по реализации
    # Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_realization_report_request [GenerateGoodsRealizationReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_realization_report_with_http_info(generate_goods_realization_report_request : GenerateGoodsRealizationReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_goods_realization_report ..."}
      end
      # verify the required parameter "generate_goods_realization_report_request" is set
      if @api_client.config.client_side_validation && generate_goods_realization_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_realization_report_request' when calling FbyApi.generate_goods_realization_report")
      end
      # resource path
      local_var_path = "/reports/goods-realization/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_realization_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_goods_realization_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_goods_realization_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по оборачиваемости
    # Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_turnover_request [GenerateGoodsTurnoverRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_turnover_report(generate_goods_turnover_request : GenerateGoodsTurnoverRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_turnover_report_with_http_info(generate_goods_turnover_request, format)
      data
    end

    # Отчет по оборачиваемости
    # Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_turnover_request [GenerateGoodsTurnoverRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_turnover_report_with_http_info(generate_goods_turnover_request : GenerateGoodsTurnoverRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_goods_turnover_report ..."}
      end
      # verify the required parameter "generate_goods_turnover_request" is set
      if @api_client.config.client_side_validation && generate_goods_turnover_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_turnover_request' when calling FbyApi.generate_goods_turnover_report")
      end
      # resource path
      local_var_path = "/reports/goods-turnover/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_turnover_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_goods_turnover_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_goods_turnover_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет «Цены на рынке»
    # Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_prices_report_request [GeneratePricesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_prices_report(generate_prices_report_request : GeneratePricesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_prices_report_with_http_info(generate_prices_report_request, format)
      data
    end

    # Отчет «Цены на рынке»
    # Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_prices_report_request [GeneratePricesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_prices_report_with_http_info(generate_prices_report_request : GeneratePricesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_prices_report ..."}
      end
      # verify the required parameter "generate_prices_report_request" is set
      if @api_client.config.client_side_validation && generate_prices_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_prices_report_request' when calling FbyApi.generate_prices_report")
      end
      # resource path
      local_var_path = "/reports/prices/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_prices_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_prices_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_prices_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по полкам
    # Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_shelfs_statistics_request [GenerateShelfsStatisticsRequest] 
    # @return [GenerateReportResponse]
    def generate_shelfs_statistics_report(generate_shelfs_statistics_request : GenerateShelfsStatisticsRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_shelfs_statistics_report_with_http_info(generate_shelfs_statistics_request, format)
      data
    end

    # Отчет по полкам
    # Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_shelfs_statistics_request [GenerateShelfsStatisticsRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_shelfs_statistics_report_with_http_info(generate_shelfs_statistics_request : GenerateShelfsStatisticsRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_shelfs_statistics_report ..."}
      end
      # verify the required parameter "generate_shelfs_statistics_request" is set
      if @api_client.config.client_side_validation && generate_shelfs_statistics_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_shelfs_statistics_request' when calling FbyApi.generate_shelfs_statistics_report")
      end
      # resource path
      local_var_path = "/reports/shelf-statistics/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_shelfs_statistics_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_shelfs_statistics_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_shelfs_statistics_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет «Аналитика продаж»
    # Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_shows_sales_report_request [GenerateShowsSalesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_shows_sales_report(generate_shows_sales_report_request : GenerateShowsSalesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_shows_sales_report_with_http_info(generate_shows_sales_report_request, format)
      data
    end

    # Отчет «Аналитика продаж»
    # Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_shows_sales_report_request [GenerateShowsSalesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_shows_sales_report_with_http_info(generate_shows_sales_report_request : GenerateShowsSalesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_shows_sales_report ..."}
      end
      # verify the required parameter "generate_shows_sales_report_request" is set
      if @api_client.config.client_side_validation && generate_shows_sales_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_shows_sales_report_request' when calling FbyApi.generate_shows_sales_report")
      end
      # resource path
      local_var_path = "/reports/shows-sales/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_shows_sales_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_shows_sales_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_shows_sales_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по остаткам на складах
    # Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_stocks_on_warehouses_report_request [GenerateStocksOnWarehousesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_stocks_on_warehouses_report(generate_stocks_on_warehouses_report_request : GenerateStocksOnWarehousesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_stocks_on_warehouses_report_with_http_info(generate_stocks_on_warehouses_report_request, format)
      data
    end

    # Отчет по остаткам на складах
    # Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_stocks_on_warehouses_report_request [GenerateStocksOnWarehousesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_stocks_on_warehouses_report_with_http_info(generate_stocks_on_warehouses_report_request : GenerateStocksOnWarehousesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_stocks_on_warehouses_report ..."}
      end
      # verify the required parameter "generate_stocks_on_warehouses_report_request" is set
      if @api_client.config.client_side_validation && generate_stocks_on_warehouses_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_stocks_on_warehouses_report_request' when calling FbyApi.generate_stocks_on_warehouses_report")
      end
      # resource path
      local_var_path = "/reports/stocks-on-warehouses/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_stocks_on_warehouses_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_stocks_on_warehouses_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_stocks_on_warehouses_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по стоимости услуг
    # Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_marketplace_services_report_request [GenerateUnitedMarketplaceServicesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_united_marketplace_services_report(generate_united_marketplace_services_report_request : GenerateUnitedMarketplaceServicesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_united_marketplace_services_report_with_http_info(generate_united_marketplace_services_report_request, format)
      data
    end

    # Отчет по стоимости услуг
    # Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_marketplace_services_report_request [GenerateUnitedMarketplaceServicesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_united_marketplace_services_report_with_http_info(generate_united_marketplace_services_report_request : GenerateUnitedMarketplaceServicesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_united_marketplace_services_report ..."}
      end
      # verify the required parameter "generate_united_marketplace_services_report_request" is set
      if @api_client.config.client_side_validation && generate_united_marketplace_services_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_united_marketplace_services_report_request' when calling FbyApi.generate_united_marketplace_services_report")
      end
      # resource path
      local_var_path = "/reports/united-marketplace-services/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_united_marketplace_services_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_united_marketplace_services_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_united_marketplace_services_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по платежам
    # Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_netting_report_request [GenerateUnitedNettingReportRequest] 
    # @return [GenerateReportResponse]
    def generate_united_netting_report(generate_united_netting_report_request : GenerateUnitedNettingReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_united_netting_report_with_http_info(generate_united_netting_report_request, format)
      data
    end

    # Отчет по платежам
    # Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_netting_report_request [GenerateUnitedNettingReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_united_netting_report_with_http_info(generate_united_netting_report_request : GenerateUnitedNettingReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_united_netting_report ..."}
      end
      # verify the required parameter "generate_united_netting_report_request" is set
      if @api_client.config.client_side_validation && generate_united_netting_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_united_netting_report_request' when calling FbyApi.generate_united_netting_report")
      end
      # resource path
      local_var_path = "/reports/united-netting/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_united_netting_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_united_netting_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_united_netting_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по заказам
    # Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_orders_request [GenerateUnitedOrdersRequest] 
    # @return [GenerateReportResponse]
    def generate_united_orders_report(generate_united_orders_request : GenerateUnitedOrdersRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_united_orders_report_with_http_info(generate_united_orders_request, format)
      data
    end

    # Отчет по заказам
    # Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_orders_request [GenerateUnitedOrdersRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_united_orders_report_with_http_info(generate_united_orders_request : GenerateUnitedOrdersRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.generate_united_orders_report ..."}
      end
      # verify the required parameter "generate_united_orders_request" is set
      if @api_client.config.client_side_validation && generate_united_orders_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_united_orders_request' when calling FbyApi.generate_united_orders_report")
      end
      # resource path
      local_var_path = "/reports/united-orders/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_united_orders_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.generate_united_orders_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#generate_united_orders_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Все предложения магазина
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetAllOffersResponse]
    def get_all_offers(campaign_id : Int64, feed_id : Int64?, chunk : Int32?)
      data, _status_code, _headers = get_all_offers_with_http_info(campaign_id, feed_id, chunk)
      data
    end

    # Все предложения магазина
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetAllOffersResponse, Integer, Hash)>] GetAllOffersResponse data, response status code and response headers
    def get_all_offers_with_http_info(campaign_id : Int64, feed_id : Int64?, chunk : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_all_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_all_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offers/all".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["feedId"] = feed_id.to_s unless feed_id.nil?
      query_params["chunk"] = chunk.to_s unless chunk.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetAllOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_all_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_all_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetAllOffersResponse.from_json(data), status_code, headers
    end

    # Информация об установленных ставках
    # Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetBidsInfoResponse]
    def get_bids_info_for_business(business_id : Int64, page_token : String?, limit : Int32?, get_bids_info_request : GetBidsInfoRequest?)
      data, _status_code, _headers = get_bids_info_for_business_with_http_info(business_id, page_token, limit, get_bids_info_request)
      data
    end

    # Информация об установленных ставках
    # Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetBidsInfoResponse, Integer, Hash)>] GetBidsInfoResponse data, response status code and response headers
    def get_bids_info_for_business_with_http_info(business_id : Int64, page_token : String?, limit : Int32?, get_bids_info_request : GetBidsInfoRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_bids_info_for_business ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_bids_info_for_business")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/bids/info".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_bids_info_request.to_json

      # return_type
      return_type = "GetBidsInfoResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_bids_info_for_business",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_bids_info_for_business\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBidsInfoResponse.from_json(data), status_code, headers
    end

    # Рекомендованные ставки для заданных товаров
    # Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_bids_recommendations_request [GetBidsRecommendationsRequest] description.
    # @return [GetBidsRecommendationsResponse]
    def get_bids_recommendations(business_id : Int64, get_bids_recommendations_request : GetBidsRecommendationsRequest)
      data, _status_code, _headers = get_bids_recommendations_with_http_info(business_id, get_bids_recommendations_request)
      data
    end

    # Рекомендованные ставки для заданных товаров
    # Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_bids_recommendations_request [GetBidsRecommendationsRequest] description.
    # @return [Array<(GetBidsRecommendationsResponse, Integer, Hash)>] GetBidsRecommendationsResponse data, response status code and response headers
    def get_bids_recommendations_with_http_info(business_id : Int64, get_bids_recommendations_request : GetBidsRecommendationsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_bids_recommendations ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_bids_recommendations")
      end
      # verify the required parameter "get_bids_recommendations_request" is set
      if @api_client.config.client_side_validation && get_bids_recommendations_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_bids_recommendations_request' when calling FbyApi.get_bids_recommendations")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/bids/recommendations".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_bids_recommendations_request.to_json

      # return_type
      return_type = "GetBidsRecommendationsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_bids_recommendations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_bids_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBidsRecommendationsResponse.from_json(data), status_code, headers
    end

    # Список товаров, находящихся в карантине по цене в кабинете
    # Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_quarantine_offers_request [GetQuarantineOffersRequest] 
    # @return [GetQuarantineOffersResponse]
    def get_business_quarantine_offers(business_id : Int64, get_quarantine_offers_request : GetQuarantineOffersRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_business_quarantine_offers_with_http_info(business_id, get_quarantine_offers_request, page_token, limit)
      data
    end

    # Список товаров, находящихся в карантине по цене в кабинете
    # Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_quarantine_offers_request [GetQuarantineOffersRequest] 
    # @return [Array<(GetQuarantineOffersResponse, Integer, Hash)>] GetQuarantineOffersResponse data, response status code and response headers
    def get_business_quarantine_offers_with_http_info(business_id : Int64, get_quarantine_offers_request : GetQuarantineOffersRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_business_quarantine_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_business_quarantine_offers")
      end
      # verify the required parameter "get_quarantine_offers_request" is set
      if @api_client.config.client_side_validation && get_quarantine_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_quarantine_offers_request' when calling FbyApi.get_business_quarantine_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/price-quarantine".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_quarantine_offers_request.to_json

      # return_type
      return_type = "GetQuarantineOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_business_quarantine_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_business_quarantine_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetQuarantineOffersResponse.from_json(data), status_code, headers
    end

    # Настройки кабинета
    # Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetBusinessSettingsResponse]
    def get_business_settings(business_id : Int64)
      data, _status_code, _headers = get_business_settings_with_http_info(business_id)
      data
    end

    # Настройки кабинета
    # Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetBusinessSettingsResponse, Integer, Hash)>] GetBusinessSettingsResponse data, response status code and response headers
    def get_business_settings_with_http_info(business_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_business_settings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_business_settings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/settings".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetBusinessSettingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_business_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_business_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBusinessSettingsResponse.from_json(data), status_code, headers
    end

    # Информация о магазине
    # Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignResponse]
    def get_campaign(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_with_http_info(campaign_id)
      data
    end

    # Информация о магазине
    # Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignResponse, Integer, Hash)>] GetCampaignResponse data, response status code and response headers
    def get_campaign_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaign ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_campaign")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_campaign",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignResponse.from_json(data), status_code, headers
    end

    # Логины, связанные с магазином
    # Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignLoginsResponse]
    def get_campaign_logins(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_logins_with_http_info(campaign_id)
      data
    end

    # Логины, связанные с магазином
    # Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignLoginsResponse, Integer, Hash)>] GetCampaignLoginsResponse data, response status code and response headers
    def get_campaign_logins_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaign_logins ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_campaign_logins")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/logins".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignLoginsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_campaign_logins",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaign_logins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignLoginsResponse.from_json(data), status_code, headers
    end

    # Информация о товарах, которые размещены в заданном магазине
    # Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_campaign_offers_request [GetCampaignOffersRequest] 
    # @return [GetCampaignOffersResponse]
    def get_campaign_offers(campaign_id : Int64, get_campaign_offers_request : GetCampaignOffersRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_campaign_offers_with_http_info(campaign_id, get_campaign_offers_request, page_token, limit)
      data
    end

    # Информация о товарах, которые размещены в заданном магазине
    # Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_campaign_offers_request [GetCampaignOffersRequest] 
    # @return [Array<(GetCampaignOffersResponse, Integer, Hash)>] GetCampaignOffersResponse data, response status code and response headers
    def get_campaign_offers_with_http_info(campaign_id : Int64, get_campaign_offers_request : GetCampaignOffersRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaign_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_campaign_offers")
      end
      # verify the required parameter "get_campaign_offers_request" is set
      if @api_client.config.client_side_validation && get_campaign_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_campaign_offers_request' when calling FbyApi.get_campaign_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offers".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_campaign_offers_request.to_json

      # return_type
      return_type = "GetCampaignOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_campaign_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaign_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignOffersResponse.from_json(data), status_code, headers
    end

    # Список товаров, находящихся в карантине по цене в магазине
    # Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_quarantine_offers_request [GetQuarantineOffersRequest] 
    # @return [GetQuarantineOffersResponse]
    def get_campaign_quarantine_offers(campaign_id : Int64, get_quarantine_offers_request : GetQuarantineOffersRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_campaign_quarantine_offers_with_http_info(campaign_id, get_quarantine_offers_request, page_token, limit)
      data
    end

    # Список товаров, находящихся в карантине по цене в магазине
    # Возвращает список товаров, которые находятся в карантине по цене, установленной в заданном магазине.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST campaigns/{campaignId}/price-quarantine/confirm](../../reference/assortment/confirmCampaignPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_quarantine_offers_request [GetQuarantineOffersRequest] 
    # @return [Array<(GetQuarantineOffersResponse, Integer, Hash)>] GetQuarantineOffersResponse data, response status code and response headers
    def get_campaign_quarantine_offers_with_http_info(campaign_id : Int64, get_quarantine_offers_request : GetQuarantineOffersRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaign_quarantine_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_campaign_quarantine_offers")
      end
      # verify the required parameter "get_quarantine_offers_request" is set
      if @api_client.config.client_side_validation && get_quarantine_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_quarantine_offers_request' when calling FbyApi.get_campaign_quarantine_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/price-quarantine".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_quarantine_offers_request.to_json

      # return_type
      return_type = "GetQuarantineOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_campaign_quarantine_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaign_quarantine_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetQuarantineOffersResponse.from_json(data), status_code, headers
    end

    # Регион магазина
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignRegionResponse]
    def get_campaign_region(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_region_with_http_info(campaign_id)
      data
    end

    # Регион магазина
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignRegionResponse, Integer, Hash)>] GetCampaignRegionResponse data, response status code and response headers
    def get_campaign_region_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaign_region ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_campaign_region")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/region".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignRegionResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_campaign_region",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaign_region\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignRegionResponse.from_json(data), status_code, headers
    end

    # Настройки магазина
    # Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetCampaignSettingsResponse]
    def get_campaign_settings(campaign_id : Int64)
      data, _status_code, _headers = get_campaign_settings_with_http_info(campaign_id)
      data
    end

    # Настройки магазина
    # Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetCampaignSettingsResponse, Integer, Hash)>] GetCampaignSettingsResponse data, response status code and response headers
    def get_campaign_settings_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaign_settings ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_campaign_settings")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/settings".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignSettingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_campaign_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaign_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignSettingsResponse.from_json(data), status_code, headers
    end

    # Список магазинов пользователя
    # Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @return [GetCampaignsResponse]
    def get_campaigns(page : Int32?, page_size : Int32?)
      data, _status_code, _headers = get_campaigns_with_http_info(page, page_size)
      data
    end

    # Список магазинов пользователя
    # Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @return [Array<(GetCampaignsResponse, Integer, Hash)>] GetCampaignsResponse data, response status code and response headers
    def get_campaigns_with_http_info(page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaigns ..."}
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling FbyApi.get_campaigns, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns"

      # query parameters
      query_params = Hash(String, String).new
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_campaigns",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignsResponse.from_json(data), status_code, headers
    end

    # Магазины, доступные логину
    # Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param login [String] Логин пользователя.
    # @return [GetCampaignsResponse]
    def get_campaigns_by_login(login : String, page : Int32?, page_size : Int32?)
      data, _status_code, _headers = get_campaigns_by_login_with_http_info(login, page, page_size)
      data
    end

    # Магазины, доступные логину
    # Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param login [String] Логин пользователя.
    # @return [Array<(GetCampaignsResponse, Integer, Hash)>] GetCampaignsResponse data, response status code and response headers
    def get_campaigns_by_login_with_http_info(login : String, page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_campaigns_by_login ..."}
      end
      # verify the required parameter "login" is set
      if @api_client.config.client_side_validation && login.nil?
        raise ArgumentError.new("Missing the required parameter 'login' when calling FbyApi.get_campaigns_by_login")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling FbyApi.get_campaigns_by_login, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns/by_login/{login}".sub("{" + "login" + "}", URI.encode_path(login.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCampaignsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_campaigns_by_login",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_campaigns_by_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCampaignsResponse.from_json(data), status_code, headers
    end

    # Лимит на установку кванта продажи и минимального количества товаров в заказе
    # Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param get_categories_max_sale_quantum_request [GetCategoriesMaxSaleQuantumRequest] 
    # @return [GetCategoriesMaxSaleQuantumResponse]
    def get_categories_max_sale_quantum(get_categories_max_sale_quantum_request : GetCategoriesMaxSaleQuantumRequest)
      data, _status_code, _headers = get_categories_max_sale_quantum_with_http_info(get_categories_max_sale_quantum_request)
      data
    end

    # Лимит на установку кванта продажи и минимального количества товаров в заказе
    # Возвращает лимит на установку [кванта](*quantum) и минимального количества товаров в заказе, которые вы можете задать для товаров указанных категорий.  Если вы передадите значение кванта или минимального количества товаров выше установленного Маркетом ограничения, товар будет скрыт с витрины.  Подробнее о том, как продавать товары по несколько штук, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/fields/quantum).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param get_categories_max_sale_quantum_request [GetCategoriesMaxSaleQuantumRequest] 
    # @return [Array<(GetCategoriesMaxSaleQuantumResponse, Integer, Hash)>] GetCategoriesMaxSaleQuantumResponse data, response status code and response headers
    def get_categories_max_sale_quantum_with_http_info(get_categories_max_sale_quantum_request : GetCategoriesMaxSaleQuantumRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_categories_max_sale_quantum ..."}
      end
      # verify the required parameter "get_categories_max_sale_quantum_request" is set
      if @api_client.config.client_side_validation && get_categories_max_sale_quantum_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_categories_max_sale_quantum_request' when calling FbyApi.get_categories_max_sale_quantum")
      end
      # resource path
      local_var_path = "/categories/max-sale-quantum"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_categories_max_sale_quantum_request.to_json

      # return_type
      return_type = "GetCategoriesMaxSaleQuantumResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_categories_max_sale_quantum",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_categories_max_sale_quantum\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCategoriesMaxSaleQuantumResponse.from_json(data), status_code, headers
    end

    # Дерево категорий
    # Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @return [GetCategoriesResponse]
    def get_categories_tree(get_categories_request : GetCategoriesRequest?)
      data, _status_code, _headers = get_categories_tree_with_http_info(get_categories_request)
      data
    end

    # Дерево категорий
    # Возвращает дерево категорий Маркета.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @return [Array<(GetCategoriesResponse, Integer, Hash)>] GetCategoriesResponse data, response status code and response headers
    def get_categories_tree_with_http_info(get_categories_request : GetCategoriesRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_categories_tree ..."}
      end
      # resource path
      local_var_path = "/categories/tree"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_categories_request.to_json

      # return_type
      return_type = "GetCategoriesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_categories_tree",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_categories_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCategoriesResponse.from_json(data), status_code, headers
    end

    # Списки характеристик товаров по категориям
    # Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
    # @param category_id [Int64] Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    # @return [GetCategoryContentParametersResponse]
    def get_category_content_parameters(category_id : Int64)
      data, _status_code, _headers = get_category_content_parameters_with_http_info(category_id)
      data
    end

    # Списки характеристик товаров по категориям
    # Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
    # @param category_id [Int64] Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    # @return [Array<(GetCategoryContentParametersResponse, Integer, Hash)>] GetCategoryContentParametersResponse data, response status code and response headers
    def get_category_content_parameters_with_http_info(category_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_category_content_parameters ..."}
      end
      # verify the required parameter "category_id" is set
      if @api_client.config.client_side_validation && category_id.nil?
        raise ArgumentError.new("Missing the required parameter 'category_id' when calling FbyApi.get_category_content_parameters")
      end
      # resource path
      local_var_path = "/category/{categoryId}/parameters".sub("{" + "categoryId" + "}", URI.encode_path(category_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetCategoryContentParametersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_category_content_parameters",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_category_content_parameters\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetCategoryContentParametersResponse.from_json(data), status_code, headers
    end

    # Получение истории сообщений в чате
    # Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param get_chat_history_request [GetChatHistoryRequest] description
    # @return [GetChatHistoryResponse]
    def get_chat_history(business_id : Int64, chat_id : Int64, get_chat_history_request : GetChatHistoryRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_chat_history_with_http_info(business_id, chat_id, get_chat_history_request, page_token, limit)
      data
    end

    # Получение истории сообщений в чате
    # Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param get_chat_history_request [GetChatHistoryRequest] description
    # @return [Array<(GetChatHistoryResponse, Integer, Hash)>] GetChatHistoryResponse data, response status code and response headers
    def get_chat_history_with_http_info(business_id : Int64, chat_id : Int64, get_chat_history_request : GetChatHistoryRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_chat_history ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_chat_history")
      end
      # verify the required parameter "chat_id" is set
      if @api_client.config.client_side_validation && chat_id.nil?
        raise ArgumentError.new("Missing the required parameter 'chat_id' when calling FbyApi.get_chat_history")
      end
      # verify the required parameter "get_chat_history_request" is set
      if @api_client.config.client_side_validation && get_chat_history_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_chat_history_request' when calling FbyApi.get_chat_history")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/history".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["chatId"] = chat_id.to_s unless chat_id.nil?
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_chat_history_request.to_json

      # return_type
      return_type = "GetChatHistoryResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_chat_history",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_chat_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetChatHistoryResponse.from_json(data), status_code, headers
    end

    # Получение доступных чатов
    # Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_chats_request [GetChatsRequest] description
    # @return [GetChatsResponse]
    def get_chats(business_id : Int64, get_chats_request : GetChatsRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_chats_with_http_info(business_id, get_chats_request, page_token, limit)
      data
    end

    # Получение доступных чатов
    # Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_chats_request [GetChatsRequest] description
    # @return [Array<(GetChatsResponse, Integer, Hash)>] GetChatsResponse data, response status code and response headers
    def get_chats_with_http_info(business_id : Int64, get_chats_request : GetChatsRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_chats ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_chats")
      end
      # verify the required parameter "get_chats_request" is set
      if @api_client.config.client_side_validation && get_chats_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_chats_request' when calling FbyApi.get_chats")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_chats_request.to_json

      # return_type
      return_type = "GetChatsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_chats",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetChatsResponse.from_json(data), status_code, headers
    end

    # Информация о прайс-листе
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @return [GetFeedResponse]
    def get_feed(campaign_id : Int64, feed_id : Int64)
      data, _status_code, _headers = get_feed_with_http_info(campaign_id, feed_id)
      data
    end

    # Информация о прайс-листе
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает информацию о прайс-листе, размещенном на Маркете для заданного магазина. Также ресурс возвращает результаты автоматических проверок прайс-листа. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @return [Array<(GetFeedResponse, Integer, Hash)>] GetFeedResponse data, response status code and response headers
    def get_feed_with_http_info(campaign_id : Int64, feed_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_feed ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_feed")
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling FbyApi.get_feed")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/feeds/{feedId}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "feedId" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetFeedResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_feed",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetFeedResponse.from_json(data), status_code, headers
    end

    # Отчет по индексации прайс-листа
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра `generationId`.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @return [GetFeedIndexLogsResponse]
    def get_feed_index_logs(campaign_id : Int64, feed_id : Int64, limit : Int32?, published_time_from : Time?, published_time_to : Time?, status : FeedIndexLogsStatusType?)
      data, _status_code, _headers = get_feed_index_logs_with_http_info(campaign_id, feed_id, limit, published_time_from, published_time_to, status)
      data
    end

    # Отчет по индексации прайс-листа
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает отчет по индексации прайс-листа для заданного магазина. Отчет позволяет получить статистику загрузки прайс-листа и результаты его автоматических проверок.  Данные в отчете возвращаются в порядке убывания значений параметра &#x60;generationId&#x60;.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @return [Array<(GetFeedIndexLogsResponse, Integer, Hash)>] GetFeedIndexLogsResponse data, response status code and response headers
    def get_feed_index_logs_with_http_info(campaign_id : Int64, feed_id : Int64, limit : Int32?, published_time_from : Time?, published_time_to : Time?, status : FeedIndexLogsStatusType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_feed_index_logs ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_feed_index_logs")
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling FbyApi.get_feed_index_logs")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/feeds/{feedId}/index-logs".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "feedId" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["published_time_from"] = published_time_from.to_s unless published_time_from.nil?
      query_params["published_time_to"] = published_time_to.to_s unless published_time_to.nil?
      query_params["status"] = status.to_s unless status.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetFeedIndexLogsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_feed_index_logs",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_feed_index_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetFeedIndexLogsResponse.from_json(data), status_code, headers
    end

    # Новые и обновленные отзывы о магазине
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetFeedbackListResponse]
    def get_feedback_and_comment_updates(campaign_id : Int64, page_token : String?, limit : Int32?, from_date : Time?)
      data, _status_code, _headers = get_feedback_and_comment_updates_with_http_info(campaign_id, page_token, limit, from_date)
      data
    end

    # Новые и обновленные отзывы о магазине
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает новые и обновленные отзывы о магазине на Маркете.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов. Выходные данные содержат идентификатор следующей страницы.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetFeedbackListResponse, Integer, Hash)>] GetFeedbackListResponse data, response status code and response headers
    def get_feedback_and_comment_updates_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, from_date : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_feedback_and_comment_updates ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_feedback_and_comment_updates")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/feedback/updates".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["from_date"] = from_date.to_s unless from_date.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetFeedbackListResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_feedback_and_comment_updates",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_feedback_and_comment_updates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetFeedbackListResponse.from_json(data), status_code, headers
    end

    # Список прайс-листов магазина
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetFeedsResponse]
    def get_feeds(campaign_id : Int64)
      data, _status_code, _headers = get_feeds_with_http_info(campaign_id)
      data
    end

    # Список прайс-листов магазина
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Возвращает список прайс-листов, размещенных на Маркете для магазина. Также ресурс возвращает результаты автоматических проверок прайс-листов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetFeedsResponse, Integer, Hash)>] GetFeedsResponse data, response status code and response headers
    def get_feeds_with_http_info(campaign_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_feeds ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_feeds")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/feeds".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetFeedsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_feeds",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_feeds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetFeedsResponse.from_json(data), status_code, headers
    end

    # Идентификаторы складов Маркета (FBY)
    # Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @return [GetFulfillmentWarehousesResponse]
    def get_fulfillment_warehouses()
      data, _status_code, _headers = get_fulfillment_warehouses_with_http_info()
      data
    end

    # Идентификаторы складов Маркета (FBY)
    # Возвращает список складов Маркета с их идентификаторами.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @return [Array<(GetFulfillmentWarehousesResponse, Integer, Hash)>] GetFulfillmentWarehousesResponse data, response status code and response headers
    def get_fulfillment_warehouses_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_fulfillment_warehouses ..."}
      end
      # resource path
      local_var_path = "/warehouses"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetFulfillmentWarehousesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_fulfillment_warehouses",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_fulfillment_warehouses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetFulfillmentWarehousesResponse.from_json(data), status_code, headers
    end

    # Получение комментариев к отзыву
    # Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_feedback_comments_request [GetGoodsFeedbackCommentsRequest] 
    # @return [GetGoodsFeedbackCommentsResponse]
    def get_goods_feedback_comments(business_id : Int64, get_goods_feedback_comments_request : GetGoodsFeedbackCommentsRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_goods_feedback_comments_with_http_info(business_id, get_goods_feedback_comments_request, page_token, limit)
      data
    end

    # Получение комментариев к отзыву
    # Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_feedback_comments_request [GetGoodsFeedbackCommentsRequest] 
    # @return [Array<(GetGoodsFeedbackCommentsResponse, Integer, Hash)>] GetGoodsFeedbackCommentsResponse data, response status code and response headers
    def get_goods_feedback_comments_with_http_info(business_id : Int64, get_goods_feedback_comments_request : GetGoodsFeedbackCommentsRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_goods_feedback_comments ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_goods_feedback_comments")
      end
      # verify the required parameter "get_goods_feedback_comments_request" is set
      if @api_client.config.client_side_validation && get_goods_feedback_comments_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_goods_feedback_comments_request' when calling FbyApi.get_goods_feedback_comments")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/comments".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_goods_feedback_comments_request.to_json

      # return_type
      return_type = "GetGoodsFeedbackCommentsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_goods_feedback_comments",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_goods_feedback_comments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetGoodsFeedbackCommentsResponse.from_json(data), status_code, headers
    end

    # Получение отзывов о товарах продавца
    # Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetGoodsFeedbackResponse]
    def get_goods_feedbacks(business_id : Int64, page_token : String?, limit : Int32?, get_goods_feedback_request : GetGoodsFeedbackRequest?)
      data, _status_code, _headers = get_goods_feedbacks_with_http_info(business_id, page_token, limit, get_goods_feedback_request)
      data
    end

    # Получение отзывов о товарах продавца
    # Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetGoodsFeedbackResponse, Integer, Hash)>] GetGoodsFeedbackResponse data, response status code and response headers
    def get_goods_feedbacks_with_http_info(business_id : Int64, page_token : String?, limit : Int32?, get_goods_feedback_request : GetGoodsFeedbackRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_goods_feedbacks ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_goods_feedbacks")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_goods_feedback_request.to_json

      # return_type
      return_type = "GetGoodsFeedbackResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_goods_feedbacks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_goods_feedbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetGoodsFeedbackResponse.from_json(data), status_code, headers
    end

    # Отчет по товарам
    # Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_stats_request [GetGoodsStatsRequest] 
    # @return [GetGoodsStatsResponse]
    def get_goods_stats(campaign_id : Int64, get_goods_stats_request : GetGoodsStatsRequest)
      data, _status_code, _headers = get_goods_stats_with_http_info(campaign_id, get_goods_stats_request)
      data
    end

    # Отчет по товарам
    # Возвращает подробный отчет по товарам, которые вы разместили на Маркете. С помощью отчета вы можете узнать, например, об остатках на складе, об условиях хранения ваших товаров и т. д.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_goods_stats_request [GetGoodsStatsRequest] 
    # @return [Array<(GetGoodsStatsResponse, Integer, Hash)>] GetGoodsStatsResponse data, response status code and response headers
    def get_goods_stats_with_http_info(campaign_id : Int64, get_goods_stats_request : GetGoodsStatsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_goods_stats ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_goods_stats")
      end
      # verify the required parameter "get_goods_stats_request" is set
      if @api_client.config.client_side_validation && get_goods_stats_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_goods_stats_request' when calling FbyApi.get_goods_stats")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/stats/skus".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_goods_stats_request.to_json

      # return_type
      return_type = "GetGoodsStatsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_goods_stats",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_goods_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetGoodsStatsResponse.from_json(data), status_code, headers
    end

    # Информация о скрытых вами товарах
    # Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetHiddenOffersResponse]
    def get_hidden_offers(campaign_id : Int64, offer_id : Array(String)?, page_token : String?, limit : Int32?, offset : Int32?, page : Int32?, page_size : Int32?)
      data, _status_code, _headers = get_hidden_offers_with_http_info(campaign_id, offer_id, page_token, limit, offset, page, page_size)
      data
    end

    # Информация о скрытых вами товарах
    # Возвращает список скрытых вами товаров для заданного магазина.  В списке будут товары, скрытые любым способом — по API, с помощью YML-фида, в кабинете и так далее.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetHiddenOffersResponse, Integer, Hash)>] GetHiddenOffersResponse data, response status code and response headers
    def get_hidden_offers_with_http_info(campaign_id : Int64, offer_id : Array(String)?, page_token : String?, limit : Int32?, offset : Int32?, page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_hidden_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_hidden_offers")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling FbyApi.get_hidden_offers, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns/{campaignId}/hidden-offers".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["offer_id"] = @api_client.build_collection_param(offer_id, :csv)
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["offset"] = offset.to_s unless offset.nil?
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetHiddenOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_hidden_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_hidden_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetHiddenOffersResponse.from_json(data), status_code, headers
    end

    # Получение информации о заполненности карточек магазина
    # Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOfferCardsContentStatusResponse]
    def get_offer_cards_content_status(business_id : Int64, page_token : String?, limit : Int32?, get_offer_cards_content_status_request : GetOfferCardsContentStatusRequest?)
      data, _status_code, _headers = get_offer_cards_content_status_with_http_info(business_id, page_token, limit, get_offer_cards_content_status_request)
      data
    end

    # Получение информации о заполненности карточек магазина
    # Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOfferCardsContentStatusResponse, Integer, Hash)>] GetOfferCardsContentStatusResponse data, response status code and response headers
    def get_offer_cards_content_status_with_http_info(business_id : Int64, page_token : String?, limit : Int32?, get_offer_cards_content_status_request : GetOfferCardsContentStatusRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_offer_cards_content_status ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_offer_cards_content_status")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-cards".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_offer_cards_content_status_request.to_json

      # return_type
      return_type = "GetOfferCardsContentStatusResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_offer_cards_content_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_offer_cards_content_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOfferCardsContentStatusResponse.from_json(data), status_code, headers
    end

    # Список товаров в каталоге
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOfferMappingEntriesResponse]
    def get_offer_mapping_entries(campaign_id : Int64, offer_id : Array(String)?, shop_sku : Array(String)?, mapping_kind : OfferMappingKindType?, status : Array(OfferProcessingStatusType)?, availability : Array(OfferAvailabilityStatusType)?, category_id : Array(Int32)?, vendor : Array(String)?, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_offer_mapping_entries_with_http_info(campaign_id, offer_id, shop_sku, mapping_kind, status, availability, category_id, vendor, page_token, limit)
      data
    end

    # Список товаров в каталоге
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  Для каждого товара, который вы размещаете на Маркете, возвращается информация о карточках Маркета, к которым привязан этот товар:  * Идентификатор текущей карточки (marketSku), карточки, которая проходит модерацию и последней отклоненной карточки. * Описание товара, которое указано на карточке Маркета. Например, размер упаковки и вес товара.  Результаты возвращаются постранично. Выходные данные содержат идентификатор следующей страницы.  {% note info %}  Количество товаров в каталоге магазина считается по данным за последние семь дней (не включая сегодня).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров в каталоге магазина * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOfferMappingEntriesResponse, Integer, Hash)>] GetOfferMappingEntriesResponse data, response status code and response headers
    def get_offer_mapping_entries_with_http_info(campaign_id : Int64, offer_id : Array(String)?, shop_sku : Array(String)?, mapping_kind : OfferMappingKindType?, status : Array(OfferProcessingStatusType)?, availability : Array(OfferAvailabilityStatusType)?, category_id : Array(Int32)?, vendor : Array(String)?, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_offer_mapping_entries ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_offer_mapping_entries")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-mapping-entries".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["offer_id"] = @api_client.build_collection_param(offer_id, :csv)
      query_params["shop_sku"] = @api_client.build_collection_param(shop_sku, :csv)
      query_params["mapping_kind"] = mapping_kind.to_s unless mapping_kind.nil?
      query_params["status"] = @api_client.build_collection_param(status, :csv)
      query_params["availability"] = @api_client.build_collection_param(availability, :csv)
      query_params["category_id"] = @api_client.build_collection_param(category_id, :csv)
      query_params["vendor"] = @api_client.build_collection_param(vendor, :csv)
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetOfferMappingEntriesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_offer_mapping_entries",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_offer_mapping_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOfferMappingEntriesResponse.from_json(data), status_code, headers
    end

    # Информация о товарах в каталоге
    # Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOfferMappingsResponse]
    def get_offer_mappings(business_id : Int64, page_token : String?, limit : Int32?, get_offer_mappings_request : GetOfferMappingsRequest?)
      data, _status_code, _headers = get_offer_mappings_with_http_info(business_id, page_token, limit, get_offer_mappings_request)
      data
    end

    # Информация о товарах в каталоге
    # Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOfferMappingsResponse, Integer, Hash)>] GetOfferMappingsResponse data, response status code and response headers
    def get_offer_mappings_with_http_info(business_id : Int64, page_token : String?, limit : Int32?, get_offer_mappings_request : GetOfferMappingsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_offer_mappings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_offer_mappings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_offer_mappings_request.to_json

      # return_type
      return_type = "GetOfferMappingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_offer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_offer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOfferMappingsResponse.from_json(data), status_code, headers
    end

    # Рекомендации Маркета, касающиеся цен
    # Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_offer_recommendations_request [GetOfferRecommendationsRequest] 
    # @return [GetOfferRecommendationsResponse]
    def get_offer_recommendations(business_id : Int64, get_offer_recommendations_request : GetOfferRecommendationsRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_offer_recommendations_with_http_info(business_id, get_offer_recommendations_request, page_token, limit)
      data
    end

    # Рекомендации Маркета, касающиеся цен
    # Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_offer_recommendations_request [GetOfferRecommendationsRequest] 
    # @return [Array<(GetOfferRecommendationsResponse, Integer, Hash)>] GetOfferRecommendationsResponse data, response status code and response headers
    def get_offer_recommendations_with_http_info(business_id : Int64, get_offer_recommendations_request : GetOfferRecommendationsRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_offer_recommendations ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_offer_recommendations")
      end
      # verify the required parameter "get_offer_recommendations_request" is set
      if @api_client.config.client_side_validation && get_offer_recommendations_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_offer_recommendations_request' when calling FbyApi.get_offer_recommendations")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offers/recommendations".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_offer_recommendations_request.to_json

      # return_type
      return_type = "GetOfferRecommendationsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_offer_recommendations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_offer_recommendations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOfferRecommendationsResponse.from_json(data), status_code, headers
    end

    # Предложения магазина
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOffersResponse]
    def get_offers(campaign_id : Int64, query : String?, feed_id : Int64?, shop_category_id : String?, currency : CurrencyType?, matched : Bool?, page : Int32?, page_size : Int32?)
      data, _status_code, _headers = get_offers_with_http_info(campaign_id, query, feed_id, shop_category_id, currency, matched, page, page_size)
      data
    end

    # Предложения магазина
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOffersResponse, Integer, Hash)>] GetOffersResponse data, response status code and response headers
    def get_offers_with_http_info(campaign_id : Int64, query : String?, feed_id : Int64?, shop_category_id : String?, currency : CurrencyType?, matched : Bool?, page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_offers")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling FbyApi.get_offers, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns/{campaignId}/offers".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["query"] = query.to_s unless query.nil?
      query_params["feedId"] = feed_id.to_s unless feed_id.nil?
      query_params["shopCategoryId"] = shop_category_id.to_s unless shop_category_id.nil?
      query_params["currency"] = currency.to_s unless currency.nil?
      query_params["matched"] = matched.to_s unless matched.nil?
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOffersResponse.from_json(data), status_code, headers
    end

    # Информация об одном заказе
    # Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @return [GetOrderResponse]
    def get_order(campaign_id : Int64, order_id : Int64)
      data, _status_code, _headers = get_order_with_http_info(campaign_id, order_id)
      data
    end

    # Информация об одном заказе
    # Возвращает информацию о заказе.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @return [Array<(GetOrderResponse, Integer, Hash)>] GetOrderResponse data, response status code and response headers
    def get_order_with_http_info(campaign_id : Int64, order_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_order ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_order")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling FbyApi.get_order")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetOrderResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_order",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOrderResponse.from_json(data), status_code, headers
    end

    # Информация о покупателе — юридическом лице
    # Возвращает информацию о покупателе по идентификатору заказа.  {% note info \"\" %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе `PROCESSING`, `DELIVERY`, `PICKUP` или `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @return [GetBusinessBuyerInfoResponse]
    def get_order_business_buyer_info(campaign_id : Int64, order_id : Int64)
      data, _status_code, _headers = get_order_business_buyer_info_with_http_info(campaign_id, order_id)
      data
    end

    # Информация о покупателе — юридическом лице
    # Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является физическим лицом, воспользуйтесь запросом [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60;, &#x60;PICKUP&#x60; или &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @return [Array<(GetBusinessBuyerInfoResponse, Integer, Hash)>] GetBusinessBuyerInfoResponse data, response status code and response headers
    def get_order_business_buyer_info_with_http_info(campaign_id : Int64, order_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_order_business_buyer_info ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_order_business_buyer_info")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling FbyApi.get_order_business_buyer_info")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/business-buyer".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetBusinessBuyerInfoResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_order_business_buyer_info",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_order_business_buyer_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBusinessBuyerInfoResponse.from_json(data), status_code, headers
    end

    # Информация о документах
    # Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус `DELIVERED`.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @return [GetBusinessDocumentsInfoResponse]
    def get_order_business_documents_info(campaign_id : Int64, order_id : Int64)
      data, _status_code, _headers = get_order_business_documents_info_with_http_info(campaign_id, order_id)
      data
    end

    # Информация о документах
    # Возвращает информацию о документах по идентификатору заказа.  Получить данные можно после того, как заказ перейдет в статус &#x60;DELIVERED&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @return [Array<(GetBusinessDocumentsInfoResponse, Integer, Hash)>] GetBusinessDocumentsInfoResponse data, response status code and response headers
    def get_order_business_documents_info_with_http_info(campaign_id : Int64, order_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_order_business_documents_info ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_order_business_documents_info")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling FbyApi.get_order_business_documents_info")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/documents".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetBusinessDocumentsInfoResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_order_business_documents_info",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_order_business_documents_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetBusinessDocumentsInfoResponse.from_json(data), status_code, headers
    end

    # Информация о нескольких заказах
    # Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры `page_token` и `limit`.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOrdersResponse]
    def get_orders(campaign_id : Int64, order_ids : Array(Int64)?, status : Set(OrderStatusType)?, substatus : Set(OrderSubstatusType)?, from_date : Time?, to_date : Time?, supplier_shipment_date_from : Time?, supplier_shipment_date_to : Time?, updated_at_from : Time?, updated_at_to : Time?, dispatch_type : OrderDeliveryDispatchType?, fake : Bool?, has_cis : Bool?, only_waiting_for_cancellation_approve : Bool?, only_estimated_delivery : Bool?, buyer_type : OrderBuyerType?, page : Int32?, page_size : Int32?, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_orders_with_http_info(campaign_id, order_ids, status, substatus, from_date, to_date, supplier_shipment_date_from, supplier_shipment_date_to, updated_at_from, updated_at_to, dispatch_type, fake, has_cis, only_waiting_for_cancellation_approve, only_estimated_delivery, buyer_type, page, page_size, page_token, limit)
      data
    end

    # Информация о нескольких заказах
    # Возвращает информацию о заказах. Запрос можно использовать, чтобы узнать, нет ли новых заказов.  Доступна фильтрация по нескольким характеристикам заказов:  * дате оформления;  * статусу;  * идентификаторам заказов;  * этапу обработки или причине отмены;  * типу (настоящий или тестовый);  * дате отгрузки в службу доставки;  * дате и времени обновления заказа.  Информация о заказах, доставленных или отмененных больше 30 дней назад, не возвращается. Ее можно получить с помощью запроса информации об отдельном заказе [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) (если у вас есть идентификатор заказа) или запроса отчета по заказам [POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md).  Максимальный диапазон дат за один запрос к ресурсу — 30 дней. Максимальное количество заказов в выходных данных запроса — 50.  Результаты возвращаются постранично. Для навигации по страницам используйте параметры &#x60;page_token&#x60; и &#x60;limit&#x60;.  Получить более подробную информацию о покупателе и его номере телефона можно с помощью запроса [GET campaigns/{campaignId}/orders/{orderId}/buyer](../../reference/orders/getOrderBuyerInfo.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOrdersResponse, Integer, Hash)>] GetOrdersResponse data, response status code and response headers
    def get_orders_with_http_info(campaign_id : Int64, order_ids : Array(Int64)?, status : Set(OrderStatusType)?, substatus : Set(OrderSubstatusType)?, from_date : Time?, to_date : Time?, supplier_shipment_date_from : Time?, supplier_shipment_date_to : Time?, updated_at_from : Time?, updated_at_to : Time?, dispatch_type : OrderDeliveryDispatchType?, fake : Bool?, has_cis : Bool?, only_waiting_for_cancellation_approve : Bool?, only_estimated_delivery : Bool?, buyer_type : OrderBuyerType?, page : Int32?, page_size : Int32?, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_orders ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_orders")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling FbyApi.get_orders, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/campaigns/{campaignId}/orders".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["orderIds"] = @api_client.build_collection_param(order_ids, :csv)
      query_params["status"] = @api_client.build_collection_param(status, :csv)
      query_params["substatus"] = @api_client.build_collection_param(substatus, :csv)
      query_params["fromDate"] = from_date.to_s unless from_date.nil?
      query_params["toDate"] = to_date.to_s unless to_date.nil?
      query_params["supplierShipmentDateFrom"] = supplier_shipment_date_from.to_s unless supplier_shipment_date_from.nil?
      query_params["supplierShipmentDateTo"] = supplier_shipment_date_to.to_s unless supplier_shipment_date_to.nil?
      query_params["updatedAtFrom"] = updated_at_from.to_s unless updated_at_from.nil?
      query_params["updatedAtTo"] = updated_at_to.to_s unless updated_at_to.nil?
      query_params["dispatchType"] = dispatch_type.to_s unless dispatch_type.nil?
      query_params["fake"] = fake.to_s unless fake.nil?
      query_params["hasCis"] = has_cis.to_s unless has_cis.nil?
      query_params["onlyWaitingForCancellationApprove"] = only_waiting_for_cancellation_approve.to_s unless only_waiting_for_cancellation_approve.nil?
      query_params["onlyEstimatedDelivery"] = only_estimated_delivery.to_s unless only_estimated_delivery.nil?
      query_params["buyerType"] = buyer_type.to_s unless buyer_type.nil?
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetOrdersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_orders",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOrdersResponse.from_json(data), status_code, headers
    end

    # Детальная информация по заказам
    # Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \"\" %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetOrdersStatsResponse]
    def get_orders_stats(campaign_id : Int64, page_token : String?, limit : Int32?, get_orders_stats_request : GetOrdersStatsRequest?)
      data, _status_code, _headers = get_orders_stats_with_http_info(campaign_id, page_token, limit, get_orders_stats_request)
      data
    end

    # Детальная информация по заказам
    # Возвращает информацию по заказам на Маркете, в которых есть ваши товары. С помощью нее вы можете собрать статистику по вашим заказам и узнать, например, какие из товаров чаще всего возвращаются покупателями, какие, наоборот, пользуются большим спросом, какая комиссия начисляется за заказы и т. п.  {% note info \&quot;\&quot; %}  Раньше генерация детальной информации по заказам называлась **Отчет по заказам**. Сейчас это новый отчет. [Подробнее об отчете](../../reference/reports/generateUnitedOrdersReport.md)  {% endnote %}  В одном запросе можно получить информацию не более чем по 200 заказам.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetOrdersStatsResponse, Integer, Hash)>] GetOrdersStatsResponse data, response status code and response headers
    def get_orders_stats_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, get_orders_stats_request : GetOrdersStatsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_orders_stats ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_orders_stats")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/stats/orders".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_orders_stats_request.to_json

      # return_type
      return_type = "GetOrdersStatsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_orders_stats",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_orders_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetOrdersStatsResponse.from_json(data), status_code, headers
    end

    # Список цен
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** ```(количество товаров партнера на витрине) * 25``` товаров в сутки| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetPricesResponse]
    def get_prices(campaign_id : Int64, page_token : String?, limit : Int32?, archived : Bool?)
      data, _status_code, _headers = get_prices_with_http_info(campaign_id, page_token, limit, archived)
      data
    end

    # Список цен
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST campaigns/{campaignId}/offer-prices](../../reference/assortment/getPricesByOfferIds.md).  {% endnote %}  Возвращает список цен, установленных вами на товары любым способом: например, через партнерский API или в файле с каталогом.  {% note info %}  Общее количество товаров считается по данным за последние семь дней (не включая сегодня) и не может быть выше 2 миллионов.  {% endnote %}  Способы установки цен описаны [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/assortment/operations/prices.html).  |**⚙️ Лимит:** &#x60;&#x60;&#x60;(количество товаров партнера на витрине) * 25&#x60;&#x60;&#x60; товаров в сутки| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetPricesResponse, Integer, Hash)>] GetPricesResponse data, response status code and response headers
    def get_prices_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, archived : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_prices ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_prices")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-prices".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["archived"] = archived.to_s unless archived.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetPricesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_prices",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetPricesResponse.from_json(data), status_code, headers
    end

    # Просмотр цен на указанные товары в магазине
    # Возвращает список цен на указанные товары в магазине.  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: <> (rule: суточный лимит товаров — количество товаров на витрине * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetPricesByOfferIdsResponse]
    def get_prices_by_offer_ids(campaign_id : Int64, page_token : String?, limit : Int32?, get_prices_by_offer_ids_request : GetPricesByOfferIdsRequest?)
      data, _status_code, _headers = get_prices_by_offer_ids_with_http_info(campaign_id, page_token, limit, get_prices_by_offer_ids_request)
      data
    end

    # Просмотр цен на указанные товары в магазине
    # Возвращает список цен на указанные товары в магазине.  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для просмотра базовых цен используйте [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md).  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — количество товаров на витрине * 25) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetPricesByOfferIdsResponse, Integer, Hash)>] GetPricesByOfferIdsResponse data, response status code and response headers
    def get_prices_by_offer_ids_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, get_prices_by_offer_ids_request : GetPricesByOfferIdsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_prices_by_offer_ids ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_prices_by_offer_ids")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-prices".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_prices_by_offer_ids_request.to_json

      # return_type
      return_type = "GetPricesByOfferIdsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_prices_by_offer_ids",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_prices_by_offer_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetPricesByOfferIdsResponse.from_json(data), status_code, headers
    end

    # Получение списка товаров, которые участвуют или могут участвовать в акции
    # Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_promo_offers_request [GetPromoOffersRequest] 
    # @return [GetPromoOffersResponse]
    def get_promo_offers(business_id : Int64, get_promo_offers_request : GetPromoOffersRequest, page_token : String?, limit : Int32?)
      data, _status_code, _headers = get_promo_offers_with_http_info(business_id, get_promo_offers_request, page_token, limit)
      data
    end

    # Получение списка товаров, которые участвуют или могут участвовать в акции
    # Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_promo_offers_request [GetPromoOffersRequest] 
    # @return [Array<(GetPromoOffersResponse, Integer, Hash)>] GetPromoOffersResponse data, response status code and response headers
    def get_promo_offers_with_http_info(business_id : Int64, get_promo_offers_request : GetPromoOffersRequest, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_promo_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_promo_offers")
      end
      # verify the required parameter "get_promo_offers_request" is set
      if @api_client.config.client_side_validation && get_promo_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_promo_offers_request' when calling FbyApi.get_promo_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos/offers".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_promo_offers_request.to_json

      # return_type
      return_type = "GetPromoOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_promo_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetPromoOffersResponse.from_json(data), status_code, headers
    end

    # Получение списка акций
    # Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetPromosResponse]
    def get_promos(business_id : Int64, get_promos_request : GetPromosRequest?)
      data, _status_code, _headers = get_promos_with_http_info(business_id, get_promos_request)
      data
    end

    # Получение списка акций
    # Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetPromosResponse, Integer, Hash)>] GetPromosResponse data, response status code and response headers
    def get_promos_with_http_info(business_id : Int64, get_promos_request : GetPromosRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_promos ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_promos")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_promos_request.to_json

      # return_type
      return_type = "GetPromosResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_promos",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_promos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetPromosResponse.from_json(data), status_code, headers
    end

    # Индекс качества магазинов
    # Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_quality_rating_request [GetQualityRatingRequest] 
    # @return [GetQualityRatingResponse]
    def get_quality_ratings(business_id : Int64, get_quality_rating_request : GetQualityRatingRequest)
      data, _status_code, _headers = get_quality_ratings_with_http_info(business_id, get_quality_rating_request)
      data
    end

    # Индекс качества магазинов
    # Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_quality_rating_request [GetQualityRatingRequest] 
    # @return [Array<(GetQualityRatingResponse, Integer, Hash)>] GetQualityRatingResponse data, response status code and response headers
    def get_quality_ratings_with_http_info(business_id : Int64, get_quality_rating_request : GetQualityRatingRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_quality_ratings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_quality_ratings")
      end
      # verify the required parameter "get_quality_rating_request" is set
      if @api_client.config.client_side_validation && get_quality_rating_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_quality_rating_request' when calling FbyApi.get_quality_ratings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/ratings/quality".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_quality_rating_request.to_json

      # return_type
      return_type = "GetQualityRatingResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_quality_ratings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_quality_ratings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetQualityRatingResponse.from_json(data), status_code, headers
    end

    # Получение заданного отчета
    # Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param report_id [String] Идентификатор отчета, который вы получили после запуска генерации. 
    # @return [GetReportInfoResponse]
    def get_report_info(report_id : String)
      data, _status_code, _headers = get_report_info_with_http_info(report_id)
      data
    end

    # Получение заданного отчета
    # Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param report_id [String] Идентификатор отчета, который вы получили после запуска генерации. 
    # @return [Array<(GetReportInfoResponse, Integer, Hash)>] GetReportInfoResponse data, response status code and response headers
    def get_report_info_with_http_info(report_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_report_info ..."}
      end
      # verify the required parameter "report_id" is set
      if @api_client.config.client_side_validation && report_id.nil?
        raise ArgumentError.new("Missing the required parameter 'report_id' when calling FbyApi.get_report_info")
      end
      # resource path
      local_var_path = "/reports/info/{reportId}".sub("{" + "reportId" + "}", URI.encode_path(report_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetReportInfoResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_report_info",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_report_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetReportInfoResponse.from_json(data), status_code, headers
    end

    # Информация о невыкупе или возврате
    # Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [GetReturnResponse]
    def get_return(campaign_id : Int64, order_id : Int64, return_id : Int64)
      data, _status_code, _headers = get_return_with_http_info(campaign_id, order_id, return_id)
      data
    end

    # Информация о невыкупе или возврате
    # Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @return [Array<(GetReturnResponse, Integer, Hash)>] GetReturnResponse data, response status code and response headers
    def get_return_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_return ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_return")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling FbyApi.get_return")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling FbyApi.get_return")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetReturnResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_return",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_return\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetReturnResponse.from_json(data), status_code, headers
    end

    # Получение фотографии возврата
    # Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @param item_id [Int64] Идентификатор товара в возврате.
    # @param image_hash [String] Хеш ссылки изображения для загрузки.
    # @return [::File]
    def get_return_photo(campaign_id : Int64, order_id : Int64, return_id : Int64, item_id : Int64, image_hash : String)
      data, _status_code, _headers = get_return_photo_with_http_info(campaign_id, order_id, return_id, item_id, image_hash)
      data
    end

    # Получение фотографии возврата
    # Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param order_id [Int64] Идентификатор заказа.
    # @param return_id [Int64] Идентификатор возврата.
    # @param item_id [Int64] Идентификатор товара в возврате.
    # @param image_hash [String] Хеш ссылки изображения для загрузки.
    # @return [Array<(::File, Integer, Hash)>] ::File data, response status code and response headers
    def get_return_photo_with_http_info(campaign_id : Int64, order_id : Int64, return_id : Int64, item_id : Int64, image_hash : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_return_photo ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_return_photo")
      end
      # verify the required parameter "order_id" is set
      if @api_client.config.client_side_validation && order_id.nil?
        raise ArgumentError.new("Missing the required parameter 'order_id' when calling FbyApi.get_return_photo")
      end
      # verify the required parameter "return_id" is set
      if @api_client.config.client_side_validation && return_id.nil?
        raise ArgumentError.new("Missing the required parameter 'return_id' when calling FbyApi.get_return_photo")
      end
      # verify the required parameter "item_id" is set
      if @api_client.config.client_side_validation && item_id.nil?
        raise ArgumentError.new("Missing the required parameter 'item_id' when calling FbyApi.get_return_photo")
      end
      # verify the required parameter "image_hash" is set
      if @api_client.config.client_side_validation && image_hash.nil?
        raise ArgumentError.new("Missing the required parameter 'image_hash' when calling FbyApi.get_return_photo")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "orderId" + "}", URI.encode_path(order_id.to_s)).sub("{" + "returnId" + "}", URI.encode_path(return_id.to_s)).sub("{" + "itemId" + "}", URI.encode_path(item_id.to_s)).sub("{" + "imageHash" + "}", URI.encode_path(image_hash.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/octet-stream", "application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "::File"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_return_photo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_return_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ::File.from_json(data), status_code, headers
    end

    # Список невыкупов и возвратов
    # Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetReturnsResponse]
    def get_returns(campaign_id : Int64, page_token : String?, limit : Int32?, order_ids : Array(Int64)?, statuses : Array(RefundStatusType)?, _type : ReturnType?, from_date : Time?, to_date : Time?, from_date2 : Time?, to_date2 : Time?)
      data, _status_code, _headers = get_returns_with_http_info(campaign_id, page_token, limit, order_ids, statuses, _type, from_date, to_date, from_date2, to_date2)
      data
    end

    # Список невыкупов и возвратов
    # Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetReturnsResponse, Integer, Hash)>] GetReturnsResponse data, response status code and response headers
    def get_returns_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, order_ids : Array(Int64)?, statuses : Array(RefundStatusType)?, _type : ReturnType?, from_date : Time?, to_date : Time?, from_date2 : Time?, to_date2 : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_returns ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_returns")
      end
      if @api_client.config.client_side_validation && order_ids.nil? && order_ids.size > 50
        raise ArgumentError.new("invalid value for \"order_ids\" when calling FbyApi.get_returns, number of items must be less than or equal to 50.")
      end

      # resource path
      local_var_path = "/campaigns/{campaignId}/returns".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?
      query_params["orderIds"] = @api_client.build_collection_param(order_ids, :csv)
      query_params["statuses"] = @api_client.build_collection_param(statuses, :csv)
      query_params["type"] = _type.to_s unless _type.nil?
      query_params["fromDate"] = from_date.to_s unless from_date.nil?
      query_params["toDate"] = to_date.to_s unless to_date.nil?
      query_params["from_date"] = from_date2.to_s unless from_date2.nil?
      query_params["to_date"] = to_date2.to_s unless to_date2.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetReturnsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.get_returns",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_returns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetReturnsResponse.from_json(data), status_code, headers
    end

    # Информация об остатках и оборачиваемости
    # Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \"По умолчанию данные по оборачивамости не возращаются\" %}  Чтобы они были в ответе, передавайте `true` в поле `withTurnover`.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: <> (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetWarehouseStocksResponse]
    def get_stocks(campaign_id : Int64, page_token : String?, limit : Int32?, get_warehouse_stocks_request : GetWarehouseStocksRequest?)
      data, _status_code, _headers = get_stocks_with_http_info(campaign_id, page_token, limit, get_warehouse_stocks_request)
      data
    end

    # Информация об остатках и оборачиваемости
    # Возвращает данные об остатках товаров (для всех моделей) и об [оборачиваемости](*turnover) товаров (для модели FBY).  {% note info \&quot;По умолчанию данные по оборачивамости не возращаются\&quot; %}  Чтобы они были в ответе, передавайте &#x60;true&#x60; в поле &#x60;withTurnover&#x60;.  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в минуту| |-|  [//]: &lt;&gt; (turnover: Среднее количество дней, за которое товар продается. Подробно об оборачиваемости рассказано в Справке Маркета для продавцов https://yandex.ru/support/marketplace/analytics/turnover.html.) 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetWarehouseStocksResponse, Integer, Hash)>] GetWarehouseStocksResponse data, response status code and response headers
    def get_stocks_with_http_info(campaign_id : Int64, page_token : String?, limit : Int32?, get_warehouse_stocks_request : GetWarehouseStocksRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_stocks ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_stocks")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offers/stocks".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_warehouse_stocks_request.to_json

      # return_type
      return_type = "GetWarehouseStocksResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_stocks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_stocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetWarehouseStocksResponse.from_json(data), status_code, headers
    end

    # Рекомендованные карточки для товаров
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku=», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_suggested_offer_mapping_entries_request [GetSuggestedOfferMappingEntriesRequest] 
    # @return [GetSuggestedOfferMappingEntriesResponse]
    def get_suggested_offer_mapping_entries(campaign_id : Int64, get_suggested_offer_mapping_entries_request : GetSuggestedOfferMappingEntriesRequest)
      data, _status_code, _headers = get_suggested_offer_mapping_entries_with_http_info(campaign_id, get_suggested_offer_mapping_entries_request)
      data
    end

    # Рекомендованные карточки для товаров
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/suggestions](../../reference/business-assortment/getSuggestedOfferMappings.md).  {% endnote %}  Возвращает идентификаторы карточек товаров на Маркете, рекомендованных для ваших товаров.  Каждому товару, который вы размещаете, должна соответствовать карточка товара на Маркете со своим идентификатором — SKU на Маркете. Он указывается в URL карточки товара, после «...sku&#x3D;», например:  ##https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016…##  Чтобы получить для товаров рекомендованные SKU на Маркете, передайте в теле POST-запроса как можно больше информации о них: названия, производителей, штрихкоды, цены и т. д.  Полученные SKU можно передать вместе с информацией о ваших товарах с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/updates](../../reference/offer-mappings/updateOfferMappingEntries.md).  В одном запросе можно получить не более 500 рекомендаций.  |**⚙️ Лимит:** 100 000 рекомендаций в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param get_suggested_offer_mapping_entries_request [GetSuggestedOfferMappingEntriesRequest] 
    # @return [Array<(GetSuggestedOfferMappingEntriesResponse, Integer, Hash)>] GetSuggestedOfferMappingEntriesResponse data, response status code and response headers
    def get_suggested_offer_mapping_entries_with_http_info(campaign_id : Int64, get_suggested_offer_mapping_entries_request : GetSuggestedOfferMappingEntriesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_suggested_offer_mapping_entries ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_suggested_offer_mapping_entries")
      end
      # verify the required parameter "get_suggested_offer_mapping_entries_request" is set
      if @api_client.config.client_side_validation && get_suggested_offer_mapping_entries_request.nil?
        raise ArgumentError.new("Missing the required parameter 'get_suggested_offer_mapping_entries_request' when calling FbyApi.get_suggested_offer_mapping_entries")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-mapping-entries/suggestions".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_suggested_offer_mapping_entries_request.to_json

      # return_type
      return_type = "GetSuggestedOfferMappingEntriesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_suggested_offer_mapping_entries",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_suggested_offer_mapping_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetSuggestedOfferMappingEntriesResponse.from_json(data), status_code, headers
    end

    # Просмотр карточек на Маркете, которые подходят вашим товарам
    # Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [GetSuggestedOfferMappingsResponse]
    def get_suggested_offer_mappings(business_id : Int64, get_suggested_offer_mappings_request : GetSuggestedOfferMappingsRequest?)
      data, _status_code, _headers = get_suggested_offer_mappings_with_http_info(business_id, get_suggested_offer_mappings_request)
      data
    end

    # Просмотр карточек на Маркете, которые подходят вашим товарам
    # Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @return [Array<(GetSuggestedOfferMappingsResponse, Integer, Hash)>] GetSuggestedOfferMappingsResponse data, response status code and response headers
    def get_suggested_offer_mappings_with_http_info(business_id : Int64, get_suggested_offer_mappings_request : GetSuggestedOfferMappingsRequest?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_suggested_offer_mappings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.get_suggested_offer_mappings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/suggestions".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = get_suggested_offer_mappings_request.to_json

      # return_type
      return_type = "GetSuggestedOfferMappingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_suggested_offer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_suggested_offer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetSuggestedOfferMappingsResponse.from_json(data), status_code, headers
    end

    # Цены для продвижения товаров
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \"\" %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param suggest_prices_request [SuggestPricesRequest] 
    # @return [SuggestPricesResponse]
    def get_suggested_prices(campaign_id : Int64, suggest_prices_request : SuggestPricesRequest)
      data, _status_code, _headers = get_suggested_prices_with_http_info(campaign_id, suggest_prices_request)
      data
    end

    # Цены для продвижения товаров
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [отчет «Цены на рынке»](../../reference/reports/generatePricesReport.md).  {% endnote %}  {% note warning \&quot;\&quot; %}  Этот метод подходит только тем магазинам, которые устанавливают цены на товары в рублях.  {% endnote %}  Возвращает цены для продвижения товаров, которые вы размещаете на Маркете.  Товары, для которых нужно получить цены, передаются в теле POST-запроса.  Цены для продвижения зависят от цен, установленных на товары другими партнерами. Если один товар поставляют несколько партнеров, на Маркете сначала продается товар с более низкой ценой. Когда закончится товар по низкой цене, начнет продаваться товар по более высокой цене.  Выходные данные содержат для каждого товара несколько цен, соответствующих разным типам продвижения.  Установить цены на товары можно с помощью запроса [POST campaigns/{campaignId}/offer-prices/updates](../../reference/assortment/updatePrices.md) или другими способами: например, указать их в файле с каталогом. Также вы можете использовать стратегии для автоматической установки рекомендованных цен или минимальных цен на Маркете.  Подробно об автоматическом управлении ценами рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/prices.html).  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param suggest_prices_request [SuggestPricesRequest] 
    # @return [Array<(SuggestPricesResponse, Integer, Hash)>] SuggestPricesResponse data, response status code and response headers
    def get_suggested_prices_with_http_info(campaign_id : Int64, suggest_prices_request : SuggestPricesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.get_suggested_prices ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.get_suggested_prices")
      end
      # verify the required parameter "suggest_prices_request" is set
      if @api_client.config.client_side_validation && suggest_prices_request.nil?
        raise ArgumentError.new("Missing the required parameter 'suggest_prices_request' when calling FbyApi.get_suggested_prices")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-prices/suggestions".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = suggest_prices_request.to_json

      # return_type
      return_type = "SuggestPricesResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.get_suggested_prices",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#get_suggested_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SuggestPricesResponse.from_json(data), status_code, headers
    end

    # Включение буста продаж и установка ставок
    # Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param put_sku_bids_request [PutSkuBidsRequest] description
    # @return [EmptyApiResponse]
    def put_bids_for_business(business_id : Int64, put_sku_bids_request : PutSkuBidsRequest)
      data, _status_code, _headers = put_bids_for_business_with_http_info(business_id, put_sku_bids_request)
      data
    end

    # Включение буста продаж и установка ставок
    # Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param put_sku_bids_request [PutSkuBidsRequest] description
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def put_bids_for_business_with_http_info(business_id : Int64, put_sku_bids_request : PutSkuBidsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.put_bids_for_business ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.put_bids_for_business")
      end
      # verify the required parameter "put_sku_bids_request" is set
      if @api_client.config.client_side_validation && put_sku_bids_request.nil?
        raise ArgumentError.new("Missing the required parameter 'put_sku_bids_request' when calling FbyApi.put_bids_for_business")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/bids".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = put_sku_bids_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"FbyApi.put_bids_for_business",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#put_bids_for_business\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Включение буста продаж и установка ставок для магазина
    # Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param put_sku_bids_request [PutSkuBidsRequest] description
    # @return [EmptyApiResponse]
    def put_bids_for_campaign(campaign_id : Int64, put_sku_bids_request : PutSkuBidsRequest)
      data, _status_code, _headers = put_bids_for_campaign_with_http_info(campaign_id, put_sku_bids_request)
      data
    end

    # Включение буста продаж и установка ставок для магазина
    # Запускает буст продаж в указанном магазине — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  При первом использовании запроса Маркет: создаст кампанию, добавит в нее товары с указанными ставками для заданного магазина, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же кампанией, созданной через этот запрос или [PUT businesses/{businessId}/bids](/reference/bids/putBidsForBusiness). Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param put_sku_bids_request [PutSkuBidsRequest] description
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def put_bids_for_campaign_with_http_info(campaign_id : Int64, put_sku_bids_request : PutSkuBidsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.put_bids_for_campaign ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.put_bids_for_campaign")
      end
      # verify the required parameter "put_sku_bids_request" is set
      if @api_client.config.client_side_validation && put_sku_bids_request.nil?
        raise ArgumentError.new("Missing the required parameter 'put_sku_bids_request' when calling FbyApi.put_bids_for_campaign")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/bids".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = put_sku_bids_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"FbyApi.put_bids_for_campaign",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#put_bids_for_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Сообщить, что прайс-лист обновился
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом `POST campaigns/{campaignId}/feeds/{feedId}/refresh`. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — `200 OK`. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @return [EmptyApiResponse]
    def refresh_feed(campaign_id : Int64, feed_id : Int64)
      data, _status_code, _headers = refresh_feed_with_http_info(campaign_id, feed_id)
      data
    end

    # Сообщить, что прайс-лист обновился
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет сообщить, что магазин обновил прайс-лист. После этого Маркет начнет обновление данных на сервисе. 1. Магазин обновляет прайс-лист, ссылку на который он указал в кабинете. 2. Магазин отправляет Маркету запрос методом &#x60;POST campaigns/{campaignId}/feeds/{feedId}/refresh&#x60;. 3. Маркет начинает обновление данных магазина на сервисе.  {% note alert %}  Запрос работает только для включенных магазинов. Если магазин выключен, данные на Маркете не обновятся, даже если HTTP-код — &#x60;200 OK&#x60;. Проверить статус магазина можно с помощью базовых запросов или на странице бизнес-аккаунта.  {% endnote %}  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def refresh_feed_with_http_info(campaign_id : Int64, feed_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.refresh_feed ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.refresh_feed")
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling FbyApi.refresh_feed")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/feeds/{feedId}/refresh".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "feedId" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.refresh_feed",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#refresh_feed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Информация о дочерних регионах
    # Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [GetRegionWithChildrenResponse]
    def search_region_children(region_id : Int64, page : Int32?, page_size : Int32?)
      data, _status_code, _headers = search_region_children_with_http_info(region_id, page, page_size)
      data
    end

    # Информация о дочерних регионах
    # Возвращает информацию о регионах, являющихся дочерними по отношению к региону, идентификатор которого указан в запросе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [Array<(GetRegionWithChildrenResponse, Integer, Hash)>] GetRegionWithChildrenResponse data, response status code and response headers
    def search_region_children_with_http_info(region_id : Int64, page : Int32?, page_size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.search_region_children ..."}
      end
      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling FbyApi.search_region_children")
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 10000
        raise ArgumentError.new("invalid value for \"page\" when calling FbyApi.search_region_children, must be smaller than or equal to 10000.")
      end

      # resource path
      local_var_path = "/regions/{regionId}/children".sub("{" + "regionId" + "}", URI.encode_path(region_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["page"] = page.to_s unless page.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetRegionWithChildrenResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.search_region_children",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#search_region_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetRegionWithChildrenResponse.from_json(data), status_code, headers
    end

    # Информация о регионе
    # Возвращает информацию о регионе.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [GetRegionsResponse]
    def search_regions_by_id(region_id : Int64)
      data, _status_code, _headers = search_regions_by_id_with_http_info(region_id)
      data
    end

    # Информация о регионе
    # Возвращает информацию о регионе.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
    # @param region_id [Int64] Идентификатор региона.  Идентификатор региона можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md). 
    # @return [Array<(GetRegionsResponse, Integer, Hash)>] GetRegionsResponse data, response status code and response headers
    def search_regions_by_id_with_http_info(region_id : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.search_regions_by_id ..."}
      end
      # verify the required parameter "region_id" is set
      if @api_client.config.client_side_validation && region_id.nil?
        raise ArgumentError.new("Missing the required parameter 'region_id' when calling FbyApi.search_regions_by_id")
      end
      # resource path
      local_var_path = "/regions/{regionId}".sub("{" + "regionId" + "}", URI.encode_path(region_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetRegionsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.search_regions_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#search_regions_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetRegionsResponse.from_json(data), status_code, headers
    end

    # Поиск регионов по их имени
    # Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов `GET regions`, `GET regions/{regionId}` и `GET regions/{regionId}/children` действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
    # @param name [String] Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, &#x60;Москва&#x60;. 
    # @return [GetRegionsResponse]
    def search_regions_by_name(name : String, page_token : String?, limit : Int32?)
      data, _status_code, _headers = search_regions_by_name_with_http_info(name, page_token, limit)
      data
    end

    # Поиск регионов по их имени
    # Возвращает информацию о регионе, удовлетворяющем заданным в запросе условиям поиска.  Если найдено несколько регионов, удовлетворяющих условиям поиска, возвращается информация по каждому найденному региону (но не более десяти регионов) для возможности определения нужного региона по родительским регионам.  Для методов &#x60;GET regions&#x60;, &#x60;GET regions/{regionId}&#x60; и &#x60;GET regions/{regionId}/children&#x60; действует групповое ресурсное ограничение. Ограничение вводится на суммарное количество регионов, информация о которых запрошена при помощи этих методов (не более 100 000 регионов).  Объем запросов к ресурсу, который возможно выполнить в течение суток, зависит от суммарного количества регионов.  |**⚙️ Лимит:** 50 000 запросов в час| |-| 
    # @param name [String] Название региона.  Важно учитывать регистр: первая буква должна быть заглавной, остальные — строчными. Например, &#x60;Москва&#x60;. 
    # @return [Array<(GetRegionsResponse, Integer, Hash)>] GetRegionsResponse data, response status code and response headers
    def search_regions_by_name_with_http_info(name : String, page_token : String?, limit : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.search_regions_by_name ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling FbyApi.search_regions_by_name")
      end
      # resource path
      local_var_path = "/regions"

      # query parameters
      query_params = Hash(String, String).new
      query_params["name"] = name.to_s unless name.nil?
      query_params["page_token"] = page_token.to_s unless page_token.nil?
      query_params["limit"] = limit.to_s unless limit.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetRegionsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FbyApi.search_regions_by_name",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#search_regions_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetRegionsResponse.from_json(data), status_code, headers
    end

    # Отправка файла в чат
    # Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param file [::File] Содержимое файла. Максимальный размер файла — 5 Мбайт.
    # @return [EmptyApiResponse]
    def send_file_to_chat(business_id : Int64, chat_id : Int64, file : ::File)
      data, _status_code, _headers = send_file_to_chat_with_http_info(business_id, chat_id, file)
      data
    end

    # Отправка файла в чат
    # Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param file [::File] Содержимое файла. Максимальный размер файла — 5 Мбайт.
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def send_file_to_chat_with_http_info(business_id : Int64, chat_id : Int64, file : ::File)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.send_file_to_chat ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.send_file_to_chat")
      end
      # verify the required parameter "chat_id" is set
      if @api_client.config.client_side_validation && chat_id.nil?
        raise ArgumentError.new("Missing the required parameter 'chat_id' when calling FbyApi.send_file_to_chat")
      end
      # verify the required parameter "file" is set
      if @api_client.config.client_side_validation && file.nil?
        raise ArgumentError.new("Missing the required parameter 'file' when calling FbyApi.send_file_to_chat")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/file/send".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["chatId"] = chat_id.to_s unless chat_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["multipart/form-data"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new
      form_params[:"file"] = file unless file.nil?

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.send_file_to_chat",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#send_file_to_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Отправка сообщения в чат
    # Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param send_message_to_chat_request [SendMessageToChatRequest] description
    # @return [EmptyApiResponse]
    def send_message_to_chat(business_id : Int64, chat_id : Int64, send_message_to_chat_request : SendMessageToChatRequest)
      data, _status_code, _headers = send_message_to_chat_with_http_info(business_id, chat_id, send_message_to_chat_request)
      data
    end

    # Отправка сообщения в чат
    # Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param chat_id [Int64] Идентификатор чата.
    # @param send_message_to_chat_request [SendMessageToChatRequest] description
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def send_message_to_chat_with_http_info(business_id : Int64, chat_id : Int64, send_message_to_chat_request : SendMessageToChatRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.send_message_to_chat ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.send_message_to_chat")
      end
      # verify the required parameter "chat_id" is set
      if @api_client.config.client_side_validation && chat_id.nil?
        raise ArgumentError.new("Missing the required parameter 'chat_id' when calling FbyApi.send_message_to_chat")
      end
      # verify the required parameter "send_message_to_chat_request" is set
      if @api_client.config.client_side_validation && send_message_to_chat_request.nil?
        raise ArgumentError.new("Missing the required parameter 'send_message_to_chat_request' when calling FbyApi.send_message_to_chat")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/chats/message".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["chatId"] = chat_id.to_s unless chat_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = send_message_to_chat_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.send_message_to_chat",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#send_message_to_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Изменение параметров прайс-листа
    # {% note warning \"\" %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: `name` (название параметра) и `value` (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: `name` (название параметра) и `delete=true` (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @param set_feed_params_request [SetFeedParamsRequest] 
    # @return [EmptyApiResponse]
    def set_feed_params(campaign_id : Int64, feed_id : Int64, set_feed_params_request : SetFeedParamsRequest)
      data, _status_code, _headers = set_feed_params_with_http_info(campaign_id, feed_id, set_feed_params_request)
      data
    end

    # Изменение параметров прайс-листа
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет магазину изменить параметры прайс-листа.  Чтобы отредактировать параметр прайс-листа, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;value&#x60; (значение параметра).  Чтобы отменить установленное значение, передайте в теле запроса: &#x60;name&#x60; (название параметра) и &#x60;delete&#x3D;true&#x60; (удалить значение).  |**⚙️ Лимит:** 3 запроса в час для одного прайс-листа| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param feed_id [Int64] Идентификатор прайс-листа.
    # @param set_feed_params_request [SetFeedParamsRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def set_feed_params_with_http_info(campaign_id : Int64, feed_id : Int64, set_feed_params_request : SetFeedParamsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.set_feed_params ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.set_feed_params")
      end
      # verify the required parameter "feed_id" is set
      if @api_client.config.client_side_validation && feed_id.nil?
        raise ArgumentError.new("Missing the required parameter 'feed_id' when calling FbyApi.set_feed_params")
      end
      # verify the required parameter "set_feed_params_request" is set
      if @api_client.config.client_side_validation && set_feed_params_request.nil?
        raise ArgumentError.new("Missing the required parameter 'set_feed_params_request' when calling FbyApi.set_feed_params")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/feeds/{feedId}/params".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s)).sub("{" + "feedId" + "}", URI.encode_path(feed_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = set_feed_params_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.set_feed_params",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#set_feed_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Отказ от ответа на отзывы
    # Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param skip_goods_feedback_reaction_request [SkipGoodsFeedbackReactionRequest] 
    # @return [EmptyApiResponse]
    def skip_goods_feedbacks_reaction(business_id : Int64, skip_goods_feedback_reaction_request : SkipGoodsFeedbackReactionRequest)
      data, _status_code, _headers = skip_goods_feedbacks_reaction_with_http_info(business_id, skip_goods_feedback_reaction_request)
      data
    end

    # Отказ от ответа на отзывы
    # Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param skip_goods_feedback_reaction_request [SkipGoodsFeedbackReactionRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def skip_goods_feedbacks_reaction_with_http_info(business_id : Int64, skip_goods_feedback_reaction_request : SkipGoodsFeedbackReactionRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.skip_goods_feedbacks_reaction ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.skip_goods_feedbacks_reaction")
      end
      # verify the required parameter "skip_goods_feedback_reaction_request" is set
      if @api_client.config.client_side_validation && skip_goods_feedback_reaction_request.nil?
        raise ArgumentError.new("Missing the required parameter 'skip_goods_feedback_reaction_request' when calling FbyApi.skip_goods_feedbacks_reaction")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/skip-reaction".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = skip_goods_feedback_reaction_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.skip_goods_feedbacks_reaction",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#skip_goods_feedbacks_reaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Установка цен на товары во всех магазинах
    # Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_business_prices_request [UpdateBusinessPricesRequest] 
    # @return [EmptyApiResponse]
    def update_business_prices(business_id : Int64, update_business_prices_request : UpdateBusinessPricesRequest)
      data, _status_code, _headers = update_business_prices_with_http_info(business_id, update_business_prices_request)
      data
    end

    # Установка цен на товары во всех магазинах
    # Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_business_prices_request [UpdateBusinessPricesRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def update_business_prices_with_http_info(business_id : Int64, update_business_prices_request : UpdateBusinessPricesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_business_prices ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.update_business_prices")
      end
      # verify the required parameter "update_business_prices_request" is set
      if @api_client.config.client_side_validation && update_business_prices_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_business_prices_request' when calling FbyApi.update_business_prices")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-prices/updates".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_business_prices_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_business_prices",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_business_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Изменение условий продажи товаров в магазине
    # Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_campaign_offers_request [UpdateCampaignOffersRequest] 
    # @return [EmptyApiResponse]
    def update_campaign_offers(campaign_id : Int64, update_campaign_offers_request : UpdateCampaignOffersRequest)
      data, _status_code, _headers = update_campaign_offers_with_http_info(campaign_id, update_campaign_offers_request)
      data
    end

    # Изменение условий продажи товаров в магазине
    # Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_campaign_offers_request [UpdateCampaignOffersRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def update_campaign_offers_with_http_info(campaign_id : Int64, update_campaign_offers_request : UpdateCampaignOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_campaign_offers ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.update_campaign_offers")
      end
      # verify the required parameter "update_campaign_offers_request" is set
      if @api_client.config.client_side_validation && update_campaign_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_campaign_offers_request' when calling FbyApi.update_campaign_offers")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offers/update".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_campaign_offers_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_campaign_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_campaign_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Добавление нового или изменение созданного комментария
    # Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_goods_feedback_comment_request [UpdateGoodsFeedbackCommentRequest] 
    # @return [UpdateGoodsFeedbackCommentResponse]
    def update_goods_feedback_comment(business_id : Int64, update_goods_feedback_comment_request : UpdateGoodsFeedbackCommentRequest)
      data, _status_code, _headers = update_goods_feedback_comment_with_http_info(business_id, update_goods_feedback_comment_request)
      data
    end

    # Добавление нового или изменение созданного комментария
    # Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_goods_feedback_comment_request [UpdateGoodsFeedbackCommentRequest] 
    # @return [Array<(UpdateGoodsFeedbackCommentResponse, Integer, Hash)>] UpdateGoodsFeedbackCommentResponse data, response status code and response headers
    def update_goods_feedback_comment_with_http_info(business_id : Int64, update_goods_feedback_comment_request : UpdateGoodsFeedbackCommentRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_goods_feedback_comment ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.update_goods_feedback_comment")
      end
      # verify the required parameter "update_goods_feedback_comment_request" is set
      if @api_client.config.client_side_validation && update_goods_feedback_comment_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_goods_feedback_comment_request' when calling FbyApi.update_goods_feedback_comment")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/goods-feedback/comments/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_goods_feedback_comment_request.to_json

      # return_type
      return_type = "UpdateGoodsFeedbackCommentResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_goods_feedback_comment",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_goods_feedback_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateGoodsFeedbackCommentResponse.from_json(data), status_code, headers
    end

    # Редактирование категорийных характеристик товара
    # Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_content_request [UpdateOfferContentRequest] 
    # @return [UpdateOfferContentResponse]
    def update_offer_content(business_id : Int64, update_offer_content_request : UpdateOfferContentRequest)
      data, _status_code, _headers = update_offer_content_with_http_info(business_id, update_offer_content_request)
      data
    end

    # Редактирование категорийных характеристик товара
    # Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_content_request [UpdateOfferContentRequest] 
    # @return [Array<(UpdateOfferContentResponse, Integer, Hash)>] UpdateOfferContentResponse data, response status code and response headers
    def update_offer_content_with_http_info(business_id : Int64, update_offer_content_request : UpdateOfferContentRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_offer_content ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.update_offer_content")
      end
      # verify the required parameter "update_offer_content_request" is set
      if @api_client.config.client_side_validation && update_offer_content_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_offer_content_request' when calling FbyApi.update_offer_content")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-cards/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_offer_content_request.to_json

      # return_type
      return_type = "UpdateOfferContentResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_offer_content",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_offer_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateOfferContentResponse.from_json(data), status_code, headers
    end

    # Добавление и редактирование товаров в каталоге
    # {% note warning \"\" %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре `shopSku` ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре `shopSku` ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус `NEED_CONTENT` (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус `NEED_INFO` (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_mapping_entry_request [UpdateOfferMappingEntryRequest] 
    # @return [EmptyApiResponse]
    def update_offer_mapping_entries(campaign_id : Int64, update_offer_mapping_entry_request : UpdateOfferMappingEntryRequest)
      data, _status_code, _headers = update_offer_mapping_entries_with_http_info(campaign_id, update_offer_mapping_entry_request)
      data
    end

    # Добавление и редактирование товаров в каталоге
    # {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Добавляет товары, указанные в запросе, в ваш каталог товаров и редактирует уже имеющиеся товары.  Информацию о товарах нужно передать в теле POST-запроса.  У каждого товара должен быть ваш SKU — уникальный код, который вы используете для идентификации товара:  * Чтобы добавить в каталог новый товар, укажите в параметре &#x60;shopSku&#x60; ваш SKU, которого еще нет в каталоге. * Чтобы отредактировать товар из каталога, укажите в параметре &#x60;shopSku&#x60; ваш SKU этого товара в каталоге.  В обоих случаях в запросе нужно передать полное описание товара, даже если вы хотите изменить только несколько характеристик.  Если вы знаете, какой карточке товара на Маркете соответствует ваш товар, укажите ее идентификатор (SKU на Маркете) во входном параметре mapping. Получить SKU на Маркете рекомендованной карточки товара можно с помощью запроса [POST campaigns/{campaignId}/offer-mapping-entries/suggestions](../../reference/offer-mappings/getSuggestedOfferMappingEntries.md) или через кабинет. Если SKU на Маркете не указан, сотрудники Маркета сами подберут или создадут подходящую карточку товара, либо у него появится статус &#x60;NEED_CONTENT&#x60; (нужно найти карточку или создать ее самостоятельно) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  Перед публикацией товары проходят модерацию. Если в одном из отправленных товаров найдена ошибка, ответ на запрос будет иметь HTTP-код 400 Bad Request, и ни один из товаров не отправится на модерацию. При этом если вы не передадите все обязательные параметры для какого‑либо товара, после модерации у него появится статус &#x60;NEED_INFO&#x60; (в описании товара не хватает информации) в выходных данных запроса [GET campaigns/{campaignId}/offer-mapping-entries](../../reference/offer-mappings/getOfferMappingEntries.md).  В одном запросе можно добавить не более 500 товаров.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5 000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_mapping_entry_request [UpdateOfferMappingEntryRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def update_offer_mapping_entries_with_http_info(campaign_id : Int64, update_offer_mapping_entry_request : UpdateOfferMappingEntryRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_offer_mapping_entries ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.update_offer_mapping_entries")
      end
      # verify the required parameter "update_offer_mapping_entry_request" is set
      if @api_client.config.client_side_validation && update_offer_mapping_entry_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_offer_mapping_entry_request' when calling FbyApi.update_offer_mapping_entries")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-mapping-entries/updates".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_offer_mapping_entry_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_offer_mapping_entries",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_offer_mapping_entries\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Добавление товаров в каталог и изменение информации о них
    # Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_mappings_request [UpdateOfferMappingsRequest] 
    # @return [UpdateOfferMappingsResponse]
    def update_offer_mappings(business_id : Int64, update_offer_mappings_request : UpdateOfferMappingsRequest)
      data, _status_code, _headers = update_offer_mappings_with_http_info(business_id, update_offer_mappings_request)
      data
    end

    # Добавление товаров в каталог и изменение информации о них
    # Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_offer_mappings_request [UpdateOfferMappingsRequest] 
    # @return [Array<(UpdateOfferMappingsResponse, Integer, Hash)>] UpdateOfferMappingsResponse data, response status code and response headers
    def update_offer_mappings_with_http_info(business_id : Int64, update_offer_mappings_request : UpdateOfferMappingsRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_offer_mappings ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.update_offer_mappings")
      end
      # verify the required parameter "update_offer_mappings_request" is set
      if @api_client.config.client_side_validation && update_offer_mappings_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_offer_mappings_request' when calling FbyApi.update_offer_mappings")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/offer-mappings/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_offer_mappings_request.to_json

      # return_type
      return_type = "UpdateOfferMappingsResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_offer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_offer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdateOfferMappingsResponse.from_json(data), status_code, headers
    end

    # Установка цен на товары в конкретном магазине
    # Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \"Метод только для отдельных магазинов\" %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_prices_request [UpdatePricesRequest] 
    # @return [EmptyApiResponse]
    def update_prices(campaign_id : Int64, update_prices_request : UpdatePricesRequest)
      data, _status_code, _headers = update_prices_with_http_info(campaign_id, update_prices_request)
      data
    end

    # Установка цен на товары в конкретном магазине
    # Устанавливает цены на товары в магазине. Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note warning \&quot;Метод только для отдельных магазинов\&quot; %}  Используйте этот метод, только если в кабинете установлены уникальные цены в отдельных магазинах.  Для управления базовыми ценами используйте [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
    # @param campaign_id [Int64] Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_prices_request [UpdatePricesRequest] 
    # @return [Array<(EmptyApiResponse, Integer, Hash)>] EmptyApiResponse data, response status code and response headers
    def update_prices_with_http_info(campaign_id : Int64, update_prices_request : UpdatePricesRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_prices ..."}
      end
      # verify the required parameter "campaign_id" is set
      if @api_client.config.client_side_validation && campaign_id.nil?
        raise ArgumentError.new("Missing the required parameter 'campaign_id' when calling FbyApi.update_prices")
      end
      # verify the required parameter "update_prices_request" is set
      if @api_client.config.client_side_validation && update_prices_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_prices_request' when calling FbyApi.update_prices")
      end
      # resource path
      local_var_path = "/campaigns/{campaignId}/offer-prices/updates".sub("{" + "campaignId" + "}", URI.encode_path(campaign_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_prices_request.to_json

      # return_type
      return_type = "EmptyApiResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_prices",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyApiResponse.from_json(data), status_code, headers
    end

    # Добавление товаров в акцию или изменение их цен
    # Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_promo_offers_request [UpdatePromoOffersRequest] 
    # @return [UpdatePromoOffersResponse]
    def update_promo_offers(business_id : Int64, update_promo_offers_request : UpdatePromoOffersRequest)
      data, _status_code, _headers = update_promo_offers_with_http_info(business_id, update_promo_offers_request)
      data
    end

    # Добавление товаров в акцию или изменение их цен
    # Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
    # @param business_id [Int64] Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
    # @param update_promo_offers_request [UpdatePromoOffersRequest] 
    # @return [Array<(UpdatePromoOffersResponse, Integer, Hash)>] UpdatePromoOffersResponse data, response status code and response headers
    def update_promo_offers_with_http_info(business_id : Int64, update_promo_offers_request : UpdatePromoOffersRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: FbyApi.update_promo_offers ..."}
      end
      # verify the required parameter "business_id" is set
      if @api_client.config.client_side_validation && business_id.nil?
        raise ArgumentError.new("Missing the required parameter 'business_id' when calling FbyApi.update_promo_offers")
      end
      # verify the required parameter "update_promo_offers_request" is set
      if @api_client.config.client_side_validation && update_promo_offers_request.nil?
        raise ArgumentError.new("Missing the required parameter 'update_promo_offers_request' when calling FbyApi.update_promo_offers")
      end
      # resource path
      local_var_path = "/businesses/{businessId}/promos/offers/update".sub("{" + "businessId" + "}", URI.encode_path(business_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = update_promo_offers_request.to_json

      # return_type
      return_type = "UpdatePromoOffersResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"FbyApi.update_promo_offers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FbyApi#update_promo_offers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UpdatePromoOffersResponse.from_json(data), status_code, headers
    end
  end
end
