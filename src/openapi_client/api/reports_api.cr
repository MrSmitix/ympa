# #Партнерский API Маркета
#
##API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
#
#The version of the OpenAPI document: LATEST
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.8.0
#

require "uri"

module OpenAPIClient
  class ReportsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Отчет по бусту продаж
    # Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_boost_consolidated_request [GenerateBoostConsolidatedRequest] 
    # @return [GenerateReportResponse]
    def generate_boost_consolidated_report(generate_boost_consolidated_request : GenerateBoostConsolidatedRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_boost_consolidated_report_with_http_info(generate_boost_consolidated_request, format)
      data
    end

    # Отчет по бусту продаж
    # Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_boost_consolidated_request [GenerateBoostConsolidatedRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_boost_consolidated_report_with_http_info(generate_boost_consolidated_request : GenerateBoostConsolidatedRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_boost_consolidated_report ..."}
      end
      # verify the required parameter "generate_boost_consolidated_request" is set
      if @api_client.config.client_side_validation && generate_boost_consolidated_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_boost_consolidated_request' when calling ReportsApi.generate_boost_consolidated_report")
      end
      # resource path
      local_var_path = "/reports/boost-consolidated/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_boost_consolidated_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_boost_consolidated_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_boost_consolidated_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет «Конкурентная позиция»
    # Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \"Значение -1 в отчете\" %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_competitors_position_report_request [GenerateCompetitorsPositionReportRequest] 
    # @return [GenerateReportResponse]
    def generate_competitors_position_report(generate_competitors_position_report_request : GenerateCompetitorsPositionReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_competitors_position_report_with_http_info(generate_competitors_position_report_request, format)
      data
    end

    # Отчет «Конкурентная позиция»
    # Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_competitors_position_report_request [GenerateCompetitorsPositionReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_competitors_position_report_with_http_info(generate_competitors_position_report_request : GenerateCompetitorsPositionReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_competitors_position_report ..."}
      end
      # verify the required parameter "generate_competitors_position_report_request" is set
      if @api_client.config.client_side_validation && generate_competitors_position_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_competitors_position_report_request' when calling ReportsApi.generate_competitors_position_report")
      end
      # resource path
      local_var_path = "/reports/competitors-position/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_competitors_position_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_competitors_position_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_competitors_position_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по отзывам о товарах
    # Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_feedback_request [GenerateGoodsFeedbackRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_feedback_report(generate_goods_feedback_request : GenerateGoodsFeedbackRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_feedback_report_with_http_info(generate_goods_feedback_request, format)
      data
    end

    # Отчет по отзывам о товарах
    # Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_feedback_request [GenerateGoodsFeedbackRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_feedback_report_with_http_info(generate_goods_feedback_request : GenerateGoodsFeedbackRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_goods_feedback_report ..."}
      end
      # verify the required parameter "generate_goods_feedback_request" is set
      if @api_client.config.client_side_validation && generate_goods_feedback_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_feedback_request' when calling ReportsApi.generate_goods_feedback_report")
      end
      # resource path
      local_var_path = "/reports/goods-feedback/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_feedback_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_goods_feedback_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_goods_feedback_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по движению товаров
    # Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_movement_report_request [GenerateGoodsMovementReportRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_movement_report(generate_goods_movement_report_request : GenerateGoodsMovementReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_movement_report_with_http_info(generate_goods_movement_report_request, format)
      data
    end

    # Отчет по движению товаров
    # Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_movement_report_request [GenerateGoodsMovementReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_movement_report_with_http_info(generate_goods_movement_report_request : GenerateGoodsMovementReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_goods_movement_report ..."}
      end
      # verify the required parameter "generate_goods_movement_report_request" is set
      if @api_client.config.client_side_validation && generate_goods_movement_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_movement_report_request' when calling ReportsApi.generate_goods_movement_report")
      end
      # resource path
      local_var_path = "/reports/goods-movement/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_movement_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_goods_movement_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_goods_movement_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по реализации
    # Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_realization_report_request [GenerateGoodsRealizationReportRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_realization_report(generate_goods_realization_report_request : GenerateGoodsRealizationReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_realization_report_with_http_info(generate_goods_realization_report_request, format)
      data
    end

    # Отчет по реализации
    # Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_realization_report_request [GenerateGoodsRealizationReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_realization_report_with_http_info(generate_goods_realization_report_request : GenerateGoodsRealizationReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_goods_realization_report ..."}
      end
      # verify the required parameter "generate_goods_realization_report_request" is set
      if @api_client.config.client_side_validation && generate_goods_realization_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_realization_report_request' when calling ReportsApi.generate_goods_realization_report")
      end
      # resource path
      local_var_path = "/reports/goods-realization/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_realization_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_goods_realization_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_goods_realization_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по оборачиваемости
    # Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_turnover_request [GenerateGoodsTurnoverRequest] 
    # @return [GenerateReportResponse]
    def generate_goods_turnover_report(generate_goods_turnover_request : GenerateGoodsTurnoverRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_goods_turnover_report_with_http_info(generate_goods_turnover_request, format)
      data
    end

    # Отчет по оборачиваемости
    # Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_goods_turnover_request [GenerateGoodsTurnoverRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_goods_turnover_report_with_http_info(generate_goods_turnover_request : GenerateGoodsTurnoverRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_goods_turnover_report ..."}
      end
      # verify the required parameter "generate_goods_turnover_request" is set
      if @api_client.config.client_side_validation && generate_goods_turnover_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_goods_turnover_request' when calling ReportsApi.generate_goods_turnover_report")
      end
      # resource path
      local_var_path = "/reports/goods-turnover/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_goods_turnover_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_goods_turnover_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_goods_turnover_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Готовые ярлыки‑наклейки на все коробки в нескольких заказах
    # Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param generate_mass_order_labels_request [GenerateMassOrderLabelsRequest] 
    # @return [GenerateReportResponse]
    def generate_mass_order_labels_report(generate_mass_order_labels_request : GenerateMassOrderLabelsRequest, format : PageFormatType?)
      data, _status_code, _headers = generate_mass_order_labels_report_with_http_info(generate_mass_order_labels_request, format)
      data
    end

    # Готовые ярлыки‑наклейки на все коробки в нескольких заказах
    # Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
    # @param generate_mass_order_labels_request [GenerateMassOrderLabelsRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_mass_order_labels_report_with_http_info(generate_mass_order_labels_request : GenerateMassOrderLabelsRequest, format : PageFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_mass_order_labels_report ..."}
      end
      # verify the required parameter "generate_mass_order_labels_request" is set
      if @api_client.config.client_side_validation && generate_mass_order_labels_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_mass_order_labels_request' when calling ReportsApi.generate_mass_order_labels_report")
      end
      # resource path
      local_var_path = "/reports/documents/labels/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_mass_order_labels_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_mass_order_labels_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_mass_order_labels_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет «Цены на рынке»
    # Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_prices_report_request [GeneratePricesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_prices_report(generate_prices_report_request : GeneratePricesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_prices_report_with_http_info(generate_prices_report_request, format)
      data
    end

    # Отчет «Цены на рынке»
    # Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_prices_report_request [GeneratePricesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_prices_report_with_http_info(generate_prices_report_request : GeneratePricesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_prices_report ..."}
      end
      # verify the required parameter "generate_prices_report_request" is set
      if @api_client.config.client_side_validation && generate_prices_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_prices_report_request' when calling ReportsApi.generate_prices_report")
      end
      # resource path
      local_var_path = "/reports/prices/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_prices_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_prices_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_prices_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по полкам
    # Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_shelfs_statistics_request [GenerateShelfsStatisticsRequest] 
    # @return [GenerateReportResponse]
    def generate_shelfs_statistics_report(generate_shelfs_statistics_request : GenerateShelfsStatisticsRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_shelfs_statistics_report_with_http_info(generate_shelfs_statistics_request, format)
      data
    end

    # Отчет по полкам
    # Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_shelfs_statistics_request [GenerateShelfsStatisticsRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_shelfs_statistics_report_with_http_info(generate_shelfs_statistics_request : GenerateShelfsStatisticsRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_shelfs_statistics_report ..."}
      end
      # verify the required parameter "generate_shelfs_statistics_request" is set
      if @api_client.config.client_side_validation && generate_shelfs_statistics_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_shelfs_statistics_request' when calling ReportsApi.generate_shelfs_statistics_report")
      end
      # resource path
      local_var_path = "/reports/shelf-statistics/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_shelfs_statistics_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_shelfs_statistics_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_shelfs_statistics_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Получение листа сборки
    # Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_shipment_list_document_report_request [GenerateShipmentListDocumentReportRequest] 
    # @return [GenerateReportResponse]
    def generate_shipment_list_document_report(generate_shipment_list_document_report_request : GenerateShipmentListDocumentReportRequest)
      data, _status_code, _headers = generate_shipment_list_document_report_with_http_info(generate_shipment_list_document_report_request)
      data
    end

    # Получение листа сборки
    # Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_shipment_list_document_report_request [GenerateShipmentListDocumentReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_shipment_list_document_report_with_http_info(generate_shipment_list_document_report_request : GenerateShipmentListDocumentReportRequest)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_shipment_list_document_report ..."}
      end
      # verify the required parameter "generate_shipment_list_document_report_request" is set
      if @api_client.config.client_side_validation && generate_shipment_list_document_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_shipment_list_document_report_request' when calling ReportsApi.generate_shipment_list_document_report")
      end
      # resource path
      local_var_path = "/reports/documents/shipment-list/generate"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_shipment_list_document_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_shipment_list_document_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_shipment_list_document_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет «Аналитика продаж»
    # Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_shows_sales_report_request [GenerateShowsSalesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_shows_sales_report(generate_shows_sales_report_request : GenerateShowsSalesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_shows_sales_report_with_http_info(generate_shows_sales_report_request, format)
      data
    end

    # Отчет «Аналитика продаж»
    # Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
    # @param generate_shows_sales_report_request [GenerateShowsSalesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_shows_sales_report_with_http_info(generate_shows_sales_report_request : GenerateShowsSalesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_shows_sales_report ..."}
      end
      # verify the required parameter "generate_shows_sales_report_request" is set
      if @api_client.config.client_side_validation && generate_shows_sales_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_shows_sales_report_request' when calling ReportsApi.generate_shows_sales_report")
      end
      # resource path
      local_var_path = "/reports/shows-sales/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_shows_sales_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_shows_sales_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_shows_sales_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по остаткам на складах
    # Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_stocks_on_warehouses_report_request [GenerateStocksOnWarehousesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_stocks_on_warehouses_report(generate_stocks_on_warehouses_report_request : GenerateStocksOnWarehousesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_stocks_on_warehouses_report_with_http_info(generate_stocks_on_warehouses_report_request, format)
      data
    end

    # Отчет по остаткам на складах
    # Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_stocks_on_warehouses_report_request [GenerateStocksOnWarehousesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_stocks_on_warehouses_report_with_http_info(generate_stocks_on_warehouses_report_request : GenerateStocksOnWarehousesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_stocks_on_warehouses_report ..."}
      end
      # verify the required parameter "generate_stocks_on_warehouses_report_request" is set
      if @api_client.config.client_side_validation && generate_stocks_on_warehouses_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_stocks_on_warehouses_report_request' when calling ReportsApi.generate_stocks_on_warehouses_report")
      end
      # resource path
      local_var_path = "/reports/stocks-on-warehouses/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_stocks_on_warehouses_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_stocks_on_warehouses_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_stocks_on_warehouses_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по стоимости услуг
    # Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |`dateFrom` и `dateTo`            | |По дате формирования акта    |`year` и `month`                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_marketplace_services_report_request [GenerateUnitedMarketplaceServicesReportRequest] 
    # @return [GenerateReportResponse]
    def generate_united_marketplace_services_report(generate_united_marketplace_services_report_request : GenerateUnitedMarketplaceServicesReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_united_marketplace_services_report_with_http_info(generate_united_marketplace_services_report_request, format)
      data
    end

    # Отчет по стоимости услуг
    # Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_marketplace_services_report_request [GenerateUnitedMarketplaceServicesReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_united_marketplace_services_report_with_http_info(generate_united_marketplace_services_report_request : GenerateUnitedMarketplaceServicesReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_united_marketplace_services_report ..."}
      end
      # verify the required parameter "generate_united_marketplace_services_report_request" is set
      if @api_client.config.client_side_validation && generate_united_marketplace_services_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_united_marketplace_services_report_request' when calling ReportsApi.generate_united_marketplace_services_report")
      end
      # resource path
      local_var_path = "/reports/united-marketplace-services/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_united_marketplace_services_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_united_marketplace_services_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_united_marketplace_services_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по платежам
    # Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |`dateFrom` и `dateTo`                  | |О платежном поручении    |`bankOrderId` и `bankOrderDateTime`    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_netting_report_request [GenerateUnitedNettingReportRequest] 
    # @return [GenerateReportResponse]
    def generate_united_netting_report(generate_united_netting_report_request : GenerateUnitedNettingReportRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_united_netting_report_with_http_info(generate_united_netting_report_request, format)
      data
    end

    # Отчет по платежам
    # Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_netting_report_request [GenerateUnitedNettingReportRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_united_netting_report_with_http_info(generate_united_netting_report_request : GenerateUnitedNettingReportRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_united_netting_report ..."}
      end
      # verify the required parameter "generate_united_netting_report_request" is set
      if @api_client.config.client_side_validation && generate_united_netting_report_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_united_netting_report_request' when calling ReportsApi.generate_united_netting_report")
      end
      # resource path
      local_var_path = "/reports/united-netting/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_united_netting_report_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_united_netting_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_united_netting_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Отчет по заказам
    # Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \"\" %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_orders_request [GenerateUnitedOrdersRequest] 
    # @return [GenerateReportResponse]
    def generate_united_orders_report(generate_united_orders_request : GenerateUnitedOrdersRequest, format : ReportFormatType?)
      data, _status_code, _headers = generate_united_orders_report_with_http_info(generate_united_orders_request, format)
      data
    end

    # Отчет по заказам
    # Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
    # @param generate_united_orders_request [GenerateUnitedOrdersRequest] 
    # @return [Array<(GenerateReportResponse, Integer, Hash)>] GenerateReportResponse data, response status code and response headers
    def generate_united_orders_report_with_http_info(generate_united_orders_request : GenerateUnitedOrdersRequest, format : ReportFormatType?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.generate_united_orders_report ..."}
      end
      # verify the required parameter "generate_united_orders_request" is set
      if @api_client.config.client_side_validation && generate_united_orders_request.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_united_orders_request' when calling ReportsApi.generate_united_orders_report")
      end
      # resource path
      local_var_path = "/reports/united-orders/generate"

      # query parameters
      query_params = Hash(String, String).new
      query_params["format"] = format.to_s unless format.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = generate_united_orders_request.to_json

      # return_type
      return_type = "GenerateReportResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ReportsApi.generate_united_orders_report",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#generate_united_orders_report\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateReportResponse.from_json(data), status_code, headers
    end

    # Получение заданного отчета
    # Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param report_id [String] Идентификатор отчета, который вы получили после запуска генерации. 
    # @return [GetReportInfoResponse]
    def get_report_info(report_id : String)
      data, _status_code, _headers = get_report_info_with_http_info(report_id)
      data
    end

    # Получение заданного отчета
    # Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
    # @param report_id [String] Идентификатор отчета, который вы получили после запуска генерации. 
    # @return [Array<(GetReportInfoResponse, Integer, Hash)>] GetReportInfoResponse data, response status code and response headers
    def get_report_info_with_http_info(report_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ReportsApi.get_report_info ..."}
      end
      # verify the required parameter "report_id" is set
      if @api_client.config.client_side_validation && report_id.nil?
        raise ArgumentError.new("Missing the required parameter 'report_id' when calling ReportsApi.get_report_info")
      end
      # resource path
      local_var_path = "/reports/info/{reportId}".sub("{" + "reportId" + "}", URI.encode_path(report_id.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GetReportInfoResponse"

      # auth_names
      auth_names = ["OAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ReportsApi.get_report_info",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ReportsApi#get_report_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GetReportInfoResponse.from_json(data), status_code, headers
    end
  end
end
