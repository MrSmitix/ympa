note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class GET_OFFER_DTO




feature --Access

    offer_id: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    name: detachable STRING_32
      -- Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
    market_category_id: INTEGER_64
      -- Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
    category: detachable STRING_32
      -- Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
    pictures: detachable LIST [STRING_32]
      -- Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
    videos: detachable LIST [STRING_32]
      -- Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
    manuals: detachable LIST [OFFER_MANUAL_DTO]
      -- Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
    vendor: detachable STRING_32
      -- Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    barcodes: detachable LIST [STRING_32]
      -- Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
    description: detachable STRING_32
      -- Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
    manufacturer_countries: detachable LIST [STRING_32]
      -- Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
    weight_dimensions: detachable OFFER_WEIGHT_DIMENSIONS_DTO
      
    vendor_code: detachable STRING_32
      -- Артикул товара от производителя.
    tags: detachable LIST [STRING_32]
      -- Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
    shelf_life: detachable TIME_PERIOD_DTO
      
    life_time: detachable TIME_PERIOD_DTO
      
    guarantee_period: detachable TIME_PERIOD_DTO
      
    customs_commodity_code: detachable STRING_32
      -- Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
    certificates: detachable LIST [STRING_32]
      -- Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
    box_count: INTEGER_32
      -- Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
    condition: detachable OFFER_CONDITION_DTO
      
    type: detachable OFFER_TYPE
      
    downloadable: BOOLEAN
      -- Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
    adult: BOOLEAN
      -- Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
    age: detachable AGE_DTO
      
    params: detachable LIST [OFFER_PARAM_DTO]
      -- {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
    basic_price: detachable GET_PRICE_WITH_DISCOUNT_DTO
      
    purchase_price: detachable GET_PRICE_DTO
      
    additional_expenses: detachable GET_PRICE_DTO
      
    cofinance_price: detachable GET_PRICE_DTO
      
    card_status: detachable OFFER_CARD_STATUS_TYPE
      
    campaigns: detachable LIST [OFFER_CAMPAIGN_STATUS_DTO]
      -- Список магазинов, в которых размещен товар. 
    selling_programs: detachable LIST [OFFER_SELLING_PROGRAM_DTO]
      -- Информация о том, какие для товара доступны модели размещения. 
    archived: BOOLEAN
      -- Товар помещен в архив. 

feature -- Change Element

    set_offer_id (a_name: like offer_id)
        -- Set 'offer_id' with 'a_name'.
      do
        offer_id := a_name
      ensure
        offer_id_set: offer_id = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_market_category_id (a_name: like market_category_id)
        -- Set 'market_category_id' with 'a_name'.
      do
        market_category_id := a_name
      ensure
        market_category_id_set: market_category_id = a_name
      end

    set_category (a_name: like category)
        -- Set 'category' with 'a_name'.
      do
        category := a_name
      ensure
        category_set: category = a_name
      end

    set_pictures (a_name: like pictures)
        -- Set 'pictures' with 'a_name'.
      do
        pictures := a_name
      ensure
        pictures_set: pictures = a_name
      end

    set_videos (a_name: like videos)
        -- Set 'videos' with 'a_name'.
      do
        videos := a_name
      ensure
        videos_set: videos = a_name
      end

    set_manuals (a_name: like manuals)
        -- Set 'manuals' with 'a_name'.
      do
        manuals := a_name
      ensure
        manuals_set: manuals = a_name
      end

    set_vendor (a_name: like vendor)
        -- Set 'vendor' with 'a_name'.
      do
        vendor := a_name
      ensure
        vendor_set: vendor = a_name
      end

    set_barcodes (a_name: like barcodes)
        -- Set 'barcodes' with 'a_name'.
      do
        barcodes := a_name
      ensure
        barcodes_set: barcodes = a_name
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name
      end

    set_manufacturer_countries (a_name: like manufacturer_countries)
        -- Set 'manufacturer_countries' with 'a_name'.
      do
        manufacturer_countries := a_name
      ensure
        manufacturer_countries_set: manufacturer_countries = a_name
      end

    set_weight_dimensions (a_name: like weight_dimensions)
        -- Set 'weight_dimensions' with 'a_name'.
      do
        weight_dimensions := a_name
      ensure
        weight_dimensions_set: weight_dimensions = a_name
      end

    set_vendor_code (a_name: like vendor_code)
        -- Set 'vendor_code' with 'a_name'.
      do
        vendor_code := a_name
      ensure
        vendor_code_set: vendor_code = a_name
      end

    set_tags (a_name: like tags)
        -- Set 'tags' with 'a_name'.
      do
        tags := a_name
      ensure
        tags_set: tags = a_name
      end

    set_shelf_life (a_name: like shelf_life)
        -- Set 'shelf_life' with 'a_name'.
      do
        shelf_life := a_name
      ensure
        shelf_life_set: shelf_life = a_name
      end

    set_life_time (a_name: like life_time)
        -- Set 'life_time' with 'a_name'.
      do
        life_time := a_name
      ensure
        life_time_set: life_time = a_name
      end

    set_guarantee_period (a_name: like guarantee_period)
        -- Set 'guarantee_period' with 'a_name'.
      do
        guarantee_period := a_name
      ensure
        guarantee_period_set: guarantee_period = a_name
      end

    set_customs_commodity_code (a_name: like customs_commodity_code)
        -- Set 'customs_commodity_code' with 'a_name'.
      do
        customs_commodity_code := a_name
      ensure
        customs_commodity_code_set: customs_commodity_code = a_name
      end

    set_certificates (a_name: like certificates)
        -- Set 'certificates' with 'a_name'.
      do
        certificates := a_name
      ensure
        certificates_set: certificates = a_name
      end

    set_box_count (a_name: like box_count)
        -- Set 'box_count' with 'a_name'.
      do
        box_count := a_name
      ensure
        box_count_set: box_count = a_name
      end

    set_condition (a_name: like condition)
        -- Set 'condition' with 'a_name'.
      do
        condition := a_name
      ensure
        condition_set: condition = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_downloadable (a_name: like downloadable)
        -- Set 'downloadable' with 'a_name'.
      do
        downloadable := a_name
      ensure
        downloadable_set: downloadable = a_name
      end

    set_adult (a_name: like adult)
        -- Set 'adult' with 'a_name'.
      do
        adult := a_name
      ensure
        adult_set: adult = a_name
      end

    set_age (a_name: like age)
        -- Set 'age' with 'a_name'.
      do
        age := a_name
      ensure
        age_set: age = a_name
      end

    set_params (a_name: like params)
        -- Set 'params' with 'a_name'.
      do
        params := a_name
      ensure
        params_set: params = a_name
      end

    set_basic_price (a_name: like basic_price)
        -- Set 'basic_price' with 'a_name'.
      do
        basic_price := a_name
      ensure
        basic_price_set: basic_price = a_name
      end

    set_purchase_price (a_name: like purchase_price)
        -- Set 'purchase_price' with 'a_name'.
      do
        purchase_price := a_name
      ensure
        purchase_price_set: purchase_price = a_name
      end

    set_additional_expenses (a_name: like additional_expenses)
        -- Set 'additional_expenses' with 'a_name'.
      do
        additional_expenses := a_name
      ensure
        additional_expenses_set: additional_expenses = a_name
      end

    set_cofinance_price (a_name: like cofinance_price)
        -- Set 'cofinance_price' with 'a_name'.
      do
        cofinance_price := a_name
      ensure
        cofinance_price_set: cofinance_price = a_name
      end

    set_card_status (a_name: like card_status)
        -- Set 'card_status' with 'a_name'.
      do
        card_status := a_name
      ensure
        card_status_set: card_status = a_name
      end

    set_campaigns (a_name: like campaigns)
        -- Set 'campaigns' with 'a_name'.
      do
        campaigns := a_name
      ensure
        campaigns_set: campaigns = a_name
      end

    set_selling_programs (a_name: like selling_programs)
        -- Set 'selling_programs' with 'a_name'.
      do
        selling_programs := a_name
      ensure
        selling_programs_set: selling_programs = a_name
      end

    set_archived (a_name: like archived)
        -- Set 'archived' with 'a_name'.
      do
        archived := a_name
      ensure
        archived_set: archived = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass GET_OFFER_DTO%N")
        if attached offer_id as l_offer_id then
          Result.append ("%Noffer_id:")
          Result.append (l_offer_id.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached market_category_id as l_market_category_id then
          Result.append ("%Nmarket_category_id:")
          Result.append (l_market_category_id.out)
          Result.append ("%N")
        end
        if attached category as l_category then
          Result.append ("%Ncategory:")
          Result.append (l_category.out)
          Result.append ("%N")
        end
        if attached pictures as l_pictures then
          across l_pictures as ic loop
            Result.append ("%N pictures:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached videos as l_videos then
          across l_videos as ic loop
            Result.append ("%N videos:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached manuals as l_manuals then
          across l_manuals as ic loop
            Result.append ("%N manuals:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached vendor as l_vendor then
          Result.append ("%Nvendor:")
          Result.append (l_vendor.out)
          Result.append ("%N")
        end
        if attached barcodes as l_barcodes then
          across l_barcodes as ic loop
            Result.append ("%N barcodes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")
        end
        if attached manufacturer_countries as l_manufacturer_countries then
          across l_manufacturer_countries as ic loop
            Result.append ("%N manufacturer_countries:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached weight_dimensions as l_weight_dimensions then
          Result.append ("%Nweight_dimensions:")
          Result.append (l_weight_dimensions.out)
          Result.append ("%N")
        end
        if attached vendor_code as l_vendor_code then
          Result.append ("%Nvendor_code:")
          Result.append (l_vendor_code.out)
          Result.append ("%N")
        end
        if attached tags as l_tags then
          across l_tags as ic loop
            Result.append ("%N tags:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached shelf_life as l_shelf_life then
          Result.append ("%Nshelf_life:")
          Result.append (l_shelf_life.out)
          Result.append ("%N")
        end
        if attached life_time as l_life_time then
          Result.append ("%Nlife_time:")
          Result.append (l_life_time.out)
          Result.append ("%N")
        end
        if attached guarantee_period as l_guarantee_period then
          Result.append ("%Nguarantee_period:")
          Result.append (l_guarantee_period.out)
          Result.append ("%N")
        end
        if attached customs_commodity_code as l_customs_commodity_code then
          Result.append ("%Ncustoms_commodity_code:")
          Result.append (l_customs_commodity_code.out)
          Result.append ("%N")
        end
        if attached certificates as l_certificates then
          across l_certificates as ic loop
            Result.append ("%N certificates:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached box_count as l_box_count then
          Result.append ("%Nbox_count:")
          Result.append (l_box_count.out)
          Result.append ("%N")
        end
        if attached condition as l_condition then
          Result.append ("%Ncondition:")
          Result.append (l_condition.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached downloadable as l_downloadable then
          Result.append ("%Ndownloadable:")
          Result.append (l_downloadable.out)
          Result.append ("%N")
        end
        if attached adult as l_adult then
          Result.append ("%Nadult:")
          Result.append (l_adult.out)
          Result.append ("%N")
        end
        if attached age as l_age then
          Result.append ("%Nage:")
          Result.append (l_age.out)
          Result.append ("%N")
        end
        if attached params as l_params then
          across l_params as ic loop
            Result.append ("%N params:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached basic_price as l_basic_price then
          Result.append ("%Nbasic_price:")
          Result.append (l_basic_price.out)
          Result.append ("%N")
        end
        if attached purchase_price as l_purchase_price then
          Result.append ("%Npurchase_price:")
          Result.append (l_purchase_price.out)
          Result.append ("%N")
        end
        if attached additional_expenses as l_additional_expenses then
          Result.append ("%Nadditional_expenses:")
          Result.append (l_additional_expenses.out)
          Result.append ("%N")
        end
        if attached cofinance_price as l_cofinance_price then
          Result.append ("%Ncofinance_price:")
          Result.append (l_cofinance_price.out)
          Result.append ("%N")
        end
        if attached card_status as l_card_status then
          Result.append ("%Ncard_status:")
          Result.append (l_card_status.out)
          Result.append ("%N")
        end
        if attached campaigns as l_campaigns then
          across l_campaigns as ic loop
            Result.append ("%N campaigns:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached selling_programs as l_selling_programs then
          across l_selling_programs as ic loop
            Result.append ("%N selling_programs:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached archived as l_archived then
          Result.append ("%Narchived:")
          Result.append (l_archived.out)
          Result.append ("%N")
        end
      end
end

