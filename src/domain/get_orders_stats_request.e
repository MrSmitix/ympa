note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class GET_ORDERS_STATS_REQUEST




feature --Access

    date_from: detachable DATE
      -- Начальная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
    date_to: detachable DATE
      -- Конечная дата, когда заказ был сформирован.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `updateFrom` и `updateTo`. 
    update_from: detachable DATE
      -- Начальная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
    update_to: detachable DATE
      -- Конечная дата периода, за который были изменения статуса заказа.  Формат даты: `ГГГГ‑ММ‑ДД`.  Нельзя использовать вместе с параметрами `dateFrom` и `dateTo`. 
    orders: detachable LIST [INTEGER_64]
      -- Список идентификаторов заказов.
    statuses: detachable LIST [ORDER_STATS_STATUS_TYPE]
      -- Список статусов заказов.
    has_cis: BOOLEAN
      -- Нужно ли вернуть только те заказы, в составе которых есть хотя бы один товар с кодом идентификации [в системе «Честный ЗНАК»](https://честныйзнак.рф/):  * `true` — да. * `false` — нет. Такие коды присваиваются товарам, которые подлежат маркировке и относятся к определенным категориям. 

feature -- Change Element

    set_date_from (a_name: like date_from)
        -- Set 'date_from' with 'a_name'.
      do
        date_from := a_name
      ensure
        date_from_set: date_from = a_name
      end

    set_date_to (a_name: like date_to)
        -- Set 'date_to' with 'a_name'.
      do
        date_to := a_name
      ensure
        date_to_set: date_to = a_name
      end

    set_update_from (a_name: like update_from)
        -- Set 'update_from' with 'a_name'.
      do
        update_from := a_name
      ensure
        update_from_set: update_from = a_name
      end

    set_update_to (a_name: like update_to)
        -- Set 'update_to' with 'a_name'.
      do
        update_to := a_name
      ensure
        update_to_set: update_to = a_name
      end

    set_orders (a_name: like orders)
        -- Set 'orders' with 'a_name'.
      do
        orders := a_name
      ensure
        orders_set: orders = a_name
      end

    set_statuses (a_name: like statuses)
        -- Set 'statuses' with 'a_name'.
      do
        statuses := a_name
      ensure
        statuses_set: statuses = a_name
      end

    set_has_cis (a_name: like has_cis)
        -- Set 'has_cis' with 'a_name'.
      do
        has_cis := a_name
      ensure
        has_cis_set: has_cis = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass GET_ORDERS_STATS_REQUEST%N")
        if attached date_from as l_date_from then
          Result.append ("%Ndate_from:")
          Result.append (l_date_from.out)
          Result.append ("%N")
        end
        if attached date_to as l_date_to then
          Result.append ("%Ndate_to:")
          Result.append (l_date_to.out)
          Result.append ("%N")
        end
        if attached update_from as l_update_from then
          Result.append ("%Nupdate_from:")
          Result.append (l_update_from.out)
          Result.append ("%N")
        end
        if attached update_to as l_update_to then
          Result.append ("%Nupdate_to:")
          Result.append (l_update_to.out)
          Result.append ("%N")
        end
        if attached orders as l_orders then
          across l_orders as ic loop
            Result.append ("%N orders:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached statuses as l_statuses then
          across l_statuses as ic loop
            Result.append ("%N statuses:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached has_cis as l_has_cis then
          Result.append ("%Nhas_cis:")
          Result.append (l_has_cis.out)
          Result.append ("%N")
        end
      end
end

