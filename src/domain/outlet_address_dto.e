note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class OUTLET_ADDRESS_DTO




feature --Access

    region_id: INTEGER_64
      -- Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
    street: detachable STRING_32
      -- Улица.
    number: detachable STRING_32
      -- Номер дома.
    building: detachable STRING_32
      -- Номер строения.
    estate: detachable STRING_32
      -- Номер владения.
    block: detachable STRING_32
      -- Номер корпуса.
    additional: detachable STRING_32
      -- Дополнительная информация.
    km: INTEGER_32
      -- Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
    city: detachable STRING_32
      -- {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 

feature -- Change Element

    set_region_id (a_name: like region_id)
        -- Set 'region_id' with 'a_name'.
      do
        region_id := a_name
      ensure
        region_id_set: region_id = a_name
      end

    set_street (a_name: like street)
        -- Set 'street' with 'a_name'.
      do
        street := a_name
      ensure
        street_set: street = a_name
      end

    set_number (a_name: like number)
        -- Set 'number' with 'a_name'.
      do
        number := a_name
      ensure
        number_set: number = a_name
      end

    set_building (a_name: like building)
        -- Set 'building' with 'a_name'.
      do
        building := a_name
      ensure
        building_set: building = a_name
      end

    set_estate (a_name: like estate)
        -- Set 'estate' with 'a_name'.
      do
        estate := a_name
      ensure
        estate_set: estate = a_name
      end

    set_block (a_name: like block)
        -- Set 'block' with 'a_name'.
      do
        block := a_name
      ensure
        block_set: block = a_name
      end

    set_additional (a_name: like additional)
        -- Set 'additional' with 'a_name'.
      do
        additional := a_name
      ensure
        additional_set: additional = a_name
      end

    set_km (a_name: like km)
        -- Set 'km' with 'a_name'.
      do
        km := a_name
      ensure
        km_set: km = a_name
      end

    set_city (a_name: like city)
        -- Set 'city' with 'a_name'.
      do
        city := a_name
      ensure
        city_set: city = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass OUTLET_ADDRESS_DTO%N")
        if attached region_id as l_region_id then
          Result.append ("%Nregion_id:")
          Result.append (l_region_id.out)
          Result.append ("%N")
        end
        if attached street as l_street then
          Result.append ("%Nstreet:")
          Result.append (l_street.out)
          Result.append ("%N")
        end
        if attached number as l_number then
          Result.append ("%Nnumber:")
          Result.append (l_number.out)
          Result.append ("%N")
        end
        if attached building as l_building then
          Result.append ("%Nbuilding:")
          Result.append (l_building.out)
          Result.append ("%N")
        end
        if attached estate as l_estate then
          Result.append ("%Nestate:")
          Result.append (l_estate.out)
          Result.append ("%N")
        end
        if attached block as l_block then
          Result.append ("%Nblock:")
          Result.append (l_block.out)
          Result.append ("%N")
        end
        if attached additional as l_additional then
          Result.append ("%Nadditional:")
          Result.append (l_additional.out)
          Result.append ("%N")
        end
        if attached km as l_km then
          Result.append ("%Nkm:")
          Result.append (l_km.out)
          Result.append ("%N")
        end
        if attached city as l_city then
          Result.append ("%Ncity:")
          Result.append (l_city.out)
          Result.append ("%N")
        end
      end
end

