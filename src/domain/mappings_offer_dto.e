note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class MAPPINGS_OFFER_DTO




feature --Access

    name: detachable STRING_32
      -- Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
    shop_sku: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    category: detachable STRING_32
      -- Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
    vendor: detachable STRING_32
      -- Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
    vendor_code: detachable STRING_32
      -- Артикул товара от производителя.
    description: detachable STRING_32
      -- Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
    id: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    feed_id: INTEGER_64
      -- Идентификатор фида.
    barcodes: detachable LIST [STRING_32]
      -- Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
    urls: detachable LIST [STRING_32]
      -- URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
    pictures: detachable LIST [STRING_32]
      -- Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
    manufacturer: detachable STRING_32
      -- Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
    manufacturer_countries: detachable LIST [STRING_32]
      -- Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
    min_shipment: INTEGER_32
      -- Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
    transport_unit_size: INTEGER_32
      -- Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
    quantum_of_supply: INTEGER_32
      -- Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
    delivery_duration_days: INTEGER_32
      -- Срок, за который продавец поставляет товары на склад, в днях.
    box_count: INTEGER_32
      -- Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
    customs_commodity_codes: detachable LIST [STRING_32]
      -- Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
    weight_dimensions: detachable OFFER_WEIGHT_DIMENSIONS_DTO
      
    supply_schedule_days: detachable LIST [DAY_OF_WEEK_TYPE]
      -- Дни недели, в которые продавец поставляет товары на склад.
    shelf_life_days: INTEGER_32
      -- {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
    life_time_days: INTEGER_32
      -- {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
    guarantee_period_days: INTEGER_32
      -- Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
    processing_state: detachable OFFER_PROCESSING_STATE_DTO
      
    availability: detachable OFFER_AVAILABILITY_STATUS_TYPE
      
    shelf_life: detachable TIME_PERIOD_DTO
      
    life_time: detachable TIME_PERIOD_DTO
      
    guarantee_period: detachable TIME_PERIOD_DTO
      
    certificate: detachable STRING_32
      -- Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
    price: REAL_32
      -- Цена на товар в рублях.

feature -- Change Element

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_shop_sku (a_name: like shop_sku)
        -- Set 'shop_sku' with 'a_name'.
      do
        shop_sku := a_name
      ensure
        shop_sku_set: shop_sku = a_name
      end

    set_category (a_name: like category)
        -- Set 'category' with 'a_name'.
      do
        category := a_name
      ensure
        category_set: category = a_name
      end

    set_vendor (a_name: like vendor)
        -- Set 'vendor' with 'a_name'.
      do
        vendor := a_name
      ensure
        vendor_set: vendor = a_name
      end

    set_vendor_code (a_name: like vendor_code)
        -- Set 'vendor_code' with 'a_name'.
      do
        vendor_code := a_name
      ensure
        vendor_code_set: vendor_code = a_name
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name
      end

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_feed_id (a_name: like feed_id)
        -- Set 'feed_id' with 'a_name'.
      do
        feed_id := a_name
      ensure
        feed_id_set: feed_id = a_name
      end

    set_barcodes (a_name: like barcodes)
        -- Set 'barcodes' with 'a_name'.
      do
        barcodes := a_name
      ensure
        barcodes_set: barcodes = a_name
      end

    set_urls (a_name: like urls)
        -- Set 'urls' with 'a_name'.
      do
        urls := a_name
      ensure
        urls_set: urls = a_name
      end

    set_pictures (a_name: like pictures)
        -- Set 'pictures' with 'a_name'.
      do
        pictures := a_name
      ensure
        pictures_set: pictures = a_name
      end

    set_manufacturer (a_name: like manufacturer)
        -- Set 'manufacturer' with 'a_name'.
      do
        manufacturer := a_name
      ensure
        manufacturer_set: manufacturer = a_name
      end

    set_manufacturer_countries (a_name: like manufacturer_countries)
        -- Set 'manufacturer_countries' with 'a_name'.
      do
        manufacturer_countries := a_name
      ensure
        manufacturer_countries_set: manufacturer_countries = a_name
      end

    set_min_shipment (a_name: like min_shipment)
        -- Set 'min_shipment' with 'a_name'.
      do
        min_shipment := a_name
      ensure
        min_shipment_set: min_shipment = a_name
      end

    set_transport_unit_size (a_name: like transport_unit_size)
        -- Set 'transport_unit_size' with 'a_name'.
      do
        transport_unit_size := a_name
      ensure
        transport_unit_size_set: transport_unit_size = a_name
      end

    set_quantum_of_supply (a_name: like quantum_of_supply)
        -- Set 'quantum_of_supply' with 'a_name'.
      do
        quantum_of_supply := a_name
      ensure
        quantum_of_supply_set: quantum_of_supply = a_name
      end

    set_delivery_duration_days (a_name: like delivery_duration_days)
        -- Set 'delivery_duration_days' with 'a_name'.
      do
        delivery_duration_days := a_name
      ensure
        delivery_duration_days_set: delivery_duration_days = a_name
      end

    set_box_count (a_name: like box_count)
        -- Set 'box_count' with 'a_name'.
      do
        box_count := a_name
      ensure
        box_count_set: box_count = a_name
      end

    set_customs_commodity_codes (a_name: like customs_commodity_codes)
        -- Set 'customs_commodity_codes' with 'a_name'.
      do
        customs_commodity_codes := a_name
      ensure
        customs_commodity_codes_set: customs_commodity_codes = a_name
      end

    set_weight_dimensions (a_name: like weight_dimensions)
        -- Set 'weight_dimensions' with 'a_name'.
      do
        weight_dimensions := a_name
      ensure
        weight_dimensions_set: weight_dimensions = a_name
      end

    set_supply_schedule_days (a_name: like supply_schedule_days)
        -- Set 'supply_schedule_days' with 'a_name'.
      do
        supply_schedule_days := a_name
      ensure
        supply_schedule_days_set: supply_schedule_days = a_name
      end

    set_shelf_life_days (a_name: like shelf_life_days)
        -- Set 'shelf_life_days' with 'a_name'.
      do
        shelf_life_days := a_name
      ensure
        shelf_life_days_set: shelf_life_days = a_name
      end

    set_life_time_days (a_name: like life_time_days)
        -- Set 'life_time_days' with 'a_name'.
      do
        life_time_days := a_name
      ensure
        life_time_days_set: life_time_days = a_name
      end

    set_guarantee_period_days (a_name: like guarantee_period_days)
        -- Set 'guarantee_period_days' with 'a_name'.
      do
        guarantee_period_days := a_name
      ensure
        guarantee_period_days_set: guarantee_period_days = a_name
      end

    set_processing_state (a_name: like processing_state)
        -- Set 'processing_state' with 'a_name'.
      do
        processing_state := a_name
      ensure
        processing_state_set: processing_state = a_name
      end

    set_availability (a_name: like availability)
        -- Set 'availability' with 'a_name'.
      do
        availability := a_name
      ensure
        availability_set: availability = a_name
      end

    set_shelf_life (a_name: like shelf_life)
        -- Set 'shelf_life' with 'a_name'.
      do
        shelf_life := a_name
      ensure
        shelf_life_set: shelf_life = a_name
      end

    set_life_time (a_name: like life_time)
        -- Set 'life_time' with 'a_name'.
      do
        life_time := a_name
      ensure
        life_time_set: life_time = a_name
      end

    set_guarantee_period (a_name: like guarantee_period)
        -- Set 'guarantee_period' with 'a_name'.
      do
        guarantee_period := a_name
      ensure
        guarantee_period_set: guarantee_period = a_name
      end

    set_certificate (a_name: like certificate)
        -- Set 'certificate' with 'a_name'.
      do
        certificate := a_name
      ensure
        certificate_set: certificate = a_name
      end

    set_price (a_name: like price)
        -- Set 'price' with 'a_name'.
      do
        price := a_name
      ensure
        price_set: price = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass MAPPINGS_OFFER_DTO%N")
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached shop_sku as l_shop_sku then
          Result.append ("%Nshop_sku:")
          Result.append (l_shop_sku.out)
          Result.append ("%N")
        end
        if attached category as l_category then
          Result.append ("%Ncategory:")
          Result.append (l_category.out)
          Result.append ("%N")
        end
        if attached vendor as l_vendor then
          Result.append ("%Nvendor:")
          Result.append (l_vendor.out)
          Result.append ("%N")
        end
        if attached vendor_code as l_vendor_code then
          Result.append ("%Nvendor_code:")
          Result.append (l_vendor_code.out)
          Result.append ("%N")
        end
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")
        end
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached feed_id as l_feed_id then
          Result.append ("%Nfeed_id:")
          Result.append (l_feed_id.out)
          Result.append ("%N")
        end
        if attached barcodes as l_barcodes then
          across l_barcodes as ic loop
            Result.append ("%N barcodes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached urls as l_urls then
          across l_urls as ic loop
            Result.append ("%N urls:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached pictures as l_pictures then
          across l_pictures as ic loop
            Result.append ("%N pictures:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached manufacturer as l_manufacturer then
          Result.append ("%Nmanufacturer:")
          Result.append (l_manufacturer.out)
          Result.append ("%N")
        end
        if attached manufacturer_countries as l_manufacturer_countries then
          across l_manufacturer_countries as ic loop
            Result.append ("%N manufacturer_countries:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached min_shipment as l_min_shipment then
          Result.append ("%Nmin_shipment:")
          Result.append (l_min_shipment.out)
          Result.append ("%N")
        end
        if attached transport_unit_size as l_transport_unit_size then
          Result.append ("%Ntransport_unit_size:")
          Result.append (l_transport_unit_size.out)
          Result.append ("%N")
        end
        if attached quantum_of_supply as l_quantum_of_supply then
          Result.append ("%Nquantum_of_supply:")
          Result.append (l_quantum_of_supply.out)
          Result.append ("%N")
        end
        if attached delivery_duration_days as l_delivery_duration_days then
          Result.append ("%Ndelivery_duration_days:")
          Result.append (l_delivery_duration_days.out)
          Result.append ("%N")
        end
        if attached box_count as l_box_count then
          Result.append ("%Nbox_count:")
          Result.append (l_box_count.out)
          Result.append ("%N")
        end
        if attached customs_commodity_codes as l_customs_commodity_codes then
          across l_customs_commodity_codes as ic loop
            Result.append ("%N customs_commodity_codes:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached weight_dimensions as l_weight_dimensions then
          Result.append ("%Nweight_dimensions:")
          Result.append (l_weight_dimensions.out)
          Result.append ("%N")
        end
        if attached supply_schedule_days as l_supply_schedule_days then
          across l_supply_schedule_days as ic loop
            Result.append ("%N supply_schedule_days:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached shelf_life_days as l_shelf_life_days then
          Result.append ("%Nshelf_life_days:")
          Result.append (l_shelf_life_days.out)
          Result.append ("%N")
        end
        if attached life_time_days as l_life_time_days then
          Result.append ("%Nlife_time_days:")
          Result.append (l_life_time_days.out)
          Result.append ("%N")
        end
        if attached guarantee_period_days as l_guarantee_period_days then
          Result.append ("%Nguarantee_period_days:")
          Result.append (l_guarantee_period_days.out)
          Result.append ("%N")
        end
        if attached processing_state as l_processing_state then
          Result.append ("%Nprocessing_state:")
          Result.append (l_processing_state.out)
          Result.append ("%N")
        end
        if attached availability as l_availability then
          Result.append ("%Navailability:")
          Result.append (l_availability.out)
          Result.append ("%N")
        end
        if attached shelf_life as l_shelf_life then
          Result.append ("%Nshelf_life:")
          Result.append (l_shelf_life.out)
          Result.append ("%N")
        end
        if attached life_time as l_life_time then
          Result.append ("%Nlife_time:")
          Result.append (l_life_time.out)
          Result.append ("%N")
        end
        if attached guarantee_period as l_guarantee_period then
          Result.append ("%Nguarantee_period:")
          Result.append (l_guarantee_period.out)
          Result.append ("%N")
        end
        if attached certificate as l_certificate then
          Result.append ("%Ncertificate:")
          Result.append (l_certificate.out)
          Result.append ("%N")
        end
        if attached price as l_price then
          Result.append ("%Nprice:")
          Result.append (l_price.out)
          Result.append ("%N")
        end
      end
end

