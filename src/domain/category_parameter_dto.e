note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class CATEGORY_PARAMETER_DTO




feature --Access

    id: INTEGER_64
      -- Идентификатор характеристики.
    name: detachable STRING_32
      -- Название характеристики.
    type: detachable PARAMETER_TYPE
      
    unit: detachable CATEGORY_PARAMETER_UNIT_DTO
      
    description: detachable STRING_32
      -- Описание характеристики.
    recommendation_types: detachable LIST [OFFER_CARD_RECOMMENDATION_TYPE]
      -- Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
    required: BOOLEAN
      -- Обязательность характеристики.
    filtering: BOOLEAN
      -- Используется ли характеристика в фильтре.
    distinctive: BOOLEAN
      -- Является ли характеристика особенностью варианта.
    multivalue: BOOLEAN
      -- Можно ли передать сразу несколько значений.
    allow_custom_values: BOOLEAN
      -- Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
    values: detachable LIST [PARAMETER_VALUE_OPTION_DTO]
      -- Список допустимых значений параметра. Только для характеристик типа `ENUM`.
    constraints: detachable PARAMETER_VALUE_CONSTRAINTS_DTO
      
    value_restrictions: detachable LIST [VALUE_RESTRICTION_DTO]
      -- Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_unit (a_name: like unit)
        -- Set 'unit' with 'a_name'.
      do
        unit := a_name
      ensure
        unit_set: unit = a_name
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name
      end

    set_recommendation_types (a_name: like recommendation_types)
        -- Set 'recommendation_types' with 'a_name'.
      do
        recommendation_types := a_name
      ensure
        recommendation_types_set: recommendation_types = a_name
      end

    set_required (a_name: like required)
        -- Set 'required' with 'a_name'.
      do
        required := a_name
      ensure
        required_set: required = a_name
      end

    set_filtering (a_name: like filtering)
        -- Set 'filtering' with 'a_name'.
      do
        filtering := a_name
      ensure
        filtering_set: filtering = a_name
      end

    set_distinctive (a_name: like distinctive)
        -- Set 'distinctive' with 'a_name'.
      do
        distinctive := a_name
      ensure
        distinctive_set: distinctive = a_name
      end

    set_multivalue (a_name: like multivalue)
        -- Set 'multivalue' with 'a_name'.
      do
        multivalue := a_name
      ensure
        multivalue_set: multivalue = a_name
      end

    set_allow_custom_values (a_name: like allow_custom_values)
        -- Set 'allow_custom_values' with 'a_name'.
      do
        allow_custom_values := a_name
      ensure
        allow_custom_values_set: allow_custom_values = a_name
      end

    set_values (a_name: like values)
        -- Set 'values' with 'a_name'.
      do
        values := a_name
      ensure
        values_set: values = a_name
      end

    set_constraints (a_name: like constraints)
        -- Set 'constraints' with 'a_name'.
      do
        constraints := a_name
      ensure
        constraints_set: constraints = a_name
      end

    set_value_restrictions (a_name: like value_restrictions)
        -- Set 'value_restrictions' with 'a_name'.
      do
        value_restrictions := a_name
      ensure
        value_restrictions_set: value_restrictions = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass CATEGORY_PARAMETER_DTO%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached unit as l_unit then
          Result.append ("%Nunit:")
          Result.append (l_unit.out)
          Result.append ("%N")
        end
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")
        end
        if attached recommendation_types as l_recommendation_types then
          across l_recommendation_types as ic loop
            Result.append ("%N recommendation_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached required as l_required then
          Result.append ("%Nrequired:")
          Result.append (l_required.out)
          Result.append ("%N")
        end
        if attached filtering as l_filtering then
          Result.append ("%Nfiltering:")
          Result.append (l_filtering.out)
          Result.append ("%N")
        end
        if attached distinctive as l_distinctive then
          Result.append ("%Ndistinctive:")
          Result.append (l_distinctive.out)
          Result.append ("%N")
        end
        if attached multivalue as l_multivalue then
          Result.append ("%Nmultivalue:")
          Result.append (l_multivalue.out)
          Result.append ("%N")
        end
        if attached allow_custom_values as l_allow_custom_values then
          Result.append ("%Nallow_custom_values:")
          Result.append (l_allow_custom_values.out)
          Result.append ("%N")
        end
        if attached values as l_values then
          across l_values as ic loop
            Result.append ("%N values:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached constraints as l_constraints then
          Result.append ("%Nconstraints:")
          Result.append (l_constraints.out)
          Result.append ("%N")
        end
        if attached value_restrictions as l_value_restrictions then
          across l_value_restrictions as ic loop
            Result.append ("%N value_restrictions:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

