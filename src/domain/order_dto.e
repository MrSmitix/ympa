note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ORDER_DTO




feature --Access

    id: INTEGER_64
      -- Идентификатор заказа.
    status: detachable ORDER_STATUS_TYPE
      
    substatus: detachable ORDER_SUBSTATUS_TYPE
      
    creation_date: detachable STRING_32
      
    updated_at: detachable STRING_32
      
    currency: detachable CURRENCY_TYPE
      
    items_total: REAL_32
      -- Платеж покупателя. 
    delivery_total: REAL_32
      -- Стоимость доставки. 
    buyer_items_total: REAL_32
      -- {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
    buyer_total: REAL_32
      -- {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
    buyer_items_total_before_discount: REAL_32
      -- Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
    buyer_total_before_discount: REAL_32
      -- {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
    payment_type: detachable ORDER_PAYMENT_TYPE
      
    payment_method: detachable ORDER_PAYMENT_METHOD_TYPE
      
    fake: BOOLEAN
      -- Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
    items: detachable LIST [ORDER_ITEM_DTO]
      -- Список товаров в заказе.
    subsidies: detachable LIST [ORDER_SUBSIDY_DTO]
      -- Список субсидий по типам.
    delivery: detachable ORDER_DELIVERY_DTO
      
    buyer: detachable ORDER_BUYER_DTO
      
    notes: detachable STRING_32
      -- Комментарий к заказу.
    tax_system: detachable ORDER_TAX_SYSTEM_TYPE
      
    cancel_requested: BOOLEAN
      -- **Только для модели DBS**  Запрошена ли отмена. 
    expiry_date: detachable STRING_32
      

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name
      end

    set_substatus (a_name: like substatus)
        -- Set 'substatus' with 'a_name'.
      do
        substatus := a_name
      ensure
        substatus_set: substatus = a_name
      end

    set_creation_date (a_name: like creation_date)
        -- Set 'creation_date' with 'a_name'.
      do
        creation_date := a_name
      ensure
        creation_date_set: creation_date = a_name
      end

    set_updated_at (a_name: like updated_at)
        -- Set 'updated_at' with 'a_name'.
      do
        updated_at := a_name
      ensure
        updated_at_set: updated_at = a_name
      end

    set_currency (a_name: like currency)
        -- Set 'currency' with 'a_name'.
      do
        currency := a_name
      ensure
        currency_set: currency = a_name
      end

    set_items_total (a_name: like items_total)
        -- Set 'items_total' with 'a_name'.
      do
        items_total := a_name
      ensure
        items_total_set: items_total = a_name
      end

    set_delivery_total (a_name: like delivery_total)
        -- Set 'delivery_total' with 'a_name'.
      do
        delivery_total := a_name
      ensure
        delivery_total_set: delivery_total = a_name
      end

    set_buyer_items_total (a_name: like buyer_items_total)
        -- Set 'buyer_items_total' with 'a_name'.
      do
        buyer_items_total := a_name
      ensure
        buyer_items_total_set: buyer_items_total = a_name
      end

    set_buyer_total (a_name: like buyer_total)
        -- Set 'buyer_total' with 'a_name'.
      do
        buyer_total := a_name
      ensure
        buyer_total_set: buyer_total = a_name
      end

    set_buyer_items_total_before_discount (a_name: like buyer_items_total_before_discount)
        -- Set 'buyer_items_total_before_discount' with 'a_name'.
      do
        buyer_items_total_before_discount := a_name
      ensure
        buyer_items_total_before_discount_set: buyer_items_total_before_discount = a_name
      end

    set_buyer_total_before_discount (a_name: like buyer_total_before_discount)
        -- Set 'buyer_total_before_discount' with 'a_name'.
      do
        buyer_total_before_discount := a_name
      ensure
        buyer_total_before_discount_set: buyer_total_before_discount = a_name
      end

    set_payment_type (a_name: like payment_type)
        -- Set 'payment_type' with 'a_name'.
      do
        payment_type := a_name
      ensure
        payment_type_set: payment_type = a_name
      end

    set_payment_method (a_name: like payment_method)
        -- Set 'payment_method' with 'a_name'.
      do
        payment_method := a_name
      ensure
        payment_method_set: payment_method = a_name
      end

    set_fake (a_name: like fake)
        -- Set 'fake' with 'a_name'.
      do
        fake := a_name
      ensure
        fake_set: fake = a_name
      end

    set_items (a_name: like items)
        -- Set 'items' with 'a_name'.
      do
        items := a_name
      ensure
        items_set: items = a_name
      end

    set_subsidies (a_name: like subsidies)
        -- Set 'subsidies' with 'a_name'.
      do
        subsidies := a_name
      ensure
        subsidies_set: subsidies = a_name
      end

    set_delivery (a_name: like delivery)
        -- Set 'delivery' with 'a_name'.
      do
        delivery := a_name
      ensure
        delivery_set: delivery = a_name
      end

    set_buyer (a_name: like buyer)
        -- Set 'buyer' with 'a_name'.
      do
        buyer := a_name
      ensure
        buyer_set: buyer = a_name
      end

    set_notes (a_name: like notes)
        -- Set 'notes' with 'a_name'.
      do
        notes := a_name
      ensure
        notes_set: notes = a_name
      end

    set_tax_system (a_name: like tax_system)
        -- Set 'tax_system' with 'a_name'.
      do
        tax_system := a_name
      ensure
        tax_system_set: tax_system = a_name
      end

    set_cancel_requested (a_name: like cancel_requested)
        -- Set 'cancel_requested' with 'a_name'.
      do
        cancel_requested := a_name
      ensure
        cancel_requested_set: cancel_requested = a_name
      end

    set_expiry_date (a_name: like expiry_date)
        -- Set 'expiry_date' with 'a_name'.
      do
        expiry_date := a_name
      ensure
        expiry_date_set: expiry_date = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ORDER_DTO%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")
        end
        if attached substatus as l_substatus then
          Result.append ("%Nsubstatus:")
          Result.append (l_substatus.out)
          Result.append ("%N")
        end
        if attached creation_date as l_creation_date then
          Result.append ("%Ncreation_date:")
          Result.append (l_creation_date.out)
          Result.append ("%N")
        end
        if attached updated_at as l_updated_at then
          Result.append ("%Nupdated_at:")
          Result.append (l_updated_at.out)
          Result.append ("%N")
        end
        if attached currency as l_currency then
          Result.append ("%Ncurrency:")
          Result.append (l_currency.out)
          Result.append ("%N")
        end
        if attached items_total as l_items_total then
          Result.append ("%Nitems_total:")
          Result.append (l_items_total.out)
          Result.append ("%N")
        end
        if attached delivery_total as l_delivery_total then
          Result.append ("%Ndelivery_total:")
          Result.append (l_delivery_total.out)
          Result.append ("%N")
        end
        if attached buyer_items_total as l_buyer_items_total then
          Result.append ("%Nbuyer_items_total:")
          Result.append (l_buyer_items_total.out)
          Result.append ("%N")
        end
        if attached buyer_total as l_buyer_total then
          Result.append ("%Nbuyer_total:")
          Result.append (l_buyer_total.out)
          Result.append ("%N")
        end
        if attached buyer_items_total_before_discount as l_buyer_items_total_before_discount then
          Result.append ("%Nbuyer_items_total_before_discount:")
          Result.append (l_buyer_items_total_before_discount.out)
          Result.append ("%N")
        end
        if attached buyer_total_before_discount as l_buyer_total_before_discount then
          Result.append ("%Nbuyer_total_before_discount:")
          Result.append (l_buyer_total_before_discount.out)
          Result.append ("%N")
        end
        if attached payment_type as l_payment_type then
          Result.append ("%Npayment_type:")
          Result.append (l_payment_type.out)
          Result.append ("%N")
        end
        if attached payment_method as l_payment_method then
          Result.append ("%Npayment_method:")
          Result.append (l_payment_method.out)
          Result.append ("%N")
        end
        if attached fake as l_fake then
          Result.append ("%Nfake:")
          Result.append (l_fake.out)
          Result.append ("%N")
        end
        if attached items as l_items then
          across l_items as ic loop
            Result.append ("%N items:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached subsidies as l_subsidies then
          across l_subsidies as ic loop
            Result.append ("%N subsidies:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached delivery as l_delivery then
          Result.append ("%Ndelivery:")
          Result.append (l_delivery.out)
          Result.append ("%N")
        end
        if attached buyer as l_buyer then
          Result.append ("%Nbuyer:")
          Result.append (l_buyer.out)
          Result.append ("%N")
        end
        if attached notes as l_notes then
          Result.append ("%Nnotes:")
          Result.append (l_notes.out)
          Result.append ("%N")
        end
        if attached tax_system as l_tax_system then
          Result.append ("%Ntax_system:")
          Result.append (l_tax_system.out)
          Result.append ("%N")
        end
        if attached cancel_requested as l_cancel_requested then
          Result.append ("%Ncancel_requested:")
          Result.append (l_cancel_requested.out)
          Result.append ("%N")
        end
        if attached expiry_date as l_expiry_date then
          Result.append ("%Nexpiry_date:")
          Result.append (l_expiry_date.out)
          Result.append ("%N")
        end
      end
end

