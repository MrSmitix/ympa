note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class BRIEF_ORDER_ITEM_DTO




feature --Access

    id: INTEGER_64
      -- Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    vat: detachable ORDER_VAT_TYPE
      
    count: INTEGER_32
      -- Количество единиц товара.
    price: REAL_32
      -- Цена на товар. Указана в той валюте, которая была задана в каталоге. Разделитель целой и дробной части — точка. 
    offer_name: detachable STRING_32
      -- Название товара.
    offer_id: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    instances: detachable LIST [ORDER_ITEM_INSTANCE_DTO]
      -- Переданные вами коды маркировки.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_vat (a_name: like vat)
        -- Set 'vat' with 'a_name'.
      do
        vat := a_name
      ensure
        vat_set: vat = a_name
      end

    set_count (a_name: like count)
        -- Set 'count' with 'a_name'.
      do
        count := a_name
      ensure
        count_set: count = a_name
      end

    set_price (a_name: like price)
        -- Set 'price' with 'a_name'.
      do
        price := a_name
      ensure
        price_set: price = a_name
      end

    set_offer_name (a_name: like offer_name)
        -- Set 'offer_name' with 'a_name'.
      do
        offer_name := a_name
      ensure
        offer_name_set: offer_name = a_name
      end

    set_offer_id (a_name: like offer_id)
        -- Set 'offer_id' with 'a_name'.
      do
        offer_id := a_name
      ensure
        offer_id_set: offer_id = a_name
      end

    set_instances (a_name: like instances)
        -- Set 'instances' with 'a_name'.
      do
        instances := a_name
      ensure
        instances_set: instances = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass BRIEF_ORDER_ITEM_DTO%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached vat as l_vat then
          Result.append ("%Nvat:")
          Result.append (l_vat.out)
          Result.append ("%N")
        end
        if attached count as l_count then
          Result.append ("%Ncount:")
          Result.append (l_count.out)
          Result.append ("%N")
        end
        if attached price as l_price then
          Result.append ("%Nprice:")
          Result.append (l_price.out)
          Result.append ("%N")
        end
        if attached offer_name as l_offer_name then
          Result.append ("%Noffer_name:")
          Result.append (l_offer_name.out)
          Result.append ("%N")
        end
        if attached offer_id as l_offer_id then
          Result.append ("%Noffer_id:")
          Result.append (l_offer_id.out)
          Result.append ("%N")
        end
        if attached instances as l_instances then
          across l_instances as ic loop
            Result.append ("%N instances:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

