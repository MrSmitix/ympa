note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class FEEDBACK_DTO




feature --Access

    id: INTEGER_64
      -- Идентификатор отзыва.
    created_at: detachable DATE_TIME
      -- Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
    text: detachable STRING_32
      -- Комментарий автора отзыва.
    state: detachable FEEDBACK_STATE_TYPE
      
    author: detachable FEEDBACK_AUTHOR_DTO
      
    pro: detachable STRING_32
      -- Достоинства магазина, описанные в отзыве.
    contra: detachable STRING_32
      -- Недостатки магазина, описанные в отзыве.
    comments: detachable LIST [FEEDBACK_COMMENT_DTO]
      -- Переписка автора отзыва с магазином.
    shop: detachable FEEDBACK_SHOP_DTO
      
    resolved: BOOLEAN
      -- Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
    verified: BOOLEAN
      -- {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
    recommend: BOOLEAN
      -- Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
    grades: detachable FEEDBACK_GRADES_DTO
      
    order: detachable FEEDBACK_ORDER_DTO
      

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_created_at (a_name: like created_at)
        -- Set 'created_at' with 'a_name'.
      do
        created_at := a_name
      ensure
        created_at_set: created_at = a_name
      end

    set_text (a_name: like text)
        -- Set 'text' with 'a_name'.
      do
        text := a_name
      ensure
        text_set: text = a_name
      end

    set_state (a_name: like state)
        -- Set 'state' with 'a_name'.
      do
        state := a_name
      ensure
        state_set: state = a_name
      end

    set_author (a_name: like author)
        -- Set 'author' with 'a_name'.
      do
        author := a_name
      ensure
        author_set: author = a_name
      end

    set_pro (a_name: like pro)
        -- Set 'pro' with 'a_name'.
      do
        pro := a_name
      ensure
        pro_set: pro = a_name
      end

    set_contra (a_name: like contra)
        -- Set 'contra' with 'a_name'.
      do
        contra := a_name
      ensure
        contra_set: contra = a_name
      end

    set_comments (a_name: like comments)
        -- Set 'comments' with 'a_name'.
      do
        comments := a_name
      ensure
        comments_set: comments = a_name
      end

    set_shop (a_name: like shop)
        -- Set 'shop' with 'a_name'.
      do
        shop := a_name
      ensure
        shop_set: shop = a_name
      end

    set_resolved (a_name: like resolved)
        -- Set 'resolved' with 'a_name'.
      do
        resolved := a_name
      ensure
        resolved_set: resolved = a_name
      end

    set_verified (a_name: like verified)
        -- Set 'verified' with 'a_name'.
      do
        verified := a_name
      ensure
        verified_set: verified = a_name
      end

    set_recommend (a_name: like recommend)
        -- Set 'recommend' with 'a_name'.
      do
        recommend := a_name
      ensure
        recommend_set: recommend = a_name
      end

    set_grades (a_name: like grades)
        -- Set 'grades' with 'a_name'.
      do
        grades := a_name
      ensure
        grades_set: grades = a_name
      end

    set_order (a_name: like order)
        -- Set 'order' with 'a_name'.
      do
        order := a_name
      ensure
        order_set: order = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass FEEDBACK_DTO%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached created_at as l_created_at then
          Result.append ("%Ncreated_at:")
          Result.append (l_created_at.out)
          Result.append ("%N")
        end
        if attached text as l_text then
          Result.append ("%Ntext:")
          Result.append (l_text.out)
          Result.append ("%N")
        end
        if attached state as l_state then
          Result.append ("%Nstate:")
          Result.append (l_state.out)
          Result.append ("%N")
        end
        if attached author as l_author then
          Result.append ("%Nauthor:")
          Result.append (l_author.out)
          Result.append ("%N")
        end
        if attached pro as l_pro then
          Result.append ("%Npro:")
          Result.append (l_pro.out)
          Result.append ("%N")
        end
        if attached contra as l_contra then
          Result.append ("%Ncontra:")
          Result.append (l_contra.out)
          Result.append ("%N")
        end
        if attached comments as l_comments then
          across l_comments as ic loop
            Result.append ("%N comments:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached shop as l_shop then
          Result.append ("%Nshop:")
          Result.append (l_shop.out)
          Result.append ("%N")
        end
        if attached resolved as l_resolved then
          Result.append ("%Nresolved:")
          Result.append (l_resolved.out)
          Result.append ("%N")
        end
        if attached verified as l_verified then
          Result.append ("%Nverified:")
          Result.append (l_verified.out)
          Result.append ("%N")
        end
        if attached recommend as l_recommend then
          Result.append ("%Nrecommend:")
          Result.append (l_recommend.out)
          Result.append ("%N")
        end
        if attached grades as l_grades then
          Result.append ("%Ngrades:")
          Result.append (l_grades.out)
          Result.append ("%N")
        end
        if attached order as l_order then
          Result.append ("%Norder:")
          Result.append (l_order.out)
          Result.append ("%N")
        end
      end
end

