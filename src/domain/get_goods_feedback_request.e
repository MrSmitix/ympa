note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class GET_GOODS_FEEDBACK_REQUEST




feature --Access

    date_time_from: detachable DATE_TIME
      -- Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в `dateTimeTo` даты. 
    date_time_to: detachable DATE_TIME
      -- Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
    reaction_status: detachable FEEDBACK_REACTION_STATUS_TYPE
      
    rating_values: detachable LIST [INTEGER_32]
      -- Оценка товара.
    model_ids: detachable LIST [INTEGER_64]
      -- Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
    paid: BOOLEAN
      -- Фильтр отзывов за баллы Плюса.

feature -- Change Element

    set_date_time_from (a_name: like date_time_from)
        -- Set 'date_time_from' with 'a_name'.
      do
        date_time_from := a_name
      ensure
        date_time_from_set: date_time_from = a_name
      end

    set_date_time_to (a_name: like date_time_to)
        -- Set 'date_time_to' with 'a_name'.
      do
        date_time_to := a_name
      ensure
        date_time_to_set: date_time_to = a_name
      end

    set_reaction_status (a_name: like reaction_status)
        -- Set 'reaction_status' with 'a_name'.
      do
        reaction_status := a_name
      ensure
        reaction_status_set: reaction_status = a_name
      end

    set_rating_values (a_name: like rating_values)
        -- Set 'rating_values' with 'a_name'.
      do
        rating_values := a_name
      ensure
        rating_values_set: rating_values = a_name
      end

    set_model_ids (a_name: like model_ids)
        -- Set 'model_ids' with 'a_name'.
      do
        model_ids := a_name
      ensure
        model_ids_set: model_ids = a_name
      end

    set_paid (a_name: like paid)
        -- Set 'paid' with 'a_name'.
      do
        paid := a_name
      ensure
        paid_set: paid = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass GET_GOODS_FEEDBACK_REQUEST%N")
        if attached date_time_from as l_date_time_from then
          Result.append ("%Ndate_time_from:")
          Result.append (l_date_time_from.out)
          Result.append ("%N")
        end
        if attached date_time_to as l_date_time_to then
          Result.append ("%Ndate_time_to:")
          Result.append (l_date_time_to.out)
          Result.append ("%N")
        end
        if attached reaction_status as l_reaction_status then
          Result.append ("%Nreaction_status:")
          Result.append (l_reaction_status.out)
          Result.append ("%N")
        end
        if attached rating_values as l_rating_values then
          across l_rating_values as ic loop
            Result.append ("%N rating_values:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached model_ids as l_model_ids then
          across l_model_ids as ic loop
            Result.append ("%N model_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached paid as l_paid then
          Result.append ("%Npaid:")
          Result.append (l_paid.out)
          Result.append ("%N")
        end
      end
end

