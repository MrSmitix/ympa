note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class RETURN_DECISION_DTO




feature --Access

    return_item_id: INTEGER_64
      -- Идентификатор товара в возврате.
    count: INTEGER_32
      -- Количество единиц товара.
    comment: detachable STRING_32
      -- Комментарий.
    reason_type: detachable RETURN_DECISION_REASON_TYPE
      
    subreason_type: detachable RETURN_DECISION_SUBREASON_TYPE
      
    decision_type: detachable RETURN_DECISION_TYPE
      
    refund_amount: INTEGER_64
      -- Сумма возврата.
    partner_compensation: INTEGER_64
      -- Компенсация за обратную доставку.
    images: detachable LIST [STRING_32]
      -- Список хеш-кодов фотографий товара от покупателя.

feature -- Change Element

    set_return_item_id (a_name: like return_item_id)
        -- Set 'return_item_id' with 'a_name'.
      do
        return_item_id := a_name
      ensure
        return_item_id_set: return_item_id = a_name
      end

    set_count (a_name: like count)
        -- Set 'count' with 'a_name'.
      do
        count := a_name
      ensure
        count_set: count = a_name
      end

    set_comment (a_name: like comment)
        -- Set 'comment' with 'a_name'.
      do
        comment := a_name
      ensure
        comment_set: comment = a_name
      end

    set_reason_type (a_name: like reason_type)
        -- Set 'reason_type' with 'a_name'.
      do
        reason_type := a_name
      ensure
        reason_type_set: reason_type = a_name
      end

    set_subreason_type (a_name: like subreason_type)
        -- Set 'subreason_type' with 'a_name'.
      do
        subreason_type := a_name
      ensure
        subreason_type_set: subreason_type = a_name
      end

    set_decision_type (a_name: like decision_type)
        -- Set 'decision_type' with 'a_name'.
      do
        decision_type := a_name
      ensure
        decision_type_set: decision_type = a_name
      end

    set_refund_amount (a_name: like refund_amount)
        -- Set 'refund_amount' with 'a_name'.
      do
        refund_amount := a_name
      ensure
        refund_amount_set: refund_amount = a_name
      end

    set_partner_compensation (a_name: like partner_compensation)
        -- Set 'partner_compensation' with 'a_name'.
      do
        partner_compensation := a_name
      ensure
        partner_compensation_set: partner_compensation = a_name
      end

    set_images (a_name: like images)
        -- Set 'images' with 'a_name'.
      do
        images := a_name
      ensure
        images_set: images = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass RETURN_DECISION_DTO%N")
        if attached return_item_id as l_return_item_id then
          Result.append ("%Nreturn_item_id:")
          Result.append (l_return_item_id.out)
          Result.append ("%N")
        end
        if attached count as l_count then
          Result.append ("%Ncount:")
          Result.append (l_count.out)
          Result.append ("%N")
        end
        if attached comment as l_comment then
          Result.append ("%Ncomment:")
          Result.append (l_comment.out)
          Result.append ("%N")
        end
        if attached reason_type as l_reason_type then
          Result.append ("%Nreason_type:")
          Result.append (l_reason_type.out)
          Result.append ("%N")
        end
        if attached subreason_type as l_subreason_type then
          Result.append ("%Nsubreason_type:")
          Result.append (l_subreason_type.out)
          Result.append ("%N")
        end
        if attached decision_type as l_decision_type then
          Result.append ("%Ndecision_type:")
          Result.append (l_decision_type.out)
          Result.append ("%N")
        end
        if attached refund_amount as l_refund_amount then
          Result.append ("%Nrefund_amount:")
          Result.append (l_refund_amount.out)
          Result.append ("%N")
        end
        if attached partner_compensation as l_partner_compensation then
          Result.append ("%Npartner_compensation:")
          Result.append (l_partner_compensation.out)
          Result.append ("%N")
        end
        if attached images as l_images then
          across l_images as ic loop
            Result.append ("%N images:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

