note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class BASE_SHIPMENT_DTO




feature --Access

    id: INTEGER_64
      -- Идентификатор отгрузки.
    plan_interval_from: detachable DATE_TIME
      -- Начало планового интервала отгрузки.
    plan_interval_to: detachable DATE_TIME
      -- Конец планового интервала отгрузки.
    shipment_type: detachable SHIPMENT_TYPE
      
    warehouse: detachable PARTNER_SHIPMENT_WAREHOUSE_DTO
      
    warehouse_to: detachable PARTNER_SHIPMENT_WAREHOUSE_DTO
      
    external_id: detachable STRING_32
      -- Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
    delivery_service: detachable DELIVERY_SERVICE_DTO
      
    pallets_count: detachable PALLETS_COUNT_DTO
      
    order_ids: detachable LIST [INTEGER_64]
      -- Идентификаторы заказов в отгрузке.
    draft_count: INTEGER_32
      -- Количество заказов, которое Маркет запланировал к отгрузке.
    planned_count: INTEGER_32
      -- Количество заказов, которое Маркет подтвердил к отгрузке.
    fact_count: INTEGER_32
      -- Количество заказов, принятых в сортировочном центре или пункте приема.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_plan_interval_from (a_name: like plan_interval_from)
        -- Set 'plan_interval_from' with 'a_name'.
      do
        plan_interval_from := a_name
      ensure
        plan_interval_from_set: plan_interval_from = a_name
      end

    set_plan_interval_to (a_name: like plan_interval_to)
        -- Set 'plan_interval_to' with 'a_name'.
      do
        plan_interval_to := a_name
      ensure
        plan_interval_to_set: plan_interval_to = a_name
      end

    set_shipment_type (a_name: like shipment_type)
        -- Set 'shipment_type' with 'a_name'.
      do
        shipment_type := a_name
      ensure
        shipment_type_set: shipment_type = a_name
      end

    set_warehouse (a_name: like warehouse)
        -- Set 'warehouse' with 'a_name'.
      do
        warehouse := a_name
      ensure
        warehouse_set: warehouse = a_name
      end

    set_warehouse_to (a_name: like warehouse_to)
        -- Set 'warehouse_to' with 'a_name'.
      do
        warehouse_to := a_name
      ensure
        warehouse_to_set: warehouse_to = a_name
      end

    set_external_id (a_name: like external_id)
        -- Set 'external_id' with 'a_name'.
      do
        external_id := a_name
      ensure
        external_id_set: external_id = a_name
      end

    set_delivery_service (a_name: like delivery_service)
        -- Set 'delivery_service' with 'a_name'.
      do
        delivery_service := a_name
      ensure
        delivery_service_set: delivery_service = a_name
      end

    set_pallets_count (a_name: like pallets_count)
        -- Set 'pallets_count' with 'a_name'.
      do
        pallets_count := a_name
      ensure
        pallets_count_set: pallets_count = a_name
      end

    set_order_ids (a_name: like order_ids)
        -- Set 'order_ids' with 'a_name'.
      do
        order_ids := a_name
      ensure
        order_ids_set: order_ids = a_name
      end

    set_draft_count (a_name: like draft_count)
        -- Set 'draft_count' with 'a_name'.
      do
        draft_count := a_name
      ensure
        draft_count_set: draft_count = a_name
      end

    set_planned_count (a_name: like planned_count)
        -- Set 'planned_count' with 'a_name'.
      do
        planned_count := a_name
      ensure
        planned_count_set: planned_count = a_name
      end

    set_fact_count (a_name: like fact_count)
        -- Set 'fact_count' with 'a_name'.
      do
        fact_count := a_name
      ensure
        fact_count_set: fact_count = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass BASE_SHIPMENT_DTO%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached plan_interval_from as l_plan_interval_from then
          Result.append ("%Nplan_interval_from:")
          Result.append (l_plan_interval_from.out)
          Result.append ("%N")
        end
        if attached plan_interval_to as l_plan_interval_to then
          Result.append ("%Nplan_interval_to:")
          Result.append (l_plan_interval_to.out)
          Result.append ("%N")
        end
        if attached shipment_type as l_shipment_type then
          Result.append ("%Nshipment_type:")
          Result.append (l_shipment_type.out)
          Result.append ("%N")
        end
        if attached warehouse as l_warehouse then
          Result.append ("%Nwarehouse:")
          Result.append (l_warehouse.out)
          Result.append ("%N")
        end
        if attached warehouse_to as l_warehouse_to then
          Result.append ("%Nwarehouse_to:")
          Result.append (l_warehouse_to.out)
          Result.append ("%N")
        end
        if attached external_id as l_external_id then
          Result.append ("%Nexternal_id:")
          Result.append (l_external_id.out)
          Result.append ("%N")
        end
        if attached delivery_service as l_delivery_service then
          Result.append ("%Ndelivery_service:")
          Result.append (l_delivery_service.out)
          Result.append ("%N")
        end
        if attached pallets_count as l_pallets_count then
          Result.append ("%Npallets_count:")
          Result.append (l_pallets_count.out)
          Result.append ("%N")
        end
        if attached order_ids as l_order_ids then
          across l_order_ids as ic loop
            Result.append ("%N order_ids:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached draft_count as l_draft_count then
          Result.append ("%Ndraft_count:")
          Result.append (l_draft_count.out)
          Result.append ("%N")
        end
        if attached planned_count as l_planned_count then
          Result.append ("%Nplanned_count:")
          Result.append (l_planned_count.out)
          Result.append ("%N")
        end
        if attached fact_count as l_fact_count then
          Result.append ("%Nfact_count:")
          Result.append (l_fact_count.out)
          Result.append ("%N")
        end
      end
end

