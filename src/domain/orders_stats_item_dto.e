note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ORDERS_STATS_ITEM_DTO




feature --Access

    offer_name: detachable STRING_32
      -- Название товара.
    market_sku: INTEGER_64
      -- SKU на Маркете.
    shop_sku: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    count: INTEGER_32
      -- Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список `initialItems`. 
    prices: detachable LIST [ORDERS_STATS_PRICE_DTO]
      -- Цена или скидки на товар.
    warehouse: detachable ORDERS_STATS_WAREHOUSE_DTO
      
    details: detachable LIST [ORDERS_STATS_DETAILS_DTO]
      -- Информация об удалении товара из заказа.
    cis_list: detachable LIST [STRING_32]
      -- Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
    initial_count: INTEGER_32
      -- Первоначальное количество единиц товара.
    bid_fee: INTEGER_32
      -- Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
    cofinance_threshold: REAL_32
      -- Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
    cofinance_value: REAL_32
      -- Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 

feature -- Change Element

    set_offer_name (a_name: like offer_name)
        -- Set 'offer_name' with 'a_name'.
      do
        offer_name := a_name
      ensure
        offer_name_set: offer_name = a_name
      end

    set_market_sku (a_name: like market_sku)
        -- Set 'market_sku' with 'a_name'.
      do
        market_sku := a_name
      ensure
        market_sku_set: market_sku = a_name
      end

    set_shop_sku (a_name: like shop_sku)
        -- Set 'shop_sku' with 'a_name'.
      do
        shop_sku := a_name
      ensure
        shop_sku_set: shop_sku = a_name
      end

    set_count (a_name: like count)
        -- Set 'count' with 'a_name'.
      do
        count := a_name
      ensure
        count_set: count = a_name
      end

    set_prices (a_name: like prices)
        -- Set 'prices' with 'a_name'.
      do
        prices := a_name
      ensure
        prices_set: prices = a_name
      end

    set_warehouse (a_name: like warehouse)
        -- Set 'warehouse' with 'a_name'.
      do
        warehouse := a_name
      ensure
        warehouse_set: warehouse = a_name
      end

    set_details (a_name: like details)
        -- Set 'details' with 'a_name'.
      do
        details := a_name
      ensure
        details_set: details = a_name
      end

    set_cis_list (a_name: like cis_list)
        -- Set 'cis_list' with 'a_name'.
      do
        cis_list := a_name
      ensure
        cis_list_set: cis_list = a_name
      end

    set_initial_count (a_name: like initial_count)
        -- Set 'initial_count' with 'a_name'.
      do
        initial_count := a_name
      ensure
        initial_count_set: initial_count = a_name
      end

    set_bid_fee (a_name: like bid_fee)
        -- Set 'bid_fee' with 'a_name'.
      do
        bid_fee := a_name
      ensure
        bid_fee_set: bid_fee = a_name
      end

    set_cofinance_threshold (a_name: like cofinance_threshold)
        -- Set 'cofinance_threshold' with 'a_name'.
      do
        cofinance_threshold := a_name
      ensure
        cofinance_threshold_set: cofinance_threshold = a_name
      end

    set_cofinance_value (a_name: like cofinance_value)
        -- Set 'cofinance_value' with 'a_name'.
      do
        cofinance_value := a_name
      ensure
        cofinance_value_set: cofinance_value = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ORDERS_STATS_ITEM_DTO%N")
        if attached offer_name as l_offer_name then
          Result.append ("%Noffer_name:")
          Result.append (l_offer_name.out)
          Result.append ("%N")
        end
        if attached market_sku as l_market_sku then
          Result.append ("%Nmarket_sku:")
          Result.append (l_market_sku.out)
          Result.append ("%N")
        end
        if attached shop_sku as l_shop_sku then
          Result.append ("%Nshop_sku:")
          Result.append (l_shop_sku.out)
          Result.append ("%N")
        end
        if attached count as l_count then
          Result.append ("%Ncount:")
          Result.append (l_count.out)
          Result.append ("%N")
        end
        if attached prices as l_prices then
          across l_prices as ic loop
            Result.append ("%N prices:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached warehouse as l_warehouse then
          Result.append ("%Nwarehouse:")
          Result.append (l_warehouse.out)
          Result.append ("%N")
        end
        if attached details as l_details then
          across l_details as ic loop
            Result.append ("%N details:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached cis_list as l_cis_list then
          across l_cis_list as ic loop
            Result.append ("%N cis_list:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached initial_count as l_initial_count then
          Result.append ("%Ninitial_count:")
          Result.append (l_initial_count.out)
          Result.append ("%N")
        end
        if attached bid_fee as l_bid_fee then
          Result.append ("%Nbid_fee:")
          Result.append (l_bid_fee.out)
          Result.append ("%N")
        end
        if attached cofinance_threshold as l_cofinance_threshold then
          Result.append ("%Ncofinance_threshold:")
          Result.append (l_cofinance_threshold.out)
          Result.append ("%N")
        end
        if attached cofinance_value as l_cofinance_value then
          Result.append ("%Ncofinance_value:")
          Result.append (l_cofinance_value.out)
          Result.append ("%N")
        end
      end
end

