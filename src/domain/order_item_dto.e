note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class ORDER_ITEM_DTO




feature --Access

    id: INTEGER_64
      -- Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
    offer_id: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    offer_name: detachable STRING_32
      -- Название товара.
    price: REAL_32
      -- Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
    buyer_price: REAL_32
      -- Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
    buyer_price_before_discount: REAL_32
      -- Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
    price_before_discount: REAL_32
      -- {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
    count: INTEGER_32
      -- Количество единиц товара.
    vat: detachable ORDER_VAT_TYPE
      
    shop_sku: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    subsidy: REAL_32
      -- {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
    partner_warehouse_id: detachable STRING_32
      -- {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
    promos: detachable LIST [ORDER_ITEM_PROMO_DTO]
      -- Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
    instances: detachable LIST [ORDER_ITEM_INSTANCE_DTO]
      -- Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
    details: detachable LIST [ORDER_ITEM_DETAIL_DTO]
      -- Информация об удалении товара из заказа. 
    subsidies: detachable LIST [ORDER_ITEM_SUBSIDY_DTO]
      -- Список субсидий по типам.
    required_instance_types: detachable LIST [ORDER_ITEM_INSTANCE_TYPE]
      -- Список необходимых маркировок товара.

feature -- Change Element

    set_id (a_name: like id)
        -- Set 'id' with 'a_name'.
      do
        id := a_name
      ensure
        id_set: id = a_name
      end

    set_offer_id (a_name: like offer_id)
        -- Set 'offer_id' with 'a_name'.
      do
        offer_id := a_name
      ensure
        offer_id_set: offer_id = a_name
      end

    set_offer_name (a_name: like offer_name)
        -- Set 'offer_name' with 'a_name'.
      do
        offer_name := a_name
      ensure
        offer_name_set: offer_name = a_name
      end

    set_price (a_name: like price)
        -- Set 'price' with 'a_name'.
      do
        price := a_name
      ensure
        price_set: price = a_name
      end

    set_buyer_price (a_name: like buyer_price)
        -- Set 'buyer_price' with 'a_name'.
      do
        buyer_price := a_name
      ensure
        buyer_price_set: buyer_price = a_name
      end

    set_buyer_price_before_discount (a_name: like buyer_price_before_discount)
        -- Set 'buyer_price_before_discount' with 'a_name'.
      do
        buyer_price_before_discount := a_name
      ensure
        buyer_price_before_discount_set: buyer_price_before_discount = a_name
      end

    set_price_before_discount (a_name: like price_before_discount)
        -- Set 'price_before_discount' with 'a_name'.
      do
        price_before_discount := a_name
      ensure
        price_before_discount_set: price_before_discount = a_name
      end

    set_count (a_name: like count)
        -- Set 'count' with 'a_name'.
      do
        count := a_name
      ensure
        count_set: count = a_name
      end

    set_vat (a_name: like vat)
        -- Set 'vat' with 'a_name'.
      do
        vat := a_name
      ensure
        vat_set: vat = a_name
      end

    set_shop_sku (a_name: like shop_sku)
        -- Set 'shop_sku' with 'a_name'.
      do
        shop_sku := a_name
      ensure
        shop_sku_set: shop_sku = a_name
      end

    set_subsidy (a_name: like subsidy)
        -- Set 'subsidy' with 'a_name'.
      do
        subsidy := a_name
      ensure
        subsidy_set: subsidy = a_name
      end

    set_partner_warehouse_id (a_name: like partner_warehouse_id)
        -- Set 'partner_warehouse_id' with 'a_name'.
      do
        partner_warehouse_id := a_name
      ensure
        partner_warehouse_id_set: partner_warehouse_id = a_name
      end

    set_promos (a_name: like promos)
        -- Set 'promos' with 'a_name'.
      do
        promos := a_name
      ensure
        promos_set: promos = a_name
      end

    set_instances (a_name: like instances)
        -- Set 'instances' with 'a_name'.
      do
        instances := a_name
      ensure
        instances_set: instances = a_name
      end

    set_details (a_name: like details)
        -- Set 'details' with 'a_name'.
      do
        details := a_name
      ensure
        details_set: details = a_name
      end

    set_subsidies (a_name: like subsidies)
        -- Set 'subsidies' with 'a_name'.
      do
        subsidies := a_name
      ensure
        subsidies_set: subsidies = a_name
      end

    set_required_instance_types (a_name: like required_instance_types)
        -- Set 'required_instance_types' with 'a_name'.
      do
        required_instance_types := a_name
      ensure
        required_instance_types_set: required_instance_types = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass ORDER_ITEM_DTO%N")
        if attached id as l_id then
          Result.append ("%Nid:")
          Result.append (l_id.out)
          Result.append ("%N")
        end
        if attached offer_id as l_offer_id then
          Result.append ("%Noffer_id:")
          Result.append (l_offer_id.out)
          Result.append ("%N")
        end
        if attached offer_name as l_offer_name then
          Result.append ("%Noffer_name:")
          Result.append (l_offer_name.out)
          Result.append ("%N")
        end
        if attached price as l_price then
          Result.append ("%Nprice:")
          Result.append (l_price.out)
          Result.append ("%N")
        end
        if attached buyer_price as l_buyer_price then
          Result.append ("%Nbuyer_price:")
          Result.append (l_buyer_price.out)
          Result.append ("%N")
        end
        if attached buyer_price_before_discount as l_buyer_price_before_discount then
          Result.append ("%Nbuyer_price_before_discount:")
          Result.append (l_buyer_price_before_discount.out)
          Result.append ("%N")
        end
        if attached price_before_discount as l_price_before_discount then
          Result.append ("%Nprice_before_discount:")
          Result.append (l_price_before_discount.out)
          Result.append ("%N")
        end
        if attached count as l_count then
          Result.append ("%Ncount:")
          Result.append (l_count.out)
          Result.append ("%N")
        end
        if attached vat as l_vat then
          Result.append ("%Nvat:")
          Result.append (l_vat.out)
          Result.append ("%N")
        end
        if attached shop_sku as l_shop_sku then
          Result.append ("%Nshop_sku:")
          Result.append (l_shop_sku.out)
          Result.append ("%N")
        end
        if attached subsidy as l_subsidy then
          Result.append ("%Nsubsidy:")
          Result.append (l_subsidy.out)
          Result.append ("%N")
        end
        if attached partner_warehouse_id as l_partner_warehouse_id then
          Result.append ("%Npartner_warehouse_id:")
          Result.append (l_partner_warehouse_id.out)
          Result.append ("%N")
        end
        if attached promos as l_promos then
          across l_promos as ic loop
            Result.append ("%N promos:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached instances as l_instances then
          across l_instances as ic loop
            Result.append ("%N instances:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached details as l_details then
          across l_details as ic loop
            Result.append ("%N details:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached subsidies as l_subsidies then
          across l_subsidies as ic loop
            Result.append ("%N subsidies:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached required_instance_types as l_required_instance_types then
          across l_required_instance_types as ic loop
            Result.append ("%N required_instance_types:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

