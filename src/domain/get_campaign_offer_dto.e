note
 description:"[
		Партнерский API Маркета
 		API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
  		The version of the OpenAPI document: LATEST
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class GET_CAMPAIGN_OFFER_DTO




feature --Access

    offer_id: detachable STRING_32
      -- Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
    quantum: detachable QUANTUM_DTO
      
    available: BOOLEAN
      -- Есть ли товар в продаже. 
    basic_price: detachable GET_PRICE_WITH_DISCOUNT_DTO
      
    campaign_price: detachable GET_PRICE_WITH_VAT_DTO
      
    status: detachable OFFER_CAMPAIGN_STATUS_TYPE
      
    errors: detachable LIST [OFFER_ERROR_DTO]
      -- Ошибки, препятствующие размещению товара на витрине. 
    warnings: detachable LIST [OFFER_ERROR_DTO]
      -- Предупреждения, не препятствующие размещению товара на витрине. 

feature -- Change Element

    set_offer_id (a_name: like offer_id)
        -- Set 'offer_id' with 'a_name'.
      do
        offer_id := a_name
      ensure
        offer_id_set: offer_id = a_name
      end

    set_quantum (a_name: like quantum)
        -- Set 'quantum' with 'a_name'.
      do
        quantum := a_name
      ensure
        quantum_set: quantum = a_name
      end

    set_available (a_name: like available)
        -- Set 'available' with 'a_name'.
      do
        available := a_name
      ensure
        available_set: available = a_name
      end

    set_basic_price (a_name: like basic_price)
        -- Set 'basic_price' with 'a_name'.
      do
        basic_price := a_name
      ensure
        basic_price_set: basic_price = a_name
      end

    set_campaign_price (a_name: like campaign_price)
        -- Set 'campaign_price' with 'a_name'.
      do
        campaign_price := a_name
      ensure
        campaign_price_set: campaign_price = a_name
      end

    set_status (a_name: like status)
        -- Set 'status' with 'a_name'.
      do
        status := a_name
      ensure
        status_set: status = a_name
      end

    set_errors (a_name: like errors)
        -- Set 'errors' with 'a_name'.
      do
        errors := a_name
      ensure
        errors_set: errors = a_name
      end

    set_warnings (a_name: like warnings)
        -- Set 'warnings' with 'a_name'.
      do
        warnings := a_name
      ensure
        warnings_set: warnings = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass GET_CAMPAIGN_OFFER_DTO%N")
        if attached offer_id as l_offer_id then
          Result.append ("%Noffer_id:")
          Result.append (l_offer_id.out)
          Result.append ("%N")
        end
        if attached quantum as l_quantum then
          Result.append ("%Nquantum:")
          Result.append (l_quantum.out)
          Result.append ("%N")
        end
        if attached available as l_available then
          Result.append ("%Navailable:")
          Result.append (l_available.out)
          Result.append ("%N")
        end
        if attached basic_price as l_basic_price then
          Result.append ("%Nbasic_price:")
          Result.append (l_basic_price.out)
          Result.append ("%N")
        end
        if attached campaign_price as l_campaign_price then
          Result.append ("%Ncampaign_price:")
          Result.append (l_campaign_price.out)
          Result.append ("%N")
        end
        if attached status as l_status then
          Result.append ("%Nstatus:")
          Result.append (l_status.out)
          Result.append ("%N")
        end
        if attached errors as l_errors then
          across l_errors as ic loop
            Result.append ("%N errors:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached warnings as l_warnings then
          across l_warnings as ic loop
            Result.append ("%N warnings:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

