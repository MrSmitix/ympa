/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.ApiClientDataErrorResponse;
import org.openapitools.model.ApiForbiddenErrorResponse;
import org.openapitools.model.ApiLimitErrorResponse;
import org.openapitools.model.ApiNotFoundErrorResponse;
import org.openapitools.model.ApiServerErrorResponse;
import org.openapitools.model.ApiUnauthorizedErrorResponse;
import org.openapitools.model.GenerateBoostConsolidatedRequest;
import org.openapitools.model.GenerateCompetitorsPositionReportRequest;
import org.openapitools.model.GenerateGoodsFeedbackRequest;
import org.openapitools.model.GenerateGoodsMovementReportRequest;
import org.openapitools.model.GenerateGoodsRealizationReportRequest;
import org.openapitools.model.GenerateGoodsTurnoverRequest;
import org.openapitools.model.GenerateMassOrderLabelsRequest;
import org.openapitools.model.GeneratePricesReportRequest;
import org.openapitools.model.GenerateReportResponse;
import org.openapitools.model.GenerateShelfsStatisticsRequest;
import org.openapitools.model.GenerateShipmentListDocumentReportRequest;
import org.openapitools.model.GenerateShowsSalesReportRequest;
import org.openapitools.model.GenerateStocksOnWarehousesReportRequest;
import org.openapitools.model.GenerateUnitedMarketplaceServicesReportRequest;
import org.openapitools.model.GenerateUnitedNettingReportRequest;
import org.openapitools.model.GenerateUnitedOrdersRequest;
import org.openapitools.model.GetReportInfoResponse;
import org.openapitools.model.PageFormatType;
import org.openapitools.model.ReportFormatType;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-09-09T22:20:41.711842593Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Controller
@Tag(name = "Reports", description = "The Reports API")
public class ReportsController {
    /**
     * Отчет по бусту продаж
     * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateBoostConsolidatedRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateBoostConsolidatedReport",
        summary = "Отчет по бусту продаж",
        tags = { "reports", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateBoostConsolidatedRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/boost-consolidated/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateBoostConsolidatedReport(
        @Body @NotNull @Valid GenerateBoostConsolidatedRequest generateBoostConsolidatedRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateBoostConsolidatedReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет «Конкурентная позиция»
     * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
     *
     * @param generateCompetitorsPositionReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateCompetitorsPositionReport",
        summary = "Отчет «Конкурентная позиция»",
        tags = { "reports", "fby", "dbs", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateCompetitorsPositionReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/competitors-position/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateCompetitorsPositionReport(
        @Body @NotNull @Valid GenerateCompetitorsPositionReportRequest generateCompetitorsPositionReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateCompetitorsPositionReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по отзывам о товарах
     * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateGoodsFeedbackRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateGoodsFeedbackReport",
        summary = "Отчет по отзывам о товарах",
        tags = { "reports", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateGoodsFeedbackRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/goods-feedback/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateGoodsFeedbackReport(
        @Body @NotNull @Valid GenerateGoodsFeedbackRequest generateGoodsFeedbackRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateGoodsFeedbackReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по движению товаров
     * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateGoodsMovementReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateGoodsMovementReport",
        summary = "Отчет по движению товаров",
        tags = { "reports", "fby" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateGoodsMovementReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/goods-movement/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateGoodsMovementReport(
        @Body @NotNull @Valid GenerateGoodsMovementReportRequest generateGoodsMovementReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateGoodsMovementReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по реализации
     * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateGoodsRealizationReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateGoodsRealizationReport",
        summary = "Отчет по реализации",
        tags = { "reports", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateGoodsRealizationReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/goods-realization/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateGoodsRealizationReport(
        @Body @NotNull @Valid GenerateGoodsRealizationReportRequest generateGoodsRealizationReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateGoodsRealizationReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по оборачиваемости
     * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateGoodsTurnoverRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateGoodsTurnoverReport",
        summary = "Отчет по оборачиваемости",
        tags = { "reports", "fby" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateGoodsTurnoverRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/goods-turnover/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateGoodsTurnoverReport(
        @Body @NotNull @Valid GenerateGoodsTurnoverRequest generateGoodsTurnoverRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateGoodsTurnoverReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
     * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @param generateMassOrderLabelsRequest  (required)
     * @param _format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateMassOrderLabelsReport",
        summary = "Готовые ярлыки‑наклейки на все коробки в нескольких заказах",
        tags = { "reports", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый файл.  Если при генерации не удалось найти часть заказов, в ответе на запрос получения готового файла вернется подстатус `RESOURCE_NOT_FOUND`. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateMassOrderLabelsRequest", required = true),
            @Parameter(name = "_format", description = "Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/documents/labels/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateMassOrderLabelsReport(
        @Body @NotNull @Valid GenerateMassOrderLabelsRequest generateMassOrderLabelsRequest, 
        @QueryValue(value="format") @Nullable PageFormatType _format
    ) {
        // TODO implement generateMassOrderLabelsReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет «Цены на рынке»
     * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generatePricesReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generatePricesReport",
        summary = "Отчет «Цены на рынке»",
        tags = { "reports", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generatePricesReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/prices/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generatePricesReport(
        @Body @NotNull @Valid GeneratePricesReportRequest generatePricesReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generatePricesReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по полкам
     * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateShelfsStatisticsRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateShelfsStatisticsReport",
        summary = "Отчет по полкам",
        tags = { "reports", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateShelfsStatisticsRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/shelf-statistics/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateShelfsStatisticsReport(
        @Body @NotNull @Valid GenerateShelfsStatisticsRequest generateShelfsStatisticsRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateShelfsStatisticsReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Получение листа сборки
     * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateShipmentListDocumentReportRequest  (required)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateShipmentListDocumentReport",
        summary = "Получение листа сборки",
        tags = { "reports", "fbs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый документ.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateShipmentListDocumentReportRequest", required = true)
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/documents/shipment-list/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateShipmentListDocumentReport(
        @Body @NotNull @Valid GenerateShipmentListDocumentReportRequest generateShipmentListDocumentReportRequest
    ) {
        // TODO implement generateShipmentListDocumentReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет «Аналитика продаж»
     * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
     *
     * @param generateShowsSalesReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateShowsSalesReport",
        summary = "Отчет «Аналитика продаж»",
        tags = { "reports", "fby", "dbs", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateShowsSalesReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/shows-sales/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateShowsSalesReport(
        @Body @NotNull @Valid GenerateShowsSalesReportRequest generateShowsSalesReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateShowsSalesReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по остаткам на складах
     * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateStocksOnWarehousesReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateStocksOnWarehousesReport",
        summary = "Отчет по остаткам на складах",
        tags = { "reports", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateStocksOnWarehousesReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/stocks-on-warehouses/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateStocksOnWarehousesReport(
        @Body @NotNull @Valid GenerateStocksOnWarehousesReportRequest generateStocksOnWarehousesReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateStocksOnWarehousesReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по стоимости услуг
     * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateUnitedMarketplaceServicesReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateUnitedMarketplaceServicesReport",
        summary = "Отчет по стоимости услуг",
        tags = { "reports", "fby", "dbs", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateUnitedMarketplaceServicesReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/united-marketplace-services/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateUnitedMarketplaceServicesReport(
        @Body @NotNull @Valid GenerateUnitedMarketplaceServicesReportRequest generateUnitedMarketplaceServicesReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateUnitedMarketplaceServicesReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по платежам
     * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateUnitedNettingReportRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateUnitedNettingReport",
        summary = "Отчет по платежам",
        tags = { "reports", "fby", "dbs", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateUnitedNettingReportRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/united-netting/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateUnitedNettingReport(
        @Body @NotNull @Valid GenerateUnitedNettingReportRequest generateUnitedNettingReportRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateUnitedNettingReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Отчет по заказам
     * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
     *
     * @param generateUnitedOrdersRequest  (required)
     * @param _format Формат отчета. (optional)
     * @return GenerateReportResponse
     */
    @Operation(
        operationId = "generateUnitedOrdersReport",
        summary = "Отчет по заказам",
        tags = { "reports", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "В ответ приходит идентификатор, который позволяет узнавать статус генерации и скачать готовый отчет.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GenerateReportResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "generateUnitedOrdersRequest", required = true),
            @Parameter(name = "_format", description = "Формат отчета.")
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Post(uri="/reports/united-orders/generate")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GenerateReportResponse> generateUnitedOrdersReport(
        @Body @NotNull @Valid GenerateUnitedOrdersRequest generateUnitedOrdersRequest, 
        @QueryValue(value="format") @Nullable ReportFormatType _format
    ) {
        // TODO implement generateUnitedOrdersReport();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Получение заданного отчета
     * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     *
     * @param reportId Идентификатор отчета, который вы получили после запуска генерации.  (required)
     * @return GetReportInfoResponse
     */
    @Operation(
        operationId = "getReportInfo",
        summary = "Получение заданного отчета",
        tags = { "reports", "fby", "dbs", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Статус генерации отчета и ссылка, если она уже есть.  {% note tip %}  Если статус генерации отчета — `FAILED` или `NO_DATA`, проверьте корректность запроса на генерацию. Например, верно ли указан идентификатор магазина, период или номер платежного поручения.  {% endnote %}    ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetReportInfoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        parameters = {
            @Parameter(name = "reportId", description = "Идентификатор отчета, который вы получили после запуска генерации. ", required = true)
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes = { "market:partner-api" })
        }
    )
    @Get(uri="/reports/info/{reportId}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GetReportInfoResponse> getReportInfo(
        @PathVariable(value="reportId") @NotNull String reportId
    ) {
        // TODO implement getReportInfo();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
