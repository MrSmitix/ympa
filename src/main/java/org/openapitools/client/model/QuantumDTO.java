/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр &#x60;quantum&#x60;.  {% cut \&quot;Пример\&quot; %}  &#x60;&#x60;&#x60;json {   \&quot;offers\&quot;: [     {       \&quot;offerId\&quot;: \&quot;08e35dc1-89a2-11e3-8055-0015e9b8c48d\&quot;,       \&quot;quantum\&quot;: {}     }   ] } &#x60;&#x60;&#x60;  {% endcut %} 
 **/
@ApiModel(description = "Настройка продажи квантами.  Чтобы сбросить установленные ранее значения, передайте пустой параметр `quantum`.  {% cut \"Пример\" %}  ```json {   \"offers\": [     {       \"offerId\": \"08e35dc1-89a2-11e3-8055-0015e9b8c48d\",       \"quantum\": {}     }   ] } ```  {% endcut %} ")
public class QuantumDTO {
  
  @SerializedName("minQuantity")
  private Integer minQuantity = null;
  @SerializedName("stepQuantity")
  private Integer stepQuantity = null;

  /**
   * Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. 
   * minimum: 1
   **/
  @ApiModelProperty(value = "Минимальное количество единиц товара в заказе. Например, если указать 10, покупатель сможет добавить в корзину не меньше 10 единиц.  ⚠️ Если количество товара на складе меньше заданного, ограничение не сработает и покупатель сможет его заказать. ")
  public Integer getMinQuantity() {
    return minQuantity;
  }
  public void setMinQuantity(Integer minQuantity) {
    this.minQuantity = minQuantity;
  }

  /**
   * На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. 
   * minimum: 1
   * maximum: 100
   **/
  @ApiModelProperty(value = "На сколько единиц покупатель сможет увеличить количество товара в корзине.  Например, если задать 5, покупатель сможет добавить к заказу только 5, 10, 15, ... единиц товара.  ⚠️ Если количество товара на складе не дотягивает до кванта, ограничение не сработает и покупатель сможет заказать количество, не кратное кванту. ")
  public Integer getStepQuantity() {
    return stepQuantity;
  }
  public void setStepQuantity(Integer stepQuantity) {
    this.stepQuantity = stepQuantity;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuantumDTO quantumDTO = (QuantumDTO) o;
    return (this.minQuantity == null ? quantumDTO.minQuantity == null : this.minQuantity.equals(quantumDTO.minQuantity)) &&
        (this.stepQuantity == null ? quantumDTO.stepQuantity == null : this.stepQuantity.equals(quantumDTO.stepQuantity));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.minQuantity == null ? 0: this.minQuantity.hashCode());
    result = 31 * result + (this.stepQuantity == null ? 0: this.stepQuantity.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuantumDTO {\n");
    
    sb.append("  minQuantity: ").append(minQuantity).append("\n");
    sb.append("  stepQuantity: ").append(stepQuantity).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
