/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.FeedContentErrorDTO;
import org.openapitools.client.model.FeedStatusType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Информация о проверке содержимого прайс-листа, загруженного на Маркет.
 **/
@ApiModel(description = "Информация о проверке содержимого прайс-листа, загруженного на Маркет.")
public class FeedContentDTO {
  
  @SerializedName("rejectedOffersCount")
  private Long rejectedOffersCount = null;
  @SerializedName("status")
  private FeedStatusType status = null;
  @SerializedName("totalOffersCount")
  private Long totalOffersCount = null;
  @SerializedName("error")
  private FeedContentErrorDTO error = null;

  /**
   * Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр `content status=OK`. 
   **/
  @ApiModelProperty(value = "Количество предложений, в которых найдены ошибки на этапе загрузки прайс-листа. Выводится, если параметр `content status=OK`. ")
  public Long getRejectedOffersCount() {
    return rejectedOffersCount;
  }
  public void setRejectedOffersCount(Long rejectedOffersCount) {
    this.rejectedOffersCount = rejectedOffersCount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedStatusType getStatus() {
    return status;
  }
  public void setStatus(FeedStatusType status) {
    this.status = status;
  }

  /**
   * Количество предложений в прайс-листе. Выводится, если параметр `content status=OK`. 
   **/
  @ApiModelProperty(value = "Количество предложений в прайс-листе. Выводится, если параметр `content status=OK`. ")
  public Long getTotalOffersCount() {
    return totalOffersCount;
  }
  public void setTotalOffersCount(Long totalOffersCount) {
    this.totalOffersCount = totalOffersCount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedContentErrorDTO getError() {
    return error;
  }
  public void setError(FeedContentErrorDTO error) {
    this.error = error;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedContentDTO feedContentDTO = (FeedContentDTO) o;
    return (this.rejectedOffersCount == null ? feedContentDTO.rejectedOffersCount == null : this.rejectedOffersCount.equals(feedContentDTO.rejectedOffersCount)) &&
        (this.status == null ? feedContentDTO.status == null : this.status.equals(feedContentDTO.status)) &&
        (this.totalOffersCount == null ? feedContentDTO.totalOffersCount == null : this.totalOffersCount.equals(feedContentDTO.totalOffersCount)) &&
        (this.error == null ? feedContentDTO.error == null : this.error.equals(feedContentDTO.error));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.rejectedOffersCount == null ? 0: this.rejectedOffersCount.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.totalOffersCount == null ? 0: this.totalOffersCount.hashCode());
    result = 31 * result + (this.error == null ? 0: this.error.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedContentDTO {\n");
    
    sb.append("  rejectedOffersCount: ").append(rejectedOffersCount).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  totalOffersCount: ").append(totalOffersCount).append("\n");
    sb.append("  error: ").append(error).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
