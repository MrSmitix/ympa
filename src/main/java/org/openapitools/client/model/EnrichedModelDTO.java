/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.ModelOfferDTO;
import org.openapitools.client.model.ModelPriceDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Модель товара.
 **/
@ApiModel(description = "Модель товара.")
public class EnrichedModelDTO {
  
  @SerializedName("id")
  private Long id = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("prices")
  private ModelPriceDTO prices = null;
  @SerializedName("offers")
  private List<ModelOfferDTO> offers = null;
  @SerializedName("offlineOffers")
  private Integer offlineOffers = null;
  @SerializedName("onlineOffers")
  private Integer onlineOffers = null;

  /**
   * Идентификатор модели товара.
   **/
  @ApiModelProperty(value = "Идентификатор модели товара.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Название модели товара.
   **/
  @ApiModelProperty(value = "Название модели товара.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ModelPriceDTO getPrices() {
    return prices;
  }
  public void setPrices(ModelPriceDTO prices) {
    this.prices = prices;
  }

  /**
   * Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
   **/
  @ApiModelProperty(value = "Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. ")
  public List<ModelOfferDTO> getOffers() {
    return offers;
  }
  public void setOffers(List<ModelOfferDTO> offers) {
    this.offers = offers;
  }

  /**
   * Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
   **/
  @ApiModelProperty(value = "Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.")
  public Integer getOfflineOffers() {
    return offlineOffers;
  }
  public void setOfflineOffers(Integer offlineOffers) {
    this.offlineOffers = offlineOffers;
  }

  /**
   * Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
   **/
  @ApiModelProperty(value = "Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.")
  public Integer getOnlineOffers() {
    return onlineOffers;
  }
  public void setOnlineOffers(Integer onlineOffers) {
    this.onlineOffers = onlineOffers;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrichedModelDTO enrichedModelDTO = (EnrichedModelDTO) o;
    return (this.id == null ? enrichedModelDTO.id == null : this.id.equals(enrichedModelDTO.id)) &&
        (this.name == null ? enrichedModelDTO.name == null : this.name.equals(enrichedModelDTO.name)) &&
        (this.prices == null ? enrichedModelDTO.prices == null : this.prices.equals(enrichedModelDTO.prices)) &&
        (this.offers == null ? enrichedModelDTO.offers == null : this.offers.equals(enrichedModelDTO.offers)) &&
        (this.offlineOffers == null ? enrichedModelDTO.offlineOffers == null : this.offlineOffers.equals(enrichedModelDTO.offlineOffers)) &&
        (this.onlineOffers == null ? enrichedModelDTO.onlineOffers == null : this.onlineOffers.equals(enrichedModelDTO.onlineOffers));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.prices == null ? 0: this.prices.hashCode());
    result = 31 * result + (this.offers == null ? 0: this.offers.hashCode());
    result = 31 * result + (this.offlineOffers == null ? 0: this.offlineOffers.hashCode());
    result = 31 * result + (this.onlineOffers == null ? 0: this.onlineOffers.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrichedModelDTO {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  prices: ").append(prices).append("\n");
    sb.append("  offers: ").append(offers).append("\n");
    sb.append("  offlineOffers: ").append(offlineOffers).append("\n");
    sb.append("  onlineOffers: ").append(onlineOffers).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
