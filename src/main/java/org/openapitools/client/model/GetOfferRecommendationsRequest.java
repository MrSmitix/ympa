/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FieldStateType;
import org.openapitools.client.model.PriceCompetitivenessType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetOfferRecommendationsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class GetOfferRecommendationsRequest {
  public static final String SERIALIZED_NAME_OFFER_IDS = "offerIds";
  @SerializedName(SERIALIZED_NAME_OFFER_IDS)
  private List<String> offerIds;

  public static final String SERIALIZED_NAME_COFINANCE_PRICE_FILTER = "cofinancePriceFilter";
  @SerializedName(SERIALIZED_NAME_COFINANCE_PRICE_FILTER)
  private FieldStateType cofinancePriceFilter;

  public static final String SERIALIZED_NAME_RECOMMENDED_COFINANCE_PRICE_FILTER = "recommendedCofinancePriceFilter";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_COFINANCE_PRICE_FILTER)
  private FieldStateType recommendedCofinancePriceFilter;

  public static final String SERIALIZED_NAME_COMPETITIVENESS_FILTER = "competitivenessFilter";
  @SerializedName(SERIALIZED_NAME_COMPETITIVENESS_FILTER)
  private PriceCompetitivenessType competitivenessFilter;

  public GetOfferRecommendationsRequest() {
  }

  public GetOfferRecommendationsRequest offerIds(List<String> offerIds) {
    this.offerIds = offerIds;
    return this;
  }

  public GetOfferRecommendationsRequest addOfferIdsItem(String offerIdsItem) {
    if (this.offerIds == null) {
      this.offerIds = new ArrayList<>();
    }
    this.offerIds.add(offerIdsItem);
    return this;
  }

  /**
   * Идентификаторы товаров, информация о которых нужна. ⚠️ Не используйте это поле одновременно с остальными фильтрами. Если вы хотите воспользоваться фильтрами, оставьте поле пустым.
   * @return offerIds
   */
  @javax.annotation.Nullable
  public List<String> getOfferIds() {
    return offerIds;
  }

  public void setOfferIds(List<String> offerIds) {
    this.offerIds = offerIds;
  }


  public GetOfferRecommendationsRequest cofinancePriceFilter(FieldStateType cofinancePriceFilter) {
    this.cofinancePriceFilter = cofinancePriceFilter;
    return this;
  }

  /**
   * Get cofinancePriceFilter
   * @return cofinancePriceFilter
   */
  @javax.annotation.Nullable
  public FieldStateType getCofinancePriceFilter() {
    return cofinancePriceFilter;
  }

  public void setCofinancePriceFilter(FieldStateType cofinancePriceFilter) {
    this.cofinancePriceFilter = cofinancePriceFilter;
  }


  public GetOfferRecommendationsRequest recommendedCofinancePriceFilter(FieldStateType recommendedCofinancePriceFilter) {
    this.recommendedCofinancePriceFilter = recommendedCofinancePriceFilter;
    return this;
  }

  /**
   * Get recommendedCofinancePriceFilter
   * @return recommendedCofinancePriceFilter
   */
  @javax.annotation.Nullable
  public FieldStateType getRecommendedCofinancePriceFilter() {
    return recommendedCofinancePriceFilter;
  }

  public void setRecommendedCofinancePriceFilter(FieldStateType recommendedCofinancePriceFilter) {
    this.recommendedCofinancePriceFilter = recommendedCofinancePriceFilter;
  }


  public GetOfferRecommendationsRequest competitivenessFilter(PriceCompetitivenessType competitivenessFilter) {
    this.competitivenessFilter = competitivenessFilter;
    return this;
  }

  /**
   * Get competitivenessFilter
   * @return competitivenessFilter
   */
  @javax.annotation.Nullable
  public PriceCompetitivenessType getCompetitivenessFilter() {
    return competitivenessFilter;
  }

  public void setCompetitivenessFilter(PriceCompetitivenessType competitivenessFilter) {
    this.competitivenessFilter = competitivenessFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetOfferRecommendationsRequest getOfferRecommendationsRequest = (GetOfferRecommendationsRequest) o;
    return Objects.equals(this.offerIds, getOfferRecommendationsRequest.offerIds) &&
        Objects.equals(this.cofinancePriceFilter, getOfferRecommendationsRequest.cofinancePriceFilter) &&
        Objects.equals(this.recommendedCofinancePriceFilter, getOfferRecommendationsRequest.recommendedCofinancePriceFilter) &&
        Objects.equals(this.competitivenessFilter, getOfferRecommendationsRequest.competitivenessFilter);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(offerIds, cofinancePriceFilter, recommendedCofinancePriceFilter, competitivenessFilter);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetOfferRecommendationsRequest {\n");
    sb.append("    offerIds: ").append(toIndentedString(offerIds)).append("\n");
    sb.append("    cofinancePriceFilter: ").append(toIndentedString(cofinancePriceFilter)).append("\n");
    sb.append("    recommendedCofinancePriceFilter: ").append(toIndentedString(recommendedCofinancePriceFilter)).append("\n");
    sb.append("    competitivenessFilter: ").append(toIndentedString(competitivenessFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offerIds");
    openapiFields.add("cofinancePriceFilter");
    openapiFields.add("recommendedCofinancePriceFilter");
    openapiFields.add("competitivenessFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetOfferRecommendationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetOfferRecommendationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetOfferRecommendationsRequest is not found in the empty JSON string", GetOfferRecommendationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetOfferRecommendationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetOfferRecommendationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("offerIds") != null && !jsonObj.get("offerIds").isJsonNull() && !jsonObj.get("offerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerIds` to be an array in the JSON string but got `%s`", jsonObj.get("offerIds").toString()));
      }
      // validate the optional field `cofinancePriceFilter`
      if (jsonObj.get("cofinancePriceFilter") != null && !jsonObj.get("cofinancePriceFilter").isJsonNull()) {
        FieldStateType.validateJsonElement(jsonObj.get("cofinancePriceFilter"));
      }
      // validate the optional field `recommendedCofinancePriceFilter`
      if (jsonObj.get("recommendedCofinancePriceFilter") != null && !jsonObj.get("recommendedCofinancePriceFilter").isJsonNull()) {
        FieldStateType.validateJsonElement(jsonObj.get("recommendedCofinancePriceFilter"));
      }
      // validate the optional field `competitivenessFilter`
      if (jsonObj.get("competitivenessFilter") != null && !jsonObj.get("competitivenessFilter").isJsonNull()) {
        PriceCompetitivenessType.validateJsonElement(jsonObj.get("competitivenessFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetOfferRecommendationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetOfferRecommendationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetOfferRecommendationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetOfferRecommendationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetOfferRecommendationsRequest>() {
           @Override
           public void write(JsonWriter out, GetOfferRecommendationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetOfferRecommendationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetOfferRecommendationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetOfferRecommendationsRequest
   * @throws IOException if the JSON string is invalid with respect to GetOfferRecommendationsRequest
   */
  public static GetOfferRecommendationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetOfferRecommendationsRequest.class);
  }

  /**
   * Convert an instance of GetOfferRecommendationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

