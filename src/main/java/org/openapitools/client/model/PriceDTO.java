/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import org.openapitools.client.model.CurrencyType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Цена с указанием скидки, валюты и времени последнего обновления.
 **/
@ApiModel(description = "Цена с указанием скидки, валюты и времени последнего обновления.")
public class PriceDTO {
  
  @SerializedName("value")
  private BigDecimal value = null;
  @SerializedName("discountBase")
  private BigDecimal discountBase = null;
  @SerializedName("currencyId")
  private CurrencyType currencyId = null;
  @SerializedName("vat")
  private Integer vat = null;

  /**
   * Цена на товар.
   **/
  @ApiModelProperty(value = "Цена на товар.")
  public BigDecimal getValue() {
    return value;
  }
  public void setValue(BigDecimal value) {
    this.value = value;
  }

  /**
   * Цена на товар без скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. 
   **/
  @ApiModelProperty(value = "Цена на товар без скидки.  Число должно быть целым. Вы можете указать цену со скидкой от 5 до 99%.  Передавайте этот параметр при каждом обновлении цены, если предоставляете скидку на товар. ")
  public BigDecimal getDiscountBase() {
    return discountBase;
  }
  public void setDiscountBase(BigDecimal discountBase) {
    this.discountBase = discountBase;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CurrencyType getCurrencyId() {
    return currencyId;
  }
  public void setCurrencyId(CurrencyType currencyId) {
    this.currencyId = currencyId;
  }

  /**
   * Идентификатор ставки НДС, применяемой для товара:  * `2` — 10%. * `5` — 0%. * `6` — не облагается НДС. * `7` — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете. 
   **/
  @ApiModelProperty(value = "Идентификатор ставки НДС, применяемой для товара:  * `2` — 10%. * `5` — 0%. * `6` — не облагается НДС. * `7` — 20%.  Если параметр не указан, используется ставка НДС, установленная в кабинете. ")
  public Integer getVat() {
    return vat;
  }
  public void setVat(Integer vat) {
    this.vat = vat;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PriceDTO priceDTO = (PriceDTO) o;
    return (this.value == null ? priceDTO.value == null : this.value.equals(priceDTO.value)) &&
        (this.discountBase == null ? priceDTO.discountBase == null : this.discountBase.equals(priceDTO.discountBase)) &&
        (this.currencyId == null ? priceDTO.currencyId == null : this.currencyId.equals(priceDTO.currencyId)) &&
        (this.vat == null ? priceDTO.vat == null : this.vat.equals(priceDTO.vat));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.value == null ? 0: this.value.hashCode());
    result = 31 * result + (this.discountBase == null ? 0: this.discountBase.hashCode());
    result = 31 * result + (this.currencyId == null ? 0: this.currencyId.hashCode());
    result = 31 * result + (this.vat == null ? 0: this.vat.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PriceDTO {\n");
    
    sb.append("  value: ").append(value).append("\n");
    sb.append("  discountBase: ").append(discountBase).append("\n");
    sb.append("  currencyId: ").append(currencyId).append("\n");
    sb.append("  vat: ").append(vat).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
