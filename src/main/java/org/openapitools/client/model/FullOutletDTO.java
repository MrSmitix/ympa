/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OutletAddressDTO;
import org.openapitools.client.model.OutletDeliveryRuleDTO;
import org.openapitools.client.model.OutletStatusType;
import org.openapitools.client.model.OutletType;
import org.openapitools.client.model.OutletVisibilityType;
import org.openapitools.client.model.OutletWorkingScheduleDTO;
import org.openapitools.client.model.RegionDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Информация о точке продаж.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class FullOutletDTO {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private OutletType type;

  public static final String SERIALIZED_NAME_COORDS = "coords";
  @SerializedName(SERIALIZED_NAME_COORDS)
  private String coords;

  public static final String SERIALIZED_NAME_IS_MAIN = "isMain";
  @SerializedName(SERIALIZED_NAME_IS_MAIN)
  private Boolean isMain;

  public static final String SERIALIZED_NAME_SHOP_OUTLET_CODE = "shopOutletCode";
  @SerializedName(SERIALIZED_NAME_SHOP_OUTLET_CODE)
  private String shopOutletCode;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private OutletVisibilityType visibility;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private OutletAddressDTO address;

  public static final String SERIALIZED_NAME_PHONES = "phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  private List<String> phones = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKING_SCHEDULE = "workingSchedule";
  @SerializedName(SERIALIZED_NAME_WORKING_SCHEDULE)
  private OutletWorkingScheduleDTO workingSchedule;

  public static final String SERIALIZED_NAME_DELIVERY_RULES = "deliveryRules";
  @SerializedName(SERIALIZED_NAME_DELIVERY_RULES)
  private List<OutletDeliveryRuleDTO> deliveryRules;

  public static final String SERIALIZED_NAME_STORAGE_PERIOD = "storagePeriod";
  @SerializedName(SERIALIZED_NAME_STORAGE_PERIOD)
  private Long storagePeriod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OutletStatusType status;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionDTO region;

  public static final String SERIALIZED_NAME_SHOP_OUTLET_ID = "shopOutletId";
  @SerializedName(SERIALIZED_NAME_SHOP_OUTLET_ID)
  private String shopOutletId;

  public static final String SERIALIZED_NAME_WORKING_TIME = "workingTime";
  @SerializedName(SERIALIZED_NAME_WORKING_TIME)
  private String workingTime;

  public static final String SERIALIZED_NAME_MODERATION_REASON = "moderationReason";
  @SerializedName(SERIALIZED_NAME_MODERATION_REASON)
  private String moderationReason;

  public FullOutletDTO() {
  }

  public FullOutletDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Название точки продаж. 
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FullOutletDTO type(OutletType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public OutletType getType() {
    return type;
  }

  public void setType(OutletType type) {
    this.type = type;
  }


  public FullOutletDTO coords(String coords) {
    this.coords = coords;
    return this;
  }

  /**
   * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
   * @return coords
   */
  @javax.annotation.Nullable
  public String getCoords() {
    return coords;
  }

  public void setCoords(String coords) {
    this.coords = coords;
  }


  public FullOutletDTO isMain(Boolean isMain) {
    this.isMain = isMain;
    return this;
  }

  /**
   * Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
   * @return isMain
   */
  @javax.annotation.Nullable
  public Boolean getIsMain() {
    return isMain;
  }

  public void setIsMain(Boolean isMain) {
    this.isMain = isMain;
  }


  public FullOutletDTO shopOutletCode(String shopOutletCode) {
    this.shopOutletCode = shopOutletCode;
    return this;
  }

  /**
   * Идентификатор точки продаж, присвоенный магазином.
   * @return shopOutletCode
   */
  @javax.annotation.Nullable
  public String getShopOutletCode() {
    return shopOutletCode;
  }

  public void setShopOutletCode(String shopOutletCode) {
    this.shopOutletCode = shopOutletCode;
  }


  public FullOutletDTO visibility(OutletVisibilityType visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   */
  @javax.annotation.Nullable
  public OutletVisibilityType getVisibility() {
    return visibility;
  }

  public void setVisibility(OutletVisibilityType visibility) {
    this.visibility = visibility;
  }


  public FullOutletDTO address(OutletAddressDTO address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public OutletAddressDTO getAddress() {
    return address;
  }

  public void setAddress(OutletAddressDTO address) {
    this.address = address;
  }


  public FullOutletDTO phones(List<String> phones) {
    this.phones = phones;
    return this;
  }

  public FullOutletDTO addPhonesItem(String phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

  /**
   * Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
   * @return phones
   */
  @javax.annotation.Nonnull
  public List<String> getPhones() {
    return phones;
  }

  public void setPhones(List<String> phones) {
    this.phones = phones;
  }


  public FullOutletDTO workingSchedule(OutletWorkingScheduleDTO workingSchedule) {
    this.workingSchedule = workingSchedule;
    return this;
  }

  /**
   * Get workingSchedule
   * @return workingSchedule
   */
  @javax.annotation.Nonnull
  public OutletWorkingScheduleDTO getWorkingSchedule() {
    return workingSchedule;
  }

  public void setWorkingSchedule(OutletWorkingScheduleDTO workingSchedule) {
    this.workingSchedule = workingSchedule;
  }


  public FullOutletDTO deliveryRules(List<OutletDeliveryRuleDTO> deliveryRules) {
    this.deliveryRules = deliveryRules;
    return this;
  }

  public FullOutletDTO addDeliveryRulesItem(OutletDeliveryRuleDTO deliveryRulesItem) {
    if (this.deliveryRules == null) {
      this.deliveryRules = new ArrayList<>();
    }
    this.deliveryRules.add(deliveryRulesItem);
    return this;
  }

  /**
   * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
   * @return deliveryRules
   */
  @javax.annotation.Nullable
  public List<OutletDeliveryRuleDTO> getDeliveryRules() {
    return deliveryRules;
  }

  public void setDeliveryRules(List<OutletDeliveryRuleDTO> deliveryRules) {
    this.deliveryRules = deliveryRules;
  }


  public FullOutletDTO storagePeriod(Long storagePeriod) {
    this.storagePeriod = storagePeriod;
    return this;
  }

  /**
   * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
   * @return storagePeriod
   */
  @javax.annotation.Nullable
  public Long getStoragePeriod() {
    return storagePeriod;
  }

  public void setStoragePeriod(Long storagePeriod) {
    this.storagePeriod = storagePeriod;
  }


  public FullOutletDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор точки продаж, присвоенный Маркетом.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public FullOutletDTO status(OutletStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OutletStatusType getStatus() {
    return status;
  }

  public void setStatus(OutletStatusType status) {
    this.status = status;
  }


  public FullOutletDTO region(RegionDTO region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public RegionDTO getRegion() {
    return region;
  }

  public void setRegion(RegionDTO region) {
    this.region = region;
  }


  public FullOutletDTO shopOutletId(String shopOutletId) {
    this.shopOutletId = shopOutletId;
    return this;
  }

  /**
   * Идентификатор точки продаж, заданный магазином.
   * @return shopOutletId
   */
  @javax.annotation.Nullable
  public String getShopOutletId() {
    return shopOutletId;
  }

  public void setShopOutletId(String shopOutletId) {
    this.shopOutletId = shopOutletId;
  }


  public FullOutletDTO workingTime(String workingTime) {
    this.workingTime = workingTime;
    return this;
  }

  /**
   * Рабочее время.
   * @return workingTime
   */
  @javax.annotation.Nullable
  public String getWorkingTime() {
    return workingTime;
  }

  public void setWorkingTime(String workingTime) {
    this.workingTime = workingTime;
  }


  public FullOutletDTO moderationReason(String moderationReason) {
    this.moderationReason = moderationReason;
    return this;
  }

  /**
   * Статус модерации.
   * @return moderationReason
   */
  @javax.annotation.Nullable
  public String getModerationReason() {
    return moderationReason;
  }

  public void setModerationReason(String moderationReason) {
    this.moderationReason = moderationReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FullOutletDTO fullOutletDTO = (FullOutletDTO) o;
    return Objects.equals(this.name, fullOutletDTO.name) &&
        Objects.equals(this.type, fullOutletDTO.type) &&
        Objects.equals(this.coords, fullOutletDTO.coords) &&
        Objects.equals(this.isMain, fullOutletDTO.isMain) &&
        Objects.equals(this.shopOutletCode, fullOutletDTO.shopOutletCode) &&
        Objects.equals(this.visibility, fullOutletDTO.visibility) &&
        Objects.equals(this.address, fullOutletDTO.address) &&
        Objects.equals(this.phones, fullOutletDTO.phones) &&
        Objects.equals(this.workingSchedule, fullOutletDTO.workingSchedule) &&
        Objects.equals(this.deliveryRules, fullOutletDTO.deliveryRules) &&
        Objects.equals(this.storagePeriod, fullOutletDTO.storagePeriod) &&
        Objects.equals(this.id, fullOutletDTO.id) &&
        Objects.equals(this.status, fullOutletDTO.status) &&
        Objects.equals(this.region, fullOutletDTO.region) &&
        Objects.equals(this.shopOutletId, fullOutletDTO.shopOutletId) &&
        Objects.equals(this.workingTime, fullOutletDTO.workingTime) &&
        Objects.equals(this.moderationReason, fullOutletDTO.moderationReason);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, coords, isMain, shopOutletCode, visibility, address, phones, workingSchedule, deliveryRules, storagePeriod, id, status, region, shopOutletId, workingTime, moderationReason);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FullOutletDTO {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    coords: ").append(toIndentedString(coords)).append("\n");
    sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
    sb.append("    shopOutletCode: ").append(toIndentedString(shopOutletCode)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    workingSchedule: ").append(toIndentedString(workingSchedule)).append("\n");
    sb.append("    deliveryRules: ").append(toIndentedString(deliveryRules)).append("\n");
    sb.append("    storagePeriod: ").append(toIndentedString(storagePeriod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    shopOutletId: ").append(toIndentedString(shopOutletId)).append("\n");
    sb.append("    workingTime: ").append(toIndentedString(workingTime)).append("\n");
    sb.append("    moderationReason: ").append(toIndentedString(moderationReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("coords");
    openapiFields.add("isMain");
    openapiFields.add("shopOutletCode");
    openapiFields.add("visibility");
    openapiFields.add("address");
    openapiFields.add("phones");
    openapiFields.add("workingSchedule");
    openapiFields.add("deliveryRules");
    openapiFields.add("storagePeriod");
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("region");
    openapiFields.add("shopOutletId");
    openapiFields.add("workingTime");
    openapiFields.add("moderationReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("phones");
    openapiRequiredFields.add("workingSchedule");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FullOutletDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FullOutletDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FullOutletDTO is not found in the empty JSON string", FullOutletDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FullOutletDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FullOutletDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FullOutletDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `type`
      OutletType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("coords") != null && !jsonObj.get("coords").isJsonNull()) && !jsonObj.get("coords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coords").toString()));
      }
      if ((jsonObj.get("shopOutletCode") != null && !jsonObj.get("shopOutletCode").isJsonNull()) && !jsonObj.get("shopOutletCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopOutletCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopOutletCode").toString()));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        OutletVisibilityType.validateJsonElement(jsonObj.get("visibility"));
      }
      // validate the required field `address`
      OutletAddressDTO.validateJsonElement(jsonObj.get("address"));
      // ensure the required json array is present
      if (jsonObj.get("phones") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("phones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phones` to be an array in the JSON string but got `%s`", jsonObj.get("phones").toString()));
      }
      // validate the required field `workingSchedule`
      OutletWorkingScheduleDTO.validateJsonElement(jsonObj.get("workingSchedule"));
      if (jsonObj.get("deliveryRules") != null && !jsonObj.get("deliveryRules").isJsonNull()) {
        JsonArray jsonArraydeliveryRules = jsonObj.getAsJsonArray("deliveryRules");
        if (jsonArraydeliveryRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deliveryRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deliveryRules` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryRules").toString()));
          }

          // validate the optional field `deliveryRules` (array)
          for (int i = 0; i < jsonArraydeliveryRules.size(); i++) {
            OutletDeliveryRuleDTO.validateJsonElement(jsonArraydeliveryRules.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OutletStatusType.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        RegionDTO.validateJsonElement(jsonObj.get("region"));
      }
      if ((jsonObj.get("shopOutletId") != null && !jsonObj.get("shopOutletId").isJsonNull()) && !jsonObj.get("shopOutletId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopOutletId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopOutletId").toString()));
      }
      if ((jsonObj.get("workingTime") != null && !jsonObj.get("workingTime").isJsonNull()) && !jsonObj.get("workingTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workingTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workingTime").toString()));
      }
      if ((jsonObj.get("moderationReason") != null && !jsonObj.get("moderationReason").isJsonNull()) && !jsonObj.get("moderationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moderationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moderationReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FullOutletDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FullOutletDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FullOutletDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FullOutletDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<FullOutletDTO>() {
           @Override
           public void write(JsonWriter out, FullOutletDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FullOutletDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FullOutletDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FullOutletDTO
   * @throws IOException if the JSON string is invalid with respect to FullOutletDTO
   */
  public static FullOutletDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FullOutletDTO.class);
  }

  /**
   * Convert an instance of FullOutletDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

