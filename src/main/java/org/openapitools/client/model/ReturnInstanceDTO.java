/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReturnInstanceStatusType;
import org.openapitools.client.model.ReturnInstanceStockType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Логистическая информация по возврату.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class ReturnInstanceDTO {
  public static final String SERIALIZED_NAME_STOCK_TYPE = "stockType";
  @SerializedName(SERIALIZED_NAME_STOCK_TYPE)
  private ReturnInstanceStockType stockType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReturnInstanceStatusType status;

  public static final String SERIALIZED_NAME_CIS = "cis";
  @SerializedName(SERIALIZED_NAME_CIS)
  private String cis;

  public static final String SERIALIZED_NAME_IMEI = "imei";
  @SerializedName(SERIALIZED_NAME_IMEI)
  private String imei;

  public ReturnInstanceDTO() {
  }

  public ReturnInstanceDTO stockType(ReturnInstanceStockType stockType) {
    this.stockType = stockType;
    return this;
  }

  /**
   * Get stockType
   * @return stockType
   */
  @javax.annotation.Nullable
  public ReturnInstanceStockType getStockType() {
    return stockType;
  }

  public void setStockType(ReturnInstanceStockType stockType) {
    this.stockType = stockType;
  }


  public ReturnInstanceDTO status(ReturnInstanceStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ReturnInstanceStatusType getStatus() {
    return status;
  }

  public void setStatus(ReturnInstanceStatusType status) {
    this.status = status;
  }


  public ReturnInstanceDTO cis(String cis) {
    this.cis = cis;
    return this;
  }

  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
   * @return cis
   */
  @javax.annotation.Nullable
  public String getCis() {
    return cis;
  }

  public void setCis(String cis) {
    this.cis = cis;
  }


  public ReturnInstanceDTO imei(String imei) {
    this.imei = imei;
    return this;
  }

  /**
   * Международный идентификатор мобильного оборудования.
   * @return imei
   */
  @javax.annotation.Nullable
  public String getImei() {
    return imei;
  }

  public void setImei(String imei) {
    this.imei = imei;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnInstanceDTO returnInstanceDTO = (ReturnInstanceDTO) o;
    return Objects.equals(this.stockType, returnInstanceDTO.stockType) &&
        Objects.equals(this.status, returnInstanceDTO.status) &&
        Objects.equals(this.cis, returnInstanceDTO.cis) &&
        Objects.equals(this.imei, returnInstanceDTO.imei);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stockType, status, cis, imei);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnInstanceDTO {\n");
    sb.append("    stockType: ").append(toIndentedString(stockType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cis: ").append(toIndentedString(cis)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stockType");
    openapiFields.add("status");
    openapiFields.add("cis");
    openapiFields.add("imei");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnInstanceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnInstanceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnInstanceDTO is not found in the empty JSON string", ReturnInstanceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnInstanceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnInstanceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `stockType`
      if (jsonObj.get("stockType") != null && !jsonObj.get("stockType").isJsonNull()) {
        ReturnInstanceStockType.validateJsonElement(jsonObj.get("stockType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ReturnInstanceStatusType.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("cis") != null && !jsonObj.get("cis").isJsonNull()) && !jsonObj.get("cis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cis").toString()));
      }
      if ((jsonObj.get("imei") != null && !jsonObj.get("imei").isJsonNull()) && !jsonObj.get("imei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imei").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnInstanceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnInstanceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnInstanceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnInstanceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnInstanceDTO>() {
           @Override
           public void write(JsonWriter out, ReturnInstanceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnInstanceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnInstanceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnInstanceDTO
   * @throws IOException if the JSON string is invalid with respect to ReturnInstanceDTO
   */
  public static ReturnInstanceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnInstanceDTO.class);
  }

  /**
   * Convert an instance of ReturnInstanceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

