/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import org.openapitools.client.model.CampaignSettingsLocalRegionDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Настройки магазина.
 **/
@ApiModel(description = "Настройки магазина.")
public class CampaignSettingsDTO {
  
  @SerializedName("countryRegion")
  private Long countryRegion = null;
  @SerializedName("shopName")
  private String shopName = null;
  @SerializedName("showInContext")
  private Boolean showInContext = null;
  @SerializedName("showInPremium")
  private Boolean showInPremium = null;
  @SerializedName("useOpenStat")
  private Boolean useOpenStat = null;
  @SerializedName("localRegion")
  private CampaignSettingsLocalRegionDTO localRegion = null;

  /**
   * Идентификатор региона, в котором находится магазин.
   **/
  @ApiModelProperty(value = "Идентификатор региона, в котором находится магазин.")
  public Long getCountryRegion() {
    return countryRegion;
  }
  public void setCountryRegion(Long countryRegion) {
    this.countryRegion = countryRegion;
  }

  /**
   * Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. 
   **/
  @ApiModelProperty(value = "Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — `null`. ")
  public String getShopName() {
    return shopName;
  }
  public void setShopName(String shopName) {
    this.shopName = shopName;
  }

  /**
   * Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
   **/
  @ApiModelProperty(value = "Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * `false` — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * `true` — магазин размещен на сайтах партнеров Яндекс Дистрибуции. ")
  public Boolean getShowInContext() {
    return showInContext;
  }
  public void setShowInContext(Boolean showInContext) {
    this.showInContext = showInContext;
  }

  /**
   * Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения. 
   **/
  @ApiModelProperty(value = "Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * `false` — предложения не показываются в блоке cпецразмещения. * `true` — предложения показываются в блоке cпецразмещения. ")
  public Boolean getShowInPremium() {
    return showInPremium;
  }
  public void setShowInPremium(Boolean showInPremium) {
    this.showInPremium = showInPremium;
  }

  /**
   * Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. 
   **/
  @ApiModelProperty(value = "Признак использования внешней интернет-статистики. Возможные значения: * `false` — внешняя интернет-статистика не используется. * `true` — внешняя интернет-статистика используется. ")
  public Boolean getUseOpenStat() {
    return useOpenStat;
  }
  public void setUseOpenStat(Boolean useOpenStat) {
    this.useOpenStat = useOpenStat;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CampaignSettingsLocalRegionDTO getLocalRegion() {
    return localRegion;
  }
  public void setLocalRegion(CampaignSettingsLocalRegionDTO localRegion) {
    this.localRegion = localRegion;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignSettingsDTO campaignSettingsDTO = (CampaignSettingsDTO) o;
    return (this.countryRegion == null ? campaignSettingsDTO.countryRegion == null : this.countryRegion.equals(campaignSettingsDTO.countryRegion)) &&
        (this.shopName == null ? campaignSettingsDTO.shopName == null : this.shopName.equals(campaignSettingsDTO.shopName)) &&
        (this.showInContext == null ? campaignSettingsDTO.showInContext == null : this.showInContext.equals(campaignSettingsDTO.showInContext)) &&
        (this.showInPremium == null ? campaignSettingsDTO.showInPremium == null : this.showInPremium.equals(campaignSettingsDTO.showInPremium)) &&
        (this.useOpenStat == null ? campaignSettingsDTO.useOpenStat == null : this.useOpenStat.equals(campaignSettingsDTO.useOpenStat)) &&
        (this.localRegion == null ? campaignSettingsDTO.localRegion == null : this.localRegion.equals(campaignSettingsDTO.localRegion));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.countryRegion == null ? 0: this.countryRegion.hashCode());
    result = 31 * result + (this.shopName == null ? 0: this.shopName.hashCode());
    result = 31 * result + (this.showInContext == null ? 0: this.showInContext.hashCode());
    result = 31 * result + (this.showInPremium == null ? 0: this.showInPremium.hashCode());
    result = 31 * result + (this.useOpenStat == null ? 0: this.useOpenStat.hashCode());
    result = 31 * result + (this.localRegion == null ? 0: this.localRegion.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignSettingsDTO {\n");
    
    sb.append("  countryRegion: ").append(countryRegion).append("\n");
    sb.append("  shopName: ").append(shopName).append("\n");
    sb.append("  showInContext: ").append(showInContext).append("\n");
    sb.append("  showInPremium: ").append(showInPremium).append("\n");
    sb.append("  useOpenStat: ").append(useOpenStat).append("\n");
    sb.append("  localRegion: ").append(localRegion).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
