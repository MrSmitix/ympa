/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CampaignSettingsLocalRegionDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Настройки магазина.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CampaignSettingsDTO {
  public static final String SERIALIZED_NAME_COUNTRY_REGION = "countryRegion";
  @SerializedName(SERIALIZED_NAME_COUNTRY_REGION)
  private Long countryRegion;

  public static final String SERIALIZED_NAME_SHOP_NAME = "shopName";
  @SerializedName(SERIALIZED_NAME_SHOP_NAME)
  private String shopName;

  public static final String SERIALIZED_NAME_SHOW_IN_CONTEXT = "showInContext";
  @SerializedName(SERIALIZED_NAME_SHOW_IN_CONTEXT)
  private Boolean showInContext;

  public static final String SERIALIZED_NAME_SHOW_IN_PREMIUM = "showInPremium";
  @SerializedName(SERIALIZED_NAME_SHOW_IN_PREMIUM)
  private Boolean showInPremium;

  public static final String SERIALIZED_NAME_USE_OPEN_STAT = "useOpenStat";
  @SerializedName(SERIALIZED_NAME_USE_OPEN_STAT)
  private Boolean useOpenStat;

  public static final String SERIALIZED_NAME_LOCAL_REGION = "localRegion";
  @SerializedName(SERIALIZED_NAME_LOCAL_REGION)
  private CampaignSettingsLocalRegionDTO localRegion;

  public CampaignSettingsDTO() {
  }

  public CampaignSettingsDTO countryRegion(Long countryRegion) {
    this.countryRegion = countryRegion;
    return this;
  }

  /**
   * Идентификатор региона, в котором находится магазин.
   * @return countryRegion
   */
  @javax.annotation.Nullable
  public Long getCountryRegion() {
    return countryRegion;
  }

  public void setCountryRegion(Long countryRegion) {
    this.countryRegion = countryRegion;
  }


  public CampaignSettingsDTO shopName(String shopName) {
    this.shopName = shopName;
    return this;
  }

  /**
   * Наименование магазина на Яндекс Маркете. Если наименование отсутствует, значение параметра выводится — &#x60;null&#x60;. 
   * @return shopName
   */
  @javax.annotation.Nullable
  public String getShopName() {
    return shopName;
  }

  public void setShopName(String shopName) {
    this.shopName = shopName;
  }


  public CampaignSettingsDTO showInContext(Boolean showInContext) {
    this.showInContext = showInContext;
    return this;
  }

  /**
   * Признак размещения магазина на сайтах партнеров Яндекс Дистрибуции. Возможные значения: * &#x60;false&#x60; — магазин не размещен на сайтах партнеров Яндекс Дистрибуции. * &#x60;true&#x60; — магазин размещен на сайтах партнеров Яндекс Дистрибуции. 
   * @return showInContext
   */
  @javax.annotation.Nullable
  public Boolean getShowInContext() {
    return showInContext;
  }

  public void setShowInContext(Boolean showInContext) {
    this.showInContext = showInContext;
  }


  public CampaignSettingsDTO showInPremium(Boolean showInPremium) {
    this.showInPremium = showInPremium;
    return this;
  }

  /**
   * Признак показа предложений магазина в рекламном блоке над результатами поиска (cпецразмещение). Возможные значения: * &#x60;false&#x60; — предложения не показываются в блоке cпецразмещения. * &#x60;true&#x60; — предложения показываются в блоке cпецразмещения. 
   * @return showInPremium
   */
  @javax.annotation.Nullable
  public Boolean getShowInPremium() {
    return showInPremium;
  }

  public void setShowInPremium(Boolean showInPremium) {
    this.showInPremium = showInPremium;
  }


  public CampaignSettingsDTO useOpenStat(Boolean useOpenStat) {
    this.useOpenStat = useOpenStat;
    return this;
  }

  /**
   * Признак использования внешней интернет-статистики. Возможные значения: * &#x60;false&#x60; — внешняя интернет-статистика не используется. * &#x60;true&#x60; — внешняя интернет-статистика используется. 
   * @return useOpenStat
   */
  @javax.annotation.Nullable
  public Boolean getUseOpenStat() {
    return useOpenStat;
  }

  public void setUseOpenStat(Boolean useOpenStat) {
    this.useOpenStat = useOpenStat;
  }


  public CampaignSettingsDTO localRegion(CampaignSettingsLocalRegionDTO localRegion) {
    this.localRegion = localRegion;
    return this;
  }

  /**
   * Get localRegion
   * @return localRegion
   */
  @javax.annotation.Nullable
  public CampaignSettingsLocalRegionDTO getLocalRegion() {
    return localRegion;
  }

  public void setLocalRegion(CampaignSettingsLocalRegionDTO localRegion) {
    this.localRegion = localRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignSettingsDTO campaignSettingsDTO = (CampaignSettingsDTO) o;
    return Objects.equals(this.countryRegion, campaignSettingsDTO.countryRegion) &&
        Objects.equals(this.shopName, campaignSettingsDTO.shopName) &&
        Objects.equals(this.showInContext, campaignSettingsDTO.showInContext) &&
        Objects.equals(this.showInPremium, campaignSettingsDTO.showInPremium) &&
        Objects.equals(this.useOpenStat, campaignSettingsDTO.useOpenStat) &&
        Objects.equals(this.localRegion, campaignSettingsDTO.localRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryRegion, shopName, showInContext, showInPremium, useOpenStat, localRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignSettingsDTO {\n");
    sb.append("    countryRegion: ").append(toIndentedString(countryRegion)).append("\n");
    sb.append("    shopName: ").append(toIndentedString(shopName)).append("\n");
    sb.append("    showInContext: ").append(toIndentedString(showInContext)).append("\n");
    sb.append("    showInPremium: ").append(toIndentedString(showInPremium)).append("\n");
    sb.append("    useOpenStat: ").append(toIndentedString(useOpenStat)).append("\n");
    sb.append("    localRegion: ").append(toIndentedString(localRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryRegion");
    openapiFields.add("shopName");
    openapiFields.add("showInContext");
    openapiFields.add("showInPremium");
    openapiFields.add("useOpenStat");
    openapiFields.add("localRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignSettingsDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignSettingsDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignSettingsDTO is not found in the empty JSON string", CampaignSettingsDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignSettingsDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignSettingsDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("shopName") != null && !jsonObj.get("shopName").isJsonNull()) && !jsonObj.get("shopName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopName").toString()));
      }
      // validate the optional field `localRegion`
      if (jsonObj.get("localRegion") != null && !jsonObj.get("localRegion").isJsonNull()) {
        CampaignSettingsLocalRegionDTO.validateJsonElement(jsonObj.get("localRegion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignSettingsDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignSettingsDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignSettingsDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignSettingsDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignSettingsDTO>() {
           @Override
           public void write(JsonWriter out, CampaignSettingsDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignSettingsDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignSettingsDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignSettingsDTO
   * @throws IOException if the JSON string is invalid with respect to CampaignSettingsDTO
   */
  public static CampaignSettingsDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignSettingsDTO.class);
  }

  /**
   * Convert an instance of CampaignSettingsDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

