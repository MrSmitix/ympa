/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.OptionValuesLimitedDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: &#x60;S&#x60;, &#x60;M&#x60;, &#x60;L&#x60;, &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;, &#x60;42/164&#x60;, &#x60;46/176&#x60;, &#x60;44S&#x60;.  Если ограничивающая характеристика **размерная сетка** принимает значение &#x60;RU&#x60;, список возможных значений размера сокращается до &#x60;44&#x60;, &#x60;46&#x60;, &#x60;48&#x60;. 
 **/
@ApiModel(description = "Ограничение на возможные значения, накладываемое другой характеристикой.  Если ограничивающая характеристика принимает определенное значение, список возможных значений ограничиваемой характеристики сокращается.  **Пример**  Характеристика **размер** сама по себе может принимать девять разных значений: `S`, `M`, `L`, `44`, `46`, `48`, `42/164`, `46/176`, `44S`.  Если ограничивающая характеристика **размерная сетка** принимает значение `RU`, список возможных значений размера сокращается до `44`, `46`, `48`. ")
public class ValueRestrictionDTO {
  
  @SerializedName("limitingParameterId")
  private Long limitingParameterId = null;
  @SerializedName("limitedValues")
  private List<OptionValuesLimitedDTO> limitedValues = null;

  /**
   * Идентификатор ограничивающей характеристики.
   **/
  @ApiModelProperty(required = true, value = "Идентификатор ограничивающей характеристики.")
  public Long getLimitingParameterId() {
    return limitingParameterId;
  }
  public void setLimitingParameterId(Long limitingParameterId) {
    this.limitingParameterId = limitingParameterId;
  }

  /**
   * Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.
   **/
  @ApiModelProperty(required = true, value = "Значения ограничивающей характеристики и соответствующие допустимые значения текущей характеристики.")
  public List<OptionValuesLimitedDTO> getLimitedValues() {
    return limitedValues;
  }
  public void setLimitedValues(List<OptionValuesLimitedDTO> limitedValues) {
    this.limitedValues = limitedValues;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueRestrictionDTO valueRestrictionDTO = (ValueRestrictionDTO) o;
    return (this.limitingParameterId == null ? valueRestrictionDTO.limitingParameterId == null : this.limitingParameterId.equals(valueRestrictionDTO.limitingParameterId)) &&
        (this.limitedValues == null ? valueRestrictionDTO.limitedValues == null : this.limitedValues.equals(valueRestrictionDTO.limitedValues));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.limitingParameterId == null ? 0: this.limitingParameterId.hashCode());
    result = 31 * result + (this.limitedValues == null ? 0: this.limitedValues.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueRestrictionDTO {\n");
    
    sb.append("  limitingParameterId: ").append(limitingParameterId).append("\n");
    sb.append("  limitedValues: ").append(limitedValues).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
