/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Статус публикации товара:  * &#x60;READY&#x60; — товар прошел модерацию. Чтобы разместить его на Маркете, установите для него цену. * &#x60;IN_WORK&#x60; — товар проходит модерацию. Это занимает несколько дней. * &#x60;NEED_CONTENT&#x60; — для товара без SKU на Маркете &#x60;marketSku&#x60; нужно найти карточку самостоятельно (через API или кабинет продавца на Маркете) или создать ее, если товар еще не продается на Маркете. * &#x60;NEED_INFO&#x60; — товар не прошел модерацию из-за ошибок или недостающих сведений в описании товара. Информация о причинах отклонения возвращается в параметре &#x60;notes&#x60;. * &#x60;REJECTED&#x60; — товар не прошел модерацию, так как Маркет не планирует размещать подобные товары. * &#x60;SUSPENDED&#x60; — товар не прошел модерацию, так как Маркет пока не размещает подобные товары. 
 */
@JsonAdapter(OfferProcessingStatusType.Adapter.class)
public enum OfferProcessingStatusType {
  
  UNKNOWN("UNKNOWN"),
  
  READY("READY"),
  
  IN_WORK("IN_WORK"),
  
  NEED_INFO("NEED_INFO"),
  
  NEED_MAPPING("NEED_MAPPING"),
  
  NEED_CONTENT("NEED_CONTENT"),
  
  CONTENT_PROCESSING("CONTENT_PROCESSING"),
  
  SUSPENDED("SUSPENDED"),
  
  REJECTED("REJECTED"),
  
  REVIEW("REVIEW"),
  
  CREATE_ERROR("CREATE_ERROR"),
  
  UPDATE_ERROR("UPDATE_ERROR");

  private String value;

  OfferProcessingStatusType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OfferProcessingStatusType fromValue(String value) {
    for (OfferProcessingStatusType b : OfferProcessingStatusType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OfferProcessingStatusType> {
    @Override
    public void write(final JsonWriter jsonWriter, final OfferProcessingStatusType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OfferProcessingStatusType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OfferProcessingStatusType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OfferProcessingStatusType.fromValue(value);
  }
}

