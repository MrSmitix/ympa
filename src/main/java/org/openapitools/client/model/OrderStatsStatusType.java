/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Текущий статус заказа:  * &#x60;CANCELLED_BEFORE_PROCESSING&#x60; — заказ отменен до начала его обработки.  * &#x60;CANCELLED_IN_DELIVERY&#x60; — заказ отменен во время его доставки.  * &#x60;CANCELLED_IN_PROCESSING&#x60; — заказ отменен во время его обработки.  * &#x60;DELIVERY&#x60; — заказ передан службе доставки.  * &#x60;DELIVERED&#x60; — заказ доставлен.  * &#x60;PARTIALLY_DELIVERED&#x60; — заказ частично доставлен.  * &#x60;PARTIALLY_RETURNED&#x60; — заказ частично возвращен покупателем.  * &#x60;PENDING&#x60; — заказ ожидает подтверждения.  * &#x60;PICKUP&#x60; — заказ доставлен в пункт выдачи.  * &#x60;PROCESSING&#x60; — заказ в обработке.  * &#x60;RESERVED&#x60; — товар зарезервирован на складе.  * &#x60;RETURNED&#x60; — заказ полностью возвращен покупателем.  * &#x60;UNKNOWN&#x60; — неизвестный статус заказа.  * &#x60;UNPAID&#x60; — заказ от юридического лица ожидает оплаты.  * &#x60;LOST&#x60; — заказ утерян. 
 */
@JsonAdapter(OrderStatsStatusType.Adapter.class)
public enum OrderStatsStatusType {
  
  CANCELLED_BEFORE_PROCESSING("CANCELLED_BEFORE_PROCESSING"),
  
  CANCELLED_IN_DELIVERY("CANCELLED_IN_DELIVERY"),
  
  CANCELLED_IN_PROCESSING("CANCELLED_IN_PROCESSING"),
  
  DELIVERY("DELIVERY"),
  
  DELIVERED("DELIVERED"),
  
  PARTIALLY_DELIVERED("PARTIALLY_DELIVERED"),
  
  PARTIALLY_RETURNED("PARTIALLY_RETURNED"),
  
  PENDING("PENDING"),
  
  PICKUP("PICKUP"),
  
  PROCESSING("PROCESSING"),
  
  RESERVED("RESERVED"),
  
  RETURNED("RETURNED"),
  
  UNKNOWN("UNKNOWN"),
  
  UNPAID("UNPAID"),
  
  LOST("LOST");

  private String value;

  OrderStatsStatusType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OrderStatsStatusType fromValue(String value) {
    for (OrderStatsStatusType b : OrderStatsStatusType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OrderStatsStatusType> {
    @Override
    public void write(final JsonWriter jsonWriter, final OrderStatsStatusType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OrderStatsStatusType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OrderStatsStatusType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OrderStatsStatusType.fromValue(value);
  }
}

