/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Услуга:  * &#x60;FEE&#x60; — размещение товара на Маркете. * &#x60;FULFILLMENT&#x60; — складская обработка. Не возвращается с 1 января 2024 года. * &#x60;LOYALTY_PARTICIPATION_FEE&#x60; — участие в программе лояльности и отзывы за баллы. * &#x60;AUCTION_PROMOTION&#x60; — буст продаж с оплатой за продажи. * &#x60;INSTALLMENT&#x60; — рассрочка. Не возвращается с 24 февраля 2022 года. * &#x60;DELIVERY_TO_CUSTOMER&#x60; — доставка покупателю (FBY, FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * &#x60;EXPRESS_DELIVERY_TO_CUSTOMER&#x60; — экспресс-доставка покупателю (Экспресс). * &#x60;AGENCY&#x60; — прием платежа покупателя. * &#x60;PAYMENT_TRANSFER&#x60; — перевод платежа покупателя. * &#x60;RETURNED_ORDERS_STORAGE&#x60; — хранение невыкупов и возвратов (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * &#x60;SORTING&#x60; — обработка заказа (FBS). * &#x60;INTAKE_SORTING&#x60; — организация забора заказов со склада продавца (FBS). * &#x60;RETURN_PROCESSING&#x60; — обработка заказов на складе (FBS). Для DBS и Экспресс — если заказ возвращается через логистику Маркета. * &#x60;ILLIQUID_GOODS_SALE&#x60; — вознаграждение за продажу невывезенных товаров. 
 */
@JsonAdapter(OrdersStatsCommissionType.Adapter.class)
public enum OrdersStatsCommissionType {
  
  FEE("FEE"),
  
  FULFILLMENT("FULFILLMENT"),
  
  LOYALTY_PARTICIPATION_FEE("LOYALTY_PARTICIPATION_FEE"),
  
  AUCTION_PROMOTION("AUCTION_PROMOTION"),
  
  INSTALLMENT("INSTALLMENT"),
  
  DELIVERY_TO_CUSTOMER("DELIVERY_TO_CUSTOMER"),
  
  EXPRESS_DELIVERY_TO_CUSTOMER("EXPRESS_DELIVERY_TO_CUSTOMER"),
  
  AGENCY("AGENCY"),
  
  PAYMENT_TRANSFER("PAYMENT_TRANSFER"),
  
  RETURNED_ORDERS_STORAGE("RETURNED_ORDERS_STORAGE"),
  
  SORTING("SORTING"),
  
  INTAKE_SORTING("INTAKE_SORTING"),
  
  RETURN_PROCESSING("RETURN_PROCESSING"),
  
  ILLIQUID_GOODS_SALE("ILLIQUID_GOODS_SALE");

  private String value;

  OrdersStatsCommissionType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OrdersStatsCommissionType fromValue(String value) {
    for (OrdersStatsCommissionType b : OrdersStatsCommissionType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OrdersStatsCommissionType> {
    @Override
    public void write(final JsonWriter jsonWriter, final OrdersStatsCommissionType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OrdersStatsCommissionType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OrdersStatsCommissionType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OrdersStatsCommissionType.fromValue(value);
  }
}

