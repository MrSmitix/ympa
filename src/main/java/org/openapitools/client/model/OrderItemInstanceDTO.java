/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Переданные вами для данной позиции коды маркировки или УИНы. Коды «Честного знака» возвращаются в двух вариантах — с криптохвостом и без. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrderItemInstanceDTO {
  public static final String SERIALIZED_NAME_CIS = "cis";
  @SerializedName(SERIALIZED_NAME_CIS)
  private String cis;

  public static final String SERIALIZED_NAME_CIS_FULL = "cisFull";
  @SerializedName(SERIALIZED_NAME_CIS_FULL)
  private String cisFull;

  public static final String SERIALIZED_NAME_UIN = "uin";
  @SerializedName(SERIALIZED_NAME_UIN)
  private String uin;

  public static final String SERIALIZED_NAME_RNPT = "rnpt";
  @SerializedName(SERIALIZED_NAME_RNPT)
  private String rnpt;

  public static final String SERIALIZED_NAME_GTD = "gtd";
  @SerializedName(SERIALIZED_NAME_GTD)
  private String gtd;

  public OrderItemInstanceDTO() {
  }

  public OrderItemInstanceDTO cis(String cis) {
    this.cis = cis;
    return this;
  }

  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) без криптохвоста.
   * @return cis
   */
  @javax.annotation.Nullable
  public String getCis() {
    return cis;
  }

  public void setCis(String cis) {
    this.cis = cis;
  }


  public OrderItemInstanceDTO cisFull(String cisFull) {
    this.cisFull = cisFull;
    return this;
  }

  /**
   * Код идентификации единицы товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/) с криптохвостом.
   * @return cisFull
   */
  @javax.annotation.Nullable
  public String getCisFull() {
    return cisFull;
  }

  public void setCisFull(String cisFull) {
    this.cisFull = cisFull;
  }


  public OrderItemInstanceDTO uin(String uin) {
    this.uin = uin;
    return this;
  }

  /**
   * УИН ювелирного изделия (16-значный код) Производитель получает УИН, когда регистрирует изделие в системе контроля за оборотом драгоценных металлов и камней — ГИИС ДМДК. 
   * @return uin
   */
  @javax.annotation.Nullable
  public String getUin() {
    return uin;
  }

  public void setUin(String uin) {
    this.uin = uin;
  }


  public OrderItemInstanceDTO rnpt(String rnpt) {
    this.rnpt = rnpt;
    return this;
  }

  /**
   * Регистрационный номер партии товара.  Представляет собой строку из четырех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ/ХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на партию товара. Далее — дата, номер декларации и номер маркированного товара в декларации. 
   * @return rnpt
   */
  @javax.annotation.Nullable
  public String getRnpt() {
    return rnpt;
  }

  public void setRnpt(String rnpt) {
    this.rnpt = rnpt;
  }


  public OrderItemInstanceDTO gtd(String gtd) {
    this.gtd = gtd;
    return this;
  }

  /**
   * Грузовая таможенная декларация.  Представляет собой строку из трех чисел, разделенных косой чертой: ХХХХХХХХ/ХХХХХХ/ХХХХХХХ.  Первая часть — код таможни, которая зарегистрировала декларацию на ввезенные товары. Далее — дата и номер декларации. 
   * @return gtd
   */
  @javax.annotation.Nullable
  public String getGtd() {
    return gtd;
  }

  public void setGtd(String gtd) {
    this.gtd = gtd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItemInstanceDTO orderItemInstanceDTO = (OrderItemInstanceDTO) o;
    return Objects.equals(this.cis, orderItemInstanceDTO.cis) &&
        Objects.equals(this.cisFull, orderItemInstanceDTO.cisFull) &&
        Objects.equals(this.uin, orderItemInstanceDTO.uin) &&
        Objects.equals(this.rnpt, orderItemInstanceDTO.rnpt) &&
        Objects.equals(this.gtd, orderItemInstanceDTO.gtd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cis, cisFull, uin, rnpt, gtd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItemInstanceDTO {\n");
    sb.append("    cis: ").append(toIndentedString(cis)).append("\n");
    sb.append("    cisFull: ").append(toIndentedString(cisFull)).append("\n");
    sb.append("    uin: ").append(toIndentedString(uin)).append("\n");
    sb.append("    rnpt: ").append(toIndentedString(rnpt)).append("\n");
    sb.append("    gtd: ").append(toIndentedString(gtd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cis");
    openapiFields.add("cisFull");
    openapiFields.add("uin");
    openapiFields.add("rnpt");
    openapiFields.add("gtd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderItemInstanceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderItemInstanceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItemInstanceDTO is not found in the empty JSON string", OrderItemInstanceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderItemInstanceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderItemInstanceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cis") != null && !jsonObj.get("cis").isJsonNull()) && !jsonObj.get("cis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cis").toString()));
      }
      if ((jsonObj.get("cisFull") != null && !jsonObj.get("cisFull").isJsonNull()) && !jsonObj.get("cisFull").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cisFull` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cisFull").toString()));
      }
      if ((jsonObj.get("uin") != null && !jsonObj.get("uin").isJsonNull()) && !jsonObj.get("uin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uin").toString()));
      }
      if ((jsonObj.get("rnpt") != null && !jsonObj.get("rnpt").isJsonNull()) && !jsonObj.get("rnpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rnpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rnpt").toString()));
      }
      if ((jsonObj.get("gtd") != null && !jsonObj.get("gtd").isJsonNull()) && !jsonObj.get("gtd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gtd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gtd").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItemInstanceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItemInstanceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItemInstanceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItemInstanceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItemInstanceDTO>() {
           @Override
           public void write(JsonWriter out, OrderItemInstanceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItemInstanceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderItemInstanceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderItemInstanceDTO
   * @throws IOException if the JSON string is invalid with respect to OrderItemInstanceDTO
   */
  public static OrderItemInstanceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItemInstanceDTO.class);
  }

  /**
   * Convert an instance of OrderItemInstanceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

