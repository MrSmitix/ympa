/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.AgeDTO;
import org.openapitools.client.model.OfferConditionDTO;
import org.openapitools.client.model.OfferManualDTO;
import org.openapitools.client.model.OfferParamDTO;
import org.openapitools.client.model.OfferType;
import org.openapitools.client.model.OfferWeightDimensionsDTO;
import org.openapitools.client.model.TimePeriodDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Основные параметры товара.
 **/
@ApiModel(description = "Основные параметры товара.")
public class BaseOfferDTO {
  
  @SerializedName("offerId")
  private String offerId = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("marketCategoryId")
  private Long marketCategoryId = null;
  @SerializedName("category")
  private String category = null;
  @SerializedName("pictures")
  private List<String> pictures = null;
  @SerializedName("videos")
  private List<String> videos = null;
  @SerializedName("manuals")
  private List<OfferManualDTO> manuals = null;
  @SerializedName("vendor")
  private String vendor = null;
  @SerializedName("barcodes")
  private List<String> barcodes = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("manufacturerCountries")
  private List<String> manufacturerCountries = null;
  @SerializedName("weightDimensions")
  private OfferWeightDimensionsDTO weightDimensions = null;
  @SerializedName("vendorCode")
  private String vendorCode = null;
  @SerializedName("tags")
  private List<String> tags = null;
  @SerializedName("shelfLife")
  private TimePeriodDTO shelfLife = null;
  @SerializedName("lifeTime")
  private TimePeriodDTO lifeTime = null;
  @SerializedName("guaranteePeriod")
  private TimePeriodDTO guaranteePeriod = null;
  @SerializedName("customsCommodityCode")
  private String customsCommodityCode = null;
  @SerializedName("certificates")
  private List<String> certificates = null;
  @SerializedName("boxCount")
  private Integer boxCount = null;
  @SerializedName("condition")
  private OfferConditionDTO condition = null;
  @SerializedName("type")
  private OfferType type = null;
  @SerializedName("downloadable")
  private Boolean downloadable = null;
  @SerializedName("adult")
  private Boolean adult = null;
  @SerializedName("age")
  private AgeDTO age = null;
  @SerializedName("params")
  private List<OfferParamDTO> params = null;

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   **/
  @ApiModelProperty(required = true, value = "Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
  public String getOfferId() {
    return offerId;
  }
  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }

  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   **/
  @ApiModelProperty(value = "Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) ")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   **/
  @ApiModelProperty(value = "Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать `marketCategoryId`, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). ")
  public Long getMarketCategoryId() {
    return marketCategoryId;
  }
  public void setMarketCategoryId(Long marketCategoryId) {
    this.marketCategoryId = marketCategoryId;
  }

  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   **/
  @ApiModelProperty(value = "Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. ")
  public String getCategory() {
    return category;
  }
  public void setCategory(String category) {
    this.category = category;
  }

  /**
   * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
   **/
  @ApiModelProperty(value = "Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/images/sku12345.jpg`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/images/sku12345.jpg`  ❌ `https://www.dropbox.com/s/818f/tovar.jpg`  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) ")
  public List<String> getPictures() {
    return pictures;
  }
  public void setPictures(List<String> pictures) {
    this.pictures = pictures;
  }

  /**
   * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
   **/
  @ApiModelProperty(value = "Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ `https://example-shop.ru/video/sku12345.avi`  ✅ `https://yadi.sk/i/NaBoRsimVOLov`  ❌ `/video/sku12345.avi`  ❌ `https://www.dropbox.com/s/818f/super-tovar.avi`  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) ")
  public List<String> getVideos() {
    return videos;
  }
  public void setVideos(List<String> videos) {
    this.videos = videos;
  }

  /**
   * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. 
   **/
  @ApiModelProperty(value = "Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле `manuals`, загруженные ранее инструкции удалятся. ")
  public List<OfferManualDTO> getManuals() {
    return manuals;
  }
  public void setManuals(List<OfferManualDTO> manuals) {
    this.manuals = manuals;
  }

  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   **/
  @ApiModelProperty(value = "Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.")
  public String getVendor() {
    return vendor;
  }
  public void setVendor(String vendor) {
    this.vendor = vendor;
  }

  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   **/
  @ApiModelProperty(value = "Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  ")
  public List<String> getBarcodes() {
    return barcodes;
  }
  public void setBarcodes(List<String> barcodes) {
    this.barcodes = barcodes;
  }

  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   **/
  @ApiModelProperty(value = "Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) ")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
   **/
  @ApiModelProperty(value = "Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). ")
  public List<String> getManufacturerCountries() {
    return manufacturerCountries;
  }
  public void setManufacturerCountries(List<String> manufacturerCountries) {
    this.manufacturerCountries = manufacturerCountries;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OfferWeightDimensionsDTO getWeightDimensions() {
    return weightDimensions;
  }
  public void setWeightDimensions(OfferWeightDimensionsDTO weightDimensions) {
    this.weightDimensions = weightDimensions;
  }

  /**
   * Артикул товара от производителя.
   **/
  @ApiModelProperty(value = "Артикул товара от производителя.")
  public String getVendorCode() {
    return vendorCode;
  }
  public void setVendorCode(String vendorCode) {
    this.vendorCode = vendorCode;
  }

  /**
   * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
   **/
  @ApiModelProperty(value = "Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. ")
  public List<String> getTags() {
    return tags;
  }
  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimePeriodDTO getShelfLife() {
    return shelfLife;
  }
  public void setShelfLife(TimePeriodDTO shelfLife) {
    this.shelfLife = shelfLife;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimePeriodDTO getLifeTime() {
    return lifeTime;
  }
  public void setLifeTime(TimePeriodDTO lifeTime) {
    this.lifeTime = lifeTime;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimePeriodDTO getGuaranteePeriod() {
    return guaranteePeriod;
  }
  public void setGuaranteePeriod(TimePeriodDTO guaranteePeriod) {
    this.guaranteePeriod = guaranteePeriod;
  }

  /**
   * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
   **/
  @ApiModelProperty(value = "Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. ")
  public String getCustomsCommodityCode() {
    return customsCommodityCode;
  }
  public void setCustomsCommodityCode(String customsCommodityCode) {
    this.customsCommodityCode = customsCommodityCode;
  }

  /**
   * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
   **/
  @ApiModelProperty(value = "Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). ")
  public List<String> getCertificates() {
    return certificates;
  }
  public void setCertificates(List<String> certificates) {
    this.certificates = certificates;
  }

  /**
   * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
   **/
  @ApiModelProperty(value = "Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. ")
  public Integer getBoxCount() {
    return boxCount;
  }
  public void setBoxCount(Integer boxCount) {
    this.boxCount = boxCount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OfferConditionDTO getCondition() {
    return condition;
  }
  public void setCondition(OfferConditionDTO condition) {
    this.condition = condition;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OfferType getType() {
    return type;
  }
  public void setType(OfferType type) {
    this.type = type;
  }

  /**
   * Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
   **/
  @ApiModelProperty(value = "Признак цифрового товара. Укажите `true`, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) ")
  public Boolean getDownloadable() {
    return downloadable;
  }
  public void setDownloadable(Boolean downloadable) {
    this.downloadable = downloadable;
  }

  /**
   * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
   **/
  @ApiModelProperty(value = "Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. ")
  public Boolean getAdult() {
    return adult;
  }
  public void setAdult(Boolean adult) {
    this.adult = adult;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public AgeDTO getAge() {
    return age;
  }
  public void setAge(AgeDTO age) {
    this.age = age;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел. При передаче характеристик используйте `parameterValues`.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. ")
  public List<OfferParamDTO> getParams() {
    return params;
  }
  public void setParams(List<OfferParamDTO> params) {
    this.params = params;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseOfferDTO baseOfferDTO = (BaseOfferDTO) o;
    return (this.offerId == null ? baseOfferDTO.offerId == null : this.offerId.equals(baseOfferDTO.offerId)) &&
        (this.name == null ? baseOfferDTO.name == null : this.name.equals(baseOfferDTO.name)) &&
        (this.marketCategoryId == null ? baseOfferDTO.marketCategoryId == null : this.marketCategoryId.equals(baseOfferDTO.marketCategoryId)) &&
        (this.category == null ? baseOfferDTO.category == null : this.category.equals(baseOfferDTO.category)) &&
        (this.pictures == null ? baseOfferDTO.pictures == null : this.pictures.equals(baseOfferDTO.pictures)) &&
        (this.videos == null ? baseOfferDTO.videos == null : this.videos.equals(baseOfferDTO.videos)) &&
        (this.manuals == null ? baseOfferDTO.manuals == null : this.manuals.equals(baseOfferDTO.manuals)) &&
        (this.vendor == null ? baseOfferDTO.vendor == null : this.vendor.equals(baseOfferDTO.vendor)) &&
        (this.barcodes == null ? baseOfferDTO.barcodes == null : this.barcodes.equals(baseOfferDTO.barcodes)) &&
        (this.description == null ? baseOfferDTO.description == null : this.description.equals(baseOfferDTO.description)) &&
        (this.manufacturerCountries == null ? baseOfferDTO.manufacturerCountries == null : this.manufacturerCountries.equals(baseOfferDTO.manufacturerCountries)) &&
        (this.weightDimensions == null ? baseOfferDTO.weightDimensions == null : this.weightDimensions.equals(baseOfferDTO.weightDimensions)) &&
        (this.vendorCode == null ? baseOfferDTO.vendorCode == null : this.vendorCode.equals(baseOfferDTO.vendorCode)) &&
        (this.tags == null ? baseOfferDTO.tags == null : this.tags.equals(baseOfferDTO.tags)) &&
        (this.shelfLife == null ? baseOfferDTO.shelfLife == null : this.shelfLife.equals(baseOfferDTO.shelfLife)) &&
        (this.lifeTime == null ? baseOfferDTO.lifeTime == null : this.lifeTime.equals(baseOfferDTO.lifeTime)) &&
        (this.guaranteePeriod == null ? baseOfferDTO.guaranteePeriod == null : this.guaranteePeriod.equals(baseOfferDTO.guaranteePeriod)) &&
        (this.customsCommodityCode == null ? baseOfferDTO.customsCommodityCode == null : this.customsCommodityCode.equals(baseOfferDTO.customsCommodityCode)) &&
        (this.certificates == null ? baseOfferDTO.certificates == null : this.certificates.equals(baseOfferDTO.certificates)) &&
        (this.boxCount == null ? baseOfferDTO.boxCount == null : this.boxCount.equals(baseOfferDTO.boxCount)) &&
        (this.condition == null ? baseOfferDTO.condition == null : this.condition.equals(baseOfferDTO.condition)) &&
        (this.type == null ? baseOfferDTO.type == null : this.type.equals(baseOfferDTO.type)) &&
        (this.downloadable == null ? baseOfferDTO.downloadable == null : this.downloadable.equals(baseOfferDTO.downloadable)) &&
        (this.adult == null ? baseOfferDTO.adult == null : this.adult.equals(baseOfferDTO.adult)) &&
        (this.age == null ? baseOfferDTO.age == null : this.age.equals(baseOfferDTO.age)) &&
        (this.params == null ? baseOfferDTO.params == null : this.params.equals(baseOfferDTO.params));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.offerId == null ? 0: this.offerId.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.marketCategoryId == null ? 0: this.marketCategoryId.hashCode());
    result = 31 * result + (this.category == null ? 0: this.category.hashCode());
    result = 31 * result + (this.pictures == null ? 0: this.pictures.hashCode());
    result = 31 * result + (this.videos == null ? 0: this.videos.hashCode());
    result = 31 * result + (this.manuals == null ? 0: this.manuals.hashCode());
    result = 31 * result + (this.vendor == null ? 0: this.vendor.hashCode());
    result = 31 * result + (this.barcodes == null ? 0: this.barcodes.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.manufacturerCountries == null ? 0: this.manufacturerCountries.hashCode());
    result = 31 * result + (this.weightDimensions == null ? 0: this.weightDimensions.hashCode());
    result = 31 * result + (this.vendorCode == null ? 0: this.vendorCode.hashCode());
    result = 31 * result + (this.tags == null ? 0: this.tags.hashCode());
    result = 31 * result + (this.shelfLife == null ? 0: this.shelfLife.hashCode());
    result = 31 * result + (this.lifeTime == null ? 0: this.lifeTime.hashCode());
    result = 31 * result + (this.guaranteePeriod == null ? 0: this.guaranteePeriod.hashCode());
    result = 31 * result + (this.customsCommodityCode == null ? 0: this.customsCommodityCode.hashCode());
    result = 31 * result + (this.certificates == null ? 0: this.certificates.hashCode());
    result = 31 * result + (this.boxCount == null ? 0: this.boxCount.hashCode());
    result = 31 * result + (this.condition == null ? 0: this.condition.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.downloadable == null ? 0: this.downloadable.hashCode());
    result = 31 * result + (this.adult == null ? 0: this.adult.hashCode());
    result = 31 * result + (this.age == null ? 0: this.age.hashCode());
    result = 31 * result + (this.params == null ? 0: this.params.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseOfferDTO {\n");
    
    sb.append("  offerId: ").append(offerId).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  marketCategoryId: ").append(marketCategoryId).append("\n");
    sb.append("  category: ").append(category).append("\n");
    sb.append("  pictures: ").append(pictures).append("\n");
    sb.append("  videos: ").append(videos).append("\n");
    sb.append("  manuals: ").append(manuals).append("\n");
    sb.append("  vendor: ").append(vendor).append("\n");
    sb.append("  barcodes: ").append(barcodes).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  manufacturerCountries: ").append(manufacturerCountries).append("\n");
    sb.append("  weightDimensions: ").append(weightDimensions).append("\n");
    sb.append("  vendorCode: ").append(vendorCode).append("\n");
    sb.append("  tags: ").append(tags).append("\n");
    sb.append("  shelfLife: ").append(shelfLife).append("\n");
    sb.append("  lifeTime: ").append(lifeTime).append("\n");
    sb.append("  guaranteePeriod: ").append(guaranteePeriod).append("\n");
    sb.append("  customsCommodityCode: ").append(customsCommodityCode).append("\n");
    sb.append("  certificates: ").append(certificates).append("\n");
    sb.append("  boxCount: ").append(boxCount).append("\n");
    sb.append("  condition: ").append(condition).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  downloadable: ").append(downloadable).append("\n");
    sb.append("  adult: ").append(adult).append("\n");
    sb.append("  age: ").append(age).append("\n");
    sb.append("  params: ").append(params).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
