/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.*;
import org.openapitools.client.model.TariffParameterDTO;
import org.openapitools.client.model.TariffType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Информация о тарифах, по которым нужно заплатить за услуги Маркета.
 **/
@ApiModel(description = "Информация о тарифах, по которым нужно заплатить за услуги Маркета.")
public class TariffDTO {
  
  @SerializedName("type")
  private TariffType type = null;
  @SerializedName("percent")
  private BigDecimal percent = null;
  @SerializedName("amount")
  private BigDecimal amount = null;
  @SerializedName("parameters")
  private List<TariffParameterDTO> parameters = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public TariffType getType() {
    return type;
  }
  public void setType(TariffType type) {
    this.type = type;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Значение тарифа в процентах. ")
  public BigDecimal getPercent() {
    return percent;
  }
  public void setPercent(BigDecimal percent) {
    this.percent = percent;
  }

  /**
   * Значение тарифа в рублях.
   **/
  @ApiModelProperty(required = true, value = "Значение тарифа в рублях.")
  public BigDecimal getAmount() {
    return amount;
  }
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  /**
   * Параметры расчета тарифа.
   **/
  @ApiModelProperty(required = true, value = "Параметры расчета тарифа.")
  public List<TariffParameterDTO> getParameters() {
    return parameters;
  }
  public void setParameters(List<TariffParameterDTO> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TariffDTO tariffDTO = (TariffDTO) o;
    return (this.type == null ? tariffDTO.type == null : this.type.equals(tariffDTO.type)) &&
        (this.percent == null ? tariffDTO.percent == null : this.percent.equals(tariffDTO.percent)) &&
        (this.amount == null ? tariffDTO.amount == null : this.amount.equals(tariffDTO.amount)) &&
        (this.parameters == null ? tariffDTO.parameters == null : this.parameters.equals(tariffDTO.parameters));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.percent == null ? 0: this.percent.hashCode());
    result = 31 * result + (this.amount == null ? 0: this.amount.hashCode());
    result = 31 * result + (this.parameters == null ? 0: this.parameters.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class TariffDTO {\n");
    
    sb.append("  type: ").append(type).append("\n");
    sb.append("  percent: ").append(percent).append("\n");
    sb.append("  amount: ").append(amount).append("\n");
    sb.append("  parameters: ").append(parameters).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
