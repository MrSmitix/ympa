/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderCourierDTO;
import org.openapitools.client.model.OrderDeliveryAddressDTO;
import org.openapitools.client.model.OrderDeliveryDatesDTO;
import org.openapitools.client.model.OrderDeliveryDispatchType;
import org.openapitools.client.model.OrderDeliveryEacType;
import org.openapitools.client.model.OrderDeliveryPartnerType;
import org.openapitools.client.model.OrderDeliveryType;
import org.openapitools.client.model.OrderLiftType;
import org.openapitools.client.model.OrderShipmentDTO;
import org.openapitools.client.model.OrderTrackDTO;
import org.openapitools.client.model.OrderVatType;
import org.openapitools.client.model.RegionDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Информация о доставке.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrderDeliveryDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private OrderDeliveryType type;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_DELIVERY_PARTNER_TYPE = "deliveryPartnerType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PARTNER_TYPE)
  private OrderDeliveryPartnerType deliveryPartnerType;

  public static final String SERIALIZED_NAME_COURIER = "courier";
  @SerializedName(SERIALIZED_NAME_COURIER)
  private OrderCourierDTO courier;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private OrderDeliveryDatesDTO dates;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionDTO region;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private OrderDeliveryAddressDTO address;

  public static final String SERIALIZED_NAME_VAT = "vat";
  @SerializedName(SERIALIZED_NAME_VAT)
  private OrderVatType vat;

  public static final String SERIALIZED_NAME_DELIVERY_SERVICE_ID = "deliveryServiceId";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SERVICE_ID)
  private Long deliveryServiceId;

  public static final String SERIALIZED_NAME_LIFT_TYPE = "liftType";
  @SerializedName(SERIALIZED_NAME_LIFT_TYPE)
  private OrderLiftType liftType;

  public static final String SERIALIZED_NAME_LIFT_PRICE = "liftPrice";
  @SerializedName(SERIALIZED_NAME_LIFT_PRICE)
  private BigDecimal liftPrice;

  public static final String SERIALIZED_NAME_OUTLET_CODE = "outletCode";
  @SerializedName(SERIALIZED_NAME_OUTLET_CODE)
  private String outletCode;

  public static final String SERIALIZED_NAME_OUTLET_STORAGE_LIMIT_DATE = "outletStorageLimitDate";
  @SerializedName(SERIALIZED_NAME_OUTLET_STORAGE_LIMIT_DATE)
  private String outletStorageLimitDate;

  public static final String SERIALIZED_NAME_DISPATCH_TYPE = "dispatchType";
  @SerializedName(SERIALIZED_NAME_DISPATCH_TYPE)
  private OrderDeliveryDispatchType dispatchType;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<OrderTrackDTO> tracks;

  public static final String SERIALIZED_NAME_SHIPMENTS = "shipments";
  @SerializedName(SERIALIZED_NAME_SHIPMENTS)
  private List<OrderShipmentDTO> shipments;

  public static final String SERIALIZED_NAME_ESTIMATED = "estimated";
  @SerializedName(SERIALIZED_NAME_ESTIMATED)
  private Boolean estimated;

  public static final String SERIALIZED_NAME_EAC_TYPE = "eacType";
  @SerializedName(SERIALIZED_NAME_EAC_TYPE)
  private OrderDeliveryEacType eacType;

  public static final String SERIALIZED_NAME_EAC_CODE = "eacCode";
  @SerializedName(SERIALIZED_NAME_EAC_CODE)
  private String eacCode;

  public OrderDeliveryDTO() {
  }

  public OrderDeliveryDTO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор доставки, присвоенный магазином.  Указывается, только если магазин передал данный идентификатор в ответе на запрос методом [POST cart](../../pushapi/reference/cart.md). 
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OrderDeliveryDTO type(OrderDeliveryType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public OrderDeliveryType getType() {
    return type;
  }

  public void setType(OrderDeliveryType type) {
    this.type = type;
  }


  public OrderDeliveryDTO serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Наименование службы доставки.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  @Deprecated
  public OrderDeliveryDTO price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Стоимость доставки смотрите в параметре &#x60;deliveryTotal&#x60;.  {% endnote %}  Стоимость доставки в валюте заказа. 
   * @return price
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  @Deprecated
  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public OrderDeliveryDTO deliveryPartnerType(OrderDeliveryPartnerType deliveryPartnerType) {
    this.deliveryPartnerType = deliveryPartnerType;
    return this;
  }

  /**
   * Get deliveryPartnerType
   * @return deliveryPartnerType
   */
  @javax.annotation.Nullable
  public OrderDeliveryPartnerType getDeliveryPartnerType() {
    return deliveryPartnerType;
  }

  public void setDeliveryPartnerType(OrderDeliveryPartnerType deliveryPartnerType) {
    this.deliveryPartnerType = deliveryPartnerType;
  }


  public OrderDeliveryDTO courier(OrderCourierDTO courier) {
    this.courier = courier;
    return this;
  }

  /**
   * Get courier
   * @return courier
   */
  @javax.annotation.Nullable
  public OrderCourierDTO getCourier() {
    return courier;
  }

  public void setCourier(OrderCourierDTO courier) {
    this.courier = courier;
  }


  public OrderDeliveryDTO dates(OrderDeliveryDatesDTO dates) {
    this.dates = dates;
    return this;
  }

  /**
   * Get dates
   * @return dates
   */
  @javax.annotation.Nullable
  public OrderDeliveryDatesDTO getDates() {
    return dates;
  }

  public void setDates(OrderDeliveryDatesDTO dates) {
    this.dates = dates;
  }


  public OrderDeliveryDTO region(RegionDTO region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public RegionDTO getRegion() {
    return region;
  }

  public void setRegion(RegionDTO region) {
    this.region = region;
  }


  public OrderDeliveryDTO address(OrderDeliveryAddressDTO address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public OrderDeliveryAddressDTO getAddress() {
    return address;
  }

  public void setAddress(OrderDeliveryAddressDTO address) {
    this.address = address;
  }


  public OrderDeliveryDTO vat(OrderVatType vat) {
    this.vat = vat;
    return this;
  }

  /**
   * Get vat
   * @return vat
   */
  @javax.annotation.Nullable
  public OrderVatType getVat() {
    return vat;
  }

  public void setVat(OrderVatType vat) {
    this.vat = vat;
  }


  public OrderDeliveryDTO deliveryServiceId(Long deliveryServiceId) {
    this.deliveryServiceId = deliveryServiceId;
    return this;
  }

  /**
   * Идентификатор службы доставки.
   * @return deliveryServiceId
   */
  @javax.annotation.Nullable
  public Long getDeliveryServiceId() {
    return deliveryServiceId;
  }

  public void setDeliveryServiceId(Long deliveryServiceId) {
    this.deliveryServiceId = deliveryServiceId;
  }


  public OrderDeliveryDTO liftType(OrderLiftType liftType) {
    this.liftType = liftType;
    return this;
  }

  /**
   * Get liftType
   * @return liftType
   */
  @javax.annotation.Nullable
  public OrderLiftType getLiftType() {
    return liftType;
  }

  public void setLiftType(OrderLiftType liftType) {
    this.liftType = liftType;
  }


  public OrderDeliveryDTO liftPrice(BigDecimal liftPrice) {
    this.liftPrice = liftPrice;
    return this;
  }

  /**
   * Стоимость подъема на этаж.
   * @return liftPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getLiftPrice() {
    return liftPrice;
  }

  public void setLiftPrice(BigDecimal liftPrice) {
    this.liftPrice = liftPrice;
  }


  public OrderDeliveryDTO outletCode(String outletCode) {
    this.outletCode = outletCode;
    return this;
  }

  /**
   * Идентификатор пункта самовывоза, присвоенный магазином.
   * @return outletCode
   */
  @javax.annotation.Nullable
  public String getOutletCode() {
    return outletCode;
  }

  public void setOutletCode(String outletCode) {
    this.outletCode = outletCode;
  }


  public OrderDeliveryDTO outletStorageLimitDate(String outletStorageLimitDate) {
    this.outletStorageLimitDate = outletStorageLimitDate;
    return this;
  }

  /**
   * Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
   * @return outletStorageLimitDate
   */
  @javax.annotation.Nullable
  public String getOutletStorageLimitDate() {
    return outletStorageLimitDate;
  }

  public void setOutletStorageLimitDate(String outletStorageLimitDate) {
    this.outletStorageLimitDate = outletStorageLimitDate;
  }


  public OrderDeliveryDTO dispatchType(OrderDeliveryDispatchType dispatchType) {
    this.dispatchType = dispatchType;
    return this;
  }

  /**
   * Get dispatchType
   * @return dispatchType
   */
  @javax.annotation.Nullable
  public OrderDeliveryDispatchType getDispatchType() {
    return dispatchType;
  }

  public void setDispatchType(OrderDeliveryDispatchType dispatchType) {
    this.dispatchType = dispatchType;
  }


  public OrderDeliveryDTO tracks(List<OrderTrackDTO> tracks) {
    this.tracks = tracks;
    return this;
  }

  public OrderDeliveryDTO addTracksItem(OrderTrackDTO tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * Информация для отслеживания перемещений посылки.
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<OrderTrackDTO> getTracks() {
    return tracks;
  }

  public void setTracks(List<OrderTrackDTO> tracks) {
    this.tracks = tracks;
  }


  public OrderDeliveryDTO shipments(List<OrderShipmentDTO> shipments) {
    this.shipments = shipments;
    return this;
  }

  public OrderDeliveryDTO addShipmentsItem(OrderShipmentDTO shipmentsItem) {
    if (this.shipments == null) {
      this.shipments = new ArrayList<>();
    }
    this.shipments.add(shipmentsItem);
    return this;
  }

  /**
   * Информация о посылках.
   * @return shipments
   */
  @javax.annotation.Nullable
  public List<OrderShipmentDTO> getShipments() {
    return shipments;
  }

  public void setShipments(List<OrderShipmentDTO> shipments) {
    this.shipments = shipments;
  }


  public OrderDeliveryDTO estimated(Boolean estimated) {
    this.estimated = estimated;
    return this;
  }

  /**
   * Приблизительная ли дата доставки.
   * @return estimated
   */
  @javax.annotation.Nullable
  public Boolean getEstimated() {
    return estimated;
  }

  public void setEstimated(Boolean estimated) {
    this.estimated = estimated;
  }


  public OrderDeliveryDTO eacType(OrderDeliveryEacType eacType) {
    this.eacType = eacType;
    return this;
  }

  /**
   * Get eacType
   * @return eacType
   */
  @javax.annotation.Nullable
  public OrderDeliveryEacType getEacType() {
    return eacType;
  }

  public void setEacType(OrderDeliveryEacType eacType) {
    this.eacType = eacType;
  }


  public OrderDeliveryDTO eacCode(String eacCode) {
    this.eacCode = eacCode;
    return this;
  }

  /**
   * Код подтверждения ЭАПП (для типа &#x60;MERCHANT_TO_COURIER&#x60;). 
   * @return eacCode
   */
  @javax.annotation.Nullable
  public String getEacCode() {
    return eacCode;
  }

  public void setEacCode(String eacCode) {
    this.eacCode = eacCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDeliveryDTO orderDeliveryDTO = (OrderDeliveryDTO) o;
    return Objects.equals(this.id, orderDeliveryDTO.id) &&
        Objects.equals(this.type, orderDeliveryDTO.type) &&
        Objects.equals(this.serviceName, orderDeliveryDTO.serviceName) &&
        Objects.equals(this.price, orderDeliveryDTO.price) &&
        Objects.equals(this.deliveryPartnerType, orderDeliveryDTO.deliveryPartnerType) &&
        Objects.equals(this.courier, orderDeliveryDTO.courier) &&
        Objects.equals(this.dates, orderDeliveryDTO.dates) &&
        Objects.equals(this.region, orderDeliveryDTO.region) &&
        Objects.equals(this.address, orderDeliveryDTO.address) &&
        Objects.equals(this.vat, orderDeliveryDTO.vat) &&
        Objects.equals(this.deliveryServiceId, orderDeliveryDTO.deliveryServiceId) &&
        Objects.equals(this.liftType, orderDeliveryDTO.liftType) &&
        Objects.equals(this.liftPrice, orderDeliveryDTO.liftPrice) &&
        Objects.equals(this.outletCode, orderDeliveryDTO.outletCode) &&
        Objects.equals(this.outletStorageLimitDate, orderDeliveryDTO.outletStorageLimitDate) &&
        Objects.equals(this.dispatchType, orderDeliveryDTO.dispatchType) &&
        Objects.equals(this.tracks, orderDeliveryDTO.tracks) &&
        Objects.equals(this.shipments, orderDeliveryDTO.shipments) &&
        Objects.equals(this.estimated, orderDeliveryDTO.estimated) &&
        Objects.equals(this.eacType, orderDeliveryDTO.eacType) &&
        Objects.equals(this.eacCode, orderDeliveryDTO.eacCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, serviceName, price, deliveryPartnerType, courier, dates, region, address, vat, deliveryServiceId, liftType, liftPrice, outletCode, outletStorageLimitDate, dispatchType, tracks, shipments, estimated, eacType, eacCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDeliveryDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    deliveryPartnerType: ").append(toIndentedString(deliveryPartnerType)).append("\n");
    sb.append("    courier: ").append(toIndentedString(courier)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
    sb.append("    deliveryServiceId: ").append(toIndentedString(deliveryServiceId)).append("\n");
    sb.append("    liftType: ").append(toIndentedString(liftType)).append("\n");
    sb.append("    liftPrice: ").append(toIndentedString(liftPrice)).append("\n");
    sb.append("    outletCode: ").append(toIndentedString(outletCode)).append("\n");
    sb.append("    outletStorageLimitDate: ").append(toIndentedString(outletStorageLimitDate)).append("\n");
    sb.append("    dispatchType: ").append(toIndentedString(dispatchType)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    shipments: ").append(toIndentedString(shipments)).append("\n");
    sb.append("    estimated: ").append(toIndentedString(estimated)).append("\n");
    sb.append("    eacType: ").append(toIndentedString(eacType)).append("\n");
    sb.append("    eacCode: ").append(toIndentedString(eacCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("serviceName");
    openapiFields.add("price");
    openapiFields.add("deliveryPartnerType");
    openapiFields.add("courier");
    openapiFields.add("dates");
    openapiFields.add("region");
    openapiFields.add("address");
    openapiFields.add("vat");
    openapiFields.add("deliveryServiceId");
    openapiFields.add("liftType");
    openapiFields.add("liftPrice");
    openapiFields.add("outletCode");
    openapiFields.add("outletStorageLimitDate");
    openapiFields.add("dispatchType");
    openapiFields.add("tracks");
    openapiFields.add("shipments");
    openapiFields.add("estimated");
    openapiFields.add("eacType");
    openapiFields.add("eacCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderDeliveryDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderDeliveryDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDeliveryDTO is not found in the empty JSON string", OrderDeliveryDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderDeliveryDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDeliveryDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        OrderDeliveryType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      // validate the optional field `deliveryPartnerType`
      if (jsonObj.get("deliveryPartnerType") != null && !jsonObj.get("deliveryPartnerType").isJsonNull()) {
        OrderDeliveryPartnerType.validateJsonElement(jsonObj.get("deliveryPartnerType"));
      }
      // validate the optional field `courier`
      if (jsonObj.get("courier") != null && !jsonObj.get("courier").isJsonNull()) {
        OrderCourierDTO.validateJsonElement(jsonObj.get("courier"));
      }
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        OrderDeliveryDatesDTO.validateJsonElement(jsonObj.get("dates"));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        RegionDTO.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        OrderDeliveryAddressDTO.validateJsonElement(jsonObj.get("address"));
      }
      // validate the optional field `vat`
      if (jsonObj.get("vat") != null && !jsonObj.get("vat").isJsonNull()) {
        OrderVatType.validateJsonElement(jsonObj.get("vat"));
      }
      // validate the optional field `liftType`
      if (jsonObj.get("liftType") != null && !jsonObj.get("liftType").isJsonNull()) {
        OrderLiftType.validateJsonElement(jsonObj.get("liftType"));
      }
      if ((jsonObj.get("outletCode") != null && !jsonObj.get("outletCode").isJsonNull()) && !jsonObj.get("outletCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outletCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outletCode").toString()));
      }
      if ((jsonObj.get("outletStorageLimitDate") != null && !jsonObj.get("outletStorageLimitDate").isJsonNull()) && !jsonObj.get("outletStorageLimitDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outletStorageLimitDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outletStorageLimitDate").toString()));
      }
      // validate the optional field `dispatchType`
      if (jsonObj.get("dispatchType") != null && !jsonObj.get("dispatchType").isJsonNull()) {
        OrderDeliveryDispatchType.validateJsonElement(jsonObj.get("dispatchType"));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            OrderTrackDTO.validateJsonElement(jsonArraytracks.get(i));
          };
        }
      }
      if (jsonObj.get("shipments") != null && !jsonObj.get("shipments").isJsonNull()) {
        JsonArray jsonArrayshipments = jsonObj.getAsJsonArray("shipments");
        if (jsonArrayshipments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shipments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shipments` to be an array in the JSON string but got `%s`", jsonObj.get("shipments").toString()));
          }

          // validate the optional field `shipments` (array)
          for (int i = 0; i < jsonArrayshipments.size(); i++) {
            OrderShipmentDTO.validateJsonElement(jsonArrayshipments.get(i));
          };
        }
      }
      // validate the optional field `eacType`
      if (jsonObj.get("eacType") != null && !jsonObj.get("eacType").isJsonNull()) {
        OrderDeliveryEacType.validateJsonElement(jsonObj.get("eacType"));
      }
      if ((jsonObj.get("eacCode") != null && !jsonObj.get("eacCode").isJsonNull()) && !jsonObj.get("eacCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eacCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eacCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDeliveryDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDeliveryDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDeliveryDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDeliveryDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDeliveryDTO>() {
           @Override
           public void write(JsonWriter out, OrderDeliveryDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDeliveryDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderDeliveryDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderDeliveryDTO
   * @throws IOException if the JSON string is invalid with respect to OrderDeliveryDTO
   */
  public static OrderDeliveryDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDeliveryDTO.class);
  }

  /**
   * Convert an instance of OrderDeliveryDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

