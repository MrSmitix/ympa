/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Адрес доставки.
 **/
@ApiModel(description = "Адрес доставки.")
public class PickupAddressDTO {
  
  @SerializedName("country")
  private String country = null;
  @SerializedName("city")
  private String city = null;
  @SerializedName("street")
  private String street = null;
  @SerializedName("house")
  private String house = null;
  @SerializedName("postcode")
  private String postcode = null;

  /**
   * Страна.
   **/
  @ApiModelProperty(value = "Страна.")
  public String getCountry() {
    return country;
  }
  public void setCountry(String country) {
    this.country = country;
  }

  /**
   * Город.
   **/
  @ApiModelProperty(value = "Город.")
  public String getCity() {
    return city;
  }
  public void setCity(String city) {
    this.city = city;
  }

  /**
   * Улица.
   **/
  @ApiModelProperty(value = "Улица.")
  public String getStreet() {
    return street;
  }
  public void setStreet(String street) {
    this.street = street;
  }

  /**
   * Номер дома.
   **/
  @ApiModelProperty(value = "Номер дома.")
  public String getHouse() {
    return house;
  }
  public void setHouse(String house) {
    this.house = house;
  }

  /**
   * Почтовый индекс.
   **/
  @ApiModelProperty(value = "Почтовый индекс.")
  public String getPostcode() {
    return postcode;
  }
  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickupAddressDTO pickupAddressDTO = (PickupAddressDTO) o;
    return (this.country == null ? pickupAddressDTO.country == null : this.country.equals(pickupAddressDTO.country)) &&
        (this.city == null ? pickupAddressDTO.city == null : this.city.equals(pickupAddressDTO.city)) &&
        (this.street == null ? pickupAddressDTO.street == null : this.street.equals(pickupAddressDTO.street)) &&
        (this.house == null ? pickupAddressDTO.house == null : this.house.equals(pickupAddressDTO.house)) &&
        (this.postcode == null ? pickupAddressDTO.postcode == null : this.postcode.equals(pickupAddressDTO.postcode));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.country == null ? 0: this.country.hashCode());
    result = 31 * result + (this.city == null ? 0: this.city.hashCode());
    result = 31 * result + (this.street == null ? 0: this.street.hashCode());
    result = 31 * result + (this.house == null ? 0: this.house.hashCode());
    result = 31 * result + (this.postcode == null ? 0: this.postcode.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickupAddressDTO {\n");
    
    sb.append("  country: ").append(country).append("\n");
    sb.append("  city: ").append(city).append("\n");
    sb.append("  street: ").append(street).append("\n");
    sb.append("  house: ").append(house).append("\n");
    sb.append("  postcode: ").append(postcode).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
