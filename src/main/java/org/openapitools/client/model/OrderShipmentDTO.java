/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderParcelBoxDTO;
import org.openapitools.client.model.OrderTrackDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Список посылок.  В параметре может указываться несколько посылок. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrderShipmentDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_SHIPMENT_DATE = "shipmentDate";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_DATE)
  private String shipmentDate;

  public static final String SERIALIZED_NAME_SHIPMENT_TIME = "shipmentTime";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TIME)
  private String shipmentTime;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<OrderTrackDTO> tracks;

  public static final String SERIALIZED_NAME_BOXES = "boxes";
  @SerializedName(SERIALIZED_NAME_BOXES)
  private List<OrderParcelBoxDTO> boxes;

  public OrderShipmentDTO() {
  }

  public OrderShipmentDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор посылки, присвоенный Маркетом.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public OrderShipmentDTO shipmentDate(String shipmentDate) {
    this.shipmentDate = shipmentDate;
    return this;
  }

  /**
   * Формат даты: &#x60;ДД-ММ-ГГГГ&#x60;. 
   * @return shipmentDate
   */
  @javax.annotation.Nullable
  public String getShipmentDate() {
    return shipmentDate;
  }

  public void setShipmentDate(String shipmentDate) {
    this.shipmentDate = shipmentDate;
  }


  public OrderShipmentDTO shipmentTime(String shipmentTime) {
    this.shipmentTime = shipmentTime;
    return this;
  }

  /**
   * **Только для модели Экспресс**  Время, к которому магазин должен упаковать заказ и перевести его в статус &#x60;READY_TO_SHIP&#x60;. После смены статуса за заказом приедет курьер.  Поле может появиться не сразу. Запрашивайте информацию о заказе в течении 5–10 минут, пока оно не вернется.  Формат времени: 24-часовой, &#x60;ЧЧ:ММ&#x60;.  Если заказ сделан организацией, параметр не возвращается до согласования даты доставки. 
   * @return shipmentTime
   */
  @javax.annotation.Nullable
  public String getShipmentTime() {
    return shipmentTime;
  }

  public void setShipmentTime(String shipmentTime) {
    this.shipmentTime = shipmentTime;
  }


  public OrderShipmentDTO tracks(List<OrderTrackDTO> tracks) {
    this.tracks = tracks;
    return this;
  }

  public OrderShipmentDTO addTracksItem(OrderTrackDTO tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * **Только для модели DBS**  Информация для отслеживания перемещений посылки. 
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<OrderTrackDTO> getTracks() {
    return tracks;
  }

  public void setTracks(List<OrderTrackDTO> tracks) {
    this.tracks = tracks;
  }


  public OrderShipmentDTO boxes(List<OrderParcelBoxDTO> boxes) {
    this.boxes = boxes;
    return this;
  }

  public OrderShipmentDTO addBoxesItem(OrderParcelBoxDTO boxesItem) {
    if (this.boxes == null) {
      this.boxes = new ArrayList<>();
    }
    this.boxes.add(boxesItem);
    return this;
  }

  /**
   * Список грузовых мест.
   * @return boxes
   */
  @javax.annotation.Nullable
  public List<OrderParcelBoxDTO> getBoxes() {
    return boxes;
  }

  public void setBoxes(List<OrderParcelBoxDTO> boxes) {
    this.boxes = boxes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderShipmentDTO orderShipmentDTO = (OrderShipmentDTO) o;
    return Objects.equals(this.id, orderShipmentDTO.id) &&
        Objects.equals(this.shipmentDate, orderShipmentDTO.shipmentDate) &&
        Objects.equals(this.shipmentTime, orderShipmentDTO.shipmentTime) &&
        Objects.equals(this.tracks, orderShipmentDTO.tracks) &&
        Objects.equals(this.boxes, orderShipmentDTO.boxes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, shipmentDate, shipmentTime, tracks, boxes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderShipmentDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shipmentDate: ").append(toIndentedString(shipmentDate)).append("\n");
    sb.append("    shipmentTime: ").append(toIndentedString(shipmentTime)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    boxes: ").append(toIndentedString(boxes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("shipmentDate");
    openapiFields.add("shipmentTime");
    openapiFields.add("tracks");
    openapiFields.add("boxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderShipmentDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderShipmentDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderShipmentDTO is not found in the empty JSON string", OrderShipmentDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderShipmentDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderShipmentDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("shipmentDate") != null && !jsonObj.get("shipmentDate").isJsonNull()) && !jsonObj.get("shipmentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentDate").toString()));
      }
      if ((jsonObj.get("shipmentTime") != null && !jsonObj.get("shipmentTime").isJsonNull()) && !jsonObj.get("shipmentTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shipmentTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shipmentTime").toString()));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            OrderTrackDTO.validateJsonElement(jsonArraytracks.get(i));
          };
        }
      }
      if (jsonObj.get("boxes") != null && !jsonObj.get("boxes").isJsonNull()) {
        JsonArray jsonArrayboxes = jsonObj.getAsJsonArray("boxes");
        if (jsonArrayboxes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("boxes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `boxes` to be an array in the JSON string but got `%s`", jsonObj.get("boxes").toString()));
          }

          // validate the optional field `boxes` (array)
          for (int i = 0; i < jsonArrayboxes.size(); i++) {
            OrderParcelBoxDTO.validateJsonElement(jsonArrayboxes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderShipmentDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderShipmentDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderShipmentDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderShipmentDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderShipmentDTO>() {
           @Override
           public void write(JsonWriter out, OrderShipmentDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderShipmentDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderShipmentDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderShipmentDTO
   * @throws IOException if the JSON string is invalid with respect to OrderShipmentDTO
   */
  public static OrderShipmentDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderShipmentDTO.class);
  }

  /**
   * Convert an instance of OrderShipmentDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

