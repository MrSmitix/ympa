/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrdersStatsDetailsDTO;
import org.openapitools.client.model.OrdersStatsPriceDTO;
import org.openapitools.client.model.OrdersStatsWarehouseDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Список товаров в заказе после возможных изменений.  В ходе обработки заказа Маркет может удалить из него единицы товаров — при проблемах на складе или по инициативе пользователя.  * Если из заказа удалены все единицы товара, его не будет в списке &#x60;items&#x60; — только в списке &#x60;initialItems&#x60;.  * Если в заказе осталась хотя бы одна единица товара, он будет и в списке &#x60;items&#x60; (с уменьшенным количеством единиц &#x60;count&#x60;), и в списке &#x60;initialItems&#x60; (с первоначальным количеством единиц &#x60;initialCount&#x60;). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrdersStatsItemDTO {
  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_MARKET_SKU = "marketSku";
  @SerializedName(SERIALIZED_NAME_MARKET_SKU)
  private Long marketSku;

  public static final String SERIALIZED_NAME_SHOP_SKU = "shopSku";
  @SerializedName(SERIALIZED_NAME_SHOP_SKU)
  private String shopSku;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_PRICES = "prices";
  @SerializedName(SERIALIZED_NAME_PRICES)
  private List<OrdersStatsPriceDTO> prices;

  public static final String SERIALIZED_NAME_WAREHOUSE = "warehouse";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE)
  private OrdersStatsWarehouseDTO warehouse;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<OrdersStatsDetailsDTO> details;

  public static final String SERIALIZED_NAME_CIS_LIST = "cisList";
  @SerializedName(SERIALIZED_NAME_CIS_LIST)
  private List<String> cisList;

  public static final String SERIALIZED_NAME_INITIAL_COUNT = "initialCount";
  @SerializedName(SERIALIZED_NAME_INITIAL_COUNT)
  private Integer initialCount;

  public static final String SERIALIZED_NAME_BID_FEE = "bidFee";
  @SerializedName(SERIALIZED_NAME_BID_FEE)
  private Integer bidFee;

  public static final String SERIALIZED_NAME_COFINANCE_THRESHOLD = "cofinanceThreshold";
  @SerializedName(SERIALIZED_NAME_COFINANCE_THRESHOLD)
  private BigDecimal cofinanceThreshold;

  public static final String SERIALIZED_NAME_COFINANCE_VALUE = "cofinanceValue";
  @SerializedName(SERIALIZED_NAME_COFINANCE_VALUE)
  private BigDecimal cofinanceValue;

  public OrdersStatsItemDTO() {
  }

  public OrdersStatsItemDTO offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * Название товара.
   * @return offerName
   */
  @javax.annotation.Nullable
  public String getOfferName() {
    return offerName;
  }

  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }


  public OrdersStatsItemDTO marketSku(Long marketSku) {
    this.marketSku = marketSku;
    return this;
  }

  /**
   * SKU на Маркете.
   * @return marketSku
   */
  @javax.annotation.Nullable
  public Long getMarketSku() {
    return marketSku;
  }

  public void setMarketSku(Long marketSku) {
    this.marketSku = marketSku;
  }


  public OrdersStatsItemDTO shopSku(String shopSku) {
    this.shopSku = shopSku;
    return this;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   * @return shopSku
   */
  @javax.annotation.Nullable
  public String getShopSku() {
    return shopSku;
  }

  public void setShopSku(String shopSku) {
    this.shopSku = shopSku;
  }


  public OrdersStatsItemDTO count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Количество единиц товара с учетом удаленных единиц.  Если из заказа удалены все единицы товара, он попадет только в список &#x60;initialItems&#x60;. 
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public OrdersStatsItemDTO prices(List<OrdersStatsPriceDTO> prices) {
    this.prices = prices;
    return this;
  }

  public OrdersStatsItemDTO addPricesItem(OrdersStatsPriceDTO pricesItem) {
    if (this.prices == null) {
      this.prices = new ArrayList<>();
    }
    this.prices.add(pricesItem);
    return this;
  }

  /**
   * Цена или скидки на товар.
   * @return prices
   */
  @javax.annotation.Nullable
  public List<OrdersStatsPriceDTO> getPrices() {
    return prices;
  }

  public void setPrices(List<OrdersStatsPriceDTO> prices) {
    this.prices = prices;
  }


  public OrdersStatsItemDTO warehouse(OrdersStatsWarehouseDTO warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  /**
   * Get warehouse
   * @return warehouse
   */
  @javax.annotation.Nullable
  public OrdersStatsWarehouseDTO getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(OrdersStatsWarehouseDTO warehouse) {
    this.warehouse = warehouse;
  }


  public OrdersStatsItemDTO details(List<OrdersStatsDetailsDTO> details) {
    this.details = details;
    return this;
  }

  public OrdersStatsItemDTO addDetailsItem(OrdersStatsDetailsDTO detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Информация об удалении товара из заказа.
   * @return details
   */
  @javax.annotation.Nullable
  public List<OrdersStatsDetailsDTO> getDetails() {
    return details;
  }

  public void setDetails(List<OrdersStatsDetailsDTO> details) {
    this.details = details;
  }


  public OrdersStatsItemDTO cisList(List<String> cisList) {
    this.cisList = cisList;
    return this;
  }

  public OrdersStatsItemDTO addCisListItem(String cisListItem) {
    if (this.cisList == null) {
      this.cisList = new ArrayList<>();
    }
    this.cisList.add(cisListItem);
    return this;
  }

  /**
   * Список кодов идентификации товара [в системе «Честный ЗНАК»](https://честныйзнак.рф/).
   * @return cisList
   */
  @javax.annotation.Nullable
  public List<String> getCisList() {
    return cisList;
  }

  public void setCisList(List<String> cisList) {
    this.cisList = cisList;
  }


  public OrdersStatsItemDTO initialCount(Integer initialCount) {
    this.initialCount = initialCount;
    return this;
  }

  /**
   * Первоначальное количество единиц товара.
   * @return initialCount
   */
  @javax.annotation.Nullable
  public Integer getInitialCount() {
    return initialCount;
  }

  public void setInitialCount(Integer initialCount) {
    this.initialCount = initialCount;
  }


  public OrdersStatsItemDTO bidFee(Integer bidFee) {
    this.bidFee = bidFee;
    return this;
  }

  /**
   * Списанная ставка ближайшего конкурента.  Указывается в процентах от стоимости товара и умножается на 100. Например, ставка 5% обозначается как 500. 
   * minimum: 0
   * maximum: 10000
   * @return bidFee
   */
  @javax.annotation.Nullable
  public Integer getBidFee() {
    return bidFee;
  }

  public void setBidFee(Integer bidFee) {
    this.bidFee = bidFee;
  }


  public OrdersStatsItemDTO cofinanceThreshold(BigDecimal cofinanceThreshold) {
    this.cofinanceThreshold = cofinanceThreshold;
    return this;
  }

  /**
   * Порог для скидок с Маркетом на момент оформления заказа. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указан в рублях. Точность — два знака после запятой. 
   * @return cofinanceThreshold
   */
  @javax.annotation.Nullable
  public BigDecimal getCofinanceThreshold() {
    return cofinanceThreshold;
  }

  public void setCofinanceThreshold(BigDecimal cofinanceThreshold) {
    this.cofinanceThreshold = cofinanceThreshold;
  }


  public OrdersStatsItemDTO cofinanceValue(BigDecimal cofinanceValue) {
    this.cofinanceValue = cofinanceValue;
    return this;
  }

  /**
   * Скидка с Маркетом. [Что это такое?](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  Указана в рублях. Точность — два знака после запятой. 
   * @return cofinanceValue
   */
  @javax.annotation.Nullable
  public BigDecimal getCofinanceValue() {
    return cofinanceValue;
  }

  public void setCofinanceValue(BigDecimal cofinanceValue) {
    this.cofinanceValue = cofinanceValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersStatsItemDTO ordersStatsItemDTO = (OrdersStatsItemDTO) o;
    return Objects.equals(this.offerName, ordersStatsItemDTO.offerName) &&
        Objects.equals(this.marketSku, ordersStatsItemDTO.marketSku) &&
        Objects.equals(this.shopSku, ordersStatsItemDTO.shopSku) &&
        Objects.equals(this.count, ordersStatsItemDTO.count) &&
        Objects.equals(this.prices, ordersStatsItemDTO.prices) &&
        Objects.equals(this.warehouse, ordersStatsItemDTO.warehouse) &&
        Objects.equals(this.details, ordersStatsItemDTO.details) &&
        Objects.equals(this.cisList, ordersStatsItemDTO.cisList) &&
        Objects.equals(this.initialCount, ordersStatsItemDTO.initialCount) &&
        Objects.equals(this.bidFee, ordersStatsItemDTO.bidFee) &&
        Objects.equals(this.cofinanceThreshold, ordersStatsItemDTO.cofinanceThreshold) &&
        Objects.equals(this.cofinanceValue, ordersStatsItemDTO.cofinanceValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(offerName, marketSku, shopSku, count, prices, warehouse, details, cisList, initialCount, bidFee, cofinanceThreshold, cofinanceValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersStatsItemDTO {\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    marketSku: ").append(toIndentedString(marketSku)).append("\n");
    sb.append("    shopSku: ").append(toIndentedString(shopSku)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    cisList: ").append(toIndentedString(cisList)).append("\n");
    sb.append("    initialCount: ").append(toIndentedString(initialCount)).append("\n");
    sb.append("    bidFee: ").append(toIndentedString(bidFee)).append("\n");
    sb.append("    cofinanceThreshold: ").append(toIndentedString(cofinanceThreshold)).append("\n");
    sb.append("    cofinanceValue: ").append(toIndentedString(cofinanceValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offerName");
    openapiFields.add("marketSku");
    openapiFields.add("shopSku");
    openapiFields.add("count");
    openapiFields.add("prices");
    openapiFields.add("warehouse");
    openapiFields.add("details");
    openapiFields.add("cisList");
    openapiFields.add("initialCount");
    openapiFields.add("bidFee");
    openapiFields.add("cofinanceThreshold");
    openapiFields.add("cofinanceValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrdersStatsItemDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrdersStatsItemDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrdersStatsItemDTO is not found in the empty JSON string", OrdersStatsItemDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrdersStatsItemDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrdersStatsItemDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("offerName") != null && !jsonObj.get("offerName").isJsonNull()) && !jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      if ((jsonObj.get("shopSku") != null && !jsonObj.get("shopSku").isJsonNull()) && !jsonObj.get("shopSku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopSku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopSku").toString()));
      }
      if (jsonObj.get("prices") != null && !jsonObj.get("prices").isJsonNull()) {
        JsonArray jsonArrayprices = jsonObj.getAsJsonArray("prices");
        if (jsonArrayprices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("prices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `prices` to be an array in the JSON string but got `%s`", jsonObj.get("prices").toString()));
          }

          // validate the optional field `prices` (array)
          for (int i = 0; i < jsonArrayprices.size(); i++) {
            OrdersStatsPriceDTO.validateJsonElement(jsonArrayprices.get(i));
          };
        }
      }
      // validate the optional field `warehouse`
      if (jsonObj.get("warehouse") != null && !jsonObj.get("warehouse").isJsonNull()) {
        OrdersStatsWarehouseDTO.validateJsonElement(jsonObj.get("warehouse"));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            OrdersStatsDetailsDTO.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cisList") != null && !jsonObj.get("cisList").isJsonNull() && !jsonObj.get("cisList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cisList` to be an array in the JSON string but got `%s`", jsonObj.get("cisList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrdersStatsItemDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrdersStatsItemDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrdersStatsItemDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrdersStatsItemDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrdersStatsItemDTO>() {
           @Override
           public void write(JsonWriter out, OrdersStatsItemDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrdersStatsItemDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrdersStatsItemDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrdersStatsItemDTO
   * @throws IOException if the JSON string is invalid with respect to OrdersStatsItemDTO
   */
  public static OrdersStatsItemDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrdersStatsItemDTO.class);
  }

  /**
   * Convert an instance of OrdersStatsItemDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

