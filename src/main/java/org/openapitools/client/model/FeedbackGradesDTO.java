/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.*;
import org.openapitools.client.model.FeedbackFactorDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 **/
@ApiModel(description = "Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.")
public class FeedbackGradesDTO {
  
  @SerializedName("average")
  private BigDecimal average = null;
  @SerializedName("agreeCount")
  private Long agreeCount = null;
  @SerializedName("rejectCount")
  private Long rejectCount = null;
  @SerializedName("factors")
  private List<FeedbackFactorDTO> factors = null;

  /**
   * Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
   **/
  @ApiModelProperty(value = "Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).")
  public BigDecimal getAverage() {
    return average;
  }
  public void setAverage(BigDecimal average) {
    this.average = average;
  }

  /**
   * Количество пользователей, считающих отзыв полезным.
   **/
  @ApiModelProperty(value = "Количество пользователей, считающих отзыв полезным.")
  public Long getAgreeCount() {
    return agreeCount;
  }
  public void setAgreeCount(Long agreeCount) {
    this.agreeCount = agreeCount;
  }

  /**
   * Количество пользователей, считающих отзыв бесполезным.
   **/
  @ApiModelProperty(value = "Количество пользователей, считающих отзыв бесполезным.")
  public Long getRejectCount() {
    return rejectCount;
  }
  public void setRejectCount(Long rejectCount) {
    this.rejectCount = rejectCount;
  }

  /**
   * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
   **/
  @ApiModelProperty(required = true, value = "Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. ")
  public List<FeedbackFactorDTO> getFactors() {
    return factors;
  }
  public void setFactors(List<FeedbackFactorDTO> factors) {
    this.factors = factors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackGradesDTO feedbackGradesDTO = (FeedbackGradesDTO) o;
    return (this.average == null ? feedbackGradesDTO.average == null : this.average.equals(feedbackGradesDTO.average)) &&
        (this.agreeCount == null ? feedbackGradesDTO.agreeCount == null : this.agreeCount.equals(feedbackGradesDTO.agreeCount)) &&
        (this.rejectCount == null ? feedbackGradesDTO.rejectCount == null : this.rejectCount.equals(feedbackGradesDTO.rejectCount)) &&
        (this.factors == null ? feedbackGradesDTO.factors == null : this.factors.equals(feedbackGradesDTO.factors));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.average == null ? 0: this.average.hashCode());
    result = 31 * result + (this.agreeCount == null ? 0: this.agreeCount.hashCode());
    result = 31 * result + (this.rejectCount == null ? 0: this.rejectCount.hashCode());
    result = 31 * result + (this.factors == null ? 0: this.factors.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackGradesDTO {\n");
    
    sb.append("  average: ").append(average).append("\n");
    sb.append("  agreeCount: ").append(agreeCount).append("\n");
    sb.append("  rejectCount: ").append(rejectCount).append("\n");
    sb.append("  factors: ").append(factors).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
