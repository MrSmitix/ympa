/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeedbackFactorDTO;



/**
  * Информация об оценках, которые поставил автор отзыва магазину, и об оценках полезности отзыва от других пользователей Маркета.
 **/

public class FeedbackGradesDTO  {
  
 /**
   * Общая оценка, указанная в отзыве: от `1` («Ужасный магазин») до `5` («Отличный магазин»).
  **/
  private BigDecimal average;

 /**
   * Количество пользователей, считающих отзыв полезным.
  **/
  private Long agreeCount;

 /**
   * Количество пользователей, считающих отзыв бесполезным.
  **/
  private Long rejectCount;

 /**
   * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
  **/
  private List<FeedbackFactorDTO> factors = new ArrayList<>();

 /**
   * Общая оценка, указанная в отзыве: от &#x60;1&#x60; («Ужасный магазин») до &#x60;5&#x60; («Отличный магазин»).
   * @return average
  **/
  public BigDecimal getAverage() {
    return average;
  }

  /**
    * Set average
  **/
  public void setAverage(BigDecimal average) {
    this.average = average;
  }

  public FeedbackGradesDTO average(BigDecimal average) {
    this.average = average;
    return this;
  }

 /**
   * Количество пользователей, считающих отзыв полезным.
   * @return agreeCount
  **/
  public Long getAgreeCount() {
    return agreeCount;
  }

  /**
    * Set agreeCount
  **/
  public void setAgreeCount(Long agreeCount) {
    this.agreeCount = agreeCount;
  }

  public FeedbackGradesDTO agreeCount(Long agreeCount) {
    this.agreeCount = agreeCount;
    return this;
  }

 /**
   * Количество пользователей, считающих отзыв бесполезным.
   * @return rejectCount
  **/
  public Long getRejectCount() {
    return rejectCount;
  }

  /**
    * Set rejectCount
  **/
  public void setRejectCount(Long rejectCount) {
    this.rejectCount = rejectCount;
  }

  public FeedbackGradesDTO rejectCount(Long rejectCount) {
    this.rejectCount = rejectCount;
    return this;
  }

 /**
   * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр &#x60;delivery&#x60;) указал автор. 
   * @return factors
  **/
  public List<FeedbackFactorDTO> getFactors() {
    return factors;
  }

  /**
    * Set factors
  **/
  public void setFactors(List<FeedbackFactorDTO> factors) {
    this.factors = factors;
  }

  public FeedbackGradesDTO factors(List<FeedbackFactorDTO> factors) {
    this.factors = factors;
    return this;
  }

  public FeedbackGradesDTO addFactorsItem(FeedbackFactorDTO factorsItem) {
    this.factors.add(factorsItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackGradesDTO {\n");
    
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    agreeCount: ").append(toIndentedString(agreeCount)).append("\n");
    sb.append("    rejectCount: ").append(toIndentedString(rejectCount)).append("\n");
    sb.append("    factors: ").append(toIndentedString(factors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

