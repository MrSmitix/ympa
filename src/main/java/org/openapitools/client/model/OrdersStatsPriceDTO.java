/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import org.openapitools.client.model.OrdersStatsPriceType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Цена или скидки на товар.
 **/
@ApiModel(description = "Цена или скидки на товар.")
public class OrdersStatsPriceDTO {
  
  @SerializedName("type")
  private OrdersStatsPriceType type = null;
  @SerializedName("costPerItem")
  private BigDecimal costPerItem = null;
  @SerializedName("total")
  private BigDecimal total = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public OrdersStatsPriceType getType() {
    return type;
  }
  public void setType(OrdersStatsPriceType type) {
    this.type = type;
  }

  /**
   * Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой. 
   **/
  @ApiModelProperty(value = "Цена или скидка на единицу товара в заказе. Указана в рублях. Точность — два знака после запятой. ")
  public BigDecimal getCostPerItem() {
    return costPerItem;
  }
  public void setCostPerItem(BigDecimal costPerItem) {
    this.costPerItem = costPerItem;
  }

  /**
   * Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой. 
   **/
  @ApiModelProperty(value = "Суммарная цена или скидка на все единицы товара в заказе. Указана в рублях. Точность — два знака после запятой. ")
  public BigDecimal getTotal() {
    return total;
  }
  public void setTotal(BigDecimal total) {
    this.total = total;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersStatsPriceDTO ordersStatsPriceDTO = (OrdersStatsPriceDTO) o;
    return (this.type == null ? ordersStatsPriceDTO.type == null : this.type.equals(ordersStatsPriceDTO.type)) &&
        (this.costPerItem == null ? ordersStatsPriceDTO.costPerItem == null : this.costPerItem.equals(ordersStatsPriceDTO.costPerItem)) &&
        (this.total == null ? ordersStatsPriceDTO.total == null : this.total.equals(ordersStatsPriceDTO.total));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.costPerItem == null ? 0: this.costPerItem.hashCode());
    result = 31 * result + (this.total == null ? 0: this.total.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersStatsPriceDTO {\n");
    
    sb.append("  type: ").append(type).append("\n");
    sb.append("  costPerItem: ").append(costPerItem).append("\n");
    sb.append("  total: ").append(total).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
