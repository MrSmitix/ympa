/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import java.util.Date;
import org.openapitools.client.model.FeedbackAuthorDTO;
import org.openapitools.client.model.FeedbackCommentDTO;
import org.openapitools.client.model.FeedbackGradesDTO;
import org.openapitools.client.model.FeedbackOrderDTO;
import org.openapitools.client.model.FeedbackShopDTO;
import org.openapitools.client.model.FeedbackStateType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 **/
@ApiModel(description = "Отзыв пользователя Яндекс Маркета об указанном магазине.")
public class FeedbackDTO {
  
  @SerializedName("id")
  private Long id = null;
  @SerializedName("createdAt")
  private Date createdAt = null;
  @SerializedName("text")
  private String text = null;
  @SerializedName("state")
  private FeedbackStateType state = null;
  @SerializedName("author")
  private FeedbackAuthorDTO author = null;
  @SerializedName("pro")
  private String pro = null;
  @SerializedName("contra")
  private String contra = null;
  @SerializedName("comments")
  private List<FeedbackCommentDTO> comments = null;
  @SerializedName("shop")
  private FeedbackShopDTO shop = null;
  @SerializedName("resolved")
  private Boolean resolved = null;
  @SerializedName("verified")
  private Boolean verified = null;
  @SerializedName("recommend")
  private Boolean recommend = null;
  @SerializedName("grades")
  private FeedbackGradesDTO grades = null;
  @SerializedName("order")
  private FeedbackOrderDTO order = null;

  /**
   * Идентификатор отзыва.
   **/
  @ApiModelProperty(value = "Идентификатор отзыва.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
   **/
  @ApiModelProperty(value = "Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. ")
  public Date getCreatedAt() {
    return createdAt;
  }
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * Комментарий автора отзыва.
   **/
  @ApiModelProperty(value = "Комментарий автора отзыва.")
  public String getText() {
    return text;
  }
  public void setText(String text) {
    this.text = text;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedbackStateType getState() {
    return state;
  }
  public void setState(FeedbackStateType state) {
    this.state = state;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedbackAuthorDTO getAuthor() {
    return author;
  }
  public void setAuthor(FeedbackAuthorDTO author) {
    this.author = author;
  }

  /**
   * Достоинства магазина, описанные в отзыве.
   **/
  @ApiModelProperty(value = "Достоинства магазина, описанные в отзыве.")
  public String getPro() {
    return pro;
  }
  public void setPro(String pro) {
    this.pro = pro;
  }

  /**
   * Недостатки магазина, описанные в отзыве.
   **/
  @ApiModelProperty(value = "Недостатки магазина, описанные в отзыве.")
  public String getContra() {
    return contra;
  }
  public void setContra(String contra) {
    this.contra = contra;
  }

  /**
   * Переписка автора отзыва с магазином.
   **/
  @ApiModelProperty(required = true, value = "Переписка автора отзыва с магазином.")
  public List<FeedbackCommentDTO> getComments() {
    return comments;
  }
  public void setComments(List<FeedbackCommentDTO> comments) {
    this.comments = comments;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedbackShopDTO getShop() {
    return shop;
  }
  public void setShop(FeedbackShopDTO shop) {
    this.shop = shop;
  }

  /**
   * Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
   **/
  @ApiModelProperty(value = "Решена ли проблема автора отзыва:  * `true` — да. * `false` — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. ")
  public Boolean getResolved() {
    return resolved;
  }
  public void setResolved(Boolean resolved) {
    this.resolved = resolved;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * `true` — да. * `false` — нет. ")
  public Boolean getVerified() {
    return verified;
  }
  public void setVerified(Boolean verified) {
    this.verified = verified;
  }

  /**
   * Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. 
   **/
  @ApiModelProperty(value = "Купил бы автор отзыва в магазине снова:  * `true` — да. * `false` — нет. ")
  public Boolean getRecommend() {
    return recommend;
  }
  public void setRecommend(Boolean recommend) {
    this.recommend = recommend;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedbackGradesDTO getGrades() {
    return grades;
  }
  public void setGrades(FeedbackGradesDTO grades) {
    this.grades = grades;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedbackOrderDTO getOrder() {
    return order;
  }
  public void setOrder(FeedbackOrderDTO order) {
    this.order = order;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackDTO feedbackDTO = (FeedbackDTO) o;
    return (this.id == null ? feedbackDTO.id == null : this.id.equals(feedbackDTO.id)) &&
        (this.createdAt == null ? feedbackDTO.createdAt == null : this.createdAt.equals(feedbackDTO.createdAt)) &&
        (this.text == null ? feedbackDTO.text == null : this.text.equals(feedbackDTO.text)) &&
        (this.state == null ? feedbackDTO.state == null : this.state.equals(feedbackDTO.state)) &&
        (this.author == null ? feedbackDTO.author == null : this.author.equals(feedbackDTO.author)) &&
        (this.pro == null ? feedbackDTO.pro == null : this.pro.equals(feedbackDTO.pro)) &&
        (this.contra == null ? feedbackDTO.contra == null : this.contra.equals(feedbackDTO.contra)) &&
        (this.comments == null ? feedbackDTO.comments == null : this.comments.equals(feedbackDTO.comments)) &&
        (this.shop == null ? feedbackDTO.shop == null : this.shop.equals(feedbackDTO.shop)) &&
        (this.resolved == null ? feedbackDTO.resolved == null : this.resolved.equals(feedbackDTO.resolved)) &&
        (this.verified == null ? feedbackDTO.verified == null : this.verified.equals(feedbackDTO.verified)) &&
        (this.recommend == null ? feedbackDTO.recommend == null : this.recommend.equals(feedbackDTO.recommend)) &&
        (this.grades == null ? feedbackDTO.grades == null : this.grades.equals(feedbackDTO.grades)) &&
        (this.order == null ? feedbackDTO.order == null : this.order.equals(feedbackDTO.order));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.createdAt == null ? 0: this.createdAt.hashCode());
    result = 31 * result + (this.text == null ? 0: this.text.hashCode());
    result = 31 * result + (this.state == null ? 0: this.state.hashCode());
    result = 31 * result + (this.author == null ? 0: this.author.hashCode());
    result = 31 * result + (this.pro == null ? 0: this.pro.hashCode());
    result = 31 * result + (this.contra == null ? 0: this.contra.hashCode());
    result = 31 * result + (this.comments == null ? 0: this.comments.hashCode());
    result = 31 * result + (this.shop == null ? 0: this.shop.hashCode());
    result = 31 * result + (this.resolved == null ? 0: this.resolved.hashCode());
    result = 31 * result + (this.verified == null ? 0: this.verified.hashCode());
    result = 31 * result + (this.recommend == null ? 0: this.recommend.hashCode());
    result = 31 * result + (this.grades == null ? 0: this.grades.hashCode());
    result = 31 * result + (this.order == null ? 0: this.order.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackDTO {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  createdAt: ").append(createdAt).append("\n");
    sb.append("  text: ").append(text).append("\n");
    sb.append("  state: ").append(state).append("\n");
    sb.append("  author: ").append(author).append("\n");
    sb.append("  pro: ").append(pro).append("\n");
    sb.append("  contra: ").append(contra).append("\n");
    sb.append("  comments: ").append(comments).append("\n");
    sb.append("  shop: ").append(shop).append("\n");
    sb.append("  resolved: ").append(resolved).append("\n");
    sb.append("  verified: ").append(verified).append("\n");
    sb.append("  recommend: ").append(recommend).append("\n");
    sb.append("  grades: ").append(grades).append("\n");
    sb.append("  order: ").append(order).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
