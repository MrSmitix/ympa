/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeedbackAuthorDTO;
import org.openapitools.client.model.FeedbackCommentDTO;
import org.openapitools.client.model.FeedbackGradesDTO;
import org.openapitools.client.model.FeedbackOrderDTO;
import org.openapitools.client.model.FeedbackShopDTO;
import org.openapitools.client.model.FeedbackStateType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Отзыв пользователя Яндекс Маркета об указанном магазине.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class FeedbackDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private FeedbackStateType state;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private FeedbackAuthorDTO author;

  public static final String SERIALIZED_NAME_PRO = "pro";
  @SerializedName(SERIALIZED_NAME_PRO)
  private String pro;

  public static final String SERIALIZED_NAME_CONTRA = "contra";
  @SerializedName(SERIALIZED_NAME_CONTRA)
  private String contra;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<FeedbackCommentDTO> comments = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOP = "shop";
  @SerializedName(SERIALIZED_NAME_SHOP)
  private FeedbackShopDTO shop;

  public static final String SERIALIZED_NAME_RESOLVED = "resolved";
  @SerializedName(SERIALIZED_NAME_RESOLVED)
  private Boolean resolved;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public static final String SERIALIZED_NAME_RECOMMEND = "recommend";
  @SerializedName(SERIALIZED_NAME_RECOMMEND)
  private Boolean recommend;

  public static final String SERIALIZED_NAME_GRADES = "grades";
  @SerializedName(SERIALIZED_NAME_GRADES)
  private FeedbackGradesDTO grades;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private FeedbackOrderDTO order;

  public FeedbackDTO() {
  }

  public FeedbackDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор отзыва.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public FeedbackDTO createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Дата и время создания отзыва.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public FeedbackDTO text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Комментарий автора отзыва.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public FeedbackDTO state(FeedbackStateType state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public FeedbackStateType getState() {
    return state;
  }

  public void setState(FeedbackStateType state) {
    this.state = state;
  }


  public FeedbackDTO author(FeedbackAuthorDTO author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public FeedbackAuthorDTO getAuthor() {
    return author;
  }

  public void setAuthor(FeedbackAuthorDTO author) {
    this.author = author;
  }


  public FeedbackDTO pro(String pro) {
    this.pro = pro;
    return this;
  }

  /**
   * Достоинства магазина, описанные в отзыве.
   * @return pro
   */
  @javax.annotation.Nullable
  public String getPro() {
    return pro;
  }

  public void setPro(String pro) {
    this.pro = pro;
  }


  public FeedbackDTO contra(String contra) {
    this.contra = contra;
    return this;
  }

  /**
   * Недостатки магазина, описанные в отзыве.
   * @return contra
   */
  @javax.annotation.Nullable
  public String getContra() {
    return contra;
  }

  public void setContra(String contra) {
    this.contra = contra;
  }


  public FeedbackDTO comments(List<FeedbackCommentDTO> comments) {
    this.comments = comments;
    return this;
  }

  public FeedbackDTO addCommentsItem(FeedbackCommentDTO commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Переписка автора отзыва с магазином.
   * @return comments
   */
  @javax.annotation.Nonnull
  public List<FeedbackCommentDTO> getComments() {
    return comments;
  }

  public void setComments(List<FeedbackCommentDTO> comments) {
    this.comments = comments;
  }


  public FeedbackDTO shop(FeedbackShopDTO shop) {
    this.shop = shop;
    return this;
  }

  /**
   * Get shop
   * @return shop
   */
  @javax.annotation.Nullable
  public FeedbackShopDTO getShop() {
    return shop;
  }

  public void setShop(FeedbackShopDTO shop) {
    this.shop = shop;
  }


  public FeedbackDTO resolved(Boolean resolved) {
    this.resolved = resolved;
    return this;
  }

  /**
   * Решена ли проблема автора отзыва:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет.  Если проблема решена, около отзыва на странице магазина появляется соответствующая надпись. 
   * @return resolved
   */
  @javax.annotation.Nullable
  public Boolean getResolved() {
    return resolved;
  }

  public void setResolved(Boolean resolved) {
    this.resolved = resolved;
  }


  public FeedbackDTO verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Является ли отзыв рекомендованным:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
   * @return verified
   */
  @javax.annotation.Nullable
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }


  public FeedbackDTO recommend(Boolean recommend) {
    this.recommend = recommend;
    return this;
  }

  /**
   * Купил бы автор отзыва в магазине снова:  * &#x60;true&#x60; — да. * &#x60;false&#x60; — нет. 
   * @return recommend
   */
  @javax.annotation.Nullable
  public Boolean getRecommend() {
    return recommend;
  }

  public void setRecommend(Boolean recommend) {
    this.recommend = recommend;
  }


  public FeedbackDTO grades(FeedbackGradesDTO grades) {
    this.grades = grades;
    return this;
  }

  /**
   * Get grades
   * @return grades
   */
  @javax.annotation.Nullable
  public FeedbackGradesDTO getGrades() {
    return grades;
  }

  public void setGrades(FeedbackGradesDTO grades) {
    this.grades = grades;
  }


  public FeedbackDTO order(FeedbackOrderDTO order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nullable
  public FeedbackOrderDTO getOrder() {
    return order;
  }

  public void setOrder(FeedbackOrderDTO order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedbackDTO feedbackDTO = (FeedbackDTO) o;
    return Objects.equals(this.id, feedbackDTO.id) &&
        Objects.equals(this.createdAt, feedbackDTO.createdAt) &&
        Objects.equals(this.text, feedbackDTO.text) &&
        Objects.equals(this.state, feedbackDTO.state) &&
        Objects.equals(this.author, feedbackDTO.author) &&
        Objects.equals(this.pro, feedbackDTO.pro) &&
        Objects.equals(this.contra, feedbackDTO.contra) &&
        Objects.equals(this.comments, feedbackDTO.comments) &&
        Objects.equals(this.shop, feedbackDTO.shop) &&
        Objects.equals(this.resolved, feedbackDTO.resolved) &&
        Objects.equals(this.verified, feedbackDTO.verified) &&
        Objects.equals(this.recommend, feedbackDTO.recommend) &&
        Objects.equals(this.grades, feedbackDTO.grades) &&
        Objects.equals(this.order, feedbackDTO.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, text, state, author, pro, contra, comments, shop, resolved, verified, recommend, grades, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    pro: ").append(toIndentedString(pro)).append("\n");
    sb.append("    contra: ").append(toIndentedString(contra)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    shop: ").append(toIndentedString(shop)).append("\n");
    sb.append("    resolved: ").append(toIndentedString(resolved)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    recommend: ").append(toIndentedString(recommend)).append("\n");
    sb.append("    grades: ").append(toIndentedString(grades)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("createdAt");
    openapiFields.add("text");
    openapiFields.add("state");
    openapiFields.add("author");
    openapiFields.add("pro");
    openapiFields.add("contra");
    openapiFields.add("comments");
    openapiFields.add("shop");
    openapiFields.add("resolved");
    openapiFields.add("verified");
    openapiFields.add("recommend");
    openapiFields.add("grades");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeedbackDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedbackDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedbackDTO is not found in the empty JSON string", FeedbackDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedbackDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedbackDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeedbackDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        FeedbackStateType.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        FeedbackAuthorDTO.validateJsonElement(jsonObj.get("author"));
      }
      if ((jsonObj.get("pro") != null && !jsonObj.get("pro").isJsonNull()) && !jsonObj.get("pro").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pro` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pro").toString()));
      }
      if ((jsonObj.get("contra") != null && !jsonObj.get("contra").isJsonNull()) && !jsonObj.get("contra").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contra` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contra").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("comments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }

      JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
      // validate the required field `comments` (array)
      for (int i = 0; i < jsonArraycomments.size(); i++) {
        FeedbackCommentDTO.validateJsonElement(jsonArraycomments.get(i));
      };
      // validate the optional field `shop`
      if (jsonObj.get("shop") != null && !jsonObj.get("shop").isJsonNull()) {
        FeedbackShopDTO.validateJsonElement(jsonObj.get("shop"));
      }
      // validate the optional field `grades`
      if (jsonObj.get("grades") != null && !jsonObj.get("grades").isJsonNull()) {
        FeedbackGradesDTO.validateJsonElement(jsonObj.get("grades"));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        FeedbackOrderDTO.validateJsonElement(jsonObj.get("order"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedbackDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedbackDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedbackDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedbackDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedbackDTO>() {
           @Override
           public void write(JsonWriter out, FeedbackDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedbackDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeedbackDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeedbackDTO
   * @throws IOException if the JSON string is invalid with respect to FeedbackDTO
   */
  public static FeedbackDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedbackDTO.class);
  }

  /**
   * Convert an instance of FeedbackDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

