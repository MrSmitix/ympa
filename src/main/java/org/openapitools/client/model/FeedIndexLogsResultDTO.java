/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.FeedIndexLogsFeedDTO;
import org.openapitools.client.model.FeedIndexLogsRecordDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Результат выполнения запроса отчета по индексации прайс-листа.
 **/
@ApiModel(description = "Результат выполнения запроса отчета по индексации прайс-листа.")
public class FeedIndexLogsResultDTO {
  
  @SerializedName("feed")
  private FeedIndexLogsFeedDTO feed = null;
  @SerializedName("indexLogRecords")
  private List<FeedIndexLogsRecordDTO> indexLogRecords = null;
  @SerializedName("total")
  private Long total = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public FeedIndexLogsFeedDTO getFeed() {
    return feed;
  }
  public void setFeed(FeedIndexLogsFeedDTO feed) {
    this.feed = feed;
  }

  /**
   * Список отчетов по индексации прайс-листа.
   **/
  @ApiModelProperty(required = true, value = "Список отчетов по индексации прайс-листа.")
  public List<FeedIndexLogsRecordDTO> getIndexLogRecords() {
    return indexLogRecords;
  }
  public void setIndexLogRecords(List<FeedIndexLogsRecordDTO> indexLogRecords) {
    this.indexLogRecords = indexLogRecords;
  }

  /**
   * Количество отчетов на всех страницах выходных данных.
   **/
  @ApiModelProperty(value = "Количество отчетов на всех страницах выходных данных.")
  public Long getTotal() {
    return total;
  }
  public void setTotal(Long total) {
    this.total = total;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedIndexLogsResultDTO feedIndexLogsResultDTO = (FeedIndexLogsResultDTO) o;
    return (this.feed == null ? feedIndexLogsResultDTO.feed == null : this.feed.equals(feedIndexLogsResultDTO.feed)) &&
        (this.indexLogRecords == null ? feedIndexLogsResultDTO.indexLogRecords == null : this.indexLogRecords.equals(feedIndexLogsResultDTO.indexLogRecords)) &&
        (this.total == null ? feedIndexLogsResultDTO.total == null : this.total.equals(feedIndexLogsResultDTO.total));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.feed == null ? 0: this.feed.hashCode());
    result = 31 * result + (this.indexLogRecords == null ? 0: this.indexLogRecords.hashCode());
    result = 31 * result + (this.total == null ? 0: this.total.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedIndexLogsResultDTO {\n");
    
    sb.append("  feed: ").append(feed).append("\n");
    sb.append("  indexLogRecords: ").append(indexLogRecords).append("\n");
    sb.append("  total: ").append(total).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
