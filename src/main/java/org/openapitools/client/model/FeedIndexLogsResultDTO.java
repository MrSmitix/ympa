/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeedIndexLogsFeedDTO;
import org.openapitools.client.model.FeedIndexLogsRecordDTO;



/**
  * Результат выполнения запроса отчета по индексации прайс-листа.
 **/

public class FeedIndexLogsResultDTO  {
  
  private FeedIndexLogsFeedDTO feed;

 /**
   * Список отчетов по индексации прайс-листа.
  **/
  private List<FeedIndexLogsRecordDTO> indexLogRecords = new ArrayList<>();

 /**
   * Количество отчетов на всех страницах выходных данных.
  **/
  private Long total;

 /**
   * Get feed
   * @return feed
  **/
  public FeedIndexLogsFeedDTO getFeed() {
    return feed;
  }

  /**
    * Set feed
  **/
  public void setFeed(FeedIndexLogsFeedDTO feed) {
    this.feed = feed;
  }

  public FeedIndexLogsResultDTO feed(FeedIndexLogsFeedDTO feed) {
    this.feed = feed;
    return this;
  }

 /**
   * Список отчетов по индексации прайс-листа.
   * @return indexLogRecords
  **/
  public List<FeedIndexLogsRecordDTO> getIndexLogRecords() {
    return indexLogRecords;
  }

  /**
    * Set indexLogRecords
  **/
  public void setIndexLogRecords(List<FeedIndexLogsRecordDTO> indexLogRecords) {
    this.indexLogRecords = indexLogRecords;
  }

  public FeedIndexLogsResultDTO indexLogRecords(List<FeedIndexLogsRecordDTO> indexLogRecords) {
    this.indexLogRecords = indexLogRecords;
    return this;
  }

  public FeedIndexLogsResultDTO addIndexLogRecordsItem(FeedIndexLogsRecordDTO indexLogRecordsItem) {
    this.indexLogRecords.add(indexLogRecordsItem);
    return this;
  }

 /**
   * Количество отчетов на всех страницах выходных данных.
   * @return total
  **/
  public Long getTotal() {
    return total;
  }

  /**
    * Set total
  **/
  public void setTotal(Long total) {
    this.total = total;
  }

  public FeedIndexLogsResultDTO total(Long total) {
    this.total = total;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedIndexLogsResultDTO {\n");
    
    sb.append("    feed: ").append(toIndentedString(feed)).append("\n");
    sb.append("    indexLogRecords: ").append(toIndentedString(indexLogRecords)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

