/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.DayOfWeekType;
import org.openapitools.client.model.OfferAvailabilityStatusType;
import org.openapitools.client.model.OfferProcessingStateDTO;
import org.openapitools.client.model.OfferWeightDimensionsDTO;
import org.openapitools.client.model.TimePeriodDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Информация о товарах в каталоге.
 **/
@ApiModel(description = "Информация о товарах в каталоге.")
public class UpdateMappingsOfferDTO {
  
  @SerializedName("name")
  private String name = null;
  @SerializedName("shopSku")
  private String shopSku = null;
  @SerializedName("category")
  private String category = null;
  @SerializedName("vendor")
  private String vendor = null;
  @SerializedName("vendorCode")
  private String vendorCode = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("id")
  private String id = null;
  @SerializedName("feedId")
  private Long feedId = null;
  @SerializedName("barcodes")
  private List<String> barcodes = null;
  @SerializedName("urls")
  private List<String> urls = null;
  @SerializedName("pictures")
  private List<String> pictures = null;
  @SerializedName("manufacturer")
  private String manufacturer = null;
  @SerializedName("manufacturerCountries")
  private List<String> manufacturerCountries = null;
  @SerializedName("minShipment")
  private Integer minShipment = null;
  @SerializedName("transportUnitSize")
  private Integer transportUnitSize = null;
  @SerializedName("quantumOfSupply")
  private Integer quantumOfSupply = null;
  @SerializedName("deliveryDurationDays")
  private Integer deliveryDurationDays = null;
  @SerializedName("boxCount")
  private Integer boxCount = null;
  @SerializedName("customsCommodityCodes")
  private List<String> customsCommodityCodes = null;
  @SerializedName("weightDimensions")
  private OfferWeightDimensionsDTO weightDimensions = null;
  @SerializedName("supplyScheduleDays")
  private List<DayOfWeekType> supplyScheduleDays = null;
  @SerializedName("shelfLifeDays")
  private Integer shelfLifeDays = null;
  @SerializedName("lifeTimeDays")
  private Integer lifeTimeDays = null;
  @SerializedName("guaranteePeriodDays")
  private Integer guaranteePeriodDays = null;
  @SerializedName("processingState")
  private OfferProcessingStateDTO processingState = null;
  @SerializedName("availability")
  private OfferAvailabilityStatusType availability = null;
  @SerializedName("shelfLife")
  private TimePeriodDTO shelfLife = null;
  @SerializedName("lifeTime")
  private TimePeriodDTO lifeTime = null;
  @SerializedName("guaranteePeriod")
  private TimePeriodDTO guaranteePeriod = null;
  @SerializedName("certificate")
  private String certificate = null;

  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   **/
  @ApiModelProperty(value = "Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) ")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   **/
  @ApiModelProperty(value = "Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
  public String getShopSku() {
    return shopSku;
  }
  public void setShopSku(String shopSku) {
    this.shopSku = shopSku;
  }

  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. 
   **/
  @ApiModelProperty(value = "Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре `marketCategoryId`. ")
  public String getCategory() {
    return category;
  }
  public void setCategory(String category) {
    this.category = category;
  }

  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   **/
  @ApiModelProperty(value = "Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.")
  public String getVendor() {
    return vendor;
  }
  public void setVendor(String vendor) {
    this.vendor = vendor;
  }

  /**
   * Артикул товара от производителя.
   **/
  @ApiModelProperty(value = "Артикул товара от производителя.")
  public String getVendorCode() {
    return vendorCode;
  }
  public void setVendorCode(String vendorCode) {
    this.vendorCode = vendorCode;
  }

  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   **/
  @ApiModelProperty(value = "Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\<h>, \\<h1>, \\<h2> и так далее — для заголовков; * \\<br> и \\<p> — для переноса строки; * \\<ol> — для нумерованного списка; * \\<ul> — для маркированного списка; * \\<li> — для создания элементов списка (должен находиться внутри \\<ol> или \\<ul>); * \\<div> — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) ")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   **/
  @ApiModelProperty(value = "Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) ")
  public String getId() {
    return id;
  }
  public void setId(String id) {
    this.id = id;
  }

  /**
   * Идентификатор фида.
   **/
  @ApiModelProperty(value = "Идентификатор фида.")
  public Long getFeedId() {
    return feedId;
  }
  public void setFeedId(Long feedId) {
    this.feedId = feedId;
  }

  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   **/
  @ApiModelProperty(value = "Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  ")
  public List<String> getBarcodes() {
    return barcodes;
  }
  public void setBarcodes(List<String> barcodes) {
    this.barcodes = barcodes;
  }

  /**
   * URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. 
   **/
  @ApiModelProperty(value = "URL фотографии товара или страницы с описанием на вашем сайте.  Переданные данные не будут отображаться на витрине, но они помогут специалистам Маркета найти карточку для вашего товара.  Должен содержать один вложенный параметр url. ")
  public List<String> getUrls() {
    return urls;
  }
  public void setUrls(List<String> urls) {
    this.urls = urls;
  }

  /**
   * Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. 
   **/
  @ApiModelProperty(value = "Ссылки (URL) изображений товара в хорошем качестве.  Можно указать до 30 ссылок. При этом изображение по первой ссылке будет основным. Оно используется в качестве изображения товара в поиске Маркета и на карточке товара. Другие изображения товара доступны в режиме просмотра увеличенных изображений.  Обязательный параметр.  Должен содержать хотя бы один вложенный параметр `picture`. ")
  public List<String> getPictures() {
    return pictures;
  }
  public void setPictures(List<String> pictures) {
    this.pictures = pictures;
  }

  /**
   * Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. 
   **/
  @ApiModelProperty(value = "Изготовитель товара: компания, которая произвела товар, ее адрес и регистрационный номер (если есть).  Необязательный параметр. ")
  public String getManufacturer() {
    return manufacturer;
  }
  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }

  /**
   * Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. 
   **/
  @ApiModelProperty(value = "Список стран, в которых произведен товар.  Обязательный параметр.  Должен содержать хотя бы одну, но не больше 5 стран. ")
  public List<String> getManufacturerCountries() {
    return manufacturerCountries;
  }
  public void setManufacturerCountries(List<String> manufacturerCountries) {
    this.manufacturerCountries = manufacturerCountries;
  }

  /**
   * Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. 
   **/
  @ApiModelProperty(value = "Минимальное количество единиц товара, которое вы поставляете на склад.  Например, если вы поставляете детское питание партиями минимум по 10 коробок, а в каждой коробке по 6 баночек, укажите значение 60. ")
  public Integer getMinShipment() {
    return minShipment;
  }
  public void setMinShipment(Integer minShipment) {
    this.minShipment = minShipment;
  }

  /**
   * Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. 
   **/
  @ApiModelProperty(value = "Количество единиц товара в одной упаковке, которую вы поставляете на склад.  Например, если вы поставляете детское питание коробками по 6 баночек, укажите значение 6. ")
  public Integer getTransportUnitSize() {
    return transportUnitSize;
  }
  public void setTransportUnitSize(Integer transportUnitSize) {
    this.transportUnitSize = transportUnitSize;
  }

  /**
   * Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. 
   **/
  @ApiModelProperty(value = "Добавочная партия: по сколько единиц товара можно добавлять к минимальному количеству minShipment.  Например, если вы поставляете детское питание партиями минимум по 10 коробок и хотите добавлять к минимальной партии по 2 коробки, а в каждой коробке по 6 баночек, укажите значение 12. ")
  public Integer getQuantumOfSupply() {
    return quantumOfSupply;
  }
  public void setQuantumOfSupply(Integer quantumOfSupply) {
    this.quantumOfSupply = quantumOfSupply;
  }

  /**
   * Срок, за который продавец поставляет товары на склад, в днях.
   **/
  @ApiModelProperty(value = "Срок, за который продавец поставляет товары на склад, в днях.")
  public Integer getDeliveryDurationDays() {
    return deliveryDurationDays;
  }
  public void setDeliveryDurationDays(Integer deliveryDurationDays) {
    this.deliveryDurationDays = deliveryDurationDays;
  }

  /**
   * Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. 
   **/
  @ApiModelProperty(value = "Сколько мест (если больше одного) занимает товар.  Параметр указывается, только если товар занимает больше одного места (например, кондиционер занимает два места: внешний и внутренний блоки в двух коробках). Если товар занимает одно место, не указывайте этот параметр. ")
  public Integer getBoxCount() {
    return boxCount;
  }
  public void setBoxCount(Integer boxCount) {
    this.boxCount = boxCount;
  }

  /**
   * Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. 
   **/
  @ApiModelProperty(value = "Список кодов товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД).  Обязательный параметр, если товар подлежит особому учету (например, в системе «Меркурий» как продукция животного происхождения или в системе «Честный ЗНАК»).  Может содержать только один вложенный код ТН ВЭД. ")
  public List<String> getCustomsCommodityCodes() {
    return customsCommodityCodes;
  }
  public void setCustomsCommodityCodes(List<String> customsCommodityCodes) {
    this.customsCommodityCodes = customsCommodityCodes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OfferWeightDimensionsDTO getWeightDimensions() {
    return weightDimensions;
  }
  public void setWeightDimensions(OfferWeightDimensionsDTO weightDimensions) {
    this.weightDimensions = weightDimensions;
  }

  /**
   * Дни недели, в которые продавец поставляет товары на склад.
   **/
  @ApiModelProperty(value = "Дни недели, в которые продавец поставляет товары на склад.")
  public List<DayOfWeekType> getSupplyScheduleDays() {
    return supplyScheduleDays;
  }
  public void setSupplyScheduleDays(List<DayOfWeekType> supplyScheduleDays) {
    this.supplyScheduleDays = supplyScheduleDays;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `shelfLife`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок годности: через сколько дней товар станет непригоден для использования. ")
  public Integer getShelfLifeDays() {
    return shelfLifeDays;
  }
  public void setShelfLifeDays(Integer shelfLifeDays) {
    this.shelfLifeDays = shelfLifeDays;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `lifeTime`. Совместное использование обоих параметров приведет к ошибке.  {% endnote %}  Срок службы: сколько дней товар будет исправно выполнять свою функцию, а изготовитель — нести ответственность за его существенные недостатки. ")
  public Integer getLifeTimeDays() {
    return lifeTimeDays;
  }
  public void setLifeTimeDays(Integer lifeTimeDays) {
    this.lifeTimeDays = lifeTimeDays;
  }

  /**
   * Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. 
   **/
  @ApiModelProperty(value = "Гарантийный срок товара: сколько дней возможно обслуживание и ремонт товара или возврат денег, а изготовитель или продавец будет нести ответственность за недостатки товара. ")
  public Integer getGuaranteePeriodDays() {
    return guaranteePeriodDays;
  }
  public void setGuaranteePeriodDays(Integer guaranteePeriodDays) {
    this.guaranteePeriodDays = guaranteePeriodDays;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OfferProcessingStateDTO getProcessingState() {
    return processingState;
  }
  public void setProcessingState(OfferProcessingStateDTO processingState) {
    this.processingState = processingState;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OfferAvailabilityStatusType getAvailability() {
    return availability;
  }
  public void setAvailability(OfferAvailabilityStatusType availability) {
    this.availability = availability;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimePeriodDTO getShelfLife() {
    return shelfLife;
  }
  public void setShelfLife(TimePeriodDTO shelfLife) {
    this.shelfLife = shelfLife;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimePeriodDTO getLifeTime() {
    return lifeTime;
  }
  public void setLifeTime(TimePeriodDTO lifeTime) {
    this.lifeTime = lifeTime;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public TimePeriodDTO getGuaranteePeriod() {
    return guaranteePeriod;
  }
  public void setGuaranteePeriod(TimePeriodDTO guaranteePeriod) {
    this.guaranteePeriod = guaranteePeriod;
  }

  /**
   * Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) 
   **/
  @ApiModelProperty(value = "Номер документа на товар.  Перед указанием номера документ нужно загрузить в кабинете продавца на Маркете. [Инструкция](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html) ")
  public String getCertificate() {
    return certificate;
  }
  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMappingsOfferDTO updateMappingsOfferDTO = (UpdateMappingsOfferDTO) o;
    return (this.name == null ? updateMappingsOfferDTO.name == null : this.name.equals(updateMappingsOfferDTO.name)) &&
        (this.shopSku == null ? updateMappingsOfferDTO.shopSku == null : this.shopSku.equals(updateMappingsOfferDTO.shopSku)) &&
        (this.category == null ? updateMappingsOfferDTO.category == null : this.category.equals(updateMappingsOfferDTO.category)) &&
        (this.vendor == null ? updateMappingsOfferDTO.vendor == null : this.vendor.equals(updateMappingsOfferDTO.vendor)) &&
        (this.vendorCode == null ? updateMappingsOfferDTO.vendorCode == null : this.vendorCode.equals(updateMappingsOfferDTO.vendorCode)) &&
        (this.description == null ? updateMappingsOfferDTO.description == null : this.description.equals(updateMappingsOfferDTO.description)) &&
        (this.id == null ? updateMappingsOfferDTO.id == null : this.id.equals(updateMappingsOfferDTO.id)) &&
        (this.feedId == null ? updateMappingsOfferDTO.feedId == null : this.feedId.equals(updateMappingsOfferDTO.feedId)) &&
        (this.barcodes == null ? updateMappingsOfferDTO.barcodes == null : this.barcodes.equals(updateMappingsOfferDTO.barcodes)) &&
        (this.urls == null ? updateMappingsOfferDTO.urls == null : this.urls.equals(updateMappingsOfferDTO.urls)) &&
        (this.pictures == null ? updateMappingsOfferDTO.pictures == null : this.pictures.equals(updateMappingsOfferDTO.pictures)) &&
        (this.manufacturer == null ? updateMappingsOfferDTO.manufacturer == null : this.manufacturer.equals(updateMappingsOfferDTO.manufacturer)) &&
        (this.manufacturerCountries == null ? updateMappingsOfferDTO.manufacturerCountries == null : this.manufacturerCountries.equals(updateMappingsOfferDTO.manufacturerCountries)) &&
        (this.minShipment == null ? updateMappingsOfferDTO.minShipment == null : this.minShipment.equals(updateMappingsOfferDTO.minShipment)) &&
        (this.transportUnitSize == null ? updateMappingsOfferDTO.transportUnitSize == null : this.transportUnitSize.equals(updateMappingsOfferDTO.transportUnitSize)) &&
        (this.quantumOfSupply == null ? updateMappingsOfferDTO.quantumOfSupply == null : this.quantumOfSupply.equals(updateMappingsOfferDTO.quantumOfSupply)) &&
        (this.deliveryDurationDays == null ? updateMappingsOfferDTO.deliveryDurationDays == null : this.deliveryDurationDays.equals(updateMappingsOfferDTO.deliveryDurationDays)) &&
        (this.boxCount == null ? updateMappingsOfferDTO.boxCount == null : this.boxCount.equals(updateMappingsOfferDTO.boxCount)) &&
        (this.customsCommodityCodes == null ? updateMappingsOfferDTO.customsCommodityCodes == null : this.customsCommodityCodes.equals(updateMappingsOfferDTO.customsCommodityCodes)) &&
        (this.weightDimensions == null ? updateMappingsOfferDTO.weightDimensions == null : this.weightDimensions.equals(updateMappingsOfferDTO.weightDimensions)) &&
        (this.supplyScheduleDays == null ? updateMappingsOfferDTO.supplyScheduleDays == null : this.supplyScheduleDays.equals(updateMappingsOfferDTO.supplyScheduleDays)) &&
        (this.shelfLifeDays == null ? updateMappingsOfferDTO.shelfLifeDays == null : this.shelfLifeDays.equals(updateMappingsOfferDTO.shelfLifeDays)) &&
        (this.lifeTimeDays == null ? updateMappingsOfferDTO.lifeTimeDays == null : this.lifeTimeDays.equals(updateMappingsOfferDTO.lifeTimeDays)) &&
        (this.guaranteePeriodDays == null ? updateMappingsOfferDTO.guaranteePeriodDays == null : this.guaranteePeriodDays.equals(updateMappingsOfferDTO.guaranteePeriodDays)) &&
        (this.processingState == null ? updateMappingsOfferDTO.processingState == null : this.processingState.equals(updateMappingsOfferDTO.processingState)) &&
        (this.availability == null ? updateMappingsOfferDTO.availability == null : this.availability.equals(updateMappingsOfferDTO.availability)) &&
        (this.shelfLife == null ? updateMappingsOfferDTO.shelfLife == null : this.shelfLife.equals(updateMappingsOfferDTO.shelfLife)) &&
        (this.lifeTime == null ? updateMappingsOfferDTO.lifeTime == null : this.lifeTime.equals(updateMappingsOfferDTO.lifeTime)) &&
        (this.guaranteePeriod == null ? updateMappingsOfferDTO.guaranteePeriod == null : this.guaranteePeriod.equals(updateMappingsOfferDTO.guaranteePeriod)) &&
        (this.certificate == null ? updateMappingsOfferDTO.certificate == null : this.certificate.equals(updateMappingsOfferDTO.certificate));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.shopSku == null ? 0: this.shopSku.hashCode());
    result = 31 * result + (this.category == null ? 0: this.category.hashCode());
    result = 31 * result + (this.vendor == null ? 0: this.vendor.hashCode());
    result = 31 * result + (this.vendorCode == null ? 0: this.vendorCode.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.feedId == null ? 0: this.feedId.hashCode());
    result = 31 * result + (this.barcodes == null ? 0: this.barcodes.hashCode());
    result = 31 * result + (this.urls == null ? 0: this.urls.hashCode());
    result = 31 * result + (this.pictures == null ? 0: this.pictures.hashCode());
    result = 31 * result + (this.manufacturer == null ? 0: this.manufacturer.hashCode());
    result = 31 * result + (this.manufacturerCountries == null ? 0: this.manufacturerCountries.hashCode());
    result = 31 * result + (this.minShipment == null ? 0: this.minShipment.hashCode());
    result = 31 * result + (this.transportUnitSize == null ? 0: this.transportUnitSize.hashCode());
    result = 31 * result + (this.quantumOfSupply == null ? 0: this.quantumOfSupply.hashCode());
    result = 31 * result + (this.deliveryDurationDays == null ? 0: this.deliveryDurationDays.hashCode());
    result = 31 * result + (this.boxCount == null ? 0: this.boxCount.hashCode());
    result = 31 * result + (this.customsCommodityCodes == null ? 0: this.customsCommodityCodes.hashCode());
    result = 31 * result + (this.weightDimensions == null ? 0: this.weightDimensions.hashCode());
    result = 31 * result + (this.supplyScheduleDays == null ? 0: this.supplyScheduleDays.hashCode());
    result = 31 * result + (this.shelfLifeDays == null ? 0: this.shelfLifeDays.hashCode());
    result = 31 * result + (this.lifeTimeDays == null ? 0: this.lifeTimeDays.hashCode());
    result = 31 * result + (this.guaranteePeriodDays == null ? 0: this.guaranteePeriodDays.hashCode());
    result = 31 * result + (this.processingState == null ? 0: this.processingState.hashCode());
    result = 31 * result + (this.availability == null ? 0: this.availability.hashCode());
    result = 31 * result + (this.shelfLife == null ? 0: this.shelfLife.hashCode());
    result = 31 * result + (this.lifeTime == null ? 0: this.lifeTime.hashCode());
    result = 31 * result + (this.guaranteePeriod == null ? 0: this.guaranteePeriod.hashCode());
    result = 31 * result + (this.certificate == null ? 0: this.certificate.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMappingsOfferDTO {\n");
    
    sb.append("  name: ").append(name).append("\n");
    sb.append("  shopSku: ").append(shopSku).append("\n");
    sb.append("  category: ").append(category).append("\n");
    sb.append("  vendor: ").append(vendor).append("\n");
    sb.append("  vendorCode: ").append(vendorCode).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  id: ").append(id).append("\n");
    sb.append("  feedId: ").append(feedId).append("\n");
    sb.append("  barcodes: ").append(barcodes).append("\n");
    sb.append("  urls: ").append(urls).append("\n");
    sb.append("  pictures: ").append(pictures).append("\n");
    sb.append("  manufacturer: ").append(manufacturer).append("\n");
    sb.append("  manufacturerCountries: ").append(manufacturerCountries).append("\n");
    sb.append("  minShipment: ").append(minShipment).append("\n");
    sb.append("  transportUnitSize: ").append(transportUnitSize).append("\n");
    sb.append("  quantumOfSupply: ").append(quantumOfSupply).append("\n");
    sb.append("  deliveryDurationDays: ").append(deliveryDurationDays).append("\n");
    sb.append("  boxCount: ").append(boxCount).append("\n");
    sb.append("  customsCommodityCodes: ").append(customsCommodityCodes).append("\n");
    sb.append("  weightDimensions: ").append(weightDimensions).append("\n");
    sb.append("  supplyScheduleDays: ").append(supplyScheduleDays).append("\n");
    sb.append("  shelfLifeDays: ").append(shelfLifeDays).append("\n");
    sb.append("  lifeTimeDays: ").append(lifeTimeDays).append("\n");
    sb.append("  guaranteePeriodDays: ").append(guaranteePeriodDays).append("\n");
    sb.append("  processingState: ").append(processingState).append("\n");
    sb.append("  availability: ").append(availability).append("\n");
    sb.append("  shelfLife: ").append(shelfLife).append("\n");
    sb.append("  lifeTime: ").append(lifeTime).append("\n");
    sb.append("  guaranteePeriod: ").append(guaranteePeriod).append("\n");
    sb.append("  certificate: ").append(certificate).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
