/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.UpdateOfferMappingDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class UpdateOfferMappingsRequest {
  
  @SerializedName("offerMappings")
  private List<UpdateOfferMappingDTO> offerMappings = null;
  @SerializedName("onlyPartnerMediaContent")
  private Boolean onlyPartnerMediaContent = null;

  /**
   * Перечень товаров, которые нужно добавить или обновить.
   **/
  @ApiModelProperty(required = true, value = "Перечень товаров, которые нужно добавить или обновить.")
  public List<UpdateOfferMappingDTO> getOfferMappings() {
    return offerMappings;
  }
  public void setOfferMappings(List<UpdateOfferMappingDTO> offerMappings) {
    this.offerMappings = offerMappings;
  }

  /**
   * Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`. 
   **/
  @ApiModelProperty(value = "Будут использоваться только переданные вами изображения товаров.  Значение по умолчанию — `false`. Если вы хотите заменить изображения, которые добавил Маркет, передайте значение `true`. ")
  public Boolean getOnlyPartnerMediaContent() {
    return onlyPartnerMediaContent;
  }
  public void setOnlyPartnerMediaContent(Boolean onlyPartnerMediaContent) {
    this.onlyPartnerMediaContent = onlyPartnerMediaContent;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOfferMappingsRequest updateOfferMappingsRequest = (UpdateOfferMappingsRequest) o;
    return (this.offerMappings == null ? updateOfferMappingsRequest.offerMappings == null : this.offerMappings.equals(updateOfferMappingsRequest.offerMappings)) &&
        (this.onlyPartnerMediaContent == null ? updateOfferMappingsRequest.onlyPartnerMediaContent == null : this.onlyPartnerMediaContent.equals(updateOfferMappingsRequest.onlyPartnerMediaContent));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.offerMappings == null ? 0: this.offerMappings.hashCode());
    result = 31 * result + (this.onlyPartnerMediaContent == null ? 0: this.onlyPartnerMediaContent.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOfferMappingsRequest {\n");
    
    sb.append("  offerMappings: ").append(offerMappings).append("\n");
    sb.append("  onlyPartnerMediaContent: ").append(onlyPartnerMediaContent).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
