/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Адрес точки продаж. 
 **/
@ApiModel(description = "Адрес точки продаж. ")
public class OutletAddressDTO {
  
  @SerializedName("regionId")
  private Long regionId = null;
  @SerializedName("street")
  private String street = null;
  @SerializedName("number")
  private String number = null;
  @SerializedName("building")
  private String building = null;
  @SerializedName("estate")
  private String estate = null;
  @SerializedName("block")
  private String block = null;
  @SerializedName("additional")
  private String additional = null;
  @SerializedName("km")
  private Integer km = null;
  @SerializedName("city")
  private String city = null;

  /**
   * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
   **/
  @ApiModelProperty(required = true, value = "Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} ")
  public Long getRegionId() {
    return regionId;
  }
  public void setRegionId(Long regionId) {
    this.regionId = regionId;
  }

  /**
   * Улица.
   **/
  @ApiModelProperty(value = "Улица.")
  public String getStreet() {
    return street;
  }
  public void setStreet(String street) {
    this.street = street;
  }

  /**
   * Номер дома.
   **/
  @ApiModelProperty(value = "Номер дома.")
  public String getNumber() {
    return number;
  }
  public void setNumber(String number) {
    this.number = number;
  }

  /**
   * Номер строения.
   **/
  @ApiModelProperty(value = "Номер строения.")
  public String getBuilding() {
    return building;
  }
  public void setBuilding(String building) {
    this.building = building;
  }

  /**
   * Номер владения.
   **/
  @ApiModelProperty(value = "Номер владения.")
  public String getEstate() {
    return estate;
  }
  public void setEstate(String estate) {
    this.estate = estate;
  }

  /**
   * Номер корпуса.
   **/
  @ApiModelProperty(value = "Номер корпуса.")
  public String getBlock() {
    return block;
  }
  public void setBlock(String block) {
    this.block = block;
  }

  /**
   * Дополнительная информация.
   **/
  @ApiModelProperty(value = "Дополнительная информация.")
  public String getAdditional() {
    return additional;
  }
  public void setAdditional(String additional) {
    this.additional = additional;
  }

  /**
   * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
   **/
  @ApiModelProperty(value = "Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.")
  public Integer getKm() {
    return km;
  }
  public void setKm(Integer km) {
    this.km = km;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} ")
  public String getCity() {
    return city;
  }
  public void setCity(String city) {
    this.city = city;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutletAddressDTO outletAddressDTO = (OutletAddressDTO) o;
    return (this.regionId == null ? outletAddressDTO.regionId == null : this.regionId.equals(outletAddressDTO.regionId)) &&
        (this.street == null ? outletAddressDTO.street == null : this.street.equals(outletAddressDTO.street)) &&
        (this.number == null ? outletAddressDTO.number == null : this.number.equals(outletAddressDTO.number)) &&
        (this.building == null ? outletAddressDTO.building == null : this.building.equals(outletAddressDTO.building)) &&
        (this.estate == null ? outletAddressDTO.estate == null : this.estate.equals(outletAddressDTO.estate)) &&
        (this.block == null ? outletAddressDTO.block == null : this.block.equals(outletAddressDTO.block)) &&
        (this.additional == null ? outletAddressDTO.additional == null : this.additional.equals(outletAddressDTO.additional)) &&
        (this.km == null ? outletAddressDTO.km == null : this.km.equals(outletAddressDTO.km)) &&
        (this.city == null ? outletAddressDTO.city == null : this.city.equals(outletAddressDTO.city));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.regionId == null ? 0: this.regionId.hashCode());
    result = 31 * result + (this.street == null ? 0: this.street.hashCode());
    result = 31 * result + (this.number == null ? 0: this.number.hashCode());
    result = 31 * result + (this.building == null ? 0: this.building.hashCode());
    result = 31 * result + (this.estate == null ? 0: this.estate.hashCode());
    result = 31 * result + (this.block == null ? 0: this.block.hashCode());
    result = 31 * result + (this.additional == null ? 0: this.additional.hashCode());
    result = 31 * result + (this.km == null ? 0: this.km.hashCode());
    result = 31 * result + (this.city == null ? 0: this.city.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutletAddressDTO {\n");
    
    sb.append("  regionId: ").append(regionId).append("\n");
    sb.append("  street: ").append(street).append("\n");
    sb.append("  number: ").append(number).append("\n");
    sb.append("  building: ").append(building).append("\n");
    sb.append("  estate: ").append(estate).append("\n");
    sb.append("  block: ").append(block).append("\n");
    sb.append("  additional: ").append(additional).append("\n");
    sb.append("  km: ").append(km).append("\n");
    sb.append("  city: ").append(city).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
