/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CurrencyType;
import org.openapitools.client.model.OrderBuyerDTO;
import org.openapitools.client.model.OrderDeliveryDTO;
import org.openapitools.client.model.OrderItemDTO;
import org.openapitools.client.model.OrderPaymentMethodType;
import org.openapitools.client.model.OrderPaymentType;
import org.openapitools.client.model.OrderStatusType;
import org.openapitools.client.model.OrderSubsidyDTO;
import org.openapitools.client.model.OrderSubstatusType;
import org.openapitools.client.model.OrderTaxSystemType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.NoSuchElementException;



/**
  * Заказ.
 **/

public class OrderDTO  {
  
 /**
   * Идентификатор заказа.
  **/
  private Long id;

  private OrderStatusType status;

  private OrderSubstatusType substatus;

  private String creationDate;

  private String updatedAt;

  private CurrencyType currency;

 /**
   * Платеж покупателя. 
  **/
  private BigDecimal itemsTotal;

 /**
   * Стоимость доставки. 
  **/
  private BigDecimal deliveryTotal;

 /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
  **/
  private BigDecimal buyerItemsTotal;

 /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
  **/
  private BigDecimal buyerTotal;

 /**
   * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
  **/
  private BigDecimal buyerItemsTotalBeforeDiscount;

 /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
  **/
  private BigDecimal buyerTotalBeforeDiscount;

  private OrderPaymentType paymentType;

  private OrderPaymentMethodType paymentMethod;

 /**
   * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
  **/
  private Boolean fake;

 /**
   * Список товаров в заказе.
  **/
  private List<OrderItemDTO> items = new ArrayList<>();

 /**
   * Список субсидий по типам.
  **/
  private List<OrderSubsidyDTO> subsidies = null;

  private OrderDeliveryDTO delivery;

  private OrderBuyerDTO buyer;

 /**
   * Комментарий к заказу.
  **/
  private String notes;

  private OrderTaxSystemType taxSystem;

 /**
   * **Только для модели DBS**  Запрошена ли отмена. 
  **/
  private Boolean cancelRequested;

  private String expiryDate;

 /**
   * Идентификатор заказа.
   * @return id
  **/
  public Long getId() {
    return id;
  }

  /**
    * Set id
  **/
  public void setId(Long id) {
    this.id = id;
  }

  public OrderDTO id(Long id) {
    this.id = id;
    return this;
  }

 /**
   * Get status
   * @return status
  **/
  public OrderStatusType getStatus() {
    return status;
  }

  /**
    * Set status
  **/
  public void setStatus(OrderStatusType status) {
    this.status = status;
  }

  public OrderDTO status(OrderStatusType status) {
    this.status = status;
    return this;
  }

 /**
   * Get substatus
   * @return substatus
  **/
  public OrderSubstatusType getSubstatus() {
    return substatus;
  }

  /**
    * Set substatus
  **/
  public void setSubstatus(OrderSubstatusType substatus) {
    this.substatus = substatus;
  }

  public OrderDTO substatus(OrderSubstatusType substatus) {
    this.substatus = substatus;
    return this;
  }

 /**
   * Get creationDate
   * @return creationDate
  **/
  public String getCreationDate() {
    return creationDate;
  }

  /**
    * Set creationDate
  **/
  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }

  public OrderDTO creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

 /**
   * Get updatedAt
   * @return updatedAt
  **/
  public String getUpdatedAt() {
    return updatedAt;
  }

  /**
    * Set updatedAt
  **/
  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public OrderDTO updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

 /**
   * Get currency
   * @return currency
  **/
  public CurrencyType getCurrency() {
    return currency;
  }

  /**
    * Set currency
  **/
  public void setCurrency(CurrencyType currency) {
    this.currency = currency;
  }

  public OrderDTO currency(CurrencyType currency) {
    this.currency = currency;
    return this;
  }

 /**
   * Платеж покупателя. 
   * @return itemsTotal
  **/
  public BigDecimal getItemsTotal() {
    return itemsTotal;
  }

  /**
    * Set itemsTotal
  **/
  public void setItemsTotal(BigDecimal itemsTotal) {
    this.itemsTotal = itemsTotal;
  }

  public OrderDTO itemsTotal(BigDecimal itemsTotal) {
    this.itemsTotal = itemsTotal;
    return this;
  }

 /**
   * Стоимость доставки. 
   * @return deliveryTotal
  **/
  public BigDecimal getDeliveryTotal() {
    return deliveryTotal;
  }

  /**
    * Set deliveryTotal
  **/
  public void setDeliveryTotal(BigDecimal deliveryTotal) {
    this.deliveryTotal = deliveryTotal;
  }

  public OrderDTO deliveryTotal(BigDecimal deliveryTotal) {
    this.deliveryTotal = deliveryTotal;
    return this;
  }

 /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
   * @return buyerItemsTotal
   * @deprecated
  **/
  @Deprecated
  public BigDecimal getBuyerItemsTotal() {
    return buyerItemsTotal;
  }

  /**
    * Set buyerItemsTotal
  **/
  public void setBuyerItemsTotal(BigDecimal buyerItemsTotal) {
    this.buyerItemsTotal = buyerItemsTotal;
  }

  public OrderDTO buyerItemsTotal(BigDecimal buyerItemsTotal) {
    this.buyerItemsTotal = buyerItemsTotal;
    return this;
  }

 /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
   * @return buyerTotal
   * @deprecated
  **/
  @Deprecated
  public BigDecimal getBuyerTotal() {
    return buyerTotal;
  }

  /**
    * Set buyerTotal
  **/
  public void setBuyerTotal(BigDecimal buyerTotal) {
    this.buyerTotal = buyerTotal;
  }

  public OrderDTO buyerTotal(BigDecimal buyerTotal) {
    this.buyerTotal = buyerTotal;
    return this;
  }

 /**
   * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
   * @return buyerItemsTotalBeforeDiscount
  **/
  public BigDecimal getBuyerItemsTotalBeforeDiscount() {
    return buyerItemsTotalBeforeDiscount;
  }

  /**
    * Set buyerItemsTotalBeforeDiscount
  **/
  public void setBuyerItemsTotalBeforeDiscount(BigDecimal buyerItemsTotalBeforeDiscount) {
    this.buyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount;
  }

  public OrderDTO buyerItemsTotalBeforeDiscount(BigDecimal buyerItemsTotalBeforeDiscount) {
    this.buyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount;
    return this;
  }

 /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (&#x60;buyerItemsTotalBeforeDiscount&#x60; + стоимость доставки). 
   * @return buyerTotalBeforeDiscount
   * @deprecated
  **/
  @Deprecated
  public BigDecimal getBuyerTotalBeforeDiscount() {
    return buyerTotalBeforeDiscount;
  }

  /**
    * Set buyerTotalBeforeDiscount
  **/
  public void setBuyerTotalBeforeDiscount(BigDecimal buyerTotalBeforeDiscount) {
    this.buyerTotalBeforeDiscount = buyerTotalBeforeDiscount;
  }

  public OrderDTO buyerTotalBeforeDiscount(BigDecimal buyerTotalBeforeDiscount) {
    this.buyerTotalBeforeDiscount = buyerTotalBeforeDiscount;
    return this;
  }

 /**
   * Get paymentType
   * @return paymentType
  **/
  public OrderPaymentType getPaymentType() {
    return paymentType;
  }

  /**
    * Set paymentType
  **/
  public void setPaymentType(OrderPaymentType paymentType) {
    this.paymentType = paymentType;
  }

  public OrderDTO paymentType(OrderPaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

 /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  public OrderPaymentMethodType getPaymentMethod() {
    return paymentMethod;
  }

  /**
    * Set paymentMethod
  **/
  public void setPaymentMethod(OrderPaymentMethodType paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  public OrderDTO paymentMethod(OrderPaymentMethodType paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

 /**
   * Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
   * @return fake
  **/
  public Boolean getFake() {
    return fake;
  }

  /**
    * Set fake
  **/
  public void setFake(Boolean fake) {
    this.fake = fake;
  }

  public OrderDTO fake(Boolean fake) {
    this.fake = fake;
    return this;
  }

 /**
   * Список товаров в заказе.
   * @return items
  **/
  public List<OrderItemDTO> getItems() {
    return items;
  }

  /**
    * Set items
  **/
  public void setItems(List<OrderItemDTO> items) {
    this.items = items;
  }

  public OrderDTO items(List<OrderItemDTO> items) {
    this.items = items;
    return this;
  }

  public OrderDTO addItemsItem(OrderItemDTO itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

 /**
   * Список субсидий по типам.
   * @return subsidies
  **/
  public List<OrderSubsidyDTO> getSubsidies() {
    return subsidies;
  }

  /**
    * Set subsidies
  **/
  public void setSubsidies(List<OrderSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
  }

  public OrderDTO subsidies(List<OrderSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
    return this;
  }

  public OrderDTO addSubsidiesItem(OrderSubsidyDTO subsidiesItem) {
    this.subsidies.add(subsidiesItem);
    return this;
  }

 /**
   * Get delivery
   * @return delivery
  **/
  public OrderDeliveryDTO getDelivery() {
    return delivery;
  }

  /**
    * Set delivery
  **/
  public void setDelivery(OrderDeliveryDTO delivery) {
    this.delivery = delivery;
  }

  public OrderDTO delivery(OrderDeliveryDTO delivery) {
    this.delivery = delivery;
    return this;
  }

 /**
   * Get buyer
   * @return buyer
  **/
  public OrderBuyerDTO getBuyer() {
    return buyer;
  }

  /**
    * Set buyer
  **/
  public void setBuyer(OrderBuyerDTO buyer) {
    this.buyer = buyer;
  }

  public OrderDTO buyer(OrderBuyerDTO buyer) {
    this.buyer = buyer;
    return this;
  }

 /**
   * Комментарий к заказу.
   * @return notes
  **/
  public String getNotes() {
    return notes;
  }

  /**
    * Set notes
  **/
  public void setNotes(String notes) {
    this.notes = notes;
  }

  public OrderDTO notes(String notes) {
    this.notes = notes;
    return this;
  }

 /**
   * Get taxSystem
   * @return taxSystem
  **/
  public OrderTaxSystemType getTaxSystem() {
    return taxSystem;
  }

  /**
    * Set taxSystem
  **/
  public void setTaxSystem(OrderTaxSystemType taxSystem) {
    this.taxSystem = taxSystem;
  }

  public OrderDTO taxSystem(OrderTaxSystemType taxSystem) {
    this.taxSystem = taxSystem;
    return this;
  }

 /**
   * **Только для модели DBS**  Запрошена ли отмена. 
   * @return cancelRequested
  **/
  public Boolean getCancelRequested() {
    return cancelRequested;
  }

  /**
    * Set cancelRequested
  **/
  public void setCancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
  }

  public OrderDTO cancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
    return this;
  }

 /**
   * Get expiryDate
   * @return expiryDate
  **/
  public String getExpiryDate() {
    return expiryDate;
  }

  /**
    * Set expiryDate
  **/
  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }

  public OrderDTO expiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    substatus: ").append(toIndentedString(substatus)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    itemsTotal: ").append(toIndentedString(itemsTotal)).append("\n");
    sb.append("    deliveryTotal: ").append(toIndentedString(deliveryTotal)).append("\n");
    sb.append("    buyerItemsTotal: ").append(toIndentedString(buyerItemsTotal)).append("\n");
    sb.append("    buyerTotal: ").append(toIndentedString(buyerTotal)).append("\n");
    sb.append("    buyerItemsTotalBeforeDiscount: ").append(toIndentedString(buyerItemsTotalBeforeDiscount)).append("\n");
    sb.append("    buyerTotalBeforeDiscount: ").append(toIndentedString(buyerTotalBeforeDiscount)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    fake: ").append(toIndentedString(fake)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    subsidies: ").append(toIndentedString(subsidies)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    buyer: ").append(toIndentedString(buyer)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    taxSystem: ").append(toIndentedString(taxSystem)).append("\n");
    sb.append("    cancelRequested: ").append(toIndentedString(cancelRequested)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

