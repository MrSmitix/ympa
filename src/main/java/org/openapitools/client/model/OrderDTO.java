/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.*;
import org.openapitools.client.model.CurrencyType;
import org.openapitools.client.model.OrderBuyerDTO;
import org.openapitools.client.model.OrderDeliveryDTO;
import org.openapitools.client.model.OrderItemDTO;
import org.openapitools.client.model.OrderPaymentMethodType;
import org.openapitools.client.model.OrderPaymentType;
import org.openapitools.client.model.OrderStatusType;
import org.openapitools.client.model.OrderSubsidyDTO;
import org.openapitools.client.model.OrderSubstatusType;
import org.openapitools.client.model.OrderTaxSystemType;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Заказ.
 **/
@ApiModel(description = "Заказ.")
public class OrderDTO {
  
  @SerializedName("id")
  private Long id = null;
  @SerializedName("status")
  private OrderStatusType status = null;
  @SerializedName("substatus")
  private OrderSubstatusType substatus = null;
  @SerializedName("creationDate")
  private String creationDate = null;
  @SerializedName("updatedAt")
  private String updatedAt = null;
  @SerializedName("currency")
  private CurrencyType currency = null;
  @SerializedName("itemsTotal")
  private BigDecimal itemsTotal = null;
  @SerializedName("deliveryTotal")
  private BigDecimal deliveryTotal = null;
  @SerializedName("buyerItemsTotal")
  private BigDecimal buyerItemsTotal = null;
  @SerializedName("buyerTotal")
  private BigDecimal buyerTotal = null;
  @SerializedName("buyerItemsTotalBeforeDiscount")
  private BigDecimal buyerItemsTotalBeforeDiscount = null;
  @SerializedName("buyerTotalBeforeDiscount")
  private BigDecimal buyerTotalBeforeDiscount = null;
  @SerializedName("paymentType")
  private OrderPaymentType paymentType = null;
  @SerializedName("paymentMethod")
  private OrderPaymentMethodType paymentMethod = null;
  @SerializedName("fake")
  private Boolean fake = null;
  @SerializedName("items")
  private List<OrderItemDTO> items = null;
  @SerializedName("subsidies")
  private List<OrderSubsidyDTO> subsidies = null;
  @SerializedName("delivery")
  private OrderDeliveryDTO delivery = null;
  @SerializedName("buyer")
  private OrderBuyerDTO buyer = null;
  @SerializedName("notes")
  private String notes = null;
  @SerializedName("taxSystem")
  private OrderTaxSystemType taxSystem = null;
  @SerializedName("cancelRequested")
  private Boolean cancelRequested = null;
  @SerializedName("expiryDate")
  private String expiryDate = null;

  /**
   * Идентификатор заказа.
   **/
  @ApiModelProperty(value = "Идентификатор заказа.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderStatusType getStatus() {
    return status;
  }
  public void setStatus(OrderStatusType status) {
    this.status = status;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderSubstatusType getSubstatus() {
    return substatus;
  }
  public void setSubstatus(OrderSubstatusType substatus) {
    this.substatus = substatus;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCreationDate() {
    return creationDate;
  }
  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getUpdatedAt() {
    return updatedAt;
  }
  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CurrencyType getCurrency() {
    return currency;
  }
  public void setCurrency(CurrencyType currency) {
    this.currency = currency;
  }

  /**
   * Платеж покупателя. 
   **/
  @ApiModelProperty(value = "Платеж покупателя. ")
  public BigDecimal getItemsTotal() {
    return itemsTotal;
  }
  public void setItemsTotal(BigDecimal itemsTotal) {
    this.itemsTotal = itemsTotal;
  }

  /**
   * Стоимость доставки. 
   **/
  @ApiModelProperty(value = "Стоимость доставки. ")
  public BigDecimal getDeliveryTotal() {
    return deliveryTotal;
  }
  public void setDeliveryTotal(BigDecimal deliveryTotal) {
    this.deliveryTotal = deliveryTotal;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и без учета стоимости доставки. ")
  public BigDecimal getBuyerItemsTotal() {
    return buyerItemsTotal;
  }
  public void setBuyerItemsTotal(BigDecimal buyerItemsTotal) {
    this.buyerItemsTotal = buyerItemsTotal;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя после применения скидок и с учетом стоимости доставки. ")
  public BigDecimal getBuyerTotal() {
    return buyerTotal;
  }
  public void setBuyerTotal(BigDecimal buyerTotal) {
    this.buyerTotal = buyerTotal;
  }

  /**
   * Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. 
   **/
  @ApiModelProperty(value = "Стоимость всех товаров в заказе в валюте покупателя без учета стоимости доставки и до применения скидок по:  * акциям; * купонам; * промокодам. ")
  public BigDecimal getBuyerItemsTotalBeforeDiscount() {
    return buyerItemsTotalBeforeDiscount;
  }
  public void setBuyerItemsTotalBeforeDiscount(BigDecimal buyerItemsTotalBeforeDiscount) {
    this.buyerItemsTotalBeforeDiscount = buyerItemsTotalBeforeDiscount;
  }

  /**
   * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). 
   **/
  @ApiModelProperty(value = "{% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость всех товаров в заказе в валюте покупателя до применения скидок и с учетом стоимости доставки (`buyerItemsTotalBeforeDiscount` + стоимость доставки). ")
  public BigDecimal getBuyerTotalBeforeDiscount() {
    return buyerTotalBeforeDiscount;
  }
  public void setBuyerTotalBeforeDiscount(BigDecimal buyerTotalBeforeDiscount) {
    this.buyerTotalBeforeDiscount = buyerTotalBeforeDiscount;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderPaymentType getPaymentType() {
    return paymentType;
  }
  public void setPaymentType(OrderPaymentType paymentType) {
    this.paymentType = paymentType;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderPaymentMethodType getPaymentMethod() {
    return paymentMethod;
  }
  public void setPaymentMethod(OrderPaymentMethodType paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  /**
   * Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
   **/
  @ApiModelProperty(value = "Тип заказа:  * `false` — настоящий заказ покупателя.  * `true` — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. ")
  public Boolean getFake() {
    return fake;
  }
  public void setFake(Boolean fake) {
    this.fake = fake;
  }

  /**
   * Список товаров в заказе.
   **/
  @ApiModelProperty(required = true, value = "Список товаров в заказе.")
  public List<OrderItemDTO> getItems() {
    return items;
  }
  public void setItems(List<OrderItemDTO> items) {
    this.items = items;
  }

  /**
   * Список субсидий по типам.
   **/
  @ApiModelProperty(value = "Список субсидий по типам.")
  public List<OrderSubsidyDTO> getSubsidies() {
    return subsidies;
  }
  public void setSubsidies(List<OrderSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderDeliveryDTO getDelivery() {
    return delivery;
  }
  public void setDelivery(OrderDeliveryDTO delivery) {
    this.delivery = delivery;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderBuyerDTO getBuyer() {
    return buyer;
  }
  public void setBuyer(OrderBuyerDTO buyer) {
    this.buyer = buyer;
  }

  /**
   * Комментарий к заказу.
   **/
  @ApiModelProperty(value = "Комментарий к заказу.")
  public String getNotes() {
    return notes;
  }
  public void setNotes(String notes) {
    this.notes = notes;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public OrderTaxSystemType getTaxSystem() {
    return taxSystem;
  }
  public void setTaxSystem(OrderTaxSystemType taxSystem) {
    this.taxSystem = taxSystem;
  }

  /**
   * **Только для модели DBS**  Запрошена ли отмена. 
   **/
  @ApiModelProperty(value = "**Только для модели DBS**  Запрошена ли отмена. ")
  public Boolean getCancelRequested() {
    return cancelRequested;
  }
  public void setCancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getExpiryDate() {
    return expiryDate;
  }
  public void setExpiryDate(String expiryDate) {
    this.expiryDate = expiryDate;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDTO orderDTO = (OrderDTO) o;
    return (this.id == null ? orderDTO.id == null : this.id.equals(orderDTO.id)) &&
        (this.status == null ? orderDTO.status == null : this.status.equals(orderDTO.status)) &&
        (this.substatus == null ? orderDTO.substatus == null : this.substatus.equals(orderDTO.substatus)) &&
        (this.creationDate == null ? orderDTO.creationDate == null : this.creationDate.equals(orderDTO.creationDate)) &&
        (this.updatedAt == null ? orderDTO.updatedAt == null : this.updatedAt.equals(orderDTO.updatedAt)) &&
        (this.currency == null ? orderDTO.currency == null : this.currency.equals(orderDTO.currency)) &&
        (this.itemsTotal == null ? orderDTO.itemsTotal == null : this.itemsTotal.equals(orderDTO.itemsTotal)) &&
        (this.deliveryTotal == null ? orderDTO.deliveryTotal == null : this.deliveryTotal.equals(orderDTO.deliveryTotal)) &&
        (this.buyerItemsTotal == null ? orderDTO.buyerItemsTotal == null : this.buyerItemsTotal.equals(orderDTO.buyerItemsTotal)) &&
        (this.buyerTotal == null ? orderDTO.buyerTotal == null : this.buyerTotal.equals(orderDTO.buyerTotal)) &&
        (this.buyerItemsTotalBeforeDiscount == null ? orderDTO.buyerItemsTotalBeforeDiscount == null : this.buyerItemsTotalBeforeDiscount.equals(orderDTO.buyerItemsTotalBeforeDiscount)) &&
        (this.buyerTotalBeforeDiscount == null ? orderDTO.buyerTotalBeforeDiscount == null : this.buyerTotalBeforeDiscount.equals(orderDTO.buyerTotalBeforeDiscount)) &&
        (this.paymentType == null ? orderDTO.paymentType == null : this.paymentType.equals(orderDTO.paymentType)) &&
        (this.paymentMethod == null ? orderDTO.paymentMethod == null : this.paymentMethod.equals(orderDTO.paymentMethod)) &&
        (this.fake == null ? orderDTO.fake == null : this.fake.equals(orderDTO.fake)) &&
        (this.items == null ? orderDTO.items == null : this.items.equals(orderDTO.items)) &&
        (this.subsidies == null ? orderDTO.subsidies == null : this.subsidies.equals(orderDTO.subsidies)) &&
        (this.delivery == null ? orderDTO.delivery == null : this.delivery.equals(orderDTO.delivery)) &&
        (this.buyer == null ? orderDTO.buyer == null : this.buyer.equals(orderDTO.buyer)) &&
        (this.notes == null ? orderDTO.notes == null : this.notes.equals(orderDTO.notes)) &&
        (this.taxSystem == null ? orderDTO.taxSystem == null : this.taxSystem.equals(orderDTO.taxSystem)) &&
        (this.cancelRequested == null ? orderDTO.cancelRequested == null : this.cancelRequested.equals(orderDTO.cancelRequested)) &&
        (this.expiryDate == null ? orderDTO.expiryDate == null : this.expiryDate.equals(orderDTO.expiryDate));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.status == null ? 0: this.status.hashCode());
    result = 31 * result + (this.substatus == null ? 0: this.substatus.hashCode());
    result = 31 * result + (this.creationDate == null ? 0: this.creationDate.hashCode());
    result = 31 * result + (this.updatedAt == null ? 0: this.updatedAt.hashCode());
    result = 31 * result + (this.currency == null ? 0: this.currency.hashCode());
    result = 31 * result + (this.itemsTotal == null ? 0: this.itemsTotal.hashCode());
    result = 31 * result + (this.deliveryTotal == null ? 0: this.deliveryTotal.hashCode());
    result = 31 * result + (this.buyerItemsTotal == null ? 0: this.buyerItemsTotal.hashCode());
    result = 31 * result + (this.buyerTotal == null ? 0: this.buyerTotal.hashCode());
    result = 31 * result + (this.buyerItemsTotalBeforeDiscount == null ? 0: this.buyerItemsTotalBeforeDiscount.hashCode());
    result = 31 * result + (this.buyerTotalBeforeDiscount == null ? 0: this.buyerTotalBeforeDiscount.hashCode());
    result = 31 * result + (this.paymentType == null ? 0: this.paymentType.hashCode());
    result = 31 * result + (this.paymentMethod == null ? 0: this.paymentMethod.hashCode());
    result = 31 * result + (this.fake == null ? 0: this.fake.hashCode());
    result = 31 * result + (this.items == null ? 0: this.items.hashCode());
    result = 31 * result + (this.subsidies == null ? 0: this.subsidies.hashCode());
    result = 31 * result + (this.delivery == null ? 0: this.delivery.hashCode());
    result = 31 * result + (this.buyer == null ? 0: this.buyer.hashCode());
    result = 31 * result + (this.notes == null ? 0: this.notes.hashCode());
    result = 31 * result + (this.taxSystem == null ? 0: this.taxSystem.hashCode());
    result = 31 * result + (this.cancelRequested == null ? 0: this.cancelRequested.hashCode());
    result = 31 * result + (this.expiryDate == null ? 0: this.expiryDate.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDTO {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  status: ").append(status).append("\n");
    sb.append("  substatus: ").append(substatus).append("\n");
    sb.append("  creationDate: ").append(creationDate).append("\n");
    sb.append("  updatedAt: ").append(updatedAt).append("\n");
    sb.append("  currency: ").append(currency).append("\n");
    sb.append("  itemsTotal: ").append(itemsTotal).append("\n");
    sb.append("  deliveryTotal: ").append(deliveryTotal).append("\n");
    sb.append("  buyerItemsTotal: ").append(buyerItemsTotal).append("\n");
    sb.append("  buyerTotal: ").append(buyerTotal).append("\n");
    sb.append("  buyerItemsTotalBeforeDiscount: ").append(buyerItemsTotalBeforeDiscount).append("\n");
    sb.append("  buyerTotalBeforeDiscount: ").append(buyerTotalBeforeDiscount).append("\n");
    sb.append("  paymentType: ").append(paymentType).append("\n");
    sb.append("  paymentMethod: ").append(paymentMethod).append("\n");
    sb.append("  fake: ").append(fake).append("\n");
    sb.append("  items: ").append(items).append("\n");
    sb.append("  subsidies: ").append(subsidies).append("\n");
    sb.append("  delivery: ").append(delivery).append("\n");
    sb.append("  buyer: ").append(buyer).append("\n");
    sb.append("  notes: ").append(notes).append("\n");
    sb.append("  taxSystem: ").append(taxSystem).append("\n");
    sb.append("  cancelRequested: ").append(cancelRequested).append("\n");
    sb.append("  expiryDate: ").append(expiryDate).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
