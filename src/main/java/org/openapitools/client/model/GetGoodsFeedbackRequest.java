/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.FeedbackReactionStatusType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Фильтр запроса отзывов в кабинете. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class GetGoodsFeedbackRequest {
  public static final String SERIALIZED_NAME_DATE_TIME_FROM = "dateTimeFrom";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FROM)
  private OffsetDateTime dateTimeFrom;

  public static final String SERIALIZED_NAME_DATE_TIME_TO = "dateTimeTo";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_TO)
  private OffsetDateTime dateTimeTo;

  public static final String SERIALIZED_NAME_REACTION_STATUS = "reactionStatus";
  @SerializedName(SERIALIZED_NAME_REACTION_STATUS)
  private FeedbackReactionStatusType reactionStatus;

  public static final String SERIALIZED_NAME_RATING_VALUES = "ratingValues";
  @SerializedName(SERIALIZED_NAME_RATING_VALUES)
  private Set<Integer> ratingValues;

  public static final String SERIALIZED_NAME_MODEL_IDS = "modelIds";
  @SerializedName(SERIALIZED_NAME_MODEL_IDS)
  private Set<Long> modelIds;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private Boolean paid;

  public GetGoodsFeedbackRequest() {
  }

  public GetGoodsFeedbackRequest dateTimeFrom(OffsetDateTime dateTimeFrom) {
    this.dateTimeFrom = dateTimeFrom;
    return this;
  }

  /**
   * Начало периода. Не включительно.  Если параметр не указан, возвращается информация за 6 месяцев до указанной в &#x60;dateTimeTo&#x60; даты. 
   * @return dateTimeFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTimeFrom() {
    return dateTimeFrom;
  }

  public void setDateTimeFrom(OffsetDateTime dateTimeFrom) {
    this.dateTimeFrom = dateTimeFrom;
  }


  public GetGoodsFeedbackRequest dateTimeTo(OffsetDateTime dateTimeTo) {
    this.dateTimeTo = dateTimeTo;
    return this;
  }

  /**
   * Конец периода. Не включительно.  Если параметр не указан, используется текущая дата. 
   * @return dateTimeTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateTimeTo() {
    return dateTimeTo;
  }

  public void setDateTimeTo(OffsetDateTime dateTimeTo) {
    this.dateTimeTo = dateTimeTo;
  }


  public GetGoodsFeedbackRequest reactionStatus(FeedbackReactionStatusType reactionStatus) {
    this.reactionStatus = reactionStatus;
    return this;
  }

  /**
   * Get reactionStatus
   * @return reactionStatus
   */
  @javax.annotation.Nullable
  public FeedbackReactionStatusType getReactionStatus() {
    return reactionStatus;
  }

  public void setReactionStatus(FeedbackReactionStatusType reactionStatus) {
    this.reactionStatus = reactionStatus;
  }


  public GetGoodsFeedbackRequest ratingValues(Set<Integer> ratingValues) {
    this.ratingValues = ratingValues;
    return this;
  }

  public GetGoodsFeedbackRequest addRatingValuesItem(Integer ratingValuesItem) {
    if (this.ratingValues == null) {
      this.ratingValues = new LinkedHashSet<>();
    }
    this.ratingValues.add(ratingValuesItem);
    return this;
  }

  /**
   * Оценка товара.
   * @return ratingValues
   */
  @javax.annotation.Nullable
  public Set<Integer> getRatingValues() {
    return ratingValues;
  }

  public void setRatingValues(Set<Integer> ratingValues) {
    this.ratingValues = ratingValues;
  }


  public GetGoodsFeedbackRequest modelIds(Set<Long> modelIds) {
    this.modelIds = modelIds;
    return this;
  }

  public GetGoodsFeedbackRequest addModelIdsItem(Long modelIdsItem) {
    if (this.modelIds == null) {
      this.modelIds = new LinkedHashSet<>();
    }
    this.modelIds.add(modelIdsItem);
    return this;
  }

  /**
   * Фильтр по идентификатору модели товара.  Получить идентификатор модели можно с помощью одного из запросов:  * [POST businesses/{businessId}/offer-mappings](../../reference/business-assortment/getOfferMappings.md);  * [POST businesses/{businessId}/offer-cards](../../reference/content/getOfferCardsContentStatus.md);  * [POST models](../../reference/models/getModels.md). 
   * @return modelIds
   */
  @javax.annotation.Nullable
  public Set<Long> getModelIds() {
    return modelIds;
  }

  public void setModelIds(Set<Long> modelIds) {
    this.modelIds = modelIds;
  }


  public GetGoodsFeedbackRequest paid(Boolean paid) {
    this.paid = paid;
    return this;
  }

  /**
   * Фильтр отзывов за баллы Плюса.
   * @return paid
   */
  @javax.annotation.Nullable
  public Boolean getPaid() {
    return paid;
  }

  public void setPaid(Boolean paid) {
    this.paid = paid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetGoodsFeedbackRequest getGoodsFeedbackRequest = (GetGoodsFeedbackRequest) o;
    return Objects.equals(this.dateTimeFrom, getGoodsFeedbackRequest.dateTimeFrom) &&
        Objects.equals(this.dateTimeTo, getGoodsFeedbackRequest.dateTimeTo) &&
        Objects.equals(this.reactionStatus, getGoodsFeedbackRequest.reactionStatus) &&
        Objects.equals(this.ratingValues, getGoodsFeedbackRequest.ratingValues) &&
        Objects.equals(this.modelIds, getGoodsFeedbackRequest.modelIds) &&
        Objects.equals(this.paid, getGoodsFeedbackRequest.paid);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTimeFrom, dateTimeTo, reactionStatus, ratingValues, modelIds, paid);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetGoodsFeedbackRequest {\n");
    sb.append("    dateTimeFrom: ").append(toIndentedString(dateTimeFrom)).append("\n");
    sb.append("    dateTimeTo: ").append(toIndentedString(dateTimeTo)).append("\n");
    sb.append("    reactionStatus: ").append(toIndentedString(reactionStatus)).append("\n");
    sb.append("    ratingValues: ").append(toIndentedString(ratingValues)).append("\n");
    sb.append("    modelIds: ").append(toIndentedString(modelIds)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateTimeFrom");
    openapiFields.add("dateTimeTo");
    openapiFields.add("reactionStatus");
    openapiFields.add("ratingValues");
    openapiFields.add("modelIds");
    openapiFields.add("paid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetGoodsFeedbackRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetGoodsFeedbackRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetGoodsFeedbackRequest is not found in the empty JSON string", GetGoodsFeedbackRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetGoodsFeedbackRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetGoodsFeedbackRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `reactionStatus`
      if (jsonObj.get("reactionStatus") != null && !jsonObj.get("reactionStatus").isJsonNull()) {
        FeedbackReactionStatusType.validateJsonElement(jsonObj.get("reactionStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ratingValues") != null && !jsonObj.get("ratingValues").isJsonNull() && !jsonObj.get("ratingValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratingValues` to be an array in the JSON string but got `%s`", jsonObj.get("ratingValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("modelIds") != null && !jsonObj.get("modelIds").isJsonNull() && !jsonObj.get("modelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelIds` to be an array in the JSON string but got `%s`", jsonObj.get("modelIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetGoodsFeedbackRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetGoodsFeedbackRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetGoodsFeedbackRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetGoodsFeedbackRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetGoodsFeedbackRequest>() {
           @Override
           public void write(JsonWriter out, GetGoodsFeedbackRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetGoodsFeedbackRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetGoodsFeedbackRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetGoodsFeedbackRequest
   * @throws IOException if the JSON string is invalid with respect to GetGoodsFeedbackRequest
   */
  public static GetGoodsFeedbackRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetGoodsFeedbackRequest.class);
  }

  /**
   * Convert an instance of GetGoodsFeedbackRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

