/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelType;
import org.openapitools.client.model.GetPromoAssortmentInfoDTO;
import org.openapitools.client.model.GetPromoBestsellerInfoDTO;
import org.openapitools.client.model.GetPromoConstraintsDTO;
import org.openapitools.client.model.GetPromoMechanicsInfoDTO;
import org.openapitools.client.model.PromoPeriodDTO;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.NoSuchElementException;



/**
  * Информация об акции.
 **/

public class GetPromoDTO  {
  
 /**
   * Идентификатор акции.
  **/
  private String id;

 /**
   * Название акции.
  **/
  private String name;

  private PromoPeriodDTO period;

 /**
   * Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением `true`, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением `false`.  Для прошедших акций всегда возвращается со значением `true`.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
  **/
  private Boolean participating;

  private GetPromoAssortmentInfoDTO assortmentInfo;

  private GetPromoMechanicsInfoDTO mechanicsInfo;

  private GetPromoBestsellerInfoDTO bestsellerInfo;

 /**
   * Список каналов продвижения товаров.
  **/
  private List<ChannelType> channels = null;

  private GetPromoConstraintsDTO constraints;

 /**
   * Идентификатор акции.
   * @return id
  **/
  public String getId() {
    return id;
  }

  /**
    * Set id
  **/
  public void setId(String id) {
    this.id = id;
  }

  public GetPromoDTO id(String id) {
    this.id = id;
    return this;
  }

 /**
   * Название акции.
   * @return name
  **/
  public String getName() {
    return name;
  }

  /**
    * Set name
  **/
  public void setName(String name) {
    this.name = name;
  }

  public GetPromoDTO name(String name) {
    this.name = name;
    return this;
  }

 /**
   * Get period
   * @return period
  **/
  public PromoPeriodDTO getPeriod() {
    return period;
  }

  /**
    * Set period
  **/
  public void setPeriod(PromoPeriodDTO period) {
    this.period = period;
  }

  public GetPromoDTO period(PromoPeriodDTO period) {
    this.period = period;
    return this;
  }

 /**
   * Участвует или участвовал ли продавец в этой акции.  Для текущих и будущих акций возвращается со значением &#x60;true&#x60;, если в акции есть товары, которые были добавлены вручную. Если товары не участвуют в акции или добавлены в нее автоматически, параметр возвращается со значением &#x60;false&#x60;.  Для прошедших акций всегда возвращается со значением &#x60;true&#x60;.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
   * @return participating
  **/
  public Boolean getParticipating() {
    return participating;
  }

  /**
    * Set participating
  **/
  public void setParticipating(Boolean participating) {
    this.participating = participating;
  }

  public GetPromoDTO participating(Boolean participating) {
    this.participating = participating;
    return this;
  }

 /**
   * Get assortmentInfo
   * @return assortmentInfo
  **/
  public GetPromoAssortmentInfoDTO getAssortmentInfo() {
    return assortmentInfo;
  }

  /**
    * Set assortmentInfo
  **/
  public void setAssortmentInfo(GetPromoAssortmentInfoDTO assortmentInfo) {
    this.assortmentInfo = assortmentInfo;
  }

  public GetPromoDTO assortmentInfo(GetPromoAssortmentInfoDTO assortmentInfo) {
    this.assortmentInfo = assortmentInfo;
    return this;
  }

 /**
   * Get mechanicsInfo
   * @return mechanicsInfo
  **/
  public GetPromoMechanicsInfoDTO getMechanicsInfo() {
    return mechanicsInfo;
  }

  /**
    * Set mechanicsInfo
  **/
  public void setMechanicsInfo(GetPromoMechanicsInfoDTO mechanicsInfo) {
    this.mechanicsInfo = mechanicsInfo;
  }

  public GetPromoDTO mechanicsInfo(GetPromoMechanicsInfoDTO mechanicsInfo) {
    this.mechanicsInfo = mechanicsInfo;
    return this;
  }

 /**
   * Get bestsellerInfo
   * @return bestsellerInfo
  **/
  public GetPromoBestsellerInfoDTO getBestsellerInfo() {
    return bestsellerInfo;
  }

  /**
    * Set bestsellerInfo
  **/
  public void setBestsellerInfo(GetPromoBestsellerInfoDTO bestsellerInfo) {
    this.bestsellerInfo = bestsellerInfo;
  }

  public GetPromoDTO bestsellerInfo(GetPromoBestsellerInfoDTO bestsellerInfo) {
    this.bestsellerInfo = bestsellerInfo;
    return this;
  }

 /**
   * Список каналов продвижения товаров.
   * @return channels
  **/
  public List<ChannelType> getChannels() {
    return channels;
  }

  /**
    * Set channels
  **/
  public void setChannels(List<ChannelType> channels) {
    this.channels = channels;
  }

  public GetPromoDTO channels(List<ChannelType> channels) {
    this.channels = channels;
    return this;
  }

  public GetPromoDTO addChannelsItem(ChannelType channelsItem) {
    this.channels.add(channelsItem);
    return this;
  }

 /**
   * Get constraints
   * @return constraints
  **/
  public GetPromoConstraintsDTO getConstraints() {
    return constraints;
  }

  /**
    * Set constraints
  **/
  public void setConstraints(GetPromoConstraintsDTO constraints) {
    this.constraints = constraints;
  }

  public GetPromoDTO constraints(GetPromoConstraintsDTO constraints) {
    this.constraints = constraints;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPromoDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    participating: ").append(toIndentedString(participating)).append("\n");
    sb.append("    assortmentInfo: ").append(toIndentedString(assortmentInfo)).append("\n");
    sb.append("    mechanicsInfo: ").append(toIndentedString(mechanicsInfo)).append("\n");
    sb.append("    bestsellerInfo: ").append(toIndentedString(bestsellerInfo)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

