/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CampaignSettingsTimePeriodDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Расписание работы службы доставки в своем регионе.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CampaignSettingsScheduleDTO {
  public static final String SERIALIZED_NAME_AVAILABLE_ON_HOLIDAYS = "availableOnHolidays";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ON_HOLIDAYS)
  private Boolean availableOnHolidays;

  public static final String SERIALIZED_NAME_CUSTOM_HOLIDAYS = "customHolidays";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HOLIDAYS)
  private List<String> customHolidays = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_WORKING_DAYS = "customWorkingDays";
  @SerializedName(SERIALIZED_NAME_CUSTOM_WORKING_DAYS)
  private List<String> customWorkingDays = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private CampaignSettingsTimePeriodDTO period;

  public static final String SERIALIZED_NAME_TOTAL_HOLIDAYS = "totalHolidays";
  @SerializedName(SERIALIZED_NAME_TOTAL_HOLIDAYS)
  private List<String> totalHolidays = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEEKLY_HOLIDAYS = "weeklyHolidays";
  @SerializedName(SERIALIZED_NAME_WEEKLY_HOLIDAYS)
  private List<Integer> weeklyHolidays = new ArrayList<>();

  public CampaignSettingsScheduleDTO() {
  }

  public CampaignSettingsScheduleDTO availableOnHolidays(Boolean availableOnHolidays) {
    this.availableOnHolidays = availableOnHolidays;
    return this;
  }

  /**
   * Признак работы службы доставки в государственные праздники. Возможные значения. * &#x60;false&#x60; — служба доставки не работает в праздничные дни. * &#x60;true&#x60; — служба доставки работает в праздничные дни. 
   * @return availableOnHolidays
   */
  @javax.annotation.Nullable
  public Boolean getAvailableOnHolidays() {
    return availableOnHolidays;
  }

  public void setAvailableOnHolidays(Boolean availableOnHolidays) {
    this.availableOnHolidays = availableOnHolidays;
  }


  public CampaignSettingsScheduleDTO customHolidays(List<String> customHolidays) {
    this.customHolidays = customHolidays;
    return this;
  }

  public CampaignSettingsScheduleDTO addCustomHolidaysItem(String customHolidaysItem) {
    if (this.customHolidays == null) {
      this.customHolidays = new ArrayList<>();
    }
    this.customHolidays.add(customHolidaysItem);
    return this;
  }

  /**
   * Список дней, в которые служба доставки не работает. Дни магазин указал в кабинете продавца на Маркете.
   * @return customHolidays
   */
  @javax.annotation.Nonnull
  public List<String> getCustomHolidays() {
    return customHolidays;
  }

  public void setCustomHolidays(List<String> customHolidays) {
    this.customHolidays = customHolidays;
  }


  public CampaignSettingsScheduleDTO customWorkingDays(List<String> customWorkingDays) {
    this.customWorkingDays = customWorkingDays;
    return this;
  }

  public CampaignSettingsScheduleDTO addCustomWorkingDaysItem(String customWorkingDaysItem) {
    if (this.customWorkingDays == null) {
      this.customWorkingDays = new ArrayList<>();
    }
    this.customWorkingDays.add(customWorkingDaysItem);
    return this;
  }

  /**
   * Список выходных и праздничных дней, в которые служба доставки работает. Дни магазин указал в кабинете продавца на Маркете.
   * @return customWorkingDays
   */
  @javax.annotation.Nonnull
  public List<String> getCustomWorkingDays() {
    return customWorkingDays;
  }

  public void setCustomWorkingDays(List<String> customWorkingDays) {
    this.customWorkingDays = customWorkingDays;
  }


  public CampaignSettingsScheduleDTO period(CampaignSettingsTimePeriodDTO period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public CampaignSettingsTimePeriodDTO getPeriod() {
    return period;
  }

  public void setPeriod(CampaignSettingsTimePeriodDTO period) {
    this.period = period;
  }


  public CampaignSettingsScheduleDTO totalHolidays(List<String> totalHolidays) {
    this.totalHolidays = totalHolidays;
    return this;
  }

  public CampaignSettingsScheduleDTO addTotalHolidaysItem(String totalHolidaysItem) {
    if (this.totalHolidays == null) {
      this.totalHolidays = new ArrayList<>();
    }
    this.totalHolidays.add(totalHolidaysItem);
    return this;
  }

  /**
   * Итоговый список нерабочих дней службы доставки. Список рассчитывается с учетом выходных, нерабочих дней и государственных праздников. Информацию по ним магазин указывает в кабинете продавца на Маркете.
   * @return totalHolidays
   */
  @javax.annotation.Nonnull
  public List<String> getTotalHolidays() {
    return totalHolidays;
  }

  public void setTotalHolidays(List<String> totalHolidays) {
    this.totalHolidays = totalHolidays;
  }


  public CampaignSettingsScheduleDTO weeklyHolidays(List<Integer> weeklyHolidays) {
    this.weeklyHolidays = weeklyHolidays;
    return this;
  }

  public CampaignSettingsScheduleDTO addWeeklyHolidaysItem(Integer weeklyHolidaysItem) {
    if (this.weeklyHolidays == null) {
      this.weeklyHolidays = new ArrayList<>();
    }
    this.weeklyHolidays.add(weeklyHolidaysItem);
    return this;
  }

  /**
   * Список выходных дней недели и государственных праздников.
   * @return weeklyHolidays
   */
  @javax.annotation.Nonnull
  public List<Integer> getWeeklyHolidays() {
    return weeklyHolidays;
  }

  public void setWeeklyHolidays(List<Integer> weeklyHolidays) {
    this.weeklyHolidays = weeklyHolidays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignSettingsScheduleDTO campaignSettingsScheduleDTO = (CampaignSettingsScheduleDTO) o;
    return Objects.equals(this.availableOnHolidays, campaignSettingsScheduleDTO.availableOnHolidays) &&
        Objects.equals(this.customHolidays, campaignSettingsScheduleDTO.customHolidays) &&
        Objects.equals(this.customWorkingDays, campaignSettingsScheduleDTO.customWorkingDays) &&
        Objects.equals(this.period, campaignSettingsScheduleDTO.period) &&
        Objects.equals(this.totalHolidays, campaignSettingsScheduleDTO.totalHolidays) &&
        Objects.equals(this.weeklyHolidays, campaignSettingsScheduleDTO.weeklyHolidays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableOnHolidays, customHolidays, customWorkingDays, period, totalHolidays, weeklyHolidays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignSettingsScheduleDTO {\n");
    sb.append("    availableOnHolidays: ").append(toIndentedString(availableOnHolidays)).append("\n");
    sb.append("    customHolidays: ").append(toIndentedString(customHolidays)).append("\n");
    sb.append("    customWorkingDays: ").append(toIndentedString(customWorkingDays)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    totalHolidays: ").append(toIndentedString(totalHolidays)).append("\n");
    sb.append("    weeklyHolidays: ").append(toIndentedString(weeklyHolidays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableOnHolidays");
    openapiFields.add("customHolidays");
    openapiFields.add("customWorkingDays");
    openapiFields.add("period");
    openapiFields.add("totalHolidays");
    openapiFields.add("weeklyHolidays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customHolidays");
    openapiRequiredFields.add("customWorkingDays");
    openapiRequiredFields.add("totalHolidays");
    openapiRequiredFields.add("weeklyHolidays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CampaignSettingsScheduleDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignSettingsScheduleDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignSettingsScheduleDTO is not found in the empty JSON string", CampaignSettingsScheduleDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignSettingsScheduleDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignSettingsScheduleDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignSettingsScheduleDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("customHolidays") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("customHolidays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHolidays` to be an array in the JSON string but got `%s`", jsonObj.get("customHolidays").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("customWorkingDays") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("customWorkingDays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customWorkingDays` to be an array in the JSON string but got `%s`", jsonObj.get("customWorkingDays").toString()));
      }
      // validate the optional field `period`
      if (jsonObj.get("period") != null && !jsonObj.get("period").isJsonNull()) {
        CampaignSettingsTimePeriodDTO.validateJsonElement(jsonObj.get("period"));
      }
      // ensure the required json array is present
      if (jsonObj.get("totalHolidays") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("totalHolidays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalHolidays` to be an array in the JSON string but got `%s`", jsonObj.get("totalHolidays").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("weeklyHolidays") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("weeklyHolidays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `weeklyHolidays` to be an array in the JSON string but got `%s`", jsonObj.get("weeklyHolidays").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignSettingsScheduleDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignSettingsScheduleDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignSettingsScheduleDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignSettingsScheduleDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignSettingsScheduleDTO>() {
           @Override
           public void write(JsonWriter out, CampaignSettingsScheduleDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignSettingsScheduleDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CampaignSettingsScheduleDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CampaignSettingsScheduleDTO
   * @throws IOException if the JSON string is invalid with respect to CampaignSettingsScheduleDTO
   */
  public static CampaignSettingsScheduleDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignSettingsScheduleDTO.class);
  }

  /**
   * Convert an instance of CampaignSettingsScheduleDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

