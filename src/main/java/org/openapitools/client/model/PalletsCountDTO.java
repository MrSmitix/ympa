/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;



/**
  * Количество палет в отгрузке.
 **/

public class PalletsCountDTO  {
  
 /**
   * Количество палет, которое заявил продавец.
  **/
  private Integer planned;

 /**
   * Количество палет, которое приняли в сортировочном центре.
  **/
  private Integer fact;

 /**
   * Количество палет, которое заявил продавец.
   * @return planned
  **/
  public Integer getPlanned() {
    return planned;
  }

  /**
    * Set planned
  **/
  public void setPlanned(Integer planned) {
    this.planned = planned;
  }

  public PalletsCountDTO planned(Integer planned) {
    this.planned = planned;
    return this;
  }

 /**
   * Количество палет, которое приняли в сортировочном центре.
   * @return fact
  **/
  public Integer getFact() {
    return fact;
  }

  /**
    * Set fact
  **/
  public void setFact(Integer fact) {
    this.fact = fact;
  }

  public PalletsCountDTO fact(Integer fact) {
    this.fact = fact;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PalletsCountDTO {\n");
    
    sb.append("    planned: ").append(toIndentedString(planned)).append("\n");
    sb.append("    fact: ").append(toIndentedString(fact)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

