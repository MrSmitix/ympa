/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderStatsStatusType;
import org.openapitools.client.model.OrdersStatsCommissionDTO;
import org.openapitools.client.model.OrdersStatsDeliveryRegionDTO;
import org.openapitools.client.model.OrdersStatsItemDTO;
import org.openapitools.client.model.OrdersStatsOrderPaymentType;
import org.openapitools.client.model.OrdersStatsPaymentDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Информация о заказе.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrdersStatsOrderDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private LocalDate creationDate;

  public static final String SERIALIZED_NAME_STATUS_UPDATE_DATE = "statusUpdateDate";
  @SerializedName(SERIALIZED_NAME_STATUS_UPDATE_DATE)
  private OffsetDateTime statusUpdateDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OrderStatsStatusType status;

  public static final String SERIALIZED_NAME_PARTNER_ORDER_ID = "partnerOrderId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ORDER_ID)
  private String partnerOrderId;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private OrdersStatsOrderPaymentType paymentType;

  public static final String SERIALIZED_NAME_FAKE = "fake";
  @SerializedName(SERIALIZED_NAME_FAKE)
  private Boolean fake;

  public static final String SERIALIZED_NAME_DELIVERY_REGION = "deliveryRegion";
  @SerializedName(SERIALIZED_NAME_DELIVERY_REGION)
  private OrdersStatsDeliveryRegionDTO deliveryRegion;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrdersStatsItemDTO> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_INITIAL_ITEMS = "initialItems";
  @SerializedName(SERIALIZED_NAME_INITIAL_ITEMS)
  private List<OrdersStatsItemDTO> initialItems;

  public static final String SERIALIZED_NAME_PAYMENTS = "payments";
  @SerializedName(SERIALIZED_NAME_PAYMENTS)
  private List<OrdersStatsPaymentDTO> payments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMISSIONS = "commissions";
  @SerializedName(SERIALIZED_NAME_COMMISSIONS)
  private List<OrdersStatsCommissionDTO> commissions = new ArrayList<>();

  public OrdersStatsOrderDTO() {
  }

  public OrdersStatsOrderDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор заказа.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public OrdersStatsOrderDTO creationDate(LocalDate creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Дата создания заказа.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
   * @return creationDate
   */
  @javax.annotation.Nullable
  public LocalDate getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(LocalDate creationDate) {
    this.creationDate = creationDate;
  }


  public OrdersStatsOrderDTO statusUpdateDate(OffsetDateTime statusUpdateDate) {
    this.statusUpdateDate = statusUpdateDate;
    return this;
  }

  /**
   * Дата и время, когда статус заказа был изменен в последний раз.  Формат даты и времени: ISO 8601. Например, &#x60;2017-11-21T00:00:00&#x60;. Часовой пояс — UTC+03:00 (Москва). 
   * @return statusUpdateDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStatusUpdateDate() {
    return statusUpdateDate;
  }

  public void setStatusUpdateDate(OffsetDateTime statusUpdateDate) {
    this.statusUpdateDate = statusUpdateDate;
  }


  public OrdersStatsOrderDTO status(OrderStatsStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OrderStatsStatusType getStatus() {
    return status;
  }

  public void setStatus(OrderStatsStatusType status) {
    this.status = status;
  }


  public OrdersStatsOrderDTO partnerOrderId(String partnerOrderId) {
    this.partnerOrderId = partnerOrderId;
    return this;
  }

  /**
   * Идентификатор заказа в информационной системе магазина.
   * @return partnerOrderId
   */
  @javax.annotation.Nullable
  public String getPartnerOrderId() {
    return partnerOrderId;
  }

  public void setPartnerOrderId(String partnerOrderId) {
    this.partnerOrderId = partnerOrderId;
  }


  public OrdersStatsOrderDTO paymentType(OrdersStatsOrderPaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public OrdersStatsOrderPaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(OrdersStatsOrderPaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public OrdersStatsOrderDTO fake(Boolean fake) {
    this.fake = fake;
    return this;
  }

  /**
   * Тип заказа:  * &#x60;false&#x60; — настоящий заказ покупателя.  * &#x60;true&#x60; — [тестовый](../../pushapi/concepts/sandbox.md) заказ Маркета. 
   * @return fake
   */
  @javax.annotation.Nullable
  public Boolean getFake() {
    return fake;
  }

  public void setFake(Boolean fake) {
    this.fake = fake;
  }


  public OrdersStatsOrderDTO deliveryRegion(OrdersStatsDeliveryRegionDTO deliveryRegion) {
    this.deliveryRegion = deliveryRegion;
    return this;
  }

  /**
   * Get deliveryRegion
   * @return deliveryRegion
   */
  @javax.annotation.Nullable
  public OrdersStatsDeliveryRegionDTO getDeliveryRegion() {
    return deliveryRegion;
  }

  public void setDeliveryRegion(OrdersStatsDeliveryRegionDTO deliveryRegion) {
    this.deliveryRegion = deliveryRegion;
  }


  public OrdersStatsOrderDTO items(List<OrdersStatsItemDTO> items) {
    this.items = items;
    return this;
  }

  public OrdersStatsOrderDTO addItemsItem(OrdersStatsItemDTO itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Список товаров в заказе после возможных изменений.
   * @return items
   */
  @javax.annotation.Nonnull
  public List<OrdersStatsItemDTO> getItems() {
    return items;
  }

  public void setItems(List<OrdersStatsItemDTO> items) {
    this.items = items;
  }


  public OrdersStatsOrderDTO initialItems(List<OrdersStatsItemDTO> initialItems) {
    this.initialItems = initialItems;
    return this;
  }

  public OrdersStatsOrderDTO addInitialItemsItem(OrdersStatsItemDTO initialItemsItem) {
    if (this.initialItems == null) {
      this.initialItems = new ArrayList<>();
    }
    this.initialItems.add(initialItemsItem);
    return this;
  }

  /**
   * Список товаров в заказе до изменений.
   * @return initialItems
   */
  @javax.annotation.Nullable
  public List<OrdersStatsItemDTO> getInitialItems() {
    return initialItems;
  }

  public void setInitialItems(List<OrdersStatsItemDTO> initialItems) {
    this.initialItems = initialItems;
  }


  public OrdersStatsOrderDTO payments(List<OrdersStatsPaymentDTO> payments) {
    this.payments = payments;
    return this;
  }

  public OrdersStatsOrderDTO addPaymentsItem(OrdersStatsPaymentDTO paymentsItem) {
    if (this.payments == null) {
      this.payments = new ArrayList<>();
    }
    this.payments.add(paymentsItem);
    return this;
  }

  /**
   * Информация о денежных переводах по заказу.
   * @return payments
   */
  @javax.annotation.Nonnull
  public List<OrdersStatsPaymentDTO> getPayments() {
    return payments;
  }

  public void setPayments(List<OrdersStatsPaymentDTO> payments) {
    this.payments = payments;
  }


  public OrdersStatsOrderDTO commissions(List<OrdersStatsCommissionDTO> commissions) {
    this.commissions = commissions;
    return this;
  }

  public OrdersStatsOrderDTO addCommissionsItem(OrdersStatsCommissionDTO commissionsItem) {
    if (this.commissions == null) {
      this.commissions = new ArrayList<>();
    }
    this.commissions.add(commissionsItem);
    return this;
  }

  /**
   * Информация о комиссиях за заказ.
   * @return commissions
   */
  @javax.annotation.Nonnull
  public List<OrdersStatsCommissionDTO> getCommissions() {
    return commissions;
  }

  public void setCommissions(List<OrdersStatsCommissionDTO> commissions) {
    this.commissions = commissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersStatsOrderDTO ordersStatsOrderDTO = (OrdersStatsOrderDTO) o;
    return Objects.equals(this.id, ordersStatsOrderDTO.id) &&
        Objects.equals(this.creationDate, ordersStatsOrderDTO.creationDate) &&
        Objects.equals(this.statusUpdateDate, ordersStatsOrderDTO.statusUpdateDate) &&
        Objects.equals(this.status, ordersStatsOrderDTO.status) &&
        Objects.equals(this.partnerOrderId, ordersStatsOrderDTO.partnerOrderId) &&
        Objects.equals(this.paymentType, ordersStatsOrderDTO.paymentType) &&
        Objects.equals(this.fake, ordersStatsOrderDTO.fake) &&
        Objects.equals(this.deliveryRegion, ordersStatsOrderDTO.deliveryRegion) &&
        Objects.equals(this.items, ordersStatsOrderDTO.items) &&
        Objects.equals(this.initialItems, ordersStatsOrderDTO.initialItems) &&
        Objects.equals(this.payments, ordersStatsOrderDTO.payments) &&
        Objects.equals(this.commissions, ordersStatsOrderDTO.commissions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, creationDate, statusUpdateDate, status, partnerOrderId, paymentType, fake, deliveryRegion, items, initialItems, payments, commissions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersStatsOrderDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    statusUpdateDate: ").append(toIndentedString(statusUpdateDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    partnerOrderId: ").append(toIndentedString(partnerOrderId)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    fake: ").append(toIndentedString(fake)).append("\n");
    sb.append("    deliveryRegion: ").append(toIndentedString(deliveryRegion)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    initialItems: ").append(toIndentedString(initialItems)).append("\n");
    sb.append("    payments: ").append(toIndentedString(payments)).append("\n");
    sb.append("    commissions: ").append(toIndentedString(commissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("creationDate");
    openapiFields.add("statusUpdateDate");
    openapiFields.add("status");
    openapiFields.add("partnerOrderId");
    openapiFields.add("paymentType");
    openapiFields.add("fake");
    openapiFields.add("deliveryRegion");
    openapiFields.add("items");
    openapiFields.add("initialItems");
    openapiFields.add("payments");
    openapiFields.add("commissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("payments");
    openapiRequiredFields.add("commissions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrdersStatsOrderDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrdersStatsOrderDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrdersStatsOrderDTO is not found in the empty JSON string", OrdersStatsOrderDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrdersStatsOrderDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrdersStatsOrderDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrdersStatsOrderDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        OrderStatsStatusType.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("partnerOrderId") != null && !jsonObj.get("partnerOrderId").isJsonNull()) && !jsonObj.get("partnerOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerOrderId").toString()));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        OrdersStatsOrderPaymentType.validateJsonElement(jsonObj.get("paymentType"));
      }
      // validate the optional field `deliveryRegion`
      if (jsonObj.get("deliveryRegion") != null && !jsonObj.get("deliveryRegion").isJsonNull()) {
        OrdersStatsDeliveryRegionDTO.validateJsonElement(jsonObj.get("deliveryRegion"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("items").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
      }

      JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
      // validate the required field `items` (array)
      for (int i = 0; i < jsonArrayitems.size(); i++) {
        OrdersStatsItemDTO.validateJsonElement(jsonArrayitems.get(i));
      };
      if (jsonObj.get("initialItems") != null && !jsonObj.get("initialItems").isJsonNull()) {
        JsonArray jsonArrayinitialItems = jsonObj.getAsJsonArray("initialItems");
        if (jsonArrayinitialItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("initialItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `initialItems` to be an array in the JSON string but got `%s`", jsonObj.get("initialItems").toString()));
          }

          // validate the optional field `initialItems` (array)
          for (int i = 0; i < jsonArrayinitialItems.size(); i++) {
            OrdersStatsItemDTO.validateJsonElement(jsonArrayinitialItems.get(i));
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("payments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `payments` to be an array in the JSON string but got `%s`", jsonObj.get("payments").toString()));
      }

      JsonArray jsonArraypayments = jsonObj.getAsJsonArray("payments");
      // validate the required field `payments` (array)
      for (int i = 0; i < jsonArraypayments.size(); i++) {
        OrdersStatsPaymentDTO.validateJsonElement(jsonArraypayments.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("commissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commissions` to be an array in the JSON string but got `%s`", jsonObj.get("commissions").toString()));
      }

      JsonArray jsonArraycommissions = jsonObj.getAsJsonArray("commissions");
      // validate the required field `commissions` (array)
      for (int i = 0; i < jsonArraycommissions.size(); i++) {
        OrdersStatsCommissionDTO.validateJsonElement(jsonArraycommissions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrdersStatsOrderDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrdersStatsOrderDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrdersStatsOrderDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrdersStatsOrderDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrdersStatsOrderDTO>() {
           @Override
           public void write(JsonWriter out, OrdersStatsOrderDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrdersStatsOrderDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrdersStatsOrderDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrdersStatsOrderDTO
   * @throws IOException if the JSON string is invalid with respect to OrdersStatsOrderDTO
   */
  public static OrdersStatsOrderDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrdersStatsOrderDTO.class);
  }

  /**
   * Convert an instance of OrdersStatsOrderDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

