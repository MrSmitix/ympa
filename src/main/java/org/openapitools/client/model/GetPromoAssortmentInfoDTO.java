/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Информация о товарах в акции.
 **/
@ApiModel(description = "Информация о товарах в акции.")
public class GetPromoAssortmentInfoDTO {
  
  @SerializedName("activeOffers")
  private Integer activeOffers = null;
  @SerializedName("potentialOffers")
  private Integer potentialOffers = null;
  @SerializedName("processing")
  private Boolean processing = null;

  /**
   * Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). 
   **/
  @ApiModelProperty(required = true, value = "Количество товаров, которые участвуют или участвовали в акции.  Учитываются только товары, которые были добавлены вручную.  Об автоматическом и ручном добавлении товаров в акцию читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/promos/market/index). ")
  public Integer getActiveOffers() {
    return activeOffers;
  }
  public void setActiveOffers(Integer activeOffers) {
    this.activeOffers = activeOffers;
  }

  /**
   * Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. 
   **/
  @ApiModelProperty(value = "Количество доступных товаров в акции.  Параметр возвращается только для текущих и будущих акций. ")
  public Integer getPotentialOffers() {
    return potentialOffers;
  }
  public void setPotentialOffers(Integer potentialOffers) {
    this.potentialOffers = potentialOffers;
  }

  /**
   * Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. 
   **/
  @ApiModelProperty(value = "Есть ли изменения в ассортименте, которые еще не применились. Сохранение изменений занимает некоторое время.  Параметр возвращается только для текущих и будущих акций. ")
  public Boolean getProcessing() {
    return processing;
  }
  public void setProcessing(Boolean processing) {
    this.processing = processing;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPromoAssortmentInfoDTO getPromoAssortmentInfoDTO = (GetPromoAssortmentInfoDTO) o;
    return (this.activeOffers == null ? getPromoAssortmentInfoDTO.activeOffers == null : this.activeOffers.equals(getPromoAssortmentInfoDTO.activeOffers)) &&
        (this.potentialOffers == null ? getPromoAssortmentInfoDTO.potentialOffers == null : this.potentialOffers.equals(getPromoAssortmentInfoDTO.potentialOffers)) &&
        (this.processing == null ? getPromoAssortmentInfoDTO.processing == null : this.processing.equals(getPromoAssortmentInfoDTO.processing));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.activeOffers == null ? 0: this.activeOffers.hashCode());
    result = 31 * result + (this.potentialOffers == null ? 0: this.potentialOffers.hashCode());
    result = 31 * result + (this.processing == null ? 0: this.processing.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPromoAssortmentInfoDTO {\n");
    
    sb.append("  activeOffers: ").append(activeOffers).append("\n");
    sb.append("  potentialOffers: ").append(potentialOffers).append("\n");
    sb.append("  processing: ").append(processing).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
