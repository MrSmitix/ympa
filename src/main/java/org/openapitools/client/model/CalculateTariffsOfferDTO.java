/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Параметры товара, для которого нужно рассчитать стоимость услуг.
 **/
@ApiModel(description = "Параметры товара, для которого нужно рассчитать стоимость услуг.")
public class CalculateTariffsOfferDTO {
  
  @SerializedName("categoryId")
  private Long categoryId = null;
  @SerializedName("price")
  private BigDecimal price = null;
  @SerializedName("length")
  private BigDecimal length = null;
  @SerializedName("width")
  private BigDecimal width = null;
  @SerializedName("height")
  private BigDecimal height = null;
  @SerializedName("weight")
  private BigDecimal weight = null;
  @SerializedName("quantity")
  private Integer quantity = 1;

  /**
   * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   * minimum: 0
   **/
  @ApiModelProperty(required = true, value = "Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). ")
  public Long getCategoryId() {
    return categoryId;
  }
  public void setCategoryId(Long categoryId) {
    this.categoryId = categoryId;
  }

  /**
   * Цена на товар в рублях.
   * minimum: 0
   **/
  @ApiModelProperty(required = true, value = "Цена на товар в рублях.")
  public BigDecimal getPrice() {
    return price;
  }
  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  /**
   * Длина товара в сантиметрах.
   * minimum: 0
   **/
  @ApiModelProperty(required = true, value = "Длина товара в сантиметрах.")
  public BigDecimal getLength() {
    return length;
  }
  public void setLength(BigDecimal length) {
    this.length = length;
  }

  /**
   * Ширина товара в сантиметрах.
   * minimum: 0
   **/
  @ApiModelProperty(required = true, value = "Ширина товара в сантиметрах.")
  public BigDecimal getWidth() {
    return width;
  }
  public void setWidth(BigDecimal width) {
    this.width = width;
  }

  /**
   * Высота товара в сантиметрах.
   * minimum: 0
   **/
  @ApiModelProperty(required = true, value = "Высота товара в сантиметрах.")
  public BigDecimal getHeight() {
    return height;
  }
  public void setHeight(BigDecimal height) {
    this.height = height;
  }

  /**
   * Вес товара в килограммах.
   * minimum: 0
   **/
  @ApiModelProperty(required = true, value = "Вес товара в килограммах.")
  public BigDecimal getWeight() {
    return weight;
  }
  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }

  /**
   * Квант продажи — количество единиц товара в одном товарном предложении.
   * minimum: 1
   **/
  @ApiModelProperty(value = "Квант продажи — количество единиц товара в одном товарном предложении.")
  public Integer getQuantity() {
    return quantity;
  }
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateTariffsOfferDTO calculateTariffsOfferDTO = (CalculateTariffsOfferDTO) o;
    return (this.categoryId == null ? calculateTariffsOfferDTO.categoryId == null : this.categoryId.equals(calculateTariffsOfferDTO.categoryId)) &&
        (this.price == null ? calculateTariffsOfferDTO.price == null : this.price.equals(calculateTariffsOfferDTO.price)) &&
        (this.length == null ? calculateTariffsOfferDTO.length == null : this.length.equals(calculateTariffsOfferDTO.length)) &&
        (this.width == null ? calculateTariffsOfferDTO.width == null : this.width.equals(calculateTariffsOfferDTO.width)) &&
        (this.height == null ? calculateTariffsOfferDTO.height == null : this.height.equals(calculateTariffsOfferDTO.height)) &&
        (this.weight == null ? calculateTariffsOfferDTO.weight == null : this.weight.equals(calculateTariffsOfferDTO.weight)) &&
        (this.quantity == null ? calculateTariffsOfferDTO.quantity == null : this.quantity.equals(calculateTariffsOfferDTO.quantity));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.categoryId == null ? 0: this.categoryId.hashCode());
    result = 31 * result + (this.price == null ? 0: this.price.hashCode());
    result = 31 * result + (this.length == null ? 0: this.length.hashCode());
    result = 31 * result + (this.width == null ? 0: this.width.hashCode());
    result = 31 * result + (this.height == null ? 0: this.height.hashCode());
    result = 31 * result + (this.weight == null ? 0: this.weight.hashCode());
    result = 31 * result + (this.quantity == null ? 0: this.quantity.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTariffsOfferDTO {\n");
    
    sb.append("  categoryId: ").append(categoryId).append("\n");
    sb.append("  price: ").append(price).append("\n");
    sb.append("  length: ").append(length).append("\n");
    sb.append("  width: ").append(width).append("\n");
    sb.append("  height: ").append(height).append("\n");
    sb.append("  weight: ").append(weight).append("\n");
    sb.append("  quantity: ").append(quantity).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
