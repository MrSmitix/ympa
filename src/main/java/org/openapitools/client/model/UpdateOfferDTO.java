/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AgeDTO;
import org.openapitools.client.model.BasePriceDTO;
import org.openapitools.client.model.OfferConditionDTO;
import org.openapitools.client.model.OfferManualDTO;
import org.openapitools.client.model.OfferParamDTO;
import org.openapitools.client.model.OfferType;
import org.openapitools.client.model.OfferWeightDimensionsDTO;
import org.openapitools.client.model.ParameterValueDTO;
import org.openapitools.client.model.TimePeriodDTO;
import org.openapitools.client.model.UpdatePriceWithDiscountDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Параметры товара.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class UpdateOfferDTO {
  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MARKET_CATEGORY_ID = "marketCategoryId";
  @SerializedName(SERIALIZED_NAME_MARKET_CATEGORY_ID)
  private Long marketCategoryId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_PICTURES = "pictures";
  @SerializedName(SERIALIZED_NAME_PICTURES)
  private List<String> pictures;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private List<String> videos;

  public static final String SERIALIZED_NAME_MANUALS = "manuals";
  @SerializedName(SERIALIZED_NAME_MANUALS)
  private List<OfferManualDTO> manuals;

  public static final String SERIALIZED_NAME_VENDOR = "vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private String vendor;

  public static final String SERIALIZED_NAME_BARCODES = "barcodes";
  @SerializedName(SERIALIZED_NAME_BARCODES)
  private List<String> barcodes;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MANUFACTURER_COUNTRIES = "manufacturerCountries";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER_COUNTRIES)
  private List<String> manufacturerCountries;

  public static final String SERIALIZED_NAME_WEIGHT_DIMENSIONS = "weightDimensions";
  @SerializedName(SERIALIZED_NAME_WEIGHT_DIMENSIONS)
  private OfferWeightDimensionsDTO weightDimensions;

  public static final String SERIALIZED_NAME_VENDOR_CODE = "vendorCode";
  @SerializedName(SERIALIZED_NAME_VENDOR_CODE)
  private String vendorCode;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags;

  public static final String SERIALIZED_NAME_SHELF_LIFE = "shelfLife";
  @SerializedName(SERIALIZED_NAME_SHELF_LIFE)
  private TimePeriodDTO shelfLife;

  public static final String SERIALIZED_NAME_LIFE_TIME = "lifeTime";
  @SerializedName(SERIALIZED_NAME_LIFE_TIME)
  private TimePeriodDTO lifeTime;

  public static final String SERIALIZED_NAME_GUARANTEE_PERIOD = "guaranteePeriod";
  @SerializedName(SERIALIZED_NAME_GUARANTEE_PERIOD)
  private TimePeriodDTO guaranteePeriod;

  public static final String SERIALIZED_NAME_CUSTOMS_COMMODITY_CODE = "customsCommodityCode";
  @SerializedName(SERIALIZED_NAME_CUSTOMS_COMMODITY_CODE)
  private String customsCommodityCode;

  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<String> certificates;

  public static final String SERIALIZED_NAME_BOX_COUNT = "boxCount";
  @SerializedName(SERIALIZED_NAME_BOX_COUNT)
  private Integer boxCount;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private OfferConditionDTO condition;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private OfferType type;

  public static final String SERIALIZED_NAME_DOWNLOADABLE = "downloadable";
  @SerializedName(SERIALIZED_NAME_DOWNLOADABLE)
  private Boolean downloadable;

  public static final String SERIALIZED_NAME_ADULT = "adult";
  @SerializedName(SERIALIZED_NAME_ADULT)
  private Boolean adult;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private AgeDTO age;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private List<OfferParamDTO> params;

  public static final String SERIALIZED_NAME_PARAMETER_VALUES = "parameterValues";
  @SerializedName(SERIALIZED_NAME_PARAMETER_VALUES)
  private List<ParameterValueDTO> parameterValues;

  public static final String SERIALIZED_NAME_BASIC_PRICE = "basicPrice";
  @SerializedName(SERIALIZED_NAME_BASIC_PRICE)
  private UpdatePriceWithDiscountDTO basicPrice;

  public static final String SERIALIZED_NAME_PURCHASE_PRICE = "purchasePrice";
  @SerializedName(SERIALIZED_NAME_PURCHASE_PRICE)
  private BasePriceDTO purchasePrice;

  public static final String SERIALIZED_NAME_ADDITIONAL_EXPENSES = "additionalExpenses";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_EXPENSES)
  private BasePriceDTO additionalExpenses;

  public static final String SERIALIZED_NAME_COFINANCE_PRICE = "cofinancePrice";
  @SerializedName(SERIALIZED_NAME_COFINANCE_PRICE)
  private BasePriceDTO cofinancePrice;

  public UpdateOfferDTO() {
  }

  public UpdateOfferDTO offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   * @return offerId
   */
  @javax.annotation.Nonnull
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public UpdateOfferDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Составляйте название по схеме: тип + бренд или производитель + модель + особенности, если есть (например, цвет, размер или вес) и количество в упаковке.  Не включайте в название условия продажи (например, «скидка», «бесплатная доставка» и т. д.), эмоциональные характеристики («хит», «супер» и т. д.). Не пишите слова большими буквами — кроме устоявшихся названий брендов и моделей.  Оптимальная длина — 50–60 символов, максимальная — 256.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/title.html) 
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateOfferDTO marketCategoryId(Long marketCategoryId) {
    this.marketCategoryId = marketCategoryId;
    return this;
  }

  /**
   * Идентификатор категории на Маркете, к которой вы относите свой товар.  Если не указать &#x60;marketCategoryId&#x60;, то маркетная категория будет определена автоматически.  При изменении информации о товаре передавайте тот же идентификатор категории. Если вы укажете другой, категория товара не поменяется. Изменить ее можно только в кабинете продавца на Маркете.  Список категорий Маркета можно получить с помощью запроса  [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   * @return marketCategoryId
   */
  @javax.annotation.Nullable
  public Long getMarketCategoryId() {
    return marketCategoryId;
  }

  public void setMarketCategoryId(Long marketCategoryId) {
    this.marketCategoryId = marketCategoryId;
  }


  public UpdateOfferDTO category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Категория товара в вашем магазине. Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;.  Указывайте конкретные категории — например, набор ножей лучше отнести к категории **Столовые приборы**, а не просто **Посуда**.  Выбирайте категории, которые описывают товар, а не абстрактный признак — например, **Духи**, а не **Подарки**.  Значение будет использовано для определения категории товара на Маркете в случае, если вы не передали категорию в параметре &#x60;marketCategoryId&#x60;. 
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public UpdateOfferDTO pictures(List<String> pictures) {
    this.pictures = pictures;
    return this;
  }

  public UpdateOfferDTO addPicturesItem(String picturesItem) {
    if (this.pictures == null) {
      this.pictures = new ArrayList<>();
    }
    this.pictures.add(picturesItem);
    return this;
  }

  /**
   * Ссылки на изображения товара. Изображение по первой ссылке считается основным, остальные дополнительными.  **Требования к ссылкам**  * Ссылок может быть до 30. * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на изображения и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/images/sku12345.jpg&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/images/sku12345.jpg&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/tovar.jpg&#x60;  Ссылки на изображение должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить изображение, выложите новое изображение по новой ссылке, а ссылку на старое удалите. Если просто заменить изображение по старой ссылке, оно не обновится.  [Требования к изображениям](https://yandex.ru/support/marketplace/assortment/fields/images.html) 
   * @return pictures
   */
  @javax.annotation.Nullable
  public List<String> getPictures() {
    return pictures;
  }

  public void setPictures(List<String> pictures) {
    this.pictures = pictures;
  }


  public UpdateOfferDTO videos(List<String> videos) {
    this.videos = videos;
    return this;
  }

  public UpdateOfferDTO addVideosItem(String videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<>();
    }
    this.videos.add(videosItem);
    return this;
  }

  /**
   * Ссылка (URL) на видео товара.  Максимальное количество ссылок — 6.  **Требования к ссылке**  * Указывайте ссылку целиком, включая протокол http или https. * Максимальная длина — 512 символов. * Русские буквы в URL можно. * Можно использовать прямые ссылки на видео и на Яндекс Диск. Ссылки на Яндекс Диске нужно копировать с помощью функции **Поделиться**. Относительные ссылки и ссылки на другие облачные хранилища — не работают.  ✅ &#x60;https://example-shop.ru/video/sku12345.avi&#x60;  ✅ &#x60;https://yadi.sk/i/NaBoRsimVOLov&#x60;  ❌ &#x60;/video/sku12345.avi&#x60;  ❌ &#x60;https://www.dropbox.com/s/818f/super-tovar.avi&#x60;  Ссылки на видео должны быть постоянными. Нельзя использовать динамические ссылки, меняющиеся от выгрузки к выгрузке.  Если нужно заменить видео, выложите новое видео по новой ссылке, а ссылку на старое удалите. Если просто заменить видео по старой ссылке, оно не обновится.  [Требования к видео](https://yandex.ru/support/marketplace/assortment/fields/video.html) 
   * @return videos
   */
  @javax.annotation.Nullable
  public List<String> getVideos() {
    return videos;
  }

  public void setVideos(List<String> videos) {
    this.videos = videos;
  }


  public UpdateOfferDTO manuals(List<OfferManualDTO> manuals) {
    this.manuals = manuals;
    return this;
  }

  public UpdateOfferDTO addManualsItem(OfferManualDTO manualsItem) {
    if (this.manuals == null) {
      this.manuals = new ArrayList<>();
    }
    this.manuals.add(manualsItem);
    return this;
  }

  /**
   * Список инструкций по использованию товара.  Максимальное количество инструкций — 6.  Если вы передадите пустое поле &#x60;manuals&#x60;, загруженные ранее инструкции удалятся. 
   * @return manuals
   */
  @javax.annotation.Nullable
  public List<OfferManualDTO> getManuals() {
    return manuals;
  }

  public void setManuals(List<OfferManualDTO> manuals) {
    this.manuals = manuals;
  }


  public UpdateOfferDTO vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Название бренда или производителя. Должно быть записано так, как его пишет сам бренд.
   * @return vendor
   */
  @javax.annotation.Nullable
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }


  public UpdateOfferDTO barcodes(List<String> barcodes) {
    this.barcodes = barcodes;
    return this;
  }

  public UpdateOfferDTO addBarcodesItem(String barcodesItem) {
    if (this.barcodes == null) {
      this.barcodes = new ArrayList<>();
    }
    this.barcodes.add(barcodesItem);
    return this;
  }

  /**
   * Указывайте в виде последовательности цифр. Подойдут коды EAN-13, EAN-8, UPC-A, UPC-E или Code 128.  Для книг указывайте ISBN.  Для товаров [определенных категорий и торговых марок](https://yastatic.net/s3/doc-binary/src/support/market/ru/yandex-market-list-for-gtin.xlsx) штрихкод должен быть действительным кодом GTIN. Обратите внимание: внутренние штрихкоды, начинающиеся на 2 или 02, и коды формата Code 128 не являются GTIN.  [Что такое GTIN](*gtin)  
   * @return barcodes
   */
  @javax.annotation.Nullable
  public List<String> getBarcodes() {
    return barcodes;
  }

  public void setBarcodes(List<String> barcodes) {
    this.barcodes = barcodes;
  }


  public UpdateOfferDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Подробное описание товара: например, его преимущества и особенности.  Не давайте в описании инструкций по установке и сборке. Не используйте слова «скидка», «распродажа», «дешевый», «подарок» (кроме подарочных категорий), «бесплатно», «акция», «специальная цена», «новинка», «new», «аналог», «заказ», «хит». Не указывайте никакой контактной информации и не давайте ссылок.  Можно использовать теги:  * \\&lt;h&gt;, \\&lt;h1&gt;, \\&lt;h2&gt; и так далее — для заголовков; * \\&lt;br&gt; и \\&lt;p&gt; — для переноса строки; * \\&lt;ol&gt; — для нумерованного списка; * \\&lt;ul&gt; — для маркированного списка; * \\&lt;li&gt; — для создания элементов списка (должен находиться внутри \\&lt;ol&gt; или \\&lt;ul&gt;); * \\&lt;div&gt; — поддерживается, но не влияет на отображение текста.  Оптимальная длина — 400–600 символов, максимальная — 6000.  [Рекомендации и правила](https://yandex.ru/support/marketplace/assortment/fields/description.html) 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateOfferDTO manufacturerCountries(List<String> manufacturerCountries) {
    this.manufacturerCountries = manufacturerCountries;
    return this;
  }

  public UpdateOfferDTO addManufacturerCountriesItem(String manufacturerCountriesItem) {
    if (this.manufacturerCountries == null) {
      this.manufacturerCountries = new ArrayList<>();
    }
    this.manufacturerCountries.add(manufacturerCountriesItem);
    return this;
  }

  /**
   * Страна, где был произведен товар.  Записывайте названия стран так, как они записаны в [списке](https://yastatic.net/s3/doc-binary/src/support/market/ru/countries.xlsx). 
   * @return manufacturerCountries
   */
  @javax.annotation.Nullable
  public List<String> getManufacturerCountries() {
    return manufacturerCountries;
  }

  public void setManufacturerCountries(List<String> manufacturerCountries) {
    this.manufacturerCountries = manufacturerCountries;
  }


  public UpdateOfferDTO weightDimensions(OfferWeightDimensionsDTO weightDimensions) {
    this.weightDimensions = weightDimensions;
    return this;
  }

  /**
   * Get weightDimensions
   * @return weightDimensions
   */
  @javax.annotation.Nullable
  public OfferWeightDimensionsDTO getWeightDimensions() {
    return weightDimensions;
  }

  public void setWeightDimensions(OfferWeightDimensionsDTO weightDimensions) {
    this.weightDimensions = weightDimensions;
  }


  public UpdateOfferDTO vendorCode(String vendorCode) {
    this.vendorCode = vendorCode;
    return this;
  }

  /**
   * Артикул товара от производителя.
   * @return vendorCode
   */
  @javax.annotation.Nullable
  public String getVendorCode() {
    return vendorCode;
  }

  public void setVendorCode(String vendorCode) {
    this.vendorCode = vendorCode;
  }


  public UpdateOfferDTO tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public UpdateOfferDTO addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Метки товара, используемые магазином. Покупателям теги не видны. По тегам можно группировать и фильтровать разные товары в каталоге — например, товары одной серии, коллекции или линейки.  Максимальная длина тега 20 символов. У одного товара может быть максимум 10 тегов. Всего можно создать не больше 50 разных тегов. 
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public UpdateOfferDTO shelfLife(TimePeriodDTO shelfLife) {
    this.shelfLife = shelfLife;
    return this;
  }

  /**
   * Get shelfLife
   * @return shelfLife
   */
  @javax.annotation.Nullable
  public TimePeriodDTO getShelfLife() {
    return shelfLife;
  }

  public void setShelfLife(TimePeriodDTO shelfLife) {
    this.shelfLife = shelfLife;
  }


  public UpdateOfferDTO lifeTime(TimePeriodDTO lifeTime) {
    this.lifeTime = lifeTime;
    return this;
  }

  /**
   * Get lifeTime
   * @return lifeTime
   */
  @javax.annotation.Nullable
  public TimePeriodDTO getLifeTime() {
    return lifeTime;
  }

  public void setLifeTime(TimePeriodDTO lifeTime) {
    this.lifeTime = lifeTime;
  }


  public UpdateOfferDTO guaranteePeriod(TimePeriodDTO guaranteePeriod) {
    this.guaranteePeriod = guaranteePeriod;
    return this;
  }

  /**
   * Get guaranteePeriod
   * @return guaranteePeriod
   */
  @javax.annotation.Nullable
  public TimePeriodDTO getGuaranteePeriod() {
    return guaranteePeriod;
  }

  public void setGuaranteePeriod(TimePeriodDTO guaranteePeriod) {
    this.guaranteePeriod = guaranteePeriod;
  }


  public UpdateOfferDTO customsCommodityCode(String customsCommodityCode) {
    this.customsCommodityCode = customsCommodityCode;
    return this;
  }

  /**
   * Код товара в единой Товарной номенклатуре внешнеэкономической деятельности (ТН ВЭД) — 10 или 14 цифр без пробелов.  Обязательно укажите, если он есть. 
   * @return customsCommodityCode
   */
  @javax.annotation.Nullable
  public String getCustomsCommodityCode() {
    return customsCommodityCode;
  }

  public void setCustomsCommodityCode(String customsCommodityCode) {
    this.customsCommodityCode = customsCommodityCode;
  }


  public UpdateOfferDTO certificates(List<String> certificates) {
    this.certificates = certificates;
    return this;
  }

  public UpdateOfferDTO addCertificatesItem(String certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

  /**
   * Номера документов на товар: сертификата, декларации соответствия и т. п.  Передавать можно только номера документов, сканы которого загружены в кабинете продавца по [инструкции](https://yandex.ru/support/marketplace/assortment/restrictions/certificates.html). 
   * @return certificates
   */
  @javax.annotation.Nullable
  public List<String> getCertificates() {
    return certificates;
  }

  public void setCertificates(List<String> certificates) {
    this.certificates = certificates;
  }


  public UpdateOfferDTO boxCount(Integer boxCount) {
    this.boxCount = boxCount;
    return this;
  }

  /**
   * Количество грузовых мест.  Параметр используется, если товар представляет собой несколько коробок, упаковок и так далее. Например, кондиционер занимает два места — внешний и внутренний блоки в двух коробках.  Для товаров, занимающих одно место, не передавайте этот параметр. 
   * @return boxCount
   */
  @javax.annotation.Nullable
  public Integer getBoxCount() {
    return boxCount;
  }

  public void setBoxCount(Integer boxCount) {
    this.boxCount = boxCount;
  }


  public UpdateOfferDTO condition(OfferConditionDTO condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public OfferConditionDTO getCondition() {
    return condition;
  }

  public void setCondition(OfferConditionDTO condition) {
    this.condition = condition;
  }


  public UpdateOfferDTO type(OfferType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public OfferType getType() {
    return type;
  }

  public void setType(OfferType type) {
    this.type = type;
  }


  public UpdateOfferDTO downloadable(Boolean downloadable) {
    this.downloadable = downloadable;
    return this;
  }

  /**
   * Признак цифрового товара. Укажите &#x60;true&#x60;, если товар доставляется по электронной почте.  [Как работать с цифровыми товарами](../../step-by-step/digital.md) 
   * @return downloadable
   */
  @javax.annotation.Nullable
  public Boolean getDownloadable() {
    return downloadable;
  }

  public void setDownloadable(Boolean downloadable) {
    this.downloadable = downloadable;
  }


  public UpdateOfferDTO adult(Boolean adult) {
    this.adult = adult;
    return this;
  }

  /**
   * Параметр включает для товара пометку 18+. Устанавливайте ее только для товаров, которые относятся к удовлетворению сексуальных потребностей. 
   * @return adult
   */
  @javax.annotation.Nullable
  public Boolean getAdult() {
    return adult;
  }

  public void setAdult(Boolean adult) {
    this.adult = adult;
  }


  public UpdateOfferDTO age(AgeDTO age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nullable
  public AgeDTO getAge() {
    return age;
  }

  public void setAge(AgeDTO age) {
    this.age = age;
  }


  @Deprecated
  public UpdateOfferDTO params(List<OfferParamDTO> params) {
    this.params = params;
    return this;
  }

  public UpdateOfferDTO addParamsItem(OfferParamDTO paramsItem) {
    if (this.params == null) {
      this.params = new ArrayList<>();
    }
    this.params.add(paramsItem);
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. При передаче характеристик используйте &#x60;parameterValues&#x60;.  {% endnote %}  Характеристики, которые есть только у товаров конкретной категории — например, диаметр колес велосипеда или материал подошвы обуви. 
   * @return params
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<OfferParamDTO> getParams() {
    return params;
  }

  @Deprecated
  public void setParams(List<OfferParamDTO> params) {
    this.params = params;
  }


  public UpdateOfferDTO parameterValues(List<ParameterValueDTO> parameterValues) {
    this.parameterValues = parameterValues;
    return this;
  }

  public UpdateOfferDTO addParameterValuesItem(ParameterValueDTO parameterValuesItem) {
    if (this.parameterValues == null) {
      this.parameterValues = new ArrayList<>();
    }
    this.parameterValues.add(parameterValuesItem);
    return this;
  }

  /**
   * Список характеристик с их значениями.  С &#x60;parameterValues&#x60; обязательно передавайте &#x60;marketCategoryId&#x60; — идентификатор категории на Маркете, к которой относятся указанные характеристики товара.  При **изменении** характеристик передавайте только те, значение которых нужно обновить.  Чтобы **удалить** значение заданной характеристики, передайте ее &#x60;parameterId&#x60; с пустым &#x60;value&#x60;.  Максимальное количество характеристик — 300. 
   * @return parameterValues
   */
  @javax.annotation.Nullable
  public List<ParameterValueDTO> getParameterValues() {
    return parameterValues;
  }

  public void setParameterValues(List<ParameterValueDTO> parameterValues) {
    this.parameterValues = parameterValues;
  }


  public UpdateOfferDTO basicPrice(UpdatePriceWithDiscountDTO basicPrice) {
    this.basicPrice = basicPrice;
    return this;
  }

  /**
   * Get basicPrice
   * @return basicPrice
   */
  @javax.annotation.Nullable
  public UpdatePriceWithDiscountDTO getBasicPrice() {
    return basicPrice;
  }

  public void setBasicPrice(UpdatePriceWithDiscountDTO basicPrice) {
    this.basicPrice = basicPrice;
  }


  public UpdateOfferDTO purchasePrice(BasePriceDTO purchasePrice) {
    this.purchasePrice = purchasePrice;
    return this;
  }

  /**
   * Get purchasePrice
   * @return purchasePrice
   */
  @javax.annotation.Nullable
  public BasePriceDTO getPurchasePrice() {
    return purchasePrice;
  }

  public void setPurchasePrice(BasePriceDTO purchasePrice) {
    this.purchasePrice = purchasePrice;
  }


  public UpdateOfferDTO additionalExpenses(BasePriceDTO additionalExpenses) {
    this.additionalExpenses = additionalExpenses;
    return this;
  }

  /**
   * Get additionalExpenses
   * @return additionalExpenses
   */
  @javax.annotation.Nullable
  public BasePriceDTO getAdditionalExpenses() {
    return additionalExpenses;
  }

  public void setAdditionalExpenses(BasePriceDTO additionalExpenses) {
    this.additionalExpenses = additionalExpenses;
  }


  public UpdateOfferDTO cofinancePrice(BasePriceDTO cofinancePrice) {
    this.cofinancePrice = cofinancePrice;
    return this;
  }

  /**
   * Get cofinancePrice
   * @return cofinancePrice
   */
  @javax.annotation.Nullable
  public BasePriceDTO getCofinancePrice() {
    return cofinancePrice;
  }

  public void setCofinancePrice(BasePriceDTO cofinancePrice) {
    this.cofinancePrice = cofinancePrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateOfferDTO updateOfferDTO = (UpdateOfferDTO) o;
    return Objects.equals(this.offerId, updateOfferDTO.offerId) &&
        Objects.equals(this.name, updateOfferDTO.name) &&
        Objects.equals(this.marketCategoryId, updateOfferDTO.marketCategoryId) &&
        Objects.equals(this.category, updateOfferDTO.category) &&
        Objects.equals(this.pictures, updateOfferDTO.pictures) &&
        Objects.equals(this.videos, updateOfferDTO.videos) &&
        Objects.equals(this.manuals, updateOfferDTO.manuals) &&
        Objects.equals(this.vendor, updateOfferDTO.vendor) &&
        Objects.equals(this.barcodes, updateOfferDTO.barcodes) &&
        Objects.equals(this.description, updateOfferDTO.description) &&
        Objects.equals(this.manufacturerCountries, updateOfferDTO.manufacturerCountries) &&
        Objects.equals(this.weightDimensions, updateOfferDTO.weightDimensions) &&
        Objects.equals(this.vendorCode, updateOfferDTO.vendorCode) &&
        Objects.equals(this.tags, updateOfferDTO.tags) &&
        Objects.equals(this.shelfLife, updateOfferDTO.shelfLife) &&
        Objects.equals(this.lifeTime, updateOfferDTO.lifeTime) &&
        Objects.equals(this.guaranteePeriod, updateOfferDTO.guaranteePeriod) &&
        Objects.equals(this.customsCommodityCode, updateOfferDTO.customsCommodityCode) &&
        Objects.equals(this.certificates, updateOfferDTO.certificates) &&
        Objects.equals(this.boxCount, updateOfferDTO.boxCount) &&
        Objects.equals(this.condition, updateOfferDTO.condition) &&
        Objects.equals(this.type, updateOfferDTO.type) &&
        Objects.equals(this.downloadable, updateOfferDTO.downloadable) &&
        Objects.equals(this.adult, updateOfferDTO.adult) &&
        Objects.equals(this.age, updateOfferDTO.age) &&
        Objects.equals(this.params, updateOfferDTO.params) &&
        Objects.equals(this.parameterValues, updateOfferDTO.parameterValues) &&
        Objects.equals(this.basicPrice, updateOfferDTO.basicPrice) &&
        Objects.equals(this.purchasePrice, updateOfferDTO.purchasePrice) &&
        Objects.equals(this.additionalExpenses, updateOfferDTO.additionalExpenses) &&
        Objects.equals(this.cofinancePrice, updateOfferDTO.cofinancePrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(offerId, name, marketCategoryId, category, pictures, videos, manuals, vendor, barcodes, description, manufacturerCountries, weightDimensions, vendorCode, tags, shelfLife, lifeTime, guaranteePeriod, customsCommodityCode, certificates, boxCount, condition, type, downloadable, adult, age, params, parameterValues, basicPrice, purchasePrice, additionalExpenses, cofinancePrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateOfferDTO {\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    marketCategoryId: ").append(toIndentedString(marketCategoryId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    pictures: ").append(toIndentedString(pictures)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    manuals: ").append(toIndentedString(manuals)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    barcodes: ").append(toIndentedString(barcodes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    manufacturerCountries: ").append(toIndentedString(manufacturerCountries)).append("\n");
    sb.append("    weightDimensions: ").append(toIndentedString(weightDimensions)).append("\n");
    sb.append("    vendorCode: ").append(toIndentedString(vendorCode)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    shelfLife: ").append(toIndentedString(shelfLife)).append("\n");
    sb.append("    lifeTime: ").append(toIndentedString(lifeTime)).append("\n");
    sb.append("    guaranteePeriod: ").append(toIndentedString(guaranteePeriod)).append("\n");
    sb.append("    customsCommodityCode: ").append(toIndentedString(customsCommodityCode)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    boxCount: ").append(toIndentedString(boxCount)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    downloadable: ").append(toIndentedString(downloadable)).append("\n");
    sb.append("    adult: ").append(toIndentedString(adult)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    parameterValues: ").append(toIndentedString(parameterValues)).append("\n");
    sb.append("    basicPrice: ").append(toIndentedString(basicPrice)).append("\n");
    sb.append("    purchasePrice: ").append(toIndentedString(purchasePrice)).append("\n");
    sb.append("    additionalExpenses: ").append(toIndentedString(additionalExpenses)).append("\n");
    sb.append("    cofinancePrice: ").append(toIndentedString(cofinancePrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offerId");
    openapiFields.add("name");
    openapiFields.add("marketCategoryId");
    openapiFields.add("category");
    openapiFields.add("pictures");
    openapiFields.add("videos");
    openapiFields.add("manuals");
    openapiFields.add("vendor");
    openapiFields.add("barcodes");
    openapiFields.add("description");
    openapiFields.add("manufacturerCountries");
    openapiFields.add("weightDimensions");
    openapiFields.add("vendorCode");
    openapiFields.add("tags");
    openapiFields.add("shelfLife");
    openapiFields.add("lifeTime");
    openapiFields.add("guaranteePeriod");
    openapiFields.add("customsCommodityCode");
    openapiFields.add("certificates");
    openapiFields.add("boxCount");
    openapiFields.add("condition");
    openapiFields.add("type");
    openapiFields.add("downloadable");
    openapiFields.add("adult");
    openapiFields.add("age");
    openapiFields.add("params");
    openapiFields.add("parameterValues");
    openapiFields.add("basicPrice");
    openapiFields.add("purchasePrice");
    openapiFields.add("additionalExpenses");
    openapiFields.add("cofinancePrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("offerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateOfferDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateOfferDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateOfferDTO is not found in the empty JSON string", UpdateOfferDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateOfferDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateOfferDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateOfferDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pictures") != null && !jsonObj.get("pictures").isJsonNull() && !jsonObj.get("pictures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictures` to be an array in the JSON string but got `%s`", jsonObj.get("pictures").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("videos") != null && !jsonObj.get("videos").isJsonNull() && !jsonObj.get("videos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `videos` to be an array in the JSON string but got `%s`", jsonObj.get("videos").toString()));
      }
      if (jsonObj.get("manuals") != null && !jsonObj.get("manuals").isJsonNull()) {
        JsonArray jsonArraymanuals = jsonObj.getAsJsonArray("manuals");
        if (jsonArraymanuals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("manuals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `manuals` to be an array in the JSON string but got `%s`", jsonObj.get("manuals").toString()));
          }

          // validate the optional field `manuals` (array)
          for (int i = 0; i < jsonArraymanuals.size(); i++) {
            OfferManualDTO.validateJsonElement(jsonArraymanuals.get(i));
          };
        }
      }
      if ((jsonObj.get("vendor") != null && !jsonObj.get("vendor").isJsonNull()) && !jsonObj.get("vendor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("barcodes") != null && !jsonObj.get("barcodes").isJsonNull() && !jsonObj.get("barcodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `barcodes` to be an array in the JSON string but got `%s`", jsonObj.get("barcodes").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("manufacturerCountries") != null && !jsonObj.get("manufacturerCountries").isJsonNull() && !jsonObj.get("manufacturerCountries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturerCountries` to be an array in the JSON string but got `%s`", jsonObj.get("manufacturerCountries").toString()));
      }
      // validate the optional field `weightDimensions`
      if (jsonObj.get("weightDimensions") != null && !jsonObj.get("weightDimensions").isJsonNull()) {
        OfferWeightDimensionsDTO.validateJsonElement(jsonObj.get("weightDimensions"));
      }
      if ((jsonObj.get("vendorCode") != null && !jsonObj.get("vendorCode").isJsonNull()) && !jsonObj.get("vendorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `shelfLife`
      if (jsonObj.get("shelfLife") != null && !jsonObj.get("shelfLife").isJsonNull()) {
        TimePeriodDTO.validateJsonElement(jsonObj.get("shelfLife"));
      }
      // validate the optional field `lifeTime`
      if (jsonObj.get("lifeTime") != null && !jsonObj.get("lifeTime").isJsonNull()) {
        TimePeriodDTO.validateJsonElement(jsonObj.get("lifeTime"));
      }
      // validate the optional field `guaranteePeriod`
      if (jsonObj.get("guaranteePeriod") != null && !jsonObj.get("guaranteePeriod").isJsonNull()) {
        TimePeriodDTO.validateJsonElement(jsonObj.get("guaranteePeriod"));
      }
      if ((jsonObj.get("customsCommodityCode") != null && !jsonObj.get("customsCommodityCode").isJsonNull()) && !jsonObj.get("customsCommodityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customsCommodityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customsCommodityCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("certificates") != null && !jsonObj.get("certificates").isJsonNull() && !jsonObj.get("certificates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificates` to be an array in the JSON string but got `%s`", jsonObj.get("certificates").toString()));
      }
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        OfferConditionDTO.validateJsonElement(jsonObj.get("condition"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        OfferType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `age`
      if (jsonObj.get("age") != null && !jsonObj.get("age").isJsonNull()) {
        AgeDTO.validateJsonElement(jsonObj.get("age"));
      }
      if (jsonObj.get("params") != null && !jsonObj.get("params").isJsonNull()) {
        JsonArray jsonArrayparams = jsonObj.getAsJsonArray("params");
        if (jsonArrayparams != null) {
          // ensure the json data is an array
          if (!jsonObj.get("params").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `params` to be an array in the JSON string but got `%s`", jsonObj.get("params").toString()));
          }

          // validate the optional field `params` (array)
          for (int i = 0; i < jsonArrayparams.size(); i++) {
            OfferParamDTO.validateJsonElement(jsonArrayparams.get(i));
          };
        }
      }
      if (jsonObj.get("parameterValues") != null && !jsonObj.get("parameterValues").isJsonNull()) {
        JsonArray jsonArrayparameterValues = jsonObj.getAsJsonArray("parameterValues");
        if (jsonArrayparameterValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameterValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameterValues` to be an array in the JSON string but got `%s`", jsonObj.get("parameterValues").toString()));
          }

          // validate the optional field `parameterValues` (array)
          for (int i = 0; i < jsonArrayparameterValues.size(); i++) {
            ParameterValueDTO.validateJsonElement(jsonArrayparameterValues.get(i));
          };
        }
      }
      // validate the optional field `basicPrice`
      if (jsonObj.get("basicPrice") != null && !jsonObj.get("basicPrice").isJsonNull()) {
        UpdatePriceWithDiscountDTO.validateJsonElement(jsonObj.get("basicPrice"));
      }
      // validate the optional field `purchasePrice`
      if (jsonObj.get("purchasePrice") != null && !jsonObj.get("purchasePrice").isJsonNull()) {
        BasePriceDTO.validateJsonElement(jsonObj.get("purchasePrice"));
      }
      // validate the optional field `additionalExpenses`
      if (jsonObj.get("additionalExpenses") != null && !jsonObj.get("additionalExpenses").isJsonNull()) {
        BasePriceDTO.validateJsonElement(jsonObj.get("additionalExpenses"));
      }
      // validate the optional field `cofinancePrice`
      if (jsonObj.get("cofinancePrice") != null && !jsonObj.get("cofinancePrice").isJsonNull()) {
        BasePriceDTO.validateJsonElement(jsonObj.get("cofinancePrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateOfferDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateOfferDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateOfferDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateOfferDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateOfferDTO>() {
           @Override
           public void write(JsonWriter out, UpdateOfferDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateOfferDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateOfferDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateOfferDTO
   * @throws IOException if the JSON string is invalid with respect to UpdateOfferDTO
   */
  public static UpdateOfferDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateOfferDTO.class);
  }

  /**
   * Convert an instance of UpdateOfferDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

