/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.client.model.DeliveryServiceDTO;
import org.openapitools.client.model.PalletsCountDTO;
import org.openapitools.client.model.PartnerShipmentWarehouseDTO;
import org.openapitools.client.model.ShipmentActionType;
import org.openapitools.client.model.ShipmentStatusChangeDTO;
import org.openapitools.client.model.ShipmentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Информация об отгрузке.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class ShipmentDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_PLAN_INTERVAL_FROM = "planIntervalFrom";
  @SerializedName(SERIALIZED_NAME_PLAN_INTERVAL_FROM)
  private OffsetDateTime planIntervalFrom;

  public static final String SERIALIZED_NAME_PLAN_INTERVAL_TO = "planIntervalTo";
  @SerializedName(SERIALIZED_NAME_PLAN_INTERVAL_TO)
  private OffsetDateTime planIntervalTo;

  public static final String SERIALIZED_NAME_SHIPMENT_TYPE = "shipmentType";
  @SerializedName(SERIALIZED_NAME_SHIPMENT_TYPE)
  private ShipmentType shipmentType;

  public static final String SERIALIZED_NAME_WAREHOUSE = "warehouse";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE)
  private PartnerShipmentWarehouseDTO warehouse;

  public static final String SERIALIZED_NAME_WAREHOUSE_TO = "warehouseTo";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_TO)
  private PartnerShipmentWarehouseDTO warehouseTo;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_DELIVERY_SERVICE = "deliveryService";
  @SerializedName(SERIALIZED_NAME_DELIVERY_SERVICE)
  private DeliveryServiceDTO deliveryService;

  public static final String SERIALIZED_NAME_PALLETS_COUNT = "palletsCount";
  @SerializedName(SERIALIZED_NAME_PALLETS_COUNT)
  private PalletsCountDTO palletsCount;

  public static final String SERIALIZED_NAME_ORDER_IDS = "orderIds";
  @SerializedName(SERIALIZED_NAME_ORDER_IDS)
  private Set<Long> orderIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DRAFT_COUNT = "draftCount";
  @SerializedName(SERIALIZED_NAME_DRAFT_COUNT)
  private Integer draftCount;

  public static final String SERIALIZED_NAME_PLANNED_COUNT = "plannedCount";
  @SerializedName(SERIALIZED_NAME_PLANNED_COUNT)
  private Integer plannedCount;

  public static final String SERIALIZED_NAME_FACT_COUNT = "factCount";
  @SerializedName(SERIALIZED_NAME_FACT_COUNT)
  private Integer factCount;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "currentStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private ShipmentStatusChangeDTO currentStatus;

  public static final String SERIALIZED_NAME_AVAILABLE_ACTIONS = "availableActions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ACTIONS)
  private Set<ShipmentActionType> availableActions = new LinkedHashSet<>();

  public ShipmentDTO() {
  }

  public ShipmentDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор отгрузки.
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public ShipmentDTO planIntervalFrom(OffsetDateTime planIntervalFrom) {
    this.planIntervalFrom = planIntervalFrom;
    return this;
  }

  /**
   * Начало планового интервала отгрузки.
   * @return planIntervalFrom
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPlanIntervalFrom() {
    return planIntervalFrom;
  }

  public void setPlanIntervalFrom(OffsetDateTime planIntervalFrom) {
    this.planIntervalFrom = planIntervalFrom;
  }


  public ShipmentDTO planIntervalTo(OffsetDateTime planIntervalTo) {
    this.planIntervalTo = planIntervalTo;
    return this;
  }

  /**
   * Конец планового интервала отгрузки.
   * @return planIntervalTo
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPlanIntervalTo() {
    return planIntervalTo;
  }

  public void setPlanIntervalTo(OffsetDateTime planIntervalTo) {
    this.planIntervalTo = planIntervalTo;
  }


  public ShipmentDTO shipmentType(ShipmentType shipmentType) {
    this.shipmentType = shipmentType;
    return this;
  }

  /**
   * Get shipmentType
   * @return shipmentType
   */
  @javax.annotation.Nullable
  public ShipmentType getShipmentType() {
    return shipmentType;
  }

  public void setShipmentType(ShipmentType shipmentType) {
    this.shipmentType = shipmentType;
  }


  public ShipmentDTO warehouse(PartnerShipmentWarehouseDTO warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  /**
   * Get warehouse
   * @return warehouse
   */
  @javax.annotation.Nullable
  public PartnerShipmentWarehouseDTO getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(PartnerShipmentWarehouseDTO warehouse) {
    this.warehouse = warehouse;
  }


  public ShipmentDTO warehouseTo(PartnerShipmentWarehouseDTO warehouseTo) {
    this.warehouseTo = warehouseTo;
    return this;
  }

  /**
   * Get warehouseTo
   * @return warehouseTo
   */
  @javax.annotation.Nullable
  public PartnerShipmentWarehouseDTO getWarehouseTo() {
    return warehouseTo;
  }

  public void setWarehouseTo(PartnerShipmentWarehouseDTO warehouseTo) {
    this.warehouseTo = warehouseTo;
  }


  public ShipmentDTO externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public ShipmentDTO deliveryService(DeliveryServiceDTO deliveryService) {
    this.deliveryService = deliveryService;
    return this;
  }

  /**
   * Get deliveryService
   * @return deliveryService
   */
  @javax.annotation.Nullable
  public DeliveryServiceDTO getDeliveryService() {
    return deliveryService;
  }

  public void setDeliveryService(DeliveryServiceDTO deliveryService) {
    this.deliveryService = deliveryService;
  }


  public ShipmentDTO palletsCount(PalletsCountDTO palletsCount) {
    this.palletsCount = palletsCount;
    return this;
  }

  /**
   * Get palletsCount
   * @return palletsCount
   */
  @javax.annotation.Nullable
  public PalletsCountDTO getPalletsCount() {
    return palletsCount;
  }

  public void setPalletsCount(PalletsCountDTO palletsCount) {
    this.palletsCount = palletsCount;
  }


  public ShipmentDTO orderIds(Set<Long> orderIds) {
    this.orderIds = orderIds;
    return this;
  }

  public ShipmentDTO addOrderIdsItem(Long orderIdsItem) {
    if (this.orderIds == null) {
      this.orderIds = new LinkedHashSet<>();
    }
    this.orderIds.add(orderIdsItem);
    return this;
  }

  /**
   * Идентификаторы заказов в отгрузке.
   * @return orderIds
   */
  @javax.annotation.Nonnull
  public Set<Long> getOrderIds() {
    return orderIds;
  }

  public void setOrderIds(Set<Long> orderIds) {
    this.orderIds = orderIds;
  }


  public ShipmentDTO draftCount(Integer draftCount) {
    this.draftCount = draftCount;
    return this;
  }

  /**
   * Количество заказов, которое Маркет запланировал к отгрузке.
   * @return draftCount
   */
  @javax.annotation.Nullable
  public Integer getDraftCount() {
    return draftCount;
  }

  public void setDraftCount(Integer draftCount) {
    this.draftCount = draftCount;
  }


  public ShipmentDTO plannedCount(Integer plannedCount) {
    this.plannedCount = plannedCount;
    return this;
  }

  /**
   * Количество заказов, которое Маркет подтвердил к отгрузке.
   * @return plannedCount
   */
  @javax.annotation.Nullable
  public Integer getPlannedCount() {
    return plannedCount;
  }

  public void setPlannedCount(Integer plannedCount) {
    this.plannedCount = plannedCount;
  }


  public ShipmentDTO factCount(Integer factCount) {
    this.factCount = factCount;
    return this;
  }

  /**
   * Количество заказов, принятых в сортировочном центре или пункте приема.
   * @return factCount
   */
  @javax.annotation.Nullable
  public Integer getFactCount() {
    return factCount;
  }

  public void setFactCount(Integer factCount) {
    this.factCount = factCount;
  }


  public ShipmentDTO currentStatus(ShipmentStatusChangeDTO currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * Get currentStatus
   * @return currentStatus
   */
  @javax.annotation.Nullable
  public ShipmentStatusChangeDTO getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(ShipmentStatusChangeDTO currentStatus) {
    this.currentStatus = currentStatus;
  }


  public ShipmentDTO availableActions(Set<ShipmentActionType> availableActions) {
    this.availableActions = availableActions;
    return this;
  }

  public ShipmentDTO addAvailableActionsItem(ShipmentActionType availableActionsItem) {
    if (this.availableActions == null) {
      this.availableActions = new LinkedHashSet<>();
    }
    this.availableActions.add(availableActionsItem);
    return this;
  }

  /**
   * Доступные действия над отгрузкой.
   * @return availableActions
   */
  @javax.annotation.Nonnull
  public Set<ShipmentActionType> getAvailableActions() {
    return availableActions;
  }

  public void setAvailableActions(Set<ShipmentActionType> availableActions) {
    this.availableActions = availableActions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentDTO shipmentDTO = (ShipmentDTO) o;
    return Objects.equals(this.id, shipmentDTO.id) &&
        Objects.equals(this.planIntervalFrom, shipmentDTO.planIntervalFrom) &&
        Objects.equals(this.planIntervalTo, shipmentDTO.planIntervalTo) &&
        Objects.equals(this.shipmentType, shipmentDTO.shipmentType) &&
        Objects.equals(this.warehouse, shipmentDTO.warehouse) &&
        Objects.equals(this.warehouseTo, shipmentDTO.warehouseTo) &&
        Objects.equals(this.externalId, shipmentDTO.externalId) &&
        Objects.equals(this.deliveryService, shipmentDTO.deliveryService) &&
        Objects.equals(this.palletsCount, shipmentDTO.palletsCount) &&
        Objects.equals(this.orderIds, shipmentDTO.orderIds) &&
        Objects.equals(this.draftCount, shipmentDTO.draftCount) &&
        Objects.equals(this.plannedCount, shipmentDTO.plannedCount) &&
        Objects.equals(this.factCount, shipmentDTO.factCount) &&
        Objects.equals(this.currentStatus, shipmentDTO.currentStatus) &&
        Objects.equals(this.availableActions, shipmentDTO.availableActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, planIntervalFrom, planIntervalTo, shipmentType, warehouse, warehouseTo, externalId, deliveryService, palletsCount, orderIds, draftCount, plannedCount, factCount, currentStatus, availableActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    planIntervalFrom: ").append(toIndentedString(planIntervalFrom)).append("\n");
    sb.append("    planIntervalTo: ").append(toIndentedString(planIntervalTo)).append("\n");
    sb.append("    shipmentType: ").append(toIndentedString(shipmentType)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    warehouseTo: ").append(toIndentedString(warehouseTo)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    deliveryService: ").append(toIndentedString(deliveryService)).append("\n");
    sb.append("    palletsCount: ").append(toIndentedString(palletsCount)).append("\n");
    sb.append("    orderIds: ").append(toIndentedString(orderIds)).append("\n");
    sb.append("    draftCount: ").append(toIndentedString(draftCount)).append("\n");
    sb.append("    plannedCount: ").append(toIndentedString(plannedCount)).append("\n");
    sb.append("    factCount: ").append(toIndentedString(factCount)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    availableActions: ").append(toIndentedString(availableActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("planIntervalFrom");
    openapiFields.add("planIntervalTo");
    openapiFields.add("shipmentType");
    openapiFields.add("warehouse");
    openapiFields.add("warehouseTo");
    openapiFields.add("externalId");
    openapiFields.add("deliveryService");
    openapiFields.add("palletsCount");
    openapiFields.add("orderIds");
    openapiFields.add("draftCount");
    openapiFields.add("plannedCount");
    openapiFields.add("factCount");
    openapiFields.add("currentStatus");
    openapiFields.add("availableActions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orderIds");
    openapiRequiredFields.add("availableActions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShipmentDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShipmentDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentDTO is not found in the empty JSON string", ShipmentDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShipmentDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShipmentDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `shipmentType`
      if (jsonObj.get("shipmentType") != null && !jsonObj.get("shipmentType").isJsonNull()) {
        ShipmentType.validateJsonElement(jsonObj.get("shipmentType"));
      }
      // validate the optional field `warehouse`
      if (jsonObj.get("warehouse") != null && !jsonObj.get("warehouse").isJsonNull()) {
        PartnerShipmentWarehouseDTO.validateJsonElement(jsonObj.get("warehouse"));
      }
      // validate the optional field `warehouseTo`
      if (jsonObj.get("warehouseTo") != null && !jsonObj.get("warehouseTo").isJsonNull()) {
        PartnerShipmentWarehouseDTO.validateJsonElement(jsonObj.get("warehouseTo"));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // validate the optional field `deliveryService`
      if (jsonObj.get("deliveryService") != null && !jsonObj.get("deliveryService").isJsonNull()) {
        DeliveryServiceDTO.validateJsonElement(jsonObj.get("deliveryService"));
      }
      // validate the optional field `palletsCount`
      if (jsonObj.get("palletsCount") != null && !jsonObj.get("palletsCount").isJsonNull()) {
        PalletsCountDTO.validateJsonElement(jsonObj.get("palletsCount"));
      }
      // ensure the required json array is present
      if (jsonObj.get("orderIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("orderIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderIds` to be an array in the JSON string but got `%s`", jsonObj.get("orderIds").toString()));
      }
      // validate the optional field `currentStatus`
      if (jsonObj.get("currentStatus") != null && !jsonObj.get("currentStatus").isJsonNull()) {
        ShipmentStatusChangeDTO.validateJsonElement(jsonObj.get("currentStatus"));
      }
      // ensure the required json array is present
      if (jsonObj.get("availableActions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("availableActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availableActions` to be an array in the JSON string but got `%s`", jsonObj.get("availableActions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentDTO>() {
           @Override
           public void write(JsonWriter out, ShipmentDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShipmentDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShipmentDTO
   * @throws IOException if the JSON string is invalid with respect to ShipmentDTO
   */
  public static ShipmentDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentDTO.class);
  }

  /**
   * Convert an instance of ShipmentDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

