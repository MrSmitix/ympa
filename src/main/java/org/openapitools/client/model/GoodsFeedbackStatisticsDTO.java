/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Статистическая информация по отзыву.
 **/
@ApiModel(description = "Статистическая информация по отзыву.")
public class GoodsFeedbackStatisticsDTO {
  
  @SerializedName("rating")
  private Integer rating = null;
  @SerializedName("commentsCount")
  private Long commentsCount = null;
  @SerializedName("recommended")
  private Boolean recommended = null;
  @SerializedName("paidAmount")
  private Long paidAmount = null;

  /**
   * Оценка товара.
   * minimum: 1
   * maximum: 5
   **/
  @ApiModelProperty(required = true, value = "Оценка товара.")
  public Integer getRating() {
    return rating;
  }
  public void setRating(Integer rating) {
    this.rating = rating;
  }

  /**
   * Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. 
   **/
  @ApiModelProperty(required = true, value = "Количество комментариев к отзыву.  Учитываются только ответы на отзывы, а не дочерние комментарии. ")
  public Long getCommentsCount() {
    return commentsCount;
  }
  public void setCommentsCount(Long commentsCount) {
    this.commentsCount = commentsCount;
  }

  /**
   * Рекомендуют ли этот товар.
   **/
  @ApiModelProperty(value = "Рекомендуют ли этот товар.")
  public Boolean getRecommended() {
    return recommended;
  }
  public void setRecommended(Boolean recommended) {
    this.recommended = recommended;
  }

  /**
   * Количество баллов Плюса, которое автор получил за отзыв.
   **/
  @ApiModelProperty(value = "Количество баллов Плюса, которое автор получил за отзыв.")
  public Long getPaidAmount() {
    return paidAmount;
  }
  public void setPaidAmount(Long paidAmount) {
    this.paidAmount = paidAmount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoodsFeedbackStatisticsDTO goodsFeedbackStatisticsDTO = (GoodsFeedbackStatisticsDTO) o;
    return (this.rating == null ? goodsFeedbackStatisticsDTO.rating == null : this.rating.equals(goodsFeedbackStatisticsDTO.rating)) &&
        (this.commentsCount == null ? goodsFeedbackStatisticsDTO.commentsCount == null : this.commentsCount.equals(goodsFeedbackStatisticsDTO.commentsCount)) &&
        (this.recommended == null ? goodsFeedbackStatisticsDTO.recommended == null : this.recommended.equals(goodsFeedbackStatisticsDTO.recommended)) &&
        (this.paidAmount == null ? goodsFeedbackStatisticsDTO.paidAmount == null : this.paidAmount.equals(goodsFeedbackStatisticsDTO.paidAmount));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.rating == null ? 0: this.rating.hashCode());
    result = 31 * result + (this.commentsCount == null ? 0: this.commentsCount.hashCode());
    result = 31 * result + (this.recommended == null ? 0: this.recommended.hashCode());
    result = 31 * result + (this.paidAmount == null ? 0: this.paidAmount.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoodsFeedbackStatisticsDTO {\n");
    
    sb.append("  rating: ").append(rating).append("\n");
    sb.append("  commentsCount: ").append(commentsCount).append("\n");
    sb.append("  recommended: ").append(recommended).append("\n");
    sb.append("  paidAmount: ").append(paidAmount).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
