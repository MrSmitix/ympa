/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderItemDetailDTO;
import org.openapitools.client.model.OrderItemInstanceDTO;
import org.openapitools.client.model.OrderItemInstanceType;
import org.openapitools.client.model.OrderItemPromoDTO;
import org.openapitools.client.model.OrderItemSubsidyDTO;
import org.openapitools.client.model.OrderVatType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Список товаров в заказе.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrderItemDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_OFFER_NAME = "offerName";
  @SerializedName(SERIALIZED_NAME_OFFER_NAME)
  private String offerName;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_BUYER_PRICE = "buyerPrice";
  @SerializedName(SERIALIZED_NAME_BUYER_PRICE)
  private BigDecimal buyerPrice;

  public static final String SERIALIZED_NAME_BUYER_PRICE_BEFORE_DISCOUNT = "buyerPriceBeforeDiscount";
  @SerializedName(SERIALIZED_NAME_BUYER_PRICE_BEFORE_DISCOUNT)
  private BigDecimal buyerPriceBeforeDiscount;

  public static final String SERIALIZED_NAME_PRICE_BEFORE_DISCOUNT = "priceBeforeDiscount";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRICE_BEFORE_DISCOUNT)
  private BigDecimal priceBeforeDiscount;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_VAT = "vat";
  @SerializedName(SERIALIZED_NAME_VAT)
  private OrderVatType vat;

  public static final String SERIALIZED_NAME_SHOP_SKU = "shopSku";
  @SerializedName(SERIALIZED_NAME_SHOP_SKU)
  private String shopSku;

  public static final String SERIALIZED_NAME_SUBSIDY = "subsidy";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SUBSIDY)
  private BigDecimal subsidy;

  public static final String SERIALIZED_NAME_PARTNER_WAREHOUSE_ID = "partnerWarehouseId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PARTNER_WAREHOUSE_ID)
  private String partnerWarehouseId;

  public static final String SERIALIZED_NAME_PROMOS = "promos";
  @SerializedName(SERIALIZED_NAME_PROMOS)
  private List<OrderItemPromoDTO> promos;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<OrderItemInstanceDTO> instances;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<OrderItemDetailDTO> details;

  public static final String SERIALIZED_NAME_SUBSIDIES = "subsidies";
  @SerializedName(SERIALIZED_NAME_SUBSIDIES)
  private List<OrderItemSubsidyDTO> subsidies;

  public static final String SERIALIZED_NAME_REQUIRED_INSTANCE_TYPES = "requiredInstanceTypes";
  @SerializedName(SERIALIZED_NAME_REQUIRED_INSTANCE_TYPES)
  private List<OrderItemInstanceType> requiredInstanceTypes;

  public OrderItemDTO() {
  }

  public OrderItemDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public OrderItemDTO offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public OrderItemDTO offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * Название товара.
   * @return offerName
   */
  @javax.annotation.Nullable
  public String getOfferName() {
    return offerName;
  }

  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }


  public OrderItemDTO price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public OrderItemDTO buyerPrice(BigDecimal buyerPrice) {
    this.buyerPrice = buyerPrice;
    return this;
  }

  /**
   * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
   * @return buyerPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getBuyerPrice() {
    return buyerPrice;
  }

  public void setBuyerPrice(BigDecimal buyerPrice) {
    this.buyerPrice = buyerPrice;
  }


  public OrderItemDTO buyerPriceBeforeDiscount(BigDecimal buyerPriceBeforeDiscount) {
    this.buyerPriceBeforeDiscount = buyerPriceBeforeDiscount;
    return this;
  }

  /**
   * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
   * @return buyerPriceBeforeDiscount
   */
  @javax.annotation.Nullable
  public BigDecimal getBuyerPriceBeforeDiscount() {
    return buyerPriceBeforeDiscount;
  }

  public void setBuyerPriceBeforeDiscount(BigDecimal buyerPriceBeforeDiscount) {
    this.buyerPriceBeforeDiscount = buyerPriceBeforeDiscount;
  }


  @Deprecated
  public OrderItemDTO priceBeforeDiscount(BigDecimal priceBeforeDiscount) {
    this.priceBeforeDiscount = priceBeforeDiscount;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
   * @return priceBeforeDiscount
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public BigDecimal getPriceBeforeDiscount() {
    return priceBeforeDiscount;
  }

  @Deprecated
  public void setPriceBeforeDiscount(BigDecimal priceBeforeDiscount) {
    this.priceBeforeDiscount = priceBeforeDiscount;
  }


  public OrderItemDTO count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Количество единиц товара.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public OrderItemDTO vat(OrderVatType vat) {
    this.vat = vat;
    return this;
  }

  /**
   * Get vat
   * @return vat
   */
  @javax.annotation.Nullable
  public OrderVatType getVat() {
    return vat;
  }

  public void setVat(OrderVatType vat) {
    this.vat = vat;
  }


  public OrderItemDTO shopSku(String shopSku) {
    this.shopSku = shopSku;
    return this;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   * @return shopSku
   */
  @javax.annotation.Nullable
  public String getShopSku() {
    return shopSku;
  }

  public void setShopSku(String shopSku) {
    this.shopSku = shopSku;
  }


  @Deprecated
  public OrderItemDTO subsidy(BigDecimal subsidy) {
    this.subsidy = subsidy;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
   * @return subsidy
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public BigDecimal getSubsidy() {
    return subsidy;
  }

  @Deprecated
  public void setSubsidy(BigDecimal subsidy) {
    this.subsidy = subsidy;
  }


  @Deprecated
  public OrderItemDTO partnerWarehouseId(String partnerWarehouseId) {
    this.partnerWarehouseId = partnerWarehouseId;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
   * @return partnerWarehouseId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPartnerWarehouseId() {
    return partnerWarehouseId;
  }

  @Deprecated
  public void setPartnerWarehouseId(String partnerWarehouseId) {
    this.partnerWarehouseId = partnerWarehouseId;
  }


  public OrderItemDTO promos(List<OrderItemPromoDTO> promos) {
    this.promos = promos;
    return this;
  }

  public OrderItemDTO addPromosItem(OrderItemPromoDTO promosItem) {
    if (this.promos == null) {
      this.promos = new ArrayList<>();
    }
    this.promos.add(promosItem);
    return this;
  }

  /**
   * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
   * @return promos
   */
  @javax.annotation.Nullable
  public List<OrderItemPromoDTO> getPromos() {
    return promos;
  }

  public void setPromos(List<OrderItemPromoDTO> promos) {
    this.promos = promos;
  }


  public OrderItemDTO instances(List<OrderItemInstanceDTO> instances) {
    this.instances = instances;
    return this;
  }

  public OrderItemDTO addInstancesItem(OrderItemInstanceDTO instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
   * @return instances
   */
  @javax.annotation.Nullable
  public List<OrderItemInstanceDTO> getInstances() {
    return instances;
  }

  public void setInstances(List<OrderItemInstanceDTO> instances) {
    this.instances = instances;
  }


  public OrderItemDTO details(List<OrderItemDetailDTO> details) {
    this.details = details;
    return this;
  }

  public OrderItemDTO addDetailsItem(OrderItemDetailDTO detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Информация об удалении товара из заказа. 
   * @return details
   */
  @javax.annotation.Nullable
  public List<OrderItemDetailDTO> getDetails() {
    return details;
  }

  public void setDetails(List<OrderItemDetailDTO> details) {
    this.details = details;
  }


  public OrderItemDTO subsidies(List<OrderItemSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
    return this;
  }

  public OrderItemDTO addSubsidiesItem(OrderItemSubsidyDTO subsidiesItem) {
    if (this.subsidies == null) {
      this.subsidies = new ArrayList<>();
    }
    this.subsidies.add(subsidiesItem);
    return this;
  }

  /**
   * Список субсидий по типам.
   * @return subsidies
   */
  @javax.annotation.Nullable
  public List<OrderItemSubsidyDTO> getSubsidies() {
    return subsidies;
  }

  public void setSubsidies(List<OrderItemSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
  }


  public OrderItemDTO requiredInstanceTypes(List<OrderItemInstanceType> requiredInstanceTypes) {
    this.requiredInstanceTypes = requiredInstanceTypes;
    return this;
  }

  public OrderItemDTO addRequiredInstanceTypesItem(OrderItemInstanceType requiredInstanceTypesItem) {
    if (this.requiredInstanceTypes == null) {
      this.requiredInstanceTypes = new ArrayList<>();
    }
    this.requiredInstanceTypes.add(requiredInstanceTypesItem);
    return this;
  }

  /**
   * Список необходимых маркировок товара.
   * @return requiredInstanceTypes
   */
  @javax.annotation.Nullable
  public List<OrderItemInstanceType> getRequiredInstanceTypes() {
    return requiredInstanceTypes;
  }

  public void setRequiredInstanceTypes(List<OrderItemInstanceType> requiredInstanceTypes) {
    this.requiredInstanceTypes = requiredInstanceTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderItemDTO orderItemDTO = (OrderItemDTO) o;
    return Objects.equals(this.id, orderItemDTO.id) &&
        Objects.equals(this.offerId, orderItemDTO.offerId) &&
        Objects.equals(this.offerName, orderItemDTO.offerName) &&
        Objects.equals(this.price, orderItemDTO.price) &&
        Objects.equals(this.buyerPrice, orderItemDTO.buyerPrice) &&
        Objects.equals(this.buyerPriceBeforeDiscount, orderItemDTO.buyerPriceBeforeDiscount) &&
        Objects.equals(this.priceBeforeDiscount, orderItemDTO.priceBeforeDiscount) &&
        Objects.equals(this.count, orderItemDTO.count) &&
        Objects.equals(this.vat, orderItemDTO.vat) &&
        Objects.equals(this.shopSku, orderItemDTO.shopSku) &&
        Objects.equals(this.subsidy, orderItemDTO.subsidy) &&
        Objects.equals(this.partnerWarehouseId, orderItemDTO.partnerWarehouseId) &&
        Objects.equals(this.promos, orderItemDTO.promos) &&
        Objects.equals(this.instances, orderItemDTO.instances) &&
        Objects.equals(this.details, orderItemDTO.details) &&
        Objects.equals(this.subsidies, orderItemDTO.subsidies) &&
        Objects.equals(this.requiredInstanceTypes, orderItemDTO.requiredInstanceTypes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, offerId, offerName, price, buyerPrice, buyerPriceBeforeDiscount, priceBeforeDiscount, count, vat, shopSku, subsidy, partnerWarehouseId, promos, instances, details, subsidies, requiredInstanceTypes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItemDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    buyerPrice: ").append(toIndentedString(buyerPrice)).append("\n");
    sb.append("    buyerPriceBeforeDiscount: ").append(toIndentedString(buyerPriceBeforeDiscount)).append("\n");
    sb.append("    priceBeforeDiscount: ").append(toIndentedString(priceBeforeDiscount)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
    sb.append("    shopSku: ").append(toIndentedString(shopSku)).append("\n");
    sb.append("    subsidy: ").append(toIndentedString(subsidy)).append("\n");
    sb.append("    partnerWarehouseId: ").append(toIndentedString(partnerWarehouseId)).append("\n");
    sb.append("    promos: ").append(toIndentedString(promos)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    subsidies: ").append(toIndentedString(subsidies)).append("\n");
    sb.append("    requiredInstanceTypes: ").append(toIndentedString(requiredInstanceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("offerId");
    openapiFields.add("offerName");
    openapiFields.add("price");
    openapiFields.add("buyerPrice");
    openapiFields.add("buyerPriceBeforeDiscount");
    openapiFields.add("priceBeforeDiscount");
    openapiFields.add("count");
    openapiFields.add("vat");
    openapiFields.add("shopSku");
    openapiFields.add("subsidy");
    openapiFields.add("partnerWarehouseId");
    openapiFields.add("promos");
    openapiFields.add("instances");
    openapiFields.add("details");
    openapiFields.add("subsidies");
    openapiFields.add("requiredInstanceTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderItemDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderItemDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderItemDTO is not found in the empty JSON string", OrderItemDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderItemDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderItemDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if ((jsonObj.get("offerName") != null && !jsonObj.get("offerName").isJsonNull()) && !jsonObj.get("offerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerName").toString()));
      }
      // validate the optional field `vat`
      if (jsonObj.get("vat") != null && !jsonObj.get("vat").isJsonNull()) {
        OrderVatType.validateJsonElement(jsonObj.get("vat"));
      }
      if ((jsonObj.get("shopSku") != null && !jsonObj.get("shopSku").isJsonNull()) && !jsonObj.get("shopSku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopSku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopSku").toString()));
      }
      if ((jsonObj.get("partnerWarehouseId") != null && !jsonObj.get("partnerWarehouseId").isJsonNull()) && !jsonObj.get("partnerWarehouseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerWarehouseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerWarehouseId").toString()));
      }
      if (jsonObj.get("promos") != null && !jsonObj.get("promos").isJsonNull()) {
        JsonArray jsonArraypromos = jsonObj.getAsJsonArray("promos");
        if (jsonArraypromos != null) {
          // ensure the json data is an array
          if (!jsonObj.get("promos").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `promos` to be an array in the JSON string but got `%s`", jsonObj.get("promos").toString()));
          }

          // validate the optional field `promos` (array)
          for (int i = 0; i < jsonArraypromos.size(); i++) {
            OrderItemPromoDTO.validateJsonElement(jsonArraypromos.get(i));
          };
        }
      }
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
        if (jsonArrayinstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
          }

          // validate the optional field `instances` (array)
          for (int i = 0; i < jsonArrayinstances.size(); i++) {
            OrderItemInstanceDTO.validateJsonElement(jsonArrayinstances.get(i));
          };
        }
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            OrderItemDetailDTO.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
      if (jsonObj.get("subsidies") != null && !jsonObj.get("subsidies").isJsonNull()) {
        JsonArray jsonArraysubsidies = jsonObj.getAsJsonArray("subsidies");
        if (jsonArraysubsidies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subsidies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subsidies` to be an array in the JSON string but got `%s`", jsonObj.get("subsidies").toString()));
          }

          // validate the optional field `subsidies` (array)
          for (int i = 0; i < jsonArraysubsidies.size(); i++) {
            OrderItemSubsidyDTO.validateJsonElement(jsonArraysubsidies.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("requiredInstanceTypes") != null && !jsonObj.get("requiredInstanceTypes").isJsonNull() && !jsonObj.get("requiredInstanceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredInstanceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("requiredInstanceTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderItemDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderItemDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderItemDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderItemDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderItemDTO>() {
           @Override
           public void write(JsonWriter out, OrderItemDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderItemDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderItemDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderItemDTO
   * @throws IOException if the JSON string is invalid with respect to OrderItemDTO
   */
  public static OrderItemDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderItemDTO.class);
  }

  /**
   * Convert an instance of OrderItemDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

