/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GpsDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Адрес доставки.  Указывается, если &#x60;type&#x3D;DELIVERY&#x60;, &#x60;type&#x3D;POST&#x60; или &#x60;type&#x3D;PICKUP&#x60; (адрес пункта выдачи). 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class OrderDeliveryAddressDTO {
  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_POSTCODE = "postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_DISTRICT = "district";
  @SerializedName(SERIALIZED_NAME_DISTRICT)
  private String district;

  public static final String SERIALIZED_NAME_SUBWAY = "subway";
  @SerializedName(SERIALIZED_NAME_SUBWAY)
  private String subway;

  public static final String SERIALIZED_NAME_STREET = "street";
  @SerializedName(SERIALIZED_NAME_STREET)
  private String street;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  private String house;

  public static final String SERIALIZED_NAME_BLOCK = "block";
  @SerializedName(SERIALIZED_NAME_BLOCK)
  private String block;

  public static final String SERIALIZED_NAME_ENTRANCE = "entrance";
  @SerializedName(SERIALIZED_NAME_ENTRANCE)
  private String entrance;

  public static final String SERIALIZED_NAME_ENTRYPHONE = "entryphone";
  @SerializedName(SERIALIZED_NAME_ENTRYPHONE)
  private String entryphone;

  public static final String SERIALIZED_NAME_FLOOR = "floor";
  @SerializedName(SERIALIZED_NAME_FLOOR)
  private String floor;

  public static final String SERIALIZED_NAME_APARTMENT = "apartment";
  @SerializedName(SERIALIZED_NAME_APARTMENT)
  private String apartment;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private String recipient;

  public static final String SERIALIZED_NAME_GPS = "gps";
  @SerializedName(SERIALIZED_NAME_GPS)
  private GpsDTO gps;

  public OrderDeliveryAddressDTO() {
  }

  public OrderDeliveryAddressDTO country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Страна.  Обязательный параметр. 
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public OrderDeliveryAddressDTO postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). 
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }


  public OrderDeliveryAddressDTO city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Город или населенный пункт.  Обязательный параметр. 
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public OrderDeliveryAddressDTO district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Район.
   * @return district
   */
  @javax.annotation.Nullable
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  public OrderDeliveryAddressDTO subway(String subway) {
    this.subway = subway;
    return this;
  }

  /**
   * Станция метро.
   * @return subway
   */
  @javax.annotation.Nullable
  public String getSubway() {
    return subway;
  }

  public void setSubway(String subway) {
    this.subway = subway;
  }


  public OrderDeliveryAddressDTO street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Улица.  Обязательный параметр. 
   * @return street
   */
  @javax.annotation.Nullable
  public String getStreet() {
    return street;
  }

  public void setStreet(String street) {
    this.street = street;
  }


  public OrderDeliveryAddressDTO house(String house) {
    this.house = house;
    return this;
  }

  /**
   * Дом или владение.  Обязательный параметр. 
   * @return house
   */
  @javax.annotation.Nullable
  public String getHouse() {
    return house;
  }

  public void setHouse(String house) {
    this.house = house;
  }


  public OrderDeliveryAddressDTO block(String block) {
    this.block = block;
    return this;
  }

  /**
   * Корпус или строение.
   * @return block
   */
  @javax.annotation.Nullable
  public String getBlock() {
    return block;
  }

  public void setBlock(String block) {
    this.block = block;
  }


  public OrderDeliveryAddressDTO entrance(String entrance) {
    this.entrance = entrance;
    return this;
  }

  /**
   * Подъезд.
   * @return entrance
   */
  @javax.annotation.Nullable
  public String getEntrance() {
    return entrance;
  }

  public void setEntrance(String entrance) {
    this.entrance = entrance;
  }


  public OrderDeliveryAddressDTO entryphone(String entryphone) {
    this.entryphone = entryphone;
    return this;
  }

  /**
   * Код домофона.
   * @return entryphone
   */
  @javax.annotation.Nullable
  public String getEntryphone() {
    return entryphone;
  }

  public void setEntryphone(String entryphone) {
    this.entryphone = entryphone;
  }


  public OrderDeliveryAddressDTO floor(String floor) {
    this.floor = floor;
    return this;
  }

  /**
   * Этаж.
   * @return floor
   */
  @javax.annotation.Nullable
  public String getFloor() {
    return floor;
  }

  public void setFloor(String floor) {
    this.floor = floor;
  }


  public OrderDeliveryAddressDTO apartment(String apartment) {
    this.apartment = apartment;
    return this;
  }

  /**
   * Квартира или офис.
   * @return apartment
   */
  @javax.annotation.Nullable
  public String getApartment() {
    return apartment;
  }

  public void setApartment(String apartment) {
    this.apartment = apartment;
  }


  public OrderDeliveryAddressDTO phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Телефон получателя заказа.  Обязательный параметр. 
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public OrderDeliveryAddressDTO recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
   * @return recipient
   */
  @javax.annotation.Nullable
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }


  public OrderDeliveryAddressDTO gps(GpsDTO gps) {
    this.gps = gps;
    return this;
  }

  /**
   * Get gps
   * @return gps
   */
  @javax.annotation.Nullable
  public GpsDTO getGps() {
    return gps;
  }

  public void setGps(GpsDTO gps) {
    this.gps = gps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderDeliveryAddressDTO orderDeliveryAddressDTO = (OrderDeliveryAddressDTO) o;
    return Objects.equals(this.country, orderDeliveryAddressDTO.country) &&
        Objects.equals(this.postcode, orderDeliveryAddressDTO.postcode) &&
        Objects.equals(this.city, orderDeliveryAddressDTO.city) &&
        Objects.equals(this.district, orderDeliveryAddressDTO.district) &&
        Objects.equals(this.subway, orderDeliveryAddressDTO.subway) &&
        Objects.equals(this.street, orderDeliveryAddressDTO.street) &&
        Objects.equals(this.house, orderDeliveryAddressDTO.house) &&
        Objects.equals(this.block, orderDeliveryAddressDTO.block) &&
        Objects.equals(this.entrance, orderDeliveryAddressDTO.entrance) &&
        Objects.equals(this.entryphone, orderDeliveryAddressDTO.entryphone) &&
        Objects.equals(this.floor, orderDeliveryAddressDTO.floor) &&
        Objects.equals(this.apartment, orderDeliveryAddressDTO.apartment) &&
        Objects.equals(this.phone, orderDeliveryAddressDTO.phone) &&
        Objects.equals(this.recipient, orderDeliveryAddressDTO.recipient) &&
        Objects.equals(this.gps, orderDeliveryAddressDTO.gps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(country, postcode, city, district, subway, street, house, block, entrance, entryphone, floor, apartment, phone, recipient, gps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDeliveryAddressDTO {\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    subway: ").append(toIndentedString(subway)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    entrance: ").append(toIndentedString(entrance)).append("\n");
    sb.append("    entryphone: ").append(toIndentedString(entryphone)).append("\n");
    sb.append("    floor: ").append(toIndentedString(floor)).append("\n");
    sb.append("    apartment: ").append(toIndentedString(apartment)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    gps: ").append(toIndentedString(gps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country");
    openapiFields.add("postcode");
    openapiFields.add("city");
    openapiFields.add("district");
    openapiFields.add("subway");
    openapiFields.add("street");
    openapiFields.add("house");
    openapiFields.add("block");
    openapiFields.add("entrance");
    openapiFields.add("entryphone");
    openapiFields.add("floor");
    openapiFields.add("apartment");
    openapiFields.add("phone");
    openapiFields.add("recipient");
    openapiFields.add("gps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderDeliveryAddressDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderDeliveryAddressDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderDeliveryAddressDTO is not found in the empty JSON string", OrderDeliveryAddressDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderDeliveryAddressDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderDeliveryAddressDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("postcode") != null && !jsonObj.get("postcode").isJsonNull()) && !jsonObj.get("postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postcode").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("district") != null && !jsonObj.get("district").isJsonNull()) && !jsonObj.get("district").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `district` to be a primitive type in the JSON string but got `%s`", jsonObj.get("district").toString()));
      }
      if ((jsonObj.get("subway") != null && !jsonObj.get("subway").isJsonNull()) && !jsonObj.get("subway").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subway` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subway").toString()));
      }
      if ((jsonObj.get("street") != null && !jsonObj.get("street").isJsonNull()) && !jsonObj.get("street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street").toString()));
      }
      if ((jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) && !jsonObj.get("house").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house").toString()));
      }
      if ((jsonObj.get("block") != null && !jsonObj.get("block").isJsonNull()) && !jsonObj.get("block").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `block` to be a primitive type in the JSON string but got `%s`", jsonObj.get("block").toString()));
      }
      if ((jsonObj.get("entrance") != null && !jsonObj.get("entrance").isJsonNull()) && !jsonObj.get("entrance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entrance").toString()));
      }
      if ((jsonObj.get("entryphone") != null && !jsonObj.get("entryphone").isJsonNull()) && !jsonObj.get("entryphone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entryphone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entryphone").toString()));
      }
      if ((jsonObj.get("floor") != null && !jsonObj.get("floor").isJsonNull()) && !jsonObj.get("floor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `floor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("floor").toString()));
      }
      if ((jsonObj.get("apartment") != null && !jsonObj.get("apartment").isJsonNull()) && !jsonObj.get("apartment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apartment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apartment").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) && !jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
      // validate the optional field `gps`
      if (jsonObj.get("gps") != null && !jsonObj.get("gps").isJsonNull()) {
        GpsDTO.validateJsonElement(jsonObj.get("gps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderDeliveryAddressDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderDeliveryAddressDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderDeliveryAddressDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderDeliveryAddressDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderDeliveryAddressDTO>() {
           @Override
           public void write(JsonWriter out, OrderDeliveryAddressDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderDeliveryAddressDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderDeliveryAddressDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderDeliveryAddressDTO
   * @throws IOException if the JSON string is invalid with respect to OrderDeliveryAddressDTO
   */
  public static OrderDeliveryAddressDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderDeliveryAddressDTO.class);
  }

  /**
   * Convert an instance of OrderDeliveryAddressDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

