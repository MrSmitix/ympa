/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.GpsDTO;



/**
  * Адрес доставки.  Указывается, если `type=DELIVERY`, `type=POST` или `type=PICKUP` (адрес пункта выдачи). 
 **/

public class OrderDeliveryAddressDTO  {
  
 /**
   * Страна.  Обязательный параметр. 
  **/
  private String country;

 /**
   * Почтовый индекс.  Указывается, если выбрана доставка почтой (`delivery type=POST`). 
  **/
  private String postcode;

 /**
   * Город или населенный пункт.  Обязательный параметр. 
  **/
  private String city;

 /**
   * Район.
  **/
  private String district;

 /**
   * Станция метро.
  **/
  private String subway;

 /**
   * Улица.  Обязательный параметр. 
  **/
  private String street;

 /**
   * Дом или владение.  Обязательный параметр. 
  **/
  private String house;

 /**
   * Корпус или строение.
  **/
  private String block;

 /**
   * Подъезд.
  **/
  private String entrance;

 /**
   * Код домофона.
  **/
  private String entryphone;

 /**
   * Этаж.
  **/
  private String floor;

 /**
   * Квартира или офис.
  **/
  private String apartment;

 /**
   * Телефон получателя заказа.  Обязательный параметр. 
  **/
  private String phone;

 /**
   * Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
  **/
  private String recipient;

  private GpsDTO gps;

 /**
   * Страна.  Обязательный параметр. 
   * @return country
  **/
  public String getCountry() {
    return country;
  }

  /**
    * Set country
  **/
  public void setCountry(String country) {
    this.country = country;
  }

  public OrderDeliveryAddressDTO country(String country) {
    this.country = country;
    return this;
  }

 /**
   * Почтовый индекс.  Указывается, если выбрана доставка почтой (&#x60;delivery type&#x3D;POST&#x60;). 
   * @return postcode
  **/
  public String getPostcode() {
    return postcode;
  }

  /**
    * Set postcode
  **/
  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }

  public OrderDeliveryAddressDTO postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

 /**
   * Город или населенный пункт.  Обязательный параметр. 
   * @return city
  **/
  public String getCity() {
    return city;
  }

  /**
    * Set city
  **/
  public void setCity(String city) {
    this.city = city;
  }

  public OrderDeliveryAddressDTO city(String city) {
    this.city = city;
    return this;
  }

 /**
   * Район.
   * @return district
  **/
  public String getDistrict() {
    return district;
  }

  /**
    * Set district
  **/
  public void setDistrict(String district) {
    this.district = district;
  }

  public OrderDeliveryAddressDTO district(String district) {
    this.district = district;
    return this;
  }

 /**
   * Станция метро.
   * @return subway
  **/
  public String getSubway() {
    return subway;
  }

  /**
    * Set subway
  **/
  public void setSubway(String subway) {
    this.subway = subway;
  }

  public OrderDeliveryAddressDTO subway(String subway) {
    this.subway = subway;
    return this;
  }

 /**
   * Улица.  Обязательный параметр. 
   * @return street
  **/
  public String getStreet() {
    return street;
  }

  /**
    * Set street
  **/
  public void setStreet(String street) {
    this.street = street;
  }

  public OrderDeliveryAddressDTO street(String street) {
    this.street = street;
    return this;
  }

 /**
   * Дом или владение.  Обязательный параметр. 
   * @return house
  **/
  public String getHouse() {
    return house;
  }

  /**
    * Set house
  **/
  public void setHouse(String house) {
    this.house = house;
  }

  public OrderDeliveryAddressDTO house(String house) {
    this.house = house;
    return this;
  }

 /**
   * Корпус или строение.
   * @return block
  **/
  public String getBlock() {
    return block;
  }

  /**
    * Set block
  **/
  public void setBlock(String block) {
    this.block = block;
  }

  public OrderDeliveryAddressDTO block(String block) {
    this.block = block;
    return this;
  }

 /**
   * Подъезд.
   * @return entrance
  **/
  public String getEntrance() {
    return entrance;
  }

  /**
    * Set entrance
  **/
  public void setEntrance(String entrance) {
    this.entrance = entrance;
  }

  public OrderDeliveryAddressDTO entrance(String entrance) {
    this.entrance = entrance;
    return this;
  }

 /**
   * Код домофона.
   * @return entryphone
  **/
  public String getEntryphone() {
    return entryphone;
  }

  /**
    * Set entryphone
  **/
  public void setEntryphone(String entryphone) {
    this.entryphone = entryphone;
  }

  public OrderDeliveryAddressDTO entryphone(String entryphone) {
    this.entryphone = entryphone;
    return this;
  }

 /**
   * Этаж.
   * @return floor
  **/
  public String getFloor() {
    return floor;
  }

  /**
    * Set floor
  **/
  public void setFloor(String floor) {
    this.floor = floor;
  }

  public OrderDeliveryAddressDTO floor(String floor) {
    this.floor = floor;
    return this;
  }

 /**
   * Квартира или офис.
   * @return apartment
  **/
  public String getApartment() {
    return apartment;
  }

  /**
    * Set apartment
  **/
  public void setApartment(String apartment) {
    this.apartment = apartment;
  }

  public OrderDeliveryAddressDTO apartment(String apartment) {
    this.apartment = apartment;
    return this;
  }

 /**
   * Телефон получателя заказа.  Обязательный параметр. 
   * @return phone
  **/
  public String getPhone() {
    return phone;
  }

  /**
    * Set phone
  **/
  public void setPhone(String phone) {
    this.phone = phone;
  }

  public OrderDeliveryAddressDTO phone(String phone) {
    this.phone = phone;
    return this;
  }

 /**
   * Фамилия, имя и отчество получателя заказа.  Обязательный параметр. 
   * @return recipient
  **/
  public String getRecipient() {
    return recipient;
  }

  /**
    * Set recipient
  **/
  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }

  public OrderDeliveryAddressDTO recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

 /**
   * Get gps
   * @return gps
  **/
  public GpsDTO getGps() {
    return gps;
  }

  /**
    * Set gps
  **/
  public void setGps(GpsDTO gps) {
    this.gps = gps;
  }

  public OrderDeliveryAddressDTO gps(GpsDTO gps) {
    this.gps = gps;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDeliveryAddressDTO {\n");
    
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    subway: ").append(toIndentedString(subway)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    entrance: ").append(toIndentedString(entrance)).append("\n");
    sb.append("    entryphone: ").append(toIndentedString(entryphone)).append("\n");
    sb.append("    floor: ").append(toIndentedString(floor)).append("\n");
    sb.append("    apartment: ").append(toIndentedString(apartment)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    gps: ").append(toIndentedString(gps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

