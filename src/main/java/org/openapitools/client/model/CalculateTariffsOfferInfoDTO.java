/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.CalculateTariffsOfferDTO;
import org.openapitools.client.model.CalculatedTariffDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Стоимость услуг.
 **/
@ApiModel(description = "Стоимость услуг.")
public class CalculateTariffsOfferInfoDTO {
  
  @SerializedName("offer")
  private CalculateTariffsOfferDTO offer = null;
  @SerializedName("tariffs")
  private List<CalculatedTariffDTO> tariffs = null;

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public CalculateTariffsOfferDTO getOffer() {
    return offer;
  }
  public void setOffer(CalculateTariffsOfferDTO offer) {
    this.offer = offer;
  }

  /**
   * Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). 
   **/
  @ApiModelProperty(required = true, value = "Список услуг и их стоимость.  По некоторым услугам могут возвращаться несколько разных стоимостей. Например, в модели FBS стоимость услуги `SORTING` (обработка заказа) зависит от способа отгрузки и количества заказов в отгрузке. Подробнее о тарифах на услуги читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/introduction/rates/models/). ")
  public List<CalculatedTariffDTO> getTariffs() {
    return tariffs;
  }
  public void setTariffs(List<CalculatedTariffDTO> tariffs) {
    this.tariffs = tariffs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateTariffsOfferInfoDTO calculateTariffsOfferInfoDTO = (CalculateTariffsOfferInfoDTO) o;
    return (this.offer == null ? calculateTariffsOfferInfoDTO.offer == null : this.offer.equals(calculateTariffsOfferInfoDTO.offer)) &&
        (this.tariffs == null ? calculateTariffsOfferInfoDTO.tariffs == null : this.tariffs.equals(calculateTariffsOfferInfoDTO.tariffs));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.offer == null ? 0: this.offer.hashCode());
    result = 31 * result + (this.tariffs == null ? 0: this.tariffs.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTariffsOfferInfoDTO {\n");
    
    sb.append("  offer: ").append(offer).append("\n");
    sb.append("  tariffs: ").append(tariffs).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
