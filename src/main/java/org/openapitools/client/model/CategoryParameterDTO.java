/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CategoryParameterUnitDTO;
import org.openapitools.client.model.OfferCardRecommendationType;
import org.openapitools.client.model.ParameterType;
import org.openapitools.client.model.ParameterValueConstraintsDTO;
import org.openapitools.client.model.ParameterValueOptionDTO;
import org.openapitools.client.model.ValueRestrictionDTO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Характеристика товара.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-09T21:58:46.292387749Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CategoryParameterDTO {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ParameterType type;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private CategoryParameterUnitDTO unit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RECOMMENDATION_TYPES = "recommendationTypes";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_TYPES)
  private List<OfferCardRecommendationType> recommendationTypes;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_FILTERING = "filtering";
  @SerializedName(SERIALIZED_NAME_FILTERING)
  private Boolean filtering;

  public static final String SERIALIZED_NAME_DISTINCTIVE = "distinctive";
  @SerializedName(SERIALIZED_NAME_DISTINCTIVE)
  private Boolean distinctive;

  public static final String SERIALIZED_NAME_MULTIVALUE = "multivalue";
  @SerializedName(SERIALIZED_NAME_MULTIVALUE)
  private Boolean multivalue;

  public static final String SERIALIZED_NAME_ALLOW_CUSTOM_VALUES = "allowCustomValues";
  @SerializedName(SERIALIZED_NAME_ALLOW_CUSTOM_VALUES)
  private Boolean allowCustomValues;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<ParameterValueOptionDTO> values;

  public static final String SERIALIZED_NAME_CONSTRAINTS = "constraints";
  @SerializedName(SERIALIZED_NAME_CONSTRAINTS)
  private ParameterValueConstraintsDTO constraints;

  public static final String SERIALIZED_NAME_VALUE_RESTRICTIONS = "valueRestrictions";
  @SerializedName(SERIALIZED_NAME_VALUE_RESTRICTIONS)
  private List<ValueRestrictionDTO> valueRestrictions;

  public CategoryParameterDTO() {
  }

  public CategoryParameterDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Идентификатор характеристики.
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CategoryParameterDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Название характеристики.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CategoryParameterDTO type(ParameterType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ParameterType getType() {
    return type;
  }

  public void setType(ParameterType type) {
    this.type = type;
  }


  public CategoryParameterDTO unit(CategoryParameterUnitDTO unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public CategoryParameterUnitDTO getUnit() {
    return unit;
  }

  public void setUnit(CategoryParameterUnitDTO unit) {
    this.unit = unit;
  }


  public CategoryParameterDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Описание характеристики.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CategoryParameterDTO recommendationTypes(List<OfferCardRecommendationType> recommendationTypes) {
    this.recommendationTypes = recommendationTypes;
    return this;
  }

  public CategoryParameterDTO addRecommendationTypesItem(OfferCardRecommendationType recommendationTypesItem) {
    if (this.recommendationTypes == null) {
      this.recommendationTypes = new ArrayList<>();
    }
    this.recommendationTypes.add(recommendationTypesItem);
    return this;
  }

  /**
   * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
   * @return recommendationTypes
   */
  @javax.annotation.Nullable
  public List<OfferCardRecommendationType> getRecommendationTypes() {
    return recommendationTypes;
  }

  public void setRecommendationTypes(List<OfferCardRecommendationType> recommendationTypes) {
    this.recommendationTypes = recommendationTypes;
  }


  public CategoryParameterDTO required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Обязательность характеристики.
   * @return required
   */
  @javax.annotation.Nonnull
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public CategoryParameterDTO filtering(Boolean filtering) {
    this.filtering = filtering;
    return this;
  }

  /**
   * Используется ли характеристика в фильтре.
   * @return filtering
   */
  @javax.annotation.Nonnull
  public Boolean getFiltering() {
    return filtering;
  }

  public void setFiltering(Boolean filtering) {
    this.filtering = filtering;
  }


  public CategoryParameterDTO distinctive(Boolean distinctive) {
    this.distinctive = distinctive;
    return this;
  }

  /**
   * Является ли характеристика особенностью варианта.
   * @return distinctive
   */
  @javax.annotation.Nonnull
  public Boolean getDistinctive() {
    return distinctive;
  }

  public void setDistinctive(Boolean distinctive) {
    this.distinctive = distinctive;
  }


  public CategoryParameterDTO multivalue(Boolean multivalue) {
    this.multivalue = multivalue;
    return this;
  }

  /**
   * Можно ли передать сразу несколько значений.
   * @return multivalue
   */
  @javax.annotation.Nonnull
  public Boolean getMultivalue() {
    return multivalue;
  }

  public void setMultivalue(Boolean multivalue) {
    this.multivalue = multivalue;
  }


  public CategoryParameterDTO allowCustomValues(Boolean allowCustomValues) {
    this.allowCustomValues = allowCustomValues;
    return this;
  }

  /**
   * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа &#x60;ENUM&#x60;.
   * @return allowCustomValues
   */
  @javax.annotation.Nonnull
  public Boolean getAllowCustomValues() {
    return allowCustomValues;
  }

  public void setAllowCustomValues(Boolean allowCustomValues) {
    this.allowCustomValues = allowCustomValues;
  }


  public CategoryParameterDTO values(List<ParameterValueOptionDTO> values) {
    this.values = values;
    return this;
  }

  public CategoryParameterDTO addValuesItem(ParameterValueOptionDTO valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Список допустимых значений параметра. Только для характеристик типа &#x60;ENUM&#x60;.
   * @return values
   */
  @javax.annotation.Nullable
  public List<ParameterValueOptionDTO> getValues() {
    return values;
  }

  public void setValues(List<ParameterValueOptionDTO> values) {
    this.values = values;
  }


  public CategoryParameterDTO constraints(ParameterValueConstraintsDTO constraints) {
    this.constraints = constraints;
    return this;
  }

  /**
   * Get constraints
   * @return constraints
   */
  @javax.annotation.Nullable
  public ParameterValueConstraintsDTO getConstraints() {
    return constraints;
  }

  public void setConstraints(ParameterValueConstraintsDTO constraints) {
    this.constraints = constraints;
  }


  public CategoryParameterDTO valueRestrictions(List<ValueRestrictionDTO> valueRestrictions) {
    this.valueRestrictions = valueRestrictions;
    return this;
  }

  public CategoryParameterDTO addValueRestrictionsItem(ValueRestrictionDTO valueRestrictionsItem) {
    if (this.valueRestrictions == null) {
      this.valueRestrictions = new ArrayList<>();
    }
    this.valueRestrictions.add(valueRestrictionsItem);
    return this;
  }

  /**
   * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа &#x60;ENUM&#x60;.
   * @return valueRestrictions
   */
  @javax.annotation.Nullable
  public List<ValueRestrictionDTO> getValueRestrictions() {
    return valueRestrictions;
  }

  public void setValueRestrictions(List<ValueRestrictionDTO> valueRestrictions) {
    this.valueRestrictions = valueRestrictions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryParameterDTO categoryParameterDTO = (CategoryParameterDTO) o;
    return Objects.equals(this.id, categoryParameterDTO.id) &&
        Objects.equals(this.name, categoryParameterDTO.name) &&
        Objects.equals(this.type, categoryParameterDTO.type) &&
        Objects.equals(this.unit, categoryParameterDTO.unit) &&
        Objects.equals(this.description, categoryParameterDTO.description) &&
        Objects.equals(this.recommendationTypes, categoryParameterDTO.recommendationTypes) &&
        Objects.equals(this.required, categoryParameterDTO.required) &&
        Objects.equals(this.filtering, categoryParameterDTO.filtering) &&
        Objects.equals(this.distinctive, categoryParameterDTO.distinctive) &&
        Objects.equals(this.multivalue, categoryParameterDTO.multivalue) &&
        Objects.equals(this.allowCustomValues, categoryParameterDTO.allowCustomValues) &&
        Objects.equals(this.values, categoryParameterDTO.values) &&
        Objects.equals(this.constraints, categoryParameterDTO.constraints) &&
        Objects.equals(this.valueRestrictions, categoryParameterDTO.valueRestrictions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, unit, description, recommendationTypes, required, filtering, distinctive, multivalue, allowCustomValues, values, constraints, valueRestrictions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryParameterDTO {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    recommendationTypes: ").append(toIndentedString(recommendationTypes)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    filtering: ").append(toIndentedString(filtering)).append("\n");
    sb.append("    distinctive: ").append(toIndentedString(distinctive)).append("\n");
    sb.append("    multivalue: ").append(toIndentedString(multivalue)).append("\n");
    sb.append("    allowCustomValues: ").append(toIndentedString(allowCustomValues)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("    valueRestrictions: ").append(toIndentedString(valueRestrictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("unit");
    openapiFields.add("description");
    openapiFields.add("recommendationTypes");
    openapiFields.add("required");
    openapiFields.add("filtering");
    openapiFields.add("distinctive");
    openapiFields.add("multivalue");
    openapiFields.add("allowCustomValues");
    openapiFields.add("values");
    openapiFields.add("constraints");
    openapiFields.add("valueRestrictions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("required");
    openapiRequiredFields.add("filtering");
    openapiRequiredFields.add("distinctive");
    openapiRequiredFields.add("multivalue");
    openapiRequiredFields.add("allowCustomValues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CategoryParameterDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryParameterDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryParameterDTO is not found in the empty JSON string", CategoryParameterDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CategoryParameterDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryParameterDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CategoryParameterDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `type`
      ParameterType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        CategoryParameterUnitDTO.validateJsonElement(jsonObj.get("unit"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recommendationTypes") != null && !jsonObj.get("recommendationTypes").isJsonNull() && !jsonObj.get("recommendationTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("recommendationTypes").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            ParameterValueOptionDTO.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
      // validate the optional field `constraints`
      if (jsonObj.get("constraints") != null && !jsonObj.get("constraints").isJsonNull()) {
        ParameterValueConstraintsDTO.validateJsonElement(jsonObj.get("constraints"));
      }
      if (jsonObj.get("valueRestrictions") != null && !jsonObj.get("valueRestrictions").isJsonNull()) {
        JsonArray jsonArrayvalueRestrictions = jsonObj.getAsJsonArray("valueRestrictions");
        if (jsonArrayvalueRestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("valueRestrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `valueRestrictions` to be an array in the JSON string but got `%s`", jsonObj.get("valueRestrictions").toString()));
          }

          // validate the optional field `valueRestrictions` (array)
          for (int i = 0; i < jsonArrayvalueRestrictions.size(); i++) {
            ValueRestrictionDTO.validateJsonElement(jsonArrayvalueRestrictions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryParameterDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryParameterDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryParameterDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryParameterDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryParameterDTO>() {
           @Override
           public void write(JsonWriter out, CategoryParameterDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryParameterDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CategoryParameterDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CategoryParameterDTO
   * @throws IOException if the JSON string is invalid with respect to CategoryParameterDTO
   */
  public static CategoryParameterDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryParameterDTO.class);
  }

  /**
   * Convert an instance of CategoryParameterDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

