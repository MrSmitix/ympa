/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.CategoryParameterUnitDTO;
import org.openapitools.client.model.OfferCardRecommendationType;
import org.openapitools.client.model.ParameterType;
import org.openapitools.client.model.ParameterValueConstraintsDTO;
import org.openapitools.client.model.ParameterValueOptionDTO;
import org.openapitools.client.model.ValueRestrictionDTO;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * Характеристика товара.
 **/
@ApiModel(description = "Характеристика товара.")
public class CategoryParameterDTO {
  
  @SerializedName("id")
  private Long id = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("type")
  private ParameterType type = null;
  @SerializedName("unit")
  private CategoryParameterUnitDTO unit = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("recommendationTypes")
  private List<OfferCardRecommendationType> recommendationTypes = null;
  @SerializedName("required")
  private Boolean required = null;
  @SerializedName("filtering")
  private Boolean filtering = null;
  @SerializedName("distinctive")
  private Boolean distinctive = null;
  @SerializedName("multivalue")
  private Boolean multivalue = null;
  @SerializedName("allowCustomValues")
  private Boolean allowCustomValues = null;
  @SerializedName("values")
  private List<ParameterValueOptionDTO> values = null;
  @SerializedName("constraints")
  private ParameterValueConstraintsDTO constraints = null;
  @SerializedName("valueRestrictions")
  private List<ValueRestrictionDTO> valueRestrictions = null;

  /**
   * Идентификатор характеристики.
   **/
  @ApiModelProperty(required = true, value = "Идентификатор характеристики.")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }

  /**
   * Название характеристики.
   **/
  @ApiModelProperty(value = "Название характеристики.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   **/
  @ApiModelProperty(required = true, value = "")
  public ParameterType getType() {
    return type;
  }
  public void setType(ParameterType type) {
    this.type = type;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public CategoryParameterUnitDTO getUnit() {
    return unit;
  }
  public void setUnit(CategoryParameterUnitDTO unit) {
    this.unit = unit;
  }

  /**
   * Описание характеристики.
   **/
  @ApiModelProperty(value = "Описание характеристики.")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.
   **/
  @ApiModelProperty(value = "Перечень возможных рекомендаций по заполнению карточки, к которым относится данная характеристика.")
  public List<OfferCardRecommendationType> getRecommendationTypes() {
    return recommendationTypes;
  }
  public void setRecommendationTypes(List<OfferCardRecommendationType> recommendationTypes) {
    this.recommendationTypes = recommendationTypes;
  }

  /**
   * Обязательность характеристики.
   **/
  @ApiModelProperty(required = true, value = "Обязательность характеристики.")
  public Boolean getRequired() {
    return required;
  }
  public void setRequired(Boolean required) {
    this.required = required;
  }

  /**
   * Используется ли характеристика в фильтре.
   **/
  @ApiModelProperty(required = true, value = "Используется ли характеристика в фильтре.")
  public Boolean getFiltering() {
    return filtering;
  }
  public void setFiltering(Boolean filtering) {
    this.filtering = filtering;
  }

  /**
   * Является ли характеристика особенностью варианта.
   **/
  @ApiModelProperty(required = true, value = "Является ли характеристика особенностью варианта.")
  public Boolean getDistinctive() {
    return distinctive;
  }
  public void setDistinctive(Boolean distinctive) {
    this.distinctive = distinctive;
  }

  /**
   * Можно ли передать сразу несколько значений.
   **/
  @ApiModelProperty(required = true, value = "Можно ли передать сразу несколько значений.")
  public Boolean getMultivalue() {
    return multivalue;
  }
  public void setMultivalue(Boolean multivalue) {
    this.multivalue = multivalue;
  }

  /**
   * Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.
   **/
  @ApiModelProperty(required = true, value = "Можно ли передавать собственное значение, которого нет в списке вариантов Маркета. Только для характеристик типа `ENUM`.")
  public Boolean getAllowCustomValues() {
    return allowCustomValues;
  }
  public void setAllowCustomValues(Boolean allowCustomValues) {
    this.allowCustomValues = allowCustomValues;
  }

  /**
   * Список допустимых значений параметра. Только для характеристик типа `ENUM`.
   **/
  @ApiModelProperty(value = "Список допустимых значений параметра. Только для характеристик типа `ENUM`.")
  public List<ParameterValueOptionDTO> getValues() {
    return values;
  }
  public void setValues(List<ParameterValueOptionDTO> values) {
    this.values = values;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public ParameterValueConstraintsDTO getConstraints() {
    return constraints;
  }
  public void setConstraints(ParameterValueConstraintsDTO constraints) {
    this.constraints = constraints;
  }

  /**
   * Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.
   **/
  @ApiModelProperty(value = "Ограничения на значения, накладываемые другими характеристиками. Только для характеристик типа `ENUM`.")
  public List<ValueRestrictionDTO> getValueRestrictions() {
    return valueRestrictions;
  }
  public void setValueRestrictions(List<ValueRestrictionDTO> valueRestrictions) {
    this.valueRestrictions = valueRestrictions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryParameterDTO categoryParameterDTO = (CategoryParameterDTO) o;
    return (this.id == null ? categoryParameterDTO.id == null : this.id.equals(categoryParameterDTO.id)) &&
        (this.name == null ? categoryParameterDTO.name == null : this.name.equals(categoryParameterDTO.name)) &&
        (this.type == null ? categoryParameterDTO.type == null : this.type.equals(categoryParameterDTO.type)) &&
        (this.unit == null ? categoryParameterDTO.unit == null : this.unit.equals(categoryParameterDTO.unit)) &&
        (this.description == null ? categoryParameterDTO.description == null : this.description.equals(categoryParameterDTO.description)) &&
        (this.recommendationTypes == null ? categoryParameterDTO.recommendationTypes == null : this.recommendationTypes.equals(categoryParameterDTO.recommendationTypes)) &&
        (this.required == null ? categoryParameterDTO.required == null : this.required.equals(categoryParameterDTO.required)) &&
        (this.filtering == null ? categoryParameterDTO.filtering == null : this.filtering.equals(categoryParameterDTO.filtering)) &&
        (this.distinctive == null ? categoryParameterDTO.distinctive == null : this.distinctive.equals(categoryParameterDTO.distinctive)) &&
        (this.multivalue == null ? categoryParameterDTO.multivalue == null : this.multivalue.equals(categoryParameterDTO.multivalue)) &&
        (this.allowCustomValues == null ? categoryParameterDTO.allowCustomValues == null : this.allowCustomValues.equals(categoryParameterDTO.allowCustomValues)) &&
        (this.values == null ? categoryParameterDTO.values == null : this.values.equals(categoryParameterDTO.values)) &&
        (this.constraints == null ? categoryParameterDTO.constraints == null : this.constraints.equals(categoryParameterDTO.constraints)) &&
        (this.valueRestrictions == null ? categoryParameterDTO.valueRestrictions == null : this.valueRestrictions.equals(categoryParameterDTO.valueRestrictions));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.id == null ? 0: this.id.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.unit == null ? 0: this.unit.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.recommendationTypes == null ? 0: this.recommendationTypes.hashCode());
    result = 31 * result + (this.required == null ? 0: this.required.hashCode());
    result = 31 * result + (this.filtering == null ? 0: this.filtering.hashCode());
    result = 31 * result + (this.distinctive == null ? 0: this.distinctive.hashCode());
    result = 31 * result + (this.multivalue == null ? 0: this.multivalue.hashCode());
    result = 31 * result + (this.allowCustomValues == null ? 0: this.allowCustomValues.hashCode());
    result = 31 * result + (this.values == null ? 0: this.values.hashCode());
    result = 31 * result + (this.constraints == null ? 0: this.constraints.hashCode());
    result = 31 * result + (this.valueRestrictions == null ? 0: this.valueRestrictions.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryParameterDTO {\n");
    
    sb.append("  id: ").append(id).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  unit: ").append(unit).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  recommendationTypes: ").append(recommendationTypes).append("\n");
    sb.append("  required: ").append(required).append("\n");
    sb.append("  filtering: ").append(filtering).append("\n");
    sb.append("  distinctive: ").append(distinctive).append("\n");
    sb.append("  multivalue: ").append(multivalue).append("\n");
    sb.append("  allowCustomValues: ").append(allowCustomValues).append("\n");
    sb.append("  values: ").append(values).append("\n");
    sb.append("  constraints: ").append(constraints).append("\n");
    sb.append("  valueRestrictions: ").append(valueRestrictions).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
