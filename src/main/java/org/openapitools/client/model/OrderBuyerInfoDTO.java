/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.OrderBuyerType;



/**
  * Информация о покупателе и его номере телефона.
 **/

public class OrderBuyerInfoDTO  {
  
 /**
   * Идентификатор покупателя.
  **/
  private String id;

 /**
   * Фамилия покупателя.
  **/
  private String lastName;

 /**
   * Имя покупателя.
  **/
  private String firstName;

 /**
   * Отчество покупателя.
  **/
  private String middleName;

  private OrderBuyerType type;

 /**
   * Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: `+<код_страны><код_региона><номер_телефона>`. 
  **/
  private String phone;

 /**
   * Идентификатор покупателя.
   * @return id
  **/
  public String getId() {
    return id;
  }

  /**
    * Set id
  **/
  public void setId(String id) {
    this.id = id;
  }

  public OrderBuyerInfoDTO id(String id) {
    this.id = id;
    return this;
  }

 /**
   * Фамилия покупателя.
   * @return lastName
  **/
  public String getLastName() {
    return lastName;
  }

  /**
    * Set lastName
  **/
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public OrderBuyerInfoDTO lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

 /**
   * Имя покупателя.
   * @return firstName
  **/
  public String getFirstName() {
    return firstName;
  }

  /**
    * Set firstName
  **/
  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public OrderBuyerInfoDTO firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

 /**
   * Отчество покупателя.
   * @return middleName
  **/
  public String getMiddleName() {
    return middleName;
  }

  /**
    * Set middleName
  **/
  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public OrderBuyerInfoDTO middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

 /**
   * Get type
   * @return type
  **/
  public OrderBuyerType getType() {
    return type;
  }

  /**
    * Set type
  **/
  public void setType(OrderBuyerType type) {
    this.type = type;
  }

  public OrderBuyerInfoDTO type(OrderBuyerType type) {
    this.type = type;
    return this;
  }

 /**
   * Подменный номер телефона покупателя. Подробнее о таких номерах читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/orders/dbs/call#fake-number).  Формат номера: &#x60;+&lt;код_страны&gt;&lt;код_региона&gt;&lt;номер_телефона&gt;&#x60;. 
   * @return phone
  **/
  public String getPhone() {
    return phone;
  }

  /**
    * Set phone
  **/
  public void setPhone(String phone) {
    this.phone = phone;
  }

  public OrderBuyerInfoDTO phone(String phone) {
    this.phone = phone;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderBuyerInfoDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

