/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;

import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.MediaType;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiLockedErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.CurrencyType;
import org.openapitools.client.model.DeleteCampaignOffersRequest;
import org.openapitools.client.model.DeleteCampaignOffersResponse;
import org.openapitools.client.model.EmptyApiResponse;
import org.openapitools.client.model.GetAllOffersResponse;
import org.openapitools.client.model.GetCampaignOffersRequest;
import org.openapitools.client.model.GetCampaignOffersResponse;
import org.openapitools.client.model.GetOfferRecommendationsRequest;
import org.openapitools.client.model.GetOfferRecommendationsResponse;
import org.openapitools.client.model.GetOffersResponse;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.openapitools.client.model.UpdateCampaignOffersRequest;

/**
 * Партнерский API Маркета
 *
 * <p>API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 */
@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface OffersApi  {

    /**
     * Удаление товаров из ассортимента магазина
     * Удаляет заданные товары из заданного магазина.  {% note warning \&quot;Запрос удаляет товары именно из конкретного магазина\&quot; %}  На продажи в других магазинах и на наличие товара в общем каталоге он не влияет.  {% endnote %}  Товар не получится удалить, если он хранится на складах Маркета.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     */
    @POST
    @Path("/campaigns/{campaignId}/offers/delete")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    DeleteCampaignOffersResponse deleteCampaignOffers(@PathParam("campaignId") Long campaignId, DeleteCampaignOffersRequest deleteCampaignOffersRequest) throws ApiException, ProcessingException;

    /**
     * Все предложения магазина
     * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет максимально быстро получить информацию обо всех предложениях магазина, размещенных на Маркете. Возвращает результат в виде сегментов нефиксированного размера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Яндекс Маркета, с которой соотнесено предложение, а также аукционные ставки на него.  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лимит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * @deprecated
     */
    @Deprecated
    @GET
    @Path("/campaigns/{campaignId}/offers/all")
    @Produces({ "application/json" })
    GetAllOffersResponse getAllOffers(@PathParam("campaignId") Long campaignId, @QueryParam("feedId") Long feedId, @QueryParam("chunk") Integer chunk) throws ApiException, ProcessingException;

    /**
     * Информация о товарах, которые размещены в заданном магазине
     * Возвращает список товаров, которые размещены в заданном магазине. Для каждого товара указываются параметры размещения.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     */
    @POST
    @Path("/campaigns/{campaignId}/offers")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    GetCampaignOffersResponse getCampaignOffers(@PathParam("campaignId") Long campaignId, GetCampaignOffersRequest getCampaignOffersRequest, @QueryParam("page_token") String pageToken, @QueryParam("limit") Integer limit) throws ApiException, ProcessingException;

    /**
     * Рекомендации Маркета, касающиеся цен
     * Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     */
    @POST
    @Path("/businesses/{businessId}/offers/recommendations")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    GetOfferRecommendationsResponse getOfferRecommendations(@PathParam("businessId") Long businessId, GetOfferRecommendationsRequest getOfferRecommendationsRequest, @QueryParam("page_token") String pageToken, @QueryParam("limit") Integer limit) throws ApiException, ProcessingException;

    /**
     * Предложения магазина
     * {% note warning \&quot;\&quot; %}  Этот метод устарел. Не используйте его.  {% endnote %}  Позволяет фильтровать информацию о предложениях магазина, размещенных на Маркете, и искать предложения по заданному поисковому запросу.  Поиск предложений, размещенных на Маркете, работает по поисковому запросу аналогично поиску Маркета. Результаты возвращаются с использованием пейджера.  В ответе на запрос для каждого найденного предложения указывается URL и наименование этого предложения, его цена и валюта, в которой она указана, карточка модели Маркета, с которой соотнесено предложение, и аукционные ставки на него.  {% note info %}  Из-за особенностей поиска Маркета иногда на последних страницах пейджера фактическое количество результатов оказывается меньше количества, указанного ранее на предыдущих страницах.  В связи с этим настоятельно рекомендуется анализировать содержимое параметра pager для каждой полученной страницы.  {% endnote %}  {% note info %}  Количество предложений считается по данным за последние семь дней (не включая сегодня).  Для новых магазинов, еще не разместивших предложения, ограничение равно 0 и пересчитывается на следующий день после размещения первых предложений.  {% endnote %}  |**⚙️ Лимит:** рассчитывается по [формуле](*rule)| |-|  [//]: &lt;&gt; (rule: суточный лисит товаров — среднее количество таваров в каталоге за неделю * 25) 
     * @deprecated
     */
    @Deprecated
    @GET
    @Path("/campaigns/{campaignId}/offers")
    @Produces({ "application/json" })
    GetOffersResponse getOffers(@PathParam("campaignId") Long campaignId, @QueryParam("query") String query, @QueryParam("feedId") Long feedId, @QueryParam("shopCategoryId") String shopCategoryId, @QueryParam("currency") CurrencyType currency, @QueryParam("matched") Boolean matched, @QueryParam("page") @DefaultValue("1") Integer page, @QueryParam("pageSize") Integer pageSize) throws ApiException, ProcessingException;

    /**
     * Изменение условий продажи товаров в магазине
     * Изменяет параметры продажи товаров в конкретном магазине: доступность товара, условия доставки и самовывоза, применяемую ставку НДС.  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     */
    @POST
    @Path("/campaigns/{campaignId}/offers/update")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    EmptyApiResponse updateCampaignOffers(@PathParam("campaignId") Long campaignId, UpdateCampaignOffersRequest updateCampaignOffersRequest) throws ApiException, ProcessingException;
}
