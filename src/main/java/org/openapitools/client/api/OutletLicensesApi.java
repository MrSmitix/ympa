/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.EmptyApiResponse;
import org.openapitools.client.model.GetOutletLicensesResponse;
import java.util.Set;
import org.openapitools.client.model.UpdateOutletLicenseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OutletLicensesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OutletLicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OutletLicensesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteOutletLicenses
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param ids Список идентификаторов лицензий. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOutletLicensesCall(Long campaignId, Set<Long> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/outlets/licenses"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOutletLicensesValidateBeforeCall(Long campaignId, Set<Long> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling deleteOutletLicenses(Async)");
        }

        return deleteOutletLicensesCall(campaignId, ids, _callback);

    }

    /**
     * Удаление лицензий для точек продаж
     * Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param ids Список идентификаторов лицензий. (optional)
     * @return EmptyApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public EmptyApiResponse deleteOutletLicenses(Long campaignId, Set<Long> ids) throws ApiException {
        ApiResponse<EmptyApiResponse> localVarResp = deleteOutletLicensesWithHttpInfo(campaignId, ids);
        return localVarResp.getData();
    }

    /**
     * Удаление лицензий для точек продаж
     * Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param ids Список идентификаторов лицензий. (optional)
     * @return ApiResponse&lt;EmptyApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyApiResponse> deleteOutletLicensesWithHttpInfo(Long campaignId, Set<Long> ids) throws ApiException {
        okhttp3.Call localVarCall = deleteOutletLicensesValidateBeforeCall(campaignId, ids, null);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Удаление лицензий для точек продаж (asynchronously)
     * Удаляет информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param ids Список идентификаторов лицензий. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOutletLicensesAsync(Long campaignId, Set<Long> ids, final ApiCallback<EmptyApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOutletLicensesValidateBeforeCall(campaignId, ids, _callback);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOutletLicenses
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param outletIds Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке.  (optional)
     * @param ids Список идентификаторов лицензий. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найденные лицензии собственных точек продаж. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutletLicensesCall(Long campaignId, Set<Long> outletIds, Set<Long> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/outlets/licenses"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (outletIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "outletIds", outletIds));
        }

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutletLicensesValidateBeforeCall(Long campaignId, Set<Long> outletIds, Set<Long> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getOutletLicenses(Async)");
        }

        return getOutletLicensesCall(campaignId, outletIds, ids, _callback);

    }

    /**
     * Информация о лицензиях для точек продаж
     * Возвращает информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param outletIds Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке.  (optional)
     * @param ids Список идентификаторов лицензий. (optional)
     * @return GetOutletLicensesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найденные лицензии собственных точек продаж. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetOutletLicensesResponse getOutletLicenses(Long campaignId, Set<Long> outletIds, Set<Long> ids) throws ApiException {
        ApiResponse<GetOutletLicensesResponse> localVarResp = getOutletLicensesWithHttpInfo(campaignId, outletIds, ids);
        return localVarResp.getData();
    }

    /**
     * Информация о лицензиях для точек продаж
     * Возвращает информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param outletIds Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке.  (optional)
     * @param ids Список идентификаторов лицензий. (optional)
     * @return ApiResponse&lt;GetOutletLicensesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найденные лицензии собственных точек продаж. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOutletLicensesResponse> getOutletLicensesWithHttpInfo(Long campaignId, Set<Long> outletIds, Set<Long> ids) throws ApiException {
        okhttp3.Call localVarCall = getOutletLicensesValidateBeforeCall(campaignId, outletIds, ids, null);
        Type localVarReturnType = new TypeToken<GetOutletLicensesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о лицензиях для точек продаж (asynchronously)
     * Возвращает информацию о лицензиях для точек продаж.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param outletIds Список идентификаторов точек продаж, для которых нужно получить информацию о лицензиях. Идентификаторы указываются через запятую.  В запросе должен быть либо параметр &#x60;outletIds&#x60;, либо параметр &#x60;ids&#x60;. Запрос с обоими параметрами или без них приведет к ошибке.  (optional)
     * @param ids Список идентификаторов лицензий. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Найденные лицензии собственных точек продаж. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOutletLicensesAsync(Long campaignId, Set<Long> outletIds, Set<Long> ids, final ApiCallback<GetOutletLicensesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutletLicensesValidateBeforeCall(campaignId, outletIds, ids, _callback);
        Type localVarReturnType = new TypeToken<GetOutletLicensesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOutletLicenses
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateOutletLicenseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOutletLicensesCall(Long campaignId, UpdateOutletLicenseRequest updateOutletLicenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOutletLicenseRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/outlets/licenses"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOutletLicensesValidateBeforeCall(Long campaignId, UpdateOutletLicenseRequest updateOutletLicenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateOutletLicenses(Async)");
        }

        // verify the required parameter 'updateOutletLicenseRequest' is set
        if (updateOutletLicenseRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOutletLicenseRequest' when calling updateOutletLicenses(Async)");
        }

        return updateOutletLicensesCall(campaignId, updateOutletLicenseRequest, _callback);

    }

    /**
     * Создание и изменение лицензий для точек продаж
     * Передает информацию о новых и существующих лицензиях для точек продаж. Поддерживаются только лицензии на розничную продажу алкоголя.  Чтобы размещать алкогольную продукцию на Маркете, надо также прислать гарантийное письмо (если вы еще не делали этого раньше) и правильно оформить предложения в прайс-листе. Далее информация о лицензиях проходит проверку.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateOutletLicenseRequest  (required)
     * @return EmptyApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public EmptyApiResponse updateOutletLicenses(Long campaignId, UpdateOutletLicenseRequest updateOutletLicenseRequest) throws ApiException {
        ApiResponse<EmptyApiResponse> localVarResp = updateOutletLicensesWithHttpInfo(campaignId, updateOutletLicenseRequest);
        return localVarResp.getData();
    }

    /**
     * Создание и изменение лицензий для точек продаж
     * Передает информацию о новых и существующих лицензиях для точек продаж. Поддерживаются только лицензии на розничную продажу алкоголя.  Чтобы размещать алкогольную продукцию на Маркете, надо также прислать гарантийное письмо (если вы еще не делали этого раньше) и правильно оформить предложения в прайс-листе. Далее информация о лицензиях проходит проверку.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateOutletLicenseRequest  (required)
     * @return ApiResponse&lt;EmptyApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyApiResponse> updateOutletLicensesWithHttpInfo(Long campaignId, UpdateOutletLicenseRequest updateOutletLicenseRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOutletLicensesValidateBeforeCall(campaignId, updateOutletLicenseRequest, null);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создание и изменение лицензий для точек продаж (asynchronously)
     * Передает информацию о новых и существующих лицензиях для точек продаж. Поддерживаются только лицензии на розничную продажу алкоголя.  Чтобы размещать алкогольную продукцию на Маркете, надо также прислать гарантийное письмо (если вы еще не делали этого раньше) и правильно оформить предложения в прайс-листе. Далее информация о лицензиях проходит проверку.  В течение суток этим и другими запросами о точках продаж, кроме запроса [GET delivery/services](../../reference/orders/getDeliveryServices.md), можно получить и изменить информацию об определенном суммарном количестве точек продаж. Оно зависит от количества точек продаж магазина.  |**⚙️ Лимит:** 100 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateOutletLicenseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOutletLicensesAsync(Long campaignId, UpdateOutletLicenseRequest updateOutletLicenseRequest, final ApiCallback<EmptyApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOutletLicensesValidateBeforeCall(campaignId, updateOutletLicenseRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
