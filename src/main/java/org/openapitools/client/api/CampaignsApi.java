/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.GetCampaignLoginsResponse;
import org.openapitools.client.model.GetCampaignRegionResponse;
import org.openapitools.client.model.GetCampaignResponse;
import org.openapitools.client.model.GetCampaignSettingsResponse;
import org.openapitools.client.model.GetCampaignsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CampaignsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CampaignsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CampaignsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCampaign
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазине. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignValidateBeforeCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaign(Async)");
        }

        return getCampaignCall(campaignId, _callback);

    }

    /**
     * Информация о магазине
     * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return GetCampaignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазине. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignResponse getCampaign(Long campaignId) throws ApiException {
        ApiResponse<GetCampaignResponse> localVarResp = getCampaignWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Информация о магазине
     * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return ApiResponse&lt;GetCampaignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазине. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCampaignResponse> getCampaignWithHttpInfo(Long campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<GetCampaignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о магазине (asynchronously)
     * Возвращает информацию о магазине. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазине. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignAsync(Long campaignId, final ApiCallback<GetCampaignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<GetCampaignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignLogins
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список логинов, связанных с магазином. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignLoginsCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/logins"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignLoginsValidateBeforeCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignLogins(Async)");
        }

        return getCampaignLoginsCall(campaignId, _callback);

    }

    /**
     * Логины, связанные с магазином
     * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return GetCampaignLoginsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список логинов, связанных с магазином. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignLoginsResponse getCampaignLogins(Long campaignId) throws ApiException {
        ApiResponse<GetCampaignLoginsResponse> localVarResp = getCampaignLoginsWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Логины, связанные с магазином
     * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return ApiResponse&lt;GetCampaignLoginsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список логинов, связанных с магазином. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCampaignLoginsResponse> getCampaignLoginsWithHttpInfo(Long campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignLoginsValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<GetCampaignLoginsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Логины, связанные с магазином (asynchronously)
     * Возвращает список логинов, у которых есть доступ к магазину. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список логинов, связанных с магазином. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignLoginsAsync(Long campaignId, final ApiCallback<GetCampaignLoginsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignLoginsValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<GetCampaignLoginsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignRegion
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-|  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getCampaignRegionCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/region"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignRegionValidateBeforeCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignRegion(Async)");
        }

        return getCampaignRegionCall(campaignId, _callback);

    }

    /**
     * Регион магазина
     * {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return GetCampaignRegionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-|  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetCampaignRegionResponse getCampaignRegion(Long campaignId) throws ApiException {
        ApiResponse<GetCampaignRegionResponse> localVarResp = getCampaignRegionWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Регион магазина
     * {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return ApiResponse&lt;GetCampaignRegionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-|  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetCampaignRegionResponse> getCampaignRegionWithHttpInfo(Long campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignRegionValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<GetCampaignRegionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Регион магазина (asynchronously)
     * {% note warning \&quot;\&quot; %}  Этот метод устарел. Вместо него используйте [GET campaigns/{campaignId}/settings](../../reference/campaigns/getCampaignSettings.md).  {% endnote %}  Возвращает регион, в котором находится магазин. |**⚙️ Лимит:** 5 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Возвращает регион, в котором находится магазин.  |**⚙️ Лимит:** 1000 запросов в час| |-|  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getCampaignRegionAsync(Long campaignId, final ApiCallback<GetCampaignRegionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignRegionValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<GetCampaignRegionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignSettings
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки магазина. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignSettingsCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/settings"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignSettingsValidateBeforeCall(Long campaignId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getCampaignSettings(Async)");
        }

        return getCampaignSettingsCall(campaignId, _callback);

    }

    /**
     * Настройки магазина
     * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return GetCampaignSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки магазина. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignSettingsResponse getCampaignSettings(Long campaignId) throws ApiException {
        ApiResponse<GetCampaignSettingsResponse> localVarResp = getCampaignSettingsWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * Настройки магазина
     * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return ApiResponse&lt;GetCampaignSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки магазина. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCampaignSettingsResponse> getCampaignSettingsWithHttpInfo(Long campaignId) throws ApiException {
        okhttp3.Call localVarCall = getCampaignSettingsValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<GetCampaignSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Настройки магазина (asynchronously)
     * Возвращает информацию о настройках магазина, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки магазина. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignSettingsAsync(Long campaignId, final ApiCallback<GetCampaignSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignSettingsValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<GetCampaignSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaigns
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Магазины пользователя. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignsValidateBeforeCall(Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getCampaignsCall(page, pageSize, _callback);

    }

    /**
     * Список магазинов пользователя
     * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @return GetCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Магазины пользователя. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignsResponse getCampaigns(Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GetCampaignsResponse> localVarResp = getCampaignsWithHttpInfo(page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Список магазинов пользователя
     * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @return ApiResponse&lt;GetCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Магазины пользователя. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCampaignsResponse> getCampaignsWithHttpInfo(Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCampaignsValidateBeforeCall(page, pageSize, null);
        Type localVarReturnType = new TypeToken<GetCampaignsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список магазинов пользователя (asynchronously)
     * Возвращает список магазинов, к которым имеет доступ пользователь — владелец авторизационного токена, использованного в запросе. Для агентских пользователей список состоит из подагентских магазинов. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Магазины пользователя. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsAsync(Integer page, Integer pageSize, final ApiCallback<GetCampaignsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignsValidateBeforeCall(page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetCampaignsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCampaignsByLogin
     * @param login Логин пользователя. (required)
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазинах. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsByLoginCall(String login, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/by_login/{login}"
            .replace("{" + "login" + "}", localVarApiClient.escapeString(login.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCampaignsByLoginValidateBeforeCall(String login, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'login' is set
        if (login == null) {
            throw new ApiException("Missing the required parameter 'login' when calling getCampaignsByLogin(Async)");
        }

        return getCampaignsByLoginCall(login, page, pageSize, _callback);

    }

    /**
     * Магазины, доступные логину
     * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param login Логин пользователя. (required)
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @return GetCampaignsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазинах. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetCampaignsResponse getCampaignsByLogin(String login, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<GetCampaignsResponse> localVarResp = getCampaignsByLoginWithHttpInfo(login, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * Магазины, доступные логину
     * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param login Логин пользователя. (required)
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @return ApiResponse&lt;GetCampaignsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазинах. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetCampaignsResponse> getCampaignsByLoginWithHttpInfo(String login, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getCampaignsByLoginValidateBeforeCall(login, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GetCampaignsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Магазины, доступные логину (asynchronously)
     * Возвращает список магазинов, к которым у пользователя с указанным логином есть доступ. |**⚙️ Лимит:** 100 запросов в час| |-| 
     * @param login Логин пользователя. (required)
     * @param page Номер страницы результатов.  Значение по умолчанию: 1.  Используется вместе с параметром &#x60;page_size&#x60;.  &#x60;page_number&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional, default to 1)
     * @param pageSize Размер страницы.  Используется вместе с параметром &#x60;page_number&#x60;.  &#x60;page_size&#x60; игнорируется, если задан &#x60;page_token&#x60;, &#x60;limit&#x60; или &#x60;offset&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о магазинах. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCampaignsByLoginAsync(String login, Integer page, Integer pageSize, final ApiCallback<GetCampaignsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCampaignsByLoginValidateBeforeCall(login, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetCampaignsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
