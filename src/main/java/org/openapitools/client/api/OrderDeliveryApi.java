/*
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.EmptyApiResponse;
import org.openapitools.client.model.GetOrderBuyerInfoResponse;
import org.openapitools.client.model.SetOrderDeliveryDateRequest;
import org.openapitools.client.model.SetOrderDeliveryTrackCodeRequest;
import org.openapitools.client.model.UpdateOrderStorageLimitRequest;
import org.openapitools.client.model.VerifyOrderEacRequest;
import org.openapitools.client.model.VerifyOrderEacResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderDeliveryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrderDeliveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderDeliveryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOrderBuyerInfo
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о покупателе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderBuyerInfoCall(Long campaignId, Long orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/orders/{orderId}/buyer"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderBuyerInfoValidateBeforeCall(Long campaignId, Long orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling getOrderBuyerInfo(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrderBuyerInfo(Async)");
        }

        return getOrderBuyerInfoCall(campaignId, orderId, _callback);

    }

    /**
     * Информация о покупателе — физическом лице
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @return GetOrderBuyerInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о покупателе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public GetOrderBuyerInfoResponse getOrderBuyerInfo(Long campaignId, Long orderId) throws ApiException {
        ApiResponse<GetOrderBuyerInfoResponse> localVarResp = getOrderBuyerInfoWithHttpInfo(campaignId, orderId);
        return localVarResp.getData();
    }

    /**
     * Информация о покупателе — физическом лице
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @return ApiResponse&lt;GetOrderBuyerInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о покупателе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrderBuyerInfoResponse> getOrderBuyerInfoWithHttpInfo(Long campaignId, Long orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderBuyerInfoValidateBeforeCall(campaignId, orderId, null);
        Type localVarReturnType = new TypeToken<GetOrderBuyerInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о покупателе — физическом лице (asynchronously)
     * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Информация о покупателе. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderBuyerInfoAsync(Long campaignId, Long orderId, final ApiCallback<GetOrderBuyerInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderBuyerInfoValidateBeforeCall(campaignId, orderId, _callback);
        Type localVarReturnType = new TypeToken<GetOrderBuyerInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setOrderDeliveryDate
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryDateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное изменение даты доставки. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrderDeliveryDateCall(Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setOrderDeliveryDateRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/orders/{orderId}/delivery/date"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOrderDeliveryDateValidateBeforeCall(Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling setOrderDeliveryDate(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling setOrderDeliveryDate(Async)");
        }

        // verify the required parameter 'setOrderDeliveryDateRequest' is set
        if (setOrderDeliveryDateRequest == null) {
            throw new ApiException("Missing the required parameter 'setOrderDeliveryDateRequest' when calling setOrderDeliveryDate(Async)");
        }

        return setOrderDeliveryDateCall(campaignId, orderId, setOrderDeliveryDateRequest, _callback);

    }

    /**
     * Изменение даты доставки заказа
     * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryDateRequest  (required)
     * @return EmptyApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное изменение даты доставки. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public EmptyApiResponse setOrderDeliveryDate(Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest) throws ApiException {
        ApiResponse<EmptyApiResponse> localVarResp = setOrderDeliveryDateWithHttpInfo(campaignId, orderId, setOrderDeliveryDateRequest);
        return localVarResp.getData();
    }

    /**
     * Изменение даты доставки заказа
     * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryDateRequest  (required)
     * @return ApiResponse&lt;EmptyApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное изменение даты доставки. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyApiResponse> setOrderDeliveryDateWithHttpInfo(Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest) throws ApiException {
        okhttp3.Call localVarCall = setOrderDeliveryDateValidateBeforeCall(campaignId, orderId, setOrderDeliveryDateRequest, null);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение даты доставки заказа (asynchronously)
     * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryDateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Успешное изменение даты доставки. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrderDeliveryDateAsync(Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest, final ApiCallback<EmptyApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOrderDeliveryDateValidateBeforeCall(campaignId, orderId, setOrderDeliveryDateRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setOrderDeliveryTrackCode
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryTrackCodeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Трек‑номер посылки и идентификатор службы доставки были успешно переданы. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrderDeliveryTrackCodeCall(Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setOrderDeliveryTrackCodeRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/orders/{orderId}/delivery/track"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOrderDeliveryTrackCodeValidateBeforeCall(Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling setOrderDeliveryTrackCode(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling setOrderDeliveryTrackCode(Async)");
        }

        // verify the required parameter 'setOrderDeliveryTrackCodeRequest' is set
        if (setOrderDeliveryTrackCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'setOrderDeliveryTrackCodeRequest' when calling setOrderDeliveryTrackCode(Async)");
        }

        return setOrderDeliveryTrackCodeCall(campaignId, orderId, setOrderDeliveryTrackCodeRequest, _callback);

    }

    /**
     * Передача трек‑номера посылки
     * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryTrackCodeRequest  (required)
     * @return EmptyApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Трек‑номер посылки и идентификатор службы доставки были успешно переданы. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public EmptyApiResponse setOrderDeliveryTrackCode(Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest) throws ApiException {
        ApiResponse<EmptyApiResponse> localVarResp = setOrderDeliveryTrackCodeWithHttpInfo(campaignId, orderId, setOrderDeliveryTrackCodeRequest);
        return localVarResp.getData();
    }

    /**
     * Передача трек‑номера посылки
     * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryTrackCodeRequest  (required)
     * @return ApiResponse&lt;EmptyApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Трек‑номер посылки и идентификатор службы доставки были успешно переданы. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyApiResponse> setOrderDeliveryTrackCodeWithHttpInfo(Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest) throws ApiException {
        okhttp3.Call localVarCall = setOrderDeliveryTrackCodeValidateBeforeCall(campaignId, orderId, setOrderDeliveryTrackCodeRequest, null);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Передача трек‑номера посылки (asynchronously)
     * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param setOrderDeliveryTrackCodeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Трек‑номер посылки и идентификатор службы доставки были успешно переданы. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setOrderDeliveryTrackCodeAsync(Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest, final ApiCallback<EmptyApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOrderDeliveryTrackCodeValidateBeforeCall(campaignId, orderId, setOrderDeliveryTrackCodeRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrderStorageLimit
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param updateOrderStorageLimitRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderStorageLimitCall(Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrderStorageLimitRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderStorageLimitValidateBeforeCall(Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling updateOrderStorageLimit(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrderStorageLimit(Async)");
        }

        // verify the required parameter 'updateOrderStorageLimitRequest' is set
        if (updateOrderStorageLimitRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrderStorageLimitRequest' when calling updateOrderStorageLimit(Async)");
        }

        return updateOrderStorageLimitCall(campaignId, orderId, updateOrderStorageLimitRequest, _callback);

    }

    /**
     * Продление срока хранения заказа
     * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param updateOrderStorageLimitRequest  (required)
     * @return EmptyApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public EmptyApiResponse updateOrderStorageLimit(Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest) throws ApiException {
        ApiResponse<EmptyApiResponse> localVarResp = updateOrderStorageLimitWithHttpInfo(campaignId, orderId, updateOrderStorageLimitRequest);
        return localVarResp.getData();
    }

    /**
     * Продление срока хранения заказа
     * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param updateOrderStorageLimitRequest  (required)
     * @return ApiResponse&lt;EmptyApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmptyApiResponse> updateOrderStorageLimitWithHttpInfo(Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrderStorageLimitValidateBeforeCall(campaignId, orderId, updateOrderStorageLimitRequest, null);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Продление срока хранения заказа (asynchronously)
     * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param updateOrderStorageLimitRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Пустой ответ. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderStorageLimitAsync(Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest, final ApiCallback<EmptyApiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderStorageLimitValidateBeforeCall(campaignId, orderId, updateOrderStorageLimitRequest, _callback);
        Type localVarReturnType = new TypeToken<EmptyApiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyOrderEac
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param verifyOrderEacRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Проверка кода выполнена успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyOrderEacCall(Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyOrderEacRequest;

        // create path and map variables
        String localVarPath = "/campaigns/{campaignId}/orders/{orderId}/verifyEac"
            .replace("{" + "campaignId" + "}", localVarApiClient.escapeString(campaignId.toString()))
            .replace("{" + "orderId" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyOrderEacValidateBeforeCall(Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'campaignId' is set
        if (campaignId == null) {
            throw new ApiException("Missing the required parameter 'campaignId' when calling verifyOrderEac(Async)");
        }

        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling verifyOrderEac(Async)");
        }

        // verify the required parameter 'verifyOrderEacRequest' is set
        if (verifyOrderEacRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyOrderEacRequest' when calling verifyOrderEac(Async)");
        }

        return verifyOrderEacCall(campaignId, orderId, verifyOrderEacRequest, _callback);

    }

    /**
     * Передача кода подтверждения
     * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param verifyOrderEacRequest  (required)
     * @return VerifyOrderEacResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Проверка кода выполнена успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyOrderEacResponse verifyOrderEac(Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest) throws ApiException {
        ApiResponse<VerifyOrderEacResponse> localVarResp = verifyOrderEacWithHttpInfo(campaignId, orderId, verifyOrderEacRequest);
        return localVarResp.getData();
    }

    /**
     * Передача кода подтверждения
     * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param verifyOrderEacRequest  (required)
     * @return ApiResponse&lt;VerifyOrderEacResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Проверка кода выполнена успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyOrderEacResponse> verifyOrderEacWithHttpInfo(Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyOrderEacValidateBeforeCall(campaignId, orderId, verifyOrderEacRequest, null);
        Type localVarReturnType = new TypeToken<VerifyOrderEacResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Передача кода подтверждения (asynchronously)
     * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
     * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param orderId Идентификатор заказа. (required)
     * @param verifyOrderEacRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Проверка кода выполнена успешно. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Запрос содержит неправильные данные. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> В запросе не указаны данные для авторизации. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Данные для авторизации неверны или доступ к ресурсу запрещен. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запрашиваемый ресурс не найден. </td><td>  -  </td></tr>
        <tr><td> 420 </td><td> Превышено ограничение на доступ к ресурсу. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Внутренняя ошибка сервера. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyOrderEacAsync(Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest, final ApiCallback<VerifyOrderEacResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyOrderEacValidateBeforeCall(campaignId, orderId, verifyOrderEacRequest, _callback);
        Type localVarReturnType = new TypeToken<VerifyOrderEacResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
