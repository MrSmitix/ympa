/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.EmptyApiResponse;
import org.openapitools.client.model.GetOrderBuyerInfoResponse;
import org.openapitools.client.model.SetOrderDeliveryDateRequest;
import org.openapitools.client.model.SetOrderDeliveryTrackCodeRequest;
import org.openapitools.client.model.UpdateOrderStorageLimitRequest;
import org.openapitools.client.model.VerifyOrderEacRequest;
import org.openapitools.client.model.VerifyOrderEacResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrderDeliveryApi {
  String basePath = "https://api.partner.market.yandex.ru";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Информация о покупателе — физическом лице
  * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @return GetOrderBuyerInfoResponse
  */
  public GetOrderBuyerInfoResponse getOrderBuyerInfo (Long campaignId, Long orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getOrderBuyerInfo",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getOrderBuyerInfo"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getOrderBuyerInfo",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getOrderBuyerInfo"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/buyer".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetOrderBuyerInfoResponse) ApiInvoker.deserialize(localVarResponse, "", GetOrderBuyerInfoResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Информация о покупателе — физическом лице
   * Возвращает информацию о покупателе по идентификатору заказа.  {% note info \&quot;\&quot; %}  Чтобы получить информацию о покупателе, который является юридическим лицом, воспользуйтесь запросом [POST campaigns/{campaignId}/orders/{orderId}/business-buyer](../../reference/order-business-information/getOrderBusinessBuyerInfo.md).  {% endnote %}  Получить данные можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  Если у вас настроена работа с push-компонентом, Маркет отправит уведомление о смене статуса заказа с помощью запроса [POST order/status](../../pushapi/reference/postOrderStatus.md).  |**⚙️ Лимит:** 3 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.
  */
  public void getOrderBuyerInfo (Long campaignId, Long orderId, final Response.Listener<GetOrderBuyerInfoResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getOrderBuyerInfo",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getOrderBuyerInfo"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getOrderBuyerInfo",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getOrderBuyerInfo"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/buyer".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetOrderBuyerInfoResponse) ApiInvoker.deserialize(localVarResponse,  "", GetOrderBuyerInfoResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Изменение даты доставки заказа
  * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param setOrderDeliveryDateRequest 
   * @return EmptyApiResponse
  */
  public EmptyApiResponse setOrderDeliveryDate (Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setOrderDeliveryDateRequest;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling setOrderDeliveryDate",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling setOrderDeliveryDate"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling setOrderDeliveryDate",
        new ApiException(400, "Missing the required parameter 'orderId' when calling setOrderDeliveryDate"));
    }
    // verify the required parameter 'setOrderDeliveryDateRequest' is set
    if (setOrderDeliveryDateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setOrderDeliveryDateRequest' when calling setOrderDeliveryDate",
        new ApiException(400, "Missing the required parameter 'setOrderDeliveryDateRequest' when calling setOrderDeliveryDate"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/delivery/date".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EmptyApiResponse) ApiInvoker.deserialize(localVarResponse, "", EmptyApiResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Изменение даты доставки заказа
   * Метод изменяет дату доставки заказа в статусе &#x60;PROCESSING&#x60; или &#x60;DELIVERY&#x60;. Для заказов с другими статусами дату доставки изменить нельзя.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param setOrderDeliveryDateRequest 
  */
  public void setOrderDeliveryDate (Long campaignId, Long orderId, SetOrderDeliveryDateRequest setOrderDeliveryDateRequest, final Response.Listener<EmptyApiResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setOrderDeliveryDateRequest;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling setOrderDeliveryDate",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling setOrderDeliveryDate"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling setOrderDeliveryDate",
        new ApiException(400, "Missing the required parameter 'orderId' when calling setOrderDeliveryDate"));
    }
    // verify the required parameter 'setOrderDeliveryDateRequest' is set
    if (setOrderDeliveryDateRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setOrderDeliveryDateRequest' when calling setOrderDeliveryDate",
        new ApiException(400, "Missing the required parameter 'setOrderDeliveryDateRequest' when calling setOrderDeliveryDate"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/delivery/date".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EmptyApiResponse) ApiInvoker.deserialize(localVarResponse,  "", EmptyApiResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Передача трек‑номера посылки
  * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param setOrderDeliveryTrackCodeRequest 
   * @return EmptyApiResponse
  */
  public EmptyApiResponse setOrderDeliveryTrackCode (Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setOrderDeliveryTrackCodeRequest;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling setOrderDeliveryTrackCode",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling setOrderDeliveryTrackCode"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling setOrderDeliveryTrackCode",
        new ApiException(400, "Missing the required parameter 'orderId' when calling setOrderDeliveryTrackCode"));
    }
    // verify the required parameter 'setOrderDeliveryTrackCodeRequest' is set
    if (setOrderDeliveryTrackCodeRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setOrderDeliveryTrackCodeRequest' when calling setOrderDeliveryTrackCode",
        new ApiException(400, "Missing the required parameter 'setOrderDeliveryTrackCodeRequest' when calling setOrderDeliveryTrackCode"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/delivery/track".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EmptyApiResponse) ApiInvoker.deserialize(localVarResponse, "", EmptyApiResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Передача трек‑номера посылки
   * {% note warning \&quot;Этот запрос только для DBS\&quot; %}  Вы можете использовать запрос, чтобы повысить лояльность покупателей. Если они могут узнать, на каком этапе доставки находятся их заказы, доверие покупателей к вашему магазину может возрасти.  {% endnote %}  Передает Маркету трек‑номер, по которому покупатель может отследить посылку со своим заказом через службу доставки.  Передать трек‑номер можно, только если заказ находится в статусе &#x60;PROCESSING&#x60;, &#x60;DELIVERY&#x60; или &#x60;PICKUP&#x60;.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param setOrderDeliveryTrackCodeRequest 
  */
  public void setOrderDeliveryTrackCode (Long campaignId, Long orderId, SetOrderDeliveryTrackCodeRequest setOrderDeliveryTrackCodeRequest, final Response.Listener<EmptyApiResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setOrderDeliveryTrackCodeRequest;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling setOrderDeliveryTrackCode",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling setOrderDeliveryTrackCode"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling setOrderDeliveryTrackCode",
        new ApiException(400, "Missing the required parameter 'orderId' when calling setOrderDeliveryTrackCode"));
    }
    // verify the required parameter 'setOrderDeliveryTrackCodeRequest' is set
    if (setOrderDeliveryTrackCodeRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setOrderDeliveryTrackCodeRequest' when calling setOrderDeliveryTrackCode",
        new ApiException(400, "Missing the required parameter 'setOrderDeliveryTrackCodeRequest' when calling setOrderDeliveryTrackCode"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/delivery/track".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EmptyApiResponse) ApiInvoker.deserialize(localVarResponse,  "", EmptyApiResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Продление срока хранения заказа
  * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param updateOrderStorageLimitRequest 
   * @return EmptyApiResponse
  */
  public EmptyApiResponse updateOrderStorageLimit (Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = updateOrderStorageLimitRequest;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling updateOrderStorageLimit",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling updateOrderStorageLimit"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling updateOrderStorageLimit",
        new ApiException(400, "Missing the required parameter 'orderId' when calling updateOrderStorageLimit"));
    }
    // verify the required parameter 'updateOrderStorageLimitRequest' is set
    if (updateOrderStorageLimitRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateOrderStorageLimitRequest' when calling updateOrderStorageLimit",
        new ApiException(400, "Missing the required parameter 'updateOrderStorageLimitRequest' when calling updateOrderStorageLimit"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EmptyApiResponse) ApiInvoker.deserialize(localVarResponse, "", EmptyApiResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Продление срока хранения заказа
   * Продлевает срок хранения заказа в пункте выдачи продавца.  Заказ должен быть в статусе &#x60;PICKUP&#x60;. Продлить срок можно только один раз, не больше чем на 30 дней.  Новый срок хранения можно получить в параметре &#x60;outletStorageLimitDate&#x60; запроса [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param updateOrderStorageLimitRequest 
  */
  public void updateOrderStorageLimit (Long campaignId, Long orderId, UpdateOrderStorageLimitRequest updateOrderStorageLimitRequest, final Response.Listener<EmptyApiResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = updateOrderStorageLimitRequest;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling updateOrderStorageLimit",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling updateOrderStorageLimit"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling updateOrderStorageLimit",
        new ApiException(400, "Missing the required parameter 'orderId' when calling updateOrderStorageLimit"));
    }
    // verify the required parameter 'updateOrderStorageLimitRequest' is set
    if (updateOrderStorageLimitRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'updateOrderStorageLimitRequest' when calling updateOrderStorageLimit",
        new ApiException(400, "Missing the required parameter 'updateOrderStorageLimitRequest' when calling updateOrderStorageLimit"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/delivery/storage-limit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EmptyApiResponse) ApiInvoker.deserialize(localVarResponse,  "", EmptyApiResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Передача кода подтверждения
  * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param verifyOrderEacRequest 
   * @return VerifyOrderEacResponse
  */
  public VerifyOrderEacResponse verifyOrderEac (Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = verifyOrderEacRequest;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling verifyOrderEac",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling verifyOrderEac"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling verifyOrderEac",
        new ApiException(400, "Missing the required parameter 'orderId' when calling verifyOrderEac"));
    }
    // verify the required parameter 'verifyOrderEacRequest' is set
    if (verifyOrderEacRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'verifyOrderEacRequest' when calling verifyOrderEac",
        new ApiException(400, "Missing the required parameter 'verifyOrderEacRequest' when calling verifyOrderEac"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/verifyEac".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (VerifyOrderEacResponse) ApiInvoker.deserialize(localVarResponse, "", VerifyOrderEacResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Передача кода подтверждения
   * Отправляет Маркету код подтверждения для его проверки.  Код подтверждает передачу заказа или невыкупа:  * курьеру — курьер должен назвать магазину код; * магазину — магазин называет код курьеру.  Если магазин получает невыкупленный заказ, то ему нужно назвать курьеру код из кабинета или приложения.  Если у магазина настроена работа с кодами подтверждения, в запросах [POST order/status](../../pushapi/reference/postOrderStatus.md), [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md), [GET campaigns/{campaignId}/orders](../../reference/orders/getOrders.md), [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) в параметре &#x60;delivery&#x60;, вложенном в &#x60;order&#x60; будет возвращаться параметр &#x60;eacType&#x60; с типом &#x60;Enum&#x60; — тип кода подтверждения для передачи заказа.  Возможные значения: &#x60;MERCHANT_TO_COURIER&#x60; — магазин называет код курьеру, &#x60;COURIER_TO_MERCHANT&#x60; — курьер называет код магазину.  Параметр &#x60;eacType&#x60; возвращается при статусах заказа &#x60;COURIER_FOUND&#x60;, &#x60;COURIER_ARRIVED_TO_SENDER&#x60; и &#x60;DELIVERY_SERVICE_UNDELIVERED&#x60;. Если заказ в других статусах, параметр может отсутствовать.  |**⚙️ Лимит:** 1 000 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param verifyOrderEacRequest 
  */
  public void verifyOrderEac (Long campaignId, Long orderId, VerifyOrderEacRequest verifyOrderEacRequest, final Response.Listener<VerifyOrderEacResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = verifyOrderEacRequest;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling verifyOrderEac",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling verifyOrderEac"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling verifyOrderEac",
        new ApiException(400, "Missing the required parameter 'orderId' when calling verifyOrderEac"));
    }
    // verify the required parameter 'verifyOrderEacRequest' is set
    if (verifyOrderEacRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'verifyOrderEacRequest' when calling verifyOrderEac",
        new ApiException(400, "Missing the required parameter 'verifyOrderEacRequest' when calling verifyOrderEac"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/verifyEac".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VerifyOrderEacResponse) ApiInvoker.deserialize(localVarResponse,  "", VerifyOrderEacResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
