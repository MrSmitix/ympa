/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.GenerateBoostConsolidatedRequest;
import org.openapitools.client.model.GenerateCompetitorsPositionReportRequest;
import org.openapitools.client.model.GenerateGoodsFeedbackRequest;
import org.openapitools.client.model.GenerateGoodsMovementReportRequest;
import org.openapitools.client.model.GenerateGoodsRealizationReportRequest;
import org.openapitools.client.model.GenerateGoodsTurnoverRequest;
import org.openapitools.client.model.GenerateMassOrderLabelsRequest;
import org.openapitools.client.model.GeneratePricesReportRequest;
import org.openapitools.client.model.GenerateReportResponse;
import org.openapitools.client.model.GenerateShelfsStatisticsRequest;
import org.openapitools.client.model.GenerateShipmentListDocumentReportRequest;
import org.openapitools.client.model.GenerateShowsSalesReportRequest;
import org.openapitools.client.model.GenerateStocksOnWarehousesReportRequest;
import org.openapitools.client.model.GenerateUnitedMarketplaceServicesReportRequest;
import org.openapitools.client.model.GenerateUnitedNettingReportRequest;
import org.openapitools.client.model.GenerateUnitedOrdersRequest;
import org.openapitools.client.model.GetReportInfoResponse;
import org.openapitools.client.model.PageFormatType;
import org.openapitools.client.model.ReportFormatType;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ReportsApi {
  String basePath = "https://api.partner.market.yandex.ru";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Отчет по бусту продаж
  * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateBoostConsolidatedRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateBoostConsolidatedReport (GenerateBoostConsolidatedRequest generateBoostConsolidatedRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateBoostConsolidatedRequest;
    // verify the required parameter 'generateBoostConsolidatedRequest' is set
    if (generateBoostConsolidatedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateBoostConsolidatedRequest' when calling generateBoostConsolidatedReport",
        new ApiException(400, "Missing the required parameter 'generateBoostConsolidatedRequest' when calling generateBoostConsolidatedReport"));
    }

    // create path and map variables
    String path = "/reports/boost-consolidated/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по бусту продаж
   * Запускает генерацию **сводного отчета по бусту продаж** за заданный период. Отчет содержит информацию по всем кампаниям, созданным и через API, и в кабинете.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateBoostConsolidatedRequest    * @param format Формат отчета.
  */
  public void generateBoostConsolidatedReport (GenerateBoostConsolidatedRequest generateBoostConsolidatedRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateBoostConsolidatedRequest;

    // verify the required parameter 'generateBoostConsolidatedRequest' is set
    if (generateBoostConsolidatedRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateBoostConsolidatedRequest' when calling generateBoostConsolidatedReport",
        new ApiException(400, "Missing the required parameter 'generateBoostConsolidatedRequest' when calling generateBoostConsolidatedReport"));
    }

    // create path and map variables
    String path = "/reports/boost-consolidated/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет «Конкурентная позиция»
  * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * @param generateCompetitorsPositionReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateCompetitorsPositionReport (GenerateCompetitorsPositionReportRequest generateCompetitorsPositionReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateCompetitorsPositionReportRequest;
    // verify the required parameter 'generateCompetitorsPositionReportRequest' is set
    if (generateCompetitorsPositionReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateCompetitorsPositionReportRequest' when calling generateCompetitorsPositionReport",
        new ApiException(400, "Missing the required parameter 'generateCompetitorsPositionReportRequest' when calling generateCompetitorsPositionReport"));
    }

    // create path and map variables
    String path = "/reports/competitors-position/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет «Конкурентная позиция»
   * Запускает генерацию **отчета «Конкурентная позиция»** за заданный период. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/analytics/competitors.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  {% note info \&quot;Значение -1 в отчете\&quot; %}  Если в CSV-файле в столбце **POSITION** стоит -1, в этот день не было заказов с товарами в указанной категории.  {% endnote %}  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * @param generateCompetitorsPositionReportRequest    * @param format Формат отчета.
  */
  public void generateCompetitorsPositionReport (GenerateCompetitorsPositionReportRequest generateCompetitorsPositionReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateCompetitorsPositionReportRequest;

    // verify the required parameter 'generateCompetitorsPositionReportRequest' is set
    if (generateCompetitorsPositionReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateCompetitorsPositionReportRequest' when calling generateCompetitorsPositionReport",
        new ApiException(400, "Missing the required parameter 'generateCompetitorsPositionReportRequest' when calling generateCompetitorsPositionReport"));
    }

    // create path and map variables
    String path = "/reports/competitors-position/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по отзывам о товарах
  * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsFeedbackRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateGoodsFeedbackReport (GenerateGoodsFeedbackRequest generateGoodsFeedbackRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateGoodsFeedbackRequest;
    // verify the required parameter 'generateGoodsFeedbackRequest' is set
    if (generateGoodsFeedbackRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsFeedbackRequest' when calling generateGoodsFeedbackReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsFeedbackRequest' when calling generateGoodsFeedbackReport"));
    }

    // create path and map variables
    String path = "/reports/goods-feedback/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по отзывам о товарах
   * Запускает генерацию **отчета по отзывам о товарах**. [Что это за отчет](https://yandex.ru/support2/marketplace/ru/marketing/plus-reviews#stat)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsFeedbackRequest    * @param format Формат отчета.
  */
  public void generateGoodsFeedbackReport (GenerateGoodsFeedbackRequest generateGoodsFeedbackRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateGoodsFeedbackRequest;

    // verify the required parameter 'generateGoodsFeedbackRequest' is set
    if (generateGoodsFeedbackRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsFeedbackRequest' when calling generateGoodsFeedbackReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsFeedbackRequest' when calling generateGoodsFeedbackReport"));
    }

    // create path and map variables
    String path = "/reports/goods-feedback/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по движению товаров
  * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsMovementReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateGoodsMovementReport (GenerateGoodsMovementReportRequest generateGoodsMovementReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateGoodsMovementReportRequest;
    // verify the required parameter 'generateGoodsMovementReportRequest' is set
    if (generateGoodsMovementReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsMovementReportRequest' when calling generateGoodsMovementReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsMovementReportRequest' when calling generateGoodsMovementReport"));
    }

    // create path and map variables
    String path = "/reports/goods-movement/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по движению товаров
   * Запускает генерацию **отчета по движению товаров**. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#flow)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsMovementReportRequest    * @param format Формат отчета.
  */
  public void generateGoodsMovementReport (GenerateGoodsMovementReportRequest generateGoodsMovementReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateGoodsMovementReportRequest;

    // verify the required parameter 'generateGoodsMovementReportRequest' is set
    if (generateGoodsMovementReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsMovementReportRequest' when calling generateGoodsMovementReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsMovementReportRequest' when calling generateGoodsMovementReport"));
    }

    // create path and map variables
    String path = "/reports/goods-movement/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по реализации
  * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsRealizationReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateGoodsRealizationReport (GenerateGoodsRealizationReportRequest generateGoodsRealizationReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateGoodsRealizationReportRequest;
    // verify the required parameter 'generateGoodsRealizationReportRequest' is set
    if (generateGoodsRealizationReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsRealizationReportRequest' when calling generateGoodsRealizationReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsRealizationReportRequest' when calling generateGoodsRealizationReport"));
    }

    // create path and map variables
    String path = "/reports/goods-realization/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по реализации
   * Запускает генерацию **отчета по реализации** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports-fby-fbs.html#sales-report)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsRealizationReportRequest    * @param format Формат отчета.
  */
  public void generateGoodsRealizationReport (GenerateGoodsRealizationReportRequest generateGoodsRealizationReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateGoodsRealizationReportRequest;

    // verify the required parameter 'generateGoodsRealizationReportRequest' is set
    if (generateGoodsRealizationReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsRealizationReportRequest' when calling generateGoodsRealizationReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsRealizationReportRequest' when calling generateGoodsRealizationReport"));
    }

    // create path and map variables
    String path = "/reports/goods-realization/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по оборачиваемости
  * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsTurnoverRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateGoodsTurnoverReport (GenerateGoodsTurnoverRequest generateGoodsTurnoverRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateGoodsTurnoverRequest;
    // verify the required parameter 'generateGoodsTurnoverRequest' is set
    if (generateGoodsTurnoverRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsTurnoverRequest' when calling generateGoodsTurnoverReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsTurnoverRequest' when calling generateGoodsTurnoverReport"));
    }

    // create path and map variables
    String path = "/reports/goods-turnover/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по оборачиваемости
   * Запускает генерацию **отчета по оборачиваемости** за заданную дату.  [Что это за отчет](https://yandex.ru/support/marketplace/analytics/turnover.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateGoodsTurnoverRequest    * @param format Формат отчета.
  */
  public void generateGoodsTurnoverReport (GenerateGoodsTurnoverRequest generateGoodsTurnoverRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateGoodsTurnoverRequest;

    // verify the required parameter 'generateGoodsTurnoverRequest' is set
    if (generateGoodsTurnoverRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateGoodsTurnoverRequest' when calling generateGoodsTurnoverReport",
        new ApiException(400, "Missing the required parameter 'generateGoodsTurnoverRequest' when calling generateGoodsTurnoverReport"));
    }

    // create path and map variables
    String path = "/reports/goods-turnover/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
  * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param generateMassOrderLabelsRequest 
   * @param format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateMassOrderLabelsReport (GenerateMassOrderLabelsRequest generateMassOrderLabelsRequest, PageFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateMassOrderLabelsRequest;
    // verify the required parameter 'generateMassOrderLabelsRequest' is set
    if (generateMassOrderLabelsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateMassOrderLabelsRequest' when calling generateMassOrderLabelsReport",
        new ApiException(400, "Missing the required parameter 'generateMassOrderLabelsRequest' when calling generateMassOrderLabelsReport"));
    }

    // create path and map variables
    String path = "/reports/documents/labels/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Готовые ярлыки‑наклейки на все коробки в нескольких заказах
   * Запускает генерацию PDF-файла с ярлыками для переданных заказов. Подробно о том, зачем они нужны и как выглядят, рассказано [в Справке Маркета для продавцов](https://yandex.ru/support/marketplace/orders/fbs/packaging/marking.html).  Узнать статус генерации и получить ссылку на готовый файл можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 1000 запросов в час| |-| 
   * @param generateMassOrderLabelsRequest    * @param format Настройка размещения ярлыков на странице. Если параметра нет, возвращается PDF с ярлыками формата A7.
  */
  public void generateMassOrderLabelsReport (GenerateMassOrderLabelsRequest generateMassOrderLabelsRequest, PageFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateMassOrderLabelsRequest;

    // verify the required parameter 'generateMassOrderLabelsRequest' is set
    if (generateMassOrderLabelsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateMassOrderLabelsRequest' when calling generateMassOrderLabelsReport",
        new ApiException(400, "Missing the required parameter 'generateMassOrderLabelsRequest' when calling generateMassOrderLabelsReport"));
    }

    // create path and map variables
    String path = "/reports/documents/labels/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет «Цены на рынке»
  * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generatePricesReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generatePricesReport (GeneratePricesReportRequest generatePricesReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generatePricesReportRequest;
    // verify the required parameter 'generatePricesReportRequest' is set
    if (generatePricesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generatePricesReportRequest' when calling generatePricesReport",
        new ApiException(400, "Missing the required parameter 'generatePricesReportRequest' when calling generatePricesReport"));
    }

    // create path and map variables
    String path = "/reports/prices/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет «Цены на рынке»
   * Запускает генерацию **отчета «Цены на рынке»**.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generatePricesReportRequest    * @param format Формат отчета.
  */
  public void generatePricesReport (GeneratePricesReportRequest generatePricesReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generatePricesReportRequest;

    // verify the required parameter 'generatePricesReportRequest' is set
    if (generatePricesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generatePricesReportRequest' when calling generatePricesReport",
        new ApiException(400, "Missing the required parameter 'generatePricesReportRequest' when calling generatePricesReport"));
    }

    // create path and map variables
    String path = "/reports/prices/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по полкам
  * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateShelfsStatisticsRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateShelfsStatisticsReport (GenerateShelfsStatisticsRequest generateShelfsStatisticsRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateShelfsStatisticsRequest;
    // verify the required parameter 'generateShelfsStatisticsRequest' is set
    if (generateShelfsStatisticsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShelfsStatisticsRequest' when calling generateShelfsStatisticsReport",
        new ApiException(400, "Missing the required parameter 'generateShelfsStatisticsRequest' when calling generateShelfsStatisticsReport"));
    }

    // create path and map variables
    String path = "/reports/shelf-statistics/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по полкам
   * Запускает генерацию **сводного отчета по полкам** — рекламным блокам с баннером или видео и набором товаров. Подробнее о них читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/marketing/shelf).  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateShelfsStatisticsRequest    * @param format Формат отчета.
  */
  public void generateShelfsStatisticsReport (GenerateShelfsStatisticsRequest generateShelfsStatisticsRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateShelfsStatisticsRequest;

    // verify the required parameter 'generateShelfsStatisticsRequest' is set
    if (generateShelfsStatisticsRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShelfsStatisticsRequest' when calling generateShelfsStatisticsReport",
        new ApiException(400, "Missing the required parameter 'generateShelfsStatisticsRequest' when calling generateShelfsStatisticsReport"));
    }

    // create path and map variables
    String path = "/reports/shelf-statistics/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Получение листа сборки
  * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateShipmentListDocumentReportRequest 
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateShipmentListDocumentReport (GenerateShipmentListDocumentReportRequest generateShipmentListDocumentReportRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateShipmentListDocumentReportRequest;
    // verify the required parameter 'generateShipmentListDocumentReportRequest' is set
    if (generateShipmentListDocumentReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShipmentListDocumentReportRequest' when calling generateShipmentListDocumentReport",
        new ApiException(400, "Missing the required parameter 'generateShipmentListDocumentReportRequest' when calling generateShipmentListDocumentReport"));
    }

    // create path and map variables
    String path = "/reports/documents/shipment-list/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Получение листа сборки
   * Запускает генерацию **листа сборки** для отгрузки.  Узнать статус генерации и получить ссылку на готовый документ можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateShipmentListDocumentReportRequest 
  */
  public void generateShipmentListDocumentReport (GenerateShipmentListDocumentReportRequest generateShipmentListDocumentReportRequest, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateShipmentListDocumentReportRequest;

    // verify the required parameter 'generateShipmentListDocumentReportRequest' is set
    if (generateShipmentListDocumentReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShipmentListDocumentReportRequest' when calling generateShipmentListDocumentReport",
        new ApiException(400, "Missing the required parameter 'generateShipmentListDocumentReportRequest' when calling generateShipmentListDocumentReport"));
    }

    // create path and map variables
    String path = "/reports/documents/shipment-list/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет «Аналитика продаж»
  * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * @param generateShowsSalesReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateShowsSalesReport (GenerateShowsSalesReportRequest generateShowsSalesReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateShowsSalesReportRequest;
    // verify the required parameter 'generateShowsSalesReportRequest' is set
    if (generateShowsSalesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShowsSalesReportRequest' when calling generateShowsSalesReport",
        new ApiException(400, "Missing the required parameter 'generateShowsSalesReportRequest' when calling generateShowsSalesReport"));
    }

    // create path and map variables
    String path = "/reports/shows-sales/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет «Аналитика продаж»
   * Запускает генерацию **отчета «Аналитика продаж»** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/shows-sales.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 10 запросов в час| |-| 
   * @param generateShowsSalesReportRequest    * @param format Формат отчета.
  */
  public void generateShowsSalesReport (GenerateShowsSalesReportRequest generateShowsSalesReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateShowsSalesReportRequest;

    // verify the required parameter 'generateShowsSalesReportRequest' is set
    if (generateShowsSalesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateShowsSalesReportRequest' when calling generateShowsSalesReport",
        new ApiException(400, "Missing the required parameter 'generateShowsSalesReportRequest' when calling generateShowsSalesReport"));
    }

    // create path and map variables
    String path = "/reports/shows-sales/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по остаткам на складах
  * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateStocksOnWarehousesReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateStocksOnWarehousesReport (GenerateStocksOnWarehousesReportRequest generateStocksOnWarehousesReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateStocksOnWarehousesReportRequest;
    // verify the required parameter 'generateStocksOnWarehousesReportRequest' is set
    if (generateStocksOnWarehousesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateStocksOnWarehousesReportRequest' when calling generateStocksOnWarehousesReport",
        new ApiException(400, "Missing the required parameter 'generateStocksOnWarehousesReportRequest' when calling generateStocksOnWarehousesReport"));
    }

    // create path and map variables
    String path = "/reports/stocks-on-warehouses/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по остаткам на складах
   * Запускает генерацию **отчета по остаткам на складах**. Отчет содержит данные:  * Для модели FBY — об остатках на складах Маркета. * Для остальных моделей — об остатках на соответствующем складе магазина.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateStocksOnWarehousesReportRequest    * @param format Формат отчета.
  */
  public void generateStocksOnWarehousesReport (GenerateStocksOnWarehousesReportRequest generateStocksOnWarehousesReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateStocksOnWarehousesReportRequest;

    // verify the required parameter 'generateStocksOnWarehousesReportRequest' is set
    if (generateStocksOnWarehousesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateStocksOnWarehousesReportRequest' when calling generateStocksOnWarehousesReport",
        new ApiException(400, "Missing the required parameter 'generateStocksOnWarehousesReportRequest' when calling generateStocksOnWarehousesReport"));
    }

    // create path and map variables
    String path = "/reports/stocks-on-warehouses/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по стоимости услуг
  * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateUnitedMarketplaceServicesReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateUnitedMarketplaceServicesReport (GenerateUnitedMarketplaceServicesReportRequest generateUnitedMarketplaceServicesReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateUnitedMarketplaceServicesReportRequest;
    // verify the required parameter 'generateUnitedMarketplaceServicesReportRequest' is set
    if (generateUnitedMarketplaceServicesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateUnitedMarketplaceServicesReportRequest' when calling generateUnitedMarketplaceServicesReport",
        new ApiException(400, "Missing the required parameter 'generateUnitedMarketplaceServicesReportRequest' when calling generateUnitedMarketplaceServicesReport"));
    }

    // create path and map variables
    String path = "/reports/united-marketplace-services/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по стоимости услуг
   * Запускает генерацию **отчета по стоимости услуг** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/reports.html)  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**               |**Какие поля нужны**             | |-----------------------------|---------------------------------| |По дате начисления услуги    |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;            | |По дате формирования акта    |&#x60;year&#x60; и &#x60;month&#x60;                 |  Заказать отчеты обоих типов одним запросом нельзя.  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateUnitedMarketplaceServicesReportRequest    * @param format Формат отчета.
  */
  public void generateUnitedMarketplaceServicesReport (GenerateUnitedMarketplaceServicesReportRequest generateUnitedMarketplaceServicesReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateUnitedMarketplaceServicesReportRequest;

    // verify the required parameter 'generateUnitedMarketplaceServicesReportRequest' is set
    if (generateUnitedMarketplaceServicesReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateUnitedMarketplaceServicesReportRequest' when calling generateUnitedMarketplaceServicesReport",
        new ApiException(400, "Missing the required parameter 'generateUnitedMarketplaceServicesReportRequest' when calling generateUnitedMarketplaceServicesReport"));
    }

    // create path and map variables
    String path = "/reports/united-marketplace-services/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по платежам
  * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateUnitedNettingReportRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateUnitedNettingReport (GenerateUnitedNettingReportRequest generateUnitedNettingReportRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateUnitedNettingReportRequest;
    // verify the required parameter 'generateUnitedNettingReportRequest' is set
    if (generateUnitedNettingReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateUnitedNettingReportRequest' when calling generateUnitedNettingReport",
        new ApiException(400, "Missing the required parameter 'generateUnitedNettingReportRequest' when calling generateUnitedNettingReport"));
    }

    // create path and map variables
    String path = "/reports/united-netting/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по платежам
   * Запускает генерацию **отчета по платежам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/transactions.html)  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  Тип отчета зависит от того, какие поля заполнены в запросе:  |**Тип отчета**           |**Какие поля нужны**                   | |-------------------------|---------------------------------------| |О платежах за период     |&#x60;dateFrom&#x60; и &#x60;dateTo&#x60;                  | |О платежном поручении    |&#x60;bankOrderId&#x60; и &#x60;bankOrderDateTime&#x60;    |  Заказать отчеты обоих типов одним запросом нельзя.  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateUnitedNettingReportRequest    * @param format Формат отчета.
  */
  public void generateUnitedNettingReport (GenerateUnitedNettingReportRequest generateUnitedNettingReportRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateUnitedNettingReportRequest;

    // verify the required parameter 'generateUnitedNettingReportRequest' is set
    if (generateUnitedNettingReportRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateUnitedNettingReportRequest' when calling generateUnitedNettingReport",
        new ApiException(400, "Missing the required parameter 'generateUnitedNettingReportRequest' when calling generateUnitedNettingReport"));
    }

    // create path and map variables
    String path = "/reports/united-netting/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Отчет по заказам
  * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateUnitedOrdersRequest 
   * @param format Формат отчета.
   * @return GenerateReportResponse
  */
  public GenerateReportResponse generateUnitedOrdersReport (GenerateUnitedOrdersRequest generateUnitedOrdersRequest, ReportFormatType format) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = generateUnitedOrdersRequest;
    // verify the required parameter 'generateUnitedOrdersRequest' is set
    if (generateUnitedOrdersRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateUnitedOrdersRequest' when calling generateUnitedOrdersReport",
        new ApiException(400, "Missing the required parameter 'generateUnitedOrdersRequest' when calling generateUnitedOrdersReport"));
    }

    // create path and map variables
    String path = "/reports/united-orders/generate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GenerateReportResponse) ApiInvoker.deserialize(localVarResponse, "", GenerateReportResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Отчет по заказам
   * Запускает генерацию **отчета по заказам** за заданный период. [Что это за отчет](https://yandex.ru/support/marketplace/analytics/orders.html)  {% note info \&quot;\&quot; %}  Это новый отчет. Раньше мы так называли генерацию детальной информации по заказам. [Как получить детальную информацию по заказам](../../reference/stats/getOrdersStats.md)  {% endnote %}  Узнать статус генерации и получить ссылку на готовый отчет можно с помощью запроса [GET reports/info/{reportId}](../../reference/reports/getReportInfo.md).  |**⚙️ Лимит:** 100 запросов в час| |-| 
   * @param generateUnitedOrdersRequest    * @param format Формат отчета.
  */
  public void generateUnitedOrdersReport (GenerateUnitedOrdersRequest generateUnitedOrdersRequest, ReportFormatType format, final Response.Listener<GenerateReportResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = generateUnitedOrdersRequest;

    // verify the required parameter 'generateUnitedOrdersRequest' is set
    if (generateUnitedOrdersRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'generateUnitedOrdersRequest' when calling generateUnitedOrdersReport",
        new ApiException(400, "Missing the required parameter 'generateUnitedOrdersRequest' when calling generateUnitedOrdersReport"));
    }

    // create path and map variables
    String path = "/reports/united-orders/generate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "format", format));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GenerateReportResponse) ApiInvoker.deserialize(localVarResponse,  "", GenerateReportResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Получение заданного отчета
  * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
   * @param reportId Идентификатор отчета, который вы получили после запуска генерации. 
   * @return GetReportInfoResponse
  */
  public GetReportInfoResponse getReportInfo (String reportId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'reportId' is set
    if (reportId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reportId' when calling getReportInfo",
        new ApiException(400, "Missing the required parameter 'reportId' when calling getReportInfo"));
    }

    // create path and map variables
    String path = "/reports/info/{reportId}".replaceAll("\\{" + "reportId" + "\\}", apiInvoker.escapeString(reportId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetReportInfoResponse) ApiInvoker.deserialize(localVarResponse, "", GetReportInfoResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Получение заданного отчета
   * Возвращает статус генерации заданного отчета и, если отчет готов, ссылку для скачивания.  Чтобы воспользоваться этим запросом, вначале нужно запустить генерацию отчета. [Инструкция](../../step-by-step/reports.md)  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
   * @param reportId Идентификатор отчета, который вы получили после запуска генерации. 
  */
  public void getReportInfo (String reportId, final Response.Listener<GetReportInfoResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'reportId' is set
    if (reportId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reportId' when calling getReportInfo",
        new ApiException(400, "Missing the required parameter 'reportId' when calling getReportInfo"));
    }

    // create path and map variables
    String path = "/reports/info/{reportId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "reportId" + "\\}", apiInvoker.escapeString(reportId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetReportInfoResponse) ApiInvoker.deserialize(localVarResponse,  "", GetReportInfoResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
