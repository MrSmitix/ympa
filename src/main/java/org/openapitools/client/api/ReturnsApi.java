/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.Set;

import jakarta.ws.rs.*;
import jakarta.ws.rs.core.Response;
import jakarta.ws.rs.core.MediaType;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;

import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import org.openapitools.client.model.EmptyApiResponse;
import java.io.File;
import org.openapitools.client.model.GetReturnResponse;
import org.openapitools.client.model.GetReturnsResponse;
import java.util.List;
import java.time.LocalDate;
import java.util.Map;
import java.util.Optional;
import org.openapitools.client.model.RefundStatusType;
import org.openapitools.client.model.ReturnType;
import org.openapitools.client.model.SetReturnDecisionRequest;

/**
 * Партнерский API Маркета
 *
 * <p>API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 */
@RegisterRestClient
@RegisterProvider(ApiExceptionMapper.class)
@Path("/campaigns/{campaignId}")
public interface ReturnsApi  {

    /**
     * Информация о невыкупе или возврате
     * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     */
    @GET
    @Path("/orders/{orderId}/returns/{returnId}")
    @Produces({ "application/json" })
    GetReturnResponse getReturn(@PathParam("campaignId") Long campaignId, @PathParam("orderId") Long orderId, @PathParam("returnId") Long returnId) throws ApiException, ProcessingException;

    /**
     * Получение заявления на возврат
     * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     */
    @GET
    @Path("/orders/{orderId}/returns/{returnId}/application")
    @Produces({ "application/octet-stream", "application/json" })
    File getReturnApplication(@PathParam("campaignId") Long campaignId, @PathParam("orderId") Long orderId, @PathParam("returnId") Long returnId) throws ApiException, ProcessingException;

    /**
     * Получение фотографии возврата
     * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     */
    @GET
    @Path("/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}")
    @Produces({ "application/octet-stream", "application/json" })
    File getReturnPhoto(@PathParam("campaignId") Long campaignId, @PathParam("orderId") Long orderId, @PathParam("returnId") Long returnId, @PathParam("itemId") Long itemId, @PathParam("imageHash") String imageHash) throws ApiException, ProcessingException;

    /**
     * Список невыкупов и возвратов
     * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     */
    @GET
    @Path("/returns")
    @Produces({ "application/json" })
    GetReturnsResponse getReturns(@PathParam("campaignId") Long campaignId, @QueryParam("page_token") String pageToken, @QueryParam("limit") Integer limit, @QueryParam("orderIds") List<Long> orderIds, @QueryParam("statuses") List<RefundStatusType> statuses, @QueryParam("type") ReturnType type, @QueryParam("fromDate") LocalDate fromDate, @QueryParam("toDate") LocalDate toDate, @QueryParam("from_date") LocalDate fromDate2, @QueryParam("to_date") LocalDate toDate2) throws ApiException, ProcessingException;

    /**
     * Принятие или изменение решения по возврату
     * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     */
    @POST
    @Path("/orders/{orderId}/returns/{returnId}/decision")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    EmptyApiResponse setReturnDecision(@PathParam("campaignId") Long campaignId, @PathParam("orderId") Long orderId, @PathParam("returnId") Long returnId, SetReturnDecisionRequest setReturnDecisionRequest) throws ApiException, ProcessingException;

    /**
     * Подтверждение решения по возврату
     * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
     */
    @POST
    @Path("/orders/{orderId}/returns/{returnId}/decision/submit")
    @Produces({ "application/json" })
    EmptyApiResponse submitReturnDecision(@PathParam("campaignId") Long campaignId, @PathParam("orderId") Long orderId, @PathParam("returnId") Long returnId) throws ApiException, ProcessingException;
}
