/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ApiClientDataErrorResponse;
import org.openapitools.client.model.ApiForbiddenErrorResponse;
import org.openapitools.client.model.ApiLimitErrorResponse;
import org.openapitools.client.model.ApiNotFoundErrorResponse;
import org.openapitools.client.model.ApiServerErrorResponse;
import org.openapitools.client.model.ApiUnauthorizedErrorResponse;
import java.util.Date;
import org.openapitools.client.model.EmptyApiResponse;
import java.io.File;
import org.openapitools.client.model.GetReturnResponse;
import org.openapitools.client.model.GetReturnsResponse;
import java.util.*;
import org.openapitools.client.model.RefundStatusType;
import org.openapitools.client.model.ReturnType;
import org.openapitools.client.model.SetReturnDecisionRequest;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ReturnsApi {
  String basePath = "https://api.partner.market.yandex.ru";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Информация о невыкупе или возврате
  * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param returnId Идентификатор возврата.
   * @return GetReturnResponse
  */
  public GetReturnResponse getReturn (Long campaignId, Long orderId, Long returnId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturn",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturn"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getReturn",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getReturn"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling getReturn",
        new ApiException(400, "Missing the required parameter 'returnId' when calling getReturn"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetReturnResponse) ApiInvoker.deserialize(localVarResponse, "", GetReturnResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Информация о невыкупе или возврате
   * Получает информацию по одному невыкупу или возврату.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param returnId Идентификатор возврата.
  */
  public void getReturn (Long campaignId, Long orderId, Long returnId, final Response.Listener<GetReturnResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturn",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturn"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getReturn",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getReturn"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling getReturn",
        new ApiException(400, "Missing the required parameter 'returnId' when calling getReturn"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetReturnResponse) ApiInvoker.deserialize(localVarResponse,  "", GetReturnResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Получение заявления на возврат
  * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param returnId Идентификатор возврата.
   * @return File
  */
  public File getReturnApplication (Long campaignId, Long orderId, Long returnId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturnApplication",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturnApplication"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getReturnApplication",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getReturnApplication"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling getReturnApplication",
        new ApiException(400, "Missing the required parameter 'returnId' when calling getReturnApplication"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Получение заявления на возврат
   * Загружает заявление покупателя на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param returnId Идентификатор возврата.
  */
  public void getReturnApplication (Long campaignId, Long orderId, Long returnId, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturnApplication",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturnApplication"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getReturnApplication",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getReturnApplication"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling getReturnApplication",
        new ApiException(400, "Missing the required parameter 'returnId' when calling getReturnApplication"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/application".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Получение фотографии возврата
  * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param returnId Идентификатор возврата.
   * @param itemId Идентификатор товара в возврате.
   * @param imageHash Хеш ссылки изображения для загрузки.
   * @return File
  */
  public File getReturnPhoto (Long campaignId, Long orderId, Long returnId, Long itemId, String imageHash) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'returnId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'itemId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'imageHash' is set
    if (imageHash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageHash' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'imageHash' when calling getReturnPhoto"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString())).replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString())).replaceAll("\\{" + "imageHash" + "\\}", apiInvoker.escapeString(imageHash.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (File) ApiInvoker.deserialize(localVarResponse, "", File.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Получение фотографии возврата
   * Получает фотографии, которые покупатель приложил к заявлению на возврат товара.  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param returnId Идентификатор возврата.   * @param itemId Идентификатор товара в возврате.   * @param imageHash Хеш ссылки изображения для загрузки.
  */
  public void getReturnPhoto (Long campaignId, Long orderId, Long returnId, Long itemId, String imageHash, final Response.Listener<File> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'orderId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'returnId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'itemId' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'itemId' when calling getReturnPhoto"));
    }
    // verify the required parameter 'imageHash' is set
    if (imageHash == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageHash' when calling getReturnPhoto",
        new ApiException(400, "Missing the required parameter 'imageHash' when calling getReturnPhoto"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/{itemId}/image/{imageHash}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString())).replaceAll("\\{" + "itemId" + "\\}", apiInvoker.escapeString(itemId.toString())).replaceAll("\\{" + "imageHash" + "\\}", apiInvoker.escapeString(imageHash.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((File) ApiInvoker.deserialize(localVarResponse,  "", File.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Список невыкупов и возвратов
  * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются. 
   * @param limit Количество значений на одной странице. 
   * @param orderIds Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50. 
   * @param statuses Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую. 
   * @param type Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы. 
   * @param fromDate Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. 
   * @param toDate Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;. 
   * @param fromDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления. 
   * @param toDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
   * @return GetReturnsResponse
  */
  public GetReturnsResponse getReturns (Long campaignId, String pageToken, Integer limit, List<Long> orderIds, List<RefundStatusType> statuses, ReturnType type, Date fromDate, Date toDate, Date fromDate2, Date toDate2) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturns",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturns"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/returns".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_token", pageToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "orderIds", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "statuses", statuses));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fromDate", fromDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "toDate", toDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from_date", fromDate2));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_date", toDate2));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetReturnsResponse) ApiInvoker.deserialize(localVarResponse, "", GetReturnsResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Список невыкупов и возвратов
   * Получает список невыкупов и возвратов.  Чтобы получить информацию по одному возврату или невыкупу, выполните запрос [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.    * @param limit Количество значений на одной странице.    * @param orderIds Идентификаторы заказов — для фильтрации результатов.  Несколько идентификаторов перечисляются через запятую без пробела. Максимальное количество идентификаторов — 50.    * @param statuses Статусы возвратов или невыкупов — для фильтрации результатов.  Несколько статусов перечисляются через запятую.    * @param type Тип заказа для фильтрации:  * &#x60;RETURN&#x60; — возврат.  * &#x60;UNREDEEMED&#x60; — невыкуп.  Если не указывать, в ответе будут и возвраты, и невыкупы.    * @param fromDate Начальная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.    * @param toDate Конечная дата для фильтрации возвратов или невыкупов по дате обновления.  Формат: &#x60;ГГГГ-ММ-ДД&#x60;.    * @param fromDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;fromDate&#x60;.  {% endnote %}  Начальная дата для фильтрации возвратов или невыкупов по дате обновления.    * @param toDate2 {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;toDate&#x60;.  {% endnote %}  Конечная дата для фильтрации возвратов или невыкупов по дате обновления. 
  */
  public void getReturns (Long campaignId, String pageToken, Integer limit, List<Long> orderIds, List<RefundStatusType> statuses, ReturnType type, Date fromDate, Date toDate, Date fromDate2, Date toDate2, final Response.Listener<GetReturnsResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling getReturns",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling getReturns"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/returns".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_token", pageToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "orderIds", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("csv", "statuses", statuses));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fromDate", fromDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "toDate", toDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "from_date", fromDate2));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to_date", toDate2));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetReturnsResponse) ApiInvoker.deserialize(localVarResponse,  "", GetReturnsResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Принятие или изменение решения по возврату
  * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param returnId Идентификатор возврата.
   * @param setReturnDecisionRequest 
   * @return EmptyApiResponse
  */
  public EmptyApiResponse setReturnDecision (Long campaignId, Long orderId, Long returnId, SetReturnDecisionRequest setReturnDecisionRequest) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = setReturnDecisionRequest;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling setReturnDecision"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'orderId' when calling setReturnDecision"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'returnId' when calling setReturnDecision"));
    }
    // verify the required parameter 'setReturnDecisionRequest' is set
    if (setReturnDecisionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setReturnDecisionRequest' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'setReturnDecisionRequest' when calling setReturnDecision"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EmptyApiResponse) ApiInvoker.deserialize(localVarResponse, "", EmptyApiResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Принятие или изменение решения по возврату
   * Выбирает решение по возврату от покупателя. После этого для подтверждения решения нужно выполнить запрос [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit](../../reference/orders/submitReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param returnId Идентификатор возврата.   * @param setReturnDecisionRequest 
  */
  public void setReturnDecision (Long campaignId, Long orderId, Long returnId, SetReturnDecisionRequest setReturnDecisionRequest, final Response.Listener<EmptyApiResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = setReturnDecisionRequest;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling setReturnDecision"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'orderId' when calling setReturnDecision"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'returnId' when calling setReturnDecision"));
    }
    // verify the required parameter 'setReturnDecisionRequest' is set
    if (setReturnDecisionRequest == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setReturnDecisionRequest' when calling setReturnDecision",
        new ApiException(400, "Missing the required parameter 'setReturnDecisionRequest' when calling setReturnDecision"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EmptyApiResponse) ApiInvoker.deserialize(localVarResponse,  "", EmptyApiResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Подтверждение решения по возврату
  * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) 
   * @param orderId Идентификатор заказа.
   * @param returnId Идентификатор возврата.
   * @return EmptyApiResponse
  */
  public EmptyApiResponse submitReturnDecision (Long campaignId, Long orderId, Long returnId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling submitReturnDecision",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling submitReturnDecision"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling submitReturnDecision",
        new ApiException(400, "Missing the required parameter 'orderId' when calling submitReturnDecision"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling submitReturnDecision",
        new ApiException(400, "Missing the required parameter 'returnId' when calling submitReturnDecision"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit".replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "OAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (EmptyApiResponse) ApiInvoker.deserialize(localVarResponse, "", EmptyApiResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Подтверждение решения по возврату
   * Подтверждает выбранное решение по возврату, отправленное в запросе [POST campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision](../../reference/orders/setReturnDecision.md).  |**⚙️ Лимит:** 10 000 запросов в час| |-| 
   * @param campaignId Идентификатор кампании в API и магазина в кабинете. Каждая кампания в API соответствует магазину в кабинете.  Чтобы узнать идентификаторы своих магазинов, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)    * @param orderId Идентификатор заказа.   * @param returnId Идентификатор возврата.
  */
  public void submitReturnDecision (Long campaignId, Long orderId, Long returnId, final Response.Listener<EmptyApiResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'campaignId' is set
    if (campaignId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'campaignId' when calling submitReturnDecision",
        new ApiException(400, "Missing the required parameter 'campaignId' when calling submitReturnDecision"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling submitReturnDecision",
        new ApiException(400, "Missing the required parameter 'orderId' when calling submitReturnDecision"));
    }
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling submitReturnDecision",
        new ApiException(400, "Missing the required parameter 'returnId' when calling submitReturnDecision"));
    }

    // create path and map variables
    String path = "/campaigns/{campaignId}/orders/{orderId}/returns/{returnId}/decision/submit".replaceAll("\\{format\\}","json").replaceAll("\\{" + "campaignId" + "\\}", apiInvoker.escapeString(campaignId.toString())).replaceAll("\\{" + "orderId" + "\\}", apiInvoker.escapeString(orderId.toString())).replaceAll("\\{" + "returnId" + "\\}", apiInvoker.escapeString(returnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "OAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EmptyApiResponse) ApiInvoker.deserialize(localVarResponse,  "", EmptyApiResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
