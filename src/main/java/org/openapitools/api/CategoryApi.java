/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ApiClientDataErrorResponse;
import org.openapitools.model.ApiForbiddenErrorResponse;
import org.openapitools.model.ApiLimitErrorResponse;
import org.openapitools.model.ApiNotFoundErrorResponse;
import org.openapitools.model.ApiServerErrorResponse;
import org.openapitools.model.ApiUnauthorizedErrorResponse;
import org.openapitools.model.GetCategoryContentParametersResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-09T22:33:46.054383208Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "content", description = "the content API")
public interface CategoryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /category/{categoryId}/parameters : Списки характеристик товаров по категориям
     * Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| 
     *
     * @param categoryId Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md).  (required)
     * @return Список характеристик товаров из заданной категории. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getCategoryContentParameters",
        summary = "Списки характеристик товаров по категориям",
        description = "Возвращает список характеристик с допустимыми значениями для заданной категории.  |**⚙️ Лимит:** 50 категорий в минуту | |-| ",
        tags = { "content", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список характеристик товаров из заданной категории.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCategoryContentParametersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/category/{categoryId}/parameters",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetCategoryContentParametersResponse> getCategoryContentParameters(
        @Parameter(name = "categoryId", description = "Идентификатор категории на Маркете.  Чтобы узнать идентификатор категории, к которой относится интересующий вас товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). ", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") Long categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"parameters\" : [ { \"values\" : [ { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" }, { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" } ], \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ], \"description\" : \"description\", \"type\" : \"TEXT\", \"constraints\" : { \"minValue\" : 2.3021358869347655, \"maxValue\" : 7.061401241503109, \"maxLength\" : 9 }, \"required\" : true, \"multivalue\" : true, \"unit\" : { \"defaultUnitId\" : 1, \"units\" : [ { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 }, { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 } ] }, \"valueRestrictions\" : [ { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 }, { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 } ], \"distinctive\" : true, \"name\" : \"name\", \"id\" : 6, \"filtering\" : true, \"allowCustomValues\" : true }, { \"values\" : [ { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" }, { \"description\" : \"description\", \"id\" : 5, \"value\" : \"value\" } ], \"recommendationTypes\" : [ \"HAS_VIDEO\", \"HAS_VIDEO\" ], \"description\" : \"description\", \"type\" : \"TEXT\", \"constraints\" : { \"minValue\" : 2.3021358869347655, \"maxValue\" : 7.061401241503109, \"maxLength\" : 9 }, \"required\" : true, \"multivalue\" : true, \"unit\" : { \"defaultUnitId\" : 1, \"units\" : [ { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 }, { \"name\" : \"кг\", \"fullName\" : \"килограмм\", \"id\" : 5 } ] }, \"valueRestrictions\" : [ { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 }, { \"limitedValues\" : [ { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] }, { \"limitingOptionValueId\" : 2, \"optionValueIds\" : [ 4, 4 ] } ], \"limitingParameterId\" : 3 } ], \"distinctive\" : true, \"name\" : \"name\", \"id\" : 6, \"filtering\" : true, \"allowCustomValues\" : true } ], \"categoryId\" : 0 }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
