/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AddOffersToArchiveRequest;
import org.openapitools.model.AddOffersToArchiveResponse;
import org.openapitools.model.ApiClientDataErrorResponse;
import org.openapitools.model.ApiForbiddenErrorResponse;
import org.openapitools.model.ApiLimitErrorResponse;
import org.openapitools.model.ApiLockedErrorResponse;
import org.openapitools.model.ApiNotFoundErrorResponse;
import org.openapitools.model.ApiServerErrorResponse;
import org.openapitools.model.ApiUnauthorizedErrorResponse;
import org.openapitools.model.ConfirmPricesRequest;
import org.openapitools.model.CreateChatRequest;
import org.openapitools.model.CreateChatResponse;
import org.openapitools.model.DeleteGoodsFeedbackCommentRequest;
import org.openapitools.model.DeleteOffersFromArchiveRequest;
import org.openapitools.model.DeleteOffersFromArchiveResponse;
import org.openapitools.model.DeleteOffersRequest;
import org.openapitools.model.DeleteOffersResponse;
import org.openapitools.model.DeletePromoOffersRequest;
import org.openapitools.model.DeletePromoOffersResponse;
import org.openapitools.model.EmptyApiResponse;
import org.openapitools.model.GetBidsInfoRequest;
import org.openapitools.model.GetBidsInfoResponse;
import org.openapitools.model.GetBidsRecommendationsRequest;
import org.openapitools.model.GetBidsRecommendationsResponse;
import org.openapitools.model.GetBusinessSettingsResponse;
import org.openapitools.model.GetChatHistoryRequest;
import org.openapitools.model.GetChatHistoryResponse;
import org.openapitools.model.GetChatsRequest;
import org.openapitools.model.GetChatsResponse;
import org.openapitools.model.GetGoodsFeedbackCommentsRequest;
import org.openapitools.model.GetGoodsFeedbackCommentsResponse;
import org.openapitools.model.GetGoodsFeedbackRequest;
import org.openapitools.model.GetGoodsFeedbackResponse;
import org.openapitools.model.GetOfferCardsContentStatusRequest;
import org.openapitools.model.GetOfferCardsContentStatusResponse;
import org.openapitools.model.GetOfferMappingsRequest;
import org.openapitools.model.GetOfferMappingsResponse;
import org.openapitools.model.GetOfferRecommendationsRequest;
import org.openapitools.model.GetOfferRecommendationsResponse;
import org.openapitools.model.GetPromoOffersRequest;
import org.openapitools.model.GetPromoOffersResponse;
import org.openapitools.model.GetPromosRequest;
import org.openapitools.model.GetPromosResponse;
import org.openapitools.model.GetQualityRatingRequest;
import org.openapitools.model.GetQualityRatingResponse;
import org.openapitools.model.GetQuarantineOffersRequest;
import org.openapitools.model.GetQuarantineOffersResponse;
import org.openapitools.model.GetSuggestedOfferMappingsRequest;
import org.openapitools.model.GetSuggestedOfferMappingsResponse;
import org.openapitools.model.GetWarehousesResponse;
import org.openapitools.model.PutSkuBidsRequest;
import org.openapitools.model.SendMessageToChatRequest;
import org.openapitools.model.SkipGoodsFeedbackReactionRequest;
import org.openapitools.model.UpdateBusinessPricesRequest;
import org.openapitools.model.UpdateGoodsFeedbackCommentRequest;
import org.openapitools.model.UpdateGoodsFeedbackCommentResponse;
import org.openapitools.model.UpdateOfferContentRequest;
import org.openapitools.model.UpdateOfferContentResponse;
import org.openapitools.model.UpdateOfferMappingsRequest;
import org.openapitools.model.UpdateOfferMappingsResponse;
import org.openapitools.model.UpdatePromoOffersRequest;
import org.openapitools.model.UpdatePromoOffersResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-09T22:33:46.054383208Z[Etc/UTC]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "business-offer-mappings", description = "the business-offer-mappings API")
public interface BusinessesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /businesses/{businessId}/offer-mappings/archive : Добавление товаров в архив
     * Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \&quot;В архив нельзя отправить товар, который хранится на складе Маркета\&quot; %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param addOffersToArchiveRequest  (required)
     * @return Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "addOffersToArchive",
        summary = "Добавление товаров в архив",
        description = "Помещает товары в архив. Товары, помещенные в архив, скрыты с витрины во всех магазинах кабинета.  {% note warning \"В архив нельзя отправить товар, который хранится на складе Маркета\" %}  Вначале такой товар нужно распродать или вывезти.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| ",
        tags = { "business-offer-mappings", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Если некоторые товары добавить в архив не удалось, в ответе 200 будет их список.  Список успешно добавленных товаров не возвращается. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddOffersToArchiveResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-mappings/archive",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AddOffersToArchiveResponse> addOffersToArchive(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "AddOffersToArchiveRequest", description = "", required = true) @Valid @RequestBody AddOffersToArchiveRequest addOffersToArchiveRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"notArchivedOffers\" : [ { \"offerId\" : \"offerId\", \"error\" : \"OFFER_HAS_STOCKS\" }, { \"offerId\" : \"offerId\", \"error\" : \"OFFER_HAS_STOCKS\" } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/price-quarantine/confirm : Удаление товара из карантина по цене в кабинете
     * Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param confirmPricesRequest  (required)
     * @return Ответ 200 обозначает, что цены подтверждены. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "confirmBusinessPrices",
        summary = "Удаление товара из карантина по цене в кабинете",
        description = "Подтверждает основную цену на товары, которые попали в карантин, и удаляет их из карантина.  Основная цена задается в каталоге и действует во всех магазинах кабинета.  Товар попадает в карантин, если его цена меняется слишком резко. [Как настроить карантин](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  Чтобы увидеть список товаров, которые попали в карантин, используйте запрос [POST businesses/{businessId}/price-quarantine](getBusinessQuarantineOffers.md).  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| ",
        tags = { "price-quarantine", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ответ 200 обозначает, что цены подтверждены.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/price-quarantine/confirm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EmptyApiResponse> confirmBusinessPrices(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "ConfirmPricesRequest", description = "", required = true) @Valid @RequestBody ConfirmPricesRequest confirmPricesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/chats/new : Создание нового чата с покупателем
     * Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param createChatRequest description (required)
     * @return Все получилось: чат создан.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "createChat",
        summary = "Создание нового чата с покупателем",
        description = "Создает новый чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| ",
        tags = { "chats", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все получилось: чат создан. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CreateChatResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/chats/new",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CreateChatResponse> createChat(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "CreateChatRequest", description = "description", required = true) @Valid @RequestBody CreateChatRequest createChatRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"chatId\" : 0 }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/goods-feedback/comments/delete : Удаление комментария к отзыву
     * Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param deleteGoodsFeedbackCommentRequest  (required)
     * @return Пустой ответ. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "deleteGoodsFeedbackComment",
        summary = "Удаление комментария к отзыву",
        description = "Удаляет комментарий магазина.  |**⚙️ Лимит:** 1 000 запросов в час| |-| ",
        tags = { "goods-feedback", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пустой ответ.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/goods-feedback/comments/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EmptyApiResponse> deleteGoodsFeedbackComment(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "DeleteGoodsFeedbackCommentRequest", description = "", required = true) @Valid @RequestBody DeleteGoodsFeedbackCommentRequest deleteGoodsFeedbackCommentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-mappings/delete : Удаление товаров из каталога
     * Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param deleteOffersRequest  (required)
     * @return Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "deleteOffers",
        summary = "Удаление товаров из каталога",
        description = "Удаляет товары из каталога.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| ",
        tags = { "business-offer-mappings", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Если удалось удалить не все товары, с ответом 200 вернется список тех, что были в запросе, но остались в магазине.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteOffersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-mappings/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteOffersResponse> deleteOffers(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "DeleteOffersRequest", description = "", required = true) @Valid @RequestBody DeleteOffersRequest deleteOffersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"notDeletedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-mappings/unarchive : Удаление товаров из архива
     * Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param deleteOffersFromArchiveRequest  (required)
     * @return Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "deleteOffersFromArchive",
        summary = "Удаление товаров из архива",
        description = "Восстанавливает товары из архива.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 200 товаров в одном запросе| |-| ",
        tags = { "business-offer-mappings", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Если некоторые товары восстановить из архива не удалось, в ответе 200 будет их список.  Список успешно восстановленных товаров не возвращается. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeleteOffersFromArchiveResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-mappings/unarchive",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeleteOffersFromArchiveResponse> deleteOffersFromArchive(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "DeleteOffersFromArchiveRequest", description = "", required = true) @Valid @RequestBody DeleteOffersFromArchiveRequest deleteOffersFromArchiveRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"notUnarchivedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/promos/offers/delete : Удаление товаров из акции
     * Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param deletePromoOffersRequest  (required)
     * @return Результат удаления товаров из акции. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "deletePromoOffers",
        summary = "Удаление товаров из акции",
        description = "Убирает товары из акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| ",
        tags = { "promos", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Результат удаления товаров из акции.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeletePromoOffersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/promos/offers/delete",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<DeletePromoOffersResponse> deletePromoOffers(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "DeletePromoOffersRequest", description = "", required = true) @Valid @RequestBody DeletePromoOffersRequest deletePromoOffersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"rejectedOffers\" : [ { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" }, { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/bids/info : Информация об установленных ставках
     * Возвращает значения ставок для заданных товаров.  {% note warning \&quot;\&quot; %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @param getBidsInfoRequest description (optional)
     * @return Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getBidsInfoForBusiness",
        summary = "Информация об установленных ставках",
        description = "Возвращает значения ставок для заданных товаров.  {% note warning \"\" %}  В ответе возвращаются значения только тех ставок, которые вы установили через запрос [PUT businesses/{businessId}/bids](../../reference/bids/putBidsForBusiness.md). Получить информацию по кампаниям, созданным в кабинете, не получится.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| ",
        tags = { "bids", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Значения ставок для заданных товаров. В ответ попадают только товары, на которые установлены ставки.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBidsInfoResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/bids/info",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetBidsInfoResponse> getBidsInfoForBusiness(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "GetBidsInfoRequest", description = "description") @Valid @RequestBody(required = false) GetBidsInfoRequest getBidsInfoRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"bids\" : [ { \"sku\" : \"sku\", \"bid\" : 570 }, { \"sku\" : \"sku\", \"bid\" : 570 } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/bids/recommendations : Рекомендованные ставки для заданных товаров
     * Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getBidsRecommendationsRequest description. (required)
     * @return Рекомендованные ставки для заданных товаров. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getBidsRecommendations",
        summary = "Рекомендованные ставки для заданных товаров",
        description = "Возвращает рекомендованные ставки для заданных товаров — такие ставки обеспечивают вашим предложениям определенную долю показов, если цена не превышает рекомендованную.  Для одного товара может возвращаться одна рекомендованная ставка или несколько. Во втором случае разные ставки предназначены для достижения разной доли показов.  Если товар только добавлен в каталог, но пока не продается, рекомендованной ставки для него не будет.  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| ",
        tags = { "bids", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Рекомендованные ставки для заданных товаров.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBidsRecommendationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/bids/recommendations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetBidsRecommendationsResponse> getBidsRecommendations(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetBidsRecommendationsRequest", description = "description.", required = true) @Valid @RequestBody GetBidsRecommendationsRequest getBidsRecommendationsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"recommendations\" : [ { \"bidRecommendations\" : [ { \"showPercent\" : 8, \"bid\" : 570 }, { \"showPercent\" : 8, \"bid\" : 570 } ], \"priceRecommendations\" : [ { \"campaignId\" : 6, \"price\" : 1.1465812980502945 }, { \"campaignId\" : 6, \"price\" : 1.1465812980502945 } ], \"sku\" : \"sku\", \"bid\" : 570 }, { \"bidRecommendations\" : [ { \"showPercent\" : 8, \"bid\" : 570 }, { \"showPercent\" : 8, \"bid\" : 570 } ], \"priceRecommendations\" : [ { \"campaignId\" : 6, \"price\" : 1.1465812980502945 }, { \"campaignId\" : 6, \"price\" : 1.1465812980502945 } ], \"sku\" : \"sku\", \"bid\" : 570 } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/price-quarantine : Список товаров, находящихся в карантине по цене в кабинете
     * Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \&quot;𝓠 Что такое карантин?\&quot; %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getQuarantineOffersRequest  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @return Список товаров в карантине. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getBusinessQuarantineOffers",
        summary = "Список товаров, находящихся в карантине по цене в кабинете",
        description = "Возвращает список товаров, которые находятся в карантине по **основной цене**. Основная цена задается в каталоге и действует во всех магазинах кабинета.  Проверьте цену каждого из товаров, который попал в карантин. Если ошибки нет и цена правильная, подтвердите ее с помощью запроса [POST businesses/{businessId}/price-quarantine/confirm](../../reference/business-assortment/confirmBusinessPrices.md). Если цена в самом деле ошибочная, установите верную с помощью запроса [POST businesses/{businessId}/offer-prices/updates](../../reference/business-assortment/updateBusinessPrices.md).  {% note info \"𝓠 Что такое карантин?\" %}  𝓐 Товар попадает в карантин, если его цена меняется слишком резко или слишком сильно отличается от рыночной. [Подробнее](https://yandex.ru/support/marketplace/assortment/operations/prices.html#quarantine)  {% endnote %}  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| ",
        tags = { "price-quarantine", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список товаров в карантине.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetQuarantineOffersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/price-quarantine",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetQuarantineOffersResponse> getBusinessQuarantineOffers(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetQuarantineOffersRequest", description = "", required = true) @Valid @RequestBody GetQuarantineOffersRequest getQuarantineOffersRequest,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"offers\" : [ { \"verdicts\" : [ { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] }, { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] } ], \"offerId\" : \"offerId\", \"currentPrice\" : { \"value\" : 0.9301444243932576 }, \"lastValidPrice\" : { \"value\" : 0.9301444243932576 } }, { \"verdicts\" : [ { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] }, { \"type\" : \"PRICE_CHANGE\", \"params\" : [ { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" }, { \"name\" : \"CURRENT_PRICE\", \"value\" : \"value\" } ] } ], \"offerId\" : \"offerId\", \"currentPrice\" : { \"value\" : 0.9301444243932576 }, \"lastValidPrice\" : { \"value\" : 0.9301444243932576 } } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/settings : Настройки кабинета
     * Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return Настройки кабинета. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getBusinessSettings",
        summary = "Настройки кабинета",
        description = "Возвращает информацию о настройках кабинета, идентификатор которого указан в запросе. |**⚙️ Лимит:** 1000 запросов в час| |-| ",
        tags = { "businesses", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Настройки кабинета.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetBusinessSettingsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/settings",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetBusinessSettingsResponse> getBusinessSettings(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"settings\" : { \"currency\" : \"RUR\", \"onlyDefaultPrice\" : true }, \"info\" : { \"name\" : \"name\", \"id\" : 0 } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/chats/history : Получение истории сообщений в чате
     * Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param chatId Идентификатор чата. (required)
     * @param getChatHistoryRequest description (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @return История сообщений успешно получена.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getChatHistory",
        summary = "Получение истории сообщений в чате",
        description = "Возвращает историю сообщений в чате с покупателем.  |**⚙️ Лимит:** 10000 запросов в час| |-| ",
        tags = { "chats", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "История сообщений успешно получена. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetChatHistoryResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/chats/history",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetChatHistoryResponse> getChatHistory(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @NotNull @Parameter(name = "chatId", description = "Идентификатор чата.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "chatId", required = true) Long chatId,
        @Parameter(name = "GetChatHistoryRequest", description = "description", required = true) @Valid @RequestBody GetChatHistoryRequest getChatHistoryRequest,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"orderId\" : 0, \"messages\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sender\" : \"PARTNER\", \"payload\" : [ { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" } ], \"messageId\" : 6, \"message\" : \"message\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"sender\" : \"PARTNER\", \"payload\" : [ { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"url\" : \"url\" } ], \"messageId\" : 6, \"message\" : \"message\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/chats : Получение доступных чатов
     * Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getChatsRequest description (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @return Список чатов.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getChats",
        summary = "Получение доступных чатов",
        description = "Возвращает ваши чаты с покупателями.  |**⚙️ Лимит:** 10000 запросов в час| |-| ",
        tags = { "chats", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список чатов. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetChatsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/chats",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetChatsResponse> getChats(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetChatsRequest", description = "description", required = true) @Valid @RequestBody GetChatsRequest getChatsRequest,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"chats\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"chatId\" : 0, \"orderId\" : 6, \"type\" : \"CHAT\", \"status\" : \"NEW\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"chatId\" : 0, \"orderId\" : 6, \"type\" : \"CHAT\", \"status\" : \"NEW\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/goods-feedback/comments : Получение комментариев к отзыву
     * Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getGoodsFeedbackCommentsRequest  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @return Дерево комментариев к отзыву. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getGoodsFeedbackComments",
        summary = "Получение комментариев к отзыву",
        description = "Возвращает комментарии к отзыву.  Результаты возвращаются постранично, одна страница содержит не более 20 комментариев.  Комментарии расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| ",
        tags = { "goods-feedback", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Дерево комментариев к отзыву.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGoodsFeedbackCommentsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/goods-feedback/comments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetGoodsFeedbackCommentsResponse> getGoodsFeedbackComments(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetGoodsFeedbackCommentsRequest", description = "", required = true) @Valid @RequestBody GetGoodsFeedbackCommentsRequest getGoodsFeedbackCommentsRequest,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"comments\" : [ { \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 0, \"text\" : \"text\", \"canModify\" : true, \"parentId\" : 6, \"status\" : \"PUBLISHED\" }, { \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 0, \"text\" : \"text\", \"canModify\" : true, \"parentId\" : 6, \"status\" : \"PUBLISHED\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/goods-feedback : Получение отзывов о товарах продавца
     * Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в &#x60;page_token&#x60;, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @param getGoodsFeedbackRequest  (optional)
     * @return Список отзывов. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getGoodsFeedbacks",
        summary = "Получение отзывов о товарах продавца",
        description = "Возвращает все отзывы о товарах продавца по указанным фильтрам.  Результаты возвращаются постранично, одна страница содержит не более 20 отзывов.  Отзывы расположены в порядке публикации, поэтому вы можете передавать определенный идентификатор страницы в `page_token`, если вы получали его ранее.  |**⚙️ Лимит:** 1 000 запросов в час| |-| ",
        tags = { "goods-feedback", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список отзывов.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetGoodsFeedbackResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/goods-feedback",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetGoodsFeedbackResponse> getGoodsFeedbacks(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "GetGoodsFeedbackRequest", description = "") @Valid @RequestBody(required = false) GetGoodsFeedbackRequest getGoodsFeedbackRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"feedbacks\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"needReaction\" : true, \"identifiers\" : { \"orderId\" : 6, \"modelId\" : 1 }, \"author\" : \"author\", \"feedbackId\" : 0, \"description\" : { \"advantages\" : \"advantages\", \"disadvantages\" : \"disadvantages\", \"comment\" : \"comment\" }, \"media\" : { \"videos\" : [ \"videos\", \"videos\" ], \"photos\" : [ \"photos\", \"photos\" ] }, \"statistics\" : { \"commentsCount\" : 5, \"rating\" : 3, \"paidAmount\" : 2, \"recommended\" : true } }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"needReaction\" : true, \"identifiers\" : { \"orderId\" : 6, \"modelId\" : 1 }, \"author\" : \"author\", \"feedbackId\" : 0, \"description\" : { \"advantages\" : \"advantages\", \"disadvantages\" : \"disadvantages\", \"comment\" : \"comment\" }, \"media\" : { \"videos\" : [ \"videos\", \"videos\" ], \"photos\" : [ \"photos\", \"photos\" ] }, \"statistics\" : { \"commentsCount\" : 5, \"rating\" : 3, \"paidAmount\" : 2, \"recommended\" : true } } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-cards : Получение информации о заполненности карточек магазина
     * Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @param getOfferCardsContentStatusRequest  (optional)
     * @return Информация о карточках указанных товаров. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getOfferCardsContentStatus",
        summary = "Получение информации о заполненности карточек магазина",
        description = "Возвращает сведения о состоянии контента для заданных товаров:  * создана ли карточка товара и в каком она статусе; * заполненность карточки в процентах; * переданные характеристики товаров; * есть ли ошибки или предупреждения, связанные с контентом; * рекомендации по заполнению карточки.  |**⚙️ Лимит:** 600 запросов в минуту| |-| ",
        tags = { "content", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Информация о карточках указанных товаров.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOfferCardsContentStatusResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-cards",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetOfferCardsContentStatusResponse> getOfferCardsContentStatus(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "GetOfferCardsContentStatusRequest", description = "") @Valid @RequestBody(required = false) GetOfferCardsContentStatusRequest getOfferCardsContentStatusRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"offerCards\" : [ { \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"contentRating\" : 0, \"recommendations\" : [ { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 }, { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 } ], \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] }, { \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" }, \"warnings\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"contentRating\" : 0, \"recommendations\" : [ { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 }, { \"type\" : \"HAS_VIDEO\", \"percent\" : 60 } ], \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"errors\" : [ { \"comment\" : \"comment\", \"message\" : \"message\" }, { \"comment\" : \"comment\", \"message\" : \"message\" } ], \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ] } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-mappings : Информация о товарах в каталоге
     * Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @param getOfferMappingsRequest  (optional)
     * @return Информация о товарах в каталоге. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getOfferMappings",
        summary = "Информация о товарах в каталоге",
        description = "Возвращает список товаров в каталоге, их категории на Маркете и характеристики каждого товара.  Можно использовать тремя способами: * задать список интересующих SKU; * задать фильтр — в этом случае результаты возвращаются постранично; * не передавать тело запроса, чтобы получить список всех товаров в каталоге.  |**⚙️ Лимит:** 600 запросов в минуту, не более 200 товаров в одном запросе| |-| ",
        tags = { "business-offer-mappings", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Информация о товарах в каталоге.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOfferMappingsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-mappings",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetOfferMappingsResponse> getOfferMappings(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "GetOfferMappingsRequest", description = "") @Valid @RequestBody(required = false) GetOfferMappingsRequest getOfferMappingsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"offerMappings\" : [ { \"offer\" : { \"downloadable\" : true, \"sellingPrograms\" : [ { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" }, { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" } ], \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"archived\" : true, \"campaigns\" : [ { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" }, { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" } ], \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 1, \"additionalExpenses\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } }, { \"offer\" : { \"downloadable\" : true, \"sellingPrograms\" : [ { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" }, { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" } ], \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"archived\" : true, \"campaigns\" : [ { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" }, { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" } ], \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 1, \"additionalExpenses\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offers/recommendations : Рекомендации Маркета, касающиеся цен
     * Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getOfferRecommendationsRequest  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @return Список товаров с рекомендациями. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getOfferRecommendations",
        summary = "Рекомендации Маркета, касающиеся цен",
        description = "Метод возвращает рекомендации нескольких типов.  **1. Порог для привлекательной цены. Он нужен для участия в софинансировании скидок.**  Показывает, какие **цены для участия** нужно установить, чтобы получить максимальные шансы на срабатывание скидок, софинансируемых Маркетом. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#sponsored-discounts)  **2. Оценка привлекательности цен на витрине.**  Привлекательность влияет на вероятность срабатывания скидок за счет Маркета. [Как это устроено](https://yandex.ru/support/marketplace/marketing/smart-pricing.html#validation)  В запросе можно использовать фильтры.  Результаты возвращаются постранично.  |**⚙️ Лимит:** 100 запросов в минуту| |-| ",
        tags = { "offers", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список товаров с рекомендациями.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetOfferRecommendationsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offers/recommendations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetOfferRecommendationsResponse> getOfferRecommendations(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetOfferRecommendationsRequest", description = "", required = true) @Valid @RequestBody GetOfferRecommendationsRequest getOfferRecommendationsRequest,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"offerRecommendations\" : [ { \"offer\" : { \"shows\" : 0, \"price\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitiveness\" : \"OPTIMAL\", \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"recommendation\" : { \"recommendedCofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitivenessThresholds\" : { \"optimalPrice\" : { \"value\" : 0.9301444243932576 }, \"averagePrice\" : { \"value\" : 0.9301444243932576 } } } }, { \"offer\" : { \"shows\" : 0, \"price\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitiveness\" : \"OPTIMAL\", \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"recommendation\" : { \"recommendedCofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"offerId\" : \"offerId\", \"competitivenessThresholds\" : { \"optimalPrice\" : { \"value\" : 0.9301444243932576 }, \"averagePrice\" : { \"value\" : 0.9301444243932576 } } } } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/promos/offers : Получение списка товаров, которые участвуют или могут участвовать в акции
     * Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре &#x60;limit&#x60; не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getPromoOffersRequest  (required)
     * @param pageToken Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра &#x60;nextPageToken&#x60;, полученное при последнем запросе.  Если задан &#x60;page_token&#x60; и в запросе есть параметры &#x60;offset&#x60;, &#x60;page_number&#x60; и &#x60;page_size&#x60;, они игнорируются.  (optional)
     * @param limit Количество значений на одной странице.  (optional)
     * @return Список товаров, которые участвуют или могут участвовать в акции. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getPromoOffers",
        summary = "Получение списка товаров, которые участвуют или могут участвовать в акции",
        description = "Возвращает список товаров, которые участвуют или могут участвовать в акции.  {% note warning %}  В параметре `limit` не передавайте значение больше 500.  {% endnote %}  |**⚙️ Лимит:** 10000 запросов в час| |-| ",
        tags = { "promos", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список товаров, которые участвуют или могут участвовать в акции.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetPromoOffersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/promos/offers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetPromoOffersResponse> getPromoOffers(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetPromoOffersRequest", description = "", required = true) @Valid @RequestBody GetPromoOffersRequest getPromoOffersRequest,
        @Parameter(name = "page_token", description = "Идентификатор страницы c результатами.  Если параметр не указан, возвращается первая страница.  Рекомендуется передавать значение выходного параметра `nextPageToken`, полученное при последнем запросе.  Если задан `page_token` и в запросе есть параметры `offset`, `page_number` и `page_size`, они игнорируются. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page_token", required = false) String pageToken,
        @Parameter(name = "limit", description = "Количество значений на одной странице. ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"offers\" : [ { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 6, \"maxPromoPrice\" : 1, \"price\" : 0 }, \"promocodeParams\" : { \"maxPrice\" : 5 } }, \"status\" : \"AUTO\", \"autoParticipatingDetails\" : { \"campaignIds\" : [ 5, 5 ] } }, { \"offerId\" : \"offerId\", \"params\" : { \"discountParams\" : { \"promoPrice\" : 6, \"maxPromoPrice\" : 1, \"price\" : 0 }, \"promocodeParams\" : { \"maxPrice\" : 5 } }, \"status\" : \"AUTO\", \"autoParticipatingDetails\" : { \"campaignIds\" : [ 5, 5 ] } } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/promos : Получение списка акций
     * Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр &#x60;participation&#x60;.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getPromosRequest  (optional)
     * @return Список акций Маркета. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getPromos",
        summary = "Получение списка акций",
        description = "Возвращает информацию об акциях Маркета.  По умолчанию возвращаются акции, в которых продавец участвует или может принять участие.  Чтобы получить текущие или завершенные акции, передайте параметр `participation`.  Типы акций, которые возвращаются в ответе:  * прямая скидка; * флеш-акция; * скидка по промокоду.  |**⚙️ Лимит:** 1000 запросов в час| |-| ",
        tags = { "promos", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список акций Маркета.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetPromosResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/promos",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetPromosResponse> getPromos(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetPromosRequest", description = "") @Valid @RequestBody(required = false) GetPromosRequest getPromosRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"promos\" : [ { \"period\" : { \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\" }, \"channels\" : [ \"{}\", \"{}\" ], \"mechanicsInfo\" : { \"promocodeInfo\" : { \"promocode\" : \"promocode\", \"discount\" : 1 }, \"type\" : \"DIRECT_DISCOUNT\" }, \"bestsellerInfo\" : { \"bestseller\" : true, \"entryDeadline\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"participating\" : true, \"id\" : \"id\", \"constraints\" : { \"warehouseIds\" : [ 5, 5 ] }, \"assortmentInfo\" : { \"activeOffers\" : 0, \"processing\" : true, \"potentialOffers\" : 6 } }, { \"period\" : { \"dateTimeFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"dateTimeTo\" : \"2000-01-23T04:56:07.000+00:00\" }, \"channels\" : [ \"{}\", \"{}\" ], \"mechanicsInfo\" : { \"promocodeInfo\" : { \"promocode\" : \"promocode\", \"discount\" : 1 }, \"type\" : \"DIRECT_DISCOUNT\" }, \"bestsellerInfo\" : { \"bestseller\" : true, \"entryDeadline\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"participating\" : true, \"id\" : \"id\", \"constraints\" : { \"warehouseIds\" : [ 5, 5 ] }, \"assortmentInfo\" : { \"activeOffers\" : 0, \"processing\" : true, \"potentialOffers\" : 6 } } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/ratings/quality : Индекс качества магазинов
     * Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getQualityRatingRequest  (required)
     * @return Значение индекса качества магазинов и его составляющие. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getQualityRatings",
        summary = "Индекс качества магазинов",
        description = "Возвращает значение индекса качества магазинов и его составляющие.  Подробнее об индексе качества читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/quality/score/).  |**⚙️ Лимит:** 10000 запросов в час| |-| ",
        tags = { "ratings", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Значение индекса качества магазинов и его составляющие.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetQualityRatingResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/ratings/quality",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetQualityRatingResponse> getQualityRatings(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetQualityRatingRequest", description = "", required = true) @Valid @RequestBody GetQualityRatingRequest getQualityRatingRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"campaignRatings\" : [ { \"campaignId\" : 0, \"ratings\" : [ { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" }, { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" } ] }, { \"campaignId\" : 0, \"ratings\" : [ { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" }, { \"components\" : [ { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 }, { \"componentType\" : \"DBS_CANCELLATION_RATE\", \"value\" : 14.658129805029452 } ], \"rating\" : 60, \"calculationDate\" : \"2000-01-23\" } ] } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-mappings/suggestions : Просмотр карточек на Маркете, которые подходят вашим товарам
     * Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида &#x60;https://market.yandex.ru/product/&lt;marketModelId&gt;?sku&#x3D;&lt;marketSku&gt;&#x60;. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать &#x60;marketSKU&#x60;, который ему подходит по вашему мнению.  {% note info \&quot;𝓠 Как определить &#x60;marketSku&#x60; товара, найденного на Маркете?\&quot; %}  𝓐 Он есть в адресе страницы товара — расположен после &#x60;sku&#x3D;&#x60;.  Например, &#x60;https://market.yandex.ru/product--yandex-kniga/484830016?sku&#x3D;484830016&#x60;  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param getSuggestedOfferMappingsRequest  (optional)
     * @return Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getSuggestedOfferMappings",
        summary = "Просмотр карточек на Маркете, которые подходят вашим товарам",
        description = "Возвращает идентификаторы карточек на Маркете, которые соответствуют товарам с заданными параметрами.  Пользоваться этим запросом необязательно: он просто помогает заранее убедиться, что Маркет верно определяет карточки по предоставленным вами данным.  **Как пользоваться запросом**  1. Передайте Маркету список товаров, которые нужно проверить. 2. В ответ вы получите список SKU на Маркете с расшифровкой: названием, идентификатором модели, категорией. 3. Если расшифровки мало, вы можете открыть карточку. Для этого перейдите по ссылке вида `https://market.yandex.ru/product/<marketModelId>?sku=<marketSku>`. 4. Если карточка соответствует товару, значит его можно добавлять в каталог с теми данными, что вы указали. Если карточка определилась неправильно — проверьте данные о товаре. Возможно, их нужно уточнить или дополнить. Кроме того, на этапе добавления товара вы можете указать `marketSKU`, который ему подходит по вашему мнению.  {% note info \"𝓠 Как определить `marketSku` товара, найденного на Маркете?\" %}  𝓐 Он есть в адресе страницы товара — расположен после `sku=`.  Например, `https://market.yandex.ru/product--yandex-kniga/484830016?sku=484830016`  {% endnote %}  |**⚙️ Лимит:** 100 000 товаров в час| |-| ",
        tags = { "business-offer-mappings", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Подобранные карточки на Маркете.  По результатам проверки товара полученная через этот запрос карточка может быть заменена на другую. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSuggestedOfferMappingsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-mappings/suggestions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<GetSuggestedOfferMappingsResponse> getSuggestedOfferMappings(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "GetSuggestedOfferMappingsRequest", description = "") @Valid @RequestBody(required = false) GetSuggestedOfferMappingsRequest getSuggestedOfferMappingsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"offers\" : [ { \"offer\" : { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } }, { \"offer\" : { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /businesses/{businessId}/warehouses : Список складов и групп складов
     * Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @return Список складов и групп складов. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "getWarehouses",
        summary = "Список складов и групп складов",
        description = "Возвращает список складов и, если склады объединены, список групп складов. [Что такое группы складов и зачем они нужны](https://yandex.ru/support/marketplace/assortment/operations/stocks.html#unified-stocks)  Среди прочего запрос позволяет определить идентификатор, который нужно использовать при передаче остатков для группы складов.  |**⚙️ Лимит:** 100 запросов в минуту| |-| ",
        tags = { "warehouses", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список складов и групп складов.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetWarehousesResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/businesses/{businessId}/warehouses",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetWarehousesResponse> getWarehouses(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"warehouses\" : [ { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 }, { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } ], \"warehouseGroups\" : [ { \"name\" : \"name\", \"warehouses\" : [ { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 }, { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } ], \"mainWarehouse\" : { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } }, { \"name\" : \"name\", \"warehouses\" : [ { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 }, { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } ], \"mainWarehouse\" : { \"address\" : { \"number\" : \"number\", \"city\" : \"city\", \"street\" : \"street\", \"block\" : \"block\", \"gps\" : { \"latitude\" : 9.965781217890562, \"longitude\" : 9.369310271410669 }, \"building\" : \"building\" }, \"campaignId\" : 6, \"name\" : \"name\", \"express\" : true, \"id\" : 0 } } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /businesses/{businessId}/bids : Включение буста продаж и установка ставок
     * Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \&quot;Как в кабинете выглядит кампания, созданная через API\&quot; %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре &#x60;bid&#x60;.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \&quot;𝓠 Как посмотреть расходы на буст продаж?\&quot; %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле &#x60;bidFee&#x60;.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param putSkuBidsRequest description (required)
     * @return Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "putBidsForBusiness",
        summary = "Включение буста продаж и установка ставок",
        description = "Запускает буст продаж — создает и включает кампанию, добавляет в нее товары и назначает на них ставки.  {% cut \"Как в кабинете выглядит кампания, созданная через API\" %}  ![](../../_images/api-boost.png)  {% endcut %}  При первом использовании запроса Маркет: создаст единую на все магазины бизнес-аккаунта кампанию, добавит в нее товары с указанными ставками, включит для них ценовую стратегию и запустит продвижение. Повторное использование запроса позволит обновить ставки на товары в этой кампании или добавить новые. Подробнее о ценовой стратегии читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html#price-strategy).  Если товара с указанным SKU нет, он будет проигнорирован. Если в будущем в каталоге появится товар с таким SKU, он автоматически будет добавлен в кампанию с указанной ставкой.  Запрос всегда работает с одной и той же созданной через API кампанией. Если в кабинете удалить ее, при следующем выполнении запроса Маркет создаст новую. Другими кампаниями управлять через API не получится. У созданной через API кампании всегда наибольший приоритет над остальными — изменить его нельзя.  Выполнение запроса включает кампанию и ценовую стратегию, если они были отключены.  Внести другие изменения в созданную через API кампанию можно в кабинете:  * выключить или включить кампанию; * изменить ее название; * выключить или включить ценовую стратегию.  Чтобы остановить продвижение отдельных товаров и удалить их из кампании, передайте для них нулевую ставку в параметре `bid`.  Подробнее о том, как работает буст продаж, читайте в [Справке Маркета для продавцов](https://yandex.ru/support/marketplace/marketing/campaigns.html).  {% note info \"𝓠 Как посмотреть расходы на буст продаж?\" %}  𝓐 Фактические расходы на буст указаны в отчете по заказам ([POST campaigns/{campaignId}/stats/orders](../../reference/stats/getOrdersStats.md)). Сумма содержится в поле `bidFee`.  {% endnote %}  В одном запросе может быть максимум 1500 товаров.  |**⚙️ Лимит:** 1000 запросов в минуту| |-| ",
        tags = { "bids", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все получилось: ставки установлены или обновлены. Если нужно, добавлены новые товары и запущена кампания. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/businesses/{businessId}/bids",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EmptyApiResponse> putBidsForBusiness(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "PutSkuBidsRequest", description = "description", required = true) @Valid @RequestBody PutSkuBidsRequest putSkuBidsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/chats/file/send : Отправка файла в чат
     * Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param chatId Идентификатор чата. (required)
     * @param file Содержимое файла. Максимальный размер файла — 5 Мбайт. (required)
     * @return Пустой ответ. Означает, что файл отправлен. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "sendFileToChat",
        summary = "Отправка файла в чат",
        description = "Отправляет файл в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| ",
        tags = { "chats", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пустой ответ. Означает, что файл отправлен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/chats/file/send",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<EmptyApiResponse> sendFileToChat(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @NotNull @Parameter(name = "chatId", description = "Идентификатор чата.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "chatId", required = true) Long chatId,
        @Parameter(name = "file", description = "Содержимое файла. Максимальный размер файла — 5 Мбайт.", required = true) @RequestPart(value = "file", required = true) MultipartFile file
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/chats/message : Отправка сообщения в чат
     * Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param chatId Идентификатор чата. (required)
     * @param sendMessageToChatRequest description (required)
     * @return Пустой ответ. Означает, что сообщение отправлено. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "sendMessageToChat",
        summary = "Отправка сообщения в чат",
        description = "Отправляет сообщение в чат с покупателем.  |**⚙️ Лимит:** 1000 запросов в час| |-| ",
        tags = { "chats", "dbs", "fbs", "fby", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пустой ответ. Означает, что сообщение отправлено.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/chats/message",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EmptyApiResponse> sendMessageToChat(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @NotNull @Parameter(name = "chatId", description = "Идентификатор чата.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "chatId", required = true) Long chatId,
        @Parameter(name = "SendMessageToChatRequest", description = "description", required = true) @Valid @RequestBody SendMessageToChatRequest sendMessageToChatRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/goods-feedback/skip-reaction : Отказ от ответа на отзывы
     * Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param skipGoodsFeedbackReactionRequest  (required)
     * @return Пустой ответ. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "skipGoodsFeedbacksReaction",
        summary = "Отказ от ответа на отзывы",
        description = "Пропускает отзывы — они больше не будут возвращаться в методе получения всех отзывов [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md).  |**⚙️ Лимит:** 1 000 запросов в час| |-| ",
        tags = { "goods-feedback", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Пустой ответ.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/goods-feedback/skip-reaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EmptyApiResponse> skipGoodsFeedbacksReaction(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "SkipGoodsFeedbackReactionRequest", description = "", required = true) @Valid @RequestBody SkipGoodsFeedbackReactionRequest skipGoodsFeedbackReactionRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-prices/updates : Установка цен на товары во всех магазинах
     * Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateBusinessPricesRequest  (required)
     * @return Маркет принял информацию о новых ценах. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "updateBusinessPrices",
        summary = "Установка цен на товары во всех магазинах",
        description = "Устанавливает [базовые цены](*default-price). Чтобы получить рекомендации Маркета, касающиеся цен, выполните запрос [POST businesses/{businessId}/offers/recommendations](../../reference/business-assortment/getOfferRecommendations.md).  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| ",
        tags = { "prices", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Маркет принял информацию о новых ценах.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmptyApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-prices/updates",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EmptyApiResponse> updateBusinessPrices(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "UpdateBusinessPricesRequest", description = "", required = true) @Valid @RequestBody UpdateBusinessPricesRequest updateBusinessPricesRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/goods-feedback/comments/update : Добавление нового или изменение созданного комментария
     * Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва &#x60;feedbackId&#x60;.  Чтобы добавить комментарий к другому комментарию, передайте:  * &#x60;feedbackId&#x60; — идентификатор отзыва; * &#x60;comment.parentId&#x60; — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * &#x60;feedbackId&#x60;— идентификатор отзыва; * &#x60;comment.id&#x60; — идентификатор комментария, который нужно изменить.  Если передать одновременно &#x60;comment.parentId&#x60; и &#x60;comment.id&#x60;, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateGoodsFeedbackCommentRequest  (required)
     * @return Информация о добавленном или измененном комментарии. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "updateGoodsFeedbackComment",
        summary = "Добавление нового или изменение созданного комментария",
        description = "Добавляет новый комментарий магазина или изменяет комментарий, который магазин оставлял ранее.  Для создания комментария к отзыву передайте только идентификатор отзыва `feedbackId`.  Чтобы добавить комментарий к другому комментарию, передайте:  * `feedbackId` — идентификатор отзыва; * `comment.parentId` — идентификатор родительского комментария.  Чтобы изменить комментарий, передайте:  * `feedbackId`— идентификатор отзыва; * `comment.id` — идентификатор комментария, который нужно изменить.  Если передать одновременно `comment.parentId` и `comment.id`, будет изменен существующий комментарий.  |**⚙️ Лимит:** 1 000 запросов в час| |-| ",
        tags = { "goods-feedback", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Информация о добавленном или измененном комментарии.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateGoodsFeedbackCommentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/goods-feedback/comments/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateGoodsFeedbackCommentResponse> updateGoodsFeedbackComment(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "UpdateGoodsFeedbackCommentRequest", description = "", required = true) @Valid @RequestBody UpdateGoodsFeedbackCommentRequest updateGoodsFeedbackCommentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 0, \"text\" : \"text\", \"canModify\" : true, \"parentId\" : 6, \"status\" : \"PUBLISHED\" }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-cards/update : Редактирование категорийных характеристик товара
     * Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \&quot;Здесь только то, что относится к конкретной категории\&quot; %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateOfferContentRequest  (required)
     * @return Запрос выполнен корректно, данные обработаны.  {% note warning \&quot;Ответ 200 сам по себе не значит, что переданные значения корректны\&quot; %}  Обязательно посмотрите детали ответа: &#x60;status&#x60; и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в &#x60;status&#x60; вернулось &#x60;ERROR&#x60;, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля &#x60;errors&#x60; и &#x60;warnings&#x60;.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "updateOfferContent",
        summary = "Редактирование категорийных характеристик товара",
        description = "Редактирует характеристики товара, которые специфичны для категории, к которой он относится.  {% note warning \"Здесь только то, что относится к конкретной категории\" %}  Если вам нужно изменить основные параметры товара (название, описание, изображения, видео, производитель, штрихкод), воспользуйтесь запросом [POST businesses/{businessId}/offer-mappings/update](../../reference/business-assortment/updateOfferMappings.md).  {% endnote %}  Чтобы удалить характеристики, которые заданы в параметрах с типом `string`, передайте пустое значение.  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту| |-| ",
        tags = { "content", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Запрос выполнен корректно, данные обработаны.  {% note warning \"Ответ 200 сам по себе не значит, что переданные значения корректны\" %}  Обязательно посмотрите детали ответа: `status` и перечень ошибок, если он есть.  Даже если ошибка допущена в характеристиках всего одного товара, никакие изменения из запроса в каталог не попадут.  {% endnote %}  Если в `status` вернулось `ERROR`, убедитесь, что:  * все обязательные характеристики заполнены; * характеристики действительно существуют в указанных категориях; * значения соответствуют характеристикам; * ваши собственные значения имеют нужный тип данных.  Найти проблемы помогут поля `errors` и `warnings`. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateOfferContentResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-cards/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateOfferContentResponse> updateOfferContent(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "UpdateOfferContentRequest", description = "", required = true) @Valid @RequestBody UpdateOfferContentRequest updateOfferContentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ] }, { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"OFFER_NOT_FOUND\", \"message\" : \"message\" } ] } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/offer-mappings/update : Добавление товаров в каталог и изменение информации о них
     * Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле &#x60;marketSKU&#x60;.  Для **новых товаров** обязательно укажите параметры: &#x60;offerId&#x60;, &#x60;name&#x60;, &#x60;marketCategoryId&#x60; или &#x60;category&#x60;, &#x60;pictures&#x60;, &#x60;vendor&#x60;, &#x60;description&#x60;.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в &#x60;offerId&#x60; соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом &#x60;string&#x60;, передайте пустое значение.  Параметр &#x60;offerId&#x60; должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \&quot;Правила использования SKU\&quot; %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \&quot;Данные в каталоге обновляются не мгновенно\&quot; %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updateOfferMappingsRequest  (required)
     * @return Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге.  (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or К ресурсу нельзя применить указанный метод. (status code 423)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "updateOfferMappings",
        summary = "Добавление товаров в каталог и изменение информации о них",
        description = "Добавляет товары в каталог, передает их категории на Маркете и характеристики, необходимые для этих категории. Также редактирует информацию об уже имеющихся товарах.  Список категорий Маркета можно получить с помощью запроса [POST categories/tree](../../reference/categories/getCategoriesTree.md), а характеристики товаров по категориям с помощью [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md).  Чтобы **добавить новый товар**, передайте его с новым идентификатором, который раньше никогда не использовался в каталоге. Старайтесь сразу передать как можно больше информации — она потребуется Маркету для подбора подходящей карточки или создания новой. Если известно, какой карточке на Маркете соответствует товар, можно сразу указать идентификатор этой карточки (**SKU на Маркете**) в поле `marketSKU`.  Для **новых товаров** обязательно укажите параметры: `offerId`, `name`, `marketCategoryId` или `category`, `pictures`, `vendor`, `description`.  Чтобы **отредактировать информацию о товаре**, передайте новые данные, указав в `offerId` соответствующий **ваш SKU**. Поля, в которых ничего не меняется, можно не передавать.  Чтобы **удалить характеристики**, которые заданы в параметрах с типом `string`, передайте пустое значение.  Параметр `offerId` должен быть **уникальным** для всех товаров, которые вы передаете.  {% note warning \"Правила использования SKU\" %}  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  {% endnote %}  {% note info \"Данные в каталоге обновляются не мгновенно\" %}  Это занимает до нескольких минут.  {% endnote %}  |**⚙️ Лимит:** 5000 товаров в минуту, не более 500 товаров в одном запросе| |-| ",
        tags = { "business-offer-mappings", "dbs", "fby", "fbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Все обязательные поля товаров заполнены, поэтому новые товары и внесенные изменения сохранены в каталоге. ", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateOfferMappingsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "423", description = "К ресурсу нельзя применить указанный метод.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLockedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/offer-mappings/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateOfferMappingsResponse> updateOfferMappings(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "UpdateOfferMappingsRequest", description = "", required = true) @Valid @RequestBody UpdateOfferMappingsRequest updateOfferMappingsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ] }, { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ] } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /businesses/{businessId}/promos/offers/update : Добавление товаров в акцию или изменение их цен
     * Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| 
     *
     * @param businessId Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html)  (required)
     * @param updatePromoOffersRequest  (required)
     * @return Результат добавления товаров в акцию или обновления их цен. (status code 200)
     *         or Запрос содержит неправильные данные. (status code 400)
     *         or В запросе не указаны данные для авторизации. (status code 401)
     *         or Данные для авторизации неверны или доступ к ресурсу запрещен. (status code 403)
     *         or Запрашиваемый ресурс не найден. (status code 404)
     *         or Превышено ограничение на доступ к ресурсу. (status code 420)
     *         or Внутренняя ошибка сервера. (status code 500)
     */
    @Operation(
        operationId = "updatePromoOffers",
        summary = "Добавление товаров в акцию или изменение их цен",
        description = "Добавляет товары в акцию или изменяет цены на товары, которые участвуют в акции.  Изменения начинают действовать в течение 4–6 часов.  |**⚙️ Лимит:** 10000 запросов в час| |-| ",
        tags = { "promos", "fby", "fbs", "dbs", "express" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Результат добавления товаров в акцию или обновления их цен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdatePromoOffersResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Запрос содержит неправильные данные.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiClientDataErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "В запросе не указаны данные для авторизации.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiUnauthorizedErrorResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Данные для авторизации неверны или доступ к ресурсу запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiForbiddenErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Запрашиваемый ресурс не найден.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiNotFoundErrorResponse.class))
            }),
            @ApiResponse(responseCode = "420", description = "Превышено ограничение на доступ к ресурсу.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiLimitErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ApiServerErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth", scopes={ "market:partner-api" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/businesses/{businessId}/promos/offers/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdatePromoOffersResponse> updatePromoOffers(
        @Parameter(name = "businessId", description = "Идентификатор кабинета. Чтобы узнать идентификатор, воспользуйтесь запросом [GET campaigns](../../reference/campaigns/getCampaigns.md#businessdto).  ℹ️ [Что такое кабинет и магазин на Маркете](https://yandex.ru/support/marketplace/account/introduction.html) ", required = true, in = ParameterIn.PATH) @PathVariable("businessId") Long businessId,
        @Parameter(name = "UpdatePromoOffersRequest", description = "", required = true) @Valid @RequestBody UpdatePromoOffersRequest updatePromoOffersRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : { \"rejectedOffers\" : [ { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" }, { \"reason\" : \"OFFER_DOES_NOT_EXIST\", \"offerId\" : \"offerId\" } ], \"warningOffers\" : [ { \"warnings\" : [ { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] }, { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] } ], \"offerId\" : \"offerId\" }, { \"warnings\" : [ { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] }, { \"code\" : \"DEEP_DISCOUNT_OFFER\", \"campaignIds\" : [ 0, 0 ] } ], \"offerId\" : \"offerId\" } ] }, \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
