/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.Date;
import org.openapitools.server.model.FeedIndexLogsErrorDTO;
import org.openapitools.server.model.FeedIndexLogsIndexType;
import org.openapitools.server.model.FeedIndexLogsOffersDTO;
import org.openapitools.server.model.FeedIndexLogsStatusType;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Список отчетов по индексации прайс-листа.
  */

public class FeedIndexLogsRecordDTO  {
  
 /**
  * Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
  */
  @JsonbProperty("downloadTime")
  private Date downloadTime;

 /**
  * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
  */
  @JsonbProperty("fileTime")
  private Date fileTime;

 /**
  * Идентификатор индексации.
  */
  @JsonbProperty("generationId")
  private Long generationId;

  @JsonbProperty("indexType")
  private FeedIndexLogsIndexType indexType;

 /**
  * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:42:42+03:00`. 
  */
  @JsonbProperty("publishedTime")
  private Date publishedTime;

  @JsonbProperty("status")
  private FeedIndexLogsStatusType status;

  @JsonbProperty("error")
  private FeedIndexLogsErrorDTO error;

  @JsonbProperty("offers")
  private FeedIndexLogsOffersDTO offers;

  /**
   * Дата и время загрузки прайс-листа.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
   * @return downloadTime
   **/
  public Date getDownloadTime() {
    return downloadTime;
  }

  /**
   * Set downloadTime
   */
  public void setDownloadTime(Date downloadTime) {
    this.downloadTime = downloadTime;
  }

  public FeedIndexLogsRecordDTO downloadTime(Date downloadTime) {
    this.downloadTime = downloadTime;
    return this;
  }

  /**
   * Дата и время, которые магазин указал в прайс-листе.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
   * @return fileTime
   **/
  public Date getFileTime() {
    return fileTime;
  }

  /**
   * Set fileTime
   */
  public void setFileTime(Date fileTime) {
    this.fileTime = fileTime;
  }

  public FeedIndexLogsRecordDTO fileTime(Date fileTime) {
    this.fileTime = fileTime;
    return this;
  }

  /**
   * Идентификатор индексации.
   * @return generationId
   **/
  public Long getGenerationId() {
    return generationId;
  }

  /**
   * Set generationId
   */
  public void setGenerationId(Long generationId) {
    this.generationId = generationId;
  }

  public FeedIndexLogsRecordDTO generationId(Long generationId) {
    this.generationId = generationId;
    return this;
  }

  /**
   * Get indexType
   * @return indexType
   **/
  public FeedIndexLogsIndexType getIndexType() {
    return indexType;
  }

  /**
   * Set indexType
   */
  public void setIndexType(FeedIndexLogsIndexType indexType) {
    this.indexType = indexType;
  }

  public FeedIndexLogsRecordDTO indexType(FeedIndexLogsIndexType indexType) {
    this.indexType = indexType;
    return this;
  }

  /**
   * Дата и время публикации предложений из прайс-листа на Яндекс Маркете.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:42:42+03:00&#x60;. 
   * @return publishedTime
   **/
  public Date getPublishedTime() {
    return publishedTime;
  }

  /**
   * Set publishedTime
   */
  public void setPublishedTime(Date publishedTime) {
    this.publishedTime = publishedTime;
  }

  public FeedIndexLogsRecordDTO publishedTime(Date publishedTime) {
    this.publishedTime = publishedTime;
    return this;
  }

  /**
   * Get status
   * @return status
   **/
  public FeedIndexLogsStatusType getStatus() {
    return status;
  }

  /**
   * Set status
   */
  public void setStatus(FeedIndexLogsStatusType status) {
    this.status = status;
  }

  public FeedIndexLogsRecordDTO status(FeedIndexLogsStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get error
   * @return error
   **/
  public FeedIndexLogsErrorDTO getError() {
    return error;
  }

  /**
   * Set error
   */
  public void setError(FeedIndexLogsErrorDTO error) {
    this.error = error;
  }

  public FeedIndexLogsRecordDTO error(FeedIndexLogsErrorDTO error) {
    this.error = error;
    return this;
  }

  /**
   * Get offers
   * @return offers
   **/
  public FeedIndexLogsOffersDTO getOffers() {
    return offers;
  }

  /**
   * Set offers
   */
  public void setOffers(FeedIndexLogsOffersDTO offers) {
    this.offers = offers;
  }

  public FeedIndexLogsRecordDTO offers(FeedIndexLogsOffersDTO offers) {
    this.offers = offers;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedIndexLogsRecordDTO {\n");
    
    sb.append("    downloadTime: ").append(toIndentedString(downloadTime)).append("\n");
    sb.append("    fileTime: ").append(toIndentedString(fileTime)).append("\n");
    sb.append("    generationId: ").append(toIndentedString(generationId)).append("\n");
    sb.append("    indexType: ").append(toIndentedString(indexType)).append("\n");
    sb.append("    publishedTime: ").append(toIndentedString(publishedTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

