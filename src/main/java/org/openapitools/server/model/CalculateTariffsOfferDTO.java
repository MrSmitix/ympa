/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.math.BigDecimal;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Параметры товара, для которого нужно рассчитать стоимость услуг.
  */

public class CalculateTariffsOfferDTO  {
  
 /**
  * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
  */
  @JsonbProperty("categoryId")
  private Long categoryId;

 /**
  * Цена на товар в рублях.
  */
  @JsonbProperty("price")
  private BigDecimal price;

 /**
  * Длина товара в сантиметрах.
  */
  @JsonbProperty("length")
  private BigDecimal length;

 /**
  * Ширина товара в сантиметрах.
  */
  @JsonbProperty("width")
  private BigDecimal width;

 /**
  * Высота товара в сантиметрах.
  */
  @JsonbProperty("height")
  private BigDecimal height;

 /**
  * Вес товара в килограммах.
  */
  @JsonbProperty("weight")
  private BigDecimal weight;

 /**
  * Квант продажи — количество единиц товара в одном товарном предложении.
  */
  @JsonbProperty("quantity")
  private Integer quantity = 1;

  /**
   * Идентификатор категории товара на Маркете.  Для расчета стоимости услуг необходимо указать идентификатор листовой категории товара — той, которая не имеет дочерних категорий.  Чтобы узнать идентификатор категории, к которой относится товар, воспользуйтесь запросом [POST categories/tree](../../reference/categories/getCategoriesTree.md). 
   * minimum: 0
   * @return categoryId
   **/
  public Long getCategoryId() {
    return categoryId;
  }

  /**
   * Set categoryId
   */
  public void setCategoryId(Long categoryId) {
    this.categoryId = categoryId;
  }

  public CalculateTariffsOfferDTO categoryId(Long categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Цена на товар в рублях.
   * minimum: 0
   * @return price
   **/
  public BigDecimal getPrice() {
    return price;
  }

  /**
   * Set price
   */
  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  public CalculateTariffsOfferDTO price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Длина товара в сантиметрах.
   * minimum: 0
   * @return length
   **/
  public BigDecimal getLength() {
    return length;
  }

  /**
   * Set length
   */
  public void setLength(BigDecimal length) {
    this.length = length;
  }

  public CalculateTariffsOfferDTO length(BigDecimal length) {
    this.length = length;
    return this;
  }

  /**
   * Ширина товара в сантиметрах.
   * minimum: 0
   * @return width
   **/
  public BigDecimal getWidth() {
    return width;
  }

  /**
   * Set width
   */
  public void setWidth(BigDecimal width) {
    this.width = width;
  }

  public CalculateTariffsOfferDTO width(BigDecimal width) {
    this.width = width;
    return this;
  }

  /**
   * Высота товара в сантиметрах.
   * minimum: 0
   * @return height
   **/
  public BigDecimal getHeight() {
    return height;
  }

  /**
   * Set height
   */
  public void setHeight(BigDecimal height) {
    this.height = height;
  }

  public CalculateTariffsOfferDTO height(BigDecimal height) {
    this.height = height;
    return this;
  }

  /**
   * Вес товара в килограммах.
   * minimum: 0
   * @return weight
   **/
  public BigDecimal getWeight() {
    return weight;
  }

  /**
   * Set weight
   */
  public void setWeight(BigDecimal weight) {
    this.weight = weight;
  }

  public CalculateTariffsOfferDTO weight(BigDecimal weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Квант продажи — количество единиц товара в одном товарном предложении.
   * minimum: 1
   * @return quantity
   **/
  public Integer getQuantity() {
    return quantity;
  }

  /**
   * Set quantity
   */
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public CalculateTariffsOfferDTO quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTariffsOfferDTO {\n");
    
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

