/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.Date;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Ключ цифрового товара.
  */

public class OrderDigitalItemDTO  {
  
 /**
  * Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр `id` в `items`. 
  */
  @JsonbProperty("id")
  private Long id;

 /**
  * Сам ключ.
  */
  @JsonbProperty("code")
  private String code;

 /**
  * Инструкция по активации.
  */
  @JsonbProperty("slip")
  private String slip;

 /**
  * Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: `ГГГГ-ММ-ДД`. 
  */
  @JsonbProperty("activate_till")
  private Date activateTill;

  /**
   * Идентификатор товара в заказе.  Он приходит в ответе на запрос [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md) и в запросе Маркета [POST order/accept](../../pushapi/reference/orderAccept.md) — параметр &#x60;id&#x60; в &#x60;items&#x60;. 
   * @return id
   **/
  public Long getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(Long id) {
    this.id = id;
  }

  public OrderDigitalItemDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Сам ключ.
   * @return code
   **/
  public String getCode() {
    return code;
  }

  /**
   * Set code
   */
  public void setCode(String code) {
    this.code = code;
  }

  public OrderDigitalItemDTO code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Инструкция по активации.
   * @return slip
   **/
  public String getSlip() {
    return slip;
  }

  /**
   * Set slip
   */
  public void setSlip(String slip) {
    this.slip = slip;
  }

  public OrderDigitalItemDTO slip(String slip) {
    this.slip = slip;
    return this;
  }

  /**
   * Дата, до которой нужно активировать ключ. Если ключ действует бессрочно, укажите любую дату в отдаленном будущем.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
   * @return activateTill
   **/
  public Date getActivateTill() {
    return activateTill;
  }

  /**
   * Set activateTill
   */
  public void setActivateTill(Date activateTill) {
    this.activateTill = activateTill;
  }

  public OrderDigitalItemDTO activateTill(Date activateTill) {
    this.activateTill = activateTill;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderDigitalItemDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    slip: ").append(toIndentedString(slip)).append("\n");
    sb.append("    activateTill: ").append(toIndentedString(activateTill)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

