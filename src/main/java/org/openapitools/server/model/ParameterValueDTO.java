/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Значение характеристики.  Вы можете указывать несколько значений одной характеристики при условии, что:  * Тип характеристики — `ENUM`. * В ответе на запрос [POST category/{categoryId}/parameters](../../reference/content/getCategoryContentParameters.md) у данной характеристики поле `multivalue` имеет значение `true`.  Для этого в `parameterValues` передавайте каждое значение отдельно — несколько объектов с параметрами `parameterId`, `valueId` и `value`. Параметр `parameterId` должен быть одинаковым. 
  */

public class ParameterValueDTO  {
  
 /**
  * Идентификатор характеристики.
  */
  @JsonbProperty("parameterId")
  private Long parameterId;

 /**
  * Идентификатор единицы измерения. Если вы не передали параметр `unitId`, используется единица измерения по умолчанию.
  */
  @JsonbProperty("unitId")
  private Long unitId;

 /**
  * Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа `ENUM`. 
  */
  @JsonbProperty("valueId")
  private Long valueId;

 /**
  * Значение.
  */
  @JsonbProperty("value")
  private String value;

  /**
   * Идентификатор характеристики.
   * @return parameterId
   **/
  public Long getParameterId() {
    return parameterId;
  }

  /**
   * Set parameterId
   */
  public void setParameterId(Long parameterId) {
    this.parameterId = parameterId;
  }

  public ParameterValueDTO parameterId(Long parameterId) {
    this.parameterId = parameterId;
    return this;
  }

  /**
   * Идентификатор единицы измерения. Если вы не передали параметр &#x60;unitId&#x60;, используется единица измерения по умолчанию.
   * @return unitId
   **/
  public Long getUnitId() {
    return unitId;
  }

  /**
   * Set unitId
   */
  public void setUnitId(Long unitId) {
    this.unitId = unitId;
  }

  public ParameterValueDTO unitId(Long unitId) {
    this.unitId = unitId;
    return this;
  }

  /**
   * Идентификатор значения.  Обязательно указывайте идентификатор, если передаете значение из перечня допустимых значений, полученного от Маркета.  Только для характеристик типа &#x60;ENUM&#x60;. 
   * @return valueId
   **/
  public Long getValueId() {
    return valueId;
  }

  /**
   * Set valueId
   */
  public void setValueId(Long valueId) {
    this.valueId = valueId;
  }

  public ParameterValueDTO valueId(Long valueId) {
    this.valueId = valueId;
    return this;
  }

  /**
   * Значение.
   * @return value
   **/
  public String getValue() {
    return value;
  }

  /**
   * Set value
   */
  public void setValue(String value) {
    this.value = value;
  }

  public ParameterValueDTO value(String value) {
    this.value = value;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterValueDTO {\n");
    
    sb.append("    parameterId: ").append(toIndentedString(parameterId)).append("\n");
    sb.append("    unitId: ").append(toIndentedString(unitId)).append("\n");
    sb.append("    valueId: ").append(toIndentedString(valueId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

