/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Адрес точки продаж. 
  */

public class OutletAddressDTO  {
  
 /**
  * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов `TOWN` (город), `CITY` (крупный город) и `REPUBLIC_AREA` (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
  */
  @JsonbProperty("regionId")
  private Long regionId;

 /**
  * Улица.
  */
  @JsonbProperty("street")
  private String street;

 /**
  * Номер дома.
  */
  @JsonbProperty("number")
  private String number;

 /**
  * Номер строения.
  */
  @JsonbProperty("building")
  private String building;

 /**
  * Номер владения.
  */
  @JsonbProperty("estate")
  private String estate;

 /**
  * Номер корпуса.
  */
  @JsonbProperty("block")
  private String block;

 /**
  * Дополнительная информация.
  */
  @JsonbProperty("additional")
  private String additional;

 /**
  * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
  */
  @JsonbProperty("km")
  private Integer km;

 /**
  * {% note warning \"\" %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре `regionId`.  {% endnote %} 
  */
  @JsonbProperty("city")
  private String city;

  /**
   * Идентификатор региона.  Идентификатор можно получить c помощью запроса [GET regions](../../reference/regions/searchRegionsByName.md).  {% note alert %}  При создании и редактировании точек продаж можно указывать только регионы типов &#x60;TOWN&#x60; (город), &#x60;CITY&#x60; (крупный город) и &#x60;REPUBLIC_AREA&#x60; (район субъекта федерации). Тип региона указан в выходных параметрах type запросов [GET regions](../../reference/regions/searchRegionsByName.md) и [GET regions/{regionId}](../../reference/regions/searchRegionsById.md).  {% endnote %} 
   * @return regionId
   **/
  public Long getRegionId() {
    return regionId;
  }

  /**
   * Set regionId
   */
  public void setRegionId(Long regionId) {
    this.regionId = regionId;
  }

  public OutletAddressDTO regionId(Long regionId) {
    this.regionId = regionId;
    return this;
  }

  /**
   * Улица.
   * @return street
   **/
  public String getStreet() {
    return street;
  }

  /**
   * Set street
   */
  public void setStreet(String street) {
    this.street = street;
  }

  public OutletAddressDTO street(String street) {
    this.street = street;
    return this;
  }

  /**
   * Номер дома.
   * @return number
   **/
  public String getNumber() {
    return number;
  }

  /**
   * Set number
   */
  public void setNumber(String number) {
    this.number = number;
  }

  public OutletAddressDTO number(String number) {
    this.number = number;
    return this;
  }

  /**
   * Номер строения.
   * @return building
   **/
  public String getBuilding() {
    return building;
  }

  /**
   * Set building
   */
  public void setBuilding(String building) {
    this.building = building;
  }

  public OutletAddressDTO building(String building) {
    this.building = building;
    return this;
  }

  /**
   * Номер владения.
   * @return estate
   **/
  public String getEstate() {
    return estate;
  }

  /**
   * Set estate
   */
  public void setEstate(String estate) {
    this.estate = estate;
  }

  public OutletAddressDTO estate(String estate) {
    this.estate = estate;
    return this;
  }

  /**
   * Номер корпуса.
   * @return block
   **/
  public String getBlock() {
    return block;
  }

  /**
   * Set block
   */
  public void setBlock(String block) {
    this.block = block;
  }

  public OutletAddressDTO block(String block) {
    this.block = block;
    return this;
  }

  /**
   * Дополнительная информация.
   * @return additional
   **/
  public String getAdditional() {
    return additional;
  }

  /**
   * Set additional
   */
  public void setAdditional(String additional) {
    this.additional = additional;
  }

  public OutletAddressDTO additional(String additional) {
    this.additional = additional;
    return this;
  }

  /**
   * Порядковый номер километра дороги, на котором располагается точка продаж, если отсутствует улица.
   * @return km
   **/
  public Integer getKm() {
    return km;
  }

  /**
   * Set km
   */
  public void setKm(Integer km) {
    this.km = km;
  }

  public OutletAddressDTO km(Integer km) {
    this.km = km;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его. Город или населенный пункт возвращается в параметре &#x60;regionId&#x60;.  {% endnote %} 
   * @return city
   **/
  public String getCity() {
    return city;
  }

  /**
   * Set city
   */
  public void setCity(String city) {
    this.city = city;
  }

  public OutletAddressDTO city(String city) {
    this.city = city;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutletAddressDTO {\n");
    
    sb.append("    regionId: ").append(toIndentedString(regionId)).append("\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    building: ").append(toIndentedString(building)).append("\n");
    sb.append("    estate: ").append(toIndentedString(estate)).append("\n");
    sb.append("    block: ").append(toIndentedString(block)).append("\n");
    sb.append("    additional: ").append(toIndentedString(additional)).append("\n");
    sb.append("    km: ").append(toIndentedString(km)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

