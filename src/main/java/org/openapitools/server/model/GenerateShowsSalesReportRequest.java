/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.Date;
import org.openapitools.server.model.ShowsSalesGroupingType;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Данные, необходимые для генерации отчета.
  */

public class GenerateShowsSalesReportRequest  {
  
 /**
  * Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. 
  */
  @JsonbProperty("businessId")
  private Long businessId;

 /**
  * Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо `businessID`, либо `campaignId`, но не оба сразу. 
  */
  @JsonbProperty("campaignId")
  private Long campaignId;

 /**
  * Начало периода, включительно.
  */
  @JsonbProperty("dateFrom")
  private Date dateFrom;

 /**
  * Конец периода, включительно.
  */
  @JsonbProperty("dateTo")
  private Date dateTo;

  @JsonbProperty("grouping")
  private ShowsSalesGroupingType grouping;

  /**
   * Идентификатор бизнеса.  Указывается, если нужно составить отчет по всем магазинам бизнеса. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
   * @return businessId
   **/
  public Long getBusinessId() {
    return businessId;
  }

  /**
   * Set businessId
   */
  public void setBusinessId(Long businessId) {
    this.businessId = businessId;
  }

  public GenerateShowsSalesReportRequest businessId(Long businessId) {
    this.businessId = businessId;
    return this;
  }

  /**
   * Идентификатор кампании.  Указывается, если нужно составить отчет по конкретному магазину. В запросе обязательно должен быть либо &#x60;businessID&#x60;, либо &#x60;campaignId&#x60;, но не оба сразу. 
   * @return campaignId
   **/
  public Long getCampaignId() {
    return campaignId;
  }

  /**
   * Set campaignId
   */
  public void setCampaignId(Long campaignId) {
    this.campaignId = campaignId;
  }

  public GenerateShowsSalesReportRequest campaignId(Long campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * Начало периода, включительно.
   * @return dateFrom
   **/
  public Date getDateFrom() {
    return dateFrom;
  }

  /**
   * Set dateFrom
   */
  public void setDateFrom(Date dateFrom) {
    this.dateFrom = dateFrom;
  }

  public GenerateShowsSalesReportRequest dateFrom(Date dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

  /**
   * Конец периода, включительно.
   * @return dateTo
   **/
  public Date getDateTo() {
    return dateTo;
  }

  /**
   * Set dateTo
   */
  public void setDateTo(Date dateTo) {
    this.dateTo = dateTo;
  }

  public GenerateShowsSalesReportRequest dateTo(Date dateTo) {
    this.dateTo = dateTo;
    return this;
  }

  /**
   * Get grouping
   * @return grouping
   **/
  public ShowsSalesGroupingType getGrouping() {
    return grouping;
  }

  /**
   * Set grouping
   */
  public void setGrouping(ShowsSalesGroupingType grouping) {
    this.grouping = grouping;
  }

  public GenerateShowsSalesReportRequest grouping(ShowsSalesGroupingType grouping) {
    this.grouping = grouping;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateShowsSalesReportRequest {\n");
    
    sb.append("    businessId: ").append(toIndentedString(businessId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    grouping: ").append(toIndentedString(grouping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

