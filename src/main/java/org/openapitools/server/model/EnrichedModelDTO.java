/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.server.model.ModelOfferDTO;
import org.openapitools.server.model.ModelPriceDTO;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Модель товара.
  */

public class EnrichedModelDTO  {
  
 /**
  * Идентификатор модели товара.
  */
  @JsonbProperty("id")
  private Long id;

 /**
  * Название модели товара.
  */
  @JsonbProperty("name")
  private String name;

  @JsonbProperty("prices")
  private ModelPriceDTO prices;

 /**
  * Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
  */
  @JsonbProperty("offers")
  private List<ModelOfferDTO> offers = null;

 /**
  * Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
  */
  @JsonbProperty("offlineOffers")
  private Integer offlineOffers;

 /**
  * Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
  */
  @JsonbProperty("onlineOffers")
  private Integer onlineOffers;

  /**
   * Идентификатор модели товара.
   * @return id
   **/
  public Long getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(Long id) {
    this.id = id;
  }

  public EnrichedModelDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Название модели товара.
   * @return name
   **/
  public String getName() {
    return name;
  }

  /**
   * Set name
   */
  public void setName(String name) {
    this.name = name;
  }

  public EnrichedModelDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get prices
   * @return prices
   **/
  public ModelPriceDTO getPrices() {
    return prices;
  }

  /**
   * Set prices
   */
  public void setPrices(ModelPriceDTO prices) {
    this.prices = prices;
  }

  public EnrichedModelDTO prices(ModelPriceDTO prices) {
    this.prices = prices;
    return this;
  }

  /**
   * Список первых десяти предложений, расположенных на карточке модели.  В ответе на запрос возвращаются предложения различных магазинов. Если есть несколько предложений от одного магазина, в ответе отображается только одно, наиболее релевантное из них. 
   * @return offers
   **/
  public List<ModelOfferDTO> getOffers() {
    return offers;
  }

  /**
   * Set offers
   */
  public void setOffers(List<ModelOfferDTO> offers) {
    this.offers = offers;
  }

  public EnrichedModelDTO offers(List<ModelOfferDTO> offers) {
    this.offers = offers;
    return this;
  }

  public EnrichedModelDTO addOffersItem(ModelOfferDTO offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * Суммарное количество предложений в розничных магазинах в регионе. Учитываются все предложения от каждого магазина.
   * @return offlineOffers
   **/
  public Integer getOfflineOffers() {
    return offlineOffers;
  }

  /**
   * Set offlineOffers
   */
  public void setOfflineOffers(Integer offlineOffers) {
    this.offlineOffers = offlineOffers;
  }

  public EnrichedModelDTO offlineOffers(Integer offlineOffers) {
    this.offlineOffers = offlineOffers;
    return this;
  }

  /**
   * Суммарное количество предложений в интернет-магазинах в регионе. Учитываются все предложения от каждого магазина.
   * @return onlineOffers
   **/
  public Integer getOnlineOffers() {
    return onlineOffers;
  }

  /**
   * Set onlineOffers
   */
  public void setOnlineOffers(Integer onlineOffers) {
    this.onlineOffers = onlineOffers;
  }

  public EnrichedModelDTO onlineOffers(Integer onlineOffers) {
    this.onlineOffers = onlineOffers;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrichedModelDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    offlineOffers: ").append(toIndentedString(offlineOffers)).append("\n");
    sb.append("    onlineOffers: ").append(toIndentedString(onlineOffers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

