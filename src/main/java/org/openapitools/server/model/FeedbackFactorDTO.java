/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Информация об оценках по параметрам, указанных в отзыве.  При создании отзыва автору предлагается поставить оценки магазину по нескольким параметрам: например, за скорость обработки заказа или удобство самовывоза. Набор параметров зависит от того, какой способ покупки (параметр `delivery`) указал автор. 
  */

public class FeedbackFactorDTO  {
  
 /**
  * Идентификатор параметра.
  */
  @JsonbProperty("id")
  private Long id;

 /**
  * Название параметра. Например, `Скорость обработки заказа`.
  */
  @JsonbProperty("title")
  private String title;

 /**
  * Описание параметра. Например, `Как быстро с вами связались для подтверждения заказа?`.
  */
  @JsonbProperty("description")
  private String description;

 /**
  * Оценка по параметру, указанная в отзыве: от `1` (низшая оценка) до `5` (высшая оценка). 
  */
  @JsonbProperty("value")
  private Integer value;

  /**
   * Идентификатор параметра.
   * @return id
   **/
  public Long getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(Long id) {
    this.id = id;
  }

  public FeedbackFactorDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Название параметра. Например, &#x60;Скорость обработки заказа&#x60;.
   * @return title
   **/
  public String getTitle() {
    return title;
  }

  /**
   * Set title
   */
  public void setTitle(String title) {
    this.title = title;
  }

  public FeedbackFactorDTO title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Описание параметра. Например, &#x60;Как быстро с вами связались для подтверждения заказа?&#x60;.
   * @return description
   **/
  public String getDescription() {
    return description;
  }

  /**
   * Set description
   */
  public void setDescription(String description) {
    this.description = description;
  }

  public FeedbackFactorDTO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Оценка по параметру, указанная в отзыве: от &#x60;1&#x60; (низшая оценка) до &#x60;5&#x60; (высшая оценка). 
   * @return value
   **/
  public Integer getValue() {
    return value;
  }

  /**
   * Set value
   */
  public void setValue(Integer value) {
    this.value = value;
  }

  public FeedbackFactorDTO value(Integer value) {
    this.value = value;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedbackFactorDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

