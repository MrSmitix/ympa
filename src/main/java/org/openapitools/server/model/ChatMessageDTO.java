/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.server.model.ChatMessagePayloadDTO;
import org.openapitools.server.model.ChatMessageSenderType;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Информация о сообщениях.
  */

public class ChatMessageDTO  {
  
 /**
  * Идентификатор сообщения.
  */
  @JsonbProperty("messageId")
  private Long messageId;

 /**
  * Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00+03:00`. 
  */
  @JsonbProperty("createdAt")
  private Date createdAt;

  @JsonbProperty("sender")
  private ChatMessageSenderType sender;

 /**
  * Текст сообщения.  Необязательный параметр, если возвращается параметр `payload`. 
  */
  @JsonbProperty("message")
  private String message;

 /**
  * Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр `message`. 
  */
  @JsonbProperty("payload")
  private List<ChatMessagePayloadDTO> payload = null;

  /**
   * Идентификатор сообщения.
   * @return messageId
   **/
  public Long getMessageId() {
    return messageId;
  }

  /**
   * Set messageId
   */
  public void setMessageId(Long messageId) {
    this.messageId = messageId;
  }

  public ChatMessageDTO messageId(Long messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Дата и время создания сообщения.  Формат даты: ISO 8601 со смещением относительно UTC. Например, &#x60;2017-11-21T00:00:00+03:00&#x60;. 
   * @return createdAt
   **/
  public Date getCreatedAt() {
    return createdAt;
  }

  /**
   * Set createdAt
   */
  public void setCreatedAt(Date createdAt) {
    this.createdAt = createdAt;
  }

  public ChatMessageDTO createdAt(Date createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get sender
   * @return sender
   **/
  public ChatMessageSenderType getSender() {
    return sender;
  }

  /**
   * Set sender
   */
  public void setSender(ChatMessageSenderType sender) {
    this.sender = sender;
  }

  public ChatMessageDTO sender(ChatMessageSenderType sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Текст сообщения.  Необязательный параметр, если возвращается параметр &#x60;payload&#x60;. 
   * @return message
   **/
  public String getMessage() {
    return message;
  }

  /**
   * Set message
   */
  public void setMessage(String message) {
    this.message = message;
  }

  public ChatMessageDTO message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Информация о приложенных к сообщению файлах.  Необязательный параметр, если возвращается параметр &#x60;message&#x60;. 
   * @return payload
   **/
  public List<ChatMessagePayloadDTO> getPayload() {
    return payload;
  }

  /**
   * Set payload
   */
  public void setPayload(List<ChatMessagePayloadDTO> payload) {
    this.payload = payload;
  }

  public ChatMessageDTO payload(List<ChatMessagePayloadDTO> payload) {
    this.payload = payload;
    return this;
  }

  public ChatMessageDTO addPayloadItem(ChatMessagePayloadDTO payloadItem) {
    if (this.payload == null) {
      this.payload = new ArrayList<>();
    }
    this.payload.add(payloadItem);
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatMessageDTO {\n");
    
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

