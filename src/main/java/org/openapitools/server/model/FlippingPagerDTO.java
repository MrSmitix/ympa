/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Модель для пагинации.
  */

public class FlippingPagerDTO  {
  
 /**
  * Сколько всего найдено элементов.
  */
  @JsonbProperty("total")
  private Integer total;

 /**
  * Начальный номер найденного элемента на странице.
  */
  @JsonbProperty("from")
  private Integer from;

 /**
  * Конечный номер найденного элемента на странице.
  */
  @JsonbProperty("to")
  private Integer to;

 /**
  * Текущая страница.
  */
  @JsonbProperty("currentPage")
  private Integer currentPage;

 /**
  * Общее количество страниц.
  */
  @JsonbProperty("pagesCount")
  private Integer pagesCount;

 /**
  * Размер страницы.
  */
  @JsonbProperty("pageSize")
  private Integer pageSize;

  /**
   * Сколько всего найдено элементов.
   * @return total
   **/
  public Integer getTotal() {
    return total;
  }

  /**
   * Set total
   */
  public void setTotal(Integer total) {
    this.total = total;
  }

  public FlippingPagerDTO total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Начальный номер найденного элемента на странице.
   * @return from
   **/
  public Integer getFrom() {
    return from;
  }

  /**
   * Set from
   */
  public void setFrom(Integer from) {
    this.from = from;
  }

  public FlippingPagerDTO from(Integer from) {
    this.from = from;
    return this;
  }

  /**
   * Конечный номер найденного элемента на странице.
   * @return to
   **/
  public Integer getTo() {
    return to;
  }

  /**
   * Set to
   */
  public void setTo(Integer to) {
    this.to = to;
  }

  public FlippingPagerDTO to(Integer to) {
    this.to = to;
    return this;
  }

  /**
   * Текущая страница.
   * @return currentPage
   **/
  public Integer getCurrentPage() {
    return currentPage;
  }

  /**
   * Set currentPage
   */
  public void setCurrentPage(Integer currentPage) {
    this.currentPage = currentPage;
  }

  public FlippingPagerDTO currentPage(Integer currentPage) {
    this.currentPage = currentPage;
    return this;
  }

  /**
   * Общее количество страниц.
   * @return pagesCount
   **/
  public Integer getPagesCount() {
    return pagesCount;
  }

  /**
   * Set pagesCount
   */
  public void setPagesCount(Integer pagesCount) {
    this.pagesCount = pagesCount;
  }

  public FlippingPagerDTO pagesCount(Integer pagesCount) {
    this.pagesCount = pagesCount;
    return this;
  }

  /**
   * Размер страницы.
   * @return pageSize
   **/
  public Integer getPageSize() {
    return pageSize;
  }

  /**
   * Set pageSize
   */
  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }

  public FlippingPagerDTO pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlippingPagerDTO {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

