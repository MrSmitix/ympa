/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;


/**
 * Cтатус возврата денег:  * &#x60;STARTED_BY_USER&#x60; — создан клиентом из личного кабинета.  * &#x60;REFUND_IN_PROGRESS&#x60; — ждет решение о возврате денег.  * &#x60;REFUNDED&#x60; — по возврату проведены все возвратные денежные транзакции.  * &#x60;FAILED&#x60; — невозможно провести возврат покупателю.  * &#x60;WAITING_FOR_DECISION&#x60; — ожидает решения.  * &#x60;DECISION_MADE&#x60; — по возврату принято решение.  * &#x60;REFUNDED_WITH_BONUSES&#x60; — возврат осуществлен баллами Плюса или промокодом.  * &#x60;REFUNDED_BY_SHOP&#x60; — магазин сделал самостоятельно возврат денег.  * &#x60;COMPLETE_WITHOUT_REFUND&#x60; — возврат денег не требуется.  * &#x60;CANCELLED&#x60; — возврат отменен. 
 */
@JsonbTypeSerializer(RefundStatusType.Serializer.class)
@JsonbTypeDeserializer(RefundStatusType.Deserializer.class)
public enum RefundStatusType {
  
  STARTED_BY_USER("STARTED_BY_USER"),
  
  REFUND_IN_PROGRESS("REFUND_IN_PROGRESS"),
  
  REFUNDED("REFUNDED"),
  
  FAILED("FAILED"),
  
  WAITING_FOR_DECISION("WAITING_FOR_DECISION"),
  
  DECISION_MADE("DECISION_MADE"),
  
  REFUNDED_WITH_BONUSES("REFUNDED_WITH_BONUSES"),
  
  REFUNDED_BY_SHOP("REFUNDED_BY_SHOP"),
  
  CANCELLED("CANCELLED"),
  
  COMPLETE_WITHOUT_REFUND("COMPLETE_WITHOUT_REFUND"),
  
  UNKNOWN("UNKNOWN");

  private String value;

  RefundStatusType(String value) {
    this.value = value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static final class Deserializer implements JsonbDeserializer<RefundStatusType> {
    @Override
    public RefundStatusType deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
      return fromValue(parser.getString());
    }
  }

  public static final class Serializer implements JsonbSerializer<RefundStatusType> {
    @Override
    public void serialize(RefundStatusType obj, JsonGenerator generator, SerializationContext ctx) {
      generator.write(obj.value);
    }
  }

  public static RefundStatusType fromValue(String text) {
    for (RefundStatusType b : RefundStatusType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + text + "'");
  }
}

