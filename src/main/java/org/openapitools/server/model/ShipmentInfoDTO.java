/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Set;
import org.openapitools.server.model.DeliveryServiceDTO;
import org.openapitools.server.model.PalletsCountDTO;
import org.openapitools.server.model.PartnerShipmentWarehouseDTO;
import org.openapitools.server.model.ShipmentStatusType;
import org.openapitools.server.model.ShipmentType;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Список с информацией об отгрузках.
  */

public class ShipmentInfoDTO  {
  
 /**
  * Идентификатор отгрузки.
  */
  @JsonbProperty("id")
  private Long id;

 /**
  * Начало планового интервала отгрузки.
  */
  @JsonbProperty("planIntervalFrom")
  private Date planIntervalFrom;

 /**
  * Конец планового интервала отгрузки.
  */
  @JsonbProperty("planIntervalTo")
  private Date planIntervalTo;

  @JsonbProperty("shipmentType")
  private ShipmentType shipmentType;

  @JsonbProperty("warehouse")
  private PartnerShipmentWarehouseDTO warehouse;

  @JsonbProperty("warehouseTo")
  private PartnerShipmentWarehouseDTO warehouseTo;

 /**
  * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра `id`.
  */
  @JsonbProperty("externalId")
  private String externalId;

  @JsonbProperty("deliveryService")
  private DeliveryServiceDTO deliveryService;

  @JsonbProperty("palletsCount")
  private PalletsCountDTO palletsCount;

 /**
  * Идентификаторы заказов в отгрузке.
  */
  @JsonbProperty("orderIds")
  private Set<Long> orderIds = new LinkedHashSet<>();

 /**
  * Количество заказов, которое Маркет запланировал к отгрузке.
  */
  @JsonbProperty("draftCount")
  private Integer draftCount;

 /**
  * Количество заказов, которое Маркет подтвердил к отгрузке.
  */
  @JsonbProperty("plannedCount")
  private Integer plannedCount;

 /**
  * Количество заказов, принятых в сортировочном центре или пункте приема.
  */
  @JsonbProperty("factCount")
  private Integer factCount;

  @JsonbProperty("status")
  private ShipmentStatusType status;

 /**
  * Описание статуса отгрузки.
  */
  @JsonbProperty("statusDescription")
  private String statusDescription;

 /**
  * Время последнего изменения статуса отгрузки.
  */
  @JsonbProperty("statusUpdateTime")
  private Date statusUpdateTime;

  /**
   * Идентификатор отгрузки.
   * @return id
   **/
  public Long getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(Long id) {
    this.id = id;
  }

  public ShipmentInfoDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Начало планового интервала отгрузки.
   * @return planIntervalFrom
   **/
  public Date getPlanIntervalFrom() {
    return planIntervalFrom;
  }

  /**
   * Set planIntervalFrom
   */
  public void setPlanIntervalFrom(Date planIntervalFrom) {
    this.planIntervalFrom = planIntervalFrom;
  }

  public ShipmentInfoDTO planIntervalFrom(Date planIntervalFrom) {
    this.planIntervalFrom = planIntervalFrom;
    return this;
  }

  /**
   * Конец планового интервала отгрузки.
   * @return planIntervalTo
   **/
  public Date getPlanIntervalTo() {
    return planIntervalTo;
  }

  /**
   * Set planIntervalTo
   */
  public void setPlanIntervalTo(Date planIntervalTo) {
    this.planIntervalTo = planIntervalTo;
  }

  public ShipmentInfoDTO planIntervalTo(Date planIntervalTo) {
    this.planIntervalTo = planIntervalTo;
    return this;
  }

  /**
   * Get shipmentType
   * @return shipmentType
   **/
  public ShipmentType getShipmentType() {
    return shipmentType;
  }

  /**
   * Set shipmentType
   */
  public void setShipmentType(ShipmentType shipmentType) {
    this.shipmentType = shipmentType;
  }

  public ShipmentInfoDTO shipmentType(ShipmentType shipmentType) {
    this.shipmentType = shipmentType;
    return this;
  }

  /**
   * Get warehouse
   * @return warehouse
   **/
  public PartnerShipmentWarehouseDTO getWarehouse() {
    return warehouse;
  }

  /**
   * Set warehouse
   */
  public void setWarehouse(PartnerShipmentWarehouseDTO warehouse) {
    this.warehouse = warehouse;
  }

  public ShipmentInfoDTO warehouse(PartnerShipmentWarehouseDTO warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  /**
   * Get warehouseTo
   * @return warehouseTo
   **/
  public PartnerShipmentWarehouseDTO getWarehouseTo() {
    return warehouseTo;
  }

  /**
   * Set warehouseTo
   */
  public void setWarehouseTo(PartnerShipmentWarehouseDTO warehouseTo) {
    this.warehouseTo = warehouseTo;
  }

  public ShipmentInfoDTO warehouseTo(PartnerShipmentWarehouseDTO warehouseTo) {
    this.warehouseTo = warehouseTo;
    return this;
  }

  /**
   * Идентификатор отгрузки в вашей системе. Если вы еще не передавали идентификатор, вернется идентификатор из параметра &#x60;id&#x60;.
   * @return externalId
   **/
  public String getExternalId() {
    return externalId;
  }

  /**
   * Set externalId
   */
  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }

  public ShipmentInfoDTO externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get deliveryService
   * @return deliveryService
   **/
  public DeliveryServiceDTO getDeliveryService() {
    return deliveryService;
  }

  /**
   * Set deliveryService
   */
  public void setDeliveryService(DeliveryServiceDTO deliveryService) {
    this.deliveryService = deliveryService;
  }

  public ShipmentInfoDTO deliveryService(DeliveryServiceDTO deliveryService) {
    this.deliveryService = deliveryService;
    return this;
  }

  /**
   * Get palletsCount
   * @return palletsCount
   **/
  public PalletsCountDTO getPalletsCount() {
    return palletsCount;
  }

  /**
   * Set palletsCount
   */
  public void setPalletsCount(PalletsCountDTO palletsCount) {
    this.palletsCount = palletsCount;
  }

  public ShipmentInfoDTO palletsCount(PalletsCountDTO palletsCount) {
    this.palletsCount = palletsCount;
    return this;
  }

  /**
   * Идентификаторы заказов в отгрузке.
   * @return orderIds
   **/
  public Set<Long> getOrderIds() {
    return orderIds;
  }

  /**
   * Set orderIds
   */
  public void setOrderIds(Set<Long> orderIds) {
    this.orderIds = orderIds;
  }

  public ShipmentInfoDTO orderIds(Set<Long> orderIds) {
    this.orderIds = orderIds;
    return this;
  }

  public ShipmentInfoDTO addOrderIdsItem(Long orderIdsItem) {
    if (this.orderIds == null) {
      this.orderIds = new LinkedHashSet<>();
    }
    this.orderIds.add(orderIdsItem);
    return this;
  }

  /**
   * Количество заказов, которое Маркет запланировал к отгрузке.
   * @return draftCount
   **/
  public Integer getDraftCount() {
    return draftCount;
  }

  /**
   * Set draftCount
   */
  public void setDraftCount(Integer draftCount) {
    this.draftCount = draftCount;
  }

  public ShipmentInfoDTO draftCount(Integer draftCount) {
    this.draftCount = draftCount;
    return this;
  }

  /**
   * Количество заказов, которое Маркет подтвердил к отгрузке.
   * @return plannedCount
   **/
  public Integer getPlannedCount() {
    return plannedCount;
  }

  /**
   * Set plannedCount
   */
  public void setPlannedCount(Integer plannedCount) {
    this.plannedCount = plannedCount;
  }

  public ShipmentInfoDTO plannedCount(Integer plannedCount) {
    this.plannedCount = plannedCount;
    return this;
  }

  /**
   * Количество заказов, принятых в сортировочном центре или пункте приема.
   * @return factCount
   **/
  public Integer getFactCount() {
    return factCount;
  }

  /**
   * Set factCount
   */
  public void setFactCount(Integer factCount) {
    this.factCount = factCount;
  }

  public ShipmentInfoDTO factCount(Integer factCount) {
    this.factCount = factCount;
    return this;
  }

  /**
   * Get status
   * @return status
   **/
  public ShipmentStatusType getStatus() {
    return status;
  }

  /**
   * Set status
   */
  public void setStatus(ShipmentStatusType status) {
    this.status = status;
  }

  public ShipmentInfoDTO status(ShipmentStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Описание статуса отгрузки.
   * @return statusDescription
   **/
  public String getStatusDescription() {
    return statusDescription;
  }

  /**
   * Set statusDescription
   */
  public void setStatusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
  }

  public ShipmentInfoDTO statusDescription(String statusDescription) {
    this.statusDescription = statusDescription;
    return this;
  }

  /**
   * Время последнего изменения статуса отгрузки.
   * @return statusUpdateTime
   **/
  public Date getStatusUpdateTime() {
    return statusUpdateTime;
  }

  /**
   * Set statusUpdateTime
   */
  public void setStatusUpdateTime(Date statusUpdateTime) {
    this.statusUpdateTime = statusUpdateTime;
  }

  public ShipmentInfoDTO statusUpdateTime(Date statusUpdateTime) {
    this.statusUpdateTime = statusUpdateTime;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentInfoDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    planIntervalFrom: ").append(toIndentedString(planIntervalFrom)).append("\n");
    sb.append("    planIntervalTo: ").append(toIndentedString(planIntervalTo)).append("\n");
    sb.append("    shipmentType: ").append(toIndentedString(shipmentType)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    warehouseTo: ").append(toIndentedString(warehouseTo)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    deliveryService: ").append(toIndentedString(deliveryService)).append("\n");
    sb.append("    palletsCount: ").append(toIndentedString(palletsCount)).append("\n");
    sb.append("    orderIds: ").append(toIndentedString(orderIds)).append("\n");
    sb.append("    draftCount: ").append(toIndentedString(draftCount)).append("\n");
    sb.append("    plannedCount: ").append(toIndentedString(plannedCount)).append("\n");
    sb.append("    factCount: ").append(toIndentedString(factCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    statusUpdateTime: ").append(toIndentedString(statusUpdateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

