/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import org.openapitools.server.model.LogisticPointType;
import org.openapitools.server.model.PickupAddressDTO;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Описание пункта вывоза для возврата.
  */

public class LogisticPickupPointDTO  {
  
 /**
  * Идентификатор пункта вывоза.
  */
  @JsonbProperty("id")
  private Long id;

 /**
  * Название пункта вывоза.
  */
  @JsonbProperty("name")
  private String name;

  @JsonbProperty("address")
  private PickupAddressDTO address;

 /**
  * Дополнительные инструкции к вывозу.
  */
  @JsonbProperty("instruction")
  private String instruction;

  @JsonbProperty("type")
  private LogisticPointType type;

 /**
  * Идентификатор логистического партнера, к которому относится логистическая точка.
  */
  @JsonbProperty("logisticPartnerId")
  private Long logisticPartnerId;

  /**
   * Идентификатор пункта вывоза.
   * @return id
   **/
  public Long getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(Long id) {
    this.id = id;
  }

  public LogisticPickupPointDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Название пункта вывоза.
   * @return name
   **/
  public String getName() {
    return name;
  }

  /**
   * Set name
   */
  public void setName(String name) {
    this.name = name;
  }

  public LogisticPickupPointDTO name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get address
   * @return address
   **/
  public PickupAddressDTO getAddress() {
    return address;
  }

  /**
   * Set address
   */
  public void setAddress(PickupAddressDTO address) {
    this.address = address;
  }

  public LogisticPickupPointDTO address(PickupAddressDTO address) {
    this.address = address;
    return this;
  }

  /**
   * Дополнительные инструкции к вывозу.
   * @return instruction
   **/
  public String getInstruction() {
    return instruction;
  }

  /**
   * Set instruction
   */
  public void setInstruction(String instruction) {
    this.instruction = instruction;
  }

  public LogisticPickupPointDTO instruction(String instruction) {
    this.instruction = instruction;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  public LogisticPointType getType() {
    return type;
  }

  /**
   * Set type
   */
  public void setType(LogisticPointType type) {
    this.type = type;
  }

  public LogisticPickupPointDTO type(LogisticPointType type) {
    this.type = type;
    return this;
  }

  /**
   * Идентификатор логистического партнера, к которому относится логистическая точка.
   * @return logisticPartnerId
   **/
  public Long getLogisticPartnerId() {
    return logisticPartnerId;
  }

  /**
   * Set logisticPartnerId
   */
  public void setLogisticPartnerId(Long logisticPartnerId) {
    this.logisticPartnerId = logisticPartnerId;
  }

  public LogisticPickupPointDTO logisticPartnerId(Long logisticPartnerId) {
    this.logisticPartnerId = logisticPartnerId;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogisticPickupPointDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    instruction: ").append(toIndentedString(instruction)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    logisticPartnerId: ").append(toIndentedString(logisticPartnerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

