/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.server.model.OutletAddressDTO;
import org.openapitools.server.model.OutletDeliveryRuleDTO;
import org.openapitools.server.model.OutletType;
import org.openapitools.server.model.OutletVisibilityType;
import org.openapitools.server.model.OutletWorkingScheduleDTO;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;


public class ChangeOutletRequest  {
  
 /**
  * Название точки продаж. 
  */
  @JsonbProperty("name")
  private String name;

  @JsonbProperty("type")
  private OutletType type;

 /**
  * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, `20.4522144, 54.7104264`.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в `address`. 
  */
  @JsonbProperty("coords")
  private String coords;

 /**
  * Признак основной точки продаж.  Возможные значения:  * `false` — неосновная точка продаж. * `true` — основная точка продаж. 
  */
  @JsonbProperty("isMain")
  private Boolean isMain;

 /**
  * Идентификатор точки продаж, присвоенный магазином.
  */
  @JsonbProperty("shopOutletCode")
  private String shopOutletCode;

  @JsonbProperty("visibility")
  private OutletVisibilityType visibility;

  @JsonbProperty("address")
  private OutletAddressDTO address;

 /**
  * Номера телефонов точки продаж. Передавайте в формате: `+7 (999) 999-99-99`. 
  */
  @JsonbProperty("phones")
  private List<String> phones = new ArrayList<>();

  @JsonbProperty("workingSchedule")
  private OutletWorkingScheduleDTO workingSchedule;

 /**
  * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр `type=DEPOT` или `type=MIXED`. 
  */
  @JsonbProperty("deliveryRules")
  private List<OutletDeliveryRuleDTO> deliveryRules = null;

 /**
  * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
  */
  @JsonbProperty("storagePeriod")
  private Long storagePeriod;

  /**
   * Название точки продаж. 
   * @return name
   **/
  public String getName() {
    return name;
  }

  /**
   * Set name
   */
  public void setName(String name) {
    this.name = name;
  }

  public ChangeOutletRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  public OutletType getType() {
    return type;
  }

  /**
   * Set type
   */
  public void setType(OutletType type) {
    this.type = type;
  }

  public ChangeOutletRequest type(OutletType type) {
    this.type = type;
    return this;
  }

  /**
   * Координаты точки продаж.  Формат: долгота, широта. Разделители: запятая и / или пробел. Например, &#x60;20.4522144, 54.7104264&#x60;.  Если параметр не передан, координаты будут определены по значениям параметров, вложенных в &#x60;address&#x60;. 
   * @return coords
   **/
  public String getCoords() {
    return coords;
  }

  /**
   * Set coords
   */
  public void setCoords(String coords) {
    this.coords = coords;
  }

  public ChangeOutletRequest coords(String coords) {
    this.coords = coords;
    return this;
  }

  /**
   * Признак основной точки продаж.  Возможные значения:  * &#x60;false&#x60; — неосновная точка продаж. * &#x60;true&#x60; — основная точка продаж. 
   * @return isMain
   **/
  public Boolean getIsMain() {
    return isMain;
  }

  /**
   * Set isMain
   */
  public void setIsMain(Boolean isMain) {
    this.isMain = isMain;
  }

  public ChangeOutletRequest isMain(Boolean isMain) {
    this.isMain = isMain;
    return this;
  }

  /**
   * Идентификатор точки продаж, присвоенный магазином.
   * @return shopOutletCode
   **/
  public String getShopOutletCode() {
    return shopOutletCode;
  }

  /**
   * Set shopOutletCode
   */
  public void setShopOutletCode(String shopOutletCode) {
    this.shopOutletCode = shopOutletCode;
  }

  public ChangeOutletRequest shopOutletCode(String shopOutletCode) {
    this.shopOutletCode = shopOutletCode;
    return this;
  }

  /**
   * Get visibility
   * @return visibility
   **/
  public OutletVisibilityType getVisibility() {
    return visibility;
  }

  /**
   * Set visibility
   */
  public void setVisibility(OutletVisibilityType visibility) {
    this.visibility = visibility;
  }

  public ChangeOutletRequest visibility(OutletVisibilityType visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * Get address
   * @return address
   **/
  public OutletAddressDTO getAddress() {
    return address;
  }

  /**
   * Set address
   */
  public void setAddress(OutletAddressDTO address) {
    this.address = address;
  }

  public ChangeOutletRequest address(OutletAddressDTO address) {
    this.address = address;
    return this;
  }

  /**
   * Номера телефонов точки продаж. Передавайте в формате: &#x60;+7 (999) 999-99-99&#x60;. 
   * @return phones
   **/
  public List<String> getPhones() {
    return phones;
  }

  /**
   * Set phones
   */
  public void setPhones(List<String> phones) {
    this.phones = phones;
  }

  public ChangeOutletRequest phones(List<String> phones) {
    this.phones = phones;
    return this;
  }

  public ChangeOutletRequest addPhonesItem(String phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

  /**
   * Get workingSchedule
   * @return workingSchedule
   **/
  public OutletWorkingScheduleDTO getWorkingSchedule() {
    return workingSchedule;
  }

  /**
   * Set workingSchedule
   */
  public void setWorkingSchedule(OutletWorkingScheduleDTO workingSchedule) {
    this.workingSchedule = workingSchedule;
  }

  public ChangeOutletRequest workingSchedule(OutletWorkingScheduleDTO workingSchedule) {
    this.workingSchedule = workingSchedule;
    return this;
  }

  /**
   * Информация об условиях доставки для данной точки продаж.  Обязательный параметр, если параметр &#x60;type&#x3D;DEPOT&#x60; или &#x60;type&#x3D;MIXED&#x60;. 
   * @return deliveryRules
   **/
  public List<OutletDeliveryRuleDTO> getDeliveryRules() {
    return deliveryRules;
  }

  /**
   * Set deliveryRules
   */
  public void setDeliveryRules(List<OutletDeliveryRuleDTO> deliveryRules) {
    this.deliveryRules = deliveryRules;
  }

  public ChangeOutletRequest deliveryRules(List<OutletDeliveryRuleDTO> deliveryRules) {
    this.deliveryRules = deliveryRules;
    return this;
  }

  public ChangeOutletRequest addDeliveryRulesItem(OutletDeliveryRuleDTO deliveryRulesItem) {
    if (this.deliveryRules == null) {
      this.deliveryRules = new ArrayList<>();
    }
    this.deliveryRules.add(deliveryRulesItem);
    return this;
  }

  /**
   * Срок хранения заказа в собственном пункте выдачи заказов. Считается в днях.
   * @return storagePeriod
   **/
  public Long getStoragePeriod() {
    return storagePeriod;
  }

  /**
   * Set storagePeriod
   */
  public void setStoragePeriod(Long storagePeriod) {
    this.storagePeriod = storagePeriod;
  }

  public ChangeOutletRequest storagePeriod(Long storagePeriod) {
    this.storagePeriod = storagePeriod;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeOutletRequest {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    coords: ").append(toIndentedString(coords)).append("\n");
    sb.append("    isMain: ").append(toIndentedString(isMain)).append("\n");
    sb.append("    shopOutletCode: ").append(toIndentedString(shopOutletCode)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    workingSchedule: ").append(toIndentedString(workingSchedule)).append("\n");
    sb.append("    deliveryRules: ").append(toIndentedString(deliveryRules)).append("\n");
    sb.append("    storagePeriod: ").append(toIndentedString(storagePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

