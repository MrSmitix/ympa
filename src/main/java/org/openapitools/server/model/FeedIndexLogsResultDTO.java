/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.server.model.FeedIndexLogsFeedDTO;
import org.openapitools.server.model.FeedIndexLogsRecordDTO;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Результат выполнения запроса отчета по индексации прайс-листа.
  */

public class FeedIndexLogsResultDTO  {
  
  @JsonbProperty("feed")
  private FeedIndexLogsFeedDTO feed;

 /**
  * Список отчетов по индексации прайс-листа.
  */
  @JsonbProperty("indexLogRecords")
  private List<FeedIndexLogsRecordDTO> indexLogRecords = new ArrayList<>();

 /**
  * Количество отчетов на всех страницах выходных данных.
  */
  @JsonbProperty("total")
  private Long total;

  /**
   * Get feed
   * @return feed
   **/
  public FeedIndexLogsFeedDTO getFeed() {
    return feed;
  }

  /**
   * Set feed
   */
  public void setFeed(FeedIndexLogsFeedDTO feed) {
    this.feed = feed;
  }

  public FeedIndexLogsResultDTO feed(FeedIndexLogsFeedDTO feed) {
    this.feed = feed;
    return this;
  }

  /**
   * Список отчетов по индексации прайс-листа.
   * @return indexLogRecords
   **/
  public List<FeedIndexLogsRecordDTO> getIndexLogRecords() {
    return indexLogRecords;
  }

  /**
   * Set indexLogRecords
   */
  public void setIndexLogRecords(List<FeedIndexLogsRecordDTO> indexLogRecords) {
    this.indexLogRecords = indexLogRecords;
  }

  public FeedIndexLogsResultDTO indexLogRecords(List<FeedIndexLogsRecordDTO> indexLogRecords) {
    this.indexLogRecords = indexLogRecords;
    return this;
  }

  public FeedIndexLogsResultDTO addIndexLogRecordsItem(FeedIndexLogsRecordDTO indexLogRecordsItem) {
    if (this.indexLogRecords == null) {
      this.indexLogRecords = new ArrayList<>();
    }
    this.indexLogRecords.add(indexLogRecordsItem);
    return this;
  }

  /**
   * Количество отчетов на всех страницах выходных данных.
   * @return total
   **/
  public Long getTotal() {
    return total;
  }

  /**
   * Set total
   */
  public void setTotal(Long total) {
    this.total = total;
  }

  public FeedIndexLogsResultDTO total(Long total) {
    this.total = total;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedIndexLogsResultDTO {\n");
    
    sb.append("    feed: ").append(toIndentedString(feed)).append("\n");
    sb.append("    indexLogRecords: ").append(toIndentedString(indexLogRecords)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

