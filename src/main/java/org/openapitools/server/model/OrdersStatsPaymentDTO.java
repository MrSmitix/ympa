/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.math.BigDecimal;
import java.util.Date;
import org.openapitools.server.model.OrdersStatsPaymentOrderDTO;
import org.openapitools.server.model.OrdersStatsPaymentSourceType;
import org.openapitools.server.model.OrdersStatsPaymentType;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Информация о денежных переводах по заказу.
  */

public class OrdersStatsPaymentDTO  {
  
 /**
  * Идентификатор денежного перевода.
  */
  @JsonbProperty("id")
  private String id;

 /**
  * Дата денежного перевода.  Формат даты: `ГГГГ-ММ-ДД`. 
  */
  @JsonbProperty("date")
  private Date date;

  @JsonbProperty("type")
  private OrdersStatsPaymentType type;

  @JsonbProperty("source")
  private OrdersStatsPaymentSourceType source;

 /**
  * Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
  */
  @JsonbProperty("total")
  private BigDecimal total;

  @JsonbProperty("paymentOrder")
  private OrdersStatsPaymentOrderDTO paymentOrder;

  /**
   * Идентификатор денежного перевода.
   * @return id
   **/
  public String getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(String id) {
    this.id = id;
  }

  public OrdersStatsPaymentDTO id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Дата денежного перевода.  Формат даты: &#x60;ГГГГ-ММ-ДД&#x60;. 
   * @return date
   **/
  public Date getDate() {
    return date;
  }

  /**
   * Set date
   */
  public void setDate(Date date) {
    this.date = date;
  }

  public OrdersStatsPaymentDTO date(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Get type
   * @return type
   **/
  public OrdersStatsPaymentType getType() {
    return type;
  }

  /**
   * Set type
   */
  public void setType(OrdersStatsPaymentType type) {
    this.type = type;
  }

  public OrdersStatsPaymentDTO type(OrdersStatsPaymentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get source
   * @return source
   **/
  public OrdersStatsPaymentSourceType getSource() {
    return source;
  }

  /**
   * Set source
   */
  public void setSource(OrdersStatsPaymentSourceType source) {
    this.source = source;
  }

  public OrdersStatsPaymentDTO source(OrdersStatsPaymentSourceType source) {
    this.source = source;
    return this;
  }

  /**
   * Сумма денежного перевода. Значение указывается в рублях независимо от способа денежного перевода. Точность — два знака после запятой. 
   * @return total
   **/
  public BigDecimal getTotal() {
    return total;
  }

  /**
   * Set total
   */
  public void setTotal(BigDecimal total) {
    this.total = total;
  }

  public OrdersStatsPaymentDTO total(BigDecimal total) {
    this.total = total;
    return this;
  }

  /**
   * Get paymentOrder
   * @return paymentOrder
   **/
  public OrdersStatsPaymentOrderDTO getPaymentOrder() {
    return paymentOrder;
  }

  /**
   * Set paymentOrder
   */
  public void setPaymentOrder(OrdersStatsPaymentOrderDTO paymentOrder) {
    this.paymentOrder = paymentOrder;
  }

  public OrdersStatsPaymentDTO paymentOrder(OrdersStatsPaymentOrderDTO paymentOrder) {
    this.paymentOrder = paymentOrder;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersStatsPaymentDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    paymentOrder: ").append(toIndentedString(paymentOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

