/**
 * Партнерский API Маркета
 * API Яндекс Маркета помогает продавцам автоматизировать и упростить работу с маркетплейсом.  В числе возможностей интеграции:  * управление каталогом товаров и витриной,  * обработка заказов,  * изменение настроек магазина,  * получение отчетов. 
 *
 * The version of the OpenAPI document: LATEST
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.server.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import org.openapitools.server.model.OrderItemDetailDTO;
import org.openapitools.server.model.OrderItemInstanceDTO;
import org.openapitools.server.model.OrderItemInstanceType;
import org.openapitools.server.model.OrderItemPromoDTO;
import org.openapitools.server.model.OrderItemSubsidyDTO;
import org.openapitools.server.model.OrderVatType;
import java.lang.reflect.Type;
import javax.json.bind.annotation.JsonbTypeDeserializer;
import javax.json.bind.annotation.JsonbTypeSerializer;
import javax.json.bind.serializer.DeserializationContext;
import javax.json.bind.serializer.JsonbDeserializer;
import javax.json.bind.serializer.JsonbSerializer;
import javax.json.bind.serializer.SerializationContext;
import javax.json.stream.JsonGenerator;
import javax.json.stream.JsonParser;
import javax.json.bind.annotation.JsonbProperty;

/**
  * Список товаров в заказе.
  */

public class OrderItemDTO  {
  
 /**
  * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
  */
  @JsonbProperty("id")
  private Long id;

 /**
  * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
  */
  @JsonbProperty("offerId")
  private String offerId;

 /**
  * Название товара.
  */
  @JsonbProperty("offerName")
  private String offerName;

 /**
  * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр `subsidies`). 
  */
  @JsonbProperty("price")
  private BigDecimal price;

 /**
  * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
  */
  @JsonbProperty("buyerPrice")
  private BigDecimal buyerPrice;

 /**
  * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
  */
  @JsonbProperty("buyerPriceBeforeDiscount")
  private BigDecimal buyerPriceBeforeDiscount;

 /**
  * {% note warning \"\" %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
  */
  @JsonbProperty("priceBeforeDiscount")
  private BigDecimal priceBeforeDiscount;

 /**
  * Количество единиц товара.
  */
  @JsonbProperty("count")
  private Integer count;

  @JsonbProperty("vat")
  private OrderVatType vat;

 /**
  * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
  */
  @JsonbProperty("shopSku")
  private String shopSku;

 /**
  * {% note warning \"\" %}  Этот параметр устарел. Вместо него используйте `subsidies`.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
  */
  @JsonbProperty("subsidy")
  private BigDecimal subsidy;

 /**
  * {% note warning \"\" %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
  */
  @JsonbProperty("partnerWarehouseId")
  private String partnerWarehouseId;

 /**
  * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
  */
  @JsonbProperty("promos")
  private List<OrderItemPromoDTO> promos = null;

 /**
  * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, `instances` отсутствует. 
  */
  @JsonbProperty("instances")
  private List<OrderItemInstanceDTO> instances = null;

 /**
  * Информация об удалении товара из заказа. 
  */
  @JsonbProperty("details")
  private List<OrderItemDetailDTO> details = null;

 /**
  * Список субсидий по типам.
  */
  @JsonbProperty("subsidies")
  private List<OrderItemSubsidyDTO> subsidies = null;

 /**
  * Список необходимых маркировок товара.
  */
  @JsonbProperty("requiredInstanceTypes")
  private List<OrderItemInstanceType> requiredInstanceTypes = null;

  /**
   * Идентификатор товара в заказе.  Позволяет идентифицировать товар в рамках данного заказа. 
   * @return id
   **/
  public Long getId() {
    return id;
  }

  /**
   * Set id
   */
  public void setId(Long id) {
    this.id = id;
  }

  public OrderItemDTO id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   * @return offerId
   **/
  public String getOfferId() {
    return offerId;
  }

  /**
   * Set offerId
   */
  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }

  public OrderItemDTO offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Название товара.
   * @return offerName
   **/
  public String getOfferName() {
    return offerName;
  }

  /**
   * Set offerName
   */
  public void setOfferName(String offerName) {
    this.offerName = offerName;
  }

  public OrderItemDTO offerName(String offerName) {
    this.offerName = offerName;
    return this;
  }

  /**
   * Цена на товар в валюте заказа без учета вознаграждения партнеру за скидки по промокодам, купонам и акциям (параметр &#x60;subsidies&#x60;). 
   * @return price
   **/
  public BigDecimal getPrice() {
    return price;
  }

  /**
   * Set price
   */
  public void setPrice(BigDecimal price) {
    this.price = price;
  }

  public OrderItemDTO price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Цена на товар в валюте покупателя. В цене уже учтены скидки по:  * акциям; * купонам; * промокодам. 
   * @return buyerPrice
   **/
  public BigDecimal getBuyerPrice() {
    return buyerPrice;
  }

  /**
   * Set buyerPrice
   */
  public void setBuyerPrice(BigDecimal buyerPrice) {
    this.buyerPrice = buyerPrice;
  }

  public OrderItemDTO buyerPrice(BigDecimal buyerPrice) {
    this.buyerPrice = buyerPrice;
    return this;
  }

  /**
   * Стоимость товара в валюте покупателя до применения скидок по:  * акциям; * купонам; * промокодам. 
   * @return buyerPriceBeforeDiscount
   **/
  public BigDecimal getBuyerPriceBeforeDiscount() {
    return buyerPriceBeforeDiscount;
  }

  /**
   * Set buyerPriceBeforeDiscount
   */
  public void setBuyerPriceBeforeDiscount(BigDecimal buyerPriceBeforeDiscount) {
    this.buyerPriceBeforeDiscount = buyerPriceBeforeDiscount;
  }

  public OrderItemDTO buyerPriceBeforeDiscount(BigDecimal buyerPriceBeforeDiscount) {
    this.buyerPriceBeforeDiscount = buyerPriceBeforeDiscount;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел.  {% endnote %}  Стоимость товара в валюте магазина до применения скидок. 
   * @return priceBeforeDiscount
   * @deprecated
   **/
  @Deprecated
  public BigDecimal getPriceBeforeDiscount() {
    return priceBeforeDiscount;
  }

  /**
   * Set priceBeforeDiscount
   */
  public void setPriceBeforeDiscount(BigDecimal priceBeforeDiscount) {
    this.priceBeforeDiscount = priceBeforeDiscount;
  }

  public OrderItemDTO priceBeforeDiscount(BigDecimal priceBeforeDiscount) {
    this.priceBeforeDiscount = priceBeforeDiscount;
    return this;
  }

  /**
   * Количество единиц товара.
   * @return count
   **/
  public Integer getCount() {
    return count;
  }

  /**
   * Set count
   */
  public void setCount(Integer count) {
    this.count = count;
  }

  public OrderItemDTO count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get vat
   * @return vat
   **/
  public OrderVatType getVat() {
    return vat;
  }

  /**
   * Set vat
   */
  public void setVat(OrderVatType vat) {
    this.vat = vat;
  }

  public OrderItemDTO vat(OrderVatType vat) {
    this.vat = vat;
    return this;
  }

  /**
   * Ваш SKU — идентификатор товара в вашей системе.  Разрешена любая последовательность длиной до 255 знаков.  Правила использования SKU:  * У каждого товара SKU должен быть свой.  * SKU товара нельзя менять — можно только удалить товар и добавить заново с новым SKU.  * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.  [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields) 
   * @return shopSku
   **/
  public String getShopSku() {
    return shopSku;
  }

  /**
   * Set shopSku
   */
  public void setShopSku(String shopSku) {
    this.shopSku = shopSku;
  }

  public OrderItemDTO shopSku(String shopSku) {
    this.shopSku = shopSku;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Вместо него используйте &#x60;subsidies&#x60;.  {% endnote %}  Общее вознаграждение партнеру за DBS-доставку и все скидки на товар:  * по промокодам; * по купонам; * по баллам Плюса; * по акциям.  Передается в валюте заказа. 
   * @return subsidy
   * @deprecated
   **/
  @Deprecated
  public BigDecimal getSubsidy() {
    return subsidy;
  }

  /**
   * Set subsidy
   */
  public void setSubsidy(BigDecimal subsidy) {
    this.subsidy = subsidy;
  }

  public OrderItemDTO subsidy(BigDecimal subsidy) {
    this.subsidy = subsidy;
    return this;
  }

  /**
   * {% note warning \&quot;\&quot; %}  Этот параметр устарел. Не используйте его.  {% endnote %}  Идентификатор склада в системе партнера, на который сформирован заказ. 
   * @return partnerWarehouseId
   * @deprecated
   **/
  @Deprecated
  public String getPartnerWarehouseId() {
    return partnerWarehouseId;
  }

  /**
   * Set partnerWarehouseId
   */
  public void setPartnerWarehouseId(String partnerWarehouseId) {
    this.partnerWarehouseId = partnerWarehouseId;
  }

  public OrderItemDTO partnerWarehouseId(String partnerWarehouseId) {
    this.partnerWarehouseId = partnerWarehouseId;
    return this;
  }

  /**
   * Информация о вознаграждениях партнеру за скидки на товар по промокодам, купонам и акциям.
   * @return promos
   **/
  public List<OrderItemPromoDTO> getPromos() {
    return promos;
  }

  /**
   * Set promos
   */
  public void setPromos(List<OrderItemPromoDTO> promos) {
    this.promos = promos;
  }

  public OrderItemDTO promos(List<OrderItemPromoDTO> promos) {
    this.promos = promos;
    return this;
  }

  public OrderItemDTO addPromosItem(OrderItemPromoDTO promosItem) {
    if (this.promos == null) {
      this.promos = new ArrayList<>();
    }
    this.promos.add(promosItem);
    return this;
  }

  /**
   * Информация о маркировке единиц товара.  Возвращаются данные для маркировки, переданные в запросе [PUT campaigns/{campaignId}/orders/{orderId}/cis](../../reference/orders/provideOrderItemCis.md).  Если магазин еще не передавал коды для этого заказа, &#x60;instances&#x60; отсутствует. 
   * @return instances
   **/
  public List<OrderItemInstanceDTO> getInstances() {
    return instances;
  }

  /**
   * Set instances
   */
  public void setInstances(List<OrderItemInstanceDTO> instances) {
    this.instances = instances;
  }

  public OrderItemDTO instances(List<OrderItemInstanceDTO> instances) {
    this.instances = instances;
    return this;
  }

  public OrderItemDTO addInstancesItem(OrderItemInstanceDTO instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * Информация об удалении товара из заказа. 
   * @return details
   **/
  public List<OrderItemDetailDTO> getDetails() {
    return details;
  }

  /**
   * Set details
   */
  public void setDetails(List<OrderItemDetailDTO> details) {
    this.details = details;
  }

  public OrderItemDTO details(List<OrderItemDetailDTO> details) {
    this.details = details;
    return this;
  }

  public OrderItemDTO addDetailsItem(OrderItemDetailDTO detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * Список субсидий по типам.
   * @return subsidies
   **/
  public List<OrderItemSubsidyDTO> getSubsidies() {
    return subsidies;
  }

  /**
   * Set subsidies
   */
  public void setSubsidies(List<OrderItemSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
  }

  public OrderItemDTO subsidies(List<OrderItemSubsidyDTO> subsidies) {
    this.subsidies = subsidies;
    return this;
  }

  public OrderItemDTO addSubsidiesItem(OrderItemSubsidyDTO subsidiesItem) {
    if (this.subsidies == null) {
      this.subsidies = new ArrayList<>();
    }
    this.subsidies.add(subsidiesItem);
    return this;
  }

  /**
   * Список необходимых маркировок товара.
   * @return requiredInstanceTypes
   **/
  public List<OrderItemInstanceType> getRequiredInstanceTypes() {
    return requiredInstanceTypes;
  }

  /**
   * Set requiredInstanceTypes
   */
  public void setRequiredInstanceTypes(List<OrderItemInstanceType> requiredInstanceTypes) {
    this.requiredInstanceTypes = requiredInstanceTypes;
  }

  public OrderItemDTO requiredInstanceTypes(List<OrderItemInstanceType> requiredInstanceTypes) {
    this.requiredInstanceTypes = requiredInstanceTypes;
    return this;
  }

  public OrderItemDTO addRequiredInstanceTypesItem(OrderItemInstanceType requiredInstanceTypesItem) {
    if (this.requiredInstanceTypes == null) {
      this.requiredInstanceTypes = new ArrayList<>();
    }
    this.requiredInstanceTypes.add(requiredInstanceTypesItem);
    return this;
  }


  /**
   * Create a string representation of this pojo.
   */
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderItemDTO {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerName: ").append(toIndentedString(offerName)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    buyerPrice: ").append(toIndentedString(buyerPrice)).append("\n");
    sb.append("    buyerPriceBeforeDiscount: ").append(toIndentedString(buyerPriceBeforeDiscount)).append("\n");
    sb.append("    priceBeforeDiscount: ").append(toIndentedString(priceBeforeDiscount)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    vat: ").append(toIndentedString(vat)).append("\n");
    sb.append("    shopSku: ").append(toIndentedString(shopSku)).append("\n");
    sb.append("    subsidy: ").append(toIndentedString(subsidy)).append("\n");
    sb.append("    partnerWarehouseId: ").append(toIndentedString(partnerWarehouseId)).append("\n");
    sb.append("    promos: ").append(toIndentedString(promos)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    subsidies: ").append(toIndentedString(subsidies)).append("\n");
    sb.append("    requiredInstanceTypes: ").append(toIndentedString(requiredInstanceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

