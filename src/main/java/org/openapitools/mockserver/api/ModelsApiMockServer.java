/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class ModelsApiMockServer {

    public static MappingBuilder stubGetModel200(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModel400(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModel401(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModel403(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModel404(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModel420(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModel500(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelFault(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static String getModel200ResponseSample1() {
        return "{ \"models\" : [ { \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 } }, { \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 } } ], \"regionId\" : 0, \"currency\" : \"RUR\" }";
    }
    public static String getModel400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModel401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModel403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModel404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModel420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModel500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetModelOffers200(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffers400(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffers401(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffers403(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffers404(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffers420(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffers500(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, String response) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelOffersFault(@javax.annotation.Nonnull String modelId, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, @javax.annotation.Nullable String count, @javax.annotation.Nullable String page, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/models/{modelId}/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("modelId", equalTo(modelId));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }
        if(count != null) {
            stub = stub.withQueryParam("count", equalTo(count));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }

        return stub;
    }

    public static String getModelOffers200ResponseSample1() {
        return "{ \"models\" : [ { \"offers\" : [ { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 }, { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 } ], \"onlineOffers\" : 4, \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 }, \"offlineOffers\" : 2 }, { \"offers\" : [ { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 }, { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 } ], \"onlineOffers\" : 4, \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 }, \"offlineOffers\" : 2 } ], \"regionId\" : 7, \"currency\" : \"RUR\" }";
    }
    public static String getModelOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetModels200(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModels400(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModels401(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModels403(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModels404(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModels420(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModels500(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsFault(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }

        return stub;
    }

    public static String getModels200ResponseSample1() {
        return "{ \"models\" : [ { \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 } }, { \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 } } ], \"regionId\" : 0, \"currency\" : \"RUR\" }";
    }
    public static String getModels400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModels401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModels403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModels404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModels420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModels500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getModelsRequestSample1() {
        return "{ \"models\" : [ 0, 0 ] }";
    }


    public static MappingBuilder stubGetModelsOffers200(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffers400(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffers401(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffers403(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffers404(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffers420(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffers500(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, String response) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static MappingBuilder stubGetModelsOffersFault(@javax.annotation.Nonnull String regionId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String orderByPrice, Fault fault) {
        MappingBuilder stub = post(urlPathEqualTo("/models/offers"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(orderByPrice != null) {
            stub = stub.withQueryParam("orderByPrice", equalTo(orderByPrice));
        }

        return stub;
    }

    public static String getModelsOffers200ResponseSample1() {
        return "{ \"models\" : [ { \"offers\" : [ { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 }, { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 } ], \"onlineOffers\" : 4, \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 }, \"offlineOffers\" : 2 }, { \"offers\" : [ { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 }, { \"shopRating\" : 9, \"preDiscountPrice\" : 5.962133916683182, \"shippingCost\" : 7.061401241503109, \"pos\" : 1, \"regionId\" : 2, \"price\" : 5.637376656633329, \"name\" : \"name\", \"discount\" : 6, \"shopName\" : \"shopName\", \"inStock\" : 3 } ], \"onlineOffers\" : 4, \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 }, \"offlineOffers\" : 2 } ], \"regionId\" : 7, \"currency\" : \"RUR\" }";
    }
    public static String getModelsOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelsOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelsOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelsOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelsOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getModelsOffers500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getModelsOffersRequestSample1() {
        return "{ \"models\" : [ 0, 0 ] }";
    }


    public static MappingBuilder stubSearchModels200(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModels400(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModels401(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModels403(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModels404(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModels420(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModels500(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchModelsFault(@javax.annotation.Nonnull String query, @javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String currency, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/models"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withQueryParam("query", equalTo(query));
        stub = stub.withQueryParam("regionId", equalTo(regionId));
        if(currency != null) {
            stub = stub.withQueryParam("currency", equalTo(currency));
        }
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String searchModels200ResponseSample1() {
        return "{ \"models\" : [ { \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 } }, { \"name\" : \"name\", \"id\" : 0, \"prices\" : { \"avg\" : 6.027456183070403, \"min\" : 5.962133916683182, \"max\" : 1.4658129805029452 } } ], \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 }, \"regionId\" : 5, \"currency\" : \"RUR\" }";
    }
    public static String searchModels400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchModels401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchModels403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchModels404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchModels420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchModels500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



}
