/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class FeedsApiMockServer {

    @Deprecated
    public static MappingBuilder stubGetFeed200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeed500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static MappingBuilder stubGetFeedFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static String getFeed200ResponseSample1() {
        return "{ \"feed\" : { \"password\" : \"password\", \"download\" : { \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 5 } }, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publication\" : { \"priceAndStockUpdate\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"full\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"name\" : \"name\", \"id\" : 0, \"placement\" : { \"totalOffersCount\" : 5 }, \"login\" : \"login\", \"url\" : \"url\", \"content\" : { \"rejectedOffersCount\" : 6, \"error\" : { \"type\" : \"PARSE_ERROR\" }, \"status\" : \"ERROR\", \"totalOffersCount\" : 1 } } }";
    }
    public static String getFeed400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeed500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedIndexLogs500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    public static MappingBuilder stubGetFeedIndexLogsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String publishedTimeFrom, @javax.annotation.Nullable String publishedTimeTo, @javax.annotation.Nullable String status, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/index-logs"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(publishedTimeFrom != null) {
            stub = stub.withQueryParam("publishedTimeFrom", equalTo(publishedTimeFrom));
        }
        if(publishedTimeTo != null) {
            stub = stub.withQueryParam("publishedTimeTo", equalTo(publishedTimeTo));
        }
        if(status != null) {
            stub = stub.withQueryParam("status", equalTo(status));
        }

        return stub;
    }

    public static String getFeedIndexLogs200ResponseSample1() {
        return "{ \"result\" : { \"feed\" : { \"id\" : 0 }, \"total\" : 2, \"indexLogRecords\" : [ { \"offers\" : { \"rejectedCount\" : 5, \"totalCount\" : 5 }, \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"generationId\" : 6, \"indexType\" : \"DIFF\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\", \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 1 }, \"downloadTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"ERROR\" }, { \"offers\" : { \"rejectedCount\" : 5, \"totalCount\" : 5 }, \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"generationId\" : 6, \"indexType\" : \"DIFF\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\", \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 1 }, \"downloadTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"ERROR\" } ] }, \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedIndexLogs500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubGetFeeds200(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds400(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds401(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds403(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds404(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds420(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeeds500(@javax.annotation.Nonnull String campaignId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubGetFeedsFault(@javax.annotation.Nonnull String campaignId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feeds"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String getFeeds200ResponseSample1() {
        return "{ \"feeds\" : [ { \"password\" : \"password\", \"download\" : { \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 5 } }, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publication\" : { \"priceAndStockUpdate\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"full\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"name\" : \"name\", \"id\" : 0, \"placement\" : { \"totalOffersCount\" : 5 }, \"login\" : \"login\", \"url\" : \"url\", \"content\" : { \"rejectedOffersCount\" : 6, \"error\" : { \"type\" : \"PARSE_ERROR\" }, \"status\" : \"ERROR\", \"totalOffersCount\" : 1 } }, { \"password\" : \"password\", \"download\" : { \"error\" : { \"description\" : \"description\", \"type\" : \"DOWNLOAD_ERROR\", \"httpStatusCode\" : 5 } }, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"publication\" : { \"priceAndStockUpdate\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" }, \"full\" : { \"fileTime\" : \"2000-01-23T04:56:07.000+00:00\", \"publishedTime\" : \"2000-01-23T04:56:07.000+00:00\" } }, \"name\" : \"name\", \"id\" : 0, \"placement\" : { \"totalOffersCount\" : 5 }, \"login\" : \"login\", \"url\" : \"url\", \"content\" : { \"rejectedOffersCount\" : 6, \"error\" : { \"type\" : \"PARSE_ERROR\" }, \"status\" : \"ERROR\", \"totalOffersCount\" : 1 } } ] }";
    }
    public static String getFeeds400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeeds500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubRefreshFeed200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubRefreshFeed500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static MappingBuilder stubRefreshFeedFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/refresh"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static String refreshFeed200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String refreshFeed400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String refreshFeed500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    @Deprecated
    public static MappingBuilder stubSetFeedParams200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams423(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubSetFeedParams500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static MappingBuilder stubSetFeedParamsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String feedId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/feeds/{feedId}/params"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("feedId", equalTo(feedId));

        return stub;
    }

    public static String setFeedParams200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String setFeedParams400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setFeedParams500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setFeedParamsRequestSample1() {
        return "{ \"parameters\" : [ { \"deleted\" : true, \"values\" : [ 0, 0 ], \"name\" : \"name\" }, { \"deleted\" : true, \"values\" : [ 0, 0 ], \"name\" : \"name\" } ] }";
    }


}
