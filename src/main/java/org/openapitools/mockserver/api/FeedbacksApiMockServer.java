/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class FeedbacksApiMockServer {

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    @Deprecated
    public static MappingBuilder stubGetFeedbackAndCommentUpdates500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    public static MappingBuilder stubGetFeedbackAndCommentUpdatesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String fromDate, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/feedback/updates"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }
        if(fromDate != null) {
            stub = stub.withQueryParam("fromDate", equalTo(fromDate));
        }

        return stub;
    }

    public static String getFeedbackAndCommentUpdates200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"feedbackList\" : [ { \"comments\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"shop\" : { \"name\" : \"name\" }, \"author\" : { \"name\" : \"name\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } }, \"verified\" : true, \"recommend\" : true, \"grades\" : { \"average\" : 5.962133916683182, \"agreeCount\" : 5, \"rejectCount\" : 2, \"factors\" : [ { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 }, { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 } ] }, \"pro\" : \"pro\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"text\" : \"text\", \"state\" : \"LAST\", \"contra\" : \"contra\", \"resolved\" : true, \"order\" : { \"delivery\" : \"DELIVERY\", \"shopOrderId\" : \"shopOrderId\" } }, { \"comments\" : [ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"children\" : [ null, null ], \"author\" : { \"name\" : \"name\", \"type\" : \"USER\" }, \"id\" : 6, \"body\" : \"body\", \"parentId\" : 1, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"shop\" : { \"name\" : \"name\" }, \"author\" : { \"name\" : \"name\", \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } }, \"verified\" : true, \"recommend\" : true, \"grades\" : { \"average\" : 5.962133916683182, \"agreeCount\" : 5, \"rejectCount\" : 2, \"factors\" : [ { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 }, { \"description\" : \"description\", \"id\" : 7, \"title\" : \"title\", \"value\" : 9 } ] }, \"pro\" : \"pro\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"text\" : \"text\", \"state\" : \"LAST\", \"contra\" : \"contra\", \"resolved\" : true, \"order\" : { \"delivery\" : \"DELIVERY\", \"shopOrderId\" : \"shopOrderId\" } } ] }, \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getFeedbackAndCommentUpdates500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



}
