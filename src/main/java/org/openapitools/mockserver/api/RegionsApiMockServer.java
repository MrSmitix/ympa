/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class RegionsApiMockServer {

    public static MappingBuilder stubSearchRegionChildren200(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren400(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren401(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren403(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren404(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren420(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildren500(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionChildrenFault(@javax.annotation.Nonnull String regionId, @javax.annotation.Nullable String page, @javax.annotation.Nullable String pageSize, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}/children"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));
        if(page != null) {
            stub = stub.withQueryParam("page", equalTo(page));
        }
        if(pageSize != null) {
            stub = stub.withQueryParam("pageSize", equalTo(pageSize));
        }

        return stub;
    }

    public static String searchRegionChildren200ResponseSample1() {
        return "{ \"regions\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 } }";
    }
    public static String searchRegionChildren400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionChildren500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchRegionsById200(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById401(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById403(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById404(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById420(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsById500(@javax.annotation.Nonnull String regionId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByIdFault(@javax.annotation.Nonnull String regionId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/regions/{regionId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("regionId", equalTo(regionId));

        return stub;
    }

    public static String searchRegionsById200ResponseSample1() {
        return "{ \"regions\" : [ { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String searchRegionsById401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsById500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchRegionsByName200(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName401(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName403(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName420(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByName500(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchRegionsByNameFault(@javax.annotation.Nonnull String name, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = get(urlPathEqualTo("/regions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withQueryParam("name", equalTo(name));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String searchRegionsByName200ResponseSample1() {
        return "{ \"regions\" : [ { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" } ], \"paging\" : { \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String searchRegionsByName401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsByName403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsByName420ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchRegionsByName500ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



}
