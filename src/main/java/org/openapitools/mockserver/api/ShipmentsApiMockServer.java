/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class ShipmentsApiMockServer {

    public static MappingBuilder stubConfirmShipment200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipment500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubConfirmShipmentFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/confirm"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String confirmShipment200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String confirmShipment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String confirmShipment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String confirmShipmentRequestSample1() {
        return "{ \"externalShipmentId\" : \"externalShipmentId\" }";
    }


    public static MappingBuilder stubDownloadShipmentAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentDiscrepancyAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentDiscrepancyActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/discrepancy-act"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentDiscrepancyAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentDiscrepancyAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentInboundAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentInboundActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/inbound-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentInboundAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentInboundAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentPalletLabels200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabels500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentPalletLabelsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String format, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallet/labels"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(format != null) {
            stub = stub.withQueryParam("format", equalTo(format));
        }

        return stub;
    }

    public static String downloadShipmentPalletLabels400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentPalletLabels500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentReceptionTransferAct200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferAct500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/pdf")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentReceptionTransferActFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String warehouseId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/shipments/reception-transfer-act"))
            .withHeader("Accept", havingExactly("application/pdf", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(warehouseId != null) {
            stub = stub.withQueryParam("warehouseId", equalTo(warehouseId));
        }

        return stub;
    }

    public static String downloadShipmentReceptionTransferAct400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentReceptionTransferAct500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubDownloadShipmentTransportationWaybill200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybill500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/vnd.ms-excel")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubDownloadShipmentTransportationWaybillFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/transportation-waybill"))
            .withHeader("Accept", havingExactly("application/vnd.ms-excel", "application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String downloadShipmentTransportationWaybill400ResponseSample1() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill401ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill403ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill404ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill420ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String downloadShipmentTransportationWaybill500ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetShipment200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipment500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static MappingBuilder stubGetShipmentFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nullable String cancelledOrders, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));
        if(cancelledOrders != null) {
            stub = stub.withQueryParam("cancelledOrders", equalTo(cancelledOrders));
        }

        return stub;
    }

    public static String getShipment200ResponseSample1() {
        return "{ \"result\" : { \"deliveryService\" : { \"name\" : \"name\", \"id\" : 1 }, \"availableActions\" : [ \"CONFIRM\", \"CONFIRM\" ], \"draftCount\" : 7, \"plannedCount\" : 9, \"currentStatus\" : { \"description\" : \"description\", \"updateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"OUTBOUND_CREATED\" }, \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\", \"externalId\" : \"externalId\", \"warehouse\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"shipmentType\" : \"IMPORT\", \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"warehouseTo\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"factCount\" : 3, \"palletsCount\" : { \"fact\" : 5, \"planned\" : 5 }, \"id\" : 0, \"orderIds\" : [ 2, 2 ] }, \"status\" : \"OK\" }";
    }
    public static String getShipment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetShipmentOrdersInfo200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfo500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubGetShipmentOrdersInfoFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/info"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String getShipmentOrdersInfo200ResponseSample1() {
        return "{ \"result\" : { \"orderIdsWithLabels\" : [ 0, 0 ], \"orderIdsWithoutLabels\" : [ 6, 6 ] }, \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getShipmentOrdersInfo500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubSearchShipments200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipments500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubSearchShipmentsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String searchShipments200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"nextPageToken\" : \"nextPageToken\" }, \"shipments\" : [ { \"deliveryService\" : { \"name\" : \"name\", \"id\" : 1 }, \"draftCount\" : 1, \"plannedCount\" : 5, \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\", \"externalId\" : \"externalId\", \"warehouse\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"shipmentType\" : \"IMPORT\", \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"statusDescription\" : \"statusDescription\", \"warehouseTo\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"factCount\" : 5, \"palletsCount\" : { \"fact\" : 5, \"planned\" : 5 }, \"id\" : 0, \"orderIds\" : [ 6, 6 ], \"statusUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"OUTBOUND_CREATED\" }, { \"deliveryService\" : { \"name\" : \"name\", \"id\" : 1 }, \"draftCount\" : 1, \"plannedCount\" : 5, \"planIntervalTo\" : \"2000-01-23T04:56:07.000+00:00\", \"externalId\" : \"externalId\", \"warehouse\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"shipmentType\" : \"IMPORT\", \"planIntervalFrom\" : \"2000-01-23T04:56:07.000+00:00\", \"statusDescription\" : \"statusDescription\", \"warehouseTo\" : { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 6 }, \"factCount\" : 5, \"palletsCount\" : { \"fact\" : 5, \"planned\" : 5 }, \"id\" : 0, \"orderIds\" : [ 6, 6 ], \"statusUpdateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"OUTBOUND_CREATED\" } ] }, \"status\" : \"OK\" }";
    }
    public static String searchShipments400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String searchShipments500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String searchShipmentsRequestSample1() {
        return "{ \"cancelledOrders\" : true, \"dateTo\" : \"2000-01-23\", \"statuses\" : [ \"OUTBOUND_CREATED\", \"OUTBOUND_CREATED\" ], \"orderIds\" : [ 0, 0 ], \"dateFrom\" : \"2000-01-23\" }";
    }


    public static MappingBuilder stubSetShipmentPalletsCount200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCount500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubSetShipmentPalletsCountFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/pallets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String setShipmentPalletsCount200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String setShipmentPalletsCount500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String setShipmentPalletsCountRequestSample1() {
        return "{ \"placesCount\" : 0 }";
    }


    public static MappingBuilder stubTransferOrdersFromShipment200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipment500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static MappingBuilder stubTransferOrdersFromShipmentFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String shipmentId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/first-mile/shipments/{shipmentId}/orders/transfer"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("shipmentId", equalTo(shipmentId));

        return stub;
    }

    public static String transferOrdersFromShipment200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String transferOrdersFromShipment500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String transferOrdersFromShipmentRequestSample1() {
        return "{ \"orderIds\" : [ 0, 0, 0, 0, 0 ] }";
    }


}
