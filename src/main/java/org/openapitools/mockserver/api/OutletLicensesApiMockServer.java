/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class OutletLicensesApiMockServer {

    public static MappingBuilder stubDeleteOutletLicenses200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicenses400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicenses401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicenses403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicenses404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicenses420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicenses500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubDeleteOutletLicensesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String ids, Fault fault) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static String deleteOutletLicenses200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String deleteOutletLicenses400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutletLicenses401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutletLicenses403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutletLicenses404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutletLicenses420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutletLicenses500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOutletLicenses200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicenses400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicenses401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicenses403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicenses404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicenses420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicenses500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletLicensesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String outletIds, @javax.annotation.Nullable String ids, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(outletIds != null) {
            stub = stub.withQueryParam("outletIds", equalTo(outletIds));
        }
        if(ids != null) {
            stub = stub.withQueryParam("ids", equalTo(ids));
        }

        return stub;
    }

    public static String getOutletLicenses200ResponseSample1() {
        return "{ \"result\" : { \"licenses\" : [ { \"licenseType\" : \"ALCOHOL\", \"number\" : \"number\", \"dateOfExpiry\" : \"2000-01-23T04:56:07.000+00:00\", \"checkStatus\" : \"NEW\", \"outletId\" : 6, \"id\" : 0, \"dateOfIssue\" : \"2000-01-23T04:56:07.000+00:00\", \"checkComment\" : \"checkComment\" }, { \"licenseType\" : \"ALCOHOL\", \"number\" : \"number\", \"dateOfExpiry\" : \"2000-01-23T04:56:07.000+00:00\", \"checkStatus\" : \"NEW\", \"outletId\" : 6, \"id\" : 0, \"dateOfIssue\" : \"2000-01-23T04:56:07.000+00:00\", \"checkComment\" : \"checkComment\" } ] }, \"status\" : \"OK\" }";
    }
    public static String getOutletLicenses400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutletLicenses401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutletLicenses403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutletLicenses404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutletLicenses420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutletLicenses500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubUpdateOutletLicenses200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicenses400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicenses401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicenses403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicenses404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicenses420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicenses500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletLicensesFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets/licenses"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String updateOutletLicenses200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateOutletLicenses400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutletLicenses401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutletLicenses403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutletLicenses404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutletLicenses420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutletLicenses500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOutletLicensesRequestSample1() {
        return "{ \"licenses\" : [ { \"licenseType\" : \"ALCOHOL\", \"number\" : \"number\", \"dateOfExpiry\" : \"2000-01-23T04:56:07.000+00:00\", \"outletId\" : 6, \"id\" : 0, \"dateOfIssue\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"licenseType\" : \"ALCOHOL\", \"number\" : \"number\", \"dateOfExpiry\" : \"2000-01-23T04:56:07.000+00:00\", \"outletId\" : 6, \"id\" : 0, \"dateOfIssue\" : \"2000-01-23T04:56:07.000+00:00\" } ] }";
    }


}
