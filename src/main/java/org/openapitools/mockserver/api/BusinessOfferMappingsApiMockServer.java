/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class BusinessOfferMappingsApiMockServer {

    public static MappingBuilder stubAddOffersToArchive200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchive500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubAddOffersToArchiveFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/archive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String addOffersToArchive200ResponseSample1() {
        return "{ \"result\" : { \"notArchivedOffers\" : [ { \"offerId\" : \"offerId\", \"error\" : \"OFFER_HAS_STOCKS\" }, { \"offerId\" : \"offerId\", \"error\" : \"OFFER_HAS_STOCKS\" } ] }, \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String addOffersToArchive500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String addOffersToArchiveRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubDeleteOffers200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffers500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/delete"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String deleteOffers200ResponseSample1() {
        return "{ \"result\" : { \"notDeletedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
    }
    public static String deleteOffers400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffers500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteOffersRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubDeleteOffersFromArchive200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchive500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubDeleteOffersFromArchiveFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/unarchive"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String deleteOffersFromArchive200ResponseSample1() {
        return "{ \"result\" : { \"notUnarchivedOfferIds\" : [ null, null ] }, \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOffersFromArchive500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String deleteOffersFromArchiveRequestSample1() {
        return "{ \"offerIds\" : [ null, null, null, null, null ] }";
    }


    public static MappingBuilder stubGetOfferMappings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static MappingBuilder stubGetOfferMappingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String limit, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(limit != null) {
            stub = stub.withQueryParam("limit", equalTo(limit));
        }

        return stub;
    }

    public static String getOfferMappings200ResponseSample1() {
        return "{ \"result\" : { \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" }, \"offerMappings\" : [ { \"offer\" : { \"downloadable\" : true, \"sellingPrograms\" : [ { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" }, { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" } ], \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"archived\" : true, \"campaigns\" : [ { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" }, { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" } ], \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 1, \"additionalExpenses\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } }, { \"offer\" : { \"downloadable\" : true, \"sellingPrograms\" : [ { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" }, { \"sellingProgram\" : \"FBY\", \"status\" : \"FINE\" } ], \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"archived\" : true, \"campaigns\" : [ { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" }, { \"campaignId\" : 9, \"status\" : \"PUBLISHED\" } ], \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.23021358869347652, \"currencyId\" : \"RUR\", \"value\" : 0.5637376656633328, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"cardStatus\" : \"HAS_CARD_CAN_NOT_UPDATE\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 1, \"additionalExpenses\" : { \"value\" : 0.7061401241503109, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } } ] }, \"status\" : \"OK\" }";
    }
    public static String getOfferMappings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOfferMappings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getOfferMappingsRequestSample1() {
        return "{ \"archived\" : true, \"categoryIds\" : [ 0, 0 ], \"vendorNames\" : [ \"vendorNames\", \"vendorNames\" ], \"offerIds\" : [ null, null, null, null, null ], \"cardStatuses\" : [ \"HAS_CARD_CAN_NOT_UPDATE\", \"HAS_CARD_CAN_NOT_UPDATE\" ], \"tags\" : [ \"tags\", \"tags\" ] }";
    }


    public static MappingBuilder stubGetSuggestedOfferMappings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubGetSuggestedOfferMappingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nullable String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/suggestions"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String getSuggestedOfferMappings200ResponseSample1() {
        return "{ \"result\" : { \"offers\" : [ { \"offer\" : { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } }, { \"offer\" : { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, \"mapping\" : { \"marketSkuName\" : \"marketSkuName\", \"marketCategoryName\" : \"marketCategoryName\", \"marketCategoryId\" : 4, \"marketSku\" : 3, \"marketModelId\" : 2, \"marketModelName\" : \"marketModelName\" } } ] }, \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getSuggestedOfferMappings500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String getSuggestedOfferMappingsRequestSample1() {
        return "{ \"offers\" : [ { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" }, { \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"description\" : \"description\", \"category\" : \"category\", \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"vendorCode\" : \"VNDR-0005A\" } ] }";
    }


    public static MappingBuilder stubUpdateOfferMappings200(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings400(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings401(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings403(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings404(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings420(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings423(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(423)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappings500(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static MappingBuilder stubUpdateOfferMappingsFault(@javax.annotation.Nonnull String businessId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/businesses/{businessId}/offer-mappings/update"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("businessId", equalTo(businessId));

        return stub;
    }

    public static String updateOfferMappings200ResponseSample1() {
        return "{ \"results\" : [ { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ] }, { \"warnings\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ], \"offerId\" : \"offerId\", \"errors\" : [ { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" }, { \"parameterId\" : 0, \"type\" : \"UNKNOWN_CATEGORY\", \"message\" : \"message\" } ] } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings423ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOfferMappings500ResponseSample8() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOfferMappingsRequestSample1() {
        return "{ \"offerMappings\" : [ { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } }, { \"offer\" : { \"downloadable\" : true, \"marketCategoryId\" : 0, \"manufacturerCountries\" : [ \"Россия\", \"Россия\" ], \"description\" : \"description\", \"videos\" : [ \"videos\", \"videos\", \"videos\", \"videos\", \"videos\" ], \"purchasePrice\" : { \"value\" : 0.9301444243932576 }, \"type\" : \"DEFAULT\", \"pictures\" : [ \"pictures\", \"pictures\" ], \"vendorCode\" : \"VNDR-0005A\", \"vendor\" : \"LEVENHUK\", \"basicPrice\" : { \"discountBase\" : 0.7061401241503109, \"currencyId\" : \"RUR\", \"value\" : 0.23021358869347652 }, \"lifeTime\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"shelfLife\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"cofinancePrice\" : { \"value\" : 0.9301444243932576 }, \"parameterValues\" : [ { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" }, { \"valueId\" : 5, \"parameterId\" : 1, \"unitId\" : 5, \"value\" : \"value\" } ], \"barcodes\" : [ \"46012300000000\", \"46012300000000\" ], \"params\" : [ { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" }, { \"name\" : \"Wi-Fi\", \"value\" : \"есть\" } ], \"tags\" : [ \"до 500 рублей\", \"до 500 рублей\" ], \"condition\" : { \"reason\" : \"reason\", \"type\" : \"PREOWNED\", \"quality\" : \"PERFECT\" }, \"certificates\" : [ \"certificates\", \"certificates\" ], \"boxCount\" : 6, \"additionalExpenses\" : { \"value\" : 0.9301444243932576 }, \"name\" : \"Ударная дрель Makita HP1630, 710 Вт\", \"offerId\" : \"offerId\", \"guaranteePeriod\" : { \"timePeriod\" : 6, \"comment\" : \"comment\", \"timeUnit\" : \"HOUR\" }, \"weightDimensions\" : { \"length\" : 65.55, \"width\" : 50.7, \"weight\" : 1.001, \"height\" : 20 }, \"category\" : \"category\", \"customsCommodityCode\" : \"8517610008\", \"adult\" : true, \"age\" : { \"ageUnit\" : \"YEAR\", \"value\" : 0.5962133916683182 }, \"manuals\" : [ { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" }, { \"title\" : \"title\", \"url\" : \"url\" } ] }, \"mapping\" : { \"marketSku\" : 3 } } ], \"onlyPartnerMediaContent\" : true }";
    }


}
