/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.mockserver.api;

import static com.github.tomakehurst.wiremock.client.WireMock.*;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import com.github.tomakehurst.wiremock.http.Fault;

public class OutletsApiMockServer {

    public static MappingBuilder stubCreateOutlet200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutlet400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutlet401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutlet403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutlet404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutlet420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutlet500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static MappingBuilder stubCreateOutletFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = post(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));

        return stub;
    }

    public static String createOutlet200ResponseSample1() {
        return "{ \"result\" : { \"id\" : 0 }, \"status\" : \"OK\" }";
    }
    public static String createOutlet400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createOutlet401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createOutlet403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createOutlet404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createOutlet420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String createOutlet500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String createOutletRequestSample1() {
        return "{ \"storagePeriod\" : 0, \"address\" : { \"number\" : \"number\", \"km\" : 6, \"regionId\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"additional\" : \"additional\", \"estate\" : \"estate\", \"block\" : \"block\", \"building\" : \"building\" }, \"visibility\" : \"HIDDEN\", \"isMain\" : true, \"shopOutletCode\" : \"shopOutletCode\", \"name\" : \"name\", \"phones\" : [ \"phones\", \"phones\" ], \"type\" : \"DEPOT\", \"coords\" : \"coords\", \"workingSchedule\" : { \"scheduleItems\" : [ { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ], \"workInHoliday\" : true }, \"deliveryRules\" : [ { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true }, { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true } ] }";
    }


    public static MappingBuilder stubDeleteOutlet200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutlet400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutlet401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutlet403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutlet404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutlet420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutlet500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubDeleteOutletFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, Fault fault) {
        MappingBuilder stub = delete(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static String deleteOutlet200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String deleteOutlet400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutlet401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutlet403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutlet404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutlet420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String deleteOutlet500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOutlet200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutlet400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutlet401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutlet403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutlet404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutlet420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutlet500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubGetOutletFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static String getOutlet200ResponseSample1() {
        return "{ \"outlet\" : { \"storagePeriod\" : 9, \"address\" : { \"number\" : \"number\", \"km\" : 6, \"regionId\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"additional\" : \"additional\", \"estate\" : \"estate\", \"block\" : \"block\", \"building\" : \"building\" }, \"moderationReason\" : \"moderationReason\", \"visibility\" : \"HIDDEN\", \"isMain\" : true, \"phones\" : [ \"phones\", \"phones\" ], \"workingTime\" : \"workingTime\", \"type\" : \"DEPOT\", \"workingSchedule\" : { \"scheduleItems\" : [ { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ], \"workInHoliday\" : true }, \"shopOutletId\" : \"shopOutletId\", \"shopOutletCode\" : \"shopOutletCode\", \"name\" : \"name\", \"id\" : 3, \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"coords\" : \"coords\", \"deliveryRules\" : [ { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true }, { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true } ], \"status\" : \"AT_MODERATION\" } }";
    }
    public static String getOutlet400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlet401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlet403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlet404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlet420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlet500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubGetOutlets200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutlets400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutlets401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutlets403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutlets404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutlets420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutlets500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, String response) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static MappingBuilder stubGetOutletsFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nullable String pageToken, @javax.annotation.Nullable String regionId, @javax.annotation.Nullable String shopOutletCode, @javax.annotation.Nullable String regionId2, Fault fault) {
        MappingBuilder stub = get(urlPathTemplate("/campaigns/{campaignId}/outlets"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        if(pageToken != null) {
            stub = stub.withQueryParam("pageToken", equalTo(pageToken));
        }
        if(regionId != null) {
            stub = stub.withQueryParam("regionId", equalTo(regionId));
        }
        if(shopOutletCode != null) {
            stub = stub.withQueryParam("shopOutletCode", equalTo(shopOutletCode));
        }
        if(regionId2 != null) {
            stub = stub.withQueryParam("regionId2", equalTo(regionId2));
        }

        return stub;
    }

    public static String getOutlets200ResponseSample1() {
        return "{ \"pager\" : { \"total\" : 1, \"pagesCount\" : 7, \"pageSize\" : 9, \"from\" : 5, \"to\" : 5, \"currentPage\" : 2 }, \"outlets\" : [ { \"storagePeriod\" : 9, \"address\" : { \"number\" : \"number\", \"km\" : 6, \"regionId\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"additional\" : \"additional\", \"estate\" : \"estate\", \"block\" : \"block\", \"building\" : \"building\" }, \"moderationReason\" : \"moderationReason\", \"visibility\" : \"HIDDEN\", \"isMain\" : true, \"phones\" : [ \"phones\", \"phones\" ], \"workingTime\" : \"workingTime\", \"type\" : \"DEPOT\", \"workingSchedule\" : { \"scheduleItems\" : [ { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ], \"workInHoliday\" : true }, \"shopOutletId\" : \"shopOutletId\", \"shopOutletCode\" : \"shopOutletCode\", \"name\" : \"name\", \"id\" : 3, \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"coords\" : \"coords\", \"deliveryRules\" : [ { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true }, { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true } ], \"status\" : \"AT_MODERATION\" }, { \"storagePeriod\" : 9, \"address\" : { \"number\" : \"number\", \"km\" : 6, \"regionId\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"additional\" : \"additional\", \"estate\" : \"estate\", \"block\" : \"block\", \"building\" : \"building\" }, \"moderationReason\" : \"moderationReason\", \"visibility\" : \"HIDDEN\", \"isMain\" : true, \"phones\" : [ \"phones\", \"phones\" ], \"workingTime\" : \"workingTime\", \"type\" : \"DEPOT\", \"workingSchedule\" : { \"scheduleItems\" : [ { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ], \"workInHoliday\" : true }, \"shopOutletId\" : \"shopOutletId\", \"shopOutletCode\" : \"shopOutletCode\", \"name\" : \"name\", \"id\" : 3, \"region\" : { \"children\" : [ null, null ], \"name\" : \"name\", \"id\" : 0, \"type\" : \"OTHER\" }, \"coords\" : \"coords\", \"deliveryRules\" : [ { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true }, { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true } ], \"status\" : \"AT_MODERATION\" } ], \"paging\" : { \"prevPageToken\" : \"prevPageToken\", \"nextPageToken\" : \"nextPageToken\" } }";
    }
    public static String getOutlets400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlets401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlets403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlets404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlets420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String getOutlets500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }



    public static MappingBuilder stubUpdateOutlet200(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(200)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutlet400(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(400)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutlet401(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(401)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutlet403(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(403)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutlet404(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(404)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutlet420(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(420)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutlet500(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, String response) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withStatus(500)
                .withHeader("Content-Type", "application/json")
                .withBody(response)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static MappingBuilder stubUpdateOutletFault(@javax.annotation.Nonnull String campaignId, @javax.annotation.Nonnull String outletId, @javax.annotation.Nonnull String body, Fault fault) {
        MappingBuilder stub = put(urlPathTemplate("/campaigns/{campaignId}/outlets/{outletId}"))
            .withHeader("Accept", havingExactly("application/json"))
            .withHeader("Content-Type", havingExactly("application/json"))
            .withHeader("Authorization", matching(".*"))
            .withRequestBody(equalToJson(body))
            .willReturn(aResponse()
                .withFault(fault)
            );

        stub = stub.withPathParam("campaignId", equalTo(campaignId));
        stub = stub.withPathParam("outletId", equalTo(outletId));

        return stub;
    }

    public static String updateOutlet200ResponseSample1() {
        return "{ \"status\" : \"OK\" }";
    }
    public static String updateOutlet400ResponseSample2() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutlet401ResponseSample3() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutlet403ResponseSample4() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutlet404ResponseSample5() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutlet420ResponseSample6() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }
    public static String updateOutlet500ResponseSample7() {
        return "{ \"errors\" : [ { \"code\" : \"code\", \"message\" : \"message\" }, { \"code\" : \"code\", \"message\" : \"message\" } ], \"status\" : \"OK\" }";
    }

    public static String updateOutletRequestSample1() {
        return "{ \"storagePeriod\" : 0, \"address\" : { \"number\" : \"number\", \"km\" : 6, \"regionId\" : 0, \"city\" : \"city\", \"street\" : \"street\", \"additional\" : \"additional\", \"estate\" : \"estate\", \"block\" : \"block\", \"building\" : \"building\" }, \"visibility\" : \"HIDDEN\", \"isMain\" : true, \"shopOutletCode\" : \"shopOutletCode\", \"name\" : \"name\", \"phones\" : [ \"phones\", \"phones\" ], \"type\" : \"DEPOT\", \"coords\" : \"coords\", \"workingSchedule\" : { \"scheduleItems\" : [ { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" }, { \"startDay\" : \"MONDAY\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\" } ], \"workInHoliday\" : true }, \"deliveryRules\" : [ { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true }, { \"priceFreePickup\" : 7.061401241503109, \"deliveryServiceId\" : 5, \"maxDeliveryDays\" : 5, \"minDeliveryDays\" : 1, \"orderBefore\" : 5, \"unspecifiedDeliveryInterval\" : true } ] }";
    }


}
